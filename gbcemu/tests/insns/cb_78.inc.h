    TEST(gbcemu, opcode_cb_78) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 78 0000
        gbc.setState(0x5e8b, 0xe373, 0xd0f0, 0x12bd, 0x47bd, 0x9d0e, 0x1, 0x1);
        gbc.writeMem(0x5e8b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xe373, gbc.sp());
        EXPECT(0x5e8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0001
        gbc.setState(0x389e, 0x3aad, 0xa60, 0x2a0c, 0x36b3, 0x844c, 0x1, 0x1);
        gbc.writeMem(0x389e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x3aad, gbc.sp());
        EXPECT(0x38a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0002
        gbc.setState(0x3bd9, 0x33ed, 0x8ec0, 0x679, 0xa74b, 0x3400, 0x1, 0x1);
        gbc.writeMem(0x3bd9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x33ed, gbc.sp());
        EXPECT(0x3bdb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0003
        gbc.setState(0x321c, 0x296d, 0xcbc0, 0xabec, 0x5c7d, 0xaa29, 0x1, 0x0);
        gbc.writeMem(0x321c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x296d, gbc.sp());
        EXPECT(0x321e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0004
        gbc.setState(0x95f8, 0x3535, 0x3ae0, 0x6b92, 0x8655, 0xa6e4, 0x1, 0x0);
        gbc.writeMem(0x95f8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x3535, gbc.sp());
        EXPECT(0x95fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95f8));
        EXPECT(0x78, gbc.readMem(0x95f9));
        // CB 78 0005
        gbc.setState(0xda05, 0xb14b, 0xdb10, 0x8bb4, 0x7b7a, 0x126f, 0x1, 0x0);
        gbc.writeMem(0xda05, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xb14b, gbc.sp());
        EXPECT(0xda07, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda05));
        EXPECT(0x78, gbc.readMem(0xda06));
        // CB 78 0006
        gbc.setState(0xb5c5, 0x5604, 0x72b0, 0xd648, 0x8adf, 0xbe99, 0x1, 0x1);
        gbc.writeMem(0xb5c5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x5604, gbc.sp());
        EXPECT(0xb5c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5c5));
        EXPECT(0x78, gbc.readMem(0xb5c6));
        // CB 78 0008
        gbc.setState(0x8206, 0xdb81, 0xa9f0, 0xc126, 0xb3b6, 0xe233, 0x1, 0x0);
        gbc.writeMem(0x8206, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xdb81, gbc.sp());
        EXPECT(0x8208, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8206));
        EXPECT(0x78, gbc.readMem(0x8207));
        // CB 78 000A
        gbc.setState(0x18d5, 0x177, 0x24e0, 0x16ae, 0x624c, 0x10d, 0x1, 0x0);
        gbc.writeMem(0x18d5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x177, gbc.sp());
        EXPECT(0x18d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 000B
        gbc.setState(0x2bd7, 0xc45c, 0x2950, 0xe2a, 0x4cc8, 0x35d9, 0x1, 0x0);
        gbc.writeMem(0x2bd7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xc45c, gbc.sp());
        EXPECT(0x2bd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 000C
        gbc.setState(0x2dea, 0x5c50, 0xf040, 0xb8c5, 0x3ac3, 0x117f, 0x0, 0x1);
        gbc.writeMem(0x2dea, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x5c50, gbc.sp());
        EXPECT(0x2dec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 000D
        gbc.setState(0x2ed3, 0x2536, 0xf2b0, 0x5616, 0xd44f, 0x79c3, 0x1, 0x1);
        gbc.writeMem(0x2ed3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x2536, gbc.sp());
        EXPECT(0x2ed5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 000E
        gbc.setState(0xd533, 0xe671, 0xc9f0, 0xde4c, 0x12a4, 0xbdd6, 0x1, 0x1);
        gbc.writeMem(0xd533, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xe671, gbc.sp());
        EXPECT(0xd535, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd533));
        EXPECT(0x78, gbc.readMem(0xd534));
        // CB 78 000F
        gbc.setState(0xb666, 0x7928, 0x5af0, 0x3336, 0xc924, 0x1d93, 0x1, 0x1);
        gbc.writeMem(0xb666, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x7928, gbc.sp());
        EXPECT(0xb668, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb666));
        EXPECT(0x78, gbc.readMem(0xb667));
        // CB 78 0010
        gbc.setState(0x31b7, 0x30a0, 0x5000, 0x67d2, 0xd7b8, 0x1a4a, 0x1, 0x1);
        gbc.writeMem(0x31b7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x30a0, gbc.sp());
        EXPECT(0x31b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0011
        gbc.setState(0xa8d8, 0x484f, 0x770, 0x24a0, 0xd5a1, 0xe5de, 0x0, 0x0);
        gbc.writeMem(0xa8d8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x484f, gbc.sp());
        EXPECT(0xa8da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8d8));
        EXPECT(0x78, gbc.readMem(0xa8d9));
        // CB 78 0012
        gbc.setState(0x9223, 0x57d6, 0x43b0, 0x2974, 0xf3f1, 0xcd1f, 0x1, 0x0);
        gbc.writeMem(0x9223, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x57d6, gbc.sp());
        EXPECT(0x9225, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9223));
        EXPECT(0x78, gbc.readMem(0x9224));
        // CB 78 0013
        gbc.setState(0x8da8, 0x868e, 0x5aa0, 0x7abf, 0x878c, 0x7515, 0x1, 0x1);
        gbc.writeMem(0x8da8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x868e, gbc.sp());
        EXPECT(0x8daa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8da8));
        EXPECT(0x78, gbc.readMem(0x8da9));
        // CB 78 0015
        gbc.setState(0x3be, 0x7de0, 0x7540, 0x37d9, 0x947, 0xf2f7, 0x1, 0x0);
        gbc.writeMem(0x3be, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x7de0, gbc.sp());
        EXPECT(0x3c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0016
        gbc.setState(0x366a, 0xe5e7, 0xafa0, 0x28c9, 0x8819, 0x6b8f, 0x1, 0x0);
        gbc.writeMem(0x366a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xe5e7, gbc.sp());
        EXPECT(0x366c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0017
        gbc.setState(0xe17c, 0x8076, 0xfd70, 0x4eb, 0x969a, 0xa910, 0x1, 0x0);
        gbc.writeMem(0xe17c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x8076, gbc.sp());
        EXPECT(0xe17e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe17c));
        EXPECT(0x78, gbc.readMem(0xe17d));
        // CB 78 0018
        gbc.setState(0x5d76, 0x93fb, 0x4ad0, 0x9475, 0x7ed3, 0xb86f, 0x1, 0x1);
        gbc.writeMem(0x5d76, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x93fb, gbc.sp());
        EXPECT(0x5d78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0019
        gbc.setState(0xd0fb, 0x7d53, 0xaf10, 0x987b, 0x9087, 0xeaf2, 0x1, 0x1);
        gbc.writeMem(0xd0fb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x7d53, gbc.sp());
        EXPECT(0xd0fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0fb));
        EXPECT(0x78, gbc.readMem(0xd0fc));
        // CB 78 001B
        gbc.setState(0x978b, 0xef82, 0xa9b0, 0x5c99, 0x16d3, 0x2edd, 0x0, 0x0);
        gbc.writeMem(0x978b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xef82, gbc.sp());
        EXPECT(0x978d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x978b));
        EXPECT(0x78, gbc.readMem(0x978c));
        // CB 78 001C
        gbc.setState(0x538a, 0xca30, 0x8250, 0x999d, 0x2dfe, 0x912c, 0x1, 0x1);
        gbc.writeMem(0x538a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xca30, gbc.sp());
        EXPECT(0x538c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 001D
        gbc.setState(0x644c, 0x7791, 0x9cd0, 0xa13f, 0xe5da, 0xbf9b, 0x1, 0x0);
        gbc.writeMem(0x644c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x7791, gbc.sp());
        EXPECT(0x644e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 001E
        gbc.setState(0xc12d, 0x9ae8, 0xe9b0, 0xb12e, 0xb5d6, 0x77da, 0x1, 0x0);
        gbc.writeMem(0xc12d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x9ae8, gbc.sp());
        EXPECT(0xc12f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc12d));
        EXPECT(0x78, gbc.readMem(0xc12e));
        // CB 78 001F
        gbc.setState(0xd2ab, 0x7743, 0xc9e0, 0xf295, 0x8607, 0x1cd, 0x1, 0x0);
        gbc.writeMem(0xd2ab, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x7743, gbc.sp());
        EXPECT(0xd2ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2ab));
        EXPECT(0x78, gbc.readMem(0xd2ac));
        // CB 78 0020
        gbc.setState(0xd41f, 0x2e07, 0xeec0, 0xaf57, 0xfada, 0xcce5, 0x1, 0x0);
        gbc.writeMem(0xd41f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x2e07, gbc.sp());
        EXPECT(0xd421, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd41f));
        EXPECT(0x78, gbc.readMem(0xd420));
        // CB 78 0021
        gbc.setState(0xe410, 0x6e4, 0xb3d0, 0x7f48, 0x82a8, 0xcea3, 0x0, 0x1);
        gbc.writeMem(0xe410, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x6e4, gbc.sp());
        EXPECT(0xe412, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe410));
        EXPECT(0x78, gbc.readMem(0xe411));
        // CB 78 0022
        gbc.setState(0x6c5d, 0xc6d7, 0x8940, 0x5734, 0x33ec, 0xc6f1, 0x0, 0x0);
        gbc.writeMem(0x6c5d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xc6d7, gbc.sp());
        EXPECT(0x6c5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0023
        gbc.setState(0x7043, 0xf2aa, 0x810, 0x85dc, 0x91e2, 0x3cdc, 0x0, 0x0);
        gbc.writeMem(0x7043, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xf2aa, gbc.sp());
        EXPECT(0x7045, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0024
        gbc.setState(0xa60d, 0x2f29, 0xa390, 0xce55, 0x354b, 0x665, 0x1, 0x0);
        gbc.writeMem(0xa60d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x2f29, gbc.sp());
        EXPECT(0xa60f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa60d));
        EXPECT(0x78, gbc.readMem(0xa60e));
        // CB 78 0025
        gbc.setState(0xdd90, 0x9f95, 0xea0, 0xf885, 0xe17a, 0x8915, 0x0, 0x1);
        gbc.writeMem(0xdd90, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x9f95, gbc.sp());
        EXPECT(0xdd92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd90));
        EXPECT(0x78, gbc.readMem(0xdd91));
        // CB 78 0026
        gbc.setState(0x8043, 0x1b3e, 0xbf60, 0xceab, 0x23d8, 0x2e28, 0x1, 0x0);
        gbc.writeMem(0x8043, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x1b3e, gbc.sp());
        EXPECT(0x8045, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8043));
        EXPECT(0x78, gbc.readMem(0x8044));
        // CB 78 0027
        gbc.setState(0x2fde, 0xe982, 0xa5e0, 0xf77c, 0xebb8, 0x5919, 0x1, 0x1);
        gbc.writeMem(0x2fde, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xe982, gbc.sp());
        EXPECT(0x2fe0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0028
        gbc.setState(0x3b4f, 0x4f73, 0xc2e0, 0x4959, 0xae1a, 0x87ed, 0x0, 0x0);
        gbc.writeMem(0x3b4f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x4f73, gbc.sp());
        EXPECT(0x3b51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0029
        gbc.setState(0x8ac2, 0xffd9, 0x6af0, 0x6652, 0x208c, 0x44e7, 0x0, 0x1);
        gbc.writeMem(0x8ac2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xffd9, gbc.sp());
        EXPECT(0x8ac4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ac2));
        EXPECT(0x78, gbc.readMem(0x8ac3));
        // CB 78 002A
        gbc.setState(0x128c, 0xb5ba, 0x7500, 0x905a, 0x8f9c, 0xf2c, 0x0, 0x0);
        gbc.writeMem(0x128c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xb5ba, gbc.sp());
        EXPECT(0x128e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 002B
        gbc.setState(0x8bba, 0x4f14, 0x5e30, 0x173e, 0xa163, 0x6f61, 0x1, 0x1);
        gbc.writeMem(0x8bba, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x4f14, gbc.sp());
        EXPECT(0x8bbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bba));
        EXPECT(0x78, gbc.readMem(0x8bbb));
        // CB 78 002C
        gbc.setState(0x5430, 0x78e1, 0xc030, 0xc55, 0x26b6, 0x7c03, 0x1, 0x0);
        gbc.writeMem(0x5430, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x78e1, gbc.sp());
        EXPECT(0x5432, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 002D
        gbc.setState(0x64a8, 0x784d, 0xd8d0, 0xeb98, 0xa2ce, 0x6ab3, 0x1, 0x1);
        gbc.writeMem(0x64a8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x784d, gbc.sp());
        EXPECT(0x64aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 002E
        gbc.setState(0x930b, 0x4cbb, 0x6500, 0x948b, 0x93cb, 0x7206, 0x0, 0x0);
        gbc.writeMem(0x930b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x4cbb, gbc.sp());
        EXPECT(0x930d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x930b));
        EXPECT(0x78, gbc.readMem(0x930c));
        // CB 78 0030
        gbc.setState(0x2d25, 0xccdb, 0x1c00, 0x2a5d, 0xb1d4, 0xfa22, 0x1, 0x1);
        gbc.writeMem(0x2d25, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xccdb, gbc.sp());
        EXPECT(0x2d27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0031
        gbc.setState(0xa87a, 0x9c4e, 0x5dc0, 0xedb2, 0x4905, 0x1141, 0x0, 0x1);
        gbc.writeMem(0xa87a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x9c4e, gbc.sp());
        EXPECT(0xa87c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa87a));
        EXPECT(0x78, gbc.readMem(0xa87b));
        // CB 78 0032
        gbc.setState(0x1370, 0x3728, 0xfb70, 0x838e, 0x440e, 0xe9f1, 0x0, 0x1);
        gbc.writeMem(0x1370, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x3728, gbc.sp());
        EXPECT(0x1372, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0033
        gbc.setState(0xdbdb, 0x589a, 0xb7d0, 0xaced, 0x2dd3, 0x4397, 0x1, 0x0);
        gbc.writeMem(0xdbdb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x589a, gbc.sp());
        EXPECT(0xdbdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbdb));
        EXPECT(0x78, gbc.readMem(0xdbdc));
        // CB 78 0035
        gbc.setState(0xe347, 0xa7f3, 0x9a90, 0x1c19, 0xa353, 0xdd64, 0x0, 0x1);
        gbc.writeMem(0xe347, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xa7f3, gbc.sp());
        EXPECT(0xe349, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe347));
        EXPECT(0x78, gbc.readMem(0xe348));
        // CB 78 0036
        gbc.setState(0x5d, 0x6e54, 0x12c0, 0x5773, 0x2307, 0x7538, 0x1, 0x1);
        gbc.writeMem(0x5d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x6e54, gbc.sp());
        EXPECT(0x5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0037
        gbc.setState(0x54c3, 0xe957, 0x74d0, 0xfdf9, 0x1b3d, 0xf9, 0x1, 0x0);
        gbc.writeMem(0x54c3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xe957, gbc.sp());
        EXPECT(0x54c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0038
        gbc.setState(0x24ab, 0x6603, 0x3b70, 0x27a9, 0x6c41, 0x6df1, 0x0, 0x1);
        gbc.writeMem(0x24ab, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x6603, gbc.sp());
        EXPECT(0x24ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0039
        gbc.setState(0x89c8, 0xe26d, 0x4be0, 0x8360, 0x2de, 0xbdd4, 0x0, 0x0);
        gbc.writeMem(0x89c8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xe26d, gbc.sp());
        EXPECT(0x89ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89c8));
        EXPECT(0x78, gbc.readMem(0x89c9));
        // CB 78 003A
        gbc.setState(0xd755, 0xf44b, 0x9000, 0xdbb0, 0x2b91, 0xa688, 0x1, 0x0);
        gbc.writeMem(0xd755, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xf44b, gbc.sp());
        EXPECT(0xd757, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd755));
        EXPECT(0x78, gbc.readMem(0xd756));
        // CB 78 003C
        gbc.setState(0x7ae8, 0xbfcb, 0x5e60, 0x75c0, 0x4797, 0xbe59, 0x1, 0x0);
        gbc.writeMem(0x7ae8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xbfcb, gbc.sp());
        EXPECT(0x7aea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 003D
        gbc.setState(0x76fd, 0xee6a, 0x11b0, 0x144e, 0x91f7, 0xb377, 0x0, 0x0);
        gbc.writeMem(0x76fd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xee6a, gbc.sp());
        EXPECT(0x76ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 003E
        gbc.setState(0x5432, 0xba11, 0x3110, 0x2289, 0x9474, 0x45b6, 0x1, 0x0);
        gbc.writeMem(0x5432, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xba11, gbc.sp());
        EXPECT(0x5434, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0040
        gbc.setState(0x5216, 0xff4, 0x7a30, 0x4658, 0x629b, 0x6dd6, 0x0, 0x1);
        gbc.writeMem(0x5216, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xff4, gbc.sp());
        EXPECT(0x5218, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0041
        gbc.setState(0x4cd0, 0x7f4, 0x3f50, 0x1850, 0x7399, 0xf649, 0x1, 0x1);
        gbc.writeMem(0x4cd0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x7f4, gbc.sp());
        EXPECT(0x4cd2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0042
        gbc.setState(0x10f6, 0x7b07, 0x3740, 0xab22, 0xce48, 0x76fb, 0x0, 0x0);
        gbc.writeMem(0x10f6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x7b07, gbc.sp());
        EXPECT(0x10f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0043
        gbc.setState(0x863d, 0x839, 0x6ca0, 0x2c4b, 0xf78, 0x4eaa, 0x0, 0x0);
        gbc.writeMem(0x863d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x839, gbc.sp());
        EXPECT(0x863f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x863d));
        EXPECT(0x78, gbc.readMem(0x863e));
        // CB 78 0044
        gbc.setState(0x98c7, 0x3ab2, 0x7710, 0xe632, 0xe6c6, 0xce8, 0x0, 0x0);
        gbc.writeMem(0x98c7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x3ab2, gbc.sp());
        EXPECT(0x98c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98c7));
        EXPECT(0x78, gbc.readMem(0x98c8));
        // CB 78 0045
        gbc.setState(0x8d4d, 0xe3a1, 0x4b00, 0x9cbc, 0x72b5, 0xefc5, 0x1, 0x0);
        gbc.writeMem(0x8d4d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xe3a1, gbc.sp());
        EXPECT(0x8d4f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d4d));
        EXPECT(0x78, gbc.readMem(0x8d4e));
        // CB 78 0046
        gbc.setState(0x2033, 0x24e6, 0xe850, 0x3e0, 0x8bf3, 0x1e29, 0x0, 0x1);
        gbc.writeMem(0x2033, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x24e6, gbc.sp());
        EXPECT(0x2035, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0047
        gbc.setState(0xaa39, 0x3a23, 0xf080, 0xbec8, 0xef0a, 0x9389, 0x1, 0x0);
        gbc.writeMem(0xaa39, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x3a23, gbc.sp());
        EXPECT(0xaa3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa39));
        EXPECT(0x78, gbc.readMem(0xaa3a));
        // CB 78 0048
        gbc.setState(0x2fbb, 0x32c8, 0x5030, 0x68ed, 0x1e19, 0x76b2, 0x1, 0x0);
        gbc.writeMem(0x2fbb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x32c8, gbc.sp());
        EXPECT(0x2fbd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0049
        gbc.setState(0xccc5, 0xd801, 0xf670, 0xd8fd, 0x7877, 0xf00b, 0x0, 0x1);
        gbc.writeMem(0xccc5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xd801, gbc.sp());
        EXPECT(0xccc7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccc5));
        EXPECT(0x78, gbc.readMem(0xccc6));
        // CB 78 004A
        gbc.setState(0xee45, 0xa91f, 0x33e0, 0x43f2, 0x4115, 0x83e0, 0x0, 0x0);
        gbc.writeMem(0xee45, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xa91f, gbc.sp());
        EXPECT(0xee47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee45));
        EXPECT(0x78, gbc.readMem(0xee46));
        // CB 78 004B
        gbc.setState(0xbe3f, 0xd846, 0x6690, 0xd903, 0xd168, 0x8ef0, 0x0, 0x0);
        gbc.writeMem(0xbe3f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xd846, gbc.sp());
        EXPECT(0xbe41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe3f));
        EXPECT(0x78, gbc.readMem(0xbe40));
        // CB 78 004C
        gbc.setState(0xf24, 0x3aef, 0x9eb0, 0xdedb, 0x7061, 0x5ad6, 0x1, 0x0);
        gbc.writeMem(0xf24, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x3aef, gbc.sp());
        EXPECT(0xf26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 004D
        gbc.setState(0xa9c3, 0x29c1, 0x60a0, 0xf4b7, 0xa941, 0x5340, 0x1, 0x1);
        gbc.writeMem(0xa9c3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x29c1, gbc.sp());
        EXPECT(0xa9c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9c3));
        EXPECT(0x78, gbc.readMem(0xa9c4));
        // CB 78 004E
        gbc.setState(0xe06d, 0x9742, 0x2f30, 0x3a5a, 0x749d, 0x2e81, 0x0, 0x1);
        gbc.writeMem(0xe06d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x9742, gbc.sp());
        EXPECT(0xe06f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe06d));
        EXPECT(0x78, gbc.readMem(0xe06e));
        // CB 78 004F
        gbc.setState(0xb9bf, 0x6bb0, 0xd3d0, 0x1f24, 0x97ec, 0xca15, 0x1, 0x0);
        gbc.writeMem(0xb9bf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x6bb0, gbc.sp());
        EXPECT(0xb9c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9bf));
        EXPECT(0x78, gbc.readMem(0xb9c0));
        // CB 78 0051
        gbc.setState(0x1ad4, 0xd898, 0x7e70, 0x11c3, 0x9aaa, 0xb35b, 0x1, 0x1);
        gbc.writeMem(0x1ad4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xd898, gbc.sp());
        EXPECT(0x1ad6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0052
        gbc.setState(0xbde6, 0x41e4, 0x82b0, 0x8058, 0x8f5, 0xd93b, 0x1, 0x1);
        gbc.writeMem(0xbde6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x41e4, gbc.sp());
        EXPECT(0xbde8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbde6));
        EXPECT(0x78, gbc.readMem(0xbde7));
        // CB 78 0053
        gbc.setState(0x623f, 0xea6f, 0x9590, 0x79c2, 0xeaad, 0x47, 0x0, 0x1);
        gbc.writeMem(0x623f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xea6f, gbc.sp());
        EXPECT(0x6241, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0054
        gbc.setState(0x2ad, 0x5048, 0x6b30, 0x21b3, 0x898d, 0xa264, 0x0, 0x1);
        gbc.writeMem(0x2ad, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x5048, gbc.sp());
        EXPECT(0x2af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0055
        gbc.setState(0xdedf, 0x5a0b, 0x4ba0, 0x7f94, 0xd9ce, 0x46d4, 0x0, 0x1);
        gbc.writeMem(0xdedf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x5a0b, gbc.sp());
        EXPECT(0xdee1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdedf));
        EXPECT(0x78, gbc.readMem(0xdee0));
        // CB 78 0056
        gbc.setState(0x8396, 0x561e, 0x5b60, 0x6f6d, 0x5f6d, 0xe638, 0x0, 0x1);
        gbc.writeMem(0x8396, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x561e, gbc.sp());
        EXPECT(0x8398, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8396));
        EXPECT(0x78, gbc.readMem(0x8397));
        // CB 78 0057
        gbc.setState(0x5c9e, 0x747a, 0x240, 0xd81c, 0x87d7, 0xb53b, 0x1, 0x0);
        gbc.writeMem(0x5c9e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x747a, gbc.sp());
        EXPECT(0x5ca0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0058
        gbc.setState(0xbc26, 0x92ac, 0xa9f0, 0xc121, 0xb67a, 0x3f85, 0x1, 0x0);
        gbc.writeMem(0xbc26, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x92ac, gbc.sp());
        EXPECT(0xbc28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc26));
        EXPECT(0x78, gbc.readMem(0xbc27));
        // CB 78 0059
        gbc.setState(0x48b, 0x31c5, 0x10c0, 0x27f4, 0x5bbb, 0xe08f, 0x1, 0x1);
        gbc.writeMem(0x48b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x31c5, gbc.sp());
        EXPECT(0x48d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 005B
        gbc.setState(0x3633, 0xaf25, 0x96c0, 0xf806, 0xf687, 0x4b42, 0x0, 0x0);
        gbc.writeMem(0x3633, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xaf25, gbc.sp());
        EXPECT(0x3635, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 005C
        gbc.setState(0x128, 0xa8dc, 0x3f10, 0xdc3e, 0x8d3a, 0xc7d1, 0x1, 0x0);
        gbc.writeMem(0x128, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xa8dc, gbc.sp());
        EXPECT(0x12a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 005D
        gbc.setState(0x6d43, 0xe42a, 0xf700, 0xc1a2, 0xb2c0, 0x2d27, 0x1, 0x0);
        gbc.writeMem(0x6d43, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xe42a, gbc.sp());
        EXPECT(0x6d45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 005E
        gbc.setState(0xba7e, 0xe86b, 0xc4e0, 0xc567, 0x4a41, 0x5570, 0x0, 0x1);
        gbc.writeMem(0xba7e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xe86b, gbc.sp());
        EXPECT(0xba80, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba7e));
        EXPECT(0x78, gbc.readMem(0xba7f));
        // CB 78 005F
        gbc.setState(0x240c, 0xc648, 0x2b50, 0xfa8c, 0x310a, 0x6f8b, 0x1, 0x0);
        gbc.writeMem(0x240c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xc648, gbc.sp());
        EXPECT(0x240e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0060
        gbc.setState(0xa205, 0xddc4, 0x3fe0, 0x617a, 0xe540, 0x368f, 0x0, 0x1);
        gbc.writeMem(0xa205, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xddc4, gbc.sp());
        EXPECT(0xa207, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa205));
        EXPECT(0x78, gbc.readMem(0xa206));
        // CB 78 0061
        gbc.setState(0x1717, 0xc096, 0x52c0, 0x341b, 0xd87e, 0xd959, 0x0, 0x1);
        gbc.writeMem(0x1717, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xc096, gbc.sp());
        EXPECT(0x1719, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0062
        gbc.setState(0xcb4a, 0x4aa, 0x4b70, 0x7e1e, 0xe0a2, 0x1ac1, 0x1, 0x0);
        gbc.writeMem(0xcb4a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x4aa, gbc.sp());
        EXPECT(0xcb4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb4a));
        EXPECT(0x78, gbc.readMem(0xcb4b));
        // CB 78 0063
        gbc.setState(0xd6a1, 0xb3c0, 0x8920, 0x24ca, 0x62d, 0x54cf, 0x1, 0x1);
        gbc.writeMem(0xd6a1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xb3c0, gbc.sp());
        EXPECT(0xd6a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6a1));
        EXPECT(0x78, gbc.readMem(0xd6a2));
        // CB 78 0064
        gbc.setState(0x53d0, 0x7c8, 0x7650, 0xd0cd, 0x7e01, 0x5ebe, 0x1, 0x0);
        gbc.writeMem(0x53d0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x7c8, gbc.sp());
        EXPECT(0x53d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0066
        gbc.setState(0xaa1a, 0x35f2, 0x9550, 0xb01c, 0x48af, 0x907d, 0x0, 0x1);
        gbc.writeMem(0xaa1a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x35f2, gbc.sp());
        EXPECT(0xaa1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa1a));
        EXPECT(0x78, gbc.readMem(0xaa1b));
        // CB 78 0068
        gbc.setState(0xad16, 0xb980, 0x82a0, 0x376e, 0x66c, 0x7d95, 0x0, 0x0);
        gbc.writeMem(0xad16, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xb980, gbc.sp());
        EXPECT(0xad18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad16));
        EXPECT(0x78, gbc.readMem(0xad17));
        // CB 78 0069
        gbc.setState(0x673, 0x3c51, 0x39d0, 0xbba5, 0x2984, 0xb34d, 0x1, 0x0);
        gbc.writeMem(0x673, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x3c51, gbc.sp());
        EXPECT(0x675, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 006A
        gbc.setState(0x99e9, 0xd0d4, 0x2060, 0x26da, 0x6b22, 0x6189, 0x1, 0x0);
        gbc.writeMem(0x99e9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xd0d4, gbc.sp());
        EXPECT(0x99eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99e9));
        EXPECT(0x78, gbc.readMem(0x99ea));
        // CB 78 006B
        gbc.setState(0x6cd4, 0x971d, 0xe3d0, 0x55ae, 0xc98c, 0xfd1e, 0x1, 0x0);
        gbc.writeMem(0x6cd4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x971d, gbc.sp());
        EXPECT(0x6cd6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 006E
        gbc.setState(0xd07f, 0xaa9e, 0xe610, 0x4d53, 0x5a17, 0x552b, 0x0, 0x0);
        gbc.writeMem(0xd07f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xaa9e, gbc.sp());
        EXPECT(0xd081, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd07f));
        EXPECT(0x78, gbc.readMem(0xd080));
        // CB 78 006F
        gbc.setState(0x236e, 0x8001, 0xeac0, 0xf7e7, 0xff58, 0x7424, 0x1, 0x1);
        gbc.writeMem(0x236e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x8001, gbc.sp());
        EXPECT(0x2370, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0070
        gbc.setState(0xbaf4, 0x4af1, 0xe20, 0x8468, 0x7228, 0x7bf2, 0x1, 0x0);
        gbc.writeMem(0xbaf4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x4af1, gbc.sp());
        EXPECT(0xbaf6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaf4));
        EXPECT(0x78, gbc.readMem(0xbaf5));
        // CB 78 0071
        gbc.setState(0x3544, 0xb3a4, 0xc1e0, 0xe59c, 0x8b3c, 0x385a, 0x1, 0x0);
        gbc.writeMem(0x3544, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xb3a4, gbc.sp());
        EXPECT(0x3546, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0072
        gbc.setState(0xcf5a, 0x8158, 0x7d10, 0x7318, 0x4e00, 0xc00c, 0x0, 0x1);
        gbc.writeMem(0xcf5a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x8158, gbc.sp());
        EXPECT(0xcf5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf5a));
        EXPECT(0x78, gbc.readMem(0xcf5b));
        // CB 78 0073
        gbc.setState(0x7db5, 0xa8c4, 0x4610, 0xedb, 0xba71, 0x6eee, 0x0, 0x1);
        gbc.writeMem(0x7db5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xa8c4, gbc.sp());
        EXPECT(0x7db7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0075
        gbc.setState(0xe4d5, 0x30a8, 0x1690, 0x8070, 0x72a2, 0xba7b, 0x0, 0x0);
        gbc.writeMem(0xe4d5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x30a8, gbc.sp());
        EXPECT(0xe4d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4d5));
        EXPECT(0x78, gbc.readMem(0xe4d6));
        // CB 78 0077
        gbc.setState(0xe0b8, 0x225f, 0x1120, 0x3f4c, 0x9a93, 0xa603, 0x1, 0x0);
        gbc.writeMem(0xe0b8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x225f, gbc.sp());
        EXPECT(0xe0ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0b8));
        EXPECT(0x78, gbc.readMem(0xe0b9));
        // CB 78 0078
        gbc.setState(0xb56f, 0x95ff, 0xe1b0, 0x9e90, 0x583d, 0x6125, 0x0, 0x0);
        gbc.writeMem(0xb56f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x95ff, gbc.sp());
        EXPECT(0xb571, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb56f));
        EXPECT(0x78, gbc.readMem(0xb570));
        // CB 78 0079
        gbc.setState(0x3866, 0xc0d8, 0xa220, 0x8433, 0x30d4, 0x8983, 0x0, 0x1);
        gbc.writeMem(0x3866, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xc0d8, gbc.sp());
        EXPECT(0x3868, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 007A
        gbc.setState(0x50b3, 0xcbdf, 0x9570, 0xcddb, 0xb96a, 0xa4ae, 0x1, 0x1);
        gbc.writeMem(0x50b3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xcbdf, gbc.sp());
        EXPECT(0x50b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 007B
        gbc.setState(0x58f8, 0x1dc4, 0xeda0, 0xd679, 0x966d, 0xe998, 0x1, 0x0);
        gbc.writeMem(0x58f8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x1dc4, gbc.sp());
        EXPECT(0x58fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 007C
        gbc.setState(0xc121, 0x4ea9, 0x55a0, 0xd3de, 0x6c3c, 0x1ffd, 0x1, 0x1);
        gbc.writeMem(0xc121, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x4ea9, gbc.sp());
        EXPECT(0xc123, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc121));
        EXPECT(0x78, gbc.readMem(0xc122));
        // CB 78 007D
        gbc.setState(0xd5d4, 0x8daa, 0x82b0, 0xf7bb, 0x358, 0x4c6, 0x1, 0x0);
        gbc.writeMem(0xd5d4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x8daa, gbc.sp());
        EXPECT(0xd5d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5d4));
        EXPECT(0x78, gbc.readMem(0xd5d5));
        // CB 78 007E
        gbc.setState(0x8d3c, 0x170d, 0xc110, 0xc94f, 0x6680, 0x8f35, 0x0, 0x1);
        gbc.writeMem(0x8d3c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x170d, gbc.sp());
        EXPECT(0x8d3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d3c));
        EXPECT(0x78, gbc.readMem(0x8d3d));
        // CB 78 007F
        gbc.setState(0x899c, 0xd093, 0x3610, 0x8c5c, 0x8989, 0x750b, 0x1, 0x0);
        gbc.writeMem(0x899c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xd093, gbc.sp());
        EXPECT(0x899e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x899c));
        EXPECT(0x78, gbc.readMem(0x899d));
        // CB 78 0080
        gbc.setState(0xc819, 0x72cb, 0xe930, 0x6502, 0x92c1, 0x9b32, 0x1, 0x1);
        gbc.writeMem(0xc819, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x72cb, gbc.sp());
        EXPECT(0xc81b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc819));
        EXPECT(0x78, gbc.readMem(0xc81a));
        // CB 78 0081
        gbc.setState(0xb154, 0x84a0, 0xa740, 0x2968, 0x95be, 0x9a95, 0x1, 0x1);
        gbc.writeMem(0xb154, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x84a0, gbc.sp());
        EXPECT(0xb156, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb154));
        EXPECT(0x78, gbc.readMem(0xb155));
        // CB 78 0082
        gbc.setState(0x3a40, 0x6c05, 0xa0b0, 0x5426, 0xa03, 0x59e9, 0x0, 0x1);
        gbc.writeMem(0x3a40, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x6c05, gbc.sp());
        EXPECT(0x3a42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0084
        gbc.setState(0x4964, 0x3cf7, 0xc820, 0x7f2b, 0x1ecc, 0xa683, 0x0, 0x1);
        gbc.writeMem(0x4964, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x3cf7, gbc.sp());
        EXPECT(0x4966, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0085
        gbc.setState(0xbaad, 0xb3c8, 0x1a50, 0x7ca3, 0xa69d, 0xf46b, 0x0, 0x0);
        gbc.writeMem(0xbaad, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xb3c8, gbc.sp());
        EXPECT(0xbaaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaad));
        EXPECT(0x78, gbc.readMem(0xbaae));
        // CB 78 0086
        gbc.setState(0x4f4, 0xb12b, 0xdbc0, 0x1986, 0xd8d7, 0xbfc, 0x0, 0x0);
        gbc.writeMem(0x4f4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xb12b, gbc.sp());
        EXPECT(0x4f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0087
        gbc.setState(0xa0ed, 0x4686, 0xd490, 0x10a9, 0x4e42, 0x17db, 0x0, 0x0);
        gbc.writeMem(0xa0ed, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x4686, gbc.sp());
        EXPECT(0xa0ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0ed));
        EXPECT(0x78, gbc.readMem(0xa0ee));
        // CB 78 0088
        gbc.setState(0x7bb5, 0x7217, 0x7010, 0xe0b2, 0xb8c9, 0x50d1, 0x1, 0x1);
        gbc.writeMem(0x7bb5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x7217, gbc.sp());
        EXPECT(0x7bb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0089
        gbc.setState(0x826e, 0x72c7, 0xad0, 0x3a77, 0x5aca, 0x15cb, 0x1, 0x0);
        gbc.writeMem(0x826e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x72c7, gbc.sp());
        EXPECT(0x8270, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x826e));
        EXPECT(0x78, gbc.readMem(0x826f));
        // CB 78 008A
        gbc.setState(0xc33e, 0xda17, 0x620, 0xc9a3, 0xa2d, 0xed21, 0x0, 0x0);
        gbc.writeMem(0xc33e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xda17, gbc.sp());
        EXPECT(0xc340, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc33e));
        EXPECT(0x78, gbc.readMem(0xc33f));
        // CB 78 008B
        gbc.setState(0x87d9, 0xe59c, 0x45d0, 0x4e, 0x2664, 0xccfe, 0x0, 0x1);
        gbc.writeMem(0x87d9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xe59c, gbc.sp());
        EXPECT(0x87db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87d9));
        EXPECT(0x78, gbc.readMem(0x87da));
        // CB 78 008C
        gbc.setState(0xbef8, 0x36d, 0x4720, 0xe4fe, 0xecd7, 0x8e22, 0x1, 0x0);
        gbc.writeMem(0xbef8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x36d, gbc.sp());
        EXPECT(0xbefa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbef8));
        EXPECT(0x78, gbc.readMem(0xbef9));
        // CB 78 008D
        gbc.setState(0x9bdf, 0x60f7, 0xa850, 0x805, 0x9ddb, 0x2735, 0x1, 0x0);
        gbc.writeMem(0x9bdf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x60f7, gbc.sp());
        EXPECT(0x9be1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bdf));
        EXPECT(0x78, gbc.readMem(0x9be0));
        // CB 78 008E
        gbc.setState(0xa68b, 0xb2ba, 0x6d10, 0xb6bb, 0xa0b9, 0x5b8e, 0x1, 0x1);
        gbc.writeMem(0xa68b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xb2ba, gbc.sp());
        EXPECT(0xa68d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa68b));
        EXPECT(0x78, gbc.readMem(0xa68c));
        // CB 78 008F
        gbc.setState(0x88c, 0xe3e9, 0xc610, 0x2026, 0xf41a, 0xef60, 0x0, 0x0);
        gbc.writeMem(0x88c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xe3e9, gbc.sp());
        EXPECT(0x88e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0090
        gbc.setState(0xe733, 0xd6b2, 0xdb40, 0xebae, 0x8707, 0xa3d, 0x1, 0x1);
        gbc.writeMem(0xe733, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xd6b2, gbc.sp());
        EXPECT(0xe735, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe733));
        EXPECT(0x78, gbc.readMem(0xe734));
        // CB 78 0092
        gbc.setState(0x3c12, 0x69f8, 0x3a20, 0x7aa0, 0xc516, 0x4934, 0x1, 0x0);
        gbc.writeMem(0x3c12, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x69f8, gbc.sp());
        EXPECT(0x3c14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0093
        gbc.setState(0xe59, 0x8392, 0x6210, 0xb5f1, 0xa7db, 0xbb9c, 0x1, 0x0);
        gbc.writeMem(0xe59, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x8392, gbc.sp());
        EXPECT(0xe5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0094
        gbc.setState(0xc6d8, 0x1fb, 0x6340, 0x4ef8, 0x9930, 0xa33b, 0x0, 0x0);
        gbc.writeMem(0xc6d8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x1fb, gbc.sp());
        EXPECT(0xc6da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6d8));
        EXPECT(0x78, gbc.readMem(0xc6d9));
        // CB 78 0095
        gbc.setState(0xb742, 0xa0d3, 0xd420, 0x9020, 0x2cdf, 0xefe7, 0x0, 0x0);
        gbc.writeMem(0xb742, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xa0d3, gbc.sp());
        EXPECT(0xb744, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb742));
        EXPECT(0x78, gbc.readMem(0xb743));
        // CB 78 0096
        gbc.setState(0x819c, 0xaafa, 0xf390, 0x4690, 0x55e2, 0x8607, 0x1, 0x0);
        gbc.writeMem(0x819c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xaafa, gbc.sp());
        EXPECT(0x819e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x819c));
        EXPECT(0x78, gbc.readMem(0x819d));
        // CB 78 0097
        gbc.setState(0x7e89, 0x1105, 0x93b0, 0x145d, 0xf829, 0xfa93, 0x0, 0x0);
        gbc.writeMem(0x7e89, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x1105, gbc.sp());
        EXPECT(0x7e8b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0098
        gbc.setState(0x7c79, 0xd059, 0x6590, 0xb927, 0x6e01, 0xac0a, 0x0, 0x1);
        gbc.writeMem(0x7c79, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xd059, gbc.sp());
        EXPECT(0x7c7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0099
        gbc.setState(0xbef4, 0x7fe5, 0xae90, 0x1fde, 0x8bc1, 0x1354, 0x1, 0x0);
        gbc.writeMem(0xbef4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x7fe5, gbc.sp());
        EXPECT(0xbef6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbef4));
        EXPECT(0x78, gbc.readMem(0xbef5));
        // CB 78 009A
        gbc.setState(0xbf6e, 0x41f9, 0x10f0, 0x5e03, 0x35cc, 0xf8b5, 0x0, 0x0);
        gbc.writeMem(0xbf6e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x41f9, gbc.sp());
        EXPECT(0xbf70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf6e));
        EXPECT(0x78, gbc.readMem(0xbf6f));
        // CB 78 009B
        gbc.setState(0x7dcf, 0xf950, 0x7540, 0xaffc, 0xa5da, 0x56ec, 0x0, 0x1);
        gbc.writeMem(0x7dcf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xf950, gbc.sp());
        EXPECT(0x7dd1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 009D
        gbc.setState(0xa771, 0x5509, 0x2800, 0x64e6, 0x9a6c, 0x6e7f, 0x0, 0x0);
        gbc.writeMem(0xa771, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x5509, gbc.sp());
        EXPECT(0xa773, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa771));
        EXPECT(0x78, gbc.readMem(0xa772));
        // CB 78 009E
        gbc.setState(0x55fa, 0x33c3, 0x26c0, 0xb0fc, 0xc648, 0xa234, 0x1, 0x0);
        gbc.writeMem(0x55fa, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x33c3, gbc.sp());
        EXPECT(0x55fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 009F
        gbc.setState(0x55cf, 0x1c76, 0x56f0, 0xbfb3, 0xe6f3, 0x3bd2, 0x1, 0x0);
        gbc.writeMem(0x55cf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x1c76, gbc.sp());
        EXPECT(0x55d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00A0
        gbc.setState(0x335b, 0x8fa2, 0x42a0, 0x6903, 0xbbdf, 0x551, 0x0, 0x1);
        gbc.writeMem(0x335b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x8fa2, gbc.sp());
        EXPECT(0x335d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00A1
        gbc.setState(0x37e9, 0x72b7, 0xa270, 0x9545, 0x159e, 0x75b9, 0x1, 0x0);
        gbc.writeMem(0x37e9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x72b7, gbc.sp());
        EXPECT(0x37eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00A2
        gbc.setState(0x2cc4, 0x5eb0, 0x36a0, 0x63f7, 0x6e5a, 0xe889, 0x1, 0x1);
        gbc.writeMem(0x2cc4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x5eb0, gbc.sp());
        EXPECT(0x2cc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00A3
        gbc.setState(0x43d5, 0x5ba3, 0x89b0, 0xeb19, 0xb6fa, 0xbc5f, 0x0, 0x1);
        gbc.writeMem(0x43d5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x5ba3, gbc.sp());
        EXPECT(0x43d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00A4
        gbc.setState(0x81c0, 0xf950, 0x4770, 0x1a5, 0xb9e5, 0xaecc, 0x0, 0x0);
        gbc.writeMem(0x81c0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xf950, gbc.sp());
        EXPECT(0x81c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81c0));
        EXPECT(0x78, gbc.readMem(0x81c1));
        // CB 78 00A7
        gbc.setState(0x2128, 0x7383, 0x5600, 0x9da7, 0x855f, 0x795b, 0x1, 0x1);
        gbc.writeMem(0x2128, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x7383, gbc.sp());
        EXPECT(0x212a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00A8
        gbc.setState(0x6407, 0xedd4, 0x9330, 0x7e2d, 0xe390, 0x3688, 0x1, 0x0);
        gbc.writeMem(0x6407, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xedd4, gbc.sp());
        EXPECT(0x6409, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00A9
        gbc.setState(0xe23d, 0x2943, 0x7d00, 0x6639, 0x76ba, 0x5fc0, 0x0, 0x1);
        gbc.writeMem(0xe23d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x2943, gbc.sp());
        EXPECT(0xe23f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe23d));
        EXPECT(0x78, gbc.readMem(0xe23e));
        // CB 78 00AA
        gbc.setState(0x516, 0xc9b8, 0x2b60, 0x4f1f, 0xd0da, 0xf4d7, 0x1, 0x1);
        gbc.writeMem(0x516, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xc9b8, gbc.sp());
        EXPECT(0x518, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00AB
        gbc.setState(0x434d, 0x6d4, 0xa220, 0xd44f, 0xc116, 0x22a5, 0x1, 0x0);
        gbc.writeMem(0x434d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x6d4, gbc.sp());
        EXPECT(0x434f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00AC
        gbc.setState(0xda79, 0x1588, 0xd630, 0xe891, 0x3c2c, 0x26b2, 0x0, 0x0);
        gbc.writeMem(0xda79, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x1588, gbc.sp());
        EXPECT(0xda7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda79));
        EXPECT(0x78, gbc.readMem(0xda7a));
        // CB 78 00AD
        gbc.setState(0x7a63, 0x11f1, 0xc3c0, 0x73e5, 0xa420, 0xe254, 0x1, 0x0);
        gbc.writeMem(0x7a63, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x11f1, gbc.sp());
        EXPECT(0x7a65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00AE
        gbc.setState(0xb947, 0xd241, 0x3bb0, 0xc7d0, 0x5ef0, 0xe91a, 0x0, 0x0);
        gbc.writeMem(0xb947, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xd241, gbc.sp());
        EXPECT(0xb949, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb947));
        EXPECT(0x78, gbc.readMem(0xb948));
        // CB 78 00AF
        gbc.setState(0xdc01, 0xa097, 0x64d0, 0xd179, 0x838a, 0x953d, 0x1, 0x1);
        gbc.writeMem(0xdc01, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xa097, gbc.sp());
        EXPECT(0xdc03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc01));
        EXPECT(0x78, gbc.readMem(0xdc02));
        // CB 78 00B0
        gbc.setState(0x5d96, 0x6656, 0x9cd0, 0x4e6d, 0xe683, 0x101a, 0x1, 0x1);
        gbc.writeMem(0x5d96, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x6656, gbc.sp());
        EXPECT(0x5d98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00B1
        gbc.setState(0x88f7, 0xce09, 0x3ce0, 0xb67d, 0xc5c6, 0x4a52, 0x1, 0x1);
        gbc.writeMem(0x88f7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xce09, gbc.sp());
        EXPECT(0x88f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88f7));
        EXPECT(0x78, gbc.readMem(0x88f8));
        // CB 78 00B2
        gbc.setState(0x3524, 0xc3c8, 0xdd0, 0x9d97, 0x2ac2, 0xb648, 0x0, 0x1);
        gbc.writeMem(0x3524, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xc3c8, gbc.sp());
        EXPECT(0x3526, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00B3
        gbc.setState(0xc669, 0x7745, 0xb6c0, 0x50f7, 0x59cc, 0x37c0, 0x0, 0x0);
        gbc.writeMem(0xc669, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x7745, gbc.sp());
        EXPECT(0xc66b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc669));
        EXPECT(0x78, gbc.readMem(0xc66a));
        // CB 78 00B4
        gbc.setState(0x87a8, 0xf9d3, 0xb470, 0xcf67, 0x17fe, 0x79df, 0x0, 0x0);
        gbc.writeMem(0x87a8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xf9d3, gbc.sp());
        EXPECT(0x87aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87a8));
        EXPECT(0x78, gbc.readMem(0x87a9));
        // CB 78 00B5
        gbc.setState(0x907d, 0xa055, 0x2f20, 0xccc3, 0x2a7d, 0x9576, 0x0, 0x0);
        gbc.writeMem(0x907d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xa055, gbc.sp());
        EXPECT(0x907f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x907d));
        EXPECT(0x78, gbc.readMem(0x907e));
        // CB 78 00B6
        gbc.setState(0xbe1e, 0x484e, 0xd1b0, 0xc5f, 0x3576, 0x3301, 0x0, 0x1);
        gbc.writeMem(0xbe1e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x484e, gbc.sp());
        EXPECT(0xbe20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe1e));
        EXPECT(0x78, gbc.readMem(0xbe1f));
        // CB 78 00B7
        gbc.setState(0xc87a, 0x6ed8, 0xf740, 0xc7b, 0x6f24, 0x317e, 0x0, 0x1);
        gbc.writeMem(0xc87a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x6ed8, gbc.sp());
        EXPECT(0xc87c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc87a));
        EXPECT(0x78, gbc.readMem(0xc87b));
        // CB 78 00B8
        gbc.setState(0x3a5d, 0xa12c, 0x2100, 0x9e8e, 0xe8c5, 0x5329, 0x1, 0x1);
        gbc.writeMem(0x3a5d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xa12c, gbc.sp());
        EXPECT(0x3a5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00B9
        gbc.setState(0x9e30, 0x330a, 0xef0, 0x6596, 0x1ca5, 0x2fbd, 0x1, 0x1);
        gbc.writeMem(0x9e30, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x330a, gbc.sp());
        EXPECT(0x9e32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e30));
        EXPECT(0x78, gbc.readMem(0x9e31));
        // CB 78 00BA
        gbc.setState(0x3c80, 0xfa0e, 0x12e0, 0x17f4, 0xdaa2, 0xacec, 0x1, 0x1);
        gbc.writeMem(0x3c80, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xfa0e, gbc.sp());
        EXPECT(0x3c82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00BB
        gbc.setState(0x5d47, 0x511c, 0x86d0, 0x546d, 0xfad, 0xdd6b, 0x1, 0x0);
        gbc.writeMem(0x5d47, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x511c, gbc.sp());
        EXPECT(0x5d49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00BC
        gbc.setState(0xbb1a, 0xb1a6, 0x7400, 0xebf5, 0xc3c9, 0x9fa0, 0x0, 0x0);
        gbc.writeMem(0xbb1a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xb1a6, gbc.sp());
        EXPECT(0xbb1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb1a));
        EXPECT(0x78, gbc.readMem(0xbb1b));
        // CB 78 00BD
        gbc.setState(0x8dfb, 0xb371, 0x14e0, 0x8982, 0xa23a, 0x893f, 0x0, 0x1);
        gbc.writeMem(0x8dfb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xb371, gbc.sp());
        EXPECT(0x8dfd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dfb));
        EXPECT(0x78, gbc.readMem(0x8dfc));
        // CB 78 00BE
        gbc.setState(0x25bc, 0xeceb, 0xe9f0, 0xe624, 0x45c, 0x547a, 0x1, 0x0);
        gbc.writeMem(0x25bc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xeceb, gbc.sp());
        EXPECT(0x25be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00BF
        gbc.setState(0x58fe, 0x37a0, 0x4250, 0x248d, 0x96e5, 0x9901, 0x1, 0x0);
        gbc.writeMem(0x58fe, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x37a0, gbc.sp());
        EXPECT(0x5900, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00C0
        gbc.setState(0xcfc7, 0x4d05, 0xe000, 0x7549, 0x4ea2, 0x6e2, 0x0, 0x0);
        gbc.writeMem(0xcfc7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x4d05, gbc.sp());
        EXPECT(0xcfc9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfc7));
        EXPECT(0x78, gbc.readMem(0xcfc8));
        // CB 78 00C1
        gbc.setState(0x8c63, 0x9b67, 0xd6e0, 0xb6d7, 0x3a68, 0x644, 0x1, 0x1);
        gbc.writeMem(0x8c63, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x9b67, gbc.sp());
        EXPECT(0x8c65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c63));
        EXPECT(0x78, gbc.readMem(0x8c64));
        // CB 78 00C2
        gbc.setState(0x71e6, 0x72bc, 0x5880, 0xfb96, 0x9ea8, 0xcb80, 0x1, 0x1);
        gbc.writeMem(0x71e6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x72bc, gbc.sp());
        EXPECT(0x71e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00C3
        gbc.setState(0xda20, 0xb5a6, 0xe020, 0x3486, 0x298a, 0xdbd, 0x0, 0x0);
        gbc.writeMem(0xda20, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xb5a6, gbc.sp());
        EXPECT(0xda22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda20));
        EXPECT(0x78, gbc.readMem(0xda21));
        // CB 78 00C4
        gbc.setState(0x693a, 0xf411, 0x8130, 0xbd36, 0x4777, 0x7d7b, 0x0, 0x1);
        gbc.writeMem(0x693a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xf411, gbc.sp());
        EXPECT(0x693c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00C5
        gbc.setState(0x9551, 0xfa2a, 0x8ed0, 0xf207, 0x9a4b, 0x8daf, 0x1, 0x0);
        gbc.writeMem(0x9551, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xfa2a, gbc.sp());
        EXPECT(0x9553, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9551));
        EXPECT(0x78, gbc.readMem(0x9552));
        // CB 78 00C6
        gbc.setState(0x3c0f, 0x80fb, 0xc4c0, 0xed0, 0xc236, 0xaf95, 0x0, 0x1);
        gbc.writeMem(0x3c0f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x80fb, gbc.sp());
        EXPECT(0x3c11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00C7
        gbc.setState(0x6042, 0x4d8f, 0x6f20, 0x5704, 0xe559, 0x9698, 0x0, 0x1);
        gbc.writeMem(0x6042, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x4d8f, gbc.sp());
        EXPECT(0x6044, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00C8
        gbc.setState(0x6682, 0xba8b, 0x1b70, 0x428f, 0x6586, 0xcc5f, 0x1, 0x0);
        gbc.writeMem(0x6682, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xba8b, gbc.sp());
        EXPECT(0x6684, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00C9
        gbc.setState(0x46e2, 0xf642, 0xf790, 0x9c4a, 0xf69a, 0x4957, 0x1, 0x0);
        gbc.writeMem(0x46e2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xf642, gbc.sp());
        EXPECT(0x46e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00CA
        gbc.setState(0xcce, 0xbb4d, 0xb3b0, 0x602, 0xb27d, 0xdd12, 0x0, 0x0);
        gbc.writeMem(0xcce, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xbb4d, gbc.sp());
        EXPECT(0xcd0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00CB
        gbc.setState(0x1129, 0x4f40, 0xaa80, 0x93de, 0x3652, 0x919f, 0x1, 0x0);
        gbc.writeMem(0x1129, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x4f40, gbc.sp());
        EXPECT(0x112b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00CC
        gbc.setState(0x1733, 0x16a4, 0x7430, 0xaf56, 0x76f4, 0x21cd, 0x0, 0x1);
        gbc.writeMem(0x1733, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x16a4, gbc.sp());
        EXPECT(0x1735, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00CD
        gbc.setState(0x45c9, 0xdfb6, 0x9980, 0xc720, 0xca1b, 0x5532, 0x1, 0x1);
        gbc.writeMem(0x45c9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xdfb6, gbc.sp());
        EXPECT(0x45cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00CE
        gbc.setState(0xb41a, 0xb243, 0xd460, 0xa99b, 0xdad7, 0x1c57, 0x1, 0x0);
        gbc.writeMem(0xb41a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xb243, gbc.sp());
        EXPECT(0xb41c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb41a));
        EXPECT(0x78, gbc.readMem(0xb41b));
        // CB 78 00CF
        gbc.setState(0x1922, 0x88cb, 0x64b0, 0x97a6, 0xdab0, 0x5d77, 0x1, 0x1);
        gbc.writeMem(0x1922, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x88cb, gbc.sp());
        EXPECT(0x1924, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00D0
        gbc.setState(0xbe5b, 0x30b6, 0x4c00, 0xef77, 0xf04b, 0x4ff4, 0x1, 0x0);
        gbc.writeMem(0xbe5b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x30b6, gbc.sp());
        EXPECT(0xbe5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe5b));
        EXPECT(0x78, gbc.readMem(0xbe5c));
        // CB 78 00D1
        gbc.setState(0x77e9, 0xfd1e, 0xe5e0, 0x185a, 0xfc2b, 0x353, 0x0, 0x0);
        gbc.writeMem(0x77e9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xfd1e, gbc.sp());
        EXPECT(0x77eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00D2
        gbc.setState(0x90c5, 0xa371, 0x2580, 0x47bf, 0x4057, 0xceb4, 0x1, 0x1);
        gbc.writeMem(0x90c5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xa371, gbc.sp());
        EXPECT(0x90c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90c5));
        EXPECT(0x78, gbc.readMem(0x90c6));
        // CB 78 00D3
        gbc.setState(0x51cf, 0x450e, 0x6180, 0xe1bd, 0x833c, 0xe317, 0x1, 0x1);
        gbc.writeMem(0x51cf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x450e, gbc.sp());
        EXPECT(0x51d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00D4
        gbc.setState(0x3928, 0xa09b, 0xcaa0, 0xd785, 0xd3b6, 0x6304, 0x0, 0x0);
        gbc.writeMem(0x3928, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xa09b, gbc.sp());
        EXPECT(0x392a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00D5
        gbc.setState(0x2637, 0x6f91, 0xcbb0, 0x3f82, 0x9466, 0xbfb2, 0x0, 0x1);
        gbc.writeMem(0x2637, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x6f91, gbc.sp());
        EXPECT(0x2639, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00D6
        gbc.setState(0xe891, 0x8d30, 0x50f0, 0x88e1, 0x22d0, 0x899c, 0x0, 0x0);
        gbc.writeMem(0xe891, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x8d30, gbc.sp());
        EXPECT(0xe893, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe891));
        EXPECT(0x78, gbc.readMem(0xe892));
        // CB 78 00D7
        gbc.setState(0x1344, 0x922d, 0x4b80, 0x22e8, 0x32d5, 0x2820, 0x1, 0x0);
        gbc.writeMem(0x1344, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x922d, gbc.sp());
        EXPECT(0x1346, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00D8
        gbc.setState(0xde64, 0x97b, 0x5220, 0x2b52, 0x98f7, 0xaa62, 0x0, 0x0);
        gbc.writeMem(0xde64, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x97b, gbc.sp());
        EXPECT(0xde66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde64));
        EXPECT(0x78, gbc.readMem(0xde65));
        // CB 78 00D9
        gbc.setState(0x8425, 0x8d68, 0x3490, 0xe40d, 0xed10, 0xb9f, 0x0, 0x1);
        gbc.writeMem(0x8425, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x8d68, gbc.sp());
        EXPECT(0x8427, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8425));
        EXPECT(0x78, gbc.readMem(0x8426));
        // CB 78 00DA
        gbc.setState(0x8b1d, 0xb927, 0x1aa0, 0xc446, 0xb2a3, 0x9189, 0x1, 0x1);
        gbc.writeMem(0x8b1d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xb927, gbc.sp());
        EXPECT(0x8b1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b1d));
        EXPECT(0x78, gbc.readMem(0x8b1e));
        // CB 78 00DB
        gbc.setState(0xa058, 0x38d0, 0xf740, 0x886f, 0x56a9, 0xc79c, 0x1, 0x0);
        gbc.writeMem(0xa058, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x38d0, gbc.sp());
        EXPECT(0xa05a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa058));
        EXPECT(0x78, gbc.readMem(0xa059));
        // CB 78 00DC
        gbc.setState(0xd800, 0x4558, 0x83c0, 0x64dd, 0xdb70, 0x2c73, 0x1, 0x0);
        gbc.writeMem(0xd800, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x4558, gbc.sp());
        EXPECT(0xd802, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd800));
        EXPECT(0x78, gbc.readMem(0xd801));
        // CB 78 00DD
        gbc.setState(0xd103, 0x7001, 0x4ba0, 0x3411, 0x1351, 0x8f45, 0x1, 0x0);
        gbc.writeMem(0xd103, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x7001, gbc.sp());
        EXPECT(0xd105, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd103));
        EXPECT(0x78, gbc.readMem(0xd104));
        // CB 78 00DE
        gbc.setState(0xa0c3, 0x9c70, 0x49a0, 0x79ad, 0xe7f7, 0xf73, 0x0, 0x1);
        gbc.writeMem(0xa0c3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x9c70, gbc.sp());
        EXPECT(0xa0c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0c3));
        EXPECT(0x78, gbc.readMem(0xa0c4));
        // CB 78 00DF
        gbc.setState(0x43ee, 0x7ae0, 0x1e90, 0xb704, 0x24bd, 0x82a, 0x1, 0x0);
        gbc.writeMem(0x43ee, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x7ae0, gbc.sp());
        EXPECT(0x43f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00E0
        gbc.setState(0x846f, 0x1df0, 0x9810, 0x921c, 0xf7f1, 0xbb09, 0x0, 0x0);
        gbc.writeMem(0x846f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x1df0, gbc.sp());
        EXPECT(0x8471, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x846f));
        EXPECT(0x78, gbc.readMem(0x8470));
        // CB 78 00E1
        gbc.setState(0x4ec7, 0x456, 0xe970, 0xf6e2, 0xf92e, 0x99f1, 0x0, 0x0);
        gbc.writeMem(0x4ec7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x456, gbc.sp());
        EXPECT(0x4ec9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00E2
        gbc.setState(0x480, 0x940d, 0x230, 0x5c91, 0x529f, 0xf5eb, 0x1, 0x1);
        gbc.writeMem(0x480, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x940d, gbc.sp());
        EXPECT(0x482, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00E3
        gbc.setState(0x5cdc, 0xed8c, 0x1660, 0x6896, 0xdce8, 0x5606, 0x1, 0x1);
        gbc.writeMem(0x5cdc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xed8c, gbc.sp());
        EXPECT(0x5cde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00E4
        gbc.setState(0x3a29, 0x7a9d, 0x2ec0, 0x17b1, 0x1813, 0x55e7, 0x1, 0x1);
        gbc.writeMem(0x3a29, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x7a9d, gbc.sp());
        EXPECT(0x3a2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00E5
        gbc.setState(0x2ae4, 0x6d2f, 0x8bc0, 0xa20b, 0x727e, 0x55a1, 0x1, 0x0);
        gbc.writeMem(0x2ae4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x6d2f, gbc.sp());
        EXPECT(0x2ae6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00E6
        gbc.setState(0xddb2, 0xf079, 0xd080, 0x2570, 0xfd52, 0xd409, 0x0, 0x1);
        gbc.writeMem(0xddb2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xf079, gbc.sp());
        EXPECT(0xddb4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddb2));
        EXPECT(0x78, gbc.readMem(0xddb3));
        // CB 78 00E7
        gbc.setState(0x2067, 0xc227, 0x1240, 0x97e9, 0xa79b, 0x8dee, 0x1, 0x0);
        gbc.writeMem(0x2067, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xc227, gbc.sp());
        EXPECT(0x2069, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00E8
        gbc.setState(0xb2d3, 0xe421, 0x7040, 0x2f45, 0xaec4, 0x2fe3, 0x1, 0x0);
        gbc.writeMem(0xb2d3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xe421, gbc.sp());
        EXPECT(0xb2d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2d3));
        EXPECT(0x78, gbc.readMem(0xb2d4));
        // CB 78 00E9
        gbc.setState(0xd6a3, 0x6cbd, 0x40b0, 0xe3eb, 0x80c4, 0xb7ab, 0x0, 0x1);
        gbc.writeMem(0xd6a3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x6cbd, gbc.sp());
        EXPECT(0xd6a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6a3));
        EXPECT(0x78, gbc.readMem(0xd6a4));
        // CB 78 00EA
        gbc.setState(0xd224, 0x50fb, 0xa660, 0xb1d8, 0xa03c, 0x7bfd, 0x0, 0x0);
        gbc.writeMem(0xd224, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x50fb, gbc.sp());
        EXPECT(0xd226, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd224));
        EXPECT(0x78, gbc.readMem(0xd225));
        // CB 78 00EB
        gbc.setState(0x9ef2, 0x6065, 0xf660, 0x1928, 0xf02c, 0x581a, 0x1, 0x0);
        gbc.writeMem(0x9ef2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x6065, gbc.sp());
        EXPECT(0x9ef4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ef2));
        EXPECT(0x78, gbc.readMem(0x9ef3));
        // CB 78 00EC
        gbc.setState(0xd3f6, 0x4494, 0x60b0, 0x5b9d, 0xf54e, 0x8d0a, 0x0, 0x0);
        gbc.writeMem(0xd3f6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x4494, gbc.sp());
        EXPECT(0xd3f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3f6));
        EXPECT(0x78, gbc.readMem(0xd3f7));
        // CB 78 00ED
        gbc.setState(0x88ec, 0x2364, 0x9960, 0xf0e5, 0xeb05, 0x4b1d, 0x0, 0x0);
        gbc.writeMem(0x88ec, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x2364, gbc.sp());
        EXPECT(0x88ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88ec));
        EXPECT(0x78, gbc.readMem(0x88ed));
        // CB 78 00EF
        gbc.setState(0x7a04, 0xa102, 0xafc0, 0xdcae, 0xec38, 0xf85d, 0x1, 0x0);
        gbc.writeMem(0x7a04, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xa102, gbc.sp());
        EXPECT(0x7a06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00F1
        gbc.setState(0x11fd, 0x302b, 0xcae0, 0xafe, 0x1ad2, 0x562f, 0x0, 0x1);
        gbc.writeMem(0x11fd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x302b, gbc.sp());
        EXPECT(0x11ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00F2
        gbc.setState(0xbf6e, 0x20ea, 0x5460, 0x1289, 0x1c12, 0x7ade, 0x0, 0x0);
        gbc.writeMem(0xbf6e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x20ea, gbc.sp());
        EXPECT(0xbf70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf6e));
        EXPECT(0x78, gbc.readMem(0xbf6f));
        // CB 78 00F3
        gbc.setState(0x93cf, 0xb5fa, 0xae30, 0xc05b, 0x2e97, 0x2bbe, 0x0, 0x0);
        gbc.writeMem(0x93cf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xb5fa, gbc.sp());
        EXPECT(0x93d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93cf));
        EXPECT(0x78, gbc.readMem(0x93d0));
        // CB 78 00F4
        gbc.setState(0xa67d, 0xc6e6, 0xf550, 0xf6fa, 0x508c, 0x9402, 0x1, 0x1);
        gbc.writeMem(0xa67d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xc6e6, gbc.sp());
        EXPECT(0xa67f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa67d));
        EXPECT(0x78, gbc.readMem(0xa67e));
        // CB 78 00F5
        gbc.setState(0x6c88, 0x88b7, 0xb2a0, 0x2af4, 0xa15c, 0x13b7, 0x1, 0x1);
        gbc.writeMem(0x6c88, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x88b7, gbc.sp());
        EXPECT(0x6c8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00F6
        gbc.setState(0x1705, 0xbca9, 0xd440, 0xb661, 0x92d7, 0x634, 0x1, 0x1);
        gbc.writeMem(0x1705, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xbca9, gbc.sp());
        EXPECT(0x1707, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00F7
        gbc.setState(0xe88d, 0xf3c3, 0x5d70, 0xb174, 0xbca0, 0x3b1d, 0x0, 0x1);
        gbc.writeMem(0xe88d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xf3c3, gbc.sp());
        EXPECT(0xe88f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe88d));
        EXPECT(0x78, gbc.readMem(0xe88e));
        // CB 78 00F8
        gbc.setState(0xae1f, 0x4bcf, 0xcf60, 0x2922, 0xff12, 0x4a58, 0x0, 0x0);
        gbc.writeMem(0xae1f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x4bcf, gbc.sp());
        EXPECT(0xae21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae1f));
        EXPECT(0x78, gbc.readMem(0xae20));
        // CB 78 00F9
        gbc.setState(0x7017, 0xc4f2, 0x3900, 0x975e, 0x5d0b, 0x6fe2, 0x1, 0x0);
        gbc.writeMem(0x7017, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xc4f2, gbc.sp());
        EXPECT(0x7019, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00FA
        gbc.setState(0x8e73, 0x6427, 0xfbc0, 0xe4be, 0x3aa3, 0x4bba, 0x1, 0x0);
        gbc.writeMem(0x8e73, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x6427, gbc.sp());
        EXPECT(0x8e75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e73));
        EXPECT(0x78, gbc.readMem(0x8e74));
        // CB 78 00FB
        gbc.setState(0x716, 0x6a02, 0x7890, 0x641f, 0xbdc1, 0x819, 0x1, 0x1);
        gbc.writeMem(0x716, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x6a02, gbc.sp());
        EXPECT(0x718, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00FC
        gbc.setState(0xdc34, 0xf967, 0xe500, 0x7984, 0x8d45, 0x91e6, 0x1, 0x1);
        gbc.writeMem(0xdc34, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xf967, gbc.sp());
        EXPECT(0xdc36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc34));
        EXPECT(0x78, gbc.readMem(0xdc35));
        // CB 78 00FD
        gbc.setState(0x508e, 0x5709, 0x7b00, 0x3f1a, 0x12c0, 0x4cdf, 0x0, 0x0);
        gbc.writeMem(0x508e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x5709, gbc.sp());
        EXPECT(0x5090, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 00FE
        gbc.setState(0x6da4, 0x1ef7, 0x13d0, 0x23f2, 0xd57f, 0xc678, 0x1, 0x0);
        gbc.writeMem(0x6da4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x1ef7, gbc.sp());
        EXPECT(0x6da6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 00FF
        gbc.setState(0x7b39, 0x6c1c, 0x4320, 0x3211, 0xb6f2, 0x589f, 0x1, 0x1);
        gbc.writeMem(0x7b39, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x6c1c, gbc.sp());
        EXPECT(0x7b3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0100
        gbc.setState(0x722f, 0x3672, 0x50c0, 0xbae1, 0xbf8b, 0x13b1, 0x0, 0x1);
        gbc.writeMem(0x722f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x3672, gbc.sp());
        EXPECT(0x7231, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0101
        gbc.setState(0x7b02, 0x6f58, 0x4310, 0x882c, 0xd3b1, 0x4c49, 0x0, 0x0);
        gbc.writeMem(0x7b02, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x6f58, gbc.sp());
        EXPECT(0x7b04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0102
        gbc.setState(0xe642, 0xcaab, 0x7e30, 0xd3b6, 0xdcca, 0xfcf, 0x0, 0x0);
        gbc.writeMem(0xe642, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xcaab, gbc.sp());
        EXPECT(0xe644, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe642));
        EXPECT(0x78, gbc.readMem(0xe643));
        // CB 78 0103
        gbc.setState(0x62c8, 0xd2a9, 0x3110, 0xb143, 0xab24, 0x7fed, 0x0, 0x0);
        gbc.writeMem(0x62c8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xd2a9, gbc.sp());
        EXPECT(0x62ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0104
        gbc.setState(0xc855, 0x49de, 0x1690, 0x1613, 0xf02d, 0x184d, 0x1, 0x1);
        gbc.writeMem(0xc855, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x49de, gbc.sp());
        EXPECT(0xc857, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc855));
        EXPECT(0x78, gbc.readMem(0xc856));
        // CB 78 0106
        gbc.setState(0x89e7, 0xc4b5, 0xfc40, 0x34af, 0x22ec, 0xf937, 0x0, 0x1);
        gbc.writeMem(0x89e7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xc4b5, gbc.sp());
        EXPECT(0x89e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89e7));
        EXPECT(0x78, gbc.readMem(0x89e8));
        // CB 78 0107
        gbc.setState(0x42c3, 0x7081, 0x1740, 0xf2c8, 0x6062, 0x9c1, 0x1, 0x0);
        gbc.writeMem(0x42c3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x7081, gbc.sp());
        EXPECT(0x42c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0108
        gbc.setState(0x7758, 0xde9d, 0x60c0, 0xbe5, 0x6161, 0x44a7, 0x0, 0x0);
        gbc.writeMem(0x7758, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xde9d, gbc.sp());
        EXPECT(0x775a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0109
        gbc.setState(0x7498, 0x971e, 0x890, 0x5956, 0x7e84, 0x1c21, 0x0, 0x1);
        gbc.writeMem(0x7498, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x971e, gbc.sp());
        EXPECT(0x749a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 010A
        gbc.setState(0x863b, 0xfdcd, 0x25f0, 0xd56a, 0xfe6a, 0xd6df, 0x0, 0x1);
        gbc.writeMem(0x863b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xfdcd, gbc.sp());
        EXPECT(0x863d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x863b));
        EXPECT(0x78, gbc.readMem(0x863c));
        // CB 78 010B
        gbc.setState(0x9ced, 0x49de, 0x2840, 0xfd29, 0x4e81, 0xb10, 0x0, 0x0);
        gbc.writeMem(0x9ced, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x49de, gbc.sp());
        EXPECT(0x9cef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ced));
        EXPECT(0x78, gbc.readMem(0x9cee));
        // CB 78 010C
        gbc.setState(0x43f9, 0x9b67, 0x4a0, 0x355d, 0xc3a6, 0xc774, 0x1, 0x1);
        gbc.writeMem(0x43f9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x9b67, gbc.sp());
        EXPECT(0x43fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 010D
        gbc.setState(0x59d2, 0x7e, 0x8b80, 0x4c2e, 0xa663, 0xd9f7, 0x1, 0x0);
        gbc.writeMem(0x59d2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x7e, gbc.sp());
        EXPECT(0x59d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 010E
        gbc.setState(0x5a38, 0xcda4, 0x5e90, 0xf27c, 0x1395, 0x517d, 0x1, 0x1);
        gbc.writeMem(0x5a38, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xcda4, gbc.sp());
        EXPECT(0x5a3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 010F
        gbc.setState(0x46aa, 0x8f91, 0x5210, 0xe9e7, 0xfff0, 0xb8da, 0x0, 0x0);
        gbc.writeMem(0x46aa, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x8f91, gbc.sp());
        EXPECT(0x46ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0110
        gbc.setState(0xb44e, 0xc72e, 0x8650, 0xbe3b, 0x12e, 0x6d7f, 0x0, 0x1);
        gbc.writeMem(0xb44e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xc72e, gbc.sp());
        EXPECT(0xb450, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb44e));
        EXPECT(0x78, gbc.readMem(0xb44f));
        // CB 78 0111
        gbc.setState(0x30dc, 0xe4a8, 0x3370, 0x181b, 0xc9af, 0xe64e, 0x1, 0x1);
        gbc.writeMem(0x30dc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xe4a8, gbc.sp());
        EXPECT(0x30de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0112
        gbc.setState(0xe932, 0xdb2, 0xadb0, 0x1ed8, 0x9301, 0xeced, 0x0, 0x0);
        gbc.writeMem(0xe932, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xdb2, gbc.sp());
        EXPECT(0xe934, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe932));
        EXPECT(0x78, gbc.readMem(0xe933));
        // CB 78 0113
        gbc.setState(0x1030, 0xa5b5, 0x1890, 0x1fbd, 0x841d, 0x885d, 0x1, 0x0);
        gbc.writeMem(0x1030, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xa5b5, gbc.sp());
        EXPECT(0x1032, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0114
        gbc.setState(0x899b, 0xa79f, 0x6b80, 0x26a5, 0x34c8, 0x7ddf, 0x0, 0x1);
        gbc.writeMem(0x899b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xa79f, gbc.sp());
        EXPECT(0x899d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x899b));
        EXPECT(0x78, gbc.readMem(0x899c));
        // CB 78 0115
        gbc.setState(0x1a95, 0x7e70, 0x4d40, 0x68eb, 0x9b7e, 0x7fd7, 0x1, 0x1);
        gbc.writeMem(0x1a95, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x7e70, gbc.sp());
        EXPECT(0x1a97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0116
        gbc.setState(0x519b, 0xe254, 0x760, 0x87fe, 0xe90a, 0xb492, 0x0, 0x1);
        gbc.writeMem(0x519b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xe254, gbc.sp());
        EXPECT(0x519d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0118
        gbc.setState(0x2034, 0x8e6, 0x30a0, 0x8b1, 0x866c, 0x91b8, 0x1, 0x1);
        gbc.writeMem(0x2034, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x8e6, gbc.sp());
        EXPECT(0x2036, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0119
        gbc.setState(0x3f01, 0x4af6, 0x15a0, 0xf689, 0xaa9d, 0x8bf2, 0x0, 0x0);
        gbc.writeMem(0x3f01, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x4af6, gbc.sp());
        EXPECT(0x3f03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 011A
        gbc.setState(0x8dd8, 0x299, 0x15e0, 0x5a43, 0xed58, 0x325d, 0x1, 0x0);
        gbc.writeMem(0x8dd8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x299, gbc.sp());
        EXPECT(0x8dda, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dd8));
        EXPECT(0x78, gbc.readMem(0x8dd9));
        // CB 78 011B
        gbc.setState(0x2b43, 0xf79c, 0xbc70, 0x25e0, 0x46dd, 0xf9ea, 0x0, 0x0);
        gbc.writeMem(0x2b43, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xf79c, gbc.sp());
        EXPECT(0x2b45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 011C
        gbc.setState(0x5150, 0xa8d5, 0xae50, 0xbf2d, 0x134, 0xf024, 0x0, 0x0);
        gbc.writeMem(0x5150, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xa8d5, gbc.sp());
        EXPECT(0x5152, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 011D
        gbc.setState(0x5f79, 0x618b, 0x1af0, 0x6ce0, 0xa562, 0xb70f, 0x0, 0x0);
        gbc.writeMem(0x5f79, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x618b, gbc.sp());
        EXPECT(0x5f7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 011E
        gbc.setState(0x8cea, 0xce1f, 0x2b60, 0x3b79, 0x16bb, 0x8a33, 0x0, 0x0);
        gbc.writeMem(0x8cea, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xce1f, gbc.sp());
        EXPECT(0x8cec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cea));
        EXPECT(0x78, gbc.readMem(0x8ceb));
        // CB 78 011F
        gbc.setState(0x1e4b, 0xee75, 0x1e90, 0xaa82, 0xe36b, 0xeba3, 0x1, 0x0);
        gbc.writeMem(0x1e4b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xee75, gbc.sp());
        EXPECT(0x1e4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0120
        gbc.setState(0x1649, 0x8819, 0x24d0, 0xa65e, 0x194b, 0xbcac, 0x1, 0x0);
        gbc.writeMem(0x1649, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x8819, gbc.sp());
        EXPECT(0x164b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0121
        gbc.setState(0x12ed, 0x995d, 0xb890, 0x4882, 0x7e8f, 0xb7f9, 0x0, 0x1);
        gbc.writeMem(0x12ed, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x995d, gbc.sp());
        EXPECT(0x12ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0122
        gbc.setState(0x5064, 0x503b, 0xe870, 0x987a, 0x996a, 0xe706, 0x1, 0x1);
        gbc.writeMem(0x5064, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x503b, gbc.sp());
        EXPECT(0x5066, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0123
        gbc.setState(0x24a2, 0xba24, 0x1610, 0x7356, 0xbed4, 0xc718, 0x0, 0x1);
        gbc.writeMem(0x24a2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xba24, gbc.sp());
        EXPECT(0x24a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0124
        gbc.setState(0x18ce, 0x87d9, 0xc0a0, 0x34b8, 0x6985, 0x145, 0x0, 0x1);
        gbc.writeMem(0x18ce, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x87d9, gbc.sp());
        EXPECT(0x18d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0125
        gbc.setState(0x26f, 0xee43, 0x4940, 0xd535, 0x4d0d, 0x4f85, 0x1, 0x0);
        gbc.writeMem(0x26f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xee43, gbc.sp());
        EXPECT(0x271, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0126
        gbc.setState(0x88be, 0xbe7c, 0xfa70, 0x6315, 0x902d, 0xfac7, 0x1, 0x1);
        gbc.writeMem(0x88be, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xbe7c, gbc.sp());
        EXPECT(0x88c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88be));
        EXPECT(0x78, gbc.readMem(0x88bf));
        // CB 78 0127
        gbc.setState(0xc3d8, 0xc346, 0x4690, 0x2e94, 0x2f98, 0x7e9, 0x0, 0x0);
        gbc.writeMem(0xc3d8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xc346, gbc.sp());
        EXPECT(0xc3da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3d8));
        EXPECT(0x78, gbc.readMem(0xc3d9));
        // CB 78 0128
        gbc.setState(0x7708, 0xc769, 0x63a0, 0xf8a6, 0xb86, 0xb13, 0x0, 0x1);
        gbc.writeMem(0x7708, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xc769, gbc.sp());
        EXPECT(0x770a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0129
        gbc.setState(0x60cd, 0x3ceb, 0x1910, 0xd71f, 0x3f60, 0x56a8, 0x0, 0x0);
        gbc.writeMem(0x60cd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x3ceb, gbc.sp());
        EXPECT(0x60cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 012A
        gbc.setState(0xcc2c, 0xe742, 0xa400, 0x6413, 0x9847, 0x3a9d, 0x0, 0x1);
        gbc.writeMem(0xcc2c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xe742, gbc.sp());
        EXPECT(0xcc2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc2c));
        EXPECT(0x78, gbc.readMem(0xcc2d));
        // CB 78 012B
        gbc.setState(0xef71, 0x706f, 0x40e0, 0xe15a, 0x700, 0xac07, 0x1, 0x0);
        gbc.writeMem(0xef71, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x706f, gbc.sp());
        EXPECT(0xef73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef71));
        EXPECT(0x78, gbc.readMem(0xef72));
        // CB 78 012C
        gbc.setState(0x4d5a, 0x77ad, 0x920, 0xb0cb, 0xe4b0, 0x3002, 0x0, 0x0);
        gbc.writeMem(0x4d5a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x77ad, gbc.sp());
        EXPECT(0x4d5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 012D
        gbc.setState(0xd9e4, 0x577c, 0xe310, 0x45f1, 0x8f88, 0x3542, 0x0, 0x0);
        gbc.writeMem(0xd9e4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x577c, gbc.sp());
        EXPECT(0xd9e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9e4));
        EXPECT(0x78, gbc.readMem(0xd9e5));
        // CB 78 012E
        gbc.setState(0x7e93, 0x34e, 0x4590, 0xf8b0, 0x4366, 0xf873, 0x1, 0x1);
        gbc.writeMem(0x7e93, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x34e, gbc.sp());
        EXPECT(0x7e95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 012F
        gbc.setState(0x98a1, 0x6c52, 0xc580, 0x583e, 0x68f3, 0xefc3, 0x0, 0x1);
        gbc.writeMem(0x98a1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x6c52, gbc.sp());
        EXPECT(0x98a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98a1));
        EXPECT(0x78, gbc.readMem(0x98a2));
        // CB 78 0131
        gbc.setState(0x3070, 0xd212, 0x9090, 0x865b, 0x7d88, 0x3624, 0x0, 0x1);
        gbc.writeMem(0x3070, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xd212, gbc.sp());
        EXPECT(0x3072, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0132
        gbc.setState(0xa806, 0x673c, 0xef90, 0xb083, 0x683e, 0x7520, 0x1, 0x0);
        gbc.writeMem(0xa806, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x673c, gbc.sp());
        EXPECT(0xa808, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa806));
        EXPECT(0x78, gbc.readMem(0xa807));
        // CB 78 0134
        gbc.setState(0x4272, 0xf4d2, 0xef40, 0xb44f, 0x9fa1, 0xb707, 0x0, 0x0);
        gbc.writeMem(0x4272, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xf4d2, gbc.sp());
        EXPECT(0x4274, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0135
        gbc.setState(0xea77, 0x65d9, 0xc710, 0xf7ad, 0xe36a, 0x684f, 0x0, 0x0);
        gbc.writeMem(0xea77, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x65d9, gbc.sp());
        EXPECT(0xea79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea77));
        EXPECT(0x78, gbc.readMem(0xea78));
        // CB 78 0136
        gbc.setState(0xe5cf, 0xbefb, 0x88f0, 0xb60c, 0xd86b, 0x4e05, 0x1, 0x0);
        gbc.writeMem(0xe5cf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xbefb, gbc.sp());
        EXPECT(0xe5d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5cf));
        EXPECT(0x78, gbc.readMem(0xe5d0));
        // CB 78 0137
        gbc.setState(0xbc9d, 0xfe4e, 0x2d90, 0x43ba, 0xe34b, 0xb4f8, 0x1, 0x1);
        gbc.writeMem(0xbc9d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xfe4e, gbc.sp());
        EXPECT(0xbc9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc9d));
        EXPECT(0x78, gbc.readMem(0xbc9e));
        // CB 78 0138
        gbc.setState(0x99ca, 0x782b, 0xc080, 0xbbf5, 0x4991, 0x6dab, 0x1, 0x1);
        gbc.writeMem(0x99ca, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x782b, gbc.sp());
        EXPECT(0x99cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99ca));
        EXPECT(0x78, gbc.readMem(0x99cb));
        // CB 78 0139
        gbc.setState(0xbc8f, 0x2853, 0xbf60, 0x6a8b, 0xaa50, 0xdd5, 0x0, 0x0);
        gbc.writeMem(0xbc8f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x2853, gbc.sp());
        EXPECT(0xbc91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc8f));
        EXPECT(0x78, gbc.readMem(0xbc90));
        // CB 78 013A
        gbc.setState(0x598, 0x5ab, 0xcce0, 0x85a3, 0x5cf, 0x6389, 0x0, 0x1);
        gbc.writeMem(0x598, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x5ab, gbc.sp());
        EXPECT(0x59a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 013B
        gbc.setState(0x3365, 0xf2cb, 0xbe40, 0x80ec, 0x888d, 0xb889, 0x0, 0x1);
        gbc.writeMem(0x3365, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xf2cb, gbc.sp());
        EXPECT(0x3367, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 013C
        gbc.setState(0xce32, 0x85a1, 0xa930, 0x5273, 0x58d1, 0x220, 0x0, 0x1);
        gbc.writeMem(0xce32, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x85a1, gbc.sp());
        EXPECT(0xce34, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce32));
        EXPECT(0x78, gbc.readMem(0xce33));
        // CB 78 013D
        gbc.setState(0x4d13, 0xcae1, 0xba60, 0x7599, 0x1248, 0x8179, 0x0, 0x1);
        gbc.writeMem(0x4d13, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xcae1, gbc.sp());
        EXPECT(0x4d15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 013E
        gbc.setState(0xb3fb, 0x24e0, 0x6460, 0x7dd2, 0x5d12, 0x38e1, 0x0, 0x0);
        gbc.writeMem(0xb3fb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x24e0, gbc.sp());
        EXPECT(0xb3fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3fb));
        EXPECT(0x78, gbc.readMem(0xb3fc));
        // CB 78 013F
        gbc.setState(0x5019, 0xef66, 0x5b20, 0x35b, 0x5df1, 0x455c, 0x0, 0x0);
        gbc.writeMem(0x5019, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xef66, gbc.sp());
        EXPECT(0x501b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0140
        gbc.setState(0x6081, 0x2bc8, 0xfdc0, 0x8c98, 0xb82d, 0xaac1, 0x1, 0x1);
        gbc.writeMem(0x6081, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x2bc8, gbc.sp());
        EXPECT(0x6083, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0141
        gbc.setState(0xe414, 0x4d9f, 0xa730, 0x4a9f, 0xe211, 0x4617, 0x0, 0x0);
        gbc.writeMem(0xe414, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x4d9f, gbc.sp());
        EXPECT(0xe416, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe414));
        EXPECT(0x78, gbc.readMem(0xe415));
        // CB 78 0142
        gbc.setState(0x315b, 0x3508, 0xc290, 0xe73c, 0x529a, 0x44e1, 0x1, 0x0);
        gbc.writeMem(0x315b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x3508, gbc.sp());
        EXPECT(0x315d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0143
        gbc.setState(0x8e9, 0x15f7, 0x440, 0x38d, 0x64dd, 0xb39c, 0x1, 0x0);
        gbc.writeMem(0x8e9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x15f7, gbc.sp());
        EXPECT(0x8eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0145
        gbc.setState(0x284e, 0xd46e, 0xfb90, 0x9dc5, 0xff6f, 0x6ad0, 0x1, 0x0);
        gbc.writeMem(0x284e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xd46e, gbc.sp());
        EXPECT(0x2850, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0146
        gbc.setState(0xb29, 0xaf0a, 0x3880, 0x8646, 0x8278, 0x419b, 0x1, 0x0);
        gbc.writeMem(0xb29, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xaf0a, gbc.sp());
        EXPECT(0xb2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0147
        gbc.setState(0x19e6, 0x3892, 0xb220, 0xf91b, 0x4c17, 0xf032, 0x0, 0x0);
        gbc.writeMem(0x19e6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x3892, gbc.sp());
        EXPECT(0x19e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0148
        gbc.setState(0x44, 0xc659, 0xac60, 0xf152, 0xb1b6, 0x9e2e, 0x1, 0x1);
        gbc.writeMem(0x44, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xc659, gbc.sp());
        EXPECT(0x46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0149
        gbc.setState(0x96bf, 0x4247, 0x32d0, 0xd0dd, 0x931f, 0x5586, 0x1, 0x0);
        gbc.writeMem(0x96bf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x4247, gbc.sp());
        EXPECT(0x96c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96bf));
        EXPECT(0x78, gbc.readMem(0x96c0));
        // CB 78 014A
        gbc.setState(0xdf75, 0xfb3a, 0x4f50, 0x15cb, 0x8ba5, 0x8f6b, 0x1, 0x1);
        gbc.writeMem(0xdf75, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xfb3a, gbc.sp());
        EXPECT(0xdf77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf75));
        EXPECT(0x78, gbc.readMem(0xdf76));
        // CB 78 014B
        gbc.setState(0x2261, 0x63ed, 0x3270, 0xa1e5, 0xea47, 0x993, 0x0, 0x1);
        gbc.writeMem(0x2261, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x63ed, gbc.sp());
        EXPECT(0x2263, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 014C
        gbc.setState(0x9675, 0x9458, 0x48c0, 0x16f4, 0x921c, 0xa21e, 0x1, 0x1);
        gbc.writeMem(0x9675, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x9458, gbc.sp());
        EXPECT(0x9677, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9675));
        EXPECT(0x78, gbc.readMem(0x9676));
        // CB 78 014D
        gbc.setState(0x3dd7, 0x124c, 0x930, 0x6ec9, 0x472e, 0xf24d, 0x1, 0x0);
        gbc.writeMem(0x3dd7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x124c, gbc.sp());
        EXPECT(0x3dd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 014E
        gbc.setState(0x19b7, 0x970e, 0xeb40, 0x5104, 0xe292, 0xf405, 0x0, 0x0);
        gbc.writeMem(0x19b7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x970e, gbc.sp());
        EXPECT(0x19b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 014F
        gbc.setState(0xb6d6, 0x5b9a, 0x460, 0x298e, 0x7627, 0xe980, 0x1, 0x0);
        gbc.writeMem(0xb6d6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x5b9a, gbc.sp());
        EXPECT(0xb6d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6d6));
        EXPECT(0x78, gbc.readMem(0xb6d7));
        // CB 78 0150
        gbc.setState(0x8ead, 0xb952, 0xba10, 0xe0e3, 0x3683, 0x5572, 0x0, 0x1);
        gbc.writeMem(0x8ead, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xb952, gbc.sp());
        EXPECT(0x8eaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ead));
        EXPECT(0x78, gbc.readMem(0x8eae));
        // CB 78 0151
        gbc.setState(0x112a, 0x62b9, 0xc410, 0xc11c, 0xdc03, 0x6bc5, 0x1, 0x1);
        gbc.writeMem(0x112a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x62b9, gbc.sp());
        EXPECT(0x112c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0152
        gbc.setState(0x6291, 0xe179, 0x4820, 0x9bdd, 0x9670, 0x9a1c, 0x0, 0x0);
        gbc.writeMem(0x6291, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xe179, gbc.sp());
        EXPECT(0x6293, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0153
        gbc.setState(0x24d0, 0x46d3, 0x7b90, 0x1377, 0x2a, 0xac7c, 0x0, 0x1);
        gbc.writeMem(0x24d0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x46d3, gbc.sp());
        EXPECT(0x24d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0155
        gbc.setState(0x9cd4, 0xcd68, 0x6ce0, 0xc2a7, 0x261a, 0x65d2, 0x1, 0x1);
        gbc.writeMem(0x9cd4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xcd68, gbc.sp());
        EXPECT(0x9cd6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cd4));
        EXPECT(0x78, gbc.readMem(0x9cd5));
        // CB 78 0157
        gbc.setState(0x8482, 0x6f1c, 0xbb60, 0x96d6, 0x3c99, 0xb85e, 0x0, 0x0);
        gbc.writeMem(0x8482, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x6f1c, gbc.sp());
        EXPECT(0x8484, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8482));
        EXPECT(0x78, gbc.readMem(0x8483));
        // CB 78 0158
        gbc.setState(0xc267, 0x1e97, 0xa7b0, 0xc520, 0xcad6, 0x3ae0, 0x1, 0x1);
        gbc.writeMem(0xc267, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x1e97, gbc.sp());
        EXPECT(0xc269, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc267));
        EXPECT(0x78, gbc.readMem(0xc268));
        // CB 78 0159
        gbc.setState(0xc543, 0x7dd4, 0x41d0, 0xd7ec, 0x5cff, 0x355a, 0x1, 0x1);
        gbc.writeMem(0xc543, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x7dd4, gbc.sp());
        EXPECT(0xc545, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc543));
        EXPECT(0x78, gbc.readMem(0xc544));
        // CB 78 015A
        gbc.setState(0xb9f6, 0x91e3, 0x3b30, 0xb09a, 0xa43c, 0x9533, 0x0, 0x1);
        gbc.writeMem(0xb9f6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x91e3, gbc.sp());
        EXPECT(0xb9f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9f6));
        EXPECT(0x78, gbc.readMem(0xb9f7));
        // CB 78 015C
        gbc.setState(0xe9dc, 0x221b, 0xec80, 0xdc96, 0x2510, 0xdb1f, 0x0, 0x1);
        gbc.writeMem(0xe9dc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x221b, gbc.sp());
        EXPECT(0xe9de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9dc));
        EXPECT(0x78, gbc.readMem(0xe9dd));
        // CB 78 015D
        gbc.setState(0x73ec, 0xdd33, 0x1aa0, 0xce6e, 0xd6ba, 0x697f, 0x0, 0x1);
        gbc.writeMem(0x73ec, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xdd33, gbc.sp());
        EXPECT(0x73ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 015E
        gbc.setState(0x33f8, 0x1e3b, 0x2470, 0x7bca, 0x7e4a, 0x8649, 0x0, 0x0);
        gbc.writeMem(0x33f8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x1e3b, gbc.sp());
        EXPECT(0x33fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 015F
        gbc.setState(0xd926, 0x5489, 0x7b00, 0xb3d2, 0x5da6, 0xf633, 0x1, 0x1);
        gbc.writeMem(0xd926, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x5489, gbc.sp());
        EXPECT(0xd928, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd926));
        EXPECT(0x78, gbc.readMem(0xd927));
        // CB 78 0160
        gbc.setState(0x2c59, 0x122c, 0xc010, 0xd26a, 0x9244, 0x4812, 0x0, 0x1);
        gbc.writeMem(0x2c59, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x122c, gbc.sp());
        EXPECT(0x2c5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0161
        gbc.setState(0x37c7, 0x36e4, 0xe7b0, 0x2c18, 0xdbd0, 0x54cb, 0x1, 0x0);
        gbc.writeMem(0x37c7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x36e4, gbc.sp());
        EXPECT(0x37c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0162
        gbc.setState(0x437d, 0xb362, 0x3020, 0x8e1d, 0x24d1, 0x8ed3, 0x0, 0x1);
        gbc.writeMem(0x437d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xb362, gbc.sp());
        EXPECT(0x437f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0164
        gbc.setState(0x5db9, 0xd10, 0x4b90, 0x4b2c, 0x5fdd, 0xe30a, 0x1, 0x0);
        gbc.writeMem(0x5db9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xd10, gbc.sp());
        EXPECT(0x5dbb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0165
        gbc.setState(0xde06, 0x8c, 0xc420, 0x724a, 0x1f83, 0xf781, 0x0, 0x1);
        gbc.writeMem(0xde06, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x8c, gbc.sp());
        EXPECT(0xde08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde06));
        EXPECT(0x78, gbc.readMem(0xde07));
        // CB 78 0166
        gbc.setState(0x9bb, 0x56f1, 0x6da0, 0xd604, 0xceec, 0x11b2, 0x1, 0x0);
        gbc.writeMem(0x9bb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x56f1, gbc.sp());
        EXPECT(0x9bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0167
        gbc.setState(0x5517, 0xfa03, 0x65c0, 0x7050, 0x1cb, 0x3b4a, 0x0, 0x1);
        gbc.writeMem(0x5517, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xfa03, gbc.sp());
        EXPECT(0x5519, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0168
        gbc.setState(0x2173, 0x3632, 0xfa70, 0x452e, 0x14a9, 0x7496, 0x0, 0x0);
        gbc.writeMem(0x2173, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x3632, gbc.sp());
        EXPECT(0x2175, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0169
        gbc.setState(0x431c, 0xcfcc, 0xd170, 0x8bf4, 0x50c6, 0x9814, 0x1, 0x0);
        gbc.writeMem(0x431c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xcfcc, gbc.sp());
        EXPECT(0x431e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 016A
        gbc.setState(0x26f3, 0x3a5d, 0x96c0, 0x598b, 0x1a7a, 0xb2e2, 0x1, 0x1);
        gbc.writeMem(0x26f3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x3a5d, gbc.sp());
        EXPECT(0x26f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 016B
        gbc.setState(0xe43f, 0xa2f, 0x2e00, 0xed7a, 0x4543, 0xcbcc, 0x0, 0x0);
        gbc.writeMem(0xe43f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xa2f, gbc.sp());
        EXPECT(0xe441, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe43f));
        EXPECT(0x78, gbc.readMem(0xe440));
        // CB 78 016C
        gbc.setState(0xc6f9, 0xe29, 0xbb00, 0xf170, 0x59bb, 0x5222, 0x1, 0x1);
        gbc.writeMem(0xc6f9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xe29, gbc.sp());
        EXPECT(0xc6fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6f9));
        EXPECT(0x78, gbc.readMem(0xc6fa));
        // CB 78 016D
        gbc.setState(0x7bc0, 0xb3fd, 0x3960, 0xf69d, 0xf779, 0x5c69, 0x0, 0x1);
        gbc.writeMem(0x7bc0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xb3fd, gbc.sp());
        EXPECT(0x7bc2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 016E
        gbc.setState(0x888b, 0xfcfd, 0x4e70, 0x845d, 0x63fc, 0x345e, 0x0, 0x0);
        gbc.writeMem(0x888b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xfcfd, gbc.sp());
        EXPECT(0x888d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x888b));
        EXPECT(0x78, gbc.readMem(0x888c));
        // CB 78 016F
        gbc.setState(0x982f, 0x6e70, 0x3450, 0x797f, 0xf04f, 0x7877, 0x0, 0x1);
        gbc.writeMem(0x982f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x6e70, gbc.sp());
        EXPECT(0x9831, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x982f));
        EXPECT(0x78, gbc.readMem(0x9830));
        // CB 78 0170
        gbc.setState(0x7e49, 0x5fd8, 0xd740, 0x9b64, 0x61a7, 0x28de, 0x0, 0x0);
        gbc.writeMem(0x7e49, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x5fd8, gbc.sp());
        EXPECT(0x7e4b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0171
        gbc.setState(0x1781, 0x9ed2, 0x710, 0xa943, 0x1979, 0xb4bb, 0x0, 0x0);
        gbc.writeMem(0x1781, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x9ed2, gbc.sp());
        EXPECT(0x1783, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0172
        gbc.setState(0x350e, 0x3105, 0xa950, 0xb231, 0x9d17, 0xed25, 0x0, 0x1);
        gbc.writeMem(0x350e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x3105, gbc.sp());
        EXPECT(0x3510, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0173
        gbc.setState(0x7641, 0x642e, 0x4fc0, 0xbe1a, 0x54bf, 0x9dd7, 0x1, 0x1);
        gbc.writeMem(0x7641, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x642e, gbc.sp());
        EXPECT(0x7643, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0174
        gbc.setState(0xb5e7, 0x1802, 0xdc40, 0x5e22, 0xa606, 0x2c48, 0x0, 0x1);
        gbc.writeMem(0xb5e7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x1802, gbc.sp());
        EXPECT(0xb5e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5e7));
        EXPECT(0x78, gbc.readMem(0xb5e8));
        // CB 78 0175
        gbc.setState(0xbc7f, 0x2af, 0xf710, 0xd2d0, 0x59a4, 0xeb1a, 0x1, 0x1);
        gbc.writeMem(0xbc7f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x2af, gbc.sp());
        EXPECT(0xbc81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc7f));
        EXPECT(0x78, gbc.readMem(0xbc80));
        // CB 78 0176
        gbc.setState(0xe42c, 0xe2ec, 0x75a0, 0xa5e1, 0x8f0d, 0x9bcd, 0x1, 0x1);
        gbc.writeMem(0xe42c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xe2ec, gbc.sp());
        EXPECT(0xe42e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe42c));
        EXPECT(0x78, gbc.readMem(0xe42d));
        // CB 78 0177
        gbc.setState(0x7cc, 0x7ccf, 0xa460, 0x324d, 0x6bbf, 0x6f78, 0x0, 0x1);
        gbc.writeMem(0x7cc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x7ccf, gbc.sp());
        EXPECT(0x7ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0178
        gbc.setState(0x4529, 0x7fe9, 0xcbb0, 0xdcb3, 0x9011, 0xd30b, 0x0, 0x1);
        gbc.writeMem(0x4529, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x7fe9, gbc.sp());
        EXPECT(0x452b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 017A
        gbc.setState(0xb075, 0x8b30, 0xf960, 0x6137, 0x36a, 0xce9, 0x0, 0x1);
        gbc.writeMem(0xb075, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x8b30, gbc.sp());
        EXPECT(0xb077, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb075));
        EXPECT(0x78, gbc.readMem(0xb076));
        // CB 78 017B
        gbc.setState(0x8db3, 0xd84f, 0xd7b0, 0xc982, 0x8f13, 0x59c5, 0x1, 0x0);
        gbc.writeMem(0x8db3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xd84f, gbc.sp());
        EXPECT(0x8db5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8db3));
        EXPECT(0x78, gbc.readMem(0x8db4));
        // CB 78 017C
        gbc.setState(0x6b14, 0xea7e, 0xf540, 0x8c08, 0x62a5, 0xa4a4, 0x0, 0x0);
        gbc.writeMem(0x6b14, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xea7e, gbc.sp());
        EXPECT(0x6b16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 017D
        gbc.setState(0x8d84, 0x7d28, 0x9770, 0xc4cf, 0xec37, 0xad57, 0x1, 0x0);
        gbc.writeMem(0x8d84, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x7d28, gbc.sp());
        EXPECT(0x8d86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d84));
        EXPECT(0x78, gbc.readMem(0x8d85));
        // CB 78 017E
        gbc.setState(0x94ba, 0xeb0c, 0x3ad0, 0xf837, 0xacf, 0x2fa1, 0x0, 0x1);
        gbc.writeMem(0x94ba, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xeb0c, gbc.sp());
        EXPECT(0x94bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94ba));
        EXPECT(0x78, gbc.readMem(0x94bb));
        // CB 78 017F
        gbc.setState(0x2815, 0x7aba, 0x99b0, 0x49e3, 0x88d9, 0x1445, 0x1, 0x0);
        gbc.writeMem(0x2815, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x7aba, gbc.sp());
        EXPECT(0x2817, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0181
        gbc.setState(0xc8bd, 0xc43d, 0xd240, 0x16e1, 0x1630, 0x9ba8, 0x0, 0x0);
        gbc.writeMem(0xc8bd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xc43d, gbc.sp());
        EXPECT(0xc8bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8bd));
        EXPECT(0x78, gbc.readMem(0xc8be));
        // CB 78 0182
        gbc.setState(0xebd9, 0x601c, 0x5a20, 0x8dda, 0xdbf7, 0xf452, 0x0, 0x1);
        gbc.writeMem(0xebd9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x601c, gbc.sp());
        EXPECT(0xebdb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebd9));
        EXPECT(0x78, gbc.readMem(0xebda));
        // CB 78 0183
        gbc.setState(0xb342, 0x9c23, 0x2630, 0xc48b, 0xc1b8, 0xcf76, 0x1, 0x1);
        gbc.writeMem(0xb342, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x9c23, gbc.sp());
        EXPECT(0xb344, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb342));
        EXPECT(0x78, gbc.readMem(0xb343));
        // CB 78 0184
        gbc.setState(0x766f, 0xff30, 0x8990, 0xfde4, 0xbb5c, 0xf5f1, 0x1, 0x0);
        gbc.writeMem(0x766f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xff30, gbc.sp());
        EXPECT(0x7671, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0185
        gbc.setState(0xb659, 0x344f, 0xbb30, 0xfb3f, 0xcace, 0xb9ad, 0x0, 0x0);
        gbc.writeMem(0xb659, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x344f, gbc.sp());
        EXPECT(0xb65b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb659));
        EXPECT(0x78, gbc.readMem(0xb65a));
        // CB 78 0186
        gbc.setState(0x830b, 0xedec, 0x3e40, 0x542f, 0xf11e, 0x4b04, 0x1, 0x1);
        gbc.writeMem(0x830b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xedec, gbc.sp());
        EXPECT(0x830d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x830b));
        EXPECT(0x78, gbc.readMem(0x830c));
        // CB 78 0187
        gbc.setState(0xb9f6, 0x79f7, 0xebe0, 0x3e58, 0x74d5, 0xabb, 0x0, 0x1);
        gbc.writeMem(0xb9f6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x79f7, gbc.sp());
        EXPECT(0xb9f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9f6));
        EXPECT(0x78, gbc.readMem(0xb9f7));
        // CB 78 0188
        gbc.setState(0xc9e1, 0x1b5f, 0x3730, 0x51d4, 0x3c19, 0x82d1, 0x1, 0x0);
        gbc.writeMem(0xc9e1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x1b5f, gbc.sp());
        EXPECT(0xc9e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9e1));
        EXPECT(0x78, gbc.readMem(0xc9e2));
        // CB 78 0189
        gbc.setState(0xc15c, 0x8830, 0x440, 0x5ebc, 0xb6fb, 0x31b7, 0x1, 0x0);
        gbc.writeMem(0xc15c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x8830, gbc.sp());
        EXPECT(0xc15e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc15c));
        EXPECT(0x78, gbc.readMem(0xc15d));
        // CB 78 018A
        gbc.setState(0x53e4, 0xb7ea, 0xfe40, 0x9b0a, 0xeaea, 0x17aa, 0x1, 0x0);
        gbc.writeMem(0x53e4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xb7ea, gbc.sp());
        EXPECT(0x53e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 018B
        gbc.setState(0x4fde, 0x35b6, 0xe090, 0xbaa9, 0xed97, 0x4171, 0x1, 0x0);
        gbc.writeMem(0x4fde, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x35b6, gbc.sp());
        EXPECT(0x4fe0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 018C
        gbc.setState(0xd19a, 0x1c21, 0x8470, 0x66f1, 0x616f, 0xc9bc, 0x0, 0x0);
        gbc.writeMem(0xd19a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x1c21, gbc.sp());
        EXPECT(0xd19c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd19a));
        EXPECT(0x78, gbc.readMem(0xd19b));
        // CB 78 018D
        gbc.setState(0x6fe7, 0x1712, 0x4090, 0x9c9, 0xaa4d, 0xbe02, 0x1, 0x0);
        gbc.writeMem(0x6fe7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x1712, gbc.sp());
        EXPECT(0x6fe9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 018E
        gbc.setState(0x251e, 0x9f5e, 0x6380, 0x4aa, 0x7c81, 0x219b, 0x1, 0x0);
        gbc.writeMem(0x251e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x9f5e, gbc.sp());
        EXPECT(0x2520, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 018F
        gbc.setState(0x93bd, 0x893d, 0x3940, 0x8c0e, 0xacd6, 0xdced, 0x0, 0x0);
        gbc.writeMem(0x93bd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x893d, gbc.sp());
        EXPECT(0x93bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93bd));
        EXPECT(0x78, gbc.readMem(0x93be));
        // CB 78 0191
        gbc.setState(0xd666, 0xc6c, 0xd4a0, 0xa6a5, 0x9087, 0xf790, 0x1, 0x0);
        gbc.writeMem(0xd666, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xc6c, gbc.sp());
        EXPECT(0xd668, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd666));
        EXPECT(0x78, gbc.readMem(0xd667));
        // CB 78 0192
        gbc.setState(0x9214, 0xa2b8, 0x4d40, 0xe9d3, 0x6105, 0xbfc0, 0x0, 0x1);
        gbc.writeMem(0x9214, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xa2b8, gbc.sp());
        EXPECT(0x9216, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9214));
        EXPECT(0x78, gbc.readMem(0x9215));
        // CB 78 0193
        gbc.setState(0xa60d, 0x27f9, 0x780, 0xa1aa, 0x6f1d, 0x30c7, 0x0, 0x1);
        gbc.writeMem(0xa60d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x27f9, gbc.sp());
        EXPECT(0xa60f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa60d));
        EXPECT(0x78, gbc.readMem(0xa60e));
        // CB 78 0194
        gbc.setState(0x9361, 0x2039, 0x1cf0, 0xfdd5, 0xbb5e, 0x103e, 0x0, 0x1);
        gbc.writeMem(0x9361, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x2039, gbc.sp());
        EXPECT(0x9363, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9361));
        EXPECT(0x78, gbc.readMem(0x9362));
        // CB 78 0195
        gbc.setState(0xc66e, 0xf6a4, 0xab10, 0x3273, 0x20a0, 0x6ba0, 0x1, 0x0);
        gbc.writeMem(0xc66e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xf6a4, gbc.sp());
        EXPECT(0xc670, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc66e));
        EXPECT(0x78, gbc.readMem(0xc66f));
        // CB 78 0196
        gbc.setState(0x2b96, 0x4ea5, 0x1fb0, 0x73d7, 0x7f89, 0x439b, 0x1, 0x0);
        gbc.writeMem(0x2b96, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x4ea5, gbc.sp());
        EXPECT(0x2b98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0197
        gbc.setState(0x58b5, 0x32ae, 0xf980, 0x5017, 0xa213, 0x80c8, 0x1, 0x0);
        gbc.writeMem(0x58b5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x32ae, gbc.sp());
        EXPECT(0x58b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0198
        gbc.setState(0x52eb, 0x468c, 0x9830, 0xbbd0, 0x71eb, 0x88b3, 0x1, 0x0);
        gbc.writeMem(0x52eb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x468c, gbc.sp());
        EXPECT(0x52ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0199
        gbc.setState(0x45e2, 0xd002, 0x3240, 0x7856, 0xc383, 0x3a25, 0x1, 0x1);
        gbc.writeMem(0x45e2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xd002, gbc.sp());
        EXPECT(0x45e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 019A
        gbc.setState(0x474a, 0xd9ec, 0x49a0, 0x9018, 0xcc6f, 0xee75, 0x1, 0x1);
        gbc.writeMem(0x474a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xd9ec, gbc.sp());
        EXPECT(0x474c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 019B
        gbc.setState(0x4c8d, 0xbff8, 0xa710, 0x6f0f, 0x287a, 0xedfa, 0x1, 0x1);
        gbc.writeMem(0x4c8d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xbff8, gbc.sp());
        EXPECT(0x4c8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 019C
        gbc.setState(0x16a5, 0xfd6d, 0x2100, 0xe19d, 0x69ef, 0xe5dd, 0x0, 0x1);
        gbc.writeMem(0x16a5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xfd6d, gbc.sp());
        EXPECT(0x16a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 019D
        gbc.setState(0x8909, 0x8052, 0xdca0, 0xab92, 0xd2af, 0x44d7, 0x0, 0x0);
        gbc.writeMem(0x8909, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x8052, gbc.sp());
        EXPECT(0x890b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8909));
        EXPECT(0x78, gbc.readMem(0x890a));
        // CB 78 019E
        gbc.setState(0x8585, 0xe6c3, 0x560, 0x6fb5, 0x5e6e, 0x6df1, 0x1, 0x1);
        gbc.writeMem(0x8585, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xe6c3, gbc.sp());
        EXPECT(0x8587, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8585));
        EXPECT(0x78, gbc.readMem(0x8586));
        // CB 78 019F
        gbc.setState(0xde22, 0x8f12, 0xb470, 0x7f54, 0xe1b5, 0x10d2, 0x1, 0x0);
        gbc.writeMem(0xde22, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x8f12, gbc.sp());
        EXPECT(0xde24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde22));
        EXPECT(0x78, gbc.readMem(0xde23));
        // CB 78 01A0
        gbc.setState(0x55f1, 0xcf32, 0x98b0, 0x7c08, 0x280a, 0x31ff, 0x0, 0x0);
        gbc.writeMem(0x55f1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xcf32, gbc.sp());
        EXPECT(0x55f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01A1
        gbc.setState(0xd580, 0xf02d, 0x3760, 0x42f4, 0xb0b2, 0xc44c, 0x0, 0x1);
        gbc.writeMem(0xd580, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xf02d, gbc.sp());
        EXPECT(0xd582, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd580));
        EXPECT(0x78, gbc.readMem(0xd581));
        // CB 78 01A3
        gbc.setState(0xa335, 0xff65, 0xcde0, 0xcb4e, 0x65c4, 0x26af, 0x1, 0x0);
        gbc.writeMem(0xa335, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xff65, gbc.sp());
        EXPECT(0xa337, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa335));
        EXPECT(0x78, gbc.readMem(0xa336));
        // CB 78 01A4
        gbc.setState(0x2287, 0xc7c9, 0x58f0, 0x21f1, 0xbbe1, 0xe629, 0x1, 0x1);
        gbc.writeMem(0x2287, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xc7c9, gbc.sp());
        EXPECT(0x2289, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01A5
        gbc.setState(0x9e54, 0x2892, 0x86e0, 0x3837, 0xe6c2, 0x50da, 0x1, 0x0);
        gbc.writeMem(0x9e54, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x2892, gbc.sp());
        EXPECT(0x9e56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e54));
        EXPECT(0x78, gbc.readMem(0x9e55));
        // CB 78 01A6
        gbc.setState(0x6518, 0xa6d2, 0xdca0, 0xf551, 0x4cb1, 0x13d2, 0x0, 0x0);
        gbc.writeMem(0x6518, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xa6d2, gbc.sp());
        EXPECT(0x651a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01A7
        gbc.setState(0xeb81, 0x548a, 0x8930, 0x99c1, 0x1f03, 0x18b3, 0x0, 0x1);
        gbc.writeMem(0xeb81, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x548a, gbc.sp());
        EXPECT(0xeb83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb81));
        EXPECT(0x78, gbc.readMem(0xeb82));
        // CB 78 01A8
        gbc.setState(0x7218, 0xa023, 0x2e70, 0xbb17, 0xb175, 0xc6df, 0x0, 0x1);
        gbc.writeMem(0x7218, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xa023, gbc.sp());
        EXPECT(0x721a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01A9
        gbc.setState(0x8691, 0x3e28, 0x9ff0, 0xbfc2, 0x8220, 0x8ce9, 0x0, 0x0);
        gbc.writeMem(0x8691, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x3e28, gbc.sp());
        EXPECT(0x8693, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8691));
        EXPECT(0x78, gbc.readMem(0x8692));
        // CB 78 01AA
        gbc.setState(0x3dfd, 0x6462, 0x49b0, 0xdf24, 0xe509, 0x28d8, 0x1, 0x0);
        gbc.writeMem(0x3dfd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x6462, gbc.sp());
        EXPECT(0x3dff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01AC
        gbc.setState(0xcda8, 0x10a0, 0x50, 0x36e1, 0xec7d, 0xb145, 0x1, 0x0);
        gbc.writeMem(0xcda8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x10a0, gbc.sp());
        EXPECT(0xcdaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcda8));
        EXPECT(0x78, gbc.readMem(0xcda9));
        // CB 78 01AD
        gbc.setState(0x1d8d, 0xf026, 0x3910, 0xa2a1, 0x6d31, 0xc392, 0x1, 0x1);
        gbc.writeMem(0x1d8d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xf026, gbc.sp());
        EXPECT(0x1d8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01AE
        gbc.setState(0x5c18, 0x92a6, 0x56b0, 0x5227, 0x935, 0x62f6, 0x1, 0x1);
        gbc.writeMem(0x5c18, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x92a6, gbc.sp());
        EXPECT(0x5c1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01AF
        gbc.setState(0x82aa, 0xbe99, 0x7c40, 0xb23d, 0xe5fc, 0x2a3c, 0x1, 0x1);
        gbc.writeMem(0x82aa, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xbe99, gbc.sp());
        EXPECT(0x82ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82aa));
        EXPECT(0x78, gbc.readMem(0x82ab));
        // CB 78 01B0
        gbc.setState(0x8f92, 0x69f, 0xfd70, 0xa4e0, 0xfe90, 0x92fb, 0x0, 0x0);
        gbc.writeMem(0x8f92, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x69f, gbc.sp());
        EXPECT(0x8f94, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f92));
        EXPECT(0x78, gbc.readMem(0x8f93));
        // CB 78 01B1
        gbc.setState(0x6b84, 0x5cbc, 0xfc20, 0x473, 0xa487, 0x4359, 0x1, 0x1);
        gbc.writeMem(0x6b84, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x5cbc, gbc.sp());
        EXPECT(0x6b86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01B2
        gbc.setState(0x17ec, 0x55ac, 0x5290, 0x8b8, 0xcd50, 0xcbd1, 0x1, 0x0);
        gbc.writeMem(0x17ec, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x55ac, gbc.sp());
        EXPECT(0x17ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01B3
        gbc.setState(0x2e30, 0xb656, 0x7900, 0x1500, 0x5d9f, 0xd0b7, 0x1, 0x0);
        gbc.writeMem(0x2e30, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xb656, gbc.sp());
        EXPECT(0x2e32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01B4
        gbc.setState(0x1b07, 0x2e35, 0x6c50, 0x7457, 0x30f6, 0x1566, 0x0, 0x1);
        gbc.writeMem(0x1b07, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x2e35, gbc.sp());
        EXPECT(0x1b09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01B5
        gbc.setState(0xba76, 0x6d12, 0xa170, 0x35db, 0xd895, 0x5704, 0x0, 0x0);
        gbc.writeMem(0xba76, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x6d12, gbc.sp());
        EXPECT(0xba78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba76));
        EXPECT(0x78, gbc.readMem(0xba77));
        // CB 78 01B6
        gbc.setState(0x1070, 0xb314, 0x6e10, 0xce45, 0x3bf3, 0x80fc, 0x0, 0x1);
        gbc.writeMem(0x1070, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xb314, gbc.sp());
        EXPECT(0x1072, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01B7
        gbc.setState(0x312b, 0xa78e, 0x2db0, 0x649f, 0xea5c, 0x5de2, 0x1, 0x0);
        gbc.writeMem(0x312b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xa78e, gbc.sp());
        EXPECT(0x312d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01B8
        gbc.setState(0x2b7d, 0xa870, 0x9650, 0x4770, 0x4669, 0x24d9, 0x1, 0x1);
        gbc.writeMem(0x2b7d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xa870, gbc.sp());
        EXPECT(0x2b7f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01B9
        gbc.setState(0x4ddd, 0x6fb, 0xd9b0, 0xd952, 0xb539, 0x6cb8, 0x0, 0x1);
        gbc.writeMem(0x4ddd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x6fb, gbc.sp());
        EXPECT(0x4ddf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01BA
        gbc.setState(0xc8ba, 0xf2d1, 0x4cb0, 0x723f, 0xb8c3, 0x615d, 0x1, 0x0);
        gbc.writeMem(0xc8ba, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xf2d1, gbc.sp());
        EXPECT(0xc8bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8ba));
        EXPECT(0x78, gbc.readMem(0xc8bb));
        // CB 78 01BB
        gbc.setState(0x585c, 0x9b1e, 0x84a0, 0x263f, 0xdf2e, 0xd36e, 0x0, 0x0);
        gbc.writeMem(0x585c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x9b1e, gbc.sp());
        EXPECT(0x585e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01BC
        gbc.setState(0x6e26, 0xb168, 0xc990, 0xcc91, 0xe291, 0x291, 0x1, 0x1);
        gbc.writeMem(0x6e26, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xb168, gbc.sp());
        EXPECT(0x6e28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01BD
        gbc.setState(0xcadd, 0x3fb3, 0xa8f0, 0x9a8b, 0x5e48, 0xafe0, 0x1, 0x0);
        gbc.writeMem(0xcadd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x3fb3, gbc.sp());
        EXPECT(0xcadf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcadd));
        EXPECT(0x78, gbc.readMem(0xcade));
        // CB 78 01BE
        gbc.setState(0x27c, 0xd1d2, 0xee20, 0x3488, 0xcb23, 0x475, 0x1, 0x0);
        gbc.writeMem(0x27c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xd1d2, gbc.sp());
        EXPECT(0x27e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01BF
        gbc.setState(0xd9aa, 0x1d46, 0xc5f0, 0xe41, 0xfda, 0xdf23, 0x0, 0x0);
        gbc.writeMem(0xd9aa, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x1d46, gbc.sp());
        EXPECT(0xd9ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9aa));
        EXPECT(0x78, gbc.readMem(0xd9ab));
        // CB 78 01C0
        gbc.setState(0xdb5d, 0xe69e, 0xc5f0, 0xd391, 0x43f3, 0xab3c, 0x1, 0x0);
        gbc.writeMem(0xdb5d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xe69e, gbc.sp());
        EXPECT(0xdb5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb5d));
        EXPECT(0x78, gbc.readMem(0xdb5e));
        // CB 78 01C1
        gbc.setState(0x6a55, 0x7ac2, 0xf30, 0xcff5, 0x506c, 0xee, 0x0, 0x0);
        gbc.writeMem(0x6a55, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x7ac2, gbc.sp());
        EXPECT(0x6a57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01C2
        gbc.setState(0x7f59, 0x9dfd, 0x96c0, 0x3e01, 0x3de7, 0xd9be, 0x0, 0x0);
        gbc.writeMem(0x7f59, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x9dfd, gbc.sp());
        EXPECT(0x7f5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01C3
        gbc.setState(0x3d4e, 0x55ef, 0xa5f0, 0xc9dd, 0xba41, 0xeb91, 0x0, 0x0);
        gbc.writeMem(0x3d4e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x55ef, gbc.sp());
        EXPECT(0x3d50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01C4
        gbc.setState(0x492, 0xef5e, 0x9300, 0x80af, 0x4c27, 0xc717, 0x0, 0x1);
        gbc.writeMem(0x492, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xef5e, gbc.sp());
        EXPECT(0x494, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01C5
        gbc.setState(0xdf6d, 0x7c84, 0x8490, 0x7617, 0x197c, 0x1541, 0x1, 0x0);
        gbc.writeMem(0xdf6d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x7c84, gbc.sp());
        EXPECT(0xdf6f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf6d));
        EXPECT(0x78, gbc.readMem(0xdf6e));
        // CB 78 01C6
        gbc.setState(0x1902, 0xaf78, 0x6040, 0x7dff, 0xd38d, 0x4488, 0x0, 0x0);
        gbc.writeMem(0x1902, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xaf78, gbc.sp());
        EXPECT(0x1904, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01C7
        gbc.setState(0xb503, 0xa812, 0x6680, 0xf65b, 0xd896, 0x78ba, 0x1, 0x1);
        gbc.writeMem(0xb503, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xa812, gbc.sp());
        EXPECT(0xb505, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb503));
        EXPECT(0x78, gbc.readMem(0xb504));
        // CB 78 01C8
        gbc.setState(0x7cca, 0x2cb9, 0x8e80, 0x8950, 0xe862, 0xa92e, 0x0, 0x0);
        gbc.writeMem(0x7cca, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x2cb9, gbc.sp());
        EXPECT(0x7ccc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01C9
        gbc.setState(0x6cb6, 0xe57b, 0x7090, 0xb0c, 0x4997, 0x9f88, 0x0, 0x0);
        gbc.writeMem(0x6cb6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xe57b, gbc.sp());
        EXPECT(0x6cb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01CA
        gbc.setState(0xdd3a, 0x6bb2, 0x9bb0, 0x6133, 0x7293, 0x6188, 0x1, 0x0);
        gbc.writeMem(0xdd3a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x6bb2, gbc.sp());
        EXPECT(0xdd3c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd3a));
        EXPECT(0x78, gbc.readMem(0xdd3b));
        // CB 78 01CB
        gbc.setState(0xa8fa, 0xb266, 0xadb0, 0x556b, 0x1aca, 0x4e64, 0x1, 0x0);
        gbc.writeMem(0xa8fa, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xb266, gbc.sp());
        EXPECT(0xa8fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8fa));
        EXPECT(0x78, gbc.readMem(0xa8fb));
        // CB 78 01CC
        gbc.setState(0x3fb6, 0x2bfb, 0x33d0, 0x67c9, 0xd09b, 0x2e29, 0x0, 0x0);
        gbc.writeMem(0x3fb6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x2bfb, gbc.sp());
        EXPECT(0x3fb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01CD
        gbc.setState(0x9dee, 0x22e, 0x4000, 0x13c9, 0x1449, 0xb7fe, 0x1, 0x1);
        gbc.writeMem(0x9dee, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x22e, gbc.sp());
        EXPECT(0x9df0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9dee));
        EXPECT(0x78, gbc.readMem(0x9def));
        // CB 78 01CE
        gbc.setState(0xab47, 0x9ad1, 0xfdb0, 0xcc36, 0x9a47, 0x7816, 0x0, 0x0);
        gbc.writeMem(0xab47, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x9ad1, gbc.sp());
        EXPECT(0xab49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab47));
        EXPECT(0x78, gbc.readMem(0xab48));
        // CB 78 01CF
        gbc.setState(0xd3f7, 0x137c, 0x9280, 0xf4a2, 0x288d, 0xb29f, 0x0, 0x0);
        gbc.writeMem(0xd3f7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x137c, gbc.sp());
        EXPECT(0xd3f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3f7));
        EXPECT(0x78, gbc.readMem(0xd3f8));
        // CB 78 01D1
        gbc.setState(0x1951, 0x1a1e, 0x4d20, 0x65d7, 0x79b9, 0x880f, 0x0, 0x1);
        gbc.writeMem(0x1951, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x1a1e, gbc.sp());
        EXPECT(0x1953, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01D2
        gbc.setState(0x4523, 0xc366, 0xb620, 0x4d83, 0xe213, 0x1f3c, 0x1, 0x0);
        gbc.writeMem(0x4523, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xc366, gbc.sp());
        EXPECT(0x4525, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01D4
        gbc.setState(0xb7f4, 0x70f5, 0xbea0, 0x6814, 0x2c51, 0xf503, 0x0, 0x0);
        gbc.writeMem(0xb7f4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x70f5, gbc.sp());
        EXPECT(0xb7f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7f4));
        EXPECT(0x78, gbc.readMem(0xb7f5));
        // CB 78 01D5
        gbc.setState(0x86a1, 0x38ef, 0x9110, 0xc3ff, 0xe770, 0x1339, 0x0, 0x0);
        gbc.writeMem(0x86a1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x38ef, gbc.sp());
        EXPECT(0x86a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86a1));
        EXPECT(0x78, gbc.readMem(0x86a2));
        // CB 78 01D6
        gbc.setState(0x28a5, 0xab96, 0xe680, 0x5597, 0x4746, 0x57e1, 0x0, 0x1);
        gbc.writeMem(0x28a5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xab96, gbc.sp());
        EXPECT(0x28a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01D7
        gbc.setState(0x2727, 0x8b1c, 0xb6e0, 0x9fec, 0xf7ee, 0x3806, 0x1, 0x0);
        gbc.writeMem(0x2727, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x8b1c, gbc.sp());
        EXPECT(0x2729, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01D8
        gbc.setState(0xda3f, 0x5a76, 0x27a0, 0x760d, 0x5699, 0x5f4, 0x1, 0x0);
        gbc.writeMem(0xda3f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x5a76, gbc.sp());
        EXPECT(0xda41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda3f));
        EXPECT(0x78, gbc.readMem(0xda40));
        // CB 78 01D9
        gbc.setState(0x3a90, 0xfcf6, 0x640, 0x6b4d, 0x1261, 0x2487, 0x1, 0x0);
        gbc.writeMem(0x3a90, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xfcf6, gbc.sp());
        EXPECT(0x3a92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01DA
        gbc.setState(0x5cec, 0x1769, 0x8cf0, 0xc885, 0xe693, 0xefb5, 0x0, 0x1);
        gbc.writeMem(0x5cec, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x1769, gbc.sp());
        EXPECT(0x5cee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01DB
        gbc.setState(0x23dc, 0x78b, 0x80d0, 0x6374, 0x6fd7, 0x214e, 0x1, 0x0);
        gbc.writeMem(0x23dc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x78b, gbc.sp());
        EXPECT(0x23de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01DC
        gbc.setState(0xba67, 0x244b, 0x80e0, 0xe33a, 0x5154, 0x638a, 0x0, 0x0);
        gbc.writeMem(0xba67, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x244b, gbc.sp());
        EXPECT(0xba69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba67));
        EXPECT(0x78, gbc.readMem(0xba68));
        // CB 78 01DD
        gbc.setState(0xc28a, 0x9738, 0x5d30, 0x1cde, 0xb46b, 0x87bf, 0x1, 0x1);
        gbc.writeMem(0xc28a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x9738, gbc.sp());
        EXPECT(0xc28c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc28a));
        EXPECT(0x78, gbc.readMem(0xc28b));
        // CB 78 01DE
        gbc.setState(0x7976, 0x5803, 0xfd60, 0xb304, 0xd3ec, 0x7a54, 0x1, 0x0);
        gbc.writeMem(0x7976, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x5803, gbc.sp());
        EXPECT(0x7978, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01DF
        gbc.setState(0x7836, 0x5518, 0x45d0, 0x12e0, 0x5dde, 0xde7b, 0x1, 0x0);
        gbc.writeMem(0x7836, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x5518, gbc.sp());
        EXPECT(0x7838, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01E2
        gbc.setState(0x95a7, 0x4d0c, 0xc60, 0x3d6b, 0x9e6c, 0xff7, 0x0, 0x1);
        gbc.writeMem(0x95a7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x4d0c, gbc.sp());
        EXPECT(0x95a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95a7));
        EXPECT(0x78, gbc.readMem(0x95a8));
        // CB 78 01E3
        gbc.setState(0x1b77, 0x55f4, 0xfe00, 0x1b4e, 0x1e3b, 0xc298, 0x1, 0x1);
        gbc.writeMem(0x1b77, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x55f4, gbc.sp());
        EXPECT(0x1b79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01E4
        gbc.setState(0x16a9, 0xe554, 0x4370, 0xdfa7, 0x8527, 0xa27, 0x1, 0x1);
        gbc.writeMem(0x16a9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xe554, gbc.sp());
        EXPECT(0x16ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01E5
        gbc.setState(0x7486, 0x1b34, 0xe560, 0xa174, 0x5364, 0x2722, 0x0, 0x0);
        gbc.writeMem(0x7486, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x1b34, gbc.sp());
        EXPECT(0x7488, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01E6
        gbc.setState(0xeb61, 0x5f38, 0x6390, 0x58ee, 0x85e0, 0x40a9, 0x0, 0x0);
        gbc.writeMem(0xeb61, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x5f38, gbc.sp());
        EXPECT(0xeb63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb61));
        EXPECT(0x78, gbc.readMem(0xeb62));
        // CB 78 01E7
        gbc.setState(0x426, 0xc846, 0x9be0, 0xf448, 0x247b, 0xc05e, 0x1, 0x0);
        gbc.writeMem(0x426, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xc846, gbc.sp());
        EXPECT(0x428, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01E8
        gbc.setState(0x49db, 0x8de8, 0x1ea0, 0xb9ba, 0xd562, 0x5e26, 0x1, 0x0);
        gbc.writeMem(0x49db, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x8de8, gbc.sp());
        EXPECT(0x49dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01E9
        gbc.setState(0x53b0, 0xd7fd, 0xf510, 0x818f, 0x3916, 0x7950, 0x0, 0x0);
        gbc.writeMem(0x53b0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xd7fd, gbc.sp());
        EXPECT(0x53b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01EA
        gbc.setState(0x3812, 0x2939, 0x66f0, 0xfce2, 0x543f, 0xfe90, 0x1, 0x1);
        gbc.writeMem(0x3812, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x2939, gbc.sp());
        EXPECT(0x3814, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01EB
        gbc.setState(0x97d7, 0xa7e9, 0xdfc0, 0x6210, 0xc27d, 0xe88, 0x1, 0x0);
        gbc.writeMem(0x97d7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xa7e9, gbc.sp());
        EXPECT(0x97d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97d7));
        EXPECT(0x78, gbc.readMem(0x97d8));
        // CB 78 01EC
        gbc.setState(0xbec4, 0xd38b, 0x65e0, 0xc35e, 0x23dd, 0x11b5, 0x1, 0x1);
        gbc.writeMem(0xbec4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xd38b, gbc.sp());
        EXPECT(0xbec6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbec4));
        EXPECT(0x78, gbc.readMem(0xbec5));
        // CB 78 01ED
        gbc.setState(0xe7ad, 0x5534, 0x50b0, 0xbe88, 0x981f, 0x3c6a, 0x0, 0x0);
        gbc.writeMem(0xe7ad, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x5534, gbc.sp());
        EXPECT(0xe7af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7ad));
        EXPECT(0x78, gbc.readMem(0xe7ae));
        // CB 78 01EE
        gbc.setState(0x5fbf, 0x1622, 0xfca0, 0xaa77, 0xcdf0, 0x954b, 0x1, 0x1);
        gbc.writeMem(0x5fbf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x1622, gbc.sp());
        EXPECT(0x5fc1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01EF
        gbc.setState(0x124e, 0xd22d, 0x6a50, 0x2a50, 0x7480, 0x44a7, 0x0, 0x0);
        gbc.writeMem(0x124e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xd22d, gbc.sp());
        EXPECT(0x1250, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01F0
        gbc.setState(0x9ee2, 0xe3b4, 0x8180, 0x38db, 0x4f95, 0x225a, 0x0, 0x0);
        gbc.writeMem(0x9ee2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xe3b4, gbc.sp());
        EXPECT(0x9ee4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ee2));
        EXPECT(0x78, gbc.readMem(0x9ee3));
        // CB 78 01F1
        gbc.setState(0x97c6, 0x4a38, 0xc0a0, 0xe095, 0xfee0, 0x4a57, 0x0, 0x1);
        gbc.writeMem(0x97c6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x4a38, gbc.sp());
        EXPECT(0x97c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97c6));
        EXPECT(0x78, gbc.readMem(0x97c7));
        // CB 78 01F2
        gbc.setState(0xb3ce, 0x3e45, 0x7280, 0xa3fb, 0x30b5, 0x9caa, 0x0, 0x1);
        gbc.writeMem(0xb3ce, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x3e45, gbc.sp());
        EXPECT(0xb3d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3ce));
        EXPECT(0x78, gbc.readMem(0xb3cf));
        // CB 78 01F3
        gbc.setState(0x141c, 0x484b, 0xf950, 0x2fda, 0x5cf7, 0x6973, 0x0, 0x0);
        gbc.writeMem(0x141c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x484b, gbc.sp());
        EXPECT(0x141e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01F4
        gbc.setState(0x542d, 0xd021, 0x44f0, 0x5f6b, 0x44c3, 0xadd3, 0x1, 0x1);
        gbc.writeMem(0x542d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xd021, gbc.sp());
        EXPECT(0x542f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01F5
        gbc.setState(0xda32, 0x9916, 0xd240, 0xa0a1, 0x1b46, 0xe2f8, 0x1, 0x0);
        gbc.writeMem(0xda32, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x9916, gbc.sp());
        EXPECT(0xda34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda32));
        EXPECT(0x78, gbc.readMem(0xda33));
        // CB 78 01F8
        gbc.setState(0xea9f, 0xa55e, 0xc510, 0x45a7, 0xf775, 0xbb99, 0x0, 0x0);
        gbc.writeMem(0xea9f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xa55e, gbc.sp());
        EXPECT(0xeaa1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea9f));
        EXPECT(0x78, gbc.readMem(0xeaa0));
        // CB 78 01F9
        gbc.setState(0x6875, 0x52af, 0xd520, 0x9b5, 0x110, 0x4bd2, 0x1, 0x0);
        gbc.writeMem(0x6875, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x52af, gbc.sp());
        EXPECT(0x6877, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01FA
        gbc.setState(0x7af0, 0xa711, 0x8290, 0x6bd0, 0x1914, 0xb1a0, 0x1, 0x0);
        gbc.writeMem(0x7af0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xa711, gbc.sp());
        EXPECT(0x7af2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01FB
        gbc.setState(0x338b, 0xeed2, 0x3c50, 0x37bd, 0x9a77, 0x5d92, 0x1, 0x0);
        gbc.writeMem(0x338b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xeed2, gbc.sp());
        EXPECT(0x338d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 01FC
        gbc.setState(0xe5ce, 0xaa95, 0x6c60, 0xc03e, 0x491b, 0xa295, 0x1, 0x0);
        gbc.writeMem(0xe5ce, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xaa95, gbc.sp());
        EXPECT(0xe5d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5ce));
        EXPECT(0x78, gbc.readMem(0xe5cf));
        // CB 78 01FD
        gbc.setState(0x7569, 0xcaa6, 0xeec0, 0x52c7, 0x1fba, 0x7f34, 0x1, 0x0);
        gbc.writeMem(0x7569, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xcaa6, gbc.sp());
        EXPECT(0x756b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 01FE
        gbc.setState(0x9152, 0xee28, 0x2d20, 0xed4a, 0xc58a, 0x9549, 0x1, 0x0);
        gbc.writeMem(0x9152, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xee28, gbc.sp());
        EXPECT(0x9154, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9152));
        EXPECT(0x78, gbc.readMem(0x9153));
        // CB 78 01FF
        gbc.setState(0x3f50, 0x4091, 0x49d0, 0xbe1c, 0x5ac3, 0x1da5, 0x0, 0x0);
        gbc.writeMem(0x3f50, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x4091, gbc.sp());
        EXPECT(0x3f52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0200
        gbc.setState(0x1896, 0xf0b, 0x5ae0, 0xbccd, 0x3942, 0x173a, 0x0, 0x0);
        gbc.writeMem(0x1896, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xf0b, gbc.sp());
        EXPECT(0x1898, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0201
        gbc.setState(0x49e8, 0x79e3, 0x7c60, 0x2e7b, 0x98ef, 0x2488, 0x1, 0x0);
        gbc.writeMem(0x49e8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x79e3, gbc.sp());
        EXPECT(0x49ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0202
        gbc.setState(0x6c69, 0xbbdb, 0xd200, 0xd149, 0xa, 0xde3b, 0x1, 0x0);
        gbc.writeMem(0x6c69, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xbbdb, gbc.sp());
        EXPECT(0x6c6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0204
        gbc.setState(0xde65, 0x4382, 0x7690, 0xa479, 0x4abb, 0xf1f1, 0x0, 0x1);
        gbc.writeMem(0xde65, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x4382, gbc.sp());
        EXPECT(0xde67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde65));
        EXPECT(0x78, gbc.readMem(0xde66));
        // CB 78 0205
        gbc.setState(0xdea1, 0x3397, 0x53b0, 0x1521, 0xd111, 0xf0bd, 0x1, 0x0);
        gbc.writeMem(0xdea1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x3397, gbc.sp());
        EXPECT(0xdea3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdea1));
        EXPECT(0x78, gbc.readMem(0xdea2));
        // CB 78 0206
        gbc.setState(0x95de, 0x2008, 0x3070, 0x2f32, 0x7638, 0x84ba, 0x0, 0x1);
        gbc.writeMem(0x95de, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x2008, gbc.sp());
        EXPECT(0x95e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95de));
        EXPECT(0x78, gbc.readMem(0x95df));
        // CB 78 0207
        gbc.setState(0xc8b3, 0x67ea, 0xe890, 0xaf4b, 0xdd68, 0x7809, 0x1, 0x1);
        gbc.writeMem(0xc8b3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x67ea, gbc.sp());
        EXPECT(0xc8b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8b3));
        EXPECT(0x78, gbc.readMem(0xc8b4));
        // CB 78 0208
        gbc.setState(0xbf23, 0x3394, 0x2e20, 0xced5, 0x8549, 0x53f2, 0x1, 0x1);
        gbc.writeMem(0xbf23, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x3394, gbc.sp());
        EXPECT(0xbf25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf23));
        EXPECT(0x78, gbc.readMem(0xbf24));
        // CB 78 0209
        gbc.setState(0xd5b8, 0x7974, 0xe990, 0x386d, 0xec91, 0x8816, 0x1, 0x1);
        gbc.writeMem(0xd5b8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x7974, gbc.sp());
        EXPECT(0xd5ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5b8));
        EXPECT(0x78, gbc.readMem(0xd5b9));
        // CB 78 020A
        gbc.setState(0x6fb9, 0x7d4a, 0x6c70, 0xa45f, 0x1ce0, 0x8710, 0x0, 0x0);
        gbc.writeMem(0x6fb9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x7d4a, gbc.sp());
        EXPECT(0x6fbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 020B
        gbc.setState(0x64be, 0x71de, 0xb1f0, 0xedc, 0x3810, 0x5ab7, 0x0, 0x1);
        gbc.writeMem(0x64be, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x71de, gbc.sp());
        EXPECT(0x64c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 020C
        gbc.setState(0x70cd, 0x6e4, 0x23a0, 0x8acf, 0xfb2f, 0x748e, 0x0, 0x1);
        gbc.writeMem(0x70cd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x6e4, gbc.sp());
        EXPECT(0x70cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 020D
        gbc.setState(0x1149, 0x6492, 0xf6e0, 0x929f, 0x136b, 0x53c0, 0x1, 0x1);
        gbc.writeMem(0x1149, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x6492, gbc.sp());
        EXPECT(0x114b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 020E
        gbc.setState(0xccc4, 0x92c4, 0x1410, 0xe130, 0x8ade, 0x6e5e, 0x0, 0x0);
        gbc.writeMem(0xccc4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x92c4, gbc.sp());
        EXPECT(0xccc6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccc4));
        EXPECT(0x78, gbc.readMem(0xccc5));
        // CB 78 020F
        gbc.setState(0x7405, 0x4b9f, 0x50d0, 0x6574, 0x2f2b, 0x6be7, 0x1, 0x0);
        gbc.writeMem(0x7405, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x4b9f, gbc.sp());
        EXPECT(0x7407, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0210
        gbc.setState(0x881f, 0xf27a, 0xe240, 0xd1d0, 0x5b9f, 0xc54, 0x1, 0x1);
        gbc.writeMem(0x881f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xf27a, gbc.sp());
        EXPECT(0x8821, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x881f));
        EXPECT(0x78, gbc.readMem(0x8820));
        // CB 78 0211
        gbc.setState(0xe10e, 0x8781, 0x88b0, 0x1ab8, 0x90d4, 0x3334, 0x0, 0x1);
        gbc.writeMem(0xe10e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x8781, gbc.sp());
        EXPECT(0xe110, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe10e));
        EXPECT(0x78, gbc.readMem(0xe10f));
        // CB 78 0213
        gbc.setState(0xcd5c, 0x657a, 0xb960, 0x4bc8, 0xe43b, 0x75e2, 0x1, 0x1);
        gbc.writeMem(0xcd5c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x657a, gbc.sp());
        EXPECT(0xcd5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd5c));
        EXPECT(0x78, gbc.readMem(0xcd5d));
        // CB 78 0214
        gbc.setState(0x5207, 0x3261, 0xc090, 0xc79a, 0x2f61, 0x6b23, 0x1, 0x0);
        gbc.writeMem(0x5207, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x3261, gbc.sp());
        EXPECT(0x5209, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0215
        gbc.setState(0x14bc, 0xee1e, 0x900, 0x2fa7, 0x7aac, 0x5b6a, 0x0, 0x1);
        gbc.writeMem(0x14bc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xee1e, gbc.sp());
        EXPECT(0x14be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0216
        gbc.setState(0xcc61, 0x4423, 0xa7f0, 0x5607, 0xdb3d, 0xe135, 0x1, 0x1);
        gbc.writeMem(0xcc61, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x4423, gbc.sp());
        EXPECT(0xcc63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc61));
        EXPECT(0x78, gbc.readMem(0xcc62));
        // CB 78 0217
        gbc.setState(0xac7a, 0xcaaf, 0xcb40, 0xeb3a, 0xc302, 0xf5f4, 0x0, 0x0);
        gbc.writeMem(0xac7a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xcaaf, gbc.sp());
        EXPECT(0xac7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac7a));
        EXPECT(0x78, gbc.readMem(0xac7b));
        // CB 78 0218
        gbc.setState(0x2d1e, 0xe60a, 0x2190, 0x3547, 0x4b88, 0xa031, 0x1, 0x0);
        gbc.writeMem(0x2d1e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xe60a, gbc.sp());
        EXPECT(0x2d20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0219
        gbc.setState(0xa07b, 0x5491, 0x7a10, 0xaa18, 0xb11, 0x958c, 0x0, 0x1);
        gbc.writeMem(0xa07b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x5491, gbc.sp());
        EXPECT(0xa07d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa07b));
        EXPECT(0x78, gbc.readMem(0xa07c));
        // CB 78 021A
        gbc.setState(0xa21a, 0x1337, 0x1220, 0xa043, 0xa782, 0x818, 0x1, 0x0);
        gbc.writeMem(0xa21a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x1337, gbc.sp());
        EXPECT(0xa21c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa21a));
        EXPECT(0x78, gbc.readMem(0xa21b));
        // CB 78 021B
        gbc.setState(0x8c98, 0xe3fd, 0xfbe0, 0x71a6, 0x8fda, 0x2255, 0x0, 0x1);
        gbc.writeMem(0x8c98, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xe3fd, gbc.sp());
        EXPECT(0x8c9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c98));
        EXPECT(0x78, gbc.readMem(0x8c99));
        // CB 78 021C
        gbc.setState(0x3bdb, 0xcb6d, 0x1f70, 0xabe1, 0xa5d4, 0x91ab, 0x0, 0x1);
        gbc.writeMem(0x3bdb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xcb6d, gbc.sp());
        EXPECT(0x3bdd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 021E
        gbc.setState(0x90cf, 0xd874, 0x7e20, 0x46d4, 0xb298, 0x9853, 0x1, 0x1);
        gbc.writeMem(0x90cf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xd874, gbc.sp());
        EXPECT(0x90d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90cf));
        EXPECT(0x78, gbc.readMem(0x90d0));
        // CB 78 021F
        gbc.setState(0x7e00, 0xf470, 0x5db0, 0x54a3, 0x1940, 0x4846, 0x0, 0x0);
        gbc.writeMem(0x7e00, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xf470, gbc.sp());
        EXPECT(0x7e02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0220
        gbc.setState(0xe827, 0x8562, 0x8180, 0xcf85, 0xa2d0, 0x1062, 0x0, 0x1);
        gbc.writeMem(0xe827, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x8562, gbc.sp());
        EXPECT(0xe829, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe827));
        EXPECT(0x78, gbc.readMem(0xe828));
        // CB 78 0221
        gbc.setState(0x64f, 0x67ef, 0xb2b0, 0xa89d, 0xb8d0, 0xe61b, 0x1, 0x0);
        gbc.writeMem(0x64f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x67ef, gbc.sp());
        EXPECT(0x651, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0222
        gbc.setState(0x2768, 0x8bb, 0x1b00, 0x8a4b, 0x4322, 0x8b70, 0x0, 0x0);
        gbc.writeMem(0x2768, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x8bb, gbc.sp());
        EXPECT(0x276a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0223
        gbc.setState(0x2137, 0x935b, 0xe640, 0xf530, 0xb8da, 0x70ca, 0x1, 0x0);
        gbc.writeMem(0x2137, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x935b, gbc.sp());
        EXPECT(0x2139, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0224
        gbc.setState(0x3b29, 0xf345, 0x9480, 0xdbb1, 0x7c36, 0xf8b9, 0x1, 0x1);
        gbc.writeMem(0x3b29, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xf345, gbc.sp());
        EXPECT(0x3b2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0225
        gbc.setState(0x6da6, 0xad81, 0x65e0, 0x40bc, 0xc0f0, 0x4968, 0x0, 0x1);
        gbc.writeMem(0x6da6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xad81, gbc.sp());
        EXPECT(0x6da8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0226
        gbc.setState(0x9d82, 0xb688, 0xe7b0, 0x9169, 0x5289, 0x2d3e, 0x0, 0x0);
        gbc.writeMem(0x9d82, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xb688, gbc.sp());
        EXPECT(0x9d84, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d82));
        EXPECT(0x78, gbc.readMem(0x9d83));
        // CB 78 0227
        gbc.setState(0x5f8d, 0x1fdd, 0x84e0, 0xbcba, 0x92e7, 0xa74b, 0x1, 0x1);
        gbc.writeMem(0x5f8d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x1fdd, gbc.sp());
        EXPECT(0x5f8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0228
        gbc.setState(0x6373, 0x2240, 0xc290, 0xd589, 0x3008, 0x72c9, 0x1, 0x1);
        gbc.writeMem(0x6373, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x2240, gbc.sp());
        EXPECT(0x6375, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0229
        gbc.setState(0x2976, 0x5304, 0xcd10, 0xe9bc, 0x6e67, 0x2cdb, 0x1, 0x0);
        gbc.writeMem(0x2976, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x5304, gbc.sp());
        EXPECT(0x2978, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 022A
        gbc.setState(0x6b12, 0xc376, 0xc20, 0x8ef, 0x718b, 0xa200, 0x0, 0x1);
        gbc.writeMem(0x6b12, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xc376, gbc.sp());
        EXPECT(0x6b14, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 022C
        gbc.setState(0x82fc, 0x1555, 0x37f0, 0xbf03, 0x25d7, 0xcfcf, 0x1, 0x1);
        gbc.writeMem(0x82fc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x1555, gbc.sp());
        EXPECT(0x82fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82fc));
        EXPECT(0x78, gbc.readMem(0x82fd));
        // CB 78 022D
        gbc.setState(0xcf08, 0xd047, 0x43a0, 0xefe0, 0x574a, 0xca1, 0x1, 0x1);
        gbc.writeMem(0xcf08, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xd047, gbc.sp());
        EXPECT(0xcf0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf08));
        EXPECT(0x78, gbc.readMem(0xcf09));
        // CB 78 022E
        gbc.setState(0x7ca1, 0x8fc2, 0x9b30, 0xa6f, 0xc7cd, 0x519a, 0x0, 0x0);
        gbc.writeMem(0x7ca1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x8fc2, gbc.sp());
        EXPECT(0x7ca3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0230
        gbc.setState(0x575a, 0xe654, 0x7db0, 0xe4ed, 0x27bc, 0xa8e7, 0x1, 0x1);
        gbc.writeMem(0x575a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xe654, gbc.sp());
        EXPECT(0x575c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0231
        gbc.setState(0xd7a3, 0x8f2d, 0x4ae0, 0xa43a, 0xf2e9, 0x90da, 0x1, 0x1);
        gbc.writeMem(0xd7a3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x8f2d, gbc.sp());
        EXPECT(0xd7a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7a3));
        EXPECT(0x78, gbc.readMem(0xd7a4));
        // CB 78 0232
        gbc.setState(0x66d9, 0xab2a, 0x1750, 0x90d3, 0xa6c9, 0xaa6a, 0x0, 0x1);
        gbc.writeMem(0x66d9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xab2a, gbc.sp());
        EXPECT(0x66db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0233
        gbc.setState(0xd0da, 0x2316, 0xe8c0, 0x1931, 0xa6d5, 0xacb, 0x0, 0x1);
        gbc.writeMem(0xd0da, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x2316, gbc.sp());
        EXPECT(0xd0dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0da));
        EXPECT(0x78, gbc.readMem(0xd0db));
        // CB 78 0235
        gbc.setState(0x4e85, 0xf6d5, 0x4fd0, 0x753d, 0xf2c2, 0x9953, 0x1, 0x1);
        gbc.writeMem(0x4e85, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xf6d5, gbc.sp());
        EXPECT(0x4e87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0236
        gbc.setState(0x5513, 0xed36, 0xe520, 0xafd6, 0x16b8, 0x51c2, 0x1, 0x0);
        gbc.writeMem(0x5513, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xed36, gbc.sp());
        EXPECT(0x5515, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0237
        gbc.setState(0x410e, 0xe92e, 0x64a0, 0xb60a, 0xce9, 0xf724, 0x0, 0x1);
        gbc.writeMem(0x410e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xe92e, gbc.sp());
        EXPECT(0x4110, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0238
        gbc.setState(0xb07b, 0x2b65, 0x96c0, 0xc0fc, 0x3635, 0xf72d, 0x0, 0x1);
        gbc.writeMem(0xb07b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x2b65, gbc.sp());
        EXPECT(0xb07d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb07b));
        EXPECT(0x78, gbc.readMem(0xb07c));
        // CB 78 0239
        gbc.setState(0xf9a, 0xf14a, 0x67c0, 0x585f, 0x2408, 0x430b, 0x0, 0x0);
        gbc.writeMem(0xf9a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xf14a, gbc.sp());
        EXPECT(0xf9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 023A
        gbc.setState(0x9c0, 0x9831, 0x34b0, 0x8013, 0xf8a6, 0xed4e, 0x1, 0x0);
        gbc.writeMem(0x9c0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x9831, gbc.sp());
        EXPECT(0x9c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 023B
        gbc.setState(0x52a3, 0x31a5, 0xca70, 0x437b, 0xf625, 0x5598, 0x1, 0x0);
        gbc.writeMem(0x52a3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x31a5, gbc.sp());
        EXPECT(0x52a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 023C
        gbc.setState(0x1f60, 0xedee, 0xcc30, 0x9e9a, 0x2653, 0x2e40, 0x0, 0x1);
        gbc.writeMem(0x1f60, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xedee, gbc.sp());
        EXPECT(0x1f62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 023E
        gbc.setState(0x7339, 0x6d71, 0xe100, 0x9361, 0x289c, 0xbbd4, 0x1, 0x0);
        gbc.writeMem(0x7339, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x6d71, gbc.sp());
        EXPECT(0x733b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 023F
        gbc.setState(0x9be1, 0x557a, 0xbd0, 0x7fc5, 0x71c2, 0x6e62, 0x1, 0x1);
        gbc.writeMem(0x9be1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x557a, gbc.sp());
        EXPECT(0x9be3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9be1));
        EXPECT(0x78, gbc.readMem(0x9be2));
        // CB 78 0240
        gbc.setState(0x1754, 0xf8ea, 0x61e0, 0x5988, 0xac91, 0x1a1c, 0x1, 0x0);
        gbc.writeMem(0x1754, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xf8ea, gbc.sp());
        EXPECT(0x1756, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0241
        gbc.setState(0x536a, 0xb2a0, 0x33c0, 0xf7a1, 0xb71, 0x8552, 0x1, 0x0);
        gbc.writeMem(0x536a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xb2a0, gbc.sp());
        EXPECT(0x536c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0242
        gbc.setState(0x3d21, 0x4e1d, 0x5ab0, 0x9929, 0xdb18, 0x3280, 0x0, 0x0);
        gbc.writeMem(0x3d21, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x4e1d, gbc.sp());
        EXPECT(0x3d23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0243
        gbc.setState(0xb908, 0xf5a8, 0x6f10, 0xb041, 0x7935, 0x46e0, 0x1, 0x1);
        gbc.writeMem(0xb908, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xf5a8, gbc.sp());
        EXPECT(0xb90a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb908));
        EXPECT(0x78, gbc.readMem(0xb909));
        // CB 78 0245
        gbc.setState(0x205d, 0xf528, 0x97c0, 0x9c55, 0x3536, 0xd94f, 0x0, 0x0);
        gbc.writeMem(0x205d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xf528, gbc.sp());
        EXPECT(0x205f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0246
        gbc.setState(0x759c, 0xea5c, 0x40c0, 0x358e, 0x33ce, 0x5cc3, 0x0, 0x1);
        gbc.writeMem(0x759c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xea5c, gbc.sp());
        EXPECT(0x759e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0247
        gbc.setState(0xdcd4, 0xa43a, 0x1300, 0xa200, 0xc374, 0x60e6, 0x0, 0x1);
        gbc.writeMem(0xdcd4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xa43a, gbc.sp());
        EXPECT(0xdcd6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcd4));
        EXPECT(0x78, gbc.readMem(0xdcd5));
        // CB 78 0248
        gbc.setState(0xbf22, 0xb438, 0x7f10, 0x8784, 0xde6f, 0x9de7, 0x0, 0x0);
        gbc.writeMem(0xbf22, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xb438, gbc.sp());
        EXPECT(0xbf24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf22));
        EXPECT(0x78, gbc.readMem(0xbf23));
        // CB 78 0249
        gbc.setState(0x153e, 0xde7e, 0x1640, 0x97fb, 0xaeca, 0xacf7, 0x0, 0x0);
        gbc.writeMem(0x153e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xde7e, gbc.sp());
        EXPECT(0x1540, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 024A
        gbc.setState(0xdea3, 0xbabd, 0x3970, 0x8028, 0xc270, 0x581, 0x0, 0x1);
        gbc.writeMem(0xdea3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xbabd, gbc.sp());
        EXPECT(0xdea5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdea3));
        EXPECT(0x78, gbc.readMem(0xdea4));
        // CB 78 024B
        gbc.setState(0xacdc, 0xc09d, 0xa510, 0xc17f, 0xbdcb, 0x2158, 0x1, 0x1);
        gbc.writeMem(0xacdc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xc09d, gbc.sp());
        EXPECT(0xacde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacdc));
        EXPECT(0x78, gbc.readMem(0xacdd));
        // CB 78 024C
        gbc.setState(0xdd7b, 0x90d8, 0xc100, 0xdc68, 0x551b, 0xe1ad, 0x0, 0x0);
        gbc.writeMem(0xdd7b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x90d8, gbc.sp());
        EXPECT(0xdd7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd7b));
        EXPECT(0x78, gbc.readMem(0xdd7c));
        // CB 78 024D
        gbc.setState(0x126a, 0xaa81, 0xdb50, 0xc17f, 0xf7dc, 0x5319, 0x1, 0x0);
        gbc.writeMem(0x126a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xaa81, gbc.sp());
        EXPECT(0x126c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 024E
        gbc.setState(0xd888, 0xdd94, 0xcf90, 0x71ad, 0x3998, 0x51aa, 0x1, 0x1);
        gbc.writeMem(0xd888, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xdd94, gbc.sp());
        EXPECT(0xd88a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd888));
        EXPECT(0x78, gbc.readMem(0xd889));
        // CB 78 024F
        gbc.setState(0x95b6, 0x1b59, 0xb1a0, 0xa105, 0x1ccd, 0xced6, 0x0, 0x1);
        gbc.writeMem(0x95b6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x1b59, gbc.sp());
        EXPECT(0x95b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95b6));
        EXPECT(0x78, gbc.readMem(0x95b7));
        // CB 78 0250
        gbc.setState(0x3364, 0x41eb, 0x93e0, 0x361, 0x6716, 0xe1f0, 0x0, 0x1);
        gbc.writeMem(0x3364, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x41eb, gbc.sp());
        EXPECT(0x3366, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0251
        gbc.setState(0x4dfa, 0x5138, 0x8910, 0x4afc, 0x7a4f, 0x9568, 0x0, 0x1);
        gbc.writeMem(0x4dfa, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x5138, gbc.sp());
        EXPECT(0x4dfc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0252
        gbc.setState(0xb35f, 0xe43f, 0xb8f0, 0x1dc3, 0x7154, 0xbf78, 0x0, 0x1);
        gbc.writeMem(0xb35f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xe43f, gbc.sp());
        EXPECT(0xb361, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb35f));
        EXPECT(0x78, gbc.readMem(0xb360));
        // CB 78 0253
        gbc.setState(0xc450, 0xd253, 0x5a0, 0x3aea, 0x511e, 0x5add, 0x0, 0x1);
        gbc.writeMem(0xc450, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xd253, gbc.sp());
        EXPECT(0xc452, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc450));
        EXPECT(0x78, gbc.readMem(0xc451));
        // CB 78 0254
        gbc.setState(0xed5a, 0xfc46, 0x800, 0xd2db, 0xdbb6, 0xa831, 0x1, 0x1);
        gbc.writeMem(0xed5a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xfc46, gbc.sp());
        EXPECT(0xed5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed5a));
        EXPECT(0x78, gbc.readMem(0xed5b));
        // CB 78 0255
        gbc.setState(0xe682, 0x26f5, 0xce60, 0x4781, 0x818b, 0x4c03, 0x0, 0x0);
        gbc.writeMem(0xe682, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x26f5, gbc.sp());
        EXPECT(0xe684, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe682));
        EXPECT(0x78, gbc.readMem(0xe683));
        // CB 78 0256
        gbc.setState(0xf69, 0x1096, 0x9f40, 0x969a, 0xe36a, 0xeb13, 0x0, 0x1);
        gbc.writeMem(0xf69, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x1096, gbc.sp());
        EXPECT(0xf6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0257
        gbc.setState(0x6e2a, 0xa885, 0xd330, 0xdf59, 0xfd5d, 0x9ead, 0x0, 0x1);
        gbc.writeMem(0x6e2a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xa885, gbc.sp());
        EXPECT(0x6e2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0258
        gbc.setState(0x77b3, 0x9de0, 0xd8e0, 0xd4a8, 0xeb1d, 0x3d63, 0x0, 0x0);
        gbc.writeMem(0x77b3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x9de0, gbc.sp());
        EXPECT(0x77b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 025A
        gbc.setState(0xba08, 0x2556, 0x5e80, 0x636d, 0x9c78, 0x522b, 0x0, 0x0);
        gbc.writeMem(0xba08, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x2556, gbc.sp());
        EXPECT(0xba0a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba08));
        EXPECT(0x78, gbc.readMem(0xba09));
        // CB 78 025B
        gbc.setState(0xe47e, 0x50e5, 0x8570, 0x3e68, 0x5d07, 0x8eca, 0x0, 0x1);
        gbc.writeMem(0xe47e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x50e5, gbc.sp());
        EXPECT(0xe480, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe47e));
        EXPECT(0x78, gbc.readMem(0xe47f));
        // CB 78 025C
        gbc.setState(0xe5ac, 0x2845, 0x4be0, 0x8153, 0xae5a, 0xd14b, 0x1, 0x0);
        gbc.writeMem(0xe5ac, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x2845, gbc.sp());
        EXPECT(0xe5ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5ac));
        EXPECT(0x78, gbc.readMem(0xe5ad));
        // CB 78 025D
        gbc.setState(0x4922, 0x9ff2, 0xb220, 0x5b45, 0x7887, 0x28e6, 0x0, 0x0);
        gbc.writeMem(0x4922, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x9ff2, gbc.sp());
        EXPECT(0x4924, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 025E
        gbc.setState(0x269a, 0x5439, 0x5fe0, 0x4b3e, 0x666a, 0xdac0, 0x1, 0x1);
        gbc.writeMem(0x269a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x5439, gbc.sp());
        EXPECT(0x269c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 025F
        gbc.setState(0x2c6b, 0x522a, 0x4530, 0xca2b, 0x88ad, 0x9f8f, 0x1, 0x1);
        gbc.writeMem(0x2c6b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x522a, gbc.sp());
        EXPECT(0x2c6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0261
        gbc.setState(0x94fd, 0x478a, 0x6fa0, 0xdab8, 0x28f7, 0x59b4, 0x0, 0x1);
        gbc.writeMem(0x94fd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x478a, gbc.sp());
        EXPECT(0x94ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94fd));
        EXPECT(0x78, gbc.readMem(0x94fe));
        // CB 78 0263
        gbc.setState(0x64e2, 0x7356, 0xa1e0, 0xc312, 0xabf8, 0xcfc9, 0x1, 0x0);
        gbc.writeMem(0x64e2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x7356, gbc.sp());
        EXPECT(0x64e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0264
        gbc.setState(0xcc04, 0xd183, 0x98b0, 0xbca5, 0x6a1f, 0x70d0, 0x0, 0x1);
        gbc.writeMem(0xcc04, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xd183, gbc.sp());
        EXPECT(0xcc06, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc04));
        EXPECT(0x78, gbc.readMem(0xcc05));
        // CB 78 0265
        gbc.setState(0x6991, 0x4a51, 0x3d10, 0x8a99, 0xc1c2, 0xab1, 0x0, 0x1);
        gbc.writeMem(0x6991, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x4a51, gbc.sp());
        EXPECT(0x6993, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0266
        gbc.setState(0x24d5, 0xbf5c, 0xe280, 0xe801, 0x875a, 0xcf67, 0x1, 0x1);
        gbc.writeMem(0x24d5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xbf5c, gbc.sp());
        EXPECT(0x24d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0267
        gbc.setState(0x7a9, 0x2418, 0x69a0, 0xbfd9, 0x1f3a, 0x564a, 0x0, 0x0);
        gbc.writeMem(0x7a9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x2418, gbc.sp());
        EXPECT(0x7ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0268
        gbc.setState(0xc38b, 0x3b10, 0x7ce0, 0x3348, 0x3844, 0xdf95, 0x0, 0x0);
        gbc.writeMem(0xc38b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x3b10, gbc.sp());
        EXPECT(0xc38d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc38b));
        EXPECT(0x78, gbc.readMem(0xc38c));
        // CB 78 0269
        gbc.setState(0x7ae5, 0x2272, 0x5c40, 0x756a, 0x8cd5, 0xdfc3, 0x1, 0x0);
        gbc.writeMem(0x7ae5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x2272, gbc.sp());
        EXPECT(0x7ae7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 026A
        gbc.setState(0xc48b, 0x81bb, 0xfc70, 0x3610, 0xc72, 0x6dc9, 0x1, 0x0);
        gbc.writeMem(0xc48b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x81bb, gbc.sp());
        EXPECT(0xc48d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc48b));
        EXPECT(0x78, gbc.readMem(0xc48c));
        // CB 78 026B
        gbc.setState(0x1045, 0xb77f, 0xbb80, 0x3648, 0x29dd, 0x7044, 0x1, 0x0);
        gbc.writeMem(0x1045, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xb77f, gbc.sp());
        EXPECT(0x1047, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 026C
        gbc.setState(0x80df, 0xf354, 0x62e0, 0xf2f, 0x22d, 0x370, 0x0, 0x0);
        gbc.writeMem(0x80df, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xf354, gbc.sp());
        EXPECT(0x80e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80df));
        EXPECT(0x78, gbc.readMem(0x80e0));
        // CB 78 026D
        gbc.setState(0x444c, 0x86ed, 0x9860, 0xfedb, 0x44f1, 0x80ea, 0x0, 0x1);
        gbc.writeMem(0x444c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x86ed, gbc.sp());
        EXPECT(0x444e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 026E
        gbc.setState(0x349d, 0x465, 0x4cf0, 0x455b, 0x2aea, 0x4959, 0x0, 0x1);
        gbc.writeMem(0x349d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x465, gbc.sp());
        EXPECT(0x349f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 026F
        gbc.setState(0x4f4b, 0x5b91, 0x7bf0, 0xb706, 0x5d1c, 0xbf5d, 0x0, 0x0);
        gbc.writeMem(0x4f4b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x5b91, gbc.sp());
        EXPECT(0x4f4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0270
        gbc.setState(0x60af, 0x3ddf, 0x7960, 0xe751, 0x183d, 0xc515, 0x1, 0x0);
        gbc.writeMem(0x60af, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x3ddf, gbc.sp());
        EXPECT(0x60b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0271
        gbc.setState(0x5644, 0x8853, 0xaaf0, 0x78a7, 0xefba, 0x5a22, 0x1, 0x1);
        gbc.writeMem(0x5644, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x8853, gbc.sp());
        EXPECT(0x5646, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0272
        gbc.setState(0xb01e, 0x7a21, 0xb380, 0x1b64, 0x2eb6, 0xfd15, 0x0, 0x1);
        gbc.writeMem(0xb01e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x7a21, gbc.sp());
        EXPECT(0xb020, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb01e));
        EXPECT(0x78, gbc.readMem(0xb01f));
        // CB 78 0273
        gbc.setState(0x537c, 0x6213, 0x1590, 0x3efd, 0x5f1d, 0x2f94, 0x1, 0x1);
        gbc.writeMem(0x537c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x6213, gbc.sp());
        EXPECT(0x537e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0274
        gbc.setState(0x516f, 0x6286, 0x5d0, 0x9b36, 0x4227, 0xc100, 0x1, 0x0);
        gbc.writeMem(0x516f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x6286, gbc.sp());
        EXPECT(0x5171, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0275
        gbc.setState(0x12d3, 0x50d0, 0x67c0, 0x360e, 0x6bdb, 0x5a2c, 0x0, 0x0);
        gbc.writeMem(0x12d3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x50d0, gbc.sp());
        EXPECT(0x12d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0276
        gbc.setState(0xb2ab, 0x7701, 0x7a70, 0xc977, 0x6501, 0xe927, 0x1, 0x0);
        gbc.writeMem(0xb2ab, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x7701, gbc.sp());
        EXPECT(0xb2ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2ab));
        EXPECT(0x78, gbc.readMem(0xb2ac));
        // CB 78 0278
        gbc.setState(0x6877, 0x1d8d, 0x6cd0, 0x101e, 0x4727, 0x9ad, 0x1, 0x0);
        gbc.writeMem(0x6877, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x1d8d, gbc.sp());
        EXPECT(0x6879, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0279
        gbc.setState(0xb5dd, 0x9b91, 0xd910, 0x7c17, 0x584d, 0xa556, 0x1, 0x1);
        gbc.writeMem(0xb5dd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x9b91, gbc.sp());
        EXPECT(0xb5df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5dd));
        EXPECT(0x78, gbc.readMem(0xb5de));
        // CB 78 027A
        gbc.setState(0xbb6c, 0xcd9c, 0xe4c0, 0x3162, 0x4e9a, 0x58aa, 0x1, 0x1);
        gbc.writeMem(0xbb6c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xcd9c, gbc.sp());
        EXPECT(0xbb6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb6c));
        EXPECT(0x78, gbc.readMem(0xbb6d));
        // CB 78 027B
        gbc.setState(0x15a1, 0x1ca1, 0x29f0, 0x95ce, 0x6f70, 0xd474, 0x1, 0x1);
        gbc.writeMem(0x15a1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x1ca1, gbc.sp());
        EXPECT(0x15a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 027C
        gbc.setState(0x56b, 0x611a, 0x9ab0, 0xa550, 0x1be2, 0xc93d, 0x1, 0x1);
        gbc.writeMem(0x56b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x611a, gbc.sp());
        EXPECT(0x56d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 027F
        gbc.setState(0x288c, 0xfa0c, 0x5730, 0x9127, 0xabf8, 0x2754, 0x0, 0x0);
        gbc.writeMem(0x288c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xfa0c, gbc.sp());
        EXPECT(0x288e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0280
        gbc.setState(0xcfb2, 0x565c, 0xddf0, 0xfbde, 0xf0b3, 0x369b, 0x1, 0x0);
        gbc.writeMem(0xcfb2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x565c, gbc.sp());
        EXPECT(0xcfb4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfb2));
        EXPECT(0x78, gbc.readMem(0xcfb3));
        // CB 78 0281
        gbc.setState(0x1a67, 0x63a5, 0x78a0, 0x5d1b, 0x32, 0x2dc5, 0x1, 0x1);
        gbc.writeMem(0x1a67, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x63a5, gbc.sp());
        EXPECT(0x1a69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0282
        gbc.setState(0x3fd7, 0x5e0f, 0x81e0, 0xaaff, 0xba7e, 0x784d, 0x1, 0x0);
        gbc.writeMem(0x3fd7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x5e0f, gbc.sp());
        EXPECT(0x3fd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0283
        gbc.setState(0x2f1e, 0xb24d, 0x78e0, 0xc22e, 0x88f2, 0x1d55, 0x1, 0x1);
        gbc.writeMem(0x2f1e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xb24d, gbc.sp());
        EXPECT(0x2f20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0284
        gbc.setState(0x9f36, 0x657f, 0xff70, 0xd841, 0xd5b0, 0xb99c, 0x1, 0x1);
        gbc.writeMem(0x9f36, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x657f, gbc.sp());
        EXPECT(0x9f38, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f36));
        EXPECT(0x78, gbc.readMem(0x9f37));
        // CB 78 0285
        gbc.setState(0x3e53, 0x3269, 0xe2c0, 0x3e55, 0x2b0d, 0x5301, 0x1, 0x1);
        gbc.writeMem(0x3e53, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x3269, gbc.sp());
        EXPECT(0x3e55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0286
        gbc.setState(0xbfb7, 0x1ba4, 0x1c90, 0x7f9d, 0x478, 0x3ae6, 0x1, 0x1);
        gbc.writeMem(0xbfb7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x1ba4, gbc.sp());
        EXPECT(0xbfb9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfb7));
        EXPECT(0x78, gbc.readMem(0xbfb8));
        // CB 78 0287
        gbc.setState(0x898, 0xd230, 0xcbf0, 0x39b, 0xfabf, 0x6061, 0x1, 0x1);
        gbc.writeMem(0x898, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xd230, gbc.sp());
        EXPECT(0x89a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0288
        gbc.setState(0x8535, 0x7c7, 0x1ce0, 0x8535, 0x557c, 0x53c6, 0x1, 0x1);
        gbc.writeMem(0x8535, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x7c7, gbc.sp());
        EXPECT(0x8537, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8535));
        EXPECT(0x78, gbc.readMem(0x8536));
        // CB 78 0289
        gbc.setState(0x9e3c, 0x8b34, 0x4190, 0x3d68, 0x591d, 0x7820, 0x1, 0x1);
        gbc.writeMem(0x9e3c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x8b34, gbc.sp());
        EXPECT(0x9e3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e3c));
        EXPECT(0x78, gbc.readMem(0x9e3d));
        // CB 78 028A
        gbc.setState(0x9733, 0xc81d, 0x9a60, 0x2bde, 0xd3de, 0x8a77, 0x1, 0x0);
        gbc.writeMem(0x9733, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xc81d, gbc.sp());
        EXPECT(0x9735, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9733));
        EXPECT(0x78, gbc.readMem(0x9734));
        // CB 78 028B
        gbc.setState(0x4683, 0xf74d, 0xe460, 0xaeaa, 0xb49f, 0xc5f3, 0x0, 0x1);
        gbc.writeMem(0x4683, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xf74d, gbc.sp());
        EXPECT(0x4685, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 028C
        gbc.setState(0x8a49, 0x5e8, 0xc950, 0xfcfe, 0x118c, 0x7457, 0x1, 0x0);
        gbc.writeMem(0x8a49, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x5e8, gbc.sp());
        EXPECT(0x8a4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a49));
        EXPECT(0x78, gbc.readMem(0x8a4a));
        // CB 78 028D
        gbc.setState(0x95, 0x6eef, 0x3d00, 0x52df, 0x68d4, 0xdf28, 0x1, 0x1);
        gbc.writeMem(0x95, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x6eef, gbc.sp());
        EXPECT(0x97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 028E
        gbc.setState(0x5fd, 0x2351, 0xfb50, 0x60c1, 0x8a0a, 0x26c3, 0x1, 0x1);
        gbc.writeMem(0x5fd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x2351, gbc.sp());
        EXPECT(0x5ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 028F
        gbc.setState(0x228e, 0x78ba, 0x1690, 0x3fba, 0x41c7, 0xaa31, 0x0, 0x1);
        gbc.writeMem(0x228e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x78ba, gbc.sp());
        EXPECT(0x2290, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0290
        gbc.setState(0x6aa1, 0x1bc1, 0x5590, 0x88b2, 0x7224, 0xf80a, 0x0, 0x0);
        gbc.writeMem(0x6aa1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x1bc1, gbc.sp());
        EXPECT(0x6aa3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0291
        gbc.setState(0x1098, 0xc995, 0xf980, 0xea25, 0xa52f, 0x6215, 0x0, 0x0);
        gbc.writeMem(0x1098, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xc995, gbc.sp());
        EXPECT(0x109a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0292
        gbc.setState(0x188e, 0x2968, 0xef70, 0x8560, 0x78b4, 0xd2f, 0x0, 0x0);
        gbc.writeMem(0x188e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x2968, gbc.sp());
        EXPECT(0x1890, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0293
        gbc.setState(0xb165, 0xc30, 0xb0a0, 0xf284, 0x2bb0, 0xe224, 0x0, 0x1);
        gbc.writeMem(0xb165, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xc30, gbc.sp());
        EXPECT(0xb167, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb165));
        EXPECT(0x78, gbc.readMem(0xb166));
        // CB 78 0294
        gbc.setState(0x228b, 0xe29a, 0xb280, 0x9629, 0x163a, 0xa3f1, 0x0, 0x1);
        gbc.writeMem(0x228b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xe29a, gbc.sp());
        EXPECT(0x228d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0295
        gbc.setState(0x640, 0x35b2, 0x94e0, 0xe4fe, 0xdc03, 0xdbd6, 0x1, 0x0);
        gbc.writeMem(0x640, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x35b2, gbc.sp());
        EXPECT(0x642, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0296
        gbc.setState(0x6f50, 0x1a79, 0x1760, 0x9091, 0x668d, 0x7897, 0x0, 0x1);
        gbc.writeMem(0x6f50, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x1a79, gbc.sp());
        EXPECT(0x6f52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0297
        gbc.setState(0x14b2, 0x5c1c, 0xc360, 0x57dd, 0x430, 0xfdf2, 0x0, 0x0);
        gbc.writeMem(0x14b2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x5c1c, gbc.sp());
        EXPECT(0x14b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0298
        gbc.setState(0xadc1, 0xc38f, 0x6b40, 0xa1d9, 0x10ac, 0xde0d, 0x0, 0x0);
        gbc.writeMem(0xadc1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xc38f, gbc.sp());
        EXPECT(0xadc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadc1));
        EXPECT(0x78, gbc.readMem(0xadc2));
        // CB 78 029A
        gbc.setState(0x24bf, 0x1cbf, 0xa520, 0x6ab1, 0xadae, 0x8d70, 0x0, 0x0);
        gbc.writeMem(0x24bf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x1cbf, gbc.sp());
        EXPECT(0x24c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 029C
        gbc.setState(0x55e9, 0x2b2, 0xa250, 0x5af3, 0x6dc8, 0xa4d4, 0x1, 0x0);
        gbc.writeMem(0x55e9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x2b2, gbc.sp());
        EXPECT(0x55eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 029D
        gbc.setState(0xb85b, 0xb9c7, 0x2130, 0x67bd, 0x363, 0x42f4, 0x0, 0x0);
        gbc.writeMem(0xb85b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xb9c7, gbc.sp());
        EXPECT(0xb85d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb85b));
        EXPECT(0x78, gbc.readMem(0xb85c));
        // CB 78 029E
        gbc.setState(0x3b5d, 0x1058, 0x7cc0, 0x3a8a, 0xe2a4, 0x6d0e, 0x1, 0x0);
        gbc.writeMem(0x3b5d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x1058, gbc.sp());
        EXPECT(0x3b5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 029F
        gbc.setState(0x534, 0x3902, 0x61c0, 0x7fcb, 0xe7da, 0x4d12, 0x0, 0x0);
        gbc.writeMem(0x534, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x3902, gbc.sp());
        EXPECT(0x536, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02A0
        gbc.setState(0xa791, 0xa55f, 0x8210, 0xc679, 0x5ada, 0xcc3e, 0x1, 0x1);
        gbc.writeMem(0xa791, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xa55f, gbc.sp());
        EXPECT(0xa793, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa791));
        EXPECT(0x78, gbc.readMem(0xa792));
        // CB 78 02A2
        gbc.setState(0x6822, 0xd16f, 0x77e0, 0x97dd, 0xbbb6, 0x1ba1, 0x0, 0x1);
        gbc.writeMem(0x6822, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xd16f, gbc.sp());
        EXPECT(0x6824, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02A3
        gbc.setState(0x37ea, 0x1d2d, 0xe4d0, 0x5755, 0x90f9, 0x97c, 0x1, 0x1);
        gbc.writeMem(0x37ea, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x1d2d, gbc.sp());
        EXPECT(0x37ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02A4
        gbc.setState(0x3863, 0xdbd8, 0x2c20, 0x5070, 0x246a, 0x39b7, 0x1, 0x0);
        gbc.writeMem(0x3863, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xdbd8, gbc.sp());
        EXPECT(0x3865, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02A5
        gbc.setState(0x1083, 0xe935, 0xfed0, 0xef04, 0xb8ea, 0xf7e7, 0x0, 0x0);
        gbc.writeMem(0x1083, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xe935, gbc.sp());
        EXPECT(0x1085, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02A6
        gbc.setState(0xcea9, 0x59d5, 0x9cb0, 0x9ca1, 0x68ef, 0x3130, 0x0, 0x0);
        gbc.writeMem(0xcea9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x59d5, gbc.sp());
        EXPECT(0xceab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcea9));
        EXPECT(0x78, gbc.readMem(0xceaa));
        // CB 78 02A7
        gbc.setState(0xa68e, 0x7c92, 0xca0, 0xb6c7, 0xa079, 0xc306, 0x0, 0x0);
        gbc.writeMem(0xa68e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x7c92, gbc.sp());
        EXPECT(0xa690, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa68e));
        EXPECT(0x78, gbc.readMem(0xa68f));
        // CB 78 02A8
        gbc.setState(0xa24e, 0x3374, 0x9530, 0x83ce, 0x3f85, 0x381d, 0x1, 0x0);
        gbc.writeMem(0xa24e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x3374, gbc.sp());
        EXPECT(0xa250, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa24e));
        EXPECT(0x78, gbc.readMem(0xa24f));
        // CB 78 02A9
        gbc.setState(0xc4db, 0xed19, 0x7d20, 0x60b, 0x8340, 0x27ef, 0x1, 0x1);
        gbc.writeMem(0xc4db, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xed19, gbc.sp());
        EXPECT(0xc4dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4db));
        EXPECT(0x78, gbc.readMem(0xc4dc));
        // CB 78 02AA
        gbc.setState(0x6e77, 0x5e39, 0xb410, 0x8e24, 0xbc59, 0x829e, 0x1, 0x0);
        gbc.writeMem(0x6e77, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x5e39, gbc.sp());
        EXPECT(0x6e79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02AB
        gbc.setState(0x495, 0x72b2, 0x59a0, 0xc3c8, 0x8787, 0xc88b, 0x1, 0x1);
        gbc.writeMem(0x495, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x72b2, gbc.sp());
        EXPECT(0x497, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02AC
        gbc.setState(0x3f42, 0xbc2f, 0xa4a0, 0x600c, 0xbae8, 0x4e9d, 0x0, 0x1);
        gbc.writeMem(0x3f42, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xbc2f, gbc.sp());
        EXPECT(0x3f44, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02AD
        gbc.setState(0x4c0d, 0xf44f, 0x2d20, 0x8f05, 0x128d, 0x6ec3, 0x0, 0x0);
        gbc.writeMem(0x4c0d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xf44f, gbc.sp());
        EXPECT(0x4c0f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02AF
        gbc.setState(0x16ee, 0xb82b, 0x1430, 0x7332, 0x43ab, 0x13ce, 0x1, 0x0);
        gbc.writeMem(0x16ee, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xb82b, gbc.sp());
        EXPECT(0x16f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02B0
        gbc.setState(0xe80a, 0x5f1c, 0xc680, 0x96, 0xe320, 0x33b, 0x0, 0x1);
        gbc.writeMem(0xe80a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x5f1c, gbc.sp());
        EXPECT(0xe80c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe80a));
        EXPECT(0x78, gbc.readMem(0xe80b));
        // CB 78 02B1
        gbc.setState(0x9065, 0x9168, 0xd060, 0x4304, 0xeb6e, 0xd4ae, 0x0, 0x1);
        gbc.writeMem(0x9065, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x9168, gbc.sp());
        EXPECT(0x9067, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9065));
        EXPECT(0x78, gbc.readMem(0x9066));
        // CB 78 02B2
        gbc.setState(0x854, 0x21ea, 0x27f0, 0xb488, 0xaed4, 0x92d3, 0x0, 0x1);
        gbc.writeMem(0x854, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x21ea, gbc.sp());
        EXPECT(0x856, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02B3
        gbc.setState(0x791f, 0x7041, 0x4810, 0x3ca, 0x5ccb, 0xc533, 0x1, 0x1);
        gbc.writeMem(0x791f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x7041, gbc.sp());
        EXPECT(0x7921, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02B4
        gbc.setState(0x8469, 0x55c4, 0x9bd0, 0x1bd6, 0x48a8, 0xbcd2, 0x1, 0x1);
        gbc.writeMem(0x8469, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x55c4, gbc.sp());
        EXPECT(0x846b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8469));
        EXPECT(0x78, gbc.readMem(0x846a));
        // CB 78 02B5
        gbc.setState(0x36c5, 0x92cc, 0xd4c0, 0xd003, 0x632b, 0xed9c, 0x1, 0x0);
        gbc.writeMem(0x36c5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x92cc, gbc.sp());
        EXPECT(0x36c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02B6
        gbc.setState(0xe6d8, 0x877d, 0xa530, 0x3c51, 0x27e2, 0x6aea, 0x0, 0x0);
        gbc.writeMem(0xe6d8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x877d, gbc.sp());
        EXPECT(0xe6da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6d8));
        EXPECT(0x78, gbc.readMem(0xe6d9));
        // CB 78 02B7
        gbc.setState(0x7eb7, 0xc760, 0x3a00, 0x6b62, 0x60d7, 0x8b41, 0x0, 0x1);
        gbc.writeMem(0x7eb7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xc760, gbc.sp());
        EXPECT(0x7eb9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02B8
        gbc.setState(0xa0a4, 0xcb92, 0x1300, 0x8908, 0xed5f, 0x58ec, 0x0, 0x0);
        gbc.writeMem(0xa0a4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xcb92, gbc.sp());
        EXPECT(0xa0a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0a4));
        EXPECT(0x78, gbc.readMem(0xa0a5));
        // CB 78 02B9
        gbc.setState(0xedcb, 0xfea6, 0x5510, 0xed3b, 0x4605, 0xb02b, 0x1, 0x1);
        gbc.writeMem(0xedcb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xfea6, gbc.sp());
        EXPECT(0xedcd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedcb));
        EXPECT(0x78, gbc.readMem(0xedcc));
        // CB 78 02BA
        gbc.setState(0xd3c0, 0x1f7d, 0xec20, 0x4e3, 0x2c6e, 0x22fb, 0x1, 0x0);
        gbc.writeMem(0xd3c0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x1f7d, gbc.sp());
        EXPECT(0xd3c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3c0));
        EXPECT(0x78, gbc.readMem(0xd3c1));
        // CB 78 02BB
        gbc.setState(0x72ff, 0x5b04, 0x8f70, 0xf3, 0x2bcc, 0xd1e5, 0x1, 0x0);
        gbc.writeMem(0x72ff, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x5b04, gbc.sp());
        EXPECT(0x7301, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02BC
        gbc.setState(0xca67, 0x8299, 0x15c0, 0x79cf, 0xbe3f, 0xff7d, 0x1, 0x0);
        gbc.writeMem(0xca67, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x8299, gbc.sp());
        EXPECT(0xca69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca67));
        EXPECT(0x78, gbc.readMem(0xca68));
        // CB 78 02BD
        gbc.setState(0xb054, 0xee4b, 0xb620, 0xdf6f, 0xe2c4, 0xcb7, 0x0, 0x1);
        gbc.writeMem(0xb054, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xee4b, gbc.sp());
        EXPECT(0xb056, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb054));
        EXPECT(0x78, gbc.readMem(0xb055));
        // CB 78 02BE
        gbc.setState(0x75b5, 0xf5b, 0x6c90, 0xd32d, 0x2fc8, 0x54cb, 0x0, 0x0);
        gbc.writeMem(0x75b5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xf5b, gbc.sp());
        EXPECT(0x75b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02BF
        gbc.setState(0x8dd1, 0x5d67, 0xc720, 0x91e4, 0xf48a, 0xfb30, 0x0, 0x0);
        gbc.writeMem(0x8dd1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x5d67, gbc.sp());
        EXPECT(0x8dd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dd1));
        EXPECT(0x78, gbc.readMem(0x8dd2));
        // CB 78 02C1
        gbc.setState(0x3ef7, 0xe3ab, 0xcb90, 0xe53a, 0xd525, 0x2c52, 0x0, 0x0);
        gbc.writeMem(0x3ef7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xe3ab, gbc.sp());
        EXPECT(0x3ef9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02C2
        gbc.setState(0x6e3c, 0x7f34, 0x32d0, 0x8481, 0xb0ae, 0x38c7, 0x0, 0x1);
        gbc.writeMem(0x6e3c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x7f34, gbc.sp());
        EXPECT(0x6e3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02C3
        gbc.setState(0x307a, 0x5e0b, 0xe250, 0x52b3, 0x2162, 0x73a3, 0x0, 0x1);
        gbc.writeMem(0x307a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x5e0b, gbc.sp());
        EXPECT(0x307c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02C4
        gbc.setState(0xbb86, 0x98bd, 0x840, 0xefc0, 0x5a69, 0x66ef, 0x1, 0x1);
        gbc.writeMem(0xbb86, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x98bd, gbc.sp());
        EXPECT(0xbb88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb86));
        EXPECT(0x78, gbc.readMem(0xbb87));
        // CB 78 02C6
        gbc.setState(0x67f6, 0x2738, 0x20c0, 0x68a1, 0x5c85, 0xaef1, 0x1, 0x1);
        gbc.writeMem(0x67f6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x2738, gbc.sp());
        EXPECT(0x67f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02C7
        gbc.setState(0xdcb6, 0xefb6, 0x4ff0, 0x8699, 0xbe10, 0xa2d8, 0x0, 0x1);
        gbc.writeMem(0xdcb6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xefb6, gbc.sp());
        EXPECT(0xdcb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcb6));
        EXPECT(0x78, gbc.readMem(0xdcb7));
        // CB 78 02C9
        gbc.setState(0x1ce0, 0x84e9, 0xd8f0, 0xd2d8, 0x8329, 0x7afc, 0x1, 0x1);
        gbc.writeMem(0x1ce0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x84e9, gbc.sp());
        EXPECT(0x1ce2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02CA
        gbc.setState(0xde38, 0xb2b7, 0x270, 0xddcd, 0x1c7e, 0xfd60, 0x1, 0x1);
        gbc.writeMem(0xde38, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xb2b7, gbc.sp());
        EXPECT(0xde3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde38));
        EXPECT(0x78, gbc.readMem(0xde39));
        // CB 78 02CB
        gbc.setState(0xa7a4, 0x6be4, 0x7500, 0xe836, 0x8d0c, 0x83f5, 0x0, 0x0);
        gbc.writeMem(0xa7a4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x6be4, gbc.sp());
        EXPECT(0xa7a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7a4));
        EXPECT(0x78, gbc.readMem(0xa7a5));
        // CB 78 02CC
        gbc.setState(0x4786, 0x7b99, 0xf240, 0x8b4f, 0xb005, 0xcf9f, 0x0, 0x1);
        gbc.writeMem(0x4786, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x7b99, gbc.sp());
        EXPECT(0x4788, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02CD
        gbc.setState(0xbb25, 0x6006, 0x56b0, 0x5f1e, 0xce20, 0xc12a, 0x0, 0x1);
        gbc.writeMem(0xbb25, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x6006, gbc.sp());
        EXPECT(0xbb27, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb25));
        EXPECT(0x78, gbc.readMem(0xbb26));
        // CB 78 02CE
        gbc.setState(0x7aa2, 0xa3ff, 0x8900, 0xb326, 0xc37f, 0x44ed, 0x0, 0x1);
        gbc.writeMem(0x7aa2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xa3ff, gbc.sp());
        EXPECT(0x7aa4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02D0
        gbc.setState(0xb592, 0x67cd, 0x1e10, 0xdc7e, 0xd3bb, 0x66d1, 0x1, 0x0);
        gbc.writeMem(0xb592, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x67cd, gbc.sp());
        EXPECT(0xb594, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb592));
        EXPECT(0x78, gbc.readMem(0xb593));
        // CB 78 02D1
        gbc.setState(0xc478, 0x67bc, 0x2170, 0x275b, 0xac9f, 0x7811, 0x1, 0x1);
        gbc.writeMem(0xc478, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x67bc, gbc.sp());
        EXPECT(0xc47a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc478));
        EXPECT(0x78, gbc.readMem(0xc479));
        // CB 78 02D2
        gbc.setState(0x26ff, 0x2e37, 0x8fb0, 0x7470, 0x8114, 0xfc3a, 0x1, 0x1);
        gbc.writeMem(0x26ff, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x2e37, gbc.sp());
        EXPECT(0x2701, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02D3
        gbc.setState(0xeaaa, 0x62a4, 0xffa0, 0x664d, 0xf27, 0x1780, 0x1, 0x0);
        gbc.writeMem(0xeaaa, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x62a4, gbc.sp());
        EXPECT(0xeaac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeaaa));
        EXPECT(0x78, gbc.readMem(0xeaab));
        // CB 78 02D4
        gbc.setState(0x28a7, 0x97c, 0xd840, 0xaf61, 0x84a0, 0x4bf5, 0x1, 0x1);
        gbc.writeMem(0x28a7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x97c, gbc.sp());
        EXPECT(0x28a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02D5
        gbc.setState(0x1c82, 0xe50b, 0x3ff0, 0x32fa, 0xa9fa, 0x9be0, 0x1, 0x0);
        gbc.writeMem(0x1c82, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xe50b, gbc.sp());
        EXPECT(0x1c84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02D7
        gbc.setState(0x7e71, 0xe13d, 0x8d80, 0x23d6, 0x27e3, 0x8e79, 0x0, 0x0);
        gbc.writeMem(0x7e71, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xe13d, gbc.sp());
        EXPECT(0x7e73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02D8
        gbc.setState(0xd966, 0xbdb0, 0x4fb0, 0xd6d4, 0x36fe, 0x8c2e, 0x0, 0x1);
        gbc.writeMem(0xd966, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xbdb0, gbc.sp());
        EXPECT(0xd968, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd966));
        EXPECT(0x78, gbc.readMem(0xd967));
        // CB 78 02D9
        gbc.setState(0x9571, 0x774a, 0xf290, 0x6e4a, 0x9ce9, 0xeb0e, 0x0, 0x1);
        gbc.writeMem(0x9571, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x774a, gbc.sp());
        EXPECT(0x9573, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9571));
        EXPECT(0x78, gbc.readMem(0x9572));
        // CB 78 02DA
        gbc.setState(0xb397, 0x82bc, 0x9120, 0x8442, 0x7dae, 0xd245, 0x0, 0x0);
        gbc.writeMem(0xb397, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x82bc, gbc.sp());
        EXPECT(0xb399, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb397));
        EXPECT(0x78, gbc.readMem(0xb398));
        // CB 78 02DB
        gbc.setState(0x8e5a, 0x3f59, 0x3100, 0xd47, 0x81bf, 0xc202, 0x1, 0x0);
        gbc.writeMem(0x8e5a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x3f59, gbc.sp());
        EXPECT(0x8e5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e5a));
        EXPECT(0x78, gbc.readMem(0x8e5b));
        // CB 78 02DC
        gbc.setState(0x6732, 0x8bda, 0x5b40, 0xab3e, 0x892f, 0xfa1d, 0x1, 0x1);
        gbc.writeMem(0x6732, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x8bda, gbc.sp());
        EXPECT(0x6734, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02DD
        gbc.setState(0x3e20, 0x2ab5, 0xdb0, 0xb377, 0x1f56, 0xc16a, 0x0, 0x1);
        gbc.writeMem(0x3e20, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x2ab5, gbc.sp());
        EXPECT(0x3e22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02DE
        gbc.setState(0x8786, 0xbb75, 0x8380, 0xdf86, 0xfae8, 0x3f93, 0x0, 0x1);
        gbc.writeMem(0x8786, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xbb75, gbc.sp());
        EXPECT(0x8788, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8786));
        EXPECT(0x78, gbc.readMem(0x8787));
        // CB 78 02DF
        gbc.setState(0x183f, 0x34fe, 0xb90, 0x24d, 0xbdf, 0xc163, 0x1, 0x0);
        gbc.writeMem(0x183f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x34fe, gbc.sp());
        EXPECT(0x1841, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02E0
        gbc.setState(0x931d, 0xaec5, 0xff70, 0x1548, 0xc628, 0xe882, 0x0, 0x0);
        gbc.writeMem(0x931d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xaec5, gbc.sp());
        EXPECT(0x931f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x931d));
        EXPECT(0x78, gbc.readMem(0x931e));
        // CB 78 02E1
        gbc.setState(0x5200, 0xa02a, 0x1260, 0x13fe, 0xf445, 0xdb2a, 0x1, 0x0);
        gbc.writeMem(0x5200, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xa02a, gbc.sp());
        EXPECT(0x5202, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02E2
        gbc.setState(0x4e3, 0xb828, 0x69e0, 0x730c, 0x6a91, 0xed43, 0x0, 0x1);
        gbc.writeMem(0x4e3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xb828, gbc.sp());
        EXPECT(0x4e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02E3
        gbc.setState(0x4d73, 0x3e34, 0xb930, 0x9141, 0x10f9, 0x1af7, 0x1, 0x0);
        gbc.writeMem(0x4d73, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x3e34, gbc.sp());
        EXPECT(0x4d75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02E4
        gbc.setState(0x3976, 0x2073, 0xdfc0, 0xf363, 0xe0d4, 0xaaed, 0x1, 0x1);
        gbc.writeMem(0x3976, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x2073, gbc.sp());
        EXPECT(0x3978, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02E5
        gbc.setState(0x79d1, 0x3263, 0x1b90, 0xb24, 0xa868, 0x1341, 0x1, 0x1);
        gbc.writeMem(0x79d1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x3263, gbc.sp());
        EXPECT(0x79d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02E6
        gbc.setState(0xdc24, 0x71cb, 0x70e0, 0xc78b, 0xb240, 0x77dd, 0x0, 0x0);
        gbc.writeMem(0xdc24, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x71cb, gbc.sp());
        EXPECT(0xdc26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc24));
        EXPECT(0x78, gbc.readMem(0xdc25));
        // CB 78 02E7
        gbc.setState(0xe6aa, 0xd948, 0xbe60, 0x3c00, 0xe9e5, 0xca6, 0x0, 0x1);
        gbc.writeMem(0xe6aa, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xd948, gbc.sp());
        EXPECT(0xe6ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6aa));
        EXPECT(0x78, gbc.readMem(0xe6ab));
        // CB 78 02E8
        gbc.setState(0xc5c0, 0xcc47, 0xaf0, 0x3581, 0x21cd, 0x2a20, 0x1, 0x1);
        gbc.writeMem(0xc5c0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xcc47, gbc.sp());
        EXPECT(0xc5c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5c0));
        EXPECT(0x78, gbc.readMem(0xc5c1));
        // CB 78 02E9
        gbc.setState(0x372e, 0x549c, 0x7900, 0x92eb, 0xb50e, 0xf58, 0x0, 0x0);
        gbc.writeMem(0x372e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x549c, gbc.sp());
        EXPECT(0x3730, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02EA
        gbc.setState(0xb667, 0x1f75, 0x7930, 0x9839, 0xc4a7, 0xc8dd, 0x0, 0x1);
        gbc.writeMem(0xb667, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x1f75, gbc.sp());
        EXPECT(0xb669, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb667));
        EXPECT(0x78, gbc.readMem(0xb668));
        // CB 78 02EB
        gbc.setState(0xa670, 0xa022, 0xe240, 0xba0f, 0x43f8, 0x759, 0x0, 0x1);
        gbc.writeMem(0xa670, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xa022, gbc.sp());
        EXPECT(0xa672, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa670));
        EXPECT(0x78, gbc.readMem(0xa671));
        // CB 78 02EC
        gbc.setState(0xd156, 0xbabe, 0x1850, 0xa25a, 0x6850, 0xb7d5, 0x1, 0x1);
        gbc.writeMem(0xd156, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xbabe, gbc.sp());
        EXPECT(0xd158, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd156));
        EXPECT(0x78, gbc.readMem(0xd157));
        // CB 78 02ED
        gbc.setState(0x8a01, 0x97a0, 0xa8f0, 0x51c0, 0x22cf, 0xce5d, 0x0, 0x0);
        gbc.writeMem(0x8a01, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x97a0, gbc.sp());
        EXPECT(0x8a03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a01));
        EXPECT(0x78, gbc.readMem(0x8a02));
        // CB 78 02EE
        gbc.setState(0xd598, 0x9447, 0xb7a0, 0xbc9e, 0xaada, 0xc8c5, 0x1, 0x1);
        gbc.writeMem(0xd598, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x9447, gbc.sp());
        EXPECT(0xd59a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd598));
        EXPECT(0x78, gbc.readMem(0xd599));
        // CB 78 02EF
        gbc.setState(0x6a5a, 0xa9de, 0x6350, 0x101d, 0x5335, 0x80f0, 0x1, 0x0);
        gbc.writeMem(0x6a5a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xa9de, gbc.sp());
        EXPECT(0x6a5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02F0
        gbc.setState(0x427f, 0xd0ff, 0xde40, 0x4ef0, 0xa730, 0xe4e1, 0x0, 0x1);
        gbc.writeMem(0x427f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xd0ff, gbc.sp());
        EXPECT(0x4281, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02F1
        gbc.setState(0x3db9, 0xb2fb, 0x5f90, 0x9b15, 0x74b3, 0x7c88, 0x0, 0x0);
        gbc.writeMem(0x3db9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xb2fb, gbc.sp());
        EXPECT(0x3dbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02F2
        gbc.setState(0x78a, 0xa617, 0xa900, 0x578e, 0x291c, 0xf559, 0x0, 0x1);
        gbc.writeMem(0x78a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xa617, gbc.sp());
        EXPECT(0x78c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02F3
        gbc.setState(0xad7d, 0x6394, 0x3410, 0xc620, 0xa4d4, 0x8540, 0x1, 0x1);
        gbc.writeMem(0xad7d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x6394, gbc.sp());
        EXPECT(0xad7f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad7d));
        EXPECT(0x78, gbc.readMem(0xad7e));
        // CB 78 02F4
        gbc.setState(0x85c0, 0xaa1b, 0xdcf0, 0xbd02, 0xfc5e, 0x85e6, 0x1, 0x1);
        gbc.writeMem(0x85c0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xaa1b, gbc.sp());
        EXPECT(0x85c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85c0));
        EXPECT(0x78, gbc.readMem(0x85c1));
        // CB 78 02F5
        gbc.setState(0xde6d, 0x7d22, 0xb9d0, 0x81b7, 0x577e, 0xab6f, 0x0, 0x1);
        gbc.writeMem(0xde6d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x7d22, gbc.sp());
        EXPECT(0xde6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde6d));
        EXPECT(0x78, gbc.readMem(0xde6e));
        // CB 78 02F6
        gbc.setState(0x1c25, 0x5e27, 0x6aa0, 0x51c2, 0x8574, 0x7deb, 0x0, 0x0);
        gbc.writeMem(0x1c25, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x5e27, gbc.sp());
        EXPECT(0x1c27, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02F7
        gbc.setState(0x38b0, 0xa451, 0xbd0, 0xe4a8, 0x90f8, 0xe446, 0x1, 0x1);
        gbc.writeMem(0x38b0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xa451, gbc.sp());
        EXPECT(0x38b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02F8
        gbc.setState(0x6075, 0x1f41, 0x3f30, 0x8064, 0xd87f, 0xcf7a, 0x0, 0x0);
        gbc.writeMem(0x6075, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x1f41, gbc.sp());
        EXPECT(0x6077, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02F9
        gbc.setState(0x906e, 0x5d9, 0x2250, 0xe6d3, 0xc62, 0x91bd, 0x1, 0x0);
        gbc.writeMem(0x906e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x5d9, gbc.sp());
        EXPECT(0x9070, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x906e));
        EXPECT(0x78, gbc.readMem(0x906f));
        // CB 78 02FA
        gbc.setState(0x5e6e, 0x7337, 0x2660, 0x8e6, 0x4912, 0xabd, 0x1, 0x0);
        gbc.writeMem(0x5e6e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x7337, gbc.sp());
        EXPECT(0x5e70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 02FB
        gbc.setState(0x92ef, 0xd839, 0xcc60, 0xf091, 0x8324, 0x395a, 0x1, 0x1);
        gbc.writeMem(0x92ef, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xd839, gbc.sp());
        EXPECT(0x92f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92ef));
        EXPECT(0x78, gbc.readMem(0x92f0));
        // CB 78 02FC
        gbc.setState(0x5c74, 0x6184, 0xebf0, 0x244a, 0x7e57, 0x5629, 0x0, 0x1);
        gbc.writeMem(0x5c74, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x6184, gbc.sp());
        EXPECT(0x5c76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 02FD
        gbc.setState(0xbb3f, 0x691, 0x5cc0, 0xa513, 0x23a2, 0x9f05, 0x1, 0x1);
        gbc.writeMem(0xbb3f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x691, gbc.sp());
        EXPECT(0xbb41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb3f));
        EXPECT(0x78, gbc.readMem(0xbb40));
        // CB 78 02FE
        gbc.setState(0xc73e, 0x913f, 0x7cc0, 0xd913, 0x96a9, 0xeca6, 0x0, 0x1);
        gbc.writeMem(0xc73e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x913f, gbc.sp());
        EXPECT(0xc740, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc73e));
        EXPECT(0x78, gbc.readMem(0xc73f));
        // CB 78 02FF
        gbc.setState(0x26ba, 0xf3a, 0xc0b0, 0x932f, 0x5036, 0xe015, 0x1, 0x0);
        gbc.writeMem(0x26ba, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xf3a, gbc.sp());
        EXPECT(0x26bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0300
        gbc.setState(0x8b1, 0xef40, 0xaf80, 0xad1, 0xa31, 0x4e36, 0x1, 0x0);
        gbc.writeMem(0x8b1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xef40, gbc.sp());
        EXPECT(0x8b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0301
        gbc.setState(0x47af, 0xbcda, 0xa6f0, 0x6bee, 0xd6e8, 0x2667, 0x1, 0x0);
        gbc.writeMem(0x47af, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xbcda, gbc.sp());
        EXPECT(0x47b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0302
        gbc.setState(0xe8d5, 0x653c, 0x8b20, 0x4968, 0xf85e, 0xbc67, 0x1, 0x0);
        gbc.writeMem(0xe8d5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x653c, gbc.sp());
        EXPECT(0xe8d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8d5));
        EXPECT(0x78, gbc.readMem(0xe8d6));
        // CB 78 0303
        gbc.setState(0x253a, 0x917, 0xe00, 0xe8bd, 0x5103, 0xcc9d, 0x1, 0x0);
        gbc.writeMem(0x253a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x917, gbc.sp());
        EXPECT(0x253c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0304
        gbc.setState(0xa01c, 0xde4c, 0x2a20, 0xa652, 0xb4e4, 0xf2c1, 0x1, 0x1);
        gbc.writeMem(0xa01c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xde4c, gbc.sp());
        EXPECT(0xa01e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa01c));
        EXPECT(0x78, gbc.readMem(0xa01d));
        // CB 78 0305
        gbc.setState(0x5351, 0x577e, 0xb1e0, 0x2dc0, 0x98b4, 0x1f31, 0x0, 0x1);
        gbc.writeMem(0x5351, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x577e, gbc.sp());
        EXPECT(0x5353, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0306
        gbc.setState(0x499a, 0xcfc3, 0xe0b0, 0xaa99, 0xd3fe, 0xc2f0, 0x1, 0x1);
        gbc.writeMem(0x499a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xcfc3, gbc.sp());
        EXPECT(0x499c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0307
        gbc.setState(0xbe71, 0xfe6a, 0xfc10, 0x29e3, 0x99fa, 0x2391, 0x0, 0x1);
        gbc.writeMem(0xbe71, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xfe6a, gbc.sp());
        EXPECT(0xbe73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe71));
        EXPECT(0x78, gbc.readMem(0xbe72));
        // CB 78 0308
        gbc.setState(0x4b46, 0x8b93, 0xdfc0, 0x9efb, 0xd86, 0xe72b, 0x0, 0x1);
        gbc.writeMem(0x4b46, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x8b93, gbc.sp());
        EXPECT(0x4b48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0309
        gbc.setState(0x461e, 0xa869, 0xa4c0, 0xb7aa, 0x2161, 0x83a7, 0x1, 0x1);
        gbc.writeMem(0x461e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xa869, gbc.sp());
        EXPECT(0x4620, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 030A
        gbc.setState(0x776f, 0xb094, 0xf040, 0x5a7f, 0x1734, 0xc66b, 0x1, 0x1);
        gbc.writeMem(0x776f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xb094, gbc.sp());
        EXPECT(0x7771, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 030B
        gbc.setState(0x9cd5, 0x1aaf, 0xa850, 0xedcb, 0xfd9c, 0x4897, 0x0, 0x1);
        gbc.writeMem(0x9cd5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x1aaf, gbc.sp());
        EXPECT(0x9cd7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cd5));
        EXPECT(0x78, gbc.readMem(0x9cd6));
        // CB 78 030D
        gbc.setState(0x77e2, 0x9d39, 0xd00, 0x43c3, 0x465e, 0xc29a, 0x0, 0x1);
        gbc.writeMem(0x77e2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x9d39, gbc.sp());
        EXPECT(0x77e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 030E
        gbc.setState(0xd989, 0x95ce, 0xc290, 0x30f1, 0x2360, 0xbd23, 0x1, 0x1);
        gbc.writeMem(0xd989, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x95ce, gbc.sp());
        EXPECT(0xd98b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd989));
        EXPECT(0x78, gbc.readMem(0xd98a));
        // CB 78 030F
        gbc.setState(0xd5e2, 0xe560, 0x7ac0, 0x6daa, 0xc412, 0xaea6, 0x0, 0x0);
        gbc.writeMem(0xd5e2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xe560, gbc.sp());
        EXPECT(0xd5e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5e2));
        EXPECT(0x78, gbc.readMem(0xd5e3));
        // CB 78 0310
        gbc.setState(0x533d, 0x963c, 0xf600, 0x1d52, 0xe785, 0xbcde, 0x1, 0x1);
        gbc.writeMem(0x533d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x963c, gbc.sp());
        EXPECT(0x533f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0311
        gbc.setState(0xdb7b, 0xed56, 0xdef0, 0xbd7e, 0x93d5, 0x2986, 0x0, 0x0);
        gbc.writeMem(0xdb7b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xed56, gbc.sp());
        EXPECT(0xdb7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb7b));
        EXPECT(0x78, gbc.readMem(0xdb7c));
        // CB 78 0312
        gbc.setState(0x9db9, 0x551f, 0xa170, 0x3869, 0xd046, 0x914d, 0x0, 0x1);
        gbc.writeMem(0x9db9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x551f, gbc.sp());
        EXPECT(0x9dbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9db9));
        EXPECT(0x78, gbc.readMem(0x9dba));
        // CB 78 0313
        gbc.setState(0xac89, 0x16d3, 0x3ad0, 0x6651, 0x8a2f, 0x4b92, 0x0, 0x0);
        gbc.writeMem(0xac89, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x16d3, gbc.sp());
        EXPECT(0xac8b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac89));
        EXPECT(0x78, gbc.readMem(0xac8a));
        // CB 78 0314
        gbc.setState(0x8052, 0x2394, 0xc8f0, 0x8a30, 0x372a, 0xd8ee, 0x0, 0x0);
        gbc.writeMem(0x8052, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x2394, gbc.sp());
        EXPECT(0x8054, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8052));
        EXPECT(0x78, gbc.readMem(0x8053));
        // CB 78 0315
        gbc.setState(0x843a, 0x5ca1, 0x3e00, 0x9436, 0x208, 0xfc06, 0x0, 0x0);
        gbc.writeMem(0x843a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x5ca1, gbc.sp());
        EXPECT(0x843c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x843a));
        EXPECT(0x78, gbc.readMem(0x843b));
        // CB 78 0316
        gbc.setState(0x6472, 0x81bc, 0x1210, 0x172f, 0xe33, 0x69ca, 0x0, 0x1);
        gbc.writeMem(0x6472, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x81bc, gbc.sp());
        EXPECT(0x6474, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0317
        gbc.setState(0x4622, 0x365a, 0x4fa0, 0x792d, 0x8a05, 0xd344, 0x0, 0x1);
        gbc.writeMem(0x4622, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x365a, gbc.sp());
        EXPECT(0x4624, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0318
        gbc.setState(0x9221, 0x5fb8, 0x7040, 0xd0ca, 0xf61d, 0x107e, 0x1, 0x1);
        gbc.writeMem(0x9221, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x5fb8, gbc.sp());
        EXPECT(0x9223, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9221));
        EXPECT(0x78, gbc.readMem(0x9222));
        // CB 78 0319
        gbc.setState(0x3c6f, 0xbe88, 0xf4c0, 0x15da, 0xfeff, 0xc659, 0x0, 0x1);
        gbc.writeMem(0x3c6f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xbe88, gbc.sp());
        EXPECT(0x3c71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 031A
        gbc.setState(0x224e, 0x7f08, 0x4920, 0x2a86, 0xb8d, 0x2f88, 0x0, 0x0);
        gbc.writeMem(0x224e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x7f08, gbc.sp());
        EXPECT(0x2250, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 031B
        gbc.setState(0x2241, 0xcf46, 0xcac0, 0x404b, 0xe3a4, 0x574e, 0x0, 0x1);
        gbc.writeMem(0x2241, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xcf46, gbc.sp());
        EXPECT(0x2243, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 031C
        gbc.setState(0x87c1, 0x13e1, 0x2930, 0xeff8, 0x9200, 0xbc7a, 0x0, 0x1);
        gbc.writeMem(0x87c1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x13e1, gbc.sp());
        EXPECT(0x87c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87c1));
        EXPECT(0x78, gbc.readMem(0x87c2));
        // CB 78 031D
        gbc.setState(0x438e, 0xa7de, 0x8880, 0xab5d, 0x7995, 0x82d2, 0x1, 0x0);
        gbc.writeMem(0x438e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xa7de, gbc.sp());
        EXPECT(0x4390, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 031E
        gbc.setState(0x1d1a, 0xd09f, 0x5c50, 0x5152, 0x3038, 0xa87b, 0x1, 0x1);
        gbc.writeMem(0x1d1a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xd09f, gbc.sp());
        EXPECT(0x1d1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 031F
        gbc.setState(0x2a01, 0xfa0a, 0x6360, 0x244a, 0x6337, 0xc5c4, 0x1, 0x0);
        gbc.writeMem(0x2a01, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xfa0a, gbc.sp());
        EXPECT(0x2a03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0320
        gbc.setState(0xca91, 0xab67, 0xb110, 0x3c5d, 0x7814, 0xc10c, 0x0, 0x0);
        gbc.writeMem(0xca91, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xab67, gbc.sp());
        EXPECT(0xca93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca91));
        EXPECT(0x78, gbc.readMem(0xca92));
        // CB 78 0321
        gbc.setState(0xb06b, 0x68f0, 0x5d20, 0x9d3f, 0x9503, 0x7e39, 0x1, 0x1);
        gbc.writeMem(0xb06b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x68f0, gbc.sp());
        EXPECT(0xb06d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb06b));
        EXPECT(0x78, gbc.readMem(0xb06c));
        // CB 78 0323
        gbc.setState(0x2664, 0xc5c4, 0x7480, 0x453e, 0xc4c5, 0x9c73, 0x0, 0x1);
        gbc.writeMem(0x2664, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xc5c4, gbc.sp());
        EXPECT(0x2666, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0324
        gbc.setState(0xa30, 0xa88b, 0x1d00, 0x1353, 0xdc2e, 0x514a, 0x1, 0x0);
        gbc.writeMem(0xa30, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xa88b, gbc.sp());
        EXPECT(0xa32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0325
        gbc.setState(0x76c2, 0x721e, 0xf470, 0x9d88, 0x312a, 0x5a85, 0x1, 0x1);
        gbc.writeMem(0x76c2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x721e, gbc.sp());
        EXPECT(0x76c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0326
        gbc.setState(0xb117, 0xdeba, 0x76e0, 0x6d05, 0xa2cc, 0xad84, 0x1, 0x0);
        gbc.writeMem(0xb117, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xdeba, gbc.sp());
        EXPECT(0xb119, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb117));
        EXPECT(0x78, gbc.readMem(0xb118));
        // CB 78 0327
        gbc.setState(0xbe7d, 0x760, 0xd070, 0x73c5, 0x5fee, 0xa3e5, 0x1, 0x1);
        gbc.writeMem(0xbe7d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x760, gbc.sp());
        EXPECT(0xbe7f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe7d));
        EXPECT(0x78, gbc.readMem(0xbe7e));
        // CB 78 0328
        gbc.setState(0x794b, 0xaaee, 0xe830, 0x7773, 0xb566, 0xb3eb, 0x1, 0x0);
        gbc.writeMem(0x794b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xaaee, gbc.sp());
        EXPECT(0x794d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 032A
        gbc.setState(0x2ff6, 0xd4cd, 0xf110, 0xc5d, 0xe5d9, 0xdcba, 0x0, 0x0);
        gbc.writeMem(0x2ff6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xd4cd, gbc.sp());
        EXPECT(0x2ff8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 032B
        gbc.setState(0x9763, 0x4d4, 0x8650, 0xb936, 0x4595, 0xb788, 0x0, 0x0);
        gbc.writeMem(0x9763, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x4d4, gbc.sp());
        EXPECT(0x9765, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9763));
        EXPECT(0x78, gbc.readMem(0x9764));
        // CB 78 032C
        gbc.setState(0x3f93, 0x28aa, 0xf1d0, 0x4bb2, 0xa540, 0x1dea, 0x1, 0x0);
        gbc.writeMem(0x3f93, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x28aa, gbc.sp());
        EXPECT(0x3f95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 032D
        gbc.setState(0x684d, 0x6a71, 0xfe30, 0xef65, 0xfe2b, 0x7ead, 0x0, 0x0);
        gbc.writeMem(0x684d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x6a71, gbc.sp());
        EXPECT(0x684f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 032E
        gbc.setState(0x34d9, 0x6f4, 0x2cf0, 0x5328, 0x83b1, 0xb6cd, 0x0, 0x1);
        gbc.writeMem(0x34d9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x6f4, gbc.sp());
        EXPECT(0x34db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 032F
        gbc.setState(0xa178, 0xb459, 0xa370, 0xff0f, 0xc0bd, 0xda93, 0x0, 0x0);
        gbc.writeMem(0xa178, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xb459, gbc.sp());
        EXPECT(0xa17a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa178));
        EXPECT(0x78, gbc.readMem(0xa179));
        // CB 78 0330
        gbc.setState(0xaf15, 0x7f0f, 0x7330, 0xe3b0, 0x7223, 0x5632, 0x0, 0x1);
        gbc.writeMem(0xaf15, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x7f0f, gbc.sp());
        EXPECT(0xaf17, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf15));
        EXPECT(0x78, gbc.readMem(0xaf16));
        // CB 78 0332
        gbc.setState(0xa805, 0xf1c6, 0x8c10, 0x2d3f, 0xdf1b, 0x6d6f, 0x0, 0x1);
        gbc.writeMem(0xa805, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xf1c6, gbc.sp());
        EXPECT(0xa807, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa805));
        EXPECT(0x78, gbc.readMem(0xa806));
        // CB 78 0333
        gbc.setState(0x1855, 0x7be9, 0x97d0, 0x3b4, 0x8e2f, 0xcecb, 0x1, 0x1);
        gbc.writeMem(0x1855, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x7be9, gbc.sp());
        EXPECT(0x1857, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0334
        gbc.setState(0x626e, 0x64c, 0xe550, 0x6f42, 0xf6c1, 0x353d, 0x1, 0x1);
        gbc.writeMem(0x626e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x64c, gbc.sp());
        EXPECT(0x6270, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0335
        gbc.setState(0x5c4e, 0xdfcc, 0xb0f0, 0x5048, 0x9a2, 0xb45a, 0x1, 0x1);
        gbc.writeMem(0x5c4e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xdfcc, gbc.sp());
        EXPECT(0x5c50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0336
        gbc.setState(0x8eec, 0x570f, 0xa7f0, 0x7f26, 0xf409, 0x9e7c, 0x1, 0x1);
        gbc.writeMem(0x8eec, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x570f, gbc.sp());
        EXPECT(0x8eee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8eec));
        EXPECT(0x78, gbc.readMem(0x8eed));
        // CB 78 0337
        gbc.setState(0x7c05, 0xd85b, 0x760, 0x2d93, 0x672f, 0x700e, 0x0, 0x0);
        gbc.writeMem(0x7c05, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xd85b, gbc.sp());
        EXPECT(0x7c07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0338
        gbc.setState(0x3275, 0xf88c, 0x32f0, 0xca7d, 0xa8c7, 0xf4d2, 0x0, 0x1);
        gbc.writeMem(0x3275, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xf88c, gbc.sp());
        EXPECT(0x3277, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0339
        gbc.setState(0x2c4a, 0x5256, 0xbf10, 0xa2f5, 0x73f4, 0xa8d, 0x1, 0x0);
        gbc.writeMem(0x2c4a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x5256, gbc.sp());
        EXPECT(0x2c4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 033A
        gbc.setState(0x58f8, 0x24c4, 0xdaa0, 0x1f5, 0xf330, 0x28ca, 0x1, 0x0);
        gbc.writeMem(0x58f8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x24c4, gbc.sp());
        EXPECT(0x58fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 033B
        gbc.setState(0x62de, 0xe7d0, 0x1340, 0xae36, 0x98d1, 0x661d, 0x0, 0x1);
        gbc.writeMem(0x62de, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xe7d0, gbc.sp());
        EXPECT(0x62e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 033C
        gbc.setState(0x91a0, 0x8ff6, 0x4f10, 0x89bd, 0x9ad2, 0x65c4, 0x0, 0x0);
        gbc.writeMem(0x91a0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x8ff6, gbc.sp());
        EXPECT(0x91a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91a0));
        EXPECT(0x78, gbc.readMem(0x91a1));
        // CB 78 033D
        gbc.setState(0xa0c, 0xfef1, 0xbe80, 0x9f80, 0x33f7, 0x270f, 0x1, 0x1);
        gbc.writeMem(0xa0c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xfef1, gbc.sp());
        EXPECT(0xa0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 033E
        gbc.setState(0xae59, 0x1ea1, 0x6700, 0xd425, 0x729c, 0x169e, 0x1, 0x1);
        gbc.writeMem(0xae59, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x1ea1, gbc.sp());
        EXPECT(0xae5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae59));
        EXPECT(0x78, gbc.readMem(0xae5a));
        // CB 78 033F
        gbc.setState(0xe67d, 0xa513, 0x8580, 0x8680, 0xd9c, 0x1a4e, 0x0, 0x0);
        gbc.writeMem(0xe67d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xa513, gbc.sp());
        EXPECT(0xe67f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe67d));
        EXPECT(0x78, gbc.readMem(0xe67e));
        // CB 78 0340
        gbc.setState(0x2ad2, 0x3ac7, 0x8560, 0xf019, 0x845, 0x562b, 0x0, 0x0);
        gbc.writeMem(0x2ad2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x3ac7, gbc.sp());
        EXPECT(0x2ad4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0341
        gbc.setState(0x8826, 0x29b5, 0x6c90, 0xa9e7, 0x4294, 0x7c48, 0x1, 0x1);
        gbc.writeMem(0x8826, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x29b5, gbc.sp());
        EXPECT(0x8828, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8826));
        EXPECT(0x78, gbc.readMem(0x8827));
        // CB 78 0342
        gbc.setState(0xcf72, 0xf906, 0x86b0, 0x9069, 0x2ae4, 0x2792, 0x1, 0x0);
        gbc.writeMem(0xcf72, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xf906, gbc.sp());
        EXPECT(0xcf74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf72));
        EXPECT(0x78, gbc.readMem(0xcf73));
        // CB 78 0343
        gbc.setState(0xa82a, 0x5629, 0x2520, 0x6937, 0xc54f, 0xea70, 0x0, 0x1);
        gbc.writeMem(0xa82a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x5629, gbc.sp());
        EXPECT(0xa82c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa82a));
        EXPECT(0x78, gbc.readMem(0xa82b));
        // CB 78 0344
        gbc.setState(0xd751, 0x92b2, 0x4990, 0xe2c7, 0x57a7, 0xfe43, 0x1, 0x1);
        gbc.writeMem(0xd751, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x92b2, gbc.sp());
        EXPECT(0xd753, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd751));
        EXPECT(0x78, gbc.readMem(0xd752));
        // CB 78 0345
        gbc.setState(0x5036, 0xe6d3, 0x7600, 0xddff, 0x2040, 0x6e4c, 0x1, 0x1);
        gbc.writeMem(0x5036, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xe6d3, gbc.sp());
        EXPECT(0x5038, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0346
        gbc.setState(0x7249, 0x71af, 0xe310, 0x5ec7, 0xf42e, 0xcc7b, 0x0, 0x1);
        gbc.writeMem(0x7249, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x71af, gbc.sp());
        EXPECT(0x724b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0347
        gbc.setState(0xdf66, 0x52c2, 0xaae0, 0x28b4, 0x2c7f, 0xa156, 0x0, 0x0);
        gbc.writeMem(0xdf66, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x52c2, gbc.sp());
        EXPECT(0xdf68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf66));
        EXPECT(0x78, gbc.readMem(0xdf67));
        // CB 78 0348
        gbc.setState(0xce4b, 0xe907, 0x93b0, 0xefc9, 0xc54a, 0x6336, 0x1, 0x1);
        gbc.writeMem(0xce4b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xe907, gbc.sp());
        EXPECT(0xce4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce4b));
        EXPECT(0x78, gbc.readMem(0xce4c));
        // CB 78 0349
        gbc.setState(0x466f, 0x109a, 0x3b20, 0xb769, 0xf92a, 0x398c, 0x0, 0x0);
        gbc.writeMem(0x466f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x109a, gbc.sp());
        EXPECT(0x4671, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 034A
        gbc.setState(0x12c1, 0xf42b, 0x4620, 0x27e8, 0x6c7c, 0xcdae, 0x1, 0x0);
        gbc.writeMem(0x12c1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xf42b, gbc.sp());
        EXPECT(0x12c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 034B
        gbc.setState(0x81f6, 0xfa78, 0xbf0, 0xc6e6, 0xd55, 0x2e03, 0x0, 0x1);
        gbc.writeMem(0x81f6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xfa78, gbc.sp());
        EXPECT(0x81f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81f6));
        EXPECT(0x78, gbc.readMem(0x81f7));
        // CB 78 034C
        gbc.setState(0x4855, 0xa0aa, 0x9f00, 0x63e8, 0xbd74, 0x5720, 0x1, 0x1);
        gbc.writeMem(0x4855, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xa0aa, gbc.sp());
        EXPECT(0x4857, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 034D
        gbc.setState(0x387a, 0x325c, 0x2160, 0x3a65, 0x7403, 0xa9b6, 0x1, 0x0);
        gbc.writeMem(0x387a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x325c, gbc.sp());
        EXPECT(0x387c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 034E
        gbc.setState(0xca7d, 0xe96f, 0x77f0, 0x667a, 0xe099, 0x972f, 0x0, 0x0);
        gbc.writeMem(0xca7d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xe96f, gbc.sp());
        EXPECT(0xca7f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca7d));
        EXPECT(0x78, gbc.readMem(0xca7e));
        // CB 78 034F
        gbc.setState(0x38ac, 0x87d5, 0xc4b0, 0x313b, 0xb0ac, 0x5947, 0x1, 0x0);
        gbc.writeMem(0x38ac, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x87d5, gbc.sp());
        EXPECT(0x38ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0351
        gbc.setState(0xa79e, 0xec37, 0x4e90, 0xe7c2, 0xfcfb, 0xe476, 0x1, 0x1);
        gbc.writeMem(0xa79e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xec37, gbc.sp());
        EXPECT(0xa7a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa79e));
        EXPECT(0x78, gbc.readMem(0xa79f));
        // CB 78 0352
        gbc.setState(0x4860, 0x1827, 0xe340, 0x356f, 0x86ea, 0xcc39, 0x1, 0x1);
        gbc.writeMem(0x4860, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x1827, gbc.sp());
        EXPECT(0x4862, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0353
        gbc.setState(0xcc7a, 0x573a, 0x6c70, 0xe508, 0xb1ba, 0x4f8a, 0x0, 0x1);
        gbc.writeMem(0xcc7a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x573a, gbc.sp());
        EXPECT(0xcc7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc7a));
        EXPECT(0x78, gbc.readMem(0xcc7b));
        // CB 78 0354
        gbc.setState(0xc96d, 0xfb80, 0x1590, 0xcc03, 0xc6ec, 0xa059, 0x1, 0x0);
        gbc.writeMem(0xc96d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xfb80, gbc.sp());
        EXPECT(0xc96f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc96d));
        EXPECT(0x78, gbc.readMem(0xc96e));
        // CB 78 0355
        gbc.setState(0x375f, 0xc5f5, 0x1570, 0xd51, 0x8435, 0x914, 0x0, 0x1);
        gbc.writeMem(0x375f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xc5f5, gbc.sp());
        EXPECT(0x3761, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0356
        gbc.setState(0x6167, 0xaf25, 0xe0c0, 0x1c8e, 0xcab, 0x857f, 0x1, 0x0);
        gbc.writeMem(0x6167, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xaf25, gbc.sp());
        EXPECT(0x6169, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0357
        gbc.setState(0x164d, 0x9daf, 0x67a0, 0x2668, 0xa586, 0x8531, 0x1, 0x0);
        gbc.writeMem(0x164d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x9daf, gbc.sp());
        EXPECT(0x164f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0358
        gbc.setState(0x23bc, 0x2b14, 0x3df0, 0xe11b, 0x4188, 0xa44d, 0x1, 0x0);
        gbc.writeMem(0x23bc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x2b14, gbc.sp());
        EXPECT(0x23be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0359
        gbc.setState(0xe51d, 0x1d8f, 0x7600, 0x44d3, 0xa722, 0xc41a, 0x1, 0x1);
        gbc.writeMem(0xe51d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x1d8f, gbc.sp());
        EXPECT(0xe51f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe51d));
        EXPECT(0x78, gbc.readMem(0xe51e));
        // CB 78 035A
        gbc.setState(0xb061, 0x2221, 0x40, 0x6d96, 0x6196, 0xdea9, 0x0, 0x0);
        gbc.writeMem(0xb061, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x2221, gbc.sp());
        EXPECT(0xb063, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb061));
        EXPECT(0x78, gbc.readMem(0xb062));
        // CB 78 035B
        gbc.setState(0xd751, 0xcbfa, 0x9fd0, 0x91f, 0xb2d2, 0xf386, 0x1, 0x1);
        gbc.writeMem(0xd751, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xcbfa, gbc.sp());
        EXPECT(0xd753, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd751));
        EXPECT(0x78, gbc.readMem(0xd752));
        // CB 78 035C
        gbc.setState(0xde4e, 0x589b, 0x59f0, 0x3408, 0xf8e3, 0x5bd6, 0x0, 0x0);
        gbc.writeMem(0xde4e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x589b, gbc.sp());
        EXPECT(0xde50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde4e));
        EXPECT(0x78, gbc.readMem(0xde4f));
        // CB 78 035D
        gbc.setState(0xbcc4, 0x8054, 0x8550, 0x2cd8, 0xb872, 0x3f73, 0x1, 0x1);
        gbc.writeMem(0xbcc4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x8054, gbc.sp());
        EXPECT(0xbcc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcc4));
        EXPECT(0x78, gbc.readMem(0xbcc5));
        // CB 78 035E
        gbc.setState(0xad4d, 0x8c8, 0x85d0, 0x5170, 0x556d, 0x3f53, 0x1, 0x0);
        gbc.writeMem(0xad4d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x8c8, gbc.sp());
        EXPECT(0xad4f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad4d));
        EXPECT(0x78, gbc.readMem(0xad4e));
        // CB 78 035F
        gbc.setState(0xc2, 0xeb10, 0x640, 0xbb9d, 0xbd9f, 0x3089, 0x1, 0x0);
        gbc.writeMem(0xc2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xeb10, gbc.sp());
        EXPECT(0xc4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0361
        gbc.setState(0xd826, 0xaa84, 0x7110, 0x5d4b, 0x4302, 0x931a, 0x0, 0x1);
        gbc.writeMem(0xd826, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xaa84, gbc.sp());
        EXPECT(0xd828, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd826));
        EXPECT(0x78, gbc.readMem(0xd827));
        // CB 78 0362
        gbc.setState(0xe7f1, 0xb3df, 0xe2a0, 0x34ff, 0xe1db, 0x61f9, 0x1, 0x1);
        gbc.writeMem(0xe7f1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xb3df, gbc.sp());
        EXPECT(0xe7f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7f1));
        EXPECT(0x78, gbc.readMem(0xe7f2));
        // CB 78 0363
        gbc.setState(0x3e96, 0xe083, 0xbf40, 0xc1be, 0xf93c, 0x6b23, 0x0, 0x1);
        gbc.writeMem(0x3e96, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xe083, gbc.sp());
        EXPECT(0x3e98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0364
        gbc.setState(0xedf2, 0x148, 0x9c50, 0x7b3d, 0x9a0, 0x4e4, 0x0, 0x0);
        gbc.writeMem(0xedf2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x148, gbc.sp());
        EXPECT(0xedf4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedf2));
        EXPECT(0x78, gbc.readMem(0xedf3));
        // CB 78 0365
        gbc.setState(0x8b9, 0xb6d3, 0x26c0, 0x3fc5, 0x92f1, 0x22a7, 0x1, 0x0);
        gbc.writeMem(0x8b9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xb6d3, gbc.sp());
        EXPECT(0x8bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0366
        gbc.setState(0x751, 0x265d, 0x8980, 0x4831, 0xb79e, 0x69ae, 0x0, 0x1);
        gbc.writeMem(0x751, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x265d, gbc.sp());
        EXPECT(0x753, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0367
        gbc.setState(0xb240, 0x68b8, 0xd3f0, 0xba3c, 0x7521, 0xb060, 0x0, 0x1);
        gbc.writeMem(0xb240, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x68b8, gbc.sp());
        EXPECT(0xb242, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb240));
        EXPECT(0x78, gbc.readMem(0xb241));
        // CB 78 0368
        gbc.setState(0x13cc, 0x1d9d, 0xbb50, 0xd88c, 0x42ae, 0xfeea, 0x1, 0x1);
        gbc.writeMem(0x13cc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x1d9d, gbc.sp());
        EXPECT(0x13ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0369
        gbc.setState(0xd7f4, 0x2a65, 0x4bc0, 0xae6a, 0xe191, 0xbc96, 0x0, 0x0);
        gbc.writeMem(0xd7f4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x2a65, gbc.sp());
        EXPECT(0xd7f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7f4));
        EXPECT(0x78, gbc.readMem(0xd7f5));
        // CB 78 036A
        gbc.setState(0xa114, 0x1dc, 0xba50, 0x303d, 0x6c5b, 0x4aa9, 0x1, 0x1);
        gbc.writeMem(0xa114, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x1dc, gbc.sp());
        EXPECT(0xa116, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa114));
        EXPECT(0x78, gbc.readMem(0xa115));
        // CB 78 036C
        gbc.setState(0xeebd, 0xf6a8, 0xb2a0, 0x14c0, 0x439f, 0xc46e, 0x0, 0x0);
        gbc.writeMem(0xeebd, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xf6a8, gbc.sp());
        EXPECT(0xeebf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeebd));
        EXPECT(0x78, gbc.readMem(0xeebe));
        // CB 78 036D
        gbc.setState(0xd144, 0x33f8, 0x1b60, 0xd508, 0x4480, 0x53fe, 0x0, 0x1);
        gbc.writeMem(0xd144, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x33f8, gbc.sp());
        EXPECT(0xd146, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd144));
        EXPECT(0x78, gbc.readMem(0xd145));
        // CB 78 036E
        gbc.setState(0x3655, 0x3ea3, 0xe1b0, 0xccdb, 0x3eb3, 0x94f9, 0x0, 0x1);
        gbc.writeMem(0x3655, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x3ea3, gbc.sp());
        EXPECT(0x3657, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 036F
        gbc.setState(0xe5d8, 0x163c, 0x60, 0xe477, 0x3555, 0xe820, 0x0, 0x0);
        gbc.writeMem(0xe5d8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x163c, gbc.sp());
        EXPECT(0xe5da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5d8));
        EXPECT(0x78, gbc.readMem(0xe5d9));
        // CB 78 0370
        gbc.setState(0xc66b, 0xe240, 0x4230, 0x9211, 0x2984, 0x8d32, 0x1, 0x0);
        gbc.writeMem(0xc66b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xe240, gbc.sp());
        EXPECT(0xc66d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc66b));
        EXPECT(0x78, gbc.readMem(0xc66c));
        // CB 78 0371
        gbc.setState(0x7397, 0xe090, 0x7e50, 0x84d1, 0xa101, 0x2c74, 0x0, 0x1);
        gbc.writeMem(0x7397, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xe090, gbc.sp());
        EXPECT(0x7399, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0372
        gbc.setState(0xc3cf, 0xc96c, 0x5b20, 0xbb51, 0xb4b8, 0x1627, 0x1, 0x1);
        gbc.writeMem(0xc3cf, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xc96c, gbc.sp());
        EXPECT(0xc3d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3cf));
        EXPECT(0x78, gbc.readMem(0xc3d0));
        // CB 78 0373
        gbc.setState(0x341, 0x4934, 0x80f0, 0xb76d, 0xa7ff, 0x846d, 0x1, 0x1);
        gbc.writeMem(0x341, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x4934, gbc.sp());
        EXPECT(0x343, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0374
        gbc.setState(0x6c88, 0x5cf0, 0xac40, 0x4a39, 0x7ef8, 0x4d33, 0x1, 0x1);
        gbc.writeMem(0x6c88, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x5cf0, gbc.sp());
        EXPECT(0x6c8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0375
        gbc.setState(0x2f85, 0xe418, 0xc2f0, 0xa6d, 0x4557, 0x20ac, 0x1, 0x0);
        gbc.writeMem(0x2f85, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xe418, gbc.sp());
        EXPECT(0x2f87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0376
        gbc.setState(0xc94, 0xcd83, 0x59e0, 0x8142, 0xaa4d, 0x77c9, 0x1, 0x1);
        gbc.writeMem(0xc94, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xcd83, gbc.sp());
        EXPECT(0xc96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0377
        gbc.setState(0xb1cb, 0x3d98, 0x8d40, 0xef06, 0xb858, 0xe3a9, 0x1, 0x1);
        gbc.writeMem(0xb1cb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x3d98, gbc.sp());
        EXPECT(0xb1cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1cb));
        EXPECT(0x78, gbc.readMem(0xb1cc));
        // CB 78 0378
        gbc.setState(0x9907, 0x5fc5, 0xcb50, 0x152f, 0xed45, 0x45ef, 0x1, 0x1);
        gbc.writeMem(0x9907, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x5fc5, gbc.sp());
        EXPECT(0x9909, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9907));
        EXPECT(0x78, gbc.readMem(0x9908));
        // CB 78 0379
        gbc.setState(0x7dc7, 0x35f1, 0xdb60, 0xbfe7, 0x51f1, 0x13ef, 0x0, 0x0);
        gbc.writeMem(0x7dc7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x35f1, gbc.sp());
        EXPECT(0x7dc9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 037A
        gbc.setState(0x66e9, 0x16df, 0xa6c0, 0xf08b, 0x264f, 0x8a0, 0x0, 0x0);
        gbc.writeMem(0x66e9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x16df, gbc.sp());
        EXPECT(0x66eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 037B
        gbc.setState(0x8047, 0xfefb, 0xc850, 0xb0d1, 0xaf27, 0x4365, 0x1, 0x1);
        gbc.writeMem(0x8047, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xfefb, gbc.sp());
        EXPECT(0x8049, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8047));
        EXPECT(0x78, gbc.readMem(0x8048));
        // CB 78 037C
        gbc.setState(0x85be, 0x655d, 0xc430, 0x7607, 0xa303, 0x89d5, 0x1, 0x0);
        gbc.writeMem(0x85be, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x655d, gbc.sp());
        EXPECT(0x85c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85be));
        EXPECT(0x78, gbc.readMem(0x85bf));
        // CB 78 037E
        gbc.setState(0x4636, 0xa239, 0xebf0, 0xc3b8, 0xb15e, 0x7564, 0x1, 0x1);
        gbc.writeMem(0x4636, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xa239, gbc.sp());
        EXPECT(0x4638, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 037F
        gbc.setState(0xbf1f, 0x63d, 0x2f90, 0x6969, 0x2456, 0xa369, 0x1, 0x0);
        gbc.writeMem(0xbf1f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x63d, gbc.sp());
        EXPECT(0xbf21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf1f));
        EXPECT(0x78, gbc.readMem(0xbf20));
        // CB 78 0380
        gbc.setState(0x3076, 0x262d, 0x3560, 0xf177, 0xc6cf, 0x8647, 0x0, 0x0);
        gbc.writeMem(0x3076, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x262d, gbc.sp());
        EXPECT(0x3078, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0381
        gbc.setState(0xaf5b, 0x2443, 0xd030, 0xf36, 0x5c10, 0x9074, 0x1, 0x1);
        gbc.writeMem(0xaf5b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x2443, gbc.sp());
        EXPECT(0xaf5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf5b));
        EXPECT(0x78, gbc.readMem(0xaf5c));
        // CB 78 0382
        gbc.setState(0xdd81, 0x6581, 0x7250, 0xdfe1, 0x835d, 0x87f4, 0x1, 0x1);
        gbc.writeMem(0xdd81, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x6581, gbc.sp());
        EXPECT(0xdd83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd81));
        EXPECT(0x78, gbc.readMem(0xdd82));
        // CB 78 0383
        gbc.setState(0x944f, 0xa5d1, 0x1c60, 0xfc7a, 0x8ed2, 0x97d2, 0x0, 0x0);
        gbc.writeMem(0x944f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xa5d1, gbc.sp());
        EXPECT(0x9451, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x944f));
        EXPECT(0x78, gbc.readMem(0x9450));
        // CB 78 0385
        gbc.setState(0x265, 0x6f38, 0x49e0, 0xf86a, 0x4342, 0x3a0e, 0x0, 0x1);
        gbc.writeMem(0x265, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x6f38, gbc.sp());
        EXPECT(0x267, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0386
        gbc.setState(0x410a, 0x3516, 0x5c50, 0x47bc, 0x8774, 0xbe89, 0x0, 0x1);
        gbc.writeMem(0x410a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x3516, gbc.sp());
        EXPECT(0x410c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0387
        gbc.setState(0x3a5d, 0x7523, 0x6830, 0xacde, 0x46a, 0x8e4, 0x1, 0x1);
        gbc.writeMem(0x3a5d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x7523, gbc.sp());
        EXPECT(0x3a5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0388
        gbc.setState(0x4a01, 0x3ee8, 0xddc0, 0x36d3, 0xae3e, 0xcf8a, 0x1, 0x1);
        gbc.writeMem(0x4a01, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x3ee8, gbc.sp());
        EXPECT(0x4a03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0389
        gbc.setState(0xdd35, 0xa45b, 0xfdc0, 0x34ca, 0x91ad, 0x7bce, 0x0, 0x1);
        gbc.writeMem(0xdd35, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xa45b, gbc.sp());
        EXPECT(0xdd37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd35));
        EXPECT(0x78, gbc.readMem(0xdd36));
        // CB 78 038A
        gbc.setState(0x607a, 0xc17f, 0xbae0, 0xa95b, 0x1d1f, 0xd050, 0x0, 0x0);
        gbc.writeMem(0x607a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xc17f, gbc.sp());
        EXPECT(0x607c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 038B
        gbc.setState(0xc0e4, 0x98f9, 0x3b20, 0xcfd4, 0x197e, 0x169a, 0x0, 0x0);
        gbc.writeMem(0xc0e4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x98f9, gbc.sp());
        EXPECT(0xc0e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0e4));
        EXPECT(0x78, gbc.readMem(0xc0e5));
        // CB 78 038C
        gbc.setState(0x60cc, 0xb12, 0x31b0, 0x8870, 0x5d9e, 0x9434, 0x1, 0x1);
        gbc.writeMem(0x60cc, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xb12, gbc.sp());
        EXPECT(0x60ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 038D
        gbc.setState(0xb8f7, 0x194c, 0x1770, 0x2190, 0x43d2, 0xc0a6, 0x0, 0x1);
        gbc.writeMem(0xb8f7, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x194c, gbc.sp());
        EXPECT(0xb8f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8f7));
        EXPECT(0x78, gbc.readMem(0xb8f8));
        // CB 78 038E
        gbc.setState(0xa918, 0x7a2, 0xb200, 0x8c15, 0x3b4a, 0x12b3, 0x0, 0x0);
        gbc.writeMem(0xa918, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x7a2, gbc.sp());
        EXPECT(0xa91a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa918));
        EXPECT(0x78, gbc.readMem(0xa919));
        // CB 78 038F
        gbc.setState(0x264d, 0xf9ec, 0x72f0, 0x2e9f, 0x5274, 0x93fd, 0x1, 0x0);
        gbc.writeMem(0x264d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xf9ec, gbc.sp());
        EXPECT(0x264f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0390
        gbc.setState(0x7563, 0x8039, 0xfd40, 0x847c, 0xd01e, 0x49a8, 0x0, 0x0);
        gbc.writeMem(0x7563, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x8039, gbc.sp());
        EXPECT(0x7565, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0391
        gbc.setState(0xe310, 0x4758, 0xee10, 0x6efa, 0x15d, 0xd93b, 0x0, 0x0);
        gbc.writeMem(0xe310, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x4758, gbc.sp());
        EXPECT(0xe312, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe310));
        EXPECT(0x78, gbc.readMem(0xe311));
        // CB 78 0392
        gbc.setState(0xc519, 0x6389, 0xb320, 0x7ea2, 0x3029, 0x2d6c, 0x0, 0x0);
        gbc.writeMem(0xc519, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x6389, gbc.sp());
        EXPECT(0xc51b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc519));
        EXPECT(0x78, gbc.readMem(0xc51a));
        // CB 78 0393
        gbc.setState(0xcb01, 0xb3f2, 0xa2b0, 0xe954, 0x278b, 0x1c8d, 0x1, 0x1);
        gbc.writeMem(0xcb01, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xb3f2, gbc.sp());
        EXPECT(0xcb03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb01));
        EXPECT(0x78, gbc.readMem(0xcb02));
        // CB 78 0394
        gbc.setState(0x5e78, 0xd8bb, 0x1950, 0x215a, 0x8852, 0x42e4, 0x1, 0x0);
        gbc.writeMem(0x5e78, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xd8bb, gbc.sp());
        EXPECT(0x5e7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 0395
        gbc.setState(0xb76, 0x5e92, 0xd4a0, 0x6cee, 0x3969, 0x2a00, 0x1, 0x1);
        gbc.writeMem(0xb76, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x5e92, gbc.sp());
        EXPECT(0xb78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 0396
        gbc.setState(0x97d5, 0x9139, 0x8180, 0xe073, 0x8e96, 0x2df5, 0x0, 0x1);
        gbc.writeMem(0x97d5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x9139, gbc.sp());
        EXPECT(0x97d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97d5));
        EXPECT(0x78, gbc.readMem(0x97d6));
        // CB 78 0397
        gbc.setState(0x97f2, 0xe6cf, 0x4970, 0x4763, 0x8beb, 0x76c5, 0x1, 0x1);
        gbc.writeMem(0x97f2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xe6cf, gbc.sp());
        EXPECT(0x97f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97f2));
        EXPECT(0x78, gbc.readMem(0x97f3));
        // CB 78 0398
        gbc.setState(0x67e9, 0xd846, 0x1840, 0xb1b0, 0x2aca, 0xc7a9, 0x1, 0x0);
        gbc.writeMem(0x67e9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xd846, gbc.sp());
        EXPECT(0x67eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 039A
        gbc.setState(0x185f, 0x1240, 0x530, 0x59c0, 0xa982, 0x8c8d, 0x0, 0x1);
        gbc.writeMem(0x185f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x1240, gbc.sp());
        EXPECT(0x1861, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 039B
        gbc.setState(0x4d6a, 0xc23, 0x5650, 0x49fc, 0x66db, 0xf372, 0x1, 0x1);
        gbc.writeMem(0x4d6a, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xc23, gbc.sp());
        EXPECT(0x4d6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 039C
        gbc.setState(0xe73c, 0xabc5, 0xc750, 0xb18a, 0x4ec2, 0xa4fb, 0x0, 0x1);
        gbc.writeMem(0xe73c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xabc5, gbc.sp());
        EXPECT(0xe73e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe73c));
        EXPECT(0x78, gbc.readMem(0xe73d));
        // CB 78 039D
        gbc.setState(0xd92b, 0x4e7d, 0xb230, 0x5d09, 0xef1d, 0xf719, 0x0, 0x0);
        gbc.writeMem(0xd92b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x4e7d, gbc.sp());
        EXPECT(0xd92d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd92b));
        EXPECT(0x78, gbc.readMem(0xd92c));
        // CB 78 039E
        gbc.setState(0xcfc9, 0x3d15, 0x2600, 0x2d00, 0xbccc, 0x8e12, 0x1, 0x0);
        gbc.writeMem(0xcfc9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x3d15, gbc.sp());
        EXPECT(0xcfcb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfc9));
        EXPECT(0x78, gbc.readMem(0xcfca));
        // CB 78 039F
        gbc.setState(0xad4, 0x212e, 0x1830, 0x4ced, 0xa65c, 0x4503, 0x1, 0x0);
        gbc.writeMem(0xad4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x212e, gbc.sp());
        EXPECT(0xad6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03A0
        gbc.setState(0x22a2, 0x2dda, 0x9110, 0x6d74, 0xef63, 0x1e89, 0x1, 0x0);
        gbc.writeMem(0x22a2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x2dda, gbc.sp());
        EXPECT(0x22a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03A1
        gbc.setState(0xcaaa, 0x66c2, 0x7fd0, 0x7d6e, 0xa20, 0x8a24, 0x1, 0x0);
        gbc.writeMem(0xcaaa, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x66c2, gbc.sp());
        EXPECT(0xcaac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaaa));
        EXPECT(0x78, gbc.readMem(0xcaab));
        // CB 78 03A2
        gbc.setState(0x6ec1, 0x5029, 0x76c0, 0x25ba, 0xea45, 0x2fdf, 0x1, 0x1);
        gbc.writeMem(0x6ec1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x5029, gbc.sp());
        EXPECT(0x6ec3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03A3
        gbc.setState(0x236e, 0xf075, 0xffb0, 0x65da, 0x3f45, 0xc697, 0x1, 0x1);
        gbc.writeMem(0x236e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xf075, gbc.sp());
        EXPECT(0x2370, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03A4
        gbc.setState(0x404c, 0x7a6a, 0xe3c0, 0x7e2d, 0xe9ba, 0xf6d6, 0x0, 0x0);
        gbc.writeMem(0x404c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x7a6a, gbc.sp());
        EXPECT(0x404e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03A5
        gbc.setState(0x5b54, 0x7c89, 0x8910, 0xc274, 0xe931, 0xc4aa, 0x0, 0x0);
        gbc.writeMem(0x5b54, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x7c89, gbc.sp());
        EXPECT(0x5b56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03A6
        gbc.setState(0x7169, 0x4662, 0x47a0, 0x7440, 0xfc1f, 0xe5a0, 0x0, 0x1);
        gbc.writeMem(0x7169, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x4662, gbc.sp());
        EXPECT(0x716b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03A8
        gbc.setState(0x1800, 0x5eb5, 0x2470, 0xf3e3, 0x1fc4, 0xefaf, 0x1, 0x0);
        gbc.writeMem(0x1800, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x5eb5, gbc.sp());
        EXPECT(0x1802, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03A9
        gbc.setState(0x6a33, 0xfa56, 0x7d50, 0x69e0, 0x538b, 0xf153, 0x0, 0x1);
        gbc.writeMem(0x6a33, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xfa56, gbc.sp());
        EXPECT(0x6a35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03AA
        gbc.setState(0xb26d, 0x8272, 0x28e0, 0xac9c, 0x3394, 0x5c9f, 0x0, 0x1);
        gbc.writeMem(0xb26d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x8272, gbc.sp());
        EXPECT(0xb26f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb26d));
        EXPECT(0x78, gbc.readMem(0xb26e));
        // CB 78 03AB
        gbc.setState(0xbf41, 0xa4f9, 0x1f40, 0x8949, 0xc730, 0x6902, 0x0, 0x0);
        gbc.writeMem(0xbf41, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xa4f9, gbc.sp());
        EXPECT(0xbf43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf41));
        EXPECT(0x78, gbc.readMem(0xbf42));
        // CB 78 03AC
        gbc.setState(0xbc72, 0x56a1, 0x3b50, 0x495e, 0x6499, 0x3fef, 0x0, 0x0);
        gbc.writeMem(0xbc72, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x56a1, gbc.sp());
        EXPECT(0xbc74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc72));
        EXPECT(0x78, gbc.readMem(0xbc73));
        // CB 78 03AD
        gbc.setState(0x88ca, 0xf60b, 0x76b0, 0xc38d, 0x13a0, 0xd7bf, 0x0, 0x0);
        gbc.writeMem(0x88ca, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xf60b, gbc.sp());
        EXPECT(0x88cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88ca));
        EXPECT(0x78, gbc.readMem(0x88cb));
        // CB 78 03AE
        gbc.setState(0x882f, 0xb3e1, 0x4c80, 0xa702, 0x98d3, 0x2f73, 0x1, 0x0);
        gbc.writeMem(0x882f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xb3e1, gbc.sp());
        EXPECT(0x8831, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x882f));
        EXPECT(0x78, gbc.readMem(0x8830));
        // CB 78 03AF
        gbc.setState(0x8f73, 0xc1f, 0xbd50, 0x5b41, 0x186e, 0x4b3f, 0x0, 0x0);
        gbc.writeMem(0x8f73, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xc1f, gbc.sp());
        EXPECT(0x8f75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f73));
        EXPECT(0x78, gbc.readMem(0x8f74));
        // CB 78 03B0
        gbc.setState(0xa601, 0x819e, 0xf5e0, 0x749f, 0x1aaa, 0x5628, 0x0, 0x1);
        gbc.writeMem(0xa601, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x819e, gbc.sp());
        EXPECT(0xa603, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa601));
        EXPECT(0x78, gbc.readMem(0xa602));
        // CB 78 03B1
        gbc.setState(0x24c6, 0x4dc4, 0x86e0, 0x21f8, 0x25af, 0x563a, 0x1, 0x0);
        gbc.writeMem(0x24c6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x4dc4, gbc.sp());
        EXPECT(0x24c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03B2
        gbc.setState(0x8143, 0x4e44, 0x7380, 0x9668, 0xd64f, 0x32be, 0x1, 0x1);
        gbc.writeMem(0x8143, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x4e44, gbc.sp());
        EXPECT(0x8145, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8143));
        EXPECT(0x78, gbc.readMem(0x8144));
        // CB 78 03B3
        gbc.setState(0x21e5, 0x1d4a, 0xb6c0, 0x61a6, 0x8b55, 0xc6c, 0x1, 0x1);
        gbc.writeMem(0x21e5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x1d4a, gbc.sp());
        EXPECT(0x21e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03B4
        gbc.setState(0xe078, 0xb563, 0x2a70, 0xa24f, 0xb2bb, 0xe98b, 0x1, 0x0);
        gbc.writeMem(0xe078, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xb563, gbc.sp());
        EXPECT(0xe07a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe078));
        EXPECT(0x78, gbc.readMem(0xe079));
        // CB 78 03B5
        gbc.setState(0x3045, 0xe78b, 0x71b0, 0xb6c3, 0xa196, 0xa7a, 0x0, 0x0);
        gbc.writeMem(0x3045, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xe78b, gbc.sp());
        EXPECT(0x3047, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03B6
        gbc.setState(0xae22, 0x8d2f, 0x55d0, 0x2c95, 0xdecc, 0x8efb, 0x0, 0x1);
        gbc.writeMem(0xae22, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x8d2f, gbc.sp());
        EXPECT(0xae24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae22));
        EXPECT(0x78, gbc.readMem(0xae23));
        // CB 78 03B7
        gbc.setState(0x4131, 0xe308, 0xbf00, 0xc055, 0xc49f, 0x9141, 0x1, 0x1);
        gbc.writeMem(0x4131, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xe308, gbc.sp());
        EXPECT(0x4133, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03B8
        gbc.setState(0x47ae, 0x444b, 0x6c70, 0xa56d, 0x8c9, 0xb5, 0x0, 0x1);
        gbc.writeMem(0x47ae, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x444b, gbc.sp());
        EXPECT(0x47b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03B9
        gbc.setState(0x729, 0xeac2, 0xc6e0, 0xbb16, 0x6d8f, 0x45b2, 0x1, 0x1);
        gbc.writeMem(0x729, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xeac2, gbc.sp());
        EXPECT(0x72b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03BA
        gbc.setState(0xc8, 0xd26f, 0xcf80, 0xb7a3, 0xd31c, 0x1f7f, 0x1, 0x0);
        gbc.writeMem(0xc8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xd26f, gbc.sp());
        EXPECT(0xca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03BC
        gbc.setState(0x28d8, 0x9961, 0xc8a0, 0x43ce, 0xc209, 0xdd2b, 0x1, 0x1);
        gbc.writeMem(0x28d8, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x9961, gbc.sp());
        EXPECT(0x28da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03BD
        gbc.setState(0x9287, 0xfd2d, 0xfa30, 0x9238, 0x21a7, 0x124, 0x0, 0x1);
        gbc.writeMem(0x9287, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xfd2d, gbc.sp());
        EXPECT(0x9289, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9287));
        EXPECT(0x78, gbc.readMem(0x9288));
        // CB 78 03BE
        gbc.setState(0x6dc2, 0xef2, 0xf490, 0xc49a, 0xc338, 0xb5bf, 0x1, 0x1);
        gbc.writeMem(0x6dc2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xef2, gbc.sp());
        EXPECT(0x6dc4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03BF
        gbc.setState(0x9d00, 0x899a, 0xb9f0, 0x4636, 0xa4f, 0xb9e8, 0x1, 0x0);
        gbc.writeMem(0x9d00, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x899a, gbc.sp());
        EXPECT(0x9d02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d00));
        EXPECT(0x78, gbc.readMem(0x9d01));
        // CB 78 03C0
        gbc.setState(0x436f, 0xbfda, 0x45a0, 0x7e3c, 0xf9c7, 0xf893, 0x0, 0x0);
        gbc.writeMem(0x436f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xbfda, gbc.sp());
        EXPECT(0x4371, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03C1
        gbc.setState(0x47a0, 0x7025, 0x6460, 0xdb10, 0xe074, 0xad7f, 0x1, 0x0);
        gbc.writeMem(0x47a0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x7025, gbc.sp());
        EXPECT(0x47a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03C2
        gbc.setState(0xbcf5, 0xadbf, 0x15b0, 0xb48a, 0x8e5a, 0x9d3e, 0x0, 0x0);
        gbc.writeMem(0xbcf5, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xadbf, gbc.sp());
        EXPECT(0xbcf7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcf5));
        EXPECT(0x78, gbc.readMem(0xbcf6));
        // CB 78 03C3
        gbc.setState(0xb5de, 0xb0c, 0xecf0, 0x4108, 0x7f3a, 0x365f, 0x0, 0x0);
        gbc.writeMem(0xb5de, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xb0c, gbc.sp());
        EXPECT(0xb5e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5de));
        EXPECT(0x78, gbc.readMem(0xb5df));
        // CB 78 03C4
        gbc.setState(0x5415, 0x177b, 0xff80, 0x8f6, 0xeece, 0xb62, 0x1, 0x0);
        gbc.writeMem(0x5415, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x177b, gbc.sp());
        EXPECT(0x5417, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03C5
        gbc.setState(0x2f7f, 0x924f, 0x3b40, 0x920e, 0xdb9a, 0x8bb4, 0x1, 0x0);
        gbc.writeMem(0x2f7f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x924f, gbc.sp());
        EXPECT(0x2f81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03C6
        gbc.setState(0x2ff2, 0x209, 0xeca0, 0xd6c9, 0x4d88, 0xb81, 0x0, 0x0);
        gbc.writeMem(0x2ff2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x209, gbc.sp());
        EXPECT(0x2ff4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03C8
        gbc.setState(0x9c78, 0x7c59, 0xd640, 0x2d87, 0xad4c, 0xf2bb, 0x0, 0x0);
        gbc.writeMem(0x9c78, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x7c59, gbc.sp());
        EXPECT(0x9c7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c78));
        EXPECT(0x78, gbc.readMem(0x9c79));
        // CB 78 03C9
        gbc.setState(0xa60b, 0x683b, 0xacb0, 0xf789, 0x426e, 0x3cc6, 0x0, 0x0);
        gbc.writeMem(0xa60b, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x683b, gbc.sp());
        EXPECT(0xa60d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa60b));
        EXPECT(0x78, gbc.readMem(0xa60c));
        // CB 78 03CA
        gbc.setState(0x4bc3, 0xafcf, 0x7740, 0xc5ad, 0x9f99, 0x4db0, 0x1, 0x0);
        gbc.writeMem(0x4bc3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xafcf, gbc.sp());
        EXPECT(0x4bc5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03CB
        gbc.setState(0x750c, 0xfa16, 0xc610, 0xde83, 0x2d4e, 0x2510, 0x1, 0x0);
        gbc.writeMem(0x750c, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xfa16, gbc.sp());
        EXPECT(0x750e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03CC
        gbc.setState(0xe9e0, 0xcb03, 0xd30, 0x6300, 0xe656, 0xf660, 0x1, 0x1);
        gbc.writeMem(0xe9e0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xcb03, gbc.sp());
        EXPECT(0xe9e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9e0));
        EXPECT(0x78, gbc.readMem(0xe9e1));
        // CB 78 03CD
        gbc.setState(0xa0c4, 0x9ec5, 0x6c0, 0xb6b5, 0xdbce, 0xce27, 0x1, 0x0);
        gbc.writeMem(0xa0c4, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x9ec5, gbc.sp());
        EXPECT(0xa0c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0c4));
        EXPECT(0x78, gbc.readMem(0xa0c5));
        // CB 78 03CE
        gbc.setState(0xd4d1, 0xfd6a, 0xbb00, 0x495b, 0xfddb, 0x3ed6, 0x0, 0x0);
        gbc.writeMem(0xd4d1, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xfd6a, gbc.sp());
        EXPECT(0xd4d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4d1));
        EXPECT(0x78, gbc.readMem(0xd4d2));
        // CB 78 03CF
        gbc.setState(0x7f66, 0xd09a, 0x10e0, 0xab60, 0x9551, 0xf190, 0x1, 0x0);
        gbc.writeMem(0x7f66, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xd09a, gbc.sp());
        EXPECT(0x7f68, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03D0
        gbc.setState(0x9ff0, 0xc23e, 0x1110, 0x8fe3, 0xa5a2, 0x44b8, 0x0, 0x1);
        gbc.writeMem(0x9ff0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xc23e, gbc.sp());
        EXPECT(0x9ff2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ff0));
        EXPECT(0x78, gbc.readMem(0x9ff1));
        // CB 78 03D1
        gbc.setState(0x3875, 0xc838, 0xced0, 0x8d0, 0x75a4, 0xc35a, 0x0, 0x1);
        gbc.writeMem(0x3875, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xc838, gbc.sp());
        EXPECT(0x3877, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03D2
        gbc.setState(0xdeba, 0x148f, 0x6330, 0x80b5, 0x900a, 0xd336, 0x0, 0x1);
        gbc.writeMem(0xdeba, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x148f, gbc.sp());
        EXPECT(0xdebc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdeba));
        EXPECT(0x78, gbc.readMem(0xdebb));
        // CB 78 03D3
        gbc.setState(0xb2e, 0xf9c6, 0xd450, 0x11c6, 0xe55f, 0xdab1, 0x0, 0x0);
        gbc.writeMem(0xb2e, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xf9c6, gbc.sp());
        EXPECT(0xb30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03D4
        gbc.setState(0x762f, 0xed7b, 0x8c20, 0x3edb, 0x889b, 0xc320, 0x0, 0x1);
        gbc.writeMem(0x762f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xed7b, gbc.sp());
        EXPECT(0x7631, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03D5
        gbc.setState(0x2eb0, 0x9f88, 0x5940, 0xaef4, 0x3d60, 0xc8f4, 0x1, 0x1);
        gbc.writeMem(0x2eb0, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x9f88, gbc.sp());
        EXPECT(0x2eb2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03D6
        gbc.setState(0xe7a9, 0x6de9, 0x2fc0, 0x56b2, 0x8505, 0xc53e, 0x1, 0x0);
        gbc.writeMem(0xe7a9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x6de9, gbc.sp());
        EXPECT(0xe7ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7a9));
        EXPECT(0x78, gbc.readMem(0xe7aa));
        // CB 78 03D7
        gbc.setState(0x16a2, 0x9031, 0x62e0, 0xd289, 0xcb59, 0xd137, 0x1, 0x0);
        gbc.writeMem(0x16a2, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x9031, gbc.sp());
        EXPECT(0x16a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03D8
        gbc.setState(0xe8b9, 0x44ad, 0x1ce0, 0xc4dd, 0xd104, 0x15bc, 0x0, 0x1);
        gbc.writeMem(0xe8b9, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x44ad, gbc.sp());
        EXPECT(0xe8bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8b9));
        EXPECT(0x78, gbc.readMem(0xe8ba));
        // CB 78 03D9
        gbc.setState(0x176f, 0xb75f, 0x2f00, 0x78a9, 0xc3be, 0xc84d, 0x1, 0x0);
        gbc.writeMem(0x176f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xb75f, gbc.sp());
        EXPECT(0x1771, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03DA
        gbc.setState(0xb091, 0x942f, 0x15c0, 0xea10, 0x9a40, 0x76f5, 0x1, 0x1);
        gbc.writeMem(0xb091, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x942f, gbc.sp());
        EXPECT(0xb093, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb091));
        EXPECT(0x78, gbc.readMem(0xb092));
        // CB 78 03DB
        gbc.setState(0xa340, 0x7610, 0x2e0, 0x5f1d, 0x1e35, 0xcc66, 0x0, 0x1);
        gbc.writeMem(0xa340, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x7610, gbc.sp());
        EXPECT(0xa342, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa340));
        EXPECT(0x78, gbc.readMem(0xa341));
        // CB 78 03DC
        gbc.setState(0x61a6, 0xb848, 0x5750, 0xbe55, 0xe853, 0xbdcf, 0x0, 0x1);
        gbc.writeMem(0x61a6, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xb848, gbc.sp());
        EXPECT(0x61a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03DE
        gbc.setState(0x615f, 0xfba1, 0x2ff0, 0x3645, 0x6f03, 0xfbd0, 0x1, 0x1);
        gbc.writeMem(0x615f, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xfba1, gbc.sp());
        EXPECT(0x6161, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03DF
        gbc.setState(0x8586, 0x399, 0x9d90, 0x5125, 0xe087, 0x24ea, 0x0, 0x1);
        gbc.writeMem(0x8586, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x399, gbc.sp());
        EXPECT(0x8588, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8586));
        EXPECT(0x78, gbc.readMem(0x8587));
        // CB 78 03E0
        gbc.setState(0x112d, 0xd0bb, 0x5a0, 0xf098, 0x6f17, 0xf15e, 0x1, 0x0);
        gbc.writeMem(0x112d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xd0bb, gbc.sp());
        EXPECT(0x112f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 78 03E1
        gbc.setState(0xe492, 0x1c69, 0xca10, 0xd6d5, 0x3f63, 0xf59a, 0x1, 0x0);
        gbc.writeMem(0xe492, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x1c69, gbc.sp());
        EXPECT(0xe494, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe492));
        EXPECT(0x78, gbc.readMem(0xe493));
        // CB 78 03E2
        gbc.setState(0x8845, 0xb8b3, 0xfcf0, 0x1e25, 0x6c10, 0x7b9d, 0x0, 0x0);
        gbc.writeMem(0x8845, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xb8b3, gbc.sp());
        EXPECT(0x8847, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8845));
        EXPECT(0x78, gbc.readMem(0x8846));
        // CB 78 03E3
        gbc.setState(0xc663, 0x8832, 0x76e0, 0x8bce, 0x2927, 0x2227, 0x1, 0x0);
        gbc.writeMem(0xc663, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x8832, gbc.sp());
        EXPECT(0xc665, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc663));
        EXPECT(0x78, gbc.readMem(0xc664));
        // CB 78 03E5
        gbc.setState(0x4dcb, 0xef58, 0xe2d0, 0x1b11, 0x7e62, 0x7f99, 0x0, 0x0);
        gbc.writeMem(0x4dcb, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xef58, gbc.sp());
        EXPECT(0x4dcd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03E6
        gbc.setState(0x6cc3, 0xe13a, 0x3d0, 0xd412, 0x2bad, 0x8707, 0x1, 0x1);
        gbc.writeMem(0x6cc3, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xe13a, gbc.sp());
        EXPECT(0x6cc5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 78 03E7
        gbc.setState(0x2c5d, 0xbeab, 0xd620, 0x1465, 0x9a41, 0xbb1c, 0x1, 0x0);
        gbc.writeMem(0x2c5d, { 0xcb, 0x78 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xbeab, gbc.sp());
        EXPECT(0x2c5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
    }
