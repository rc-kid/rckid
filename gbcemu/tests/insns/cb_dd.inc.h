    TEST(gbcemu, opcode_cb_dd) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB DD 0000
        gbc.setState(0x462b, 0xa169, 0xbbe0, 0xd358, 0xbbf2, 0xf5b1, 0x0, 0x0);
        gbc.writeMem(0x462b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xa169, gbc.sp());
        EXPECT(0x462d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0001
        gbc.setState(0x4d0d, 0x7644, 0x8330, 0x59ee, 0x7534, 0xa399, 0x1, 0x0);
        gbc.writeMem(0x4d0d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x7644, gbc.sp());
        EXPECT(0x4d0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0002
        gbc.setState(0x84b4, 0xf16d, 0x8e50, 0x68f3, 0xcc07, 0xc390, 0x0, 0x1);
        gbc.writeMem(0x84b4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xf16d, gbc.sp());
        EXPECT(0x84b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84b4));
        EXPECT(0xdd, gbc.readMem(0x84b5));
        // CB DD 0003
        gbc.setState(0xcd42, 0xbb43, 0xa710, 0x7eec, 0xb2b2, 0xc440, 0x1, 0x1);
        gbc.writeMem(0xcd42, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xbb43, gbc.sp());
        EXPECT(0xcd44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd42));
        EXPECT(0xdd, gbc.readMem(0xcd43));
        // CB DD 0004
        gbc.setState(0x9779, 0x9d11, 0xdf30, 0xa5e9, 0xf8d5, 0xe408, 0x1, 0x0);
        gbc.writeMem(0x9779, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x9d11, gbc.sp());
        EXPECT(0x977b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9779));
        EXPECT(0xdd, gbc.readMem(0x977a));
        // CB DD 0005
        gbc.setState(0x6e12, 0x6983, 0x6eb0, 0x5796, 0x6d14, 0x9e08, 0x1, 0x0);
        gbc.writeMem(0x6e12, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x6983, gbc.sp());
        EXPECT(0x6e14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0006
        gbc.setState(0x4c84, 0x266b, 0x8bc0, 0x7850, 0x1fe2, 0x61d2, 0x0, 0x1);
        gbc.writeMem(0x4c84, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x266b, gbc.sp());
        EXPECT(0x4c86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0007
        gbc.setState(0xa865, 0x5827, 0x9aa0, 0x3ae6, 0xd13b, 0x3a32, 0x1, 0x1);
        gbc.writeMem(0xa865, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x5827, gbc.sp());
        EXPECT(0xa867, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa865));
        EXPECT(0xdd, gbc.readMem(0xa866));
        // CB DD 0008
        gbc.setState(0x5dfb, 0x7891, 0xf6b0, 0x1a15, 0x3fae, 0xa47c, 0x1, 0x0);
        gbc.writeMem(0x5dfb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x7891, gbc.sp());
        EXPECT(0x5dfd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0009
        gbc.setState(0x62a5, 0x988a, 0x62f0, 0x3761, 0x41b7, 0x2524, 0x0, 0x0);
        gbc.writeMem(0x62a5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x988a, gbc.sp());
        EXPECT(0x62a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 000A
        gbc.setState(0x764e, 0x825d, 0xd420, 0x3b34, 0xc8b2, 0xa0ab, 0x0, 0x1);
        gbc.writeMem(0x764e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x825d, gbc.sp());
        EXPECT(0x7650, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 000B
        gbc.setState(0x7f61, 0xf76, 0x85f0, 0x9e90, 0x5c67, 0x3f27, 0x1, 0x0);
        gbc.writeMem(0x7f61, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xf76, gbc.sp());
        EXPECT(0x7f63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 000C
        gbc.setState(0xa6fa, 0x39c1, 0x7cd0, 0x86c8, 0x1e1f, 0x5faa, 0x1, 0x1);
        gbc.writeMem(0xa6fa, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x39c1, gbc.sp());
        EXPECT(0xa6fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6fa));
        EXPECT(0xdd, gbc.readMem(0xa6fb));
        // CB DD 000E
        gbc.setState(0xd646, 0x3a9f, 0x21c0, 0x9aeb, 0x376f, 0xd114, 0x1, 0x0);
        gbc.writeMem(0xd646, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x3a9f, gbc.sp());
        EXPECT(0xd648, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd646));
        EXPECT(0xdd, gbc.readMem(0xd647));
        // CB DD 000F
        gbc.setState(0x9c7b, 0xce0f, 0x8d10, 0x5bae, 0xf9e7, 0xc5f5, 0x1, 0x0);
        gbc.writeMem(0x9c7b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xce0f, gbc.sp());
        EXPECT(0x9c7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c7b));
        EXPECT(0xdd, gbc.readMem(0x9c7c));
        // CB DD 0010
        gbc.setState(0x232b, 0x3f78, 0x7470, 0xa794, 0xfd39, 0x8fb5, 0x0, 0x0);
        gbc.writeMem(0x232b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x3f78, gbc.sp());
        EXPECT(0x232d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0011
        gbc.setState(0x6155, 0x6e9f, 0xdd70, 0x5a4b, 0xeb42, 0xcc07, 0x1, 0x0);
        gbc.writeMem(0x6155, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x6e9f, gbc.sp());
        EXPECT(0x6157, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0012
        gbc.setState(0xe810, 0x66d6, 0x5100, 0xb7c3, 0xd64f, 0x91d2, 0x0, 0x0);
        gbc.writeMem(0xe810, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x66d6, gbc.sp());
        EXPECT(0xe812, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe810));
        EXPECT(0xdd, gbc.readMem(0xe811));
        // CB DD 0013
        gbc.setState(0x3541, 0xb283, 0x3000, 0x2542, 0xc809, 0x6340, 0x1, 0x1);
        gbc.writeMem(0x3541, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xb283, gbc.sp());
        EXPECT(0x3543, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0014
        gbc.setState(0x121, 0xaf87, 0x9900, 0x9f17, 0xbd5b, 0xb293, 0x1, 0x0);
        gbc.writeMem(0x121, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xaf87, gbc.sp());
        EXPECT(0x123, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0015
        gbc.setState(0xc898, 0x2717, 0x5760, 0xff7b, 0xa78f, 0xf1e, 0x0, 0x1);
        gbc.writeMem(0xc898, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x2717, gbc.sp());
        EXPECT(0xc89a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc898));
        EXPECT(0xdd, gbc.readMem(0xc899));
        // CB DD 0016
        gbc.setState(0xb5e8, 0x7909, 0xff40, 0xbfe6, 0x7378, 0x98c, 0x1, 0x0);
        gbc.writeMem(0xb5e8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x7909, gbc.sp());
        EXPECT(0xb5ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5e8));
        EXPECT(0xdd, gbc.readMem(0xb5e9));
        // CB DD 0017
        gbc.setState(0x8997, 0x89b, 0xe190, 0xcc96, 0x6142, 0xea60, 0x0, 0x0);
        gbc.writeMem(0x8997, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x89b, gbc.sp());
        EXPECT(0x8999, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8997));
        EXPECT(0xdd, gbc.readMem(0x8998));
        // CB DD 0018
        gbc.setState(0x4a4c, 0x62b1, 0x7540, 0xc4c7, 0xe3c, 0x6f68, 0x1, 0x1);
        gbc.writeMem(0x4a4c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x62b1, gbc.sp());
        EXPECT(0x4a4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0019
        gbc.setState(0x23cb, 0x22da, 0xfe60, 0x11c8, 0x29cc, 0xb19f, 0x0, 0x1);
        gbc.writeMem(0x23cb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x22da, gbc.sp());
        EXPECT(0x23cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 001A
        gbc.setState(0xe725, 0x382b, 0xb560, 0xef63, 0xf3d7, 0xcbc3, 0x0, 0x1);
        gbc.writeMem(0xe725, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x382b, gbc.sp());
        EXPECT(0xe727, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe725));
        EXPECT(0xdd, gbc.readMem(0xe726));
        // CB DD 001C
        gbc.setState(0x3ef4, 0x920e, 0xc400, 0x5f9a, 0x8ed3, 0x3103, 0x0, 0x0);
        gbc.writeMem(0x3ef4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x920e, gbc.sp());
        EXPECT(0x3ef6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 001E
        gbc.setState(0x51ea, 0xe7e7, 0x2fc0, 0x36d8, 0x39db, 0x1db4, 0x1, 0x1);
        gbc.writeMem(0x51ea, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xe7e7, gbc.sp());
        EXPECT(0x51ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 001F
        gbc.setState(0x1438, 0x2609, 0xc900, 0x57a8, 0x5b7c, 0x86fb, 0x0, 0x1);
        gbc.writeMem(0x1438, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x2609, gbc.sp());
        EXPECT(0x143a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0020
        gbc.setState(0x30c2, 0xd81, 0xa840, 0xbb97, 0xac94, 0x3735, 0x0, 0x0);
        gbc.writeMem(0x30c2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xd81, gbc.sp());
        EXPECT(0x30c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0021
        gbc.setState(0x6ebb, 0x3c5d, 0x63c0, 0x7958, 0xe2f7, 0x6db2, 0x1, 0x1);
        gbc.writeMem(0x6ebb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x3c5d, gbc.sp());
        EXPECT(0x6ebd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0022
        gbc.setState(0xcf9e, 0xd0e0, 0x3cb0, 0x3b28, 0xeab7, 0x74e, 0x1, 0x0);
        gbc.writeMem(0xcf9e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xd0e0, gbc.sp());
        EXPECT(0xcfa0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf9e));
        EXPECT(0xdd, gbc.readMem(0xcf9f));
        // CB DD 0023
        gbc.setState(0x6d6, 0x6811, 0xf3d0, 0xd398, 0x5261, 0x76d7, 0x1, 0x1);
        gbc.writeMem(0x6d6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x6811, gbc.sp());
        EXPECT(0x6d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0024
        gbc.setState(0xd853, 0xab9d, 0xcb80, 0x71e8, 0xfa67, 0x68f6, 0x0, 0x1);
        gbc.writeMem(0xd853, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xab9d, gbc.sp());
        EXPECT(0xd855, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd853));
        EXPECT(0xdd, gbc.readMem(0xd854));
        // CB DD 0025
        gbc.setState(0x455b, 0x3ed8, 0xbda0, 0x2f6, 0xb8c1, 0x2d9f, 0x1, 0x0);
        gbc.writeMem(0x455b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x3ed8, gbc.sp());
        EXPECT(0x455d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0026
        gbc.setState(0x9715, 0x8128, 0xbb0, 0x7bd, 0xc744, 0x21a7, 0x1, 0x1);
        gbc.writeMem(0x9715, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x8128, gbc.sp());
        EXPECT(0x9717, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9715));
        EXPECT(0xdd, gbc.readMem(0x9716));
        // CB DD 0027
        gbc.setState(0x3b73, 0xf0eb, 0xca90, 0x15ec, 0x7e2f, 0xc23c, 0x0, 0x1);
        gbc.writeMem(0x3b73, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xf0eb, gbc.sp());
        EXPECT(0x3b75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0029
        gbc.setState(0x7f32, 0x8043, 0xaba0, 0xc752, 0x5d8c, 0x4107, 0x1, 0x0);
        gbc.writeMem(0x7f32, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x8043, gbc.sp());
        EXPECT(0x7f34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 002A
        gbc.setState(0x279b, 0x451e, 0x55e0, 0xdaf9, 0x3bf5, 0x2eee, 0x1, 0x1);
        gbc.writeMem(0x279b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x451e, gbc.sp());
        EXPECT(0x279d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 002C
        gbc.setState(0x3463, 0x5c1f, 0xb160, 0xaea7, 0x61c5, 0x2369, 0x0, 0x0);
        gbc.writeMem(0x3463, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x5c1f, gbc.sp());
        EXPECT(0x3465, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 002D
        gbc.setState(0x8896, 0x270f, 0xa70, 0x81a5, 0x5ed2, 0xb5c7, 0x1, 0x1);
        gbc.writeMem(0x8896, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x270f, gbc.sp());
        EXPECT(0x8898, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8896));
        EXPECT(0xdd, gbc.readMem(0x8897));
        // CB DD 002E
        gbc.setState(0xc374, 0xa84e, 0x2020, 0x6e63, 0x122e, 0x1a79, 0x1, 0x0);
        gbc.writeMem(0xc374, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xa84e, gbc.sp());
        EXPECT(0xc376, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc374));
        EXPECT(0xdd, gbc.readMem(0xc375));
        // CB DD 002F
        gbc.setState(0x7f76, 0x2649, 0xb390, 0xf689, 0x3cdf, 0x2bf7, 0x1, 0x0);
        gbc.writeMem(0x7f76, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x2649, gbc.sp());
        EXPECT(0x7f78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0030
        gbc.setState(0x5991, 0xf7, 0xab30, 0x32f6, 0x6bc, 0x7301, 0x0, 0x0);
        gbc.writeMem(0x5991, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xf7, gbc.sp());
        EXPECT(0x5993, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0031
        gbc.setState(0x1029, 0xe208, 0x9e20, 0x4f3, 0x3b05, 0x931, 0x0, 0x0);
        gbc.writeMem(0x1029, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xe208, gbc.sp());
        EXPECT(0x102b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0032
        gbc.setState(0xb8f8, 0x88d3, 0xe260, 0x90f9, 0x8505, 0x512a, 0x0, 0x0);
        gbc.writeMem(0xb8f8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x88d3, gbc.sp());
        EXPECT(0xb8fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8f8));
        EXPECT(0xdd, gbc.readMem(0xb8f9));
        // CB DD 0034
        gbc.setState(0x16c0, 0xf6fb, 0xcca0, 0x801, 0x8887, 0x6e58, 0x1, 0x0);
        gbc.writeMem(0x16c0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xf6fb, gbc.sp());
        EXPECT(0x16c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0035
        gbc.setState(0xe472, 0x5d14, 0x1860, 0xce1f, 0x4d5, 0x99f3, 0x0, 0x1);
        gbc.writeMem(0xe472, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x5d14, gbc.sp());
        EXPECT(0xe474, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe472));
        EXPECT(0xdd, gbc.readMem(0xe473));
        // CB DD 0037
        gbc.setState(0xa606, 0xa015, 0xe560, 0x672b, 0xca7d, 0x63dc, 0x0, 0x0);
        gbc.writeMem(0xa606, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xa015, gbc.sp());
        EXPECT(0xa608, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa606));
        EXPECT(0xdd, gbc.readMem(0xa607));
        // CB DD 0038
        gbc.setState(0x6c0e, 0x14c6, 0x7a70, 0xe165, 0xdca, 0x9670, 0x0, 0x0);
        gbc.writeMem(0x6c0e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x14c6, gbc.sp());
        EXPECT(0x6c10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0039
        gbc.setState(0x5f9, 0x7ac0, 0x4970, 0x5ca0, 0x5e49, 0x92ef, 0x0, 0x0);
        gbc.writeMem(0x5f9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x7ac0, gbc.sp());
        EXPECT(0x5fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 003A
        gbc.setState(0x3d56, 0x8b6, 0x1170, 0x41b2, 0x73bc, 0x9499, 0x0, 0x0);
        gbc.writeMem(0x3d56, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x8b6, gbc.sp());
        EXPECT(0x3d58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 003B
        gbc.setState(0x69fc, 0xf6b7, 0xe5a0, 0x6bd6, 0xfdd3, 0x3060, 0x0, 0x0);
        gbc.writeMem(0x69fc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xf6b7, gbc.sp());
        EXPECT(0x69fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 003C
        gbc.setState(0x34cd, 0x2334, 0x8860, 0x6c42, 0x57ae, 0xf8ad, 0x0, 0x0);
        gbc.writeMem(0x34cd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x2334, gbc.sp());
        EXPECT(0x34cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 003D
        gbc.setState(0x279a, 0x1c48, 0x5470, 0x48ea, 0x629, 0xb464, 0x0, 0x1);
        gbc.writeMem(0x279a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x1c48, gbc.sp());
        EXPECT(0x279c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 003E
        gbc.setState(0x78e6, 0xdc1e, 0x1130, 0x531a, 0x274, 0xde4e, 0x0, 0x1);
        gbc.writeMem(0x78e6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xdc1e, gbc.sp());
        EXPECT(0x78e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 003F
        gbc.setState(0xd74, 0xedad, 0xff60, 0x91e5, 0xdf68, 0x5f4e, 0x0, 0x0);
        gbc.writeMem(0xd74, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xedad, gbc.sp());
        EXPECT(0xd76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0040
        gbc.setState(0x14b5, 0x8031, 0x6e10, 0xfc23, 0xc5c5, 0xc841, 0x1, 0x0);
        gbc.writeMem(0x14b5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x8031, gbc.sp());
        EXPECT(0x14b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0041
        gbc.setState(0x82d4, 0x9a63, 0x190, 0xeadc, 0x8528, 0xd66f, 0x0, 0x1);
        gbc.writeMem(0x82d4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x9a63, gbc.sp());
        EXPECT(0x82d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82d4));
        EXPECT(0xdd, gbc.readMem(0x82d5));
        // CB DD 0042
        gbc.setState(0xd4e1, 0x340d, 0x9770, 0xded5, 0x5271, 0x3a2a, 0x0, 0x1);
        gbc.writeMem(0xd4e1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x340d, gbc.sp());
        EXPECT(0xd4e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4e1));
        EXPECT(0xdd, gbc.readMem(0xd4e2));
        // CB DD 0043
        gbc.setState(0x3991, 0xa5c0, 0xec20, 0xa15, 0x6f06, 0xbd3a, 0x1, 0x0);
        gbc.writeMem(0x3991, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xa5c0, gbc.sp());
        EXPECT(0x3993, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0044
        gbc.setState(0x4b70, 0x7cae, 0x8f0, 0xeb85, 0xa967, 0x8a89, 0x1, 0x1);
        gbc.writeMem(0x4b70, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x7cae, gbc.sp());
        EXPECT(0x4b72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0045
        gbc.setState(0xb171, 0xc40c, 0x240, 0x554a, 0xd111, 0xc440, 0x1, 0x0);
        gbc.writeMem(0xb171, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xc40c, gbc.sp());
        EXPECT(0xb173, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb171));
        EXPECT(0xdd, gbc.readMem(0xb172));
        // CB DD 0046
        gbc.setState(0x8c77, 0x7c93, 0xe830, 0xa5a1, 0xa654, 0xe0e4, 0x1, 0x0);
        gbc.writeMem(0x8c77, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x7c93, gbc.sp());
        EXPECT(0x8c79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c77));
        EXPECT(0xdd, gbc.readMem(0x8c78));
        // CB DD 0047
        gbc.setState(0x4a6, 0x9001, 0x7db0, 0xdf9d, 0x1f56, 0xe22f, 0x0, 0x0);
        gbc.writeMem(0x4a6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x9001, gbc.sp());
        EXPECT(0x4a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0048
        gbc.setState(0x4593, 0xf2c6, 0x41c0, 0x508e, 0xd23f, 0x42ae, 0x0, 0x1);
        gbc.writeMem(0x4593, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xf2c6, gbc.sp());
        EXPECT(0x4595, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0049
        gbc.setState(0x61b8, 0xe0f5, 0x5b50, 0x6409, 0x9a92, 0xa549, 0x1, 0x1);
        gbc.writeMem(0x61b8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xe0f5, gbc.sp());
        EXPECT(0x61ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 004A
        gbc.setState(0x8cb, 0x5d6f, 0x6770, 0xcb09, 0x6da4, 0x2681, 0x0, 0x0);
        gbc.writeMem(0x8cb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x5d6f, gbc.sp());
        EXPECT(0x8cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 004B
        gbc.setState(0x3da7, 0x82d5, 0x5d70, 0x16ee, 0xaf38, 0x50fc, 0x0, 0x0);
        gbc.writeMem(0x3da7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x82d5, gbc.sp());
        EXPECT(0x3da9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 004C
        gbc.setState(0x5eb8, 0x12ab, 0x6030, 0x7650, 0xb374, 0xe622, 0x1, 0x0);
        gbc.writeMem(0x5eb8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x12ab, gbc.sp());
        EXPECT(0x5eba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 004D
        gbc.setState(0xb9a0, 0xa83, 0x2b30, 0x2ba9, 0x4e16, 0xa760, 0x1, 0x0);
        gbc.writeMem(0xb9a0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xa83, gbc.sp());
        EXPECT(0xb9a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9a0));
        EXPECT(0xdd, gbc.readMem(0xb9a1));
        // CB DD 004E
        gbc.setState(0x703f, 0x23c5, 0x46b0, 0x6625, 0x9fb3, 0xb86e, 0x1, 0x0);
        gbc.writeMem(0x703f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x23c5, gbc.sp());
        EXPECT(0x7041, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 004F
        gbc.setState(0xc682, 0x8953, 0x3bd0, 0x4b9a, 0xe700, 0xa343, 0x0, 0x1);
        gbc.writeMem(0xc682, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x8953, gbc.sp());
        EXPECT(0xc684, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc682));
        EXPECT(0xdd, gbc.readMem(0xc683));
        // CB DD 0050
        gbc.setState(0x696, 0x464e, 0x8f60, 0x4341, 0x33a4, 0x3c12, 0x0, 0x0);
        gbc.writeMem(0x696, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x464e, gbc.sp());
        EXPECT(0x698, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0051
        gbc.setState(0xa952, 0x8cd3, 0x8eb0, 0x3da4, 0x5b45, 0x7403, 0x0, 0x0);
        gbc.writeMem(0xa952, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x8cd3, gbc.sp());
        EXPECT(0xa954, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa952));
        EXPECT(0xdd, gbc.readMem(0xa953));
        // CB DD 0052
        gbc.setState(0x35b0, 0xcf5, 0xbfd0, 0x2fea, 0xe0d7, 0xee02, 0x1, 0x1);
        gbc.writeMem(0x35b0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xcf5, gbc.sp());
        EXPECT(0x35b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0053
        gbc.setState(0xac29, 0x6623, 0x3f40, 0x2492, 0x282f, 0x5c4c, 0x1, 0x1);
        gbc.writeMem(0xac29, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x6623, gbc.sp());
        EXPECT(0xac2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac29));
        EXPECT(0xdd, gbc.readMem(0xac2a));
        // CB DD 0054
        gbc.setState(0x6d9e, 0xc3f5, 0x8150, 0x82a4, 0xdc87, 0xa86e, 0x1, 0x0);
        gbc.writeMem(0x6d9e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xc3f5, gbc.sp());
        EXPECT(0x6da0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0055
        gbc.setState(0x311f, 0x9286, 0xb120, 0x80ac, 0xf1f4, 0x9a4c, 0x1, 0x1);
        gbc.writeMem(0x311f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x9286, gbc.sp());
        EXPECT(0x3121, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0056
        gbc.setState(0xc273, 0xe09, 0x90f0, 0xb80c, 0x3ace, 0x3d2d, 0x0, 0x0);
        gbc.writeMem(0xc273, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xe09, gbc.sp());
        EXPECT(0xc275, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc273));
        EXPECT(0xdd, gbc.readMem(0xc274));
        // CB DD 0057
        gbc.setState(0x7907, 0xdb3d, 0xee20, 0x1501, 0xf1d4, 0x63b1, 0x0, 0x1);
        gbc.writeMem(0x7907, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xdb3d, gbc.sp());
        EXPECT(0x7909, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0058
        gbc.setState(0xc6e9, 0x1a58, 0x4fd0, 0x1ea7, 0x8b2d, 0x4074, 0x1, 0x0);
        gbc.writeMem(0xc6e9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x1a58, gbc.sp());
        EXPECT(0xc6eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6e9));
        EXPECT(0xdd, gbc.readMem(0xc6ea));
        // CB DD 0059
        gbc.setState(0x8251, 0x349f, 0x4d60, 0x592c, 0x733c, 0x44c6, 0x0, 0x1);
        gbc.writeMem(0x8251, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x349f, gbc.sp());
        EXPECT(0x8253, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8251));
        EXPECT(0xdd, gbc.readMem(0x8252));
        // CB DD 005A
        gbc.setState(0x4293, 0x6650, 0x3c70, 0x1738, 0x839e, 0x26fb, 0x0, 0x1);
        gbc.writeMem(0x4293, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x6650, gbc.sp());
        EXPECT(0x4295, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 005B
        gbc.setState(0x837a, 0xb0df, 0x7260, 0x8c76, 0x8dc0, 0xa24b, 0x0, 0x1);
        gbc.writeMem(0x837a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xb0df, gbc.sp());
        EXPECT(0x837c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x837a));
        EXPECT(0xdd, gbc.readMem(0x837b));
        // CB DD 005C
        gbc.setState(0xd717, 0xec3f, 0x4df0, 0xdb76, 0xbcf3, 0xc4f3, 0x0, 0x0);
        gbc.writeMem(0xd717, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xec3f, gbc.sp());
        EXPECT(0xd719, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd717));
        EXPECT(0xdd, gbc.readMem(0xd718));
        // CB DD 005F
        gbc.setState(0x7d6b, 0xcbdb, 0x5c90, 0x9b23, 0x12ec, 0x1527, 0x0, 0x0);
        gbc.writeMem(0x7d6b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xcbdb, gbc.sp());
        EXPECT(0x7d6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0060
        gbc.setState(0x71a8, 0xc452, 0xc9f0, 0xb0ac, 0xe0b3, 0x95e3, 0x1, 0x0);
        gbc.writeMem(0x71a8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xc452, gbc.sp());
        EXPECT(0x71aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0061
        gbc.setState(0x69dc, 0x4aae, 0x6e10, 0xd8e9, 0x2eba, 0x73ab, 0x1, 0x1);
        gbc.writeMem(0x69dc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x4aae, gbc.sp());
        EXPECT(0x69de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0062
        gbc.setState(0xc4e0, 0xbd3, 0x7110, 0x680e, 0xf913, 0x5869, 0x1, 0x1);
        gbc.writeMem(0xc4e0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xbd3, gbc.sp());
        EXPECT(0xc4e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4e0));
        EXPECT(0xdd, gbc.readMem(0xc4e1));
        // CB DD 0063
        gbc.setState(0x7f1e, 0xe7ad, 0xd880, 0xd14c, 0xe998, 0x6766, 0x0, 0x1);
        gbc.writeMem(0x7f1e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xe7ad, gbc.sp());
        EXPECT(0x7f20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0064
        gbc.setState(0x2a17, 0xbb5b, 0x7ec0, 0x4e12, 0x66d9, 0x9868, 0x1, 0x0);
        gbc.writeMem(0x2a17, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xbb5b, gbc.sp());
        EXPECT(0x2a19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0065
        gbc.setState(0xb1cd, 0x6fd8, 0x7270, 0x4ad8, 0x24ca, 0xe7b9, 0x0, 0x0);
        gbc.writeMem(0xb1cd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x6fd8, gbc.sp());
        EXPECT(0xb1cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1cd));
        EXPECT(0xdd, gbc.readMem(0xb1ce));
        // CB DD 0066
        gbc.setState(0xde9b, 0xb55a, 0x9060, 0x21a6, 0x293, 0x1ed8, 0x0, 0x0);
        gbc.writeMem(0xde9b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xb55a, gbc.sp());
        EXPECT(0xde9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde9b));
        EXPECT(0xdd, gbc.readMem(0xde9c));
        // CB DD 0067
        gbc.setState(0xeec0, 0x136e, 0x7390, 0x5e1e, 0x99, 0x72d3, 0x0, 0x0);
        gbc.writeMem(0xeec0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x136e, gbc.sp());
        EXPECT(0xeec2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeec0));
        EXPECT(0xdd, gbc.readMem(0xeec1));
        // CB DD 0068
        gbc.setState(0xa86b, 0x768c, 0xc8c0, 0x8d8b, 0x4c96, 0x219f, 0x1, 0x0);
        gbc.writeMem(0xa86b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x768c, gbc.sp());
        EXPECT(0xa86d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa86b));
        EXPECT(0xdd, gbc.readMem(0xa86c));
        // CB DD 0069
        gbc.setState(0x640b, 0x6362, 0x1fd0, 0x5c49, 0xf958, 0x4d79, 0x1, 0x1);
        gbc.writeMem(0x640b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x6362, gbc.sp());
        EXPECT(0x640d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 006A
        gbc.setState(0xe843, 0x61b9, 0xd10, 0xf1b1, 0xbec2, 0x9bec, 0x0, 0x0);
        gbc.writeMem(0xe843, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x61b9, gbc.sp());
        EXPECT(0xe845, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe843));
        EXPECT(0xdd, gbc.readMem(0xe844));
        // CB DD 006B
        gbc.setState(0xe7ad, 0x1be, 0xd200, 0x2c38, 0x56cb, 0xdb02, 0x0, 0x0);
        gbc.writeMem(0xe7ad, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x1be, gbc.sp());
        EXPECT(0xe7af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7ad));
        EXPECT(0xdd, gbc.readMem(0xe7ae));
        // CB DD 006C
        gbc.setState(0xe05b, 0xa820, 0x24f0, 0xcf90, 0xe4ad, 0x7d08, 0x0, 0x0);
        gbc.writeMem(0xe05b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xa820, gbc.sp());
        EXPECT(0xe05d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe05b));
        EXPECT(0xdd, gbc.readMem(0xe05c));
        // CB DD 006D
        gbc.setState(0xf50, 0x6da0, 0xf0, 0xe28f, 0x3766, 0x6e7f, 0x1, 0x0);
        gbc.writeMem(0xf50, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x6da0, gbc.sp());
        EXPECT(0xf52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 006E
        gbc.setState(0x7484, 0x41d0, 0xe940, 0x4829, 0xcbd, 0xe3ef, 0x1, 0x0);
        gbc.writeMem(0x7484, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x41d0, gbc.sp());
        EXPECT(0x7486, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 006F
        gbc.setState(0x94f9, 0x4c4b, 0x4dd0, 0x117, 0x854a, 0xdfff, 0x1, 0x0);
        gbc.writeMem(0x94f9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x4c4b, gbc.sp());
        EXPECT(0x94fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94f9));
        EXPECT(0xdd, gbc.readMem(0x94fa));
        // CB DD 0070
        gbc.setState(0x897f, 0xa272, 0x6400, 0x53bd, 0x371f, 0x2584, 0x0, 0x1);
        gbc.writeMem(0x897f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xa272, gbc.sp());
        EXPECT(0x8981, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x897f));
        EXPECT(0xdd, gbc.readMem(0x8980));
        // CB DD 0071
        gbc.setState(0xdc3e, 0x16f6, 0xea00, 0x2f5c, 0x88ee, 0x9f70, 0x1, 0x1);
        gbc.writeMem(0xdc3e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x16f6, gbc.sp());
        EXPECT(0xdc40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc3e));
        EXPECT(0xdd, gbc.readMem(0xdc3f));
        // CB DD 0072
        gbc.setState(0x1eaa, 0xc8dd, 0x7770, 0xd6ba, 0xe218, 0xd173, 0x1, 0x1);
        gbc.writeMem(0x1eaa, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xc8dd, gbc.sp());
        EXPECT(0x1eac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0073
        gbc.setState(0x6f00, 0x6958, 0x4e40, 0x20c5, 0x30e6, 0x6ac, 0x1, 0x0);
        gbc.writeMem(0x6f00, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x6958, gbc.sp());
        EXPECT(0x6f02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0074
        gbc.setState(0xa550, 0x152e, 0x75a0, 0xdb11, 0xf07f, 0xf565, 0x1, 0x1);
        gbc.writeMem(0xa550, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x152e, gbc.sp());
        EXPECT(0xa552, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa550));
        EXPECT(0xdd, gbc.readMem(0xa551));
        // CB DD 0075
        gbc.setState(0x8d8, 0x3707, 0x2860, 0x21dc, 0x88d, 0x56d0, 0x1, 0x0);
        gbc.writeMem(0x8d8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x3707, gbc.sp());
        EXPECT(0x8da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0076
        gbc.setState(0xa57e, 0xa652, 0x4a60, 0xd4be, 0x1c06, 0xce0b, 0x0, 0x1);
        gbc.writeMem(0xa57e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xa652, gbc.sp());
        EXPECT(0xa580, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa57e));
        EXPECT(0xdd, gbc.readMem(0xa57f));
        // CB DD 0078
        gbc.setState(0x2604, 0x49ce, 0xf790, 0x32d0, 0x57e, 0xc221, 0x1, 0x0);
        gbc.writeMem(0x2604, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x49ce, gbc.sp());
        EXPECT(0x2606, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0079
        gbc.setState(0xeaaf, 0x74a4, 0xa030, 0xcb72, 0xf343, 0x5bc7, 0x1, 0x0);
        gbc.writeMem(0xeaaf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x74a4, gbc.sp());
        EXPECT(0xeab1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeaaf));
        EXPECT(0xdd, gbc.readMem(0xeab0));
        // CB DD 007A
        gbc.setState(0x88ae, 0xb3d6, 0x9b0, 0x84fd, 0x9bd1, 0x6ef, 0x1, 0x0);
        gbc.writeMem(0x88ae, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xb3d6, gbc.sp());
        EXPECT(0x88b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88ae));
        EXPECT(0xdd, gbc.readMem(0x88af));
        // CB DD 007B
        gbc.setState(0xba6d, 0x986d, 0xcfe0, 0x8a60, 0x20, 0x8ff7, 0x0, 0x0);
        gbc.writeMem(0xba6d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x986d, gbc.sp());
        EXPECT(0xba6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba6d));
        EXPECT(0xdd, gbc.readMem(0xba6e));
        // CB DD 007C
        gbc.setState(0x50, 0x37a9, 0x1460, 0x386a, 0x79e8, 0x3b2b, 0x1, 0x1);
        gbc.writeMem(0x50, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x37a9, gbc.sp());
        EXPECT(0x52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 007D
        gbc.setState(0x1263, 0x99f9, 0x590, 0xefea, 0x3a9d, 0x1757, 0x1, 0x1);
        gbc.writeMem(0x1263, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x99f9, gbc.sp());
        EXPECT(0x1265, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 007E
        gbc.setState(0x5f00, 0x65d8, 0xb30, 0xe08c, 0x7caf, 0xdc78, 0x1, 0x0);
        gbc.writeMem(0x5f00, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x65d8, gbc.sp());
        EXPECT(0x5f02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 007F
        gbc.setState(0xdece, 0xa8f9, 0xdec0, 0x8a92, 0xc65e, 0xebfe, 0x1, 0x1);
        gbc.writeMem(0xdece, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xa8f9, gbc.sp());
        EXPECT(0xded0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdece));
        EXPECT(0xdd, gbc.readMem(0xdecf));
        // CB DD 0080
        gbc.setState(0xb62b, 0xfb31, 0xd6a0, 0x6731, 0x44f4, 0x94d0, 0x0, 0x0);
        gbc.writeMem(0xb62b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xfb31, gbc.sp());
        EXPECT(0xb62d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb62b));
        EXPECT(0xdd, gbc.readMem(0xb62c));
        // CB DD 0081
        gbc.setState(0x7d4, 0xa0cd, 0x6880, 0x7c40, 0x9b22, 0x2728, 0x1, 0x0);
        gbc.writeMem(0x7d4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xa0cd, gbc.sp());
        EXPECT(0x7d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0082
        gbc.setState(0xca17, 0x102e, 0x35a0, 0xcb55, 0xa5aa, 0xbc7e, 0x1, 0x1);
        gbc.writeMem(0xca17, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x102e, gbc.sp());
        EXPECT(0xca19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca17));
        EXPECT(0xdd, gbc.readMem(0xca18));
        // CB DD 0083
        gbc.setState(0x59f8, 0xf675, 0x9e60, 0x737a, 0xed42, 0xfff0, 0x1, 0x1);
        gbc.writeMem(0x59f8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xf675, gbc.sp());
        EXPECT(0x59fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0084
        gbc.setState(0x20d1, 0x1422, 0x9570, 0x20, 0x4cc, 0x94bf, 0x1, 0x0);
        gbc.writeMem(0x20d1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x1422, gbc.sp());
        EXPECT(0x20d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0085
        gbc.setState(0x335, 0x2529, 0x2c90, 0x62cb, 0x9f52, 0x970e, 0x1, 0x0);
        gbc.writeMem(0x335, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x2529, gbc.sp());
        EXPECT(0x337, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0086
        gbc.setState(0x703a, 0xc098, 0x3a10, 0x8778, 0xc84, 0xf2dc, 0x1, 0x0);
        gbc.writeMem(0x703a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xc098, gbc.sp());
        EXPECT(0x703c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0087
        gbc.setState(0x9e4e, 0xbdc7, 0xb90, 0xefce, 0x67b2, 0xe966, 0x0, 0x0);
        gbc.writeMem(0x9e4e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xbdc7, gbc.sp());
        EXPECT(0x9e50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e4e));
        EXPECT(0xdd, gbc.readMem(0x9e4f));
        // CB DD 0088
        gbc.setState(0xdc90, 0xa8a5, 0x6270, 0x7ea, 0x5fb2, 0xfab9, 0x0, 0x0);
        gbc.writeMem(0xdc90, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xa8a5, gbc.sp());
        EXPECT(0xdc92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc90));
        EXPECT(0xdd, gbc.readMem(0xdc91));
        // CB DD 0089
        gbc.setState(0x193c, 0xfda1, 0xbe00, 0x2653, 0x6e72, 0x5532, 0x0, 0x0);
        gbc.writeMem(0x193c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xfda1, gbc.sp());
        EXPECT(0x193e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 008A
        gbc.setState(0x10a5, 0x308d, 0xb980, 0x60ae, 0x2ad9, 0x7f30, 0x0, 0x1);
        gbc.writeMem(0x10a5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x308d, gbc.sp());
        EXPECT(0x10a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 008B
        gbc.setState(0xb9, 0x28b5, 0x5870, 0x764e, 0xb841, 0x1151, 0x0, 0x1);
        gbc.writeMem(0xb9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x28b5, gbc.sp());
        EXPECT(0xbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 008C
        gbc.setState(0xd6c3, 0x3905, 0xc340, 0x176a, 0x5146, 0x6b77, 0x0, 0x1);
        gbc.writeMem(0xd6c3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x3905, gbc.sp());
        EXPECT(0xd6c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6c3));
        EXPECT(0xdd, gbc.readMem(0xd6c4));
        // CB DD 008D
        gbc.setState(0xd3d4, 0x6140, 0x9190, 0x109e, 0x13df, 0xecb4, 0x0, 0x1);
        gbc.writeMem(0xd3d4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x6140, gbc.sp());
        EXPECT(0xd3d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3d4));
        EXPECT(0xdd, gbc.readMem(0xd3d5));
        // CB DD 008E
        gbc.setState(0x6b5b, 0x4e6b, 0x59d0, 0x2361, 0x667e, 0x9673, 0x1, 0x1);
        gbc.writeMem(0x6b5b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x4e6b, gbc.sp());
        EXPECT(0x6b5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 008F
        gbc.setState(0x67ee, 0x919c, 0x5ec0, 0x83c8, 0xdc14, 0xf97e, 0x1, 0x0);
        gbc.writeMem(0x67ee, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x919c, gbc.sp());
        EXPECT(0x67f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0090
        gbc.setState(0xd16f, 0xb968, 0xe300, 0xe956, 0x5780, 0x4ceb, 0x1, 0x1);
        gbc.writeMem(0xd16f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xb968, gbc.sp());
        EXPECT(0xd171, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd16f));
        EXPECT(0xdd, gbc.readMem(0xd170));
        // CB DD 0091
        gbc.setState(0x842, 0x72e6, 0xeb00, 0xa3d6, 0xc122, 0x113b, 0x1, 0x1);
        gbc.writeMem(0x842, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x72e6, gbc.sp());
        EXPECT(0x844, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0092
        gbc.setState(0x1982, 0x412f, 0xd030, 0x72d7, 0xe256, 0x3c0f, 0x0, 0x1);
        gbc.writeMem(0x1982, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x412f, gbc.sp());
        EXPECT(0x1984, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0093
        gbc.setState(0xb801, 0x52fa, 0x8230, 0x7419, 0x2014, 0xbbf7, 0x0, 0x0);
        gbc.writeMem(0xb801, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x52fa, gbc.sp());
        EXPECT(0xb803, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb801));
        EXPECT(0xdd, gbc.readMem(0xb802));
        // CB DD 0094
        gbc.setState(0xc9b7, 0x567b, 0x8470, 0xff62, 0xe7ca, 0xbb28, 0x0, 0x0);
        gbc.writeMem(0xc9b7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x567b, gbc.sp());
        EXPECT(0xc9b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9b7));
        EXPECT(0xdd, gbc.readMem(0xc9b8));
        // CB DD 0095
        gbc.setState(0xe13f, 0x4836, 0x9420, 0x1d76, 0x4905, 0x6077, 0x0, 0x1);
        gbc.writeMem(0xe13f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x4836, gbc.sp());
        EXPECT(0xe141, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe13f));
        EXPECT(0xdd, gbc.readMem(0xe140));
        // CB DD 0096
        gbc.setState(0xbcef, 0xb893, 0xaa80, 0x4895, 0xd715, 0x13b4, 0x0, 0x1);
        gbc.writeMem(0xbcef, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xb893, gbc.sp());
        EXPECT(0xbcf1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcef));
        EXPECT(0xdd, gbc.readMem(0xbcf0));
        // CB DD 0097
        gbc.setState(0x557a, 0xb00c, 0x92e0, 0x35a0, 0x6cb1, 0x5fb6, 0x1, 0x1);
        gbc.writeMem(0x557a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xb00c, gbc.sp());
        EXPECT(0x557c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0098
        gbc.setState(0x243, 0x9cf0, 0xa5f0, 0x214e, 0xdb7f, 0x2ddf, 0x0, 0x1);
        gbc.writeMem(0x243, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x9cf0, gbc.sp());
        EXPECT(0x245, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0099
        gbc.setState(0x66f6, 0xe5cf, 0x6450, 0xa7b0, 0xf7a6, 0x580c, 0x0, 0x1);
        gbc.writeMem(0x66f6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xe5cf, gbc.sp());
        EXPECT(0x66f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 009A
        gbc.setState(0x435c, 0x1a42, 0x1660, 0xc379, 0x7097, 0x4222, 0x0, 0x1);
        gbc.writeMem(0x435c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x1a42, gbc.sp());
        EXPECT(0x435e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 009B
        gbc.setState(0x3e1d, 0x8550, 0xd630, 0xdf99, 0x102a, 0xafea, 0x1, 0x0);
        gbc.writeMem(0x3e1d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x8550, gbc.sp());
        EXPECT(0x3e1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 009C
        gbc.setState(0x73cb, 0x4be5, 0x5700, 0x450c, 0xf4e, 0x1d07, 0x0, 0x0);
        gbc.writeMem(0x73cb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x4be5, gbc.sp());
        EXPECT(0x73cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 009D
        gbc.setState(0xe56f, 0xc80d, 0x85b0, 0xb622, 0x8c65, 0x39f, 0x1, 0x1);
        gbc.writeMem(0xe56f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xc80d, gbc.sp());
        EXPECT(0xe571, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe56f));
        EXPECT(0xdd, gbc.readMem(0xe570));
        // CB DD 009E
        gbc.setState(0xb7de, 0xdc5, 0x2cb0, 0x8943, 0xc8c, 0x4473, 0x0, 0x0);
        gbc.writeMem(0xb7de, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xdc5, gbc.sp());
        EXPECT(0xb7e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7de));
        EXPECT(0xdd, gbc.readMem(0xb7df));
        // CB DD 009F
        gbc.setState(0x29a9, 0x4182, 0x2130, 0x7015, 0x118, 0xa869, 0x1, 0x1);
        gbc.writeMem(0x29a9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x4182, gbc.sp());
        EXPECT(0x29ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00A0
        gbc.setState(0xb056, 0xa14f, 0xe0f0, 0x2388, 0xb53b, 0xb8c7, 0x1, 0x1);
        gbc.writeMem(0xb056, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xa14f, gbc.sp());
        EXPECT(0xb058, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb056));
        EXPECT(0xdd, gbc.readMem(0xb057));
        // CB DD 00A1
        gbc.setState(0xc61c, 0x5dfd, 0xfd00, 0xebde, 0xfb72, 0x9b4, 0x1, 0x1);
        gbc.writeMem(0xc61c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x5dfd, gbc.sp());
        EXPECT(0xc61e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc61c));
        EXPECT(0xdd, gbc.readMem(0xc61d));
        // CB DD 00A2
        gbc.setState(0x363d, 0xf89, 0x3aa0, 0xb228, 0x8a2e, 0xa698, 0x1, 0x0);
        gbc.writeMem(0x363d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xf89, gbc.sp());
        EXPECT(0x363f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00A3
        gbc.setState(0xbcb7, 0x4afe, 0x2160, 0xbeb, 0x7b14, 0xdd12, 0x0, 0x0);
        gbc.writeMem(0xbcb7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x4afe, gbc.sp());
        EXPECT(0xbcb9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcb7));
        EXPECT(0xdd, gbc.readMem(0xbcb8));
        // CB DD 00A4
        gbc.setState(0xafe, 0xef89, 0xb870, 0x1c84, 0x8fda, 0xe81b, 0x1, 0x1);
        gbc.writeMem(0xafe, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xef89, gbc.sp());
        EXPECT(0xb00, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00A5
        gbc.setState(0x4eae, 0x71f4, 0x1820, 0x7bf3, 0x3e50, 0xb38f, 0x1, 0x0);
        gbc.writeMem(0x4eae, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x71f4, gbc.sp());
        EXPECT(0x4eb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00A6
        gbc.setState(0x2244, 0xc6ec, 0xd650, 0xad19, 0x4b42, 0x461c, 0x1, 0x0);
        gbc.writeMem(0x2244, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xc6ec, gbc.sp());
        EXPECT(0x2246, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00A7
        gbc.setState(0x75c8, 0x8d6b, 0xf620, 0xdd9c, 0x9530, 0x289c, 0x0, 0x0);
        gbc.writeMem(0x75c8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x8d6b, gbc.sp());
        EXPECT(0x75ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00A8
        gbc.setState(0x8fc0, 0xf5db, 0x5200, 0x18cc, 0xf179, 0x8b36, 0x1, 0x0);
        gbc.writeMem(0x8fc0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xf5db, gbc.sp());
        EXPECT(0x8fc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fc0));
        EXPECT(0xdd, gbc.readMem(0x8fc1));
        // CB DD 00A9
        gbc.setState(0x99f3, 0x1243, 0x5f80, 0x14ea, 0xb29b, 0x1aad, 0x1, 0x1);
        gbc.writeMem(0x99f3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x1243, gbc.sp());
        EXPECT(0x99f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99f3));
        EXPECT(0xdd, gbc.readMem(0x99f4));
        // CB DD 00AA
        gbc.setState(0xe5fa, 0x3f68, 0xc120, 0xd9fa, 0xf226, 0xb689, 0x0, 0x1);
        gbc.writeMem(0xe5fa, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x3f68, gbc.sp());
        EXPECT(0xe5fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5fa));
        EXPECT(0xdd, gbc.readMem(0xe5fb));
        // CB DD 00AB
        gbc.setState(0x3d84, 0x555a, 0x7b40, 0x1237, 0xcd80, 0x3c48, 0x1, 0x0);
        gbc.writeMem(0x3d84, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x555a, gbc.sp());
        EXPECT(0x3d86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00AD
        gbc.setState(0xad61, 0xb51a, 0xe10, 0x6df2, 0x80c3, 0xcf99, 0x1, 0x1);
        gbc.writeMem(0xad61, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xb51a, gbc.sp());
        EXPECT(0xad63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad61));
        EXPECT(0xdd, gbc.readMem(0xad62));
        // CB DD 00AE
        gbc.setState(0xde9d, 0x7100, 0xb6b0, 0xbab4, 0x5d33, 0xa854, 0x0, 0x0);
        gbc.writeMem(0xde9d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x7100, gbc.sp());
        EXPECT(0xde9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde9d));
        EXPECT(0xdd, gbc.readMem(0xde9e));
        // CB DD 00AF
        gbc.setState(0x838d, 0x3fb0, 0x250, 0xe93e, 0x991f, 0x8a7, 0x0, 0x0);
        gbc.writeMem(0x838d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x3fb0, gbc.sp());
        EXPECT(0x838f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x838d));
        EXPECT(0xdd, gbc.readMem(0x838e));
        // CB DD 00B0
        gbc.setState(0x4622, 0xead5, 0xa5b0, 0x3f38, 0x57b7, 0x754b, 0x1, 0x1);
        gbc.writeMem(0x4622, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xead5, gbc.sp());
        EXPECT(0x4624, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00B1
        gbc.setState(0xe731, 0x1dc0, 0x2360, 0x4d79, 0x18a7, 0x442d, 0x1, 0x0);
        gbc.writeMem(0xe731, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x1dc0, gbc.sp());
        EXPECT(0xe733, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe731));
        EXPECT(0xdd, gbc.readMem(0xe732));
        // CB DD 00B2
        gbc.setState(0x64a0, 0x8387, 0x81a0, 0x4957, 0x87d5, 0x74f2, 0x1, 0x1);
        gbc.writeMem(0x64a0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x8387, gbc.sp());
        EXPECT(0x64a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00B3
        gbc.setState(0x7677, 0x2012, 0x2ee0, 0x36c1, 0xd518, 0x6b12, 0x1, 0x1);
        gbc.writeMem(0x7677, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x2012, gbc.sp());
        EXPECT(0x7679, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00B4
        gbc.setState(0x50a3, 0x7063, 0x7e00, 0x7475, 0xa29d, 0x9399, 0x1, 0x0);
        gbc.writeMem(0x50a3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x7063, gbc.sp());
        EXPECT(0x50a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00B5
        gbc.setState(0x5f95, 0x76e2, 0x1c30, 0xcb40, 0x9f0e, 0xe7a9, 0x1, 0x0);
        gbc.writeMem(0x5f95, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x76e2, gbc.sp());
        EXPECT(0x5f97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00B6
        gbc.setState(0x3328, 0x5454, 0x88f0, 0x7044, 0x68f9, 0x9301, 0x0, 0x1);
        gbc.writeMem(0x3328, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x5454, gbc.sp());
        EXPECT(0x332a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00B7
        gbc.setState(0xe713, 0xa94c, 0x3f10, 0xddf5, 0xc3fc, 0x8a7f, 0x0, 0x1);
        gbc.writeMem(0xe713, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xa94c, gbc.sp());
        EXPECT(0xe715, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe713));
        EXPECT(0xdd, gbc.readMem(0xe714));
        // CB DD 00B8
        gbc.setState(0x7609, 0x5d24, 0xa30, 0xf118, 0x9e24, 0xa86b, 0x0, 0x0);
        gbc.writeMem(0x7609, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x5d24, gbc.sp());
        EXPECT(0x760b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00B9
        gbc.setState(0xc7d4, 0x7793, 0x3190, 0x5e28, 0x348b, 0xb3e9, 0x1, 0x1);
        gbc.writeMem(0xc7d4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x7793, gbc.sp());
        EXPECT(0xc7d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7d4));
        EXPECT(0xdd, gbc.readMem(0xc7d5));
        // CB DD 00BA
        gbc.setState(0x464d, 0x57bd, 0xfd80, 0xad7, 0xb0af, 0x9bb5, 0x0, 0x1);
        gbc.writeMem(0x464d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x57bd, gbc.sp());
        EXPECT(0x464f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00BB
        gbc.setState(0xb8e4, 0x4b4, 0x7280, 0x51ec, 0x73b3, 0x3ade, 0x0, 0x1);
        gbc.writeMem(0xb8e4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x4b4, gbc.sp());
        EXPECT(0xb8e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8e4));
        EXPECT(0xdd, gbc.readMem(0xb8e5));
        // CB DD 00BC
        gbc.setState(0x6291, 0x79ab, 0xca70, 0xec1a, 0xde91, 0x1de4, 0x0, 0x0);
        gbc.writeMem(0x6291, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x79ab, gbc.sp());
        EXPECT(0x6293, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00BD
        gbc.setState(0xe427, 0x2c81, 0x8320, 0xf0fd, 0x5e2b, 0xd64c, 0x1, 0x0);
        gbc.writeMem(0xe427, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x2c81, gbc.sp());
        EXPECT(0xe429, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe427));
        EXPECT(0xdd, gbc.readMem(0xe428));
        // CB DD 00BE
        gbc.setState(0x68ef, 0x1f4a, 0xf240, 0x7bfd, 0x4296, 0x2d4a, 0x1, 0x1);
        gbc.writeMem(0x68ef, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x1f4a, gbc.sp());
        EXPECT(0x68f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00BF
        gbc.setState(0x19db, 0x5b9e, 0xa120, 0xd319, 0x7916, 0xc395, 0x0, 0x1);
        gbc.writeMem(0x19db, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x5b9e, gbc.sp());
        EXPECT(0x19dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00C0
        gbc.setState(0x971f, 0x6d77, 0x3e40, 0xff2e, 0x8383, 0x825a, 0x0, 0x0);
        gbc.writeMem(0x971f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x6d77, gbc.sp());
        EXPECT(0x9721, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x971f));
        EXPECT(0xdd, gbc.readMem(0x9720));
        // CB DD 00C1
        gbc.setState(0x1075, 0x6b2d, 0xf720, 0xaa31, 0x89bd, 0x69b6, 0x0, 0x0);
        gbc.writeMem(0x1075, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x6b2d, gbc.sp());
        EXPECT(0x1077, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00C2
        gbc.setState(0x1434, 0x8fc8, 0x2050, 0x64bf, 0x7b75, 0x63a9, 0x0, 0x1);
        gbc.writeMem(0x1434, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x8fc8, gbc.sp());
        EXPECT(0x1436, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00C3
        gbc.setState(0x6a6d, 0xceed, 0x9f0, 0x96b6, 0x4f47, 0xecbc, 0x0, 0x0);
        gbc.writeMem(0x6a6d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xceed, gbc.sp());
        EXPECT(0x6a6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00C4
        gbc.setState(0x6da5, 0xe507, 0xe6d0, 0x6947, 0xad3d, 0x488b, 0x1, 0x1);
        gbc.writeMem(0x6da5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xe507, gbc.sp());
        EXPECT(0x6da7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00C5
        gbc.setState(0xa73d, 0x96d8, 0xe850, 0xbe47, 0xbc02, 0x3a02, 0x0, 0x0);
        gbc.writeMem(0xa73d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x96d8, gbc.sp());
        EXPECT(0xa73f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa73d));
        EXPECT(0xdd, gbc.readMem(0xa73e));
        // CB DD 00C6
        gbc.setState(0x5fb1, 0x6e6c, 0x9dd0, 0x71d2, 0xcf65, 0x64bb, 0x0, 0x0);
        gbc.writeMem(0x5fb1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x6e6c, gbc.sp());
        EXPECT(0x5fb3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00C7
        gbc.setState(0xb945, 0xcac2, 0x8e00, 0xbf39, 0xd100, 0xf83b, 0x0, 0x1);
        gbc.writeMem(0xb945, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xcac2, gbc.sp());
        EXPECT(0xb947, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb945));
        EXPECT(0xdd, gbc.readMem(0xb946));
        // CB DD 00C8
        gbc.setState(0x3a54, 0xa64e, 0x6530, 0xc92, 0xfc26, 0x4dab, 0x1, 0x0);
        gbc.writeMem(0x3a54, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xa64e, gbc.sp());
        EXPECT(0x3a56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00C9
        gbc.setState(0x53b1, 0x5299, 0x1610, 0xdab8, 0x9685, 0xeda5, 0x0, 0x0);
        gbc.writeMem(0x53b1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x5299, gbc.sp());
        EXPECT(0x53b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00CA
        gbc.setState(0x440e, 0x9028, 0x6a40, 0xfcf8, 0x97b0, 0x9138, 0x0, 0x1);
        gbc.writeMem(0x440e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x9028, gbc.sp());
        EXPECT(0x4410, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00CB
        gbc.setState(0xeea8, 0xfffe, 0x6550, 0xbc3e, 0x22, 0xa92b, 0x0, 0x0);
        gbc.writeMem(0xeea8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xfffe, gbc.sp());
        EXPECT(0xeeaa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeea8));
        EXPECT(0xdd, gbc.readMem(0xeea9));
        // CB DD 00CC
        gbc.setState(0x9bde, 0x5d93, 0x4790, 0xa449, 0xb01, 0x40e9, 0x1, 0x1);
        gbc.writeMem(0x9bde, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x5d93, gbc.sp());
        EXPECT(0x9be0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bde));
        EXPECT(0xdd, gbc.readMem(0x9bdf));
        // CB DD 00CD
        gbc.setState(0x2ea1, 0x9cc2, 0x7fd0, 0x2a34, 0xc84e, 0xd00c, 0x0, 0x1);
        gbc.writeMem(0x2ea1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x9cc2, gbc.sp());
        EXPECT(0x2ea3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00CE
        gbc.setState(0xb016, 0xfe06, 0x4380, 0x92d6, 0xae82, 0x6c03, 0x0, 0x1);
        gbc.writeMem(0xb016, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xfe06, gbc.sp());
        EXPECT(0xb018, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb016));
        EXPECT(0xdd, gbc.readMem(0xb017));
        // CB DD 00CF
        gbc.setState(0xb6a1, 0xfc8f, 0x3c10, 0xa936, 0x4b, 0xa026, 0x0, 0x1);
        gbc.writeMem(0xb6a1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xfc8f, gbc.sp());
        EXPECT(0xb6a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6a1));
        EXPECT(0xdd, gbc.readMem(0xb6a2));
        // CB DD 00D0
        gbc.setState(0xbdca, 0xd536, 0xbdd0, 0xab9d, 0xdce6, 0xef64, 0x0, 0x1);
        gbc.writeMem(0xbdca, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xd536, gbc.sp());
        EXPECT(0xbdcc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdca));
        EXPECT(0xdd, gbc.readMem(0xbdcb));
        // CB DD 00D1
        gbc.setState(0xb849, 0xbbd2, 0xca10, 0xdca5, 0xdcda, 0xb44a, 0x0, 0x0);
        gbc.writeMem(0xb849, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xbbd2, gbc.sp());
        EXPECT(0xb84b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb849));
        EXPECT(0xdd, gbc.readMem(0xb84a));
        // CB DD 00D2
        gbc.setState(0xc01e, 0xf8be, 0xcb50, 0x61e4, 0x6493, 0x52b1, 0x0, 0x0);
        gbc.writeMem(0xc01e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xf8be, gbc.sp());
        EXPECT(0xc020, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc01e));
        EXPECT(0xdd, gbc.readMem(0xc01f));
        // CB DD 00D4
        gbc.setState(0xa56a, 0xc5e0, 0xade0, 0x26a6, 0x8dbf, 0xaecf, 0x0, 0x0);
        gbc.writeMem(0xa56a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xc5e0, gbc.sp());
        EXPECT(0xa56c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa56a));
        EXPECT(0xdd, gbc.readMem(0xa56b));
        // CB DD 00D5
        gbc.setState(0xdb7e, 0xe2b4, 0x2ba0, 0x502d, 0x56c3, 0xd39b, 0x0, 0x0);
        gbc.writeMem(0xdb7e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xe2b4, gbc.sp());
        EXPECT(0xdb80, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb7e));
        EXPECT(0xdd, gbc.readMem(0xdb7f));
        // CB DD 00D6
        gbc.setState(0x39f3, 0xeaaa, 0x6190, 0x6a1f, 0xaf70, 0x8a74, 0x0, 0x0);
        gbc.writeMem(0x39f3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xeaaa, gbc.sp());
        EXPECT(0x39f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00D7
        gbc.setState(0x6d69, 0xc179, 0x91e0, 0x391e, 0x31e6, 0x970a, 0x0, 0x0);
        gbc.writeMem(0x6d69, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xc179, gbc.sp());
        EXPECT(0x6d6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00D8
        gbc.setState(0x32a6, 0x6e9, 0x2590, 0x4831, 0x7c4e, 0x4006, 0x0, 0x0);
        gbc.writeMem(0x32a6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x6e9, gbc.sp());
        EXPECT(0x32a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00D9
        gbc.setState(0xeac9, 0xc411, 0xca50, 0x4b47, 0x341a, 0x87b0, 0x0, 0x0);
        gbc.writeMem(0xeac9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xc411, gbc.sp());
        EXPECT(0xeacb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeac9));
        EXPECT(0xdd, gbc.readMem(0xeaca));
        // CB DD 00DA
        gbc.setState(0xb487, 0x4dd5, 0x3910, 0x419d, 0x2c52, 0xacf7, 0x0, 0x1);
        gbc.writeMem(0xb487, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x4dd5, gbc.sp());
        EXPECT(0xb489, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb487));
        EXPECT(0xdd, gbc.readMem(0xb488));
        // CB DD 00DB
        gbc.setState(0x6f4, 0xa1db, 0xb300, 0x183a, 0x697d, 0x970, 0x0, 0x0);
        gbc.writeMem(0x6f4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xa1db, gbc.sp());
        EXPECT(0x6f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00DC
        gbc.setState(0x42d1, 0xb08f, 0x6540, 0xbefd, 0xd46e, 0x75b2, 0x1, 0x1);
        gbc.writeMem(0x42d1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xb08f, gbc.sp());
        EXPECT(0x42d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00DD
        gbc.setState(0xbf24, 0x5383, 0x8a70, 0xdb33, 0x706d, 0x8284, 0x1, 0x1);
        gbc.writeMem(0xbf24, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x5383, gbc.sp());
        EXPECT(0xbf26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf24));
        EXPECT(0xdd, gbc.readMem(0xbf25));
        // CB DD 00DE
        gbc.setState(0x59ee, 0xcf0b, 0xd660, 0x9ab, 0x8caa, 0xa094, 0x1, 0x0);
        gbc.writeMem(0x59ee, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xcf0b, gbc.sp());
        EXPECT(0x59f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00DF
        gbc.setState(0x2d93, 0x43d9, 0xd1f0, 0xa1aa, 0x2e8a, 0x7f68, 0x0, 0x1);
        gbc.writeMem(0x2d93, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x43d9, gbc.sp());
        EXPECT(0x2d95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00E0
        gbc.setState(0x69a2, 0x9665, 0xdeb0, 0x9ca4, 0x6997, 0x564a, 0x0, 0x1);
        gbc.writeMem(0x69a2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x9665, gbc.sp());
        EXPECT(0x69a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00E1
        gbc.setState(0xbd5d, 0xcb2e, 0x72d0, 0x4f8d, 0x45e, 0x84b8, 0x1, 0x0);
        gbc.writeMem(0xbd5d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xcb2e, gbc.sp());
        EXPECT(0xbd5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd5d));
        EXPECT(0xdd, gbc.readMem(0xbd5e));
        // CB DD 00E2
        gbc.setState(0x9a6e, 0x4b64, 0xf00, 0xa444, 0x3c97, 0xa344, 0x1, 0x1);
        gbc.writeMem(0x9a6e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x4b64, gbc.sp());
        EXPECT(0x9a70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a6e));
        EXPECT(0xdd, gbc.readMem(0x9a6f));
        // CB DD 00E3
        gbc.setState(0x9581, 0x6942, 0xd20, 0xfa9b, 0xaa7c, 0xdd7a, 0x0, 0x1);
        gbc.writeMem(0x9581, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x6942, gbc.sp());
        EXPECT(0x9583, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9581));
        EXPECT(0xdd, gbc.readMem(0x9582));
        // CB DD 00E4
        gbc.setState(0xdd7c, 0xc923, 0xd360, 0xb7d5, 0x3ec8, 0xdfb2, 0x0, 0x0);
        gbc.writeMem(0xdd7c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xc923, gbc.sp());
        EXPECT(0xdd7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd7c));
        EXPECT(0xdd, gbc.readMem(0xdd7d));
        // CB DD 00E5
        gbc.setState(0xa8b5, 0xb842, 0x43d0, 0x20ef, 0xb9ed, 0x62da, 0x0, 0x0);
        gbc.writeMem(0xa8b5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xb842, gbc.sp());
        EXPECT(0xa8b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8b5));
        EXPECT(0xdd, gbc.readMem(0xa8b6));
        // CB DD 00E6
        gbc.setState(0xcbcf, 0x8149, 0x8130, 0xb3e3, 0xe802, 0x8950, 0x0, 0x0);
        gbc.writeMem(0xcbcf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x8149, gbc.sp());
        EXPECT(0xcbd1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbcf));
        EXPECT(0xdd, gbc.readMem(0xcbd0));
        // CB DD 00E7
        gbc.setState(0x29ef, 0xa441, 0xd6a0, 0x9e25, 0x67e8, 0x2d31, 0x0, 0x1);
        gbc.writeMem(0x29ef, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xa441, gbc.sp());
        EXPECT(0x29f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00E8
        gbc.setState(0xd882, 0xb484, 0x5af0, 0x8e5, 0xf0be, 0x168d, 0x0, 0x0);
        gbc.writeMem(0xd882, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xb484, gbc.sp());
        EXPECT(0xd884, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd882));
        EXPECT(0xdd, gbc.readMem(0xd883));
        // CB DD 00E9
        gbc.setState(0x7387, 0xd230, 0x5260, 0xb0f4, 0x6826, 0x3426, 0x0, 0x1);
        gbc.writeMem(0x7387, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xd230, gbc.sp());
        EXPECT(0x7389, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00EB
        gbc.setState(0xe52d, 0x3bd7, 0xb230, 0x649b, 0xebce, 0x6412, 0x1, 0x1);
        gbc.writeMem(0xe52d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x3bd7, gbc.sp());
        EXPECT(0xe52f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe52d));
        EXPECT(0xdd, gbc.readMem(0xe52e));
        // CB DD 00EC
        gbc.setState(0x595, 0x3866, 0x4300, 0x640, 0x40a9, 0xcbf3, 0x1, 0x0);
        gbc.writeMem(0x595, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x3866, gbc.sp());
        EXPECT(0x597, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00ED
        gbc.setState(0x12da, 0x87c1, 0xea70, 0x7858, 0x3e5f, 0xac91, 0x0, 0x0);
        gbc.writeMem(0x12da, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x87c1, gbc.sp());
        EXPECT(0x12dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00EE
        gbc.setState(0x6e34, 0xc8bc, 0x3750, 0x8663, 0x757c, 0x535f, 0x1, 0x0);
        gbc.writeMem(0x6e34, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xc8bc, gbc.sp());
        EXPECT(0x6e36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00F0
        gbc.setState(0x222c, 0xfcbe, 0x2f0, 0x4d20, 0xbf32, 0xca6, 0x1, 0x0);
        gbc.writeMem(0x222c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xfcbe, gbc.sp());
        EXPECT(0x222e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00F1
        gbc.setState(0x1f2a, 0x8bba, 0xf6c0, 0xff88, 0xbf0d, 0x90ec, 0x0, 0x0);
        gbc.writeMem(0x1f2a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x8bba, gbc.sp());
        EXPECT(0x1f2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00F2
        gbc.setState(0xdd53, 0xb2aa, 0x3a40, 0xf3d1, 0x8d59, 0xf8ae, 0x1, 0x1);
        gbc.writeMem(0xdd53, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xb2aa, gbc.sp());
        EXPECT(0xdd55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd53));
        EXPECT(0xdd, gbc.readMem(0xdd54));
        // CB DD 00F3
        gbc.setState(0x46bb, 0xfa65, 0x9830, 0xd43a, 0x3c3d, 0x2746, 0x1, 0x0);
        gbc.writeMem(0x46bb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xfa65, gbc.sp());
        EXPECT(0x46bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00F4
        gbc.setState(0x138b, 0x7b00, 0x56f0, 0xa898, 0xf312, 0xa9b4, 0x0, 0x0);
        gbc.writeMem(0x138b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x7b00, gbc.sp());
        EXPECT(0x138d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00F5
        gbc.setState(0x9cf, 0x5b70, 0x1260, 0x5c65, 0xd680, 0x598, 0x1, 0x0);
        gbc.writeMem(0x9cf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x5b70, gbc.sp());
        EXPECT(0x9d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00F6
        gbc.setState(0x5c6c, 0x98eb, 0xa740, 0xc2bb, 0x88cb, 0x38fb, 0x1, 0x0);
        gbc.writeMem(0x5c6c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x98eb, gbc.sp());
        EXPECT(0x5c6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00F7
        gbc.setState(0x42f, 0xc12e, 0x1ae0, 0xc59d, 0xcf6b, 0x264, 0x0, 0x1);
        gbc.writeMem(0x42f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xc12e, gbc.sp());
        EXPECT(0x431, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 00F8
        gbc.setState(0x7978, 0xef7f, 0x4110, 0x3d29, 0x76c1, 0x827a, 0x0, 0x0);
        gbc.writeMem(0x7978, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xef7f, gbc.sp());
        EXPECT(0x797a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00F9
        gbc.setState(0xd117, 0xf53e, 0x95a0, 0xd6da, 0x1b72, 0x8c1f, 0x0, 0x0);
        gbc.writeMem(0xd117, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xf53e, gbc.sp());
        EXPECT(0xd119, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd117));
        EXPECT(0xdd, gbc.readMem(0xd118));
        // CB DD 00FA
        gbc.setState(0x86fc, 0x8139, 0x6d80, 0xcafa, 0x8819, 0x563b, 0x0, 0x0);
        gbc.writeMem(0x86fc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x8139, gbc.sp());
        EXPECT(0x86fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86fc));
        EXPECT(0xdd, gbc.readMem(0x86fd));
        // CB DD 00FB
        gbc.setState(0x7ac4, 0x8969, 0xe770, 0x3d2f, 0x7ddf, 0x8cee, 0x1, 0x0);
        gbc.writeMem(0x7ac4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x8969, gbc.sp());
        EXPECT(0x7ac6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00FC
        gbc.setState(0xb283, 0xaddc, 0x4af0, 0x500d, 0x5251, 0x9cb4, 0x1, 0x0);
        gbc.writeMem(0xb283, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xaddc, gbc.sp());
        EXPECT(0xb285, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb283));
        EXPECT(0xdd, gbc.readMem(0xb284));
        // CB DD 00FD
        gbc.setState(0x4c7b, 0x6721, 0x6a90, 0xae8a, 0xeab8, 0xf7c3, 0x1, 0x1);
        gbc.writeMem(0x4c7b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x6721, gbc.sp());
        EXPECT(0x4c7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00FE
        gbc.setState(0x14bd, 0x1645, 0x4e90, 0x7cdc, 0xa4b8, 0xa385, 0x0, 0x1);
        gbc.writeMem(0x14bd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x1645, gbc.sp());
        EXPECT(0x14bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 00FF
        gbc.setState(0x883f, 0x56b2, 0xf8b0, 0x7dc5, 0x3575, 0x92b8, 0x0, 0x0);
        gbc.writeMem(0x883f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x56b2, gbc.sp());
        EXPECT(0x8841, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x883f));
        EXPECT(0xdd, gbc.readMem(0x8840));
        // CB DD 0100
        gbc.setState(0x3f76, 0xc5ca, 0x1ff0, 0x2e34, 0xc07c, 0x49fc, 0x1, 0x1);
        gbc.writeMem(0x3f76, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xc5ca, gbc.sp());
        EXPECT(0x3f78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0101
        gbc.setState(0x48c, 0xd9a3, 0xff10, 0xac5c, 0xbda5, 0xfe81, 0x0, 0x0);
        gbc.writeMem(0x48c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xd9a3, gbc.sp());
        EXPECT(0x48e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0102
        gbc.setState(0xa516, 0x5245, 0x2f60, 0x4a32, 0xac36, 0x279d, 0x1, 0x1);
        gbc.writeMem(0xa516, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x5245, gbc.sp());
        EXPECT(0xa518, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa516));
        EXPECT(0xdd, gbc.readMem(0xa517));
        // CB DD 0103
        gbc.setState(0x874d, 0x36df, 0xb730, 0x5d30, 0xc64b, 0x5581, 0x0, 0x0);
        gbc.writeMem(0x874d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x36df, gbc.sp());
        EXPECT(0x874f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x874d));
        EXPECT(0xdd, gbc.readMem(0x874e));
        // CB DD 0104
        gbc.setState(0x22e9, 0xac34, 0xca80, 0x351c, 0x7db2, 0x9c5e, 0x1, 0x1);
        gbc.writeMem(0x22e9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xac34, gbc.sp());
        EXPECT(0x22eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0105
        gbc.setState(0x90d2, 0x4d3b, 0x7210, 0xd32, 0x23b1, 0xcfcf, 0x0, 0x0);
        gbc.writeMem(0x90d2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x4d3b, gbc.sp());
        EXPECT(0x90d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90d2));
        EXPECT(0xdd, gbc.readMem(0x90d3));
        // CB DD 0106
        gbc.setState(0xbaf8, 0x5915, 0x1b0, 0xc4dd, 0xd75e, 0x35ac, 0x0, 0x1);
        gbc.writeMem(0xbaf8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x5915, gbc.sp());
        EXPECT(0xbafa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaf8));
        EXPECT(0xdd, gbc.readMem(0xbaf9));
        // CB DD 0107
        gbc.setState(0xed88, 0x1661, 0x6580, 0x8f6, 0x67ad, 0xc1ca, 0x0, 0x0);
        gbc.writeMem(0xed88, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x1661, gbc.sp());
        EXPECT(0xed8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed88));
        EXPECT(0xdd, gbc.readMem(0xed89));
        // CB DD 0108
        gbc.setState(0x83d2, 0xa255, 0x4cb0, 0x8498, 0x6263, 0x1d52, 0x1, 0x0);
        gbc.writeMem(0x83d2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xa255, gbc.sp());
        EXPECT(0x83d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83d2));
        EXPECT(0xdd, gbc.readMem(0x83d3));
        // CB DD 0109
        gbc.setState(0x9546, 0x1671, 0x64b0, 0xa07d, 0x8a2b, 0x164d, 0x0, 0x1);
        gbc.writeMem(0x9546, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x1671, gbc.sp());
        EXPECT(0x9548, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9546));
        EXPECT(0xdd, gbc.readMem(0x9547));
        // CB DD 010A
        gbc.setState(0xda21, 0x8ebe, 0x7850, 0xb8e, 0xce82, 0x2d68, 0x1, 0x1);
        gbc.writeMem(0xda21, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x8ebe, gbc.sp());
        EXPECT(0xda23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda21));
        EXPECT(0xdd, gbc.readMem(0xda22));
        // CB DD 010B
        gbc.setState(0x3ab0, 0x4a72, 0x3f50, 0xd934, 0x363f, 0x30f5, 0x0, 0x1);
        gbc.writeMem(0x3ab0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x4a72, gbc.sp());
        EXPECT(0x3ab2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 010D
        gbc.setState(0xd1d8, 0x5b24, 0xc70, 0xfb02, 0x7fa1, 0xca6c, 0x0, 0x0);
        gbc.writeMem(0xd1d8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x5b24, gbc.sp());
        EXPECT(0xd1da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1d8));
        EXPECT(0xdd, gbc.readMem(0xd1d9));
        // CB DD 010E
        gbc.setState(0x2b3c, 0x7aea, 0x75d0, 0x4578, 0x39cb, 0x267e, 0x0, 0x0);
        gbc.writeMem(0x2b3c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x7aea, gbc.sp());
        EXPECT(0x2b3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 010F
        gbc.setState(0xe37a, 0x8c56, 0x13a0, 0x221, 0xab82, 0x8f74, 0x1, 0x0);
        gbc.writeMem(0xe37a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x8c56, gbc.sp());
        EXPECT(0xe37c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe37a));
        EXPECT(0xdd, gbc.readMem(0xe37b));
        // CB DD 0110
        gbc.setState(0x4d, 0x9136, 0x5a60, 0xa090, 0x7ac, 0xde03, 0x0, 0x1);
        gbc.writeMem(0x4d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x9136, gbc.sp());
        EXPECT(0x4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0111
        gbc.setState(0x4f92, 0x8d6, 0x6c70, 0x3e79, 0x8473, 0x3047, 0x1, 0x0);
        gbc.writeMem(0x4f92, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x8d6, gbc.sp());
        EXPECT(0x4f94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0112
        gbc.setState(0x980, 0x680d, 0x72b0, 0xb72b, 0x8b33, 0x1ca2, 0x1, 0x1);
        gbc.writeMem(0x980, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x680d, gbc.sp());
        EXPECT(0x982, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0113
        gbc.setState(0x2f0, 0x88f, 0x57d0, 0x9f16, 0xe9f6, 0x8f35, 0x1, 0x0);
        gbc.writeMem(0x2f0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x88f, gbc.sp());
        EXPECT(0x2f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0114
        gbc.setState(0x40f3, 0xecf4, 0x6310, 0xa963, 0xa358, 0xd3ba, 0x1, 0x1);
        gbc.writeMem(0x40f3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xecf4, gbc.sp());
        EXPECT(0x40f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0115
        gbc.setState(0xc789, 0xbd97, 0xbcd0, 0xf20e, 0xc836, 0xff8c, 0x1, 0x1);
        gbc.writeMem(0xc789, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xbd97, gbc.sp());
        EXPECT(0xc78b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc789));
        EXPECT(0xdd, gbc.readMem(0xc78a));
        // CB DD 0116
        gbc.setState(0x570e, 0xebcf, 0x5a30, 0x4d4b, 0x1cb6, 0xf8d4, 0x1, 0x0);
        gbc.writeMem(0x570e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xebcf, gbc.sp());
        EXPECT(0x5710, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0117
        gbc.setState(0x1a42, 0x4aa1, 0xfb30, 0xb6e1, 0x5c24, 0x899f, 0x1, 0x0);
        gbc.writeMem(0x1a42, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x4aa1, gbc.sp());
        EXPECT(0x1a44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0118
        gbc.setState(0xad69, 0x5cb4, 0x5ab0, 0x458a, 0x520b, 0xdd6d, 0x1, 0x0);
        gbc.writeMem(0xad69, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x5cb4, gbc.sp());
        EXPECT(0xad6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad69));
        EXPECT(0xdd, gbc.readMem(0xad6a));
        // CB DD 0119
        gbc.setState(0x618c, 0x13b1, 0xc760, 0x9ca, 0xae0c, 0xee4b, 0x0, 0x1);
        gbc.writeMem(0x618c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x13b1, gbc.sp());
        EXPECT(0x618e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 011A
        gbc.setState(0xec7d, 0xbf36, 0xe8f0, 0xfaef, 0xd9ee, 0x6f54, 0x1, 0x0);
        gbc.writeMem(0xec7d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xbf36, gbc.sp());
        EXPECT(0xec7f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec7d));
        EXPECT(0xdd, gbc.readMem(0xec7e));
        // CB DD 011B
        gbc.setState(0xaa16, 0xbca7, 0xda90, 0x59ed, 0xb4ba, 0x60a, 0x0, 0x0);
        gbc.writeMem(0xaa16, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xbca7, gbc.sp());
        EXPECT(0xaa18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa16));
        EXPECT(0xdd, gbc.readMem(0xaa17));
        // CB DD 011C
        gbc.setState(0xc9ac, 0xfe7b, 0x74e0, 0x9693, 0xf3ec, 0xb1f6, 0x0, 0x1);
        gbc.writeMem(0xc9ac, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xfe7b, gbc.sp());
        EXPECT(0xc9ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9ac));
        EXPECT(0xdd, gbc.readMem(0xc9ad));
        // CB DD 011D
        gbc.setState(0x223d, 0xd04c, 0xbd10, 0xc9f7, 0x3904, 0x5cc4, 0x1, 0x1);
        gbc.writeMem(0x223d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xd04c, gbc.sp());
        EXPECT(0x223f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 011E
        gbc.setState(0x413, 0x42c1, 0x2b60, 0x63bc, 0x91c0, 0x53d8, 0x1, 0x1);
        gbc.writeMem(0x413, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x42c1, gbc.sp());
        EXPECT(0x415, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 011F
        gbc.setState(0x7bbd, 0x5326, 0x38e0, 0xabeb, 0x95f3, 0x6fb5, 0x0, 0x1);
        gbc.writeMem(0x7bbd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x5326, gbc.sp());
        EXPECT(0x7bbf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0120
        gbc.setState(0x323a, 0x13da, 0xc580, 0xa17f, 0xb08a, 0x4e9b, 0x1, 0x1);
        gbc.writeMem(0x323a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x13da, gbc.sp());
        EXPECT(0x323c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0121
        gbc.setState(0x429a, 0x436, 0x9fd0, 0xc099, 0x9cec, 0xc20b, 0x1, 0x0);
        gbc.writeMem(0x429a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x436, gbc.sp());
        EXPECT(0x429c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0122
        gbc.setState(0x4661, 0xbce1, 0x1350, 0xd099, 0xc3f2, 0x5ac0, 0x0, 0x1);
        gbc.writeMem(0x4661, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xbce1, gbc.sp());
        EXPECT(0x4663, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0123
        gbc.setState(0xd33e, 0x50e2, 0x1a50, 0x9374, 0xfda2, 0x6125, 0x0, 0x1);
        gbc.writeMem(0xd33e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x50e2, gbc.sp());
        EXPECT(0xd340, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd33e));
        EXPECT(0xdd, gbc.readMem(0xd33f));
        // CB DD 0124
        gbc.setState(0x7b95, 0xc1db, 0xf4b0, 0x1335, 0x8206, 0xba7b, 0x0, 0x0);
        gbc.writeMem(0x7b95, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xc1db, gbc.sp());
        EXPECT(0x7b97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0125
        gbc.setState(0x595, 0x5911, 0xd9c0, 0xb8cd, 0x3d79, 0x3a17, 0x0, 0x0);
        gbc.writeMem(0x595, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x5911, gbc.sp());
        EXPECT(0x597, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0126
        gbc.setState(0x6302, 0xe6fb, 0xe80, 0x8eb2, 0x6e40, 0xb3e6, 0x1, 0x0);
        gbc.writeMem(0x6302, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xe6fb, gbc.sp());
        EXPECT(0x6304, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0127
        gbc.setState(0x2052, 0xf004, 0x5690, 0x89c3, 0x33dd, 0xbe6b, 0x0, 0x1);
        gbc.writeMem(0x2052, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xf004, gbc.sp());
        EXPECT(0x2054, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0128
        gbc.setState(0x31b4, 0x9e0, 0xf0e0, 0xdc4, 0x8793, 0xd2d3, 0x0, 0x0);
        gbc.writeMem(0x31b4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x9e0, gbc.sp());
        EXPECT(0x31b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0129
        gbc.setState(0xca3f, 0xfca1, 0x3d80, 0x399b, 0x2892, 0x11ee, 0x1, 0x1);
        gbc.writeMem(0xca3f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xfca1, gbc.sp());
        EXPECT(0xca41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca3f));
        EXPECT(0xdd, gbc.readMem(0xca40));
        // CB DD 012A
        gbc.setState(0x7ccc, 0x5f83, 0x23c0, 0x680, 0x7e28, 0xca3b, 0x1, 0x1);
        gbc.writeMem(0x7ccc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x5f83, gbc.sp());
        EXPECT(0x7cce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 012B
        gbc.setState(0xc393, 0x6c27, 0xf2c0, 0x5324, 0xbe0d, 0x2612, 0x1, 0x1);
        gbc.writeMem(0xc393, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x6c27, gbc.sp());
        EXPECT(0xc395, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc393));
        EXPECT(0xdd, gbc.readMem(0xc394));
        // CB DD 012C
        gbc.setState(0xb7c6, 0x935b, 0x2980, 0xc0e2, 0x9b48, 0x562f, 0x1, 0x1);
        gbc.writeMem(0xb7c6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x935b, gbc.sp());
        EXPECT(0xb7c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7c6));
        EXPECT(0xdd, gbc.readMem(0xb7c7));
        // CB DD 012D
        gbc.setState(0x9627, 0x3399, 0x6c80, 0x7bee, 0xb40d, 0xa8d9, 0x0, 0x1);
        gbc.writeMem(0x9627, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x3399, gbc.sp());
        EXPECT(0x9629, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9627));
        EXPECT(0xdd, gbc.readMem(0x9628));
        // CB DD 012F
        gbc.setState(0x5041, 0x7f76, 0x1fb0, 0xd36b, 0xe093, 0x21f1, 0x1, 0x0);
        gbc.writeMem(0x5041, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x7f76, gbc.sp());
        EXPECT(0x5043, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0130
        gbc.setState(0x2c27, 0xe129, 0x6130, 0xd3b2, 0xcb75, 0x88c0, 0x0, 0x1);
        gbc.writeMem(0x2c27, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xe129, gbc.sp());
        EXPECT(0x2c29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0131
        gbc.setState(0xec05, 0xa51e, 0xf9e0, 0xbb9e, 0x4f87, 0x6aaa, 0x1, 0x1);
        gbc.writeMem(0xec05, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xa51e, gbc.sp());
        EXPECT(0xec07, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec05));
        EXPECT(0xdd, gbc.readMem(0xec06));
        // CB DD 0132
        gbc.setState(0x9d12, 0x835a, 0x6c60, 0x292b, 0x4528, 0x9233, 0x0, 0x0);
        gbc.writeMem(0x9d12, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x835a, gbc.sp());
        EXPECT(0x9d14, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d12));
        EXPECT(0xdd, gbc.readMem(0x9d13));
        // CB DD 0133
        gbc.setState(0x1771, 0xecac, 0x7d80, 0x3a, 0x5f5d, 0xea0f, 0x0, 0x1);
        gbc.writeMem(0x1771, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xecac, gbc.sp());
        EXPECT(0x1773, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0134
        gbc.setState(0x681d, 0x6e4d, 0x3c30, 0x74b4, 0x8ed4, 0x45, 0x0, 0x1);
        gbc.writeMem(0x681d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x6e4d, gbc.sp());
        EXPECT(0x681f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0135
        gbc.setState(0xd10a, 0xc620, 0x6370, 0xb427, 0xb040, 0x2116, 0x0, 0x1);
        gbc.writeMem(0xd10a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xc620, gbc.sp());
        EXPECT(0xd10c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd10a));
        EXPECT(0xdd, gbc.readMem(0xd10b));
        // CB DD 0136
        gbc.setState(0xb123, 0x45f, 0x8b00, 0x1003, 0x5179, 0xfdda, 0x1, 0x1);
        gbc.writeMem(0xb123, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x45f, gbc.sp());
        EXPECT(0xb125, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb123));
        EXPECT(0xdd, gbc.readMem(0xb124));
        // CB DD 0137
        gbc.setState(0x1953, 0xcbd7, 0x64e0, 0x2979, 0x173e, 0x4a54, 0x0, 0x0);
        gbc.writeMem(0x1953, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xcbd7, gbc.sp());
        EXPECT(0x1955, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0138
        gbc.setState(0xb3de, 0x7bf5, 0xa290, 0xdfc3, 0x77e1, 0x38e4, 0x0, 0x1);
        gbc.writeMem(0xb3de, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x7bf5, gbc.sp());
        EXPECT(0xb3e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3de));
        EXPECT(0xdd, gbc.readMem(0xb3df));
        // CB DD 0139
        gbc.setState(0x4391, 0xf1ff, 0xd410, 0x4f98, 0x274b, 0xf8ad, 0x1, 0x0);
        gbc.writeMem(0x4391, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xf1ff, gbc.sp());
        EXPECT(0x4393, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 013A
        gbc.setState(0x7ac2, 0x83f0, 0xce20, 0xaf78, 0x27c2, 0x359, 0x1, 0x1);
        gbc.writeMem(0x7ac2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x83f0, gbc.sp());
        EXPECT(0x7ac4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 013B
        gbc.setState(0x918a, 0x951f, 0x8350, 0x931a, 0xc995, 0x4cc1, 0x1, 0x1);
        gbc.writeMem(0x918a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x951f, gbc.sp());
        EXPECT(0x918c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x918a));
        EXPECT(0xdd, gbc.readMem(0x918b));
        // CB DD 013C
        gbc.setState(0xe5b7, 0x4537, 0x65d0, 0xf029, 0x1c73, 0x1d84, 0x0, 0x1);
        gbc.writeMem(0xe5b7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x4537, gbc.sp());
        EXPECT(0xe5b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5b7));
        EXPECT(0xdd, gbc.readMem(0xe5b8));
        // CB DD 013D
        gbc.setState(0xd32f, 0xf9ed, 0x8ce0, 0x3ed, 0xd162, 0x7c53, 0x0, 0x1);
        gbc.writeMem(0xd32f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xf9ed, gbc.sp());
        EXPECT(0xd331, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd32f));
        EXPECT(0xdd, gbc.readMem(0xd330));
        // CB DD 013E
        gbc.setState(0x9c2a, 0x3465, 0x1c70, 0xf91d, 0xfb93, 0x5dd3, 0x0, 0x0);
        gbc.writeMem(0x9c2a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x3465, gbc.sp());
        EXPECT(0x9c2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c2a));
        EXPECT(0xdd, gbc.readMem(0x9c2b));
        // CB DD 013F
        gbc.setState(0x91b2, 0xc7d0, 0xb190, 0x6c2a, 0xedc5, 0x3549, 0x0, 0x1);
        gbc.writeMem(0x91b2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xc7d0, gbc.sp());
        EXPECT(0x91b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91b2));
        EXPECT(0xdd, gbc.readMem(0x91b3));
        // CB DD 0140
        gbc.setState(0xca29, 0x44ff, 0x6890, 0x9070, 0xb2f6, 0xf65b, 0x1, 0x0);
        gbc.writeMem(0xca29, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x44ff, gbc.sp());
        EXPECT(0xca2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca29));
        EXPECT(0xdd, gbc.readMem(0xca2a));
        // CB DD 0141
        gbc.setState(0x501f, 0xdacc, 0xd730, 0x2eae, 0xed21, 0x28d1, 0x1, 0x0);
        gbc.writeMem(0x501f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xdacc, gbc.sp());
        EXPECT(0x5021, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0142
        gbc.setState(0xe8e, 0xa56b, 0x1f40, 0x75d4, 0x52e2, 0x370, 0x0, 0x1);
        gbc.writeMem(0xe8e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xa56b, gbc.sp());
        EXPECT(0xe90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0143
        gbc.setState(0xd1bf, 0xb5cb, 0x7130, 0x960f, 0x60fd, 0x7ee9, 0x1, 0x0);
        gbc.writeMem(0xd1bf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xb5cb, gbc.sp());
        EXPECT(0xd1c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1bf));
        EXPECT(0xdd, gbc.readMem(0xd1c0));
        // CB DD 0145
        gbc.setState(0x20d1, 0xbaeb, 0xad70, 0x4acf, 0x9422, 0x73ae, 0x1, 0x1);
        gbc.writeMem(0x20d1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xbaeb, gbc.sp());
        EXPECT(0x20d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0146
        gbc.setState(0x4f1a, 0x7dd0, 0xbbb0, 0xd6b4, 0xeed6, 0x8d06, 0x0, 0x0);
        gbc.writeMem(0x4f1a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x7dd0, gbc.sp());
        EXPECT(0x4f1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0147
        gbc.setState(0xe7f5, 0x400e, 0xbc60, 0x7f8, 0xe7f5, 0xd87, 0x0, 0x1);
        gbc.writeMem(0xe7f5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x400e, gbc.sp());
        EXPECT(0xe7f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7f5));
        EXPECT(0xdd, gbc.readMem(0xe7f6));
        // CB DD 0148
        gbc.setState(0x798c, 0x3b55, 0x8e10, 0x82c, 0x9d4d, 0xe1b9, 0x1, 0x1);
        gbc.writeMem(0x798c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x3b55, gbc.sp());
        EXPECT(0x798e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0149
        gbc.setState(0x5b4c, 0x5531, 0x98c0, 0xebee, 0xd358, 0x2a6b, 0x0, 0x1);
        gbc.writeMem(0x5b4c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x5531, gbc.sp());
        EXPECT(0x5b4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 014A
        gbc.setState(0xcd90, 0x39a3, 0x8230, 0xf2eb, 0xf19a, 0x216c, 0x0, 0x0);
        gbc.writeMem(0xcd90, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x39a3, gbc.sp());
        EXPECT(0xcd92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd90));
        EXPECT(0xdd, gbc.readMem(0xcd91));
        // CB DD 014B
        gbc.setState(0x201c, 0x652f, 0xc0b0, 0x194d, 0xf96, 0x9c48, 0x1, 0x0);
        gbc.writeMem(0x201c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x652f, gbc.sp());
        EXPECT(0x201e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 014D
        gbc.setState(0x7bf7, 0xd3, 0xe630, 0x1ebb, 0xb4c0, 0x71c9, 0x0, 0x0);
        gbc.writeMem(0x7bf7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xd3, gbc.sp());
        EXPECT(0x7bf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 014E
        gbc.setState(0x29f3, 0x660e, 0x4080, 0xfbbe, 0x49f1, 0x4288, 0x1, 0x0);
        gbc.writeMem(0x29f3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x660e, gbc.sp());
        EXPECT(0x29f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 014F
        gbc.setState(0x6041, 0xb8c8, 0xc460, 0x48da, 0xb49d, 0x1cc6, 0x0, 0x0);
        gbc.writeMem(0x6041, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xb8c8, gbc.sp());
        EXPECT(0x6043, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0150
        gbc.setState(0x413d, 0x31d9, 0x3290, 0xc702, 0xad08, 0xa441, 0x0, 0x0);
        gbc.writeMem(0x413d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x31d9, gbc.sp());
        EXPECT(0x413f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0151
        gbc.setState(0x9a30, 0x4369, 0xeb60, 0xabff, 0x16c2, 0x3711, 0x1, 0x0);
        gbc.writeMem(0x9a30, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x4369, gbc.sp());
        EXPECT(0x9a32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a30));
        EXPECT(0xdd, gbc.readMem(0x9a31));
        // CB DD 0153
        gbc.setState(0x783c, 0x33e4, 0x6070, 0xf4dd, 0x10ed, 0xc6a7, 0x1, 0x0);
        gbc.writeMem(0x783c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x33e4, gbc.sp());
        EXPECT(0x783e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0154
        gbc.setState(0x23e8, 0xd6de, 0xfe60, 0xab58, 0x39ae, 0xb832, 0x1, 0x0);
        gbc.writeMem(0x23e8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xd6de, gbc.sp());
        EXPECT(0x23ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0155
        gbc.setState(0x75f6, 0x6075, 0xba30, 0x530, 0x26ea, 0xb981, 0x1, 0x0);
        gbc.writeMem(0x75f6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x6075, gbc.sp());
        EXPECT(0x75f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0156
        gbc.setState(0x54fe, 0x957a, 0xa4f0, 0x5603, 0x7f37, 0x5b39, 0x0, 0x0);
        gbc.writeMem(0x54fe, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x957a, gbc.sp());
        EXPECT(0x5500, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0157
        gbc.setState(0x4702, 0x8ef1, 0xd690, 0x11e5, 0xebcf, 0x1ab, 0x0, 0x1);
        gbc.writeMem(0x4702, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x8ef1, gbc.sp());
        EXPECT(0x4704, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0158
        gbc.setState(0x3950, 0x56e7, 0x7660, 0xf13, 0xbb6d, 0x6d26, 0x1, 0x0);
        gbc.writeMem(0x3950, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x56e7, gbc.sp());
        EXPECT(0x3952, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0159
        gbc.setState(0x77f7, 0xead2, 0x73c0, 0xb648, 0x8445, 0x2a6a, 0x1, 0x1);
        gbc.writeMem(0x77f7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xead2, gbc.sp());
        EXPECT(0x77f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 015A
        gbc.setState(0x4d64, 0x37f3, 0xe6f0, 0xecb7, 0xecfe, 0xc03d, 0x1, 0x0);
        gbc.writeMem(0x4d64, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x37f3, gbc.sp());
        EXPECT(0x4d66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 015B
        gbc.setState(0x5cea, 0xee6a, 0xf660, 0x3346, 0xf4f6, 0xca84, 0x0, 0x0);
        gbc.writeMem(0x5cea, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xee6a, gbc.sp());
        EXPECT(0x5cec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 015C
        gbc.setState(0x97c4, 0xebbf, 0xa10, 0xadc3, 0x4fca, 0xdead, 0x0, 0x0);
        gbc.writeMem(0x97c4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xebbf, gbc.sp());
        EXPECT(0x97c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97c4));
        EXPECT(0xdd, gbc.readMem(0x97c5));
        // CB DD 015D
        gbc.setState(0xe933, 0x660b, 0x40a0, 0xb3b1, 0x877, 0x6c02, 0x0, 0x0);
        gbc.writeMem(0xe933, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x660b, gbc.sp());
        EXPECT(0xe935, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe933));
        EXPECT(0xdd, gbc.readMem(0xe934));
        // CB DD 015E
        gbc.setState(0x5d47, 0x985d, 0xf250, 0xdda9, 0x25c, 0xe39d, 0x0, 0x0);
        gbc.writeMem(0x5d47, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x985d, gbc.sp());
        EXPECT(0x5d49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 015F
        gbc.setState(0xc50f, 0x8159, 0x2110, 0x556d, 0x8cc4, 0xe023, 0x0, 0x0);
        gbc.writeMem(0xc50f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x8159, gbc.sp());
        EXPECT(0xc511, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc50f));
        EXPECT(0xdd, gbc.readMem(0xc510));
        // CB DD 0161
        gbc.setState(0xa1c2, 0xb7ff, 0xca70, 0x4eeb, 0xba82, 0x7d2f, 0x1, 0x0);
        gbc.writeMem(0xa1c2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xb7ff, gbc.sp());
        EXPECT(0xa1c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1c2));
        EXPECT(0xdd, gbc.readMem(0xa1c3));
        // CB DD 0162
        gbc.setState(0xa59, 0x9dac, 0xf470, 0xd1f2, 0x1b19, 0xe236, 0x1, 0x0);
        gbc.writeMem(0xa59, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x9dac, gbc.sp());
        EXPECT(0xa5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0163
        gbc.setState(0xa366, 0x5745, 0x67e0, 0x1d10, 0x81e9, 0x6081, 0x1, 0x0);
        gbc.writeMem(0xa366, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x5745, gbc.sp());
        EXPECT(0xa368, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa366));
        EXPECT(0xdd, gbc.readMem(0xa367));
        // CB DD 0164
        gbc.setState(0xeb77, 0xbe43, 0x180, 0xa1cd, 0xe1f9, 0xe26a, 0x0, 0x0);
        gbc.writeMem(0xeb77, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xbe43, gbc.sp());
        EXPECT(0xeb79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb77));
        EXPECT(0xdd, gbc.readMem(0xeb78));
        // CB DD 0165
        gbc.setState(0x78be, 0x2f0d, 0x77b0, 0xc36b, 0xe44c, 0xf23b, 0x0, 0x1);
        gbc.writeMem(0x78be, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x2f0d, gbc.sp());
        EXPECT(0x78c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0166
        gbc.setState(0x596d, 0x7295, 0x7df0, 0x8cb3, 0x159b, 0xdc14, 0x0, 0x0);
        gbc.writeMem(0x596d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x7295, gbc.sp());
        EXPECT(0x596f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0167
        gbc.setState(0x4724, 0x9c0e, 0x1100, 0xcdad, 0xb8d6, 0xf2c3, 0x1, 0x0);
        gbc.writeMem(0x4724, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x9c0e, gbc.sp());
        EXPECT(0x4726, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0168
        gbc.setState(0x92c4, 0x1e71, 0x3220, 0xd145, 0x8c75, 0x3b5d, 0x1, 0x0);
        gbc.writeMem(0x92c4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x1e71, gbc.sp());
        EXPECT(0x92c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92c4));
        EXPECT(0xdd, gbc.readMem(0x92c5));
        // CB DD 0169
        gbc.setState(0x2df7, 0xbe2f, 0xd390, 0x80dd, 0xd31c, 0x2be7, 0x1, 0x1);
        gbc.writeMem(0x2df7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xbe2f, gbc.sp());
        EXPECT(0x2df9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 016A
        gbc.setState(0x711d, 0xb655, 0xdc00, 0xa91c, 0x7290, 0x800b, 0x1, 0x1);
        gbc.writeMem(0x711d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xb655, gbc.sp());
        EXPECT(0x711f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 016B
        gbc.setState(0x44ac, 0xeba0, 0x8060, 0xa524, 0xb54, 0x2888, 0x0, 0x0);
        gbc.writeMem(0x44ac, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xeba0, gbc.sp());
        EXPECT(0x44ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 016C
        gbc.setState(0x9b58, 0x5042, 0x6fd0, 0xc4c2, 0x6688, 0x20f0, 0x0, 0x1);
        gbc.writeMem(0x9b58, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x5042, gbc.sp());
        EXPECT(0x9b5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b58));
        EXPECT(0xdd, gbc.readMem(0x9b59));
        // CB DD 016D
        gbc.setState(0x2c8e, 0x8609, 0xadd0, 0x11b4, 0xe501, 0x2dbd, 0x0, 0x1);
        gbc.writeMem(0x2c8e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x8609, gbc.sp());
        EXPECT(0x2c90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 016E
        gbc.setState(0x9459, 0x1dd8, 0xbc30, 0xbf4f, 0x5656, 0x934f, 0x0, 0x1);
        gbc.writeMem(0x9459, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x1dd8, gbc.sp());
        EXPECT(0x945b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9459));
        EXPECT(0xdd, gbc.readMem(0x945a));
        // CB DD 016F
        gbc.setState(0x9d40, 0xa3fe, 0x2960, 0x6aa5, 0xe8dd, 0x1bcc, 0x0, 0x1);
        gbc.writeMem(0x9d40, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xa3fe, gbc.sp());
        EXPECT(0x9d42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d40));
        EXPECT(0xdd, gbc.readMem(0x9d41));
        // CB DD 0170
        gbc.setState(0x9b34, 0xd4bc, 0x9980, 0x1c51, 0xdd8c, 0xeb60, 0x1, 0x1);
        gbc.writeMem(0x9b34, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xd4bc, gbc.sp());
        EXPECT(0x9b36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b34));
        EXPECT(0xdd, gbc.readMem(0x9b35));
        // CB DD 0171
        gbc.setState(0x63f8, 0x623d, 0x5a40, 0xe531, 0x2944, 0x9e0e, 0x0, 0x0);
        gbc.writeMem(0x63f8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x623d, gbc.sp());
        EXPECT(0x63fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0173
        gbc.setState(0x6e52, 0x5269, 0x4310, 0x23d, 0xb7a6, 0x91ce, 0x1, 0x0);
        gbc.writeMem(0x6e52, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x5269, gbc.sp());
        EXPECT(0x6e54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0174
        gbc.setState(0xc196, 0x6ed8, 0x81c0, 0xd830, 0x32ce, 0x8551, 0x1, 0x0);
        gbc.writeMem(0xc196, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x6ed8, gbc.sp());
        EXPECT(0xc198, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc196));
        EXPECT(0xdd, gbc.readMem(0xc197));
        // CB DD 0175
        gbc.setState(0xc183, 0xfe3d, 0xb270, 0xb80e, 0x3e6f, 0x4a87, 0x0, 0x1);
        gbc.writeMem(0xc183, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xfe3d, gbc.sp());
        EXPECT(0xc185, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc183));
        EXPECT(0xdd, gbc.readMem(0xc184));
        // CB DD 0176
        gbc.setState(0x2157, 0x217c, 0x3f20, 0x5792, 0xfc0e, 0x4d5a, 0x0, 0x1);
        gbc.writeMem(0x2157, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x217c, gbc.sp());
        EXPECT(0x2159, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0177
        gbc.setState(0x4692, 0x4791, 0xb380, 0xa48, 0x2cc9, 0x7731, 0x1, 0x0);
        gbc.writeMem(0x4692, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x4791, gbc.sp());
        EXPECT(0x4694, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0178
        gbc.setState(0xc6af, 0xd44, 0xd180, 0xacc3, 0xfaa6, 0x592f, 0x0, 0x0);
        gbc.writeMem(0xc6af, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xd44, gbc.sp());
        EXPECT(0xc6b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6af));
        EXPECT(0xdd, gbc.readMem(0xc6b0));
        // CB DD 0179
        gbc.setState(0xaa83, 0xf3a1, 0xea40, 0xb2fd, 0x867e, 0xe1bb, 0x1, 0x1);
        gbc.writeMem(0xaa83, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xf3a1, gbc.sp());
        EXPECT(0xaa85, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa83));
        EXPECT(0xdd, gbc.readMem(0xaa84));
        // CB DD 017A
        gbc.setState(0x907d, 0x65b9, 0xafa0, 0x50ff, 0xaa57, 0x3dcd, 0x1, 0x0);
        gbc.writeMem(0x907d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x65b9, gbc.sp());
        EXPECT(0x907f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x907d));
        EXPECT(0xdd, gbc.readMem(0x907e));
        // CB DD 017B
        gbc.setState(0x6b0, 0x6f94, 0x6510, 0xbe0b, 0x5b79, 0xbf66, 0x0, 0x0);
        gbc.writeMem(0x6b0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x6f94, gbc.sp());
        EXPECT(0x6b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 017C
        gbc.setState(0x47e7, 0x19c5, 0x8f40, 0x4898, 0x488f, 0x4025, 0x1, 0x1);
        gbc.writeMem(0x47e7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x19c5, gbc.sp());
        EXPECT(0x47e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 017D
        gbc.setState(0x228, 0xc221, 0xf350, 0x537, 0x7a7b, 0xb774, 0x1, 0x0);
        gbc.writeMem(0x228, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xc221, gbc.sp());
        EXPECT(0x22a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 017E
        gbc.setState(0xce25, 0x2e6b, 0xffe0, 0x50f, 0x565b, 0x518c, 0x1, 0x1);
        gbc.writeMem(0xce25, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x2e6b, gbc.sp());
        EXPECT(0xce27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce25));
        EXPECT(0xdd, gbc.readMem(0xce26));
        // CB DD 017F
        gbc.setState(0x3e1e, 0x7d28, 0xfa00, 0x27e6, 0x7750, 0x4da0, 0x0, 0x0);
        gbc.writeMem(0x3e1e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x7d28, gbc.sp());
        EXPECT(0x3e20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0180
        gbc.setState(0x8048, 0xf07f, 0x28d0, 0xa1, 0xe487, 0x23a7, 0x1, 0x1);
        gbc.writeMem(0x8048, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xf07f, gbc.sp());
        EXPECT(0x804a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8048));
        EXPECT(0xdd, gbc.readMem(0x8049));
        // CB DD 0181
        gbc.setState(0x63a7, 0xa4be, 0x4d50, 0x69a7, 0x50c1, 0xbc16, 0x0, 0x0);
        gbc.writeMem(0x63a7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xa4be, gbc.sp());
        EXPECT(0x63a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0182
        gbc.setState(0x91bd, 0xf850, 0xb6d0, 0x30a6, 0x7be, 0x83dc, 0x0, 0x1);
        gbc.writeMem(0x91bd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xf850, gbc.sp());
        EXPECT(0x91bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91bd));
        EXPECT(0xdd, gbc.readMem(0x91be));
        // CB DD 0183
        gbc.setState(0x2552, 0xee8f, 0xfa10, 0x426f, 0xd3da, 0x9429, 0x0, 0x1);
        gbc.writeMem(0x2552, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xee8f, gbc.sp());
        EXPECT(0x2554, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0184
        gbc.setState(0x1527, 0xe631, 0x69f0, 0x99d9, 0xf644, 0xae1, 0x0, 0x0);
        gbc.writeMem(0x1527, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xe631, gbc.sp());
        EXPECT(0x1529, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0185
        gbc.setState(0xceb, 0xdbee, 0x900, 0x2546, 0xcee, 0x2582, 0x1, 0x1);
        gbc.writeMem(0xceb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xdbee, gbc.sp());
        EXPECT(0xced, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0186
        gbc.setState(0x2d88, 0xd928, 0xd5a0, 0xbdd7, 0x5d06, 0x8d79, 0x0, 0x0);
        gbc.writeMem(0x2d88, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xd928, gbc.sp());
        EXPECT(0x2d8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0187
        gbc.setState(0xd41, 0x760b, 0x9d00, 0x179f, 0x1bbf, 0xdb71, 0x0, 0x0);
        gbc.writeMem(0xd41, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x760b, gbc.sp());
        EXPECT(0xd43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0188
        gbc.setState(0xc33d, 0xdc8d, 0xc050, 0x2077, 0x13b9, 0xb2da, 0x1, 0x1);
        gbc.writeMem(0xc33d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xdc8d, gbc.sp());
        EXPECT(0xc33f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc33d));
        EXPECT(0xdd, gbc.readMem(0xc33e));
        // CB DD 0189
        gbc.setState(0xcdd3, 0x675b, 0x4c50, 0x18e6, 0xb689, 0x3a39, 0x0, 0x1);
        gbc.writeMem(0xcdd3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x675b, gbc.sp());
        EXPECT(0xcdd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdd3));
        EXPECT(0xdd, gbc.readMem(0xcdd4));
        // CB DD 018A
        gbc.setState(0x5242, 0xd81, 0xbbe0, 0x3d92, 0xca51, 0xeb2f, 0x0, 0x0);
        gbc.writeMem(0x5242, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xd81, gbc.sp());
        EXPECT(0x5244, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 018B
        gbc.setState(0xb147, 0x6e85, 0x39a0, 0x90ef, 0xf2fe, 0xadd3, 0x0, 0x0);
        gbc.writeMem(0xb147, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x6e85, gbc.sp());
        EXPECT(0xb149, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb147));
        EXPECT(0xdd, gbc.readMem(0xb148));
        // CB DD 018C
        gbc.setState(0x7dcf, 0x98b0, 0xd80, 0xa472, 0x23de, 0x496b, 0x1, 0x0);
        gbc.writeMem(0x7dcf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x98b0, gbc.sp());
        EXPECT(0x7dd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 018E
        gbc.setState(0x254, 0xe2f0, 0x20a0, 0xdf0a, 0x8ffd, 0x8d62, 0x1, 0x1);
        gbc.writeMem(0x254, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xe2f0, gbc.sp());
        EXPECT(0x256, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 018F
        gbc.setState(0x4563, 0x3251, 0xba50, 0x7bc9, 0x15ab, 0x6aa5, 0x0, 0x1);
        gbc.writeMem(0x4563, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x3251, gbc.sp());
        EXPECT(0x4565, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0190
        gbc.setState(0xb8ec, 0xaa2e, 0xe1c0, 0x14b3, 0x4ea1, 0xaaa3, 0x0, 0x1);
        gbc.writeMem(0xb8ec, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xaa2e, gbc.sp());
        EXPECT(0xb8ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8ec));
        EXPECT(0xdd, gbc.readMem(0xb8ed));
        // CB DD 0191
        gbc.setState(0xa9a, 0x6e36, 0x7fb0, 0x51bb, 0x3430, 0xa5e5, 0x0, 0x1);
        gbc.writeMem(0xa9a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x6e36, gbc.sp());
        EXPECT(0xa9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0192
        gbc.setState(0x287e, 0x1b5c, 0x7800, 0xec69, 0x9de2, 0x53d6, 0x1, 0x1);
        gbc.writeMem(0x287e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x1b5c, gbc.sp());
        EXPECT(0x2880, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0195
        gbc.setState(0x4ce2, 0x71b, 0xf0e0, 0xffa0, 0x6aa3, 0x1dcf, 0x1, 0x1);
        gbc.writeMem(0x4ce2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x71b, gbc.sp());
        EXPECT(0x4ce4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0196
        gbc.setState(0x6ce7, 0x102e, 0xbce0, 0x9ae0, 0x36b5, 0x2a87, 0x1, 0x1);
        gbc.writeMem(0x6ce7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x102e, gbc.sp());
        EXPECT(0x6ce9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0198
        gbc.setState(0xd052, 0xe3cd, 0x9e30, 0xff0d, 0xdd3a, 0xbeaf, 0x0, 0x0);
        gbc.writeMem(0xd052, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xe3cd, gbc.sp());
        EXPECT(0xd054, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd052));
        EXPECT(0xdd, gbc.readMem(0xd053));
        // CB DD 0199
        gbc.setState(0x3755, 0x64f3, 0x2190, 0x1b25, 0x7047, 0x4749, 0x1, 0x1);
        gbc.writeMem(0x3755, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x64f3, gbc.sp());
        EXPECT(0x3757, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 019A
        gbc.setState(0x3ea9, 0x2a20, 0x88e0, 0xe5ff, 0x64ec, 0x1bd5, 0x1, 0x0);
        gbc.writeMem(0x3ea9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x2a20, gbc.sp());
        EXPECT(0x3eab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 019B
        gbc.setState(0x356e, 0xcbc3, 0xc9d0, 0x24db, 0xc01f, 0xcfe5, 0x0, 0x0);
        gbc.writeMem(0x356e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xcbc3, gbc.sp());
        EXPECT(0x3570, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 019C
        gbc.setState(0x2682, 0x9ab1, 0x3910, 0xddae, 0x2114, 0x39a7, 0x1, 0x1);
        gbc.writeMem(0x2682, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x9ab1, gbc.sp());
        EXPECT(0x2684, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 019D
        gbc.setState(0xbea9, 0x770e, 0x5590, 0x5aac, 0xeae5, 0xf747, 0x0, 0x1);
        gbc.writeMem(0xbea9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x770e, gbc.sp());
        EXPECT(0xbeab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbea9));
        EXPECT(0xdd, gbc.readMem(0xbeaa));
        // CB DD 019E
        gbc.setState(0x4ab2, 0xa053, 0x9650, 0xc4f2, 0xaff1, 0x172d, 0x1, 0x1);
        gbc.writeMem(0x4ab2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xa053, gbc.sp());
        EXPECT(0x4ab4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01A0
        gbc.setState(0x3baf, 0x93cf, 0xabd0, 0xdf09, 0x17b9, 0x2c1c, 0x0, 0x1);
        gbc.writeMem(0x3baf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x93cf, gbc.sp());
        EXPECT(0x3bb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01A1
        gbc.setState(0x2219, 0x6587, 0x42f0, 0x21c2, 0x57e1, 0x3d82, 0x0, 0x1);
        gbc.writeMem(0x2219, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x6587, gbc.sp());
        EXPECT(0x221b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01A2
        gbc.setState(0x4b1d, 0x3445, 0x21e0, 0x5904, 0xd766, 0x1599, 0x0, 0x0);
        gbc.writeMem(0x4b1d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x3445, gbc.sp());
        EXPECT(0x4b1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01A3
        gbc.setState(0x430c, 0x8873, 0xfde0, 0xc2fe, 0x20c8, 0xc89, 0x0, 0x0);
        gbc.writeMem(0x430c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x8873, gbc.sp());
        EXPECT(0x430e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01A4
        gbc.setState(0x2d51, 0xee42, 0xbc50, 0x9946, 0x6ee9, 0x9c03, 0x1, 0x1);
        gbc.writeMem(0x2d51, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xee42, gbc.sp());
        EXPECT(0x2d53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01A5
        gbc.setState(0xc77b, 0xc3ca, 0xd630, 0x7471, 0x746c, 0x817f, 0x1, 0x0);
        gbc.writeMem(0xc77b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xc3ca, gbc.sp());
        EXPECT(0xc77d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc77b));
        EXPECT(0xdd, gbc.readMem(0xc77c));
        // CB DD 01A6
        gbc.setState(0x4a65, 0xd68d, 0x61e0, 0x19a6, 0x2fdf, 0xa3af, 0x0, 0x0);
        gbc.writeMem(0x4a65, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xd68d, gbc.sp());
        EXPECT(0x4a67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01A7
        gbc.setState(0xbb1f, 0x9b88, 0x43e0, 0xe134, 0x6a0e, 0xc2d0, 0x0, 0x1);
        gbc.writeMem(0xbb1f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x9b88, gbc.sp());
        EXPECT(0xbb21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb1f));
        EXPECT(0xdd, gbc.readMem(0xbb20));
        // CB DD 01A8
        gbc.setState(0xb372, 0xad88, 0x6550, 0x45cb, 0x684d, 0x4ea5, 0x0, 0x0);
        gbc.writeMem(0xb372, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xad88, gbc.sp());
        EXPECT(0xb374, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb372));
        EXPECT(0xdd, gbc.readMem(0xb373));
        // CB DD 01A9
        gbc.setState(0x1974, 0xaa21, 0xb080, 0xd6f0, 0x89f9, 0x1b9, 0x0, 0x0);
        gbc.writeMem(0x1974, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xaa21, gbc.sp());
        EXPECT(0x1976, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01AB
        gbc.setState(0x1f4a, 0x2cc6, 0x1220, 0x3463, 0xdea7, 0x552, 0x1, 0x0);
        gbc.writeMem(0x1f4a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x2cc6, gbc.sp());
        EXPECT(0x1f4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01AC
        gbc.setState(0x5086, 0xaaa8, 0x5bf0, 0xc1f4, 0xeb99, 0x302f, 0x0, 0x0);
        gbc.writeMem(0x5086, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xaaa8, gbc.sp());
        EXPECT(0x5088, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01AD
        gbc.setState(0x228c, 0x2c23, 0x25f0, 0x9214, 0x8e47, 0xc0f9, 0x0, 0x0);
        gbc.writeMem(0x228c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x2c23, gbc.sp());
        EXPECT(0x228e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01AE
        gbc.setState(0x480f, 0x728e, 0x3c60, 0xdae7, 0xb690, 0x63b5, 0x0, 0x1);
        gbc.writeMem(0x480f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x728e, gbc.sp());
        EXPECT(0x4811, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01AF
        gbc.setState(0xbd18, 0xdff4, 0xf0, 0xc459, 0x2135, 0x2efb, 0x0, 0x1);
        gbc.writeMem(0xbd18, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xdff4, gbc.sp());
        EXPECT(0xbd1a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd18));
        EXPECT(0xdd, gbc.readMem(0xbd19));
        // CB DD 01B0
        gbc.setState(0xdd70, 0xef70, 0x7b00, 0xcaa, 0xbbf8, 0x6038, 0x0, 0x1);
        gbc.writeMem(0xdd70, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xef70, gbc.sp());
        EXPECT(0xdd72, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd70));
        EXPECT(0xdd, gbc.readMem(0xdd71));
        // CB DD 01B1
        gbc.setState(0x2b35, 0xf264, 0x25f0, 0x5d24, 0x2b8a, 0xdc1c, 0x1, 0x1);
        gbc.writeMem(0x2b35, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xf264, gbc.sp());
        EXPECT(0x2b37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01B2
        gbc.setState(0xd7bc, 0x1237, 0xe220, 0xf0a9, 0xd2bf, 0xfa1b, 0x1, 0x1);
        gbc.writeMem(0xd7bc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x1237, gbc.sp());
        EXPECT(0xd7be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7bc));
        EXPECT(0xdd, gbc.readMem(0xd7bd));
        // CB DD 01B3
        gbc.setState(0xaba3, 0x4822, 0xc2b0, 0x2719, 0x7124, 0x9f86, 0x0, 0x0);
        gbc.writeMem(0xaba3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x4822, gbc.sp());
        EXPECT(0xaba5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaba3));
        EXPECT(0xdd, gbc.readMem(0xaba4));
        // CB DD 01B4
        gbc.setState(0x4474, 0x88a3, 0xb560, 0xe214, 0xee99, 0x2750, 0x0, 0x0);
        gbc.writeMem(0x4474, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x88a3, gbc.sp());
        EXPECT(0x4476, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01B5
        gbc.setState(0x4539, 0x95e5, 0x2890, 0x101b, 0x6568, 0xa5a8, 0x0, 0x0);
        gbc.writeMem(0x4539, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x95e5, gbc.sp());
        EXPECT(0x453b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01B6
        gbc.setState(0x4b93, 0x6381, 0xf960, 0x105a, 0x181b, 0x246, 0x1, 0x1);
        gbc.writeMem(0x4b93, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x6381, gbc.sp());
        EXPECT(0x4b95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01B7
        gbc.setState(0x2216, 0xd0ea, 0x1750, 0x94e3, 0x8038, 0xb582, 0x0, 0x1);
        gbc.writeMem(0x2216, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xd0ea, gbc.sp());
        EXPECT(0x2218, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01B8
        gbc.setState(0xc327, 0xfb0d, 0xd540, 0x516c, 0x4fee, 0x85cb, 0x1, 0x0);
        gbc.writeMem(0xc327, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xfb0d, gbc.sp());
        EXPECT(0xc329, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc327));
        EXPECT(0xdd, gbc.readMem(0xc328));
        // CB DD 01B9
        gbc.setState(0xeb08, 0x897, 0x7f20, 0x361e, 0xb5ad, 0xad2f, 0x1, 0x0);
        gbc.writeMem(0xeb08, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x897, gbc.sp());
        EXPECT(0xeb0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb08));
        EXPECT(0xdd, gbc.readMem(0xeb09));
        // CB DD 01BA
        gbc.setState(0x7984, 0xe4d9, 0x82f0, 0x67f9, 0x6c06, 0x106c, 0x0, 0x1);
        gbc.writeMem(0x7984, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xe4d9, gbc.sp());
        EXPECT(0x7986, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01BB
        gbc.setState(0xe52, 0x9986, 0xf80, 0x1b55, 0x4837, 0x52dc, 0x1, 0x0);
        gbc.writeMem(0xe52, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x9986, gbc.sp());
        EXPECT(0xe54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01BC
        gbc.setState(0x749e, 0x9739, 0x2640, 0x9c7, 0x2259, 0x8ee3, 0x0, 0x0);
        gbc.writeMem(0x749e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x9739, gbc.sp());
        EXPECT(0x74a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01BD
        gbc.setState(0xbc37, 0xefa2, 0x6fa0, 0x20e4, 0xd897, 0x242, 0x1, 0x1);
        gbc.writeMem(0xbc37, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xefa2, gbc.sp());
        EXPECT(0xbc39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc37));
        EXPECT(0xdd, gbc.readMem(0xbc38));
        // CB DD 01BE
        gbc.setState(0x1fdc, 0x6292, 0x6750, 0xa770, 0xf5ff, 0xed0f, 0x1, 0x0);
        gbc.writeMem(0x1fdc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x6292, gbc.sp());
        EXPECT(0x1fde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01BF
        gbc.setState(0x91f5, 0xf222, 0xe8b0, 0xadff, 0xece2, 0xd5ad, 0x1, 0x1);
        gbc.writeMem(0x91f5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xf222, gbc.sp());
        EXPECT(0x91f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91f5));
        EXPECT(0xdd, gbc.readMem(0x91f6));
        // CB DD 01C1
        gbc.setState(0xe3d0, 0x9dd5, 0xe0c0, 0xeba1, 0xc4f, 0xf42d, 0x1, 0x1);
        gbc.writeMem(0xe3d0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x9dd5, gbc.sp());
        EXPECT(0xe3d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3d0));
        EXPECT(0xdd, gbc.readMem(0xe3d1));
        // CB DD 01C3
        gbc.setState(0x38f2, 0x7fbd, 0x5cf0, 0x7e9b, 0xd987, 0x4b0b, 0x0, 0x1);
        gbc.writeMem(0x38f2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x7fbd, gbc.sp());
        EXPECT(0x38f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01C4
        gbc.setState(0x48fd, 0x127f, 0xe900, 0x74ce, 0x5ad9, 0x836e, 0x1, 0x1);
        gbc.writeMem(0x48fd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x127f, gbc.sp());
        EXPECT(0x48ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01C5
        gbc.setState(0x4e2f, 0x1d3f, 0x2700, 0x9b2, 0x80ae, 0xbd0b, 0x1, 0x1);
        gbc.writeMem(0x4e2f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x1d3f, gbc.sp());
        EXPECT(0x4e31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01C6
        gbc.setState(0x85d9, 0xcfb9, 0xc7d0, 0x6f73, 0x1efc, 0xa763, 0x0, 0x0);
        gbc.writeMem(0x85d9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xcfb9, gbc.sp());
        EXPECT(0x85db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85d9));
        EXPECT(0xdd, gbc.readMem(0x85da));
        // CB DD 01C7
        gbc.setState(0xd871, 0xd82d, 0x4900, 0x4b92, 0x94d0, 0x963d, 0x1, 0x0);
        gbc.writeMem(0xd871, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xd82d, gbc.sp());
        EXPECT(0xd873, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd871));
        EXPECT(0xdd, gbc.readMem(0xd872));
        // CB DD 01C8
        gbc.setState(0x86b7, 0x6355, 0xeaf0, 0xa239, 0xc1f5, 0x8694, 0x1, 0x0);
        gbc.writeMem(0x86b7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x6355, gbc.sp());
        EXPECT(0x86b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86b7));
        EXPECT(0xdd, gbc.readMem(0x86b8));
        // CB DD 01C9
        gbc.setState(0x2886, 0xb066, 0xe4a0, 0xe37c, 0x7b7, 0x55c8, 0x1, 0x0);
        gbc.writeMem(0x2886, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xb066, gbc.sp());
        EXPECT(0x2888, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01CA
        gbc.setState(0x2ff7, 0x3226, 0xf460, 0x6547, 0x52fb, 0xef90, 0x1, 0x0);
        gbc.writeMem(0x2ff7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x3226, gbc.sp());
        EXPECT(0x2ff9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01CB
        gbc.setState(0x687b, 0x47c0, 0x3160, 0xae16, 0x320c, 0x260d, 0x0, 0x0);
        gbc.writeMem(0x687b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x47c0, gbc.sp());
        EXPECT(0x687d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01CC
        gbc.setState(0x3763, 0xd1d7, 0x91c0, 0xf38, 0x7a1b, 0x5c24, 0x0, 0x0);
        gbc.writeMem(0x3763, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xd1d7, gbc.sp());
        EXPECT(0x3765, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01CD
        gbc.setState(0x862a, 0x2112, 0xd4d0, 0xcb96, 0x7fcc, 0x43f6, 0x0, 0x1);
        gbc.writeMem(0x862a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x2112, gbc.sp());
        EXPECT(0x862c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x862a));
        EXPECT(0xdd, gbc.readMem(0x862b));
        // CB DD 01CE
        gbc.setState(0x2720, 0xb82b, 0xd930, 0xf7bf, 0xefeb, 0x504f, 0x1, 0x0);
        gbc.writeMem(0x2720, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xb82b, gbc.sp());
        EXPECT(0x2722, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01CF
        gbc.setState(0xdb70, 0xd289, 0xf770, 0xf9e7, 0xf8f6, 0x412a, 0x1, 0x0);
        gbc.writeMem(0xdb70, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xd289, gbc.sp());
        EXPECT(0xdb72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb70));
        EXPECT(0xdd, gbc.readMem(0xdb71));
        // CB DD 01D1
        gbc.setState(0xc176, 0xbf9, 0xb80, 0x4a69, 0xc6bf, 0xf8c2, 0x1, 0x1);
        gbc.writeMem(0xc176, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xbf9, gbc.sp());
        EXPECT(0xc178, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc176));
        EXPECT(0xdd, gbc.readMem(0xc177));
        // CB DD 01D2
        gbc.setState(0xbd6a, 0x4cfa, 0xb600, 0xb5d0, 0x1c1c, 0xf5f1, 0x1, 0x0);
        gbc.writeMem(0xbd6a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x4cfa, gbc.sp());
        EXPECT(0xbd6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd6a));
        EXPECT(0xdd, gbc.readMem(0xbd6b));
        // CB DD 01D3
        gbc.setState(0x7464, 0x11be, 0xfea0, 0x82bf, 0x6ac7, 0x5f35, 0x1, 0x0);
        gbc.writeMem(0x7464, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x11be, gbc.sp());
        EXPECT(0x7466, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01D4
        gbc.setState(0x4c15, 0x1d78, 0x23f0, 0x930b, 0xbd0d, 0x1c2, 0x1, 0x0);
        gbc.writeMem(0x4c15, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x1d78, gbc.sp());
        EXPECT(0x4c17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01D5
        gbc.setState(0xb48f, 0xc63f, 0x5320, 0x3db6, 0x1c12, 0xbf1d, 0x1, 0x0);
        gbc.writeMem(0xb48f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xc63f, gbc.sp());
        EXPECT(0xb491, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb48f));
        EXPECT(0xdd, gbc.readMem(0xb490));
        // CB DD 01D7
        gbc.setState(0x188e, 0xf5df, 0x21f0, 0x6c1, 0x3c3e, 0xa6f1, 0x1, 0x0);
        gbc.writeMem(0x188e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xf5df, gbc.sp());
        EXPECT(0x1890, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01D8
        gbc.setState(0x5f3a, 0x9e96, 0xd5e0, 0x3fcd, 0x8a26, 0xa930, 0x1, 0x1);
        gbc.writeMem(0x5f3a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x9e96, gbc.sp());
        EXPECT(0x5f3c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01D9
        gbc.setState(0x63c, 0x7be0, 0x1ca0, 0xe5c9, 0xe9f6, 0x38cd, 0x1, 0x1);
        gbc.writeMem(0x63c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x7be0, gbc.sp());
        EXPECT(0x63e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01DA
        gbc.setState(0xb049, 0xb0b2, 0x2220, 0x4f0e, 0x3e7d, 0xa866, 0x0, 0x1);
        gbc.writeMem(0xb049, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xb0b2, gbc.sp());
        EXPECT(0xb04b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb049));
        EXPECT(0xdd, gbc.readMem(0xb04a));
        // CB DD 01DB
        gbc.setState(0xcab8, 0x47d7, 0xa9e0, 0x81db, 0x648d, 0x53b6, 0x1, 0x0);
        gbc.writeMem(0xcab8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x47d7, gbc.sp());
        EXPECT(0xcaba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcab8));
        EXPECT(0xdd, gbc.readMem(0xcab9));
        // CB DD 01DC
        gbc.setState(0x1b0b, 0x9fb8, 0x1180, 0xeae1, 0xa596, 0xd387, 0x0, 0x0);
        gbc.writeMem(0x1b0b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x9fb8, gbc.sp());
        EXPECT(0x1b0d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01DD
        gbc.setState(0xd840, 0xd5e7, 0x3540, 0xc2ec, 0xf97e, 0x384e, 0x1, 0x0);
        gbc.writeMem(0xd840, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xd5e7, gbc.sp());
        EXPECT(0xd842, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd840));
        EXPECT(0xdd, gbc.readMem(0xd841));
        // CB DD 01DE
        gbc.setState(0xc24f, 0x817a, 0xf500, 0x4d4a, 0x83bc, 0x7db7, 0x0, 0x1);
        gbc.writeMem(0xc24f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x817a, gbc.sp());
        EXPECT(0xc251, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc24f));
        EXPECT(0xdd, gbc.readMem(0xc250));
        // CB DD 01DF
        gbc.setState(0xa45e, 0x6988, 0xe4b0, 0x99cc, 0x670f, 0x1650, 0x1, 0x0);
        gbc.writeMem(0xa45e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x6988, gbc.sp());
        EXPECT(0xa460, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa45e));
        EXPECT(0xdd, gbc.readMem(0xa45f));
        // CB DD 01E0
        gbc.setState(0xc75e, 0xa9f5, 0xc980, 0x7ecc, 0x2d9e, 0xb8ba, 0x1, 0x0);
        gbc.writeMem(0xc75e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xa9f5, gbc.sp());
        EXPECT(0xc760, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc75e));
        EXPECT(0xdd, gbc.readMem(0xc75f));
        // CB DD 01E1
        gbc.setState(0x18ea, 0x7d4f, 0x7920, 0x7a2d, 0x559c, 0x7563, 0x0, 0x0);
        gbc.writeMem(0x18ea, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x7d4f, gbc.sp());
        EXPECT(0x18ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01E2
        gbc.setState(0x9fe0, 0x37b6, 0x20d0, 0x6bb8, 0xc710, 0x7078, 0x1, 0x1);
        gbc.writeMem(0x9fe0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x37b6, gbc.sp());
        EXPECT(0x9fe2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fe0));
        EXPECT(0xdd, gbc.readMem(0x9fe1));
        // CB DD 01E3
        gbc.setState(0x2a5b, 0xb95e, 0xb10, 0xb4ae, 0xb223, 0x6972, 0x0, 0x0);
        gbc.writeMem(0x2a5b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xb95e, gbc.sp());
        EXPECT(0x2a5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01E4
        gbc.setState(0xc20d, 0x8c0f, 0xc290, 0x314d, 0x52b2, 0x302f, 0x1, 0x0);
        gbc.writeMem(0xc20d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x8c0f, gbc.sp());
        EXPECT(0xc20f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc20d));
        EXPECT(0xdd, gbc.readMem(0xc20e));
        // CB DD 01E5
        gbc.setState(0xea2c, 0x8839, 0xebe0, 0xc219, 0x76aa, 0x1bb7, 0x0, 0x1);
        gbc.writeMem(0xea2c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x8839, gbc.sp());
        EXPECT(0xea2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea2c));
        EXPECT(0xdd, gbc.readMem(0xea2d));
        // CB DD 01E6
        gbc.setState(0x5d55, 0xb322, 0x70c0, 0x22d, 0xed9a, 0x86aa, 0x0, 0x1);
        gbc.writeMem(0x5d55, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xb322, gbc.sp());
        EXPECT(0x5d57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01E9
        gbc.setState(0x666a, 0xce86, 0xee50, 0xce6f, 0xdc86, 0x25ee, 0x0, 0x1);
        gbc.writeMem(0x666a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xce86, gbc.sp());
        EXPECT(0x666c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01EA
        gbc.setState(0xd218, 0x1c8a, 0x5350, 0x5423, 0x8d0a, 0x5d17, 0x1, 0x0);
        gbc.writeMem(0xd218, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x1c8a, gbc.sp());
        EXPECT(0xd21a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd218));
        EXPECT(0xdd, gbc.readMem(0xd219));
        // CB DD 01EB
        gbc.setState(0x7756, 0x1d4, 0xf620, 0x4e61, 0x1723, 0xffca, 0x0, 0x0);
        gbc.writeMem(0x7756, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x1d4, gbc.sp());
        EXPECT(0x7758, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01EC
        gbc.setState(0x8ef5, 0x4406, 0x6cd0, 0x2e26, 0x5143, 0x49ee, 0x0, 0x1);
        gbc.writeMem(0x8ef5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x4406, gbc.sp());
        EXPECT(0x8ef7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ef5));
        EXPECT(0xdd, gbc.readMem(0x8ef6));
        // CB DD 01ED
        gbc.setState(0xdc84, 0xa95, 0xa330, 0x6142, 0x67c4, 0xefb2, 0x0, 0x1);
        gbc.writeMem(0xdc84, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xa95, gbc.sp());
        EXPECT(0xdc86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc84));
        EXPECT(0xdd, gbc.readMem(0xdc85));
        // CB DD 01EE
        gbc.setState(0x9ea, 0x81b8, 0xe740, 0x2f8, 0x2811, 0x7797, 0x0, 0x0);
        gbc.writeMem(0x9ea, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x81b8, gbc.sp());
        EXPECT(0x9ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01EF
        gbc.setState(0x5235, 0x7304, 0xc4c0, 0xf298, 0x8a2a, 0x6bac, 0x0, 0x1);
        gbc.writeMem(0x5235, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x7304, gbc.sp());
        EXPECT(0x5237, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01F0
        gbc.setState(0xba3f, 0x6f8d, 0xdbe0, 0x838c, 0x44f9, 0x68ab, 0x0, 0x1);
        gbc.writeMem(0xba3f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x6f8d, gbc.sp());
        EXPECT(0xba41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba3f));
        EXPECT(0xdd, gbc.readMem(0xba40));
        // CB DD 01F1
        gbc.setState(0x6086, 0xa867, 0x2c90, 0x2de7, 0x1a1e, 0x53fe, 0x1, 0x1);
        gbc.writeMem(0x6086, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xa867, gbc.sp());
        EXPECT(0x6088, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01F2
        gbc.setState(0xe191, 0x6306, 0x92f0, 0x236e, 0xb5fc, 0x2366, 0x1, 0x1);
        gbc.writeMem(0xe191, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x6306, gbc.sp());
        EXPECT(0xe193, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe191));
        EXPECT(0xdd, gbc.readMem(0xe192));
        // CB DD 01F3
        gbc.setState(0x243f, 0x5dd2, 0x65f0, 0x2c00, 0x722b, 0xaff8, 0x0, 0x0);
        gbc.writeMem(0x243f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x5dd2, gbc.sp());
        EXPECT(0x2441, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01F4
        gbc.setState(0xb7db, 0xffe4, 0xce70, 0xf088, 0x5d4f, 0x390e, 0x1, 0x1);
        gbc.writeMem(0xb7db, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xffe4, gbc.sp());
        EXPECT(0xb7dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7db));
        EXPECT(0xdd, gbc.readMem(0xb7dc));
        // CB DD 01F5
        gbc.setState(0xc41e, 0xd78b, 0xbdb0, 0x1055, 0xa31f, 0x9b05, 0x0, 0x1);
        gbc.writeMem(0xc41e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xd78b, gbc.sp());
        EXPECT(0xc420, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc41e));
        EXPECT(0xdd, gbc.readMem(0xc41f));
        // CB DD 01F6
        gbc.setState(0x42b1, 0x9764, 0xe560, 0x72c1, 0xa4a3, 0x5cf3, 0x0, 0x1);
        gbc.writeMem(0x42b1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x9764, gbc.sp());
        EXPECT(0x42b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 01F7
        gbc.setState(0xa190, 0xbc1d, 0x5e00, 0x2268, 0xe6aa, 0x8ffd, 0x1, 0x1);
        gbc.writeMem(0xa190, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xbc1d, gbc.sp());
        EXPECT(0xa192, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa190));
        EXPECT(0xdd, gbc.readMem(0xa191));
        // CB DD 01F8
        gbc.setState(0xcd72, 0xe36d, 0x7fb0, 0x52af, 0xdb3d, 0x5e91, 0x1, 0x0);
        gbc.writeMem(0xcd72, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xe36d, gbc.sp());
        EXPECT(0xcd74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd72));
        EXPECT(0xdd, gbc.readMem(0xcd73));
        // CB DD 01F9
        gbc.setState(0xb24b, 0xdbfb, 0x9a70, 0xea78, 0xb997, 0x3b97, 0x0, 0x1);
        gbc.writeMem(0xb24b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xdbfb, gbc.sp());
        EXPECT(0xb24d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb24b));
        EXPECT(0xdd, gbc.readMem(0xb24c));
        // CB DD 01FA
        gbc.setState(0xd311, 0x1519, 0x6a20, 0x8810, 0x70f3, 0x1f0a, 0x1, 0x0);
        gbc.writeMem(0xd311, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x1519, gbc.sp());
        EXPECT(0xd313, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd311));
        EXPECT(0xdd, gbc.readMem(0xd312));
        // CB DD 01FB
        gbc.setState(0x4a90, 0x45f8, 0x1d10, 0xeb2d, 0xd092, 0x1aaa, 0x1, 0x1);
        gbc.writeMem(0x4a90, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x45f8, gbc.sp());
        EXPECT(0x4a92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01FC
        gbc.setState(0x9f14, 0x34fe, 0x3890, 0x226f, 0x663b, 0x9f70, 0x0, 0x1);
        gbc.writeMem(0x9f14, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x34fe, gbc.sp());
        EXPECT(0x9f16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f14));
        EXPECT(0xdd, gbc.readMem(0x9f15));
        // CB DD 01FD
        gbc.setState(0x6523, 0x466a, 0x5930, 0xdc99, 0x80bb, 0x5284, 0x1, 0x0);
        gbc.writeMem(0x6523, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x466a, gbc.sp());
        EXPECT(0x6525, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01FE
        gbc.setState(0x4022, 0x55f2, 0xbf70, 0x474e, 0x0, 0x466e, 0x1, 0x1);
        gbc.writeMem(0x4022, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x55f2, gbc.sp());
        EXPECT(0x4024, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 01FF
        gbc.setState(0x1d67, 0x50b6, 0x87b0, 0xa846, 0xf9b1, 0x5fc8, 0x0, 0x0);
        gbc.writeMem(0x1d67, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x50b6, gbc.sp());
        EXPECT(0x1d69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0200
        gbc.setState(0xd9fa, 0x757a, 0xe8b0, 0xb9e7, 0xc8c5, 0x523e, 0x1, 0x1);
        gbc.writeMem(0xd9fa, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x757a, gbc.sp());
        EXPECT(0xd9fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9fa));
        EXPECT(0xdd, gbc.readMem(0xd9fb));
        // CB DD 0201
        gbc.setState(0xd6ef, 0xa50b, 0x2ff0, 0x5150, 0xf11a, 0x82ee, 0x0, 0x1);
        gbc.writeMem(0xd6ef, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xa50b, gbc.sp());
        EXPECT(0xd6f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6ef));
        EXPECT(0xdd, gbc.readMem(0xd6f0));
        // CB DD 0202
        gbc.setState(0x3e08, 0x2c8, 0xe80, 0xb03, 0x9ab0, 0x7c83, 0x1, 0x0);
        gbc.writeMem(0x3e08, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x2c8, gbc.sp());
        EXPECT(0x3e0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0204
        gbc.setState(0x27e, 0x9ad0, 0x6c30, 0x6489, 0x1f7d, 0xe76e, 0x0, 0x0);
        gbc.writeMem(0x27e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x9ad0, gbc.sp());
        EXPECT(0x280, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0205
        gbc.setState(0xeeac, 0xb4b7, 0xd450, 0x42ec, 0xbec9, 0x3f13, 0x1, 0x0);
        gbc.writeMem(0xeeac, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xb4b7, gbc.sp());
        EXPECT(0xeeae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeeac));
        EXPECT(0xdd, gbc.readMem(0xeead));
        // CB DD 0206
        gbc.setState(0x4b66, 0x9569, 0xddb0, 0xd808, 0xf991, 0x221, 0x0, 0x1);
        gbc.writeMem(0x4b66, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x9569, gbc.sp());
        EXPECT(0x4b68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0207
        gbc.setState(0x7b4f, 0x2c43, 0x71d0, 0xee85, 0xbe3a, 0xdedb, 0x0, 0x1);
        gbc.writeMem(0x7b4f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x2c43, gbc.sp());
        EXPECT(0x7b51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0208
        gbc.setState(0xdaaf, 0x557a, 0xea40, 0xce09, 0x8449, 0xd814, 0x0, 0x0);
        gbc.writeMem(0xdaaf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x557a, gbc.sp());
        EXPECT(0xdab1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdaaf));
        EXPECT(0xdd, gbc.readMem(0xdab0));
        // CB DD 0209
        gbc.setState(0xd828, 0x350f, 0x1450, 0x148e, 0x36a6, 0x713a, 0x0, 0x0);
        gbc.writeMem(0xd828, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x350f, gbc.sp());
        EXPECT(0xd82a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd828));
        EXPECT(0xdd, gbc.readMem(0xd829));
        // CB DD 020A
        gbc.setState(0x56cd, 0x42d9, 0xaa20, 0x3918, 0x4d9a, 0xbf6e, 0x0, 0x1);
        gbc.writeMem(0x56cd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x42d9, gbc.sp());
        EXPECT(0x56cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 020B
        gbc.setState(0x697a, 0x588e, 0x6d60, 0x6b2e, 0x3001, 0x2f19, 0x1, 0x0);
        gbc.writeMem(0x697a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x588e, gbc.sp());
        EXPECT(0x697c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 020C
        gbc.setState(0x401f, 0x37ec, 0xe970, 0x3e26, 0x46cf, 0xb52f, 0x0, 0x1);
        gbc.writeMem(0x401f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x37ec, gbc.sp());
        EXPECT(0x4021, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 020D
        gbc.setState(0x3a65, 0xb906, 0xdb70, 0xf337, 0x5f1e, 0x63c5, 0x0, 0x1);
        gbc.writeMem(0x3a65, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xb906, gbc.sp());
        EXPECT(0x3a67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 020F
        gbc.setState(0xe8f8, 0x3cdb, 0x94a0, 0xf038, 0x9e68, 0xb318, 0x0, 0x1);
        gbc.writeMem(0xe8f8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x3cdb, gbc.sp());
        EXPECT(0xe8fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8f8));
        EXPECT(0xdd, gbc.readMem(0xe8f9));
        // CB DD 0210
        gbc.setState(0x7edd, 0x9405, 0xc8f0, 0xc98a, 0xeb90, 0xe177, 0x1, 0x1);
        gbc.writeMem(0x7edd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x9405, gbc.sp());
        EXPECT(0x7edf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0211
        gbc.setState(0x52d1, 0xac1f, 0x91c0, 0xb215, 0x5722, 0x5ee1, 0x1, 0x0);
        gbc.writeMem(0x52d1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xac1f, gbc.sp());
        EXPECT(0x52d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0212
        gbc.setState(0x7971, 0x753b, 0x8180, 0x151a, 0x232c, 0xd31b, 0x1, 0x0);
        gbc.writeMem(0x7971, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x753b, gbc.sp());
        EXPECT(0x7973, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0213
        gbc.setState(0xbcc4, 0xd47e, 0xa5d0, 0x640f, 0x1c0d, 0xb864, 0x1, 0x1);
        gbc.writeMem(0xbcc4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xd47e, gbc.sp());
        EXPECT(0xbcc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcc4));
        EXPECT(0xdd, gbc.readMem(0xbcc5));
        // CB DD 0214
        gbc.setState(0x1be2, 0x7877, 0x1da0, 0x96f5, 0xde1c, 0x4a6, 0x1, 0x0);
        gbc.writeMem(0x1be2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x7877, gbc.sp());
        EXPECT(0x1be4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0215
        gbc.setState(0xacaf, 0x8c90, 0x4040, 0x7b28, 0xd3a9, 0x471f, 0x1, 0x0);
        gbc.writeMem(0xacaf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x8c90, gbc.sp());
        EXPECT(0xacb1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacaf));
        EXPECT(0xdd, gbc.readMem(0xacb0));
        // CB DD 0216
        gbc.setState(0x9eef, 0x8e7b, 0x5510, 0x38d8, 0xb8eb, 0x2ae3, 0x1, 0x1);
        gbc.writeMem(0x9eef, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x8e7b, gbc.sp());
        EXPECT(0x9ef1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9eef));
        EXPECT(0xdd, gbc.readMem(0x9ef0));
        // CB DD 0217
        gbc.setState(0xb7b2, 0xce0f, 0xdb40, 0x6cd0, 0xa632, 0xf471, 0x1, 0x0);
        gbc.writeMem(0xb7b2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xce0f, gbc.sp());
        EXPECT(0xb7b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7b2));
        EXPECT(0xdd, gbc.readMem(0xb7b3));
        // CB DD 0218
        gbc.setState(0x8fa, 0xff6d, 0xaaa0, 0x4211, 0xea41, 0xd8a7, 0x1, 0x1);
        gbc.writeMem(0x8fa, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xff6d, gbc.sp());
        EXPECT(0x8fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0219
        gbc.setState(0x745e, 0x204d, 0x26b0, 0x7c59, 0xbfd7, 0x4528, 0x0, 0x1);
        gbc.writeMem(0x745e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x204d, gbc.sp());
        EXPECT(0x7460, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 021A
        gbc.setState(0x371f, 0x427, 0x1390, 0x969a, 0xb5a9, 0xa216, 0x0, 0x0);
        gbc.writeMem(0x371f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x427, gbc.sp());
        EXPECT(0x3721, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 021B
        gbc.setState(0xa9d2, 0xf2dc, 0x1cf0, 0x9abd, 0xa6ff, 0x6127, 0x1, 0x0);
        gbc.writeMem(0xa9d2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xf2dc, gbc.sp());
        EXPECT(0xa9d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9d2));
        EXPECT(0xdd, gbc.readMem(0xa9d3));
        // CB DD 021D
        gbc.setState(0xabd8, 0x51e1, 0x1250, 0x98ff, 0x52ea, 0x387, 0x1, 0x1);
        gbc.writeMem(0xabd8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x51e1, gbc.sp());
        EXPECT(0xabda, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabd8));
        EXPECT(0xdd, gbc.readMem(0xabd9));
        // CB DD 021E
        gbc.setState(0xe8d0, 0x815e, 0xe270, 0xb28, 0x7fa4, 0xe8a1, 0x0, 0x0);
        gbc.writeMem(0xe8d0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x815e, gbc.sp());
        EXPECT(0xe8d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8d0));
        EXPECT(0xdd, gbc.readMem(0xe8d1));
        // CB DD 021F
        gbc.setState(0x1f1d, 0x9225, 0x3240, 0xe06a, 0xcc9d, 0x6ace, 0x1, 0x0);
        gbc.writeMem(0x1f1d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x9225, gbc.sp());
        EXPECT(0x1f1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0220
        gbc.setState(0x5e58, 0x6afc, 0xe460, 0x5eee, 0x5f08, 0x108f, 0x1, 0x1);
        gbc.writeMem(0x5e58, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x6afc, gbc.sp());
        EXPECT(0x5e5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0222
        gbc.setState(0x7f2a, 0x3fdb, 0x540, 0x698b, 0x279e, 0xb69e, 0x0, 0x0);
        gbc.writeMem(0x7f2a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x3fdb, gbc.sp());
        EXPECT(0x7f2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0223
        gbc.setState(0x7210, 0x77f8, 0x6270, 0x1036, 0x3547, 0x8880, 0x1, 0x0);
        gbc.writeMem(0x7210, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x77f8, gbc.sp());
        EXPECT(0x7212, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0224
        gbc.setState(0xa8c1, 0x704f, 0x8880, 0xea87, 0xa7f4, 0xd986, 0x1, 0x0);
        gbc.writeMem(0xa8c1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x704f, gbc.sp());
        EXPECT(0xa8c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8c1));
        EXPECT(0xdd, gbc.readMem(0xa8c2));
        // CB DD 0225
        gbc.setState(0x219b, 0x2617, 0x2af0, 0x638a, 0x658d, 0xa70a, 0x0, 0x0);
        gbc.writeMem(0x219b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x2617, gbc.sp());
        EXPECT(0x219d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0226
        gbc.setState(0x19eb, 0x4fab, 0x49a0, 0x60a4, 0xa9e, 0x28ea, 0x1, 0x1);
        gbc.writeMem(0x19eb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x4fab, gbc.sp());
        EXPECT(0x19ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0227
        gbc.setState(0x9c98, 0x761f, 0xfe00, 0xf25, 0x1f05, 0x12e3, 0x1, 0x0);
        gbc.writeMem(0x9c98, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x761f, gbc.sp());
        EXPECT(0x9c9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c98));
        EXPECT(0xdd, gbc.readMem(0x9c99));
        // CB DD 0228
        gbc.setState(0x903f, 0x89cc, 0x3c10, 0x3583, 0x1c88, 0xe8f7, 0x1, 0x1);
        gbc.writeMem(0x903f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x89cc, gbc.sp());
        EXPECT(0x9041, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x903f));
        EXPECT(0xdd, gbc.readMem(0x9040));
        // CB DD 0229
        gbc.setState(0x2d51, 0x3731, 0x7140, 0x9bf, 0xafb3, 0x1905, 0x1, 0x0);
        gbc.writeMem(0x2d51, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x3731, gbc.sp());
        EXPECT(0x2d53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 022A
        gbc.setState(0x56e4, 0xfc4a, 0x53e0, 0xcd30, 0x9d6, 0xb8ee, 0x1, 0x0);
        gbc.writeMem(0x56e4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xfc4a, gbc.sp());
        EXPECT(0x56e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 022B
        gbc.setState(0x79f0, 0x624b, 0x7b60, 0xf0aa, 0xec4c, 0xaaf3, 0x1, 0x1);
        gbc.writeMem(0x79f0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x624b, gbc.sp());
        EXPECT(0x79f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 022C
        gbc.setState(0x6588, 0x5d6a, 0xcc90, 0x5041, 0x5e6, 0x2c41, 0x1, 0x0);
        gbc.writeMem(0x6588, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x5d6a, gbc.sp());
        EXPECT(0x658a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 022D
        gbc.setState(0xa716, 0x570f, 0x13c0, 0xcfd9, 0x5e9b, 0xc58, 0x0, 0x0);
        gbc.writeMem(0xa716, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x570f, gbc.sp());
        EXPECT(0xa718, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa716));
        EXPECT(0xdd, gbc.readMem(0xa717));
        // CB DD 022E
        gbc.setState(0xd365, 0x5022, 0xd160, 0x31af, 0xcbfa, 0x48e0, 0x1, 0x0);
        gbc.writeMem(0xd365, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x5022, gbc.sp());
        EXPECT(0xd367, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd365));
        EXPECT(0xdd, gbc.readMem(0xd366));
        // CB DD 0230
        gbc.setState(0x212f, 0x60fd, 0x7780, 0x56cf, 0x359b, 0xc7f3, 0x1, 0x0);
        gbc.writeMem(0x212f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x60fd, gbc.sp());
        EXPECT(0x2131, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0231
        gbc.setState(0xc55d, 0x5515, 0x7680, 0x4e10, 0x20f1, 0xaac4, 0x0, 0x0);
        gbc.writeMem(0xc55d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x5515, gbc.sp());
        EXPECT(0xc55f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc55d));
        EXPECT(0xdd, gbc.readMem(0xc55e));
        // CB DD 0232
        gbc.setState(0x1cf0, 0x24a, 0x5d60, 0xf2b5, 0x2081, 0xc404, 0x1, 0x0);
        gbc.writeMem(0x1cf0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x24a, gbc.sp());
        EXPECT(0x1cf2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0233
        gbc.setState(0x995d, 0x5ddf, 0xe3e0, 0x8569, 0x566, 0x35d0, 0x1, 0x0);
        gbc.writeMem(0x995d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x5ddf, gbc.sp());
        EXPECT(0x995f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x995d));
        EXPECT(0xdd, gbc.readMem(0x995e));
        // CB DD 0234
        gbc.setState(0x7fdc, 0xff19, 0xd3a0, 0xbed4, 0x76ce, 0xe2a7, 0x0, 0x0);
        gbc.writeMem(0x7fdc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xff19, gbc.sp());
        EXPECT(0x7fde, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0236
        gbc.setState(0xef41, 0xb46b, 0xc670, 0x3478, 0xdfe0, 0x7997, 0x0, 0x0);
        gbc.writeMem(0xef41, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xb46b, gbc.sp());
        EXPECT(0xef43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef41));
        EXPECT(0xdd, gbc.readMem(0xef42));
        // CB DD 0237
        gbc.setState(0x747c, 0xcf13, 0x53d0, 0xb6b7, 0x242a, 0xc6a8, 0x1, 0x0);
        gbc.writeMem(0x747c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xcf13, gbc.sp());
        EXPECT(0x747e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0239
        gbc.setState(0x4e9d, 0x68f7, 0xa830, 0x1819, 0x5df2, 0x55f1, 0x0, 0x0);
        gbc.writeMem(0x4e9d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x68f7, gbc.sp());
        EXPECT(0x4e9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 023A
        gbc.setState(0x1fe3, 0x6608, 0x7520, 0x1253, 0x19fc, 0x1ba0, 0x1, 0x1);
        gbc.writeMem(0x1fe3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x6608, gbc.sp());
        EXPECT(0x1fe5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 023B
        gbc.setState(0xe5ab, 0xe708, 0x79c0, 0xc349, 0x1e74, 0xcea2, 0x0, 0x0);
        gbc.writeMem(0xe5ab, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xe708, gbc.sp());
        EXPECT(0xe5ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5ab));
        EXPECT(0xdd, gbc.readMem(0xe5ac));
        // CB DD 023C
        gbc.setState(0xc4a5, 0xd2ed, 0xcff0, 0x7f6d, 0xb0ad, 0x1f4c, 0x0, 0x0);
        gbc.writeMem(0xc4a5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xd2ed, gbc.sp());
        EXPECT(0xc4a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4a5));
        EXPECT(0xdd, gbc.readMem(0xc4a6));
        // CB DD 023D
        gbc.setState(0xef8f, 0x4416, 0x1040, 0x57d8, 0x7934, 0x4e73, 0x1, 0x0);
        gbc.writeMem(0xef8f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x4416, gbc.sp());
        EXPECT(0xef91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef8f));
        EXPECT(0xdd, gbc.readMem(0xef90));
        // CB DD 023E
        gbc.setState(0x65a8, 0x49cb, 0x9290, 0xad45, 0xfceb, 0xd122, 0x0, 0x1);
        gbc.writeMem(0x65a8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x49cb, gbc.sp());
        EXPECT(0x65aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 023F
        gbc.setState(0x96d1, 0x7160, 0x3190, 0xb28b, 0x2a86, 0xa3c5, 0x1, 0x0);
        gbc.writeMem(0x96d1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x7160, gbc.sp());
        EXPECT(0x96d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96d1));
        EXPECT(0xdd, gbc.readMem(0x96d2));
        // CB DD 0240
        gbc.setState(0xceac, 0xb020, 0x4d60, 0xe0fa, 0x33a2, 0x833f, 0x1, 0x1);
        gbc.writeMem(0xceac, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xb020, gbc.sp());
        EXPECT(0xceae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xceac));
        EXPECT(0xdd, gbc.readMem(0xcead));
        // CB DD 0241
        gbc.setState(0xbf39, 0xc1d9, 0xd920, 0x1caf, 0x4538, 0xf0bd, 0x1, 0x0);
        gbc.writeMem(0xbf39, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xc1d9, gbc.sp());
        EXPECT(0xbf3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf39));
        EXPECT(0xdd, gbc.readMem(0xbf3a));
        // CB DD 0242
        gbc.setState(0x13d9, 0xc301, 0x1520, 0x7e5a, 0x61eb, 0xda3, 0x1, 0x1);
        gbc.writeMem(0x13d9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xc301, gbc.sp());
        EXPECT(0x13db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0243
        gbc.setState(0x24f3, 0xd648, 0x48f0, 0x294b, 0xf17e, 0x659f, 0x1, 0x0);
        gbc.writeMem(0x24f3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xd648, gbc.sp());
        EXPECT(0x24f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0244
        gbc.setState(0xb1d7, 0xf852, 0xea80, 0xba63, 0x607e, 0xd87d, 0x0, 0x0);
        gbc.writeMem(0xb1d7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xf852, gbc.sp());
        EXPECT(0xb1d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1d7));
        EXPECT(0xdd, gbc.readMem(0xb1d8));
        // CB DD 0245
        gbc.setState(0xda54, 0x521c, 0x2390, 0x6555, 0xf590, 0x2a70, 0x0, 0x0);
        gbc.writeMem(0xda54, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x521c, gbc.sp());
        EXPECT(0xda56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda54));
        EXPECT(0xdd, gbc.readMem(0xda55));
        // CB DD 0246
        gbc.setState(0x2059, 0xbdf, 0xea0, 0xf0e9, 0x51c5, 0xada3, 0x1, 0x1);
        gbc.writeMem(0x2059, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xbdf, gbc.sp());
        EXPECT(0x205b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0247
        gbc.setState(0xbd33, 0x1e0d, 0x5250, 0xb3dd, 0x3dc9, 0x670e, 0x0, 0x1);
        gbc.writeMem(0xbd33, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x1e0d, gbc.sp());
        EXPECT(0xbd35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd33));
        EXPECT(0xdd, gbc.readMem(0xbd34));
        // CB DD 0248
        gbc.setState(0x58a2, 0xccf6, 0x6c00, 0xa9b4, 0xfced, 0xa2d8, 0x1, 0x1);
        gbc.writeMem(0x58a2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xccf6, gbc.sp());
        EXPECT(0x58a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0249
        gbc.setState(0x4ab7, 0xdc73, 0x5610, 0xec1e, 0x4b, 0x262a, 0x0, 0x0);
        gbc.writeMem(0x4ab7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xdc73, gbc.sp());
        EXPECT(0x4ab9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 024A
        gbc.setState(0x75d4, 0x3221, 0x15a0, 0x22d8, 0x5139, 0x38ef, 0x1, 0x0);
        gbc.writeMem(0x75d4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x3221, gbc.sp());
        EXPECT(0x75d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 024B
        gbc.setState(0x1d1f, 0x250c, 0x54e0, 0x8f32, 0x20ad, 0x9190, 0x0, 0x1);
        gbc.writeMem(0x1d1f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x250c, gbc.sp());
        EXPECT(0x1d21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 024C
        gbc.setState(0x2a91, 0xc38a, 0xd60, 0xca2b, 0xc476, 0x69d1, 0x0, 0x1);
        gbc.writeMem(0x2a91, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xc38a, gbc.sp());
        EXPECT(0x2a93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 024D
        gbc.setState(0x93d5, 0xc5f2, 0x48e0, 0x8b99, 0xf39c, 0xa99e, 0x0, 0x0);
        gbc.writeMem(0x93d5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xc5f2, gbc.sp());
        EXPECT(0x93d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93d5));
        EXPECT(0xdd, gbc.readMem(0x93d6));
        // CB DD 024E
        gbc.setState(0xbefb, 0x5976, 0x6420, 0x6e26, 0x7461, 0xa482, 0x1, 0x1);
        gbc.writeMem(0xbefb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x5976, gbc.sp());
        EXPECT(0xbefd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbefb));
        EXPECT(0xdd, gbc.readMem(0xbefc));
        // CB DD 024F
        gbc.setState(0x98b7, 0x3fc7, 0xed60, 0x5126, 0xde31, 0x716a, 0x1, 0x0);
        gbc.writeMem(0x98b7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x3fc7, gbc.sp());
        EXPECT(0x98b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98b7));
        EXPECT(0xdd, gbc.readMem(0x98b8));
        // CB DD 0250
        gbc.setState(0xdca, 0xfced, 0x1d40, 0x4af5, 0x9651, 0x9961, 0x0, 0x1);
        gbc.writeMem(0xdca, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xfced, gbc.sp());
        EXPECT(0xdcc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0251
        gbc.setState(0x447b, 0xaf8a, 0x4b40, 0x4109, 0x6a30, 0xfd49, 0x0, 0x0);
        gbc.writeMem(0x447b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xaf8a, gbc.sp());
        EXPECT(0x447d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0252
        gbc.setState(0x4a19, 0xa0ec, 0x3a0, 0x60c7, 0x914e, 0x617a, 0x0, 0x1);
        gbc.writeMem(0x4a19, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xa0ec, gbc.sp());
        EXPECT(0x4a1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0253
        gbc.setState(0xd407, 0x9dc8, 0xf460, 0xe63f, 0x8d76, 0x74eb, 0x0, 0x1);
        gbc.writeMem(0xd407, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x9dc8, gbc.sp());
        EXPECT(0xd409, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd407));
        EXPECT(0xdd, gbc.readMem(0xd408));
        // CB DD 0254
        gbc.setState(0x2794, 0xe04f, 0xed10, 0x285e, 0xb169, 0x8b6e, 0x1, 0x0);
        gbc.writeMem(0x2794, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xe04f, gbc.sp());
        EXPECT(0x2796, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0255
        gbc.setState(0x78ba, 0xd2c8, 0xc920, 0xe8b0, 0x616c, 0x9c93, 0x0, 0x0);
        gbc.writeMem(0x78ba, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xd2c8, gbc.sp());
        EXPECT(0x78bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0256
        gbc.setState(0x7eb5, 0xb973, 0x8b50, 0xe688, 0x7f38, 0x6796, 0x0, 0x1);
        gbc.writeMem(0x7eb5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xb973, gbc.sp());
        EXPECT(0x7eb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0257
        gbc.setState(0x63d1, 0xeb4, 0xdfe0, 0xec4d, 0xdd8c, 0x9758, 0x1, 0x1);
        gbc.writeMem(0x63d1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xeb4, gbc.sp());
        EXPECT(0x63d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0258
        gbc.setState(0xd7b3, 0x8ca2, 0xc580, 0xfed5, 0x4662, 0x3c32, 0x1, 0x1);
        gbc.writeMem(0xd7b3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x8ca2, gbc.sp());
        EXPECT(0xd7b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7b3));
        EXPECT(0xdd, gbc.readMem(0xd7b4));
        // CB DD 0259
        gbc.setState(0xe945, 0xf9a7, 0x7bb0, 0xf9ec, 0x913e, 0x42, 0x0, 0x0);
        gbc.writeMem(0xe945, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xf9a7, gbc.sp());
        EXPECT(0xe947, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe945));
        EXPECT(0xdd, gbc.readMem(0xe946));
        // CB DD 025A
        gbc.setState(0x5fad, 0x3667, 0x9840, 0x219f, 0x8306, 0xaf1a, 0x0, 0x1);
        gbc.writeMem(0x5fad, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x3667, gbc.sp());
        EXPECT(0x5faf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 025B
        gbc.setState(0x189f, 0xe160, 0xd360, 0x79bb, 0x18d9, 0x6a15, 0x0, 0x1);
        gbc.writeMem(0x189f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xe160, gbc.sp());
        EXPECT(0x18a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 025C
        gbc.setState(0x6, 0x15c5, 0xf570, 0xa011, 0xef33, 0x529a, 0x0, 0x0);
        gbc.writeMem(0x6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x15c5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 025D
        gbc.setState(0x48b0, 0xa22f, 0x35f0, 0x251f, 0xd60a, 0x6278, 0x1, 0x1);
        gbc.writeMem(0x48b0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xa22f, gbc.sp());
        EXPECT(0x48b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 025E
        gbc.setState(0x70dd, 0x60cf, 0xda30, 0x145b, 0xb50e, 0x2745, 0x1, 0x1);
        gbc.writeMem(0x70dd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x60cf, gbc.sp());
        EXPECT(0x70df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 025F
        gbc.setState(0x7073, 0x163f, 0xf540, 0xb21f, 0xd438, 0xa163, 0x0, 0x1);
        gbc.writeMem(0x7073, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x163f, gbc.sp());
        EXPECT(0x7075, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0260
        gbc.setState(0x7655, 0x3a1f, 0x6740, 0x44ac, 0xe7ef, 0x3f05, 0x1, 0x0);
        gbc.writeMem(0x7655, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x3a1f, gbc.sp());
        EXPECT(0x7657, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0262
        gbc.setState(0xbd8d, 0xe7f4, 0xcc80, 0xa9c8, 0xca5f, 0x7958, 0x0, 0x0);
        gbc.writeMem(0xbd8d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xe7f4, gbc.sp());
        EXPECT(0xbd8f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd8d));
        EXPECT(0xdd, gbc.readMem(0xbd8e));
        // CB DD 0263
        gbc.setState(0x4b72, 0x974e, 0x8a20, 0xc5c6, 0x7396, 0x6d1a, 0x0, 0x1);
        gbc.writeMem(0x4b72, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x974e, gbc.sp());
        EXPECT(0x4b74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0264
        gbc.setState(0x90db, 0xdb5f, 0x53b0, 0xb92, 0xacc8, 0xd65f, 0x0, 0x0);
        gbc.writeMem(0x90db, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xdb5f, gbc.sp());
        EXPECT(0x90dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90db));
        EXPECT(0xdd, gbc.readMem(0x90dc));
        // CB DD 0265
        gbc.setState(0x9e16, 0xafdb, 0xa850, 0xcbb4, 0xcb4e, 0x4885, 0x0, 0x1);
        gbc.writeMem(0x9e16, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xafdb, gbc.sp());
        EXPECT(0x9e18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e16));
        EXPECT(0xdd, gbc.readMem(0x9e17));
        // CB DD 0266
        gbc.setState(0x487b, 0x1e80, 0x180, 0x5bee, 0x127e, 0xd07, 0x0, 0x0);
        gbc.writeMem(0x487b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x1e80, gbc.sp());
        EXPECT(0x487d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0267
        gbc.setState(0xe406, 0xe2a9, 0x3720, 0x9d3b, 0x22cd, 0x14f3, 0x0, 0x0);
        gbc.writeMem(0xe406, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xe2a9, gbc.sp());
        EXPECT(0xe408, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe406));
        EXPECT(0xdd, gbc.readMem(0xe407));
        // CB DD 0268
        gbc.setState(0xc85c, 0xf7aa, 0xde70, 0x6d87, 0xa703, 0xc27e, 0x0, 0x0);
        gbc.writeMem(0xc85c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xf7aa, gbc.sp());
        EXPECT(0xc85e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc85c));
        EXPECT(0xdd, gbc.readMem(0xc85d));
        // CB DD 0269
        gbc.setState(0x42cd, 0x2855, 0xb550, 0xffd7, 0x277f, 0x83a, 0x1, 0x1);
        gbc.writeMem(0x42cd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x2855, gbc.sp());
        EXPECT(0x42cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 026B
        gbc.setState(0x3202, 0x5e47, 0x5900, 0x9dc1, 0xf199, 0x43e6, 0x0, 0x1);
        gbc.writeMem(0x3202, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x5e47, gbc.sp());
        EXPECT(0x3204, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 026C
        gbc.setState(0xb84e, 0x9dab, 0x2560, 0xb2ca, 0xeb8b, 0xd059, 0x0, 0x0);
        gbc.writeMem(0xb84e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x9dab, gbc.sp());
        EXPECT(0xb850, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb84e));
        EXPECT(0xdd, gbc.readMem(0xb84f));
        // CB DD 026D
        gbc.setState(0xd52b, 0xeb9, 0x18c0, 0x74da, 0x686d, 0xf683, 0x0, 0x0);
        gbc.writeMem(0xd52b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xeb9, gbc.sp());
        EXPECT(0xd52d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd52b));
        EXPECT(0xdd, gbc.readMem(0xd52c));
        // CB DD 026E
        gbc.setState(0x8448, 0xdd51, 0x42d0, 0x1d1d, 0x58b0, 0xcef3, 0x0, 0x0);
        gbc.writeMem(0x8448, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xdd51, gbc.sp());
        EXPECT(0x844a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8448));
        EXPECT(0xdd, gbc.readMem(0x8449));
        // CB DD 026F
        gbc.setState(0xc0be, 0xb1eb, 0x4020, 0xeebb, 0xa2b1, 0x8603, 0x0, 0x0);
        gbc.writeMem(0xc0be, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xb1eb, gbc.sp());
        EXPECT(0xc0c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0be));
        EXPECT(0xdd, gbc.readMem(0xc0bf));
        // CB DD 0270
        gbc.setState(0x1f7a, 0x7ce8, 0xc540, 0x8021, 0x94df, 0x6aa6, 0x1, 0x0);
        gbc.writeMem(0x1f7a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x7ce8, gbc.sp());
        EXPECT(0x1f7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0271
        gbc.setState(0xe001, 0x20f5, 0x7100, 0xb20b, 0x3e20, 0x5dc4, 0x0, 0x0);
        gbc.writeMem(0xe001, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x20f5, gbc.sp());
        EXPECT(0xe003, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe001));
        EXPECT(0xdd, gbc.readMem(0xe002));
        // CB DD 0272
        gbc.setState(0x4f37, 0xe4dc, 0x4ad0, 0xd6ae, 0xcb6f, 0xf2ab, 0x0, 0x1);
        gbc.writeMem(0x4f37, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xe4dc, gbc.sp());
        EXPECT(0x4f39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0273
        gbc.setState(0x5be3, 0x17d9, 0xef20, 0x4d7c, 0x2b7a, 0x4eab, 0x0, 0x1);
        gbc.writeMem(0x5be3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x17d9, gbc.sp());
        EXPECT(0x5be5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0274
        gbc.setState(0xbd33, 0xe35f, 0xcde0, 0xf7e1, 0xc3a0, 0x9eb8, 0x1, 0x1);
        gbc.writeMem(0xbd33, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xe35f, gbc.sp());
        EXPECT(0xbd35, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd33));
        EXPECT(0xdd, gbc.readMem(0xbd34));
        // CB DD 0275
        gbc.setState(0x3dc, 0x490a, 0x9c00, 0x7f3, 0x844e, 0x9eff, 0x1, 0x1);
        gbc.writeMem(0x3dc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x490a, gbc.sp());
        EXPECT(0x3de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0276
        gbc.setState(0x19eb, 0x5fa6, 0x91e0, 0xae66, 0x615b, 0x917, 0x0, 0x0);
        gbc.writeMem(0x19eb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x5fa6, gbc.sp());
        EXPECT(0x19ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0277
        gbc.setState(0x62c6, 0x86dd, 0xac30, 0xd4a4, 0xc27a, 0x67e5, 0x1, 0x0);
        gbc.writeMem(0x62c6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x86dd, gbc.sp());
        EXPECT(0x62c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0278
        gbc.setState(0xdf9e, 0xe789, 0x85f0, 0xe4e0, 0x29e5, 0x957a, 0x0, 0x1);
        gbc.writeMem(0xdf9e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xe789, gbc.sp());
        EXPECT(0xdfa0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf9e));
        EXPECT(0xdd, gbc.readMem(0xdf9f));
        // CB DD 027A
        gbc.setState(0x5094, 0xa66b, 0x3d70, 0xdf02, 0x77c5, 0xd3a5, 0x0, 0x1);
        gbc.writeMem(0x5094, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xa66b, gbc.sp());
        EXPECT(0x5096, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 027B
        gbc.setState(0x7003, 0xffff, 0x5050, 0xdc30, 0xa3e6, 0x10a9, 0x0, 0x0);
        gbc.writeMem(0x7003, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xffff, gbc.sp());
        EXPECT(0x7005, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 027C
        gbc.setState(0xd6c3, 0xf548, 0xb570, 0x86b, 0x3bd9, 0x5379, 0x0, 0x1);
        gbc.writeMem(0xd6c3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xf548, gbc.sp());
        EXPECT(0xd6c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6c3));
        EXPECT(0xdd, gbc.readMem(0xd6c4));
        // CB DD 027D
        gbc.setState(0x12, 0x90b0, 0x8770, 0xc49, 0x5e63, 0x80e7, 0x0, 0x1);
        gbc.writeMem(0x12, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x90b0, gbc.sp());
        EXPECT(0x14, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 027E
        gbc.setState(0xd774, 0xdd34, 0xa8b0, 0xe968, 0xc709, 0x2238, 0x1, 0x1);
        gbc.writeMem(0xd774, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xdd34, gbc.sp());
        EXPECT(0xd776, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd774));
        EXPECT(0xdd, gbc.readMem(0xd775));
        // CB DD 027F
        gbc.setState(0x9dcd, 0xc6d8, 0x48a0, 0xe6ba, 0x2e8c, 0xb275, 0x1, 0x0);
        gbc.writeMem(0x9dcd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xc6d8, gbc.sp());
        EXPECT(0x9dcf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9dcd));
        EXPECT(0xdd, gbc.readMem(0x9dce));
        // CB DD 0280
        gbc.setState(0x77cd, 0x3b70, 0x5de0, 0xaeae, 0xd037, 0xc792, 0x1, 0x0);
        gbc.writeMem(0x77cd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x3b70, gbc.sp());
        EXPECT(0x77cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0281
        gbc.setState(0xb25f, 0xed9b, 0x7270, 0x3bb0, 0x2fa9, 0x4912, 0x1, 0x1);
        gbc.writeMem(0xb25f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xed9b, gbc.sp());
        EXPECT(0xb261, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb25f));
        EXPECT(0xdd, gbc.readMem(0xb260));
        // CB DD 0282
        gbc.setState(0x3005, 0x623f, 0x6e70, 0x3090, 0x9c16, 0xbb5a, 0x1, 0x1);
        gbc.writeMem(0x3005, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x623f, gbc.sp());
        EXPECT(0x3007, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0283
        gbc.setState(0xef02, 0x34dd, 0x9290, 0x449, 0xb834, 0xcbe6, 0x0, 0x0);
        gbc.writeMem(0xef02, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x34dd, gbc.sp());
        EXPECT(0xef04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef02));
        EXPECT(0xdd, gbc.readMem(0xef03));
        // CB DD 0284
        gbc.setState(0x3383, 0xc000, 0x17a0, 0x7f05, 0xe2d6, 0x6cd2, 0x0, 0x1);
        gbc.writeMem(0x3383, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xc000, gbc.sp());
        EXPECT(0x3385, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0285
        gbc.setState(0xb56a, 0x6eae, 0x9a60, 0x2415, 0x6dcb, 0x377d, 0x1, 0x0);
        gbc.writeMem(0xb56a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x6eae, gbc.sp());
        EXPECT(0xb56c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb56a));
        EXPECT(0xdd, gbc.readMem(0xb56b));
        // CB DD 0286
        gbc.setState(0x5346, 0xbb48, 0xa250, 0x3b61, 0xb8a4, 0xecb1, 0x1, 0x0);
        gbc.writeMem(0x5346, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xbb48, gbc.sp());
        EXPECT(0x5348, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0288
        gbc.setState(0x3cea, 0xb2f6, 0xe740, 0x45c, 0x4bf6, 0x98b, 0x1, 0x1);
        gbc.writeMem(0x3cea, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xb2f6, gbc.sp());
        EXPECT(0x3cec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0289
        gbc.setState(0x8e09, 0x6674, 0x8c80, 0xf95e, 0xc2f1, 0x7e1a, 0x1, 0x1);
        gbc.writeMem(0x8e09, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x6674, gbc.sp());
        EXPECT(0x8e0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e09));
        EXPECT(0xdd, gbc.readMem(0x8e0a));
        // CB DD 028A
        gbc.setState(0xa747, 0x1ec8, 0x830, 0xef65, 0xec92, 0x9366, 0x1, 0x0);
        gbc.writeMem(0xa747, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x1ec8, gbc.sp());
        EXPECT(0xa749, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa747));
        EXPECT(0xdd, gbc.readMem(0xa748));
        // CB DD 028B
        gbc.setState(0xa584, 0x25a5, 0x2d0, 0xfe39, 0x2bbc, 0x8494, 0x1, 0x1);
        gbc.writeMem(0xa584, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x25a5, gbc.sp());
        EXPECT(0xa586, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa584));
        EXPECT(0xdd, gbc.readMem(0xa585));
        // CB DD 028C
        gbc.setState(0x4094, 0x1b30, 0xf870, 0xf281, 0xd285, 0xa2ad, 0x1, 0x1);
        gbc.writeMem(0x4094, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x1b30, gbc.sp());
        EXPECT(0x4096, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 028D
        gbc.setState(0x86ab, 0x26f8, 0x1200, 0xae84, 0xa3ab, 0x7f6d, 0x1, 0x0);
        gbc.writeMem(0x86ab, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x26f8, gbc.sp());
        EXPECT(0x86ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86ab));
        EXPECT(0xdd, gbc.readMem(0x86ac));
        // CB DD 028E
        gbc.setState(0x27a0, 0x107b, 0x7810, 0x5dd8, 0xa75e, 0x61ac, 0x0, 0x0);
        gbc.writeMem(0x27a0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x107b, gbc.sp());
        EXPECT(0x27a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 028F
        gbc.setState(0xb048, 0xde96, 0x1510, 0x74b8, 0x3834, 0x65d5, 0x0, 0x1);
        gbc.writeMem(0xb048, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xde96, gbc.sp());
        EXPECT(0xb04a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb048));
        EXPECT(0xdd, gbc.readMem(0xb049));
        // CB DD 0290
        gbc.setState(0x6e0, 0x5733, 0x8ce0, 0xef0e, 0xe7f3, 0xca07, 0x1, 0x1);
        gbc.writeMem(0x6e0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x5733, gbc.sp());
        EXPECT(0x6e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0291
        gbc.setState(0xab6c, 0x9b49, 0x7740, 0x4ba4, 0x6784, 0x731f, 0x0, 0x1);
        gbc.writeMem(0xab6c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x9b49, gbc.sp());
        EXPECT(0xab6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab6c));
        EXPECT(0xdd, gbc.readMem(0xab6d));
        // CB DD 0292
        gbc.setState(0x8185, 0x2470, 0xa340, 0x6f0f, 0xa44b, 0x1bb8, 0x1, 0x1);
        gbc.writeMem(0x8185, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x2470, gbc.sp());
        EXPECT(0x8187, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8185));
        EXPECT(0xdd, gbc.readMem(0x8186));
        // CB DD 0294
        gbc.setState(0x7c6e, 0xad8, 0x24d0, 0xd230, 0x99c9, 0x7c79, 0x1, 0x1);
        gbc.writeMem(0x7c6e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xad8, gbc.sp());
        EXPECT(0x7c70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0295
        gbc.setState(0x7d84, 0x57ca, 0xcff0, 0x532a, 0x9260, 0x3f8e, 0x1, 0x1);
        gbc.writeMem(0x7d84, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x57ca, gbc.sp());
        EXPECT(0x7d86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0297
        gbc.setState(0x85da, 0xbd3e, 0x7db0, 0x9b3b, 0x934, 0x1730, 0x0, 0x0);
        gbc.writeMem(0x85da, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xbd3e, gbc.sp());
        EXPECT(0x85dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85da));
        EXPECT(0xdd, gbc.readMem(0x85db));
        // CB DD 0298
        gbc.setState(0x1018, 0x4de4, 0x11d0, 0xf18c, 0x6562, 0xd486, 0x1, 0x1);
        gbc.writeMem(0x1018, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x4de4, gbc.sp());
        EXPECT(0x101a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0299
        gbc.setState(0xb3fe, 0x3aca, 0x710, 0x62, 0xd1e, 0x9d28, 0x0, 0x1);
        gbc.writeMem(0xb3fe, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x3aca, gbc.sp());
        EXPECT(0xb400, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3fe));
        EXPECT(0xdd, gbc.readMem(0xb3ff));
        // CB DD 029A
        gbc.setState(0x2ddc, 0x9795, 0xbd30, 0x29dc, 0xea82, 0xd539, 0x1, 0x1);
        gbc.writeMem(0x2ddc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x9795, gbc.sp());
        EXPECT(0x2dde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 029C
        gbc.setState(0x36de, 0x1968, 0xf310, 0x4fb3, 0x1801, 0xb4ec, 0x1, 0x0);
        gbc.writeMem(0x36de, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x1968, gbc.sp());
        EXPECT(0x36e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 029D
        gbc.setState(0x5380, 0x1f22, 0x1940, 0xb354, 0xacee, 0x44fd, 0x0, 0x0);
        gbc.writeMem(0x5380, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x1f22, gbc.sp());
        EXPECT(0x5382, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 029E
        gbc.setState(0xbde2, 0x3cc5, 0x4db0, 0xee24, 0x908, 0x6ab4, 0x1, 0x1);
        gbc.writeMem(0xbde2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x3cc5, gbc.sp());
        EXPECT(0xbde4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbde2));
        EXPECT(0xdd, gbc.readMem(0xbde3));
        // CB DD 029F
        gbc.setState(0x1e54, 0x4ab4, 0x3470, 0x365a, 0xf6b1, 0x1826, 0x0, 0x1);
        gbc.writeMem(0x1e54, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x4ab4, gbc.sp());
        EXPECT(0x1e56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02A1
        gbc.setState(0xe12d, 0x36dc, 0xf1f0, 0x1495, 0x6805, 0x59e, 0x0, 0x0);
        gbc.writeMem(0xe12d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x36dc, gbc.sp());
        EXPECT(0xe12f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe12d));
        EXPECT(0xdd, gbc.readMem(0xe12e));
        // CB DD 02A2
        gbc.setState(0x1bf, 0xb731, 0xe230, 0xdb09, 0x50d7, 0xf7f4, 0x1, 0x0);
        gbc.writeMem(0x1bf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xb731, gbc.sp());
        EXPECT(0x1c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02A3
        gbc.setState(0xc48e, 0xc327, 0x70e0, 0xc4fb, 0x6d04, 0x1ac7, 0x1, 0x0);
        gbc.writeMem(0xc48e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xc327, gbc.sp());
        EXPECT(0xc490, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc48e));
        EXPECT(0xdd, gbc.readMem(0xc48f));
        // CB DD 02A4
        gbc.setState(0x438a, 0xbd84, 0xe6d0, 0xebd6, 0x7193, 0x9431, 0x0, 0x0);
        gbc.writeMem(0x438a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xbd84, gbc.sp());
        EXPECT(0x438c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02A5
        gbc.setState(0x2862, 0x6f86, 0xb5e0, 0x6356, 0xfc4c, 0x21aa, 0x0, 0x0);
        gbc.writeMem(0x2862, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x6f86, gbc.sp());
        EXPECT(0x2864, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02A6
        gbc.setState(0xe813, 0xca75, 0xc500, 0x4af1, 0x5176, 0x9136, 0x0, 0x0);
        gbc.writeMem(0xe813, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xca75, gbc.sp());
        EXPECT(0xe815, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe813));
        EXPECT(0xdd, gbc.readMem(0xe814));
        // CB DD 02A8
        gbc.setState(0xb9d2, 0xaeab, 0xbe20, 0x6209, 0x2b51, 0xd505, 0x1, 0x1);
        gbc.writeMem(0xb9d2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xaeab, gbc.sp());
        EXPECT(0xb9d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9d2));
        EXPECT(0xdd, gbc.readMem(0xb9d3));
        // CB DD 02A9
        gbc.setState(0xb9c5, 0x6282, 0x7e50, 0xbff9, 0x3ef0, 0xa1e8, 0x1, 0x1);
        gbc.writeMem(0xb9c5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x6282, gbc.sp());
        EXPECT(0xb9c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9c5));
        EXPECT(0xdd, gbc.readMem(0xb9c6));
        // CB DD 02AA
        gbc.setState(0xbd22, 0x97d7, 0x18a0, 0xc27e, 0x77a7, 0x12b2, 0x1, 0x1);
        gbc.writeMem(0xbd22, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x97d7, gbc.sp());
        EXPECT(0xbd24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd22));
        EXPECT(0xdd, gbc.readMem(0xbd23));
        // CB DD 02AB
        gbc.setState(0x241b, 0x2d71, 0x9c90, 0xf2bf, 0xbdf3, 0x2061, 0x0, 0x1);
        gbc.writeMem(0x241b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x2d71, gbc.sp());
        EXPECT(0x241d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02AC
        gbc.setState(0xabab, 0x55f2, 0x40e0, 0x92bd, 0x1052, 0x7432, 0x1, 0x1);
        gbc.writeMem(0xabab, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x55f2, gbc.sp());
        EXPECT(0xabad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabab));
        EXPECT(0xdd, gbc.readMem(0xabac));
        // CB DD 02AD
        gbc.setState(0x95a6, 0x18ec, 0xe5b0, 0x8c32, 0xe22f, 0xa15b, 0x1, 0x1);
        gbc.writeMem(0x95a6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x18ec, gbc.sp());
        EXPECT(0x95a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95a6));
        EXPECT(0xdd, gbc.readMem(0x95a7));
        // CB DD 02AE
        gbc.setState(0x9ec4, 0x51bb, 0x53d0, 0x7a6, 0xdde7, 0xbc98, 0x0, 0x0);
        gbc.writeMem(0x9ec4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x51bb, gbc.sp());
        EXPECT(0x9ec6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ec4));
        EXPECT(0xdd, gbc.readMem(0x9ec5));
        // CB DD 02AF
        gbc.setState(0x563e, 0xd785, 0x3e70, 0xf009, 0x513b, 0xbc68, 0x1, 0x1);
        gbc.writeMem(0x563e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xd785, gbc.sp());
        EXPECT(0x5640, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02B0
        gbc.setState(0x20bb, 0x5b6a, 0xad80, 0xe58, 0x5bd6, 0x7b00, 0x1, 0x1);
        gbc.writeMem(0x20bb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x5b6a, gbc.sp());
        EXPECT(0x20bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02B1
        gbc.setState(0x480d, 0xeadd, 0xed90, 0xbb6d, 0xeb19, 0x462c, 0x0, 0x0);
        gbc.writeMem(0x480d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xeadd, gbc.sp());
        EXPECT(0x480f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02B2
        gbc.setState(0x3ec4, 0x62d6, 0xfd0, 0x9eb1, 0x83de, 0xed09, 0x1, 0x0);
        gbc.writeMem(0x3ec4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x62d6, gbc.sp());
        EXPECT(0x3ec6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02B3
        gbc.setState(0x5259, 0xbc38, 0x4ff0, 0xbd3e, 0x6422, 0x7899, 0x1, 0x0);
        gbc.writeMem(0x5259, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xbc38, gbc.sp());
        EXPECT(0x525b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02B4
        gbc.setState(0x5891, 0xe4a4, 0xf4b0, 0x7d5a, 0x5941, 0xa235, 0x0, 0x1);
        gbc.writeMem(0x5891, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xe4a4, gbc.sp());
        EXPECT(0x5893, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02B5
        gbc.setState(0x5ecd, 0x2151, 0xecb0, 0x8dee, 0xc98e, 0xd3b5, 0x1, 0x1);
        gbc.writeMem(0x5ecd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x2151, gbc.sp());
        EXPECT(0x5ecf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02B6
        gbc.setState(0xc33e, 0x2c52, 0xd430, 0xea08, 0xb9d5, 0x90ed, 0x1, 0x0);
        gbc.writeMem(0xc33e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x2c52, gbc.sp());
        EXPECT(0xc340, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc33e));
        EXPECT(0xdd, gbc.readMem(0xc33f));
        // CB DD 02B7
        gbc.setState(0x5ce2, 0x23ec, 0x6f10, 0x608c, 0xfed9, 0xeccb, 0x0, 0x0);
        gbc.writeMem(0x5ce2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x23ec, gbc.sp());
        EXPECT(0x5ce4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02B8
        gbc.setState(0xa93d, 0x8011, 0xfca0, 0xe48e, 0x9252, 0x2b67, 0x0, 0x1);
        gbc.writeMem(0xa93d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x8011, gbc.sp());
        EXPECT(0xa93f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa93d));
        EXPECT(0xdd, gbc.readMem(0xa93e));
        // CB DD 02B9
        gbc.setState(0xdc2e, 0x1d86, 0xcdb0, 0xc242, 0x857c, 0xb070, 0x1, 0x0);
        gbc.writeMem(0xdc2e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x1d86, gbc.sp());
        EXPECT(0xdc30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc2e));
        EXPECT(0xdd, gbc.readMem(0xdc2f));
        // CB DD 02BA
        gbc.setState(0xbdd3, 0x444f, 0x12f0, 0x66d1, 0x1a44, 0xbf0d, 0x0, 0x0);
        gbc.writeMem(0xbdd3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x444f, gbc.sp());
        EXPECT(0xbdd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdd3));
        EXPECT(0xdd, gbc.readMem(0xbdd4));
        // CB DD 02BB
        gbc.setState(0x8a9c, 0x6d99, 0x2ff0, 0xf105, 0x365b, 0x3215, 0x0, 0x1);
        gbc.writeMem(0x8a9c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x6d99, gbc.sp());
        EXPECT(0x8a9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a9c));
        EXPECT(0xdd, gbc.readMem(0x8a9d));
        // CB DD 02BC
        gbc.setState(0x9834, 0xe79b, 0x20, 0x7bd8, 0x59d9, 0x89e9, 0x0, 0x0);
        gbc.writeMem(0x9834, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xe79b, gbc.sp());
        EXPECT(0x9836, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9834));
        EXPECT(0xdd, gbc.readMem(0x9835));
        // CB DD 02BD
        gbc.setState(0xb57a, 0xead5, 0xb760, 0xab6d, 0xd36, 0xf245, 0x0, 0x0);
        gbc.writeMem(0xb57a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xead5, gbc.sp());
        EXPECT(0xb57c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb57a));
        EXPECT(0xdd, gbc.readMem(0xb57b));
        // CB DD 02BE
        gbc.setState(0x37a6, 0xf283, 0xb130, 0xe825, 0x1d53, 0x8e39, 0x1, 0x0);
        gbc.writeMem(0x37a6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xf283, gbc.sp());
        EXPECT(0x37a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02BF
        gbc.setState(0xe634, 0xddaf, 0x79f0, 0xabbf, 0xefcc, 0x7cea, 0x0, 0x0);
        gbc.writeMem(0xe634, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xddaf, gbc.sp());
        EXPECT(0xe636, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe634));
        EXPECT(0xdd, gbc.readMem(0xe635));
        // CB DD 02C0
        gbc.setState(0xb287, 0x5023, 0x53c0, 0x5826, 0x9820, 0x87a5, 0x1, 0x1);
        gbc.writeMem(0xb287, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x5023, gbc.sp());
        EXPECT(0xb289, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb287));
        EXPECT(0xdd, gbc.readMem(0xb288));
        // CB DD 02C1
        gbc.setState(0x587c, 0xe8c5, 0xc1c0, 0x86d, 0x6e39, 0xa7e0, 0x0, 0x1);
        gbc.writeMem(0x587c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xe8c5, gbc.sp());
        EXPECT(0x587e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02C2
        gbc.setState(0x5da0, 0xf7da, 0x3fb0, 0x1acb, 0xf683, 0x81c5, 0x0, 0x1);
        gbc.writeMem(0x5da0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xf7da, gbc.sp());
        EXPECT(0x5da2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02C3
        gbc.setState(0xbd62, 0x3956, 0x1860, 0x93a2, 0xc5da, 0xea5, 0x0, 0x0);
        gbc.writeMem(0xbd62, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x3956, gbc.sp());
        EXPECT(0xbd64, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd62));
        EXPECT(0xdd, gbc.readMem(0xbd63));
        // CB DD 02C4
        gbc.setState(0xc700, 0xa5ef, 0x7d60, 0xa1ee, 0x4808, 0x8284, 0x1, 0x1);
        gbc.writeMem(0xc700, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xa5ef, gbc.sp());
        EXPECT(0xc702, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc700));
        EXPECT(0xdd, gbc.readMem(0xc701));
        // CB DD 02C5
        gbc.setState(0x10fe, 0xe6eb, 0x10, 0x42e4, 0x8226, 0xbbef, 0x1, 0x0);
        gbc.writeMem(0x10fe, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xe6eb, gbc.sp());
        EXPECT(0x1100, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02C6
        gbc.setState(0x7ae8, 0x3e35, 0xc140, 0x1742, 0xeb72, 0xf6b5, 0x0, 0x1);
        gbc.writeMem(0x7ae8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x3e35, gbc.sp());
        EXPECT(0x7aea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02C7
        gbc.setState(0x536d, 0x54a2, 0xb5f0, 0xfb0, 0xe5ba, 0x1733, 0x1, 0x1);
        gbc.writeMem(0x536d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x54a2, gbc.sp());
        EXPECT(0x536f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02C8
        gbc.setState(0xd66f, 0x5d62, 0xdce0, 0xaa1c, 0xed45, 0xe891, 0x1, 0x0);
        gbc.writeMem(0xd66f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x5d62, gbc.sp());
        EXPECT(0xd671, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd66f));
        EXPECT(0xdd, gbc.readMem(0xd670));
        // CB DD 02C9
        gbc.setState(0x14cf, 0x36bc, 0x9090, 0x5296, 0x30a7, 0xcbba, 0x1, 0x1);
        gbc.writeMem(0x14cf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x36bc, gbc.sp());
        EXPECT(0x14d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02CA
        gbc.setState(0xaaac, 0xeacf, 0xad70, 0x2f76, 0x606c, 0xa8ae, 0x1, 0x1);
        gbc.writeMem(0xaaac, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xeacf, gbc.sp());
        EXPECT(0xaaae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaaac));
        EXPECT(0xdd, gbc.readMem(0xaaad));
        // CB DD 02CB
        gbc.setState(0xa06e, 0x9986, 0xcb80, 0x1095, 0x9b02, 0x9375, 0x0, 0x1);
        gbc.writeMem(0xa06e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x9986, gbc.sp());
        EXPECT(0xa070, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa06e));
        EXPECT(0xdd, gbc.readMem(0xa06f));
        // CB DD 02CC
        gbc.setState(0xdb8a, 0x7a0d, 0x2390, 0xb1ea, 0xa1c, 0xc588, 0x1, 0x0);
        gbc.writeMem(0xdb8a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x7a0d, gbc.sp());
        EXPECT(0xdb8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb8a));
        EXPECT(0xdd, gbc.readMem(0xdb8b));
        // CB DD 02CD
        gbc.setState(0x8899, 0xabbd, 0xf6f0, 0x33c1, 0x76a5, 0x177b, 0x1, 0x1);
        gbc.writeMem(0x8899, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xabbd, gbc.sp());
        EXPECT(0x889b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8899));
        EXPECT(0xdd, gbc.readMem(0x889a));
        // CB DD 02CF
        gbc.setState(0x4f70, 0x246b, 0x55e0, 0x9f60, 0x4e40, 0xad0d, 0x0, 0x0);
        gbc.writeMem(0x4f70, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x246b, gbc.sp());
        EXPECT(0x4f72, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02D0
        gbc.setState(0xcd5e, 0x5a7, 0xbf50, 0xef43, 0xd641, 0xbb65, 0x1, 0x0);
        gbc.writeMem(0xcd5e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x5a7, gbc.sp());
        EXPECT(0xcd60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd5e));
        EXPECT(0xdd, gbc.readMem(0xcd5f));
        // CB DD 02D1
        gbc.setState(0x573a, 0x62fa, 0xa710, 0xf6cb, 0xce69, 0xcba0, 0x1, 0x1);
        gbc.writeMem(0x573a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x62fa, gbc.sp());
        EXPECT(0x573c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02D2
        gbc.setState(0x4db9, 0x14ef, 0x8d00, 0x8dd7, 0xa610, 0x3ec0, 0x0, 0x1);
        gbc.writeMem(0x4db9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x14ef, gbc.sp());
        EXPECT(0x4dbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02D3
        gbc.setState(0xe552, 0x631e, 0x7750, 0x9f26, 0x3df8, 0xceaa, 0x1, 0x0);
        gbc.writeMem(0xe552, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x631e, gbc.sp());
        EXPECT(0xe554, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe552));
        EXPECT(0xdd, gbc.readMem(0xe553));
        // CB DD 02D5
        gbc.setState(0x5459, 0xa3cd, 0x6c20, 0xcb9a, 0xa089, 0x2466, 0x1, 0x0);
        gbc.writeMem(0x5459, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xa3cd, gbc.sp());
        EXPECT(0x545b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02D6
        gbc.setState(0x1468, 0xe180, 0x4580, 0x8d77, 0x382f, 0x7d89, 0x1, 0x0);
        gbc.writeMem(0x1468, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xe180, gbc.sp());
        EXPECT(0x146a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02D7
        gbc.setState(0x2251, 0xb5, 0x7b0, 0x397d, 0x37e0, 0x9426, 0x0, 0x0);
        gbc.writeMem(0x2251, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xb5, gbc.sp());
        EXPECT(0x2253, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02D8
        gbc.setState(0x1bb8, 0x1f9a, 0x7670, 0x5d2c, 0xba10, 0xb5cc, 0x0, 0x0);
        gbc.writeMem(0x1bb8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x1f9a, gbc.sp());
        EXPECT(0x1bba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02D9
        gbc.setState(0x7c7a, 0xfbf, 0x49c0, 0x16c9, 0x8ddf, 0xedc0, 0x1, 0x0);
        gbc.writeMem(0x7c7a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xfbf, gbc.sp());
        EXPECT(0x7c7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02DA
        gbc.setState(0x7c43, 0x76f3, 0xa500, 0x4981, 0xe489, 0xec67, 0x0, 0x1);
        gbc.writeMem(0x7c43, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x76f3, gbc.sp());
        EXPECT(0x7c45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02DB
        gbc.setState(0x73af, 0xe69d, 0xb910, 0xca0e, 0x1994, 0x7399, 0x0, 0x0);
        gbc.writeMem(0x73af, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xe69d, gbc.sp());
        EXPECT(0x73b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02DC
        gbc.setState(0x8425, 0x2fab, 0xa1d0, 0x32c6, 0xf2ca, 0x1d9c, 0x1, 0x1);
        gbc.writeMem(0x8425, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x2fab, gbc.sp());
        EXPECT(0x8427, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8425));
        EXPECT(0xdd, gbc.readMem(0x8426));
        // CB DD 02DD
        gbc.setState(0xaa91, 0x63c9, 0x5150, 0xc3b9, 0x410e, 0xaff7, 0x0, 0x0);
        gbc.writeMem(0xaa91, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x63c9, gbc.sp());
        EXPECT(0xaa93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa91));
        EXPECT(0xdd, gbc.readMem(0xaa92));
        // CB DD 02DF
        gbc.setState(0xca32, 0x19bd, 0x3530, 0xf2d6, 0xfe01, 0x41aa, 0x1, 0x1);
        gbc.writeMem(0xca32, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x19bd, gbc.sp());
        EXPECT(0xca34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca32));
        EXPECT(0xdd, gbc.readMem(0xca33));
        // CB DD 02E0
        gbc.setState(0x691e, 0xd6a9, 0xf0c0, 0xc7f3, 0xba38, 0x9955, 0x1, 0x0);
        gbc.writeMem(0x691e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xd6a9, gbc.sp());
        EXPECT(0x6920, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02E1
        gbc.setState(0x2148, 0xf6f8, 0x5e30, 0xb432, 0xfe66, 0x9176, 0x1, 0x0);
        gbc.writeMem(0x2148, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xf6f8, gbc.sp());
        EXPECT(0x214a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02E2
        gbc.setState(0xb843, 0x3fcf, 0x7b0, 0x5ccc, 0x3000, 0x3b75, 0x0, 0x1);
        gbc.writeMem(0xb843, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x3fcf, gbc.sp());
        EXPECT(0xb845, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb843));
        EXPECT(0xdd, gbc.readMem(0xb844));
        // CB DD 02E3
        gbc.setState(0xc749, 0xe378, 0x2250, 0x7698, 0xfba1, 0x76b6, 0x1, 0x1);
        gbc.writeMem(0xc749, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xe378, gbc.sp());
        EXPECT(0xc74b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc749));
        EXPECT(0xdd, gbc.readMem(0xc74a));
        // CB DD 02E4
        gbc.setState(0x5c2c, 0xa788, 0xeef0, 0x2603, 0xd13e, 0x231c, 0x0, 0x1);
        gbc.writeMem(0x5c2c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xa788, gbc.sp());
        EXPECT(0x5c2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02E6
        gbc.setState(0x496b, 0xaacd, 0x4b40, 0xe146, 0x41f3, 0x5ba7, 0x0, 0x0);
        gbc.writeMem(0x496b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xaacd, gbc.sp());
        EXPECT(0x496d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02E7
        gbc.setState(0xe115, 0xf5e, 0x130, 0xe6a8, 0x8c62, 0xdae8, 0x0, 0x0);
        gbc.writeMem(0xe115, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xf5e, gbc.sp());
        EXPECT(0xe117, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe115));
        EXPECT(0xdd, gbc.readMem(0xe116));
        // CB DD 02E8
        gbc.setState(0x4a6c, 0x40aa, 0xd130, 0xe5, 0x2f49, 0xc7e2, 0x0, 0x0);
        gbc.writeMem(0x4a6c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x40aa, gbc.sp());
        EXPECT(0x4a6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02E9
        gbc.setState(0x2de5, 0xfc5c, 0x1260, 0xd1ec, 0xd11, 0x27a0, 0x1, 0x0);
        gbc.writeMem(0x2de5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xfc5c, gbc.sp());
        EXPECT(0x2de7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02EA
        gbc.setState(0xb991, 0xf4c8, 0xb7e0, 0x1afd, 0xb59b, 0x2a79, 0x1, 0x0);
        gbc.writeMem(0xb991, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xf4c8, gbc.sp());
        EXPECT(0xb993, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb991));
        EXPECT(0xdd, gbc.readMem(0xb992));
        // CB DD 02EB
        gbc.setState(0x3da, 0x700f, 0x6960, 0x38ea, 0x5985, 0x2103, 0x0, 0x1);
        gbc.writeMem(0x3da, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x700f, gbc.sp());
        EXPECT(0x3dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02EC
        gbc.setState(0x3771, 0x5104, 0x9f40, 0x148d, 0x55a4, 0xe277, 0x1, 0x1);
        gbc.writeMem(0x3771, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x5104, gbc.sp());
        EXPECT(0x3773, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02ED
        gbc.setState(0x9a8f, 0xfcad, 0x5b80, 0xcab6, 0xde54, 0xbdf5, 0x0, 0x0);
        gbc.writeMem(0x9a8f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xfcad, gbc.sp());
        EXPECT(0x9a91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a8f));
        EXPECT(0xdd, gbc.readMem(0x9a90));
        // CB DD 02EE
        gbc.setState(0x61a1, 0xb4ef, 0xfd20, 0x54ad, 0x9a8, 0xb18b, 0x1, 0x1);
        gbc.writeMem(0x61a1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xb4ef, gbc.sp());
        EXPECT(0x61a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02EF
        gbc.setState(0x4f3, 0x53be, 0x4db0, 0x3e00, 0xe426, 0xe97a, 0x1, 0x1);
        gbc.writeMem(0x4f3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x53be, gbc.sp());
        EXPECT(0x4f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02F0
        gbc.setState(0xec51, 0x937, 0xa010, 0xfa56, 0x5d74, 0x6ea, 0x0, 0x0);
        gbc.writeMem(0xec51, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x937, gbc.sp());
        EXPECT(0xec53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec51));
        EXPECT(0xdd, gbc.readMem(0xec52));
        // CB DD 02F1
        gbc.setState(0x331c, 0x1ad1, 0xfff0, 0x7d8d, 0xce85, 0xc056, 0x1, 0x1);
        gbc.writeMem(0x331c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x1ad1, gbc.sp());
        EXPECT(0x331e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02F2
        gbc.setState(0xa0c8, 0x5aa0, 0xf0f0, 0x7867, 0x1894, 0x3c1c, 0x1, 0x0);
        gbc.writeMem(0xa0c8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x5aa0, gbc.sp());
        EXPECT(0xa0ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0c8));
        EXPECT(0xdd, gbc.readMem(0xa0c9));
        // CB DD 02F3
        gbc.setState(0x3f54, 0x359f, 0x3900, 0xb03a, 0x69de, 0xd193, 0x0, 0x0);
        gbc.writeMem(0x3f54, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x359f, gbc.sp());
        EXPECT(0x3f56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02F4
        gbc.setState(0xa9a9, 0x3b24, 0xc9f0, 0x6f89, 0x884b, 0xb8d4, 0x1, 0x0);
        gbc.writeMem(0xa9a9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x3b24, gbc.sp());
        EXPECT(0xa9ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9a9));
        EXPECT(0xdd, gbc.readMem(0xa9aa));
        // CB DD 02F5
        gbc.setState(0xcf76, 0x6ac9, 0x6a80, 0x5827, 0xd397, 0x2ffe, 0x1, 0x0);
        gbc.writeMem(0xcf76, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x6ac9, gbc.sp());
        EXPECT(0xcf78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf76));
        EXPECT(0xdd, gbc.readMem(0xcf77));
        // CB DD 02F6
        gbc.setState(0x6924, 0x837d, 0x93a0, 0xd02f, 0xc9a6, 0xb350, 0x0, 0x0);
        gbc.writeMem(0x6924, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x837d, gbc.sp());
        EXPECT(0x6926, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 02F7
        gbc.setState(0xb238, 0x20d2, 0x68d0, 0x148f, 0x7e0a, 0x1484, 0x1, 0x1);
        gbc.writeMem(0xb238, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x20d2, gbc.sp());
        EXPECT(0xb23a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb238));
        EXPECT(0xdd, gbc.readMem(0xb239));
        // CB DD 02F8
        gbc.setState(0xb953, 0x7cc1, 0x5a40, 0x47bc, 0xad12, 0xd4ee, 0x0, 0x0);
        gbc.writeMem(0xb953, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x7cc1, gbc.sp());
        EXPECT(0xb955, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb953));
        EXPECT(0xdd, gbc.readMem(0xb954));
        // CB DD 02F9
        gbc.setState(0xa93e, 0x4bc2, 0x690, 0xea22, 0x48a4, 0x7385, 0x1, 0x1);
        gbc.writeMem(0xa93e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x4bc2, gbc.sp());
        EXPECT(0xa940, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa93e));
        EXPECT(0xdd, gbc.readMem(0xa93f));
        // CB DD 02FA
        gbc.setState(0xa107, 0xacb7, 0x96c0, 0xd30c, 0x3dc4, 0xdf31, 0x0, 0x1);
        gbc.writeMem(0xa107, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xacb7, gbc.sp());
        EXPECT(0xa109, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa107));
        EXPECT(0xdd, gbc.readMem(0xa108));
        // CB DD 02FB
        gbc.setState(0x8c0b, 0xad3d, 0x2a40, 0x473f, 0xfcea, 0x7b44, 0x0, 0x1);
        gbc.writeMem(0x8c0b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xad3d, gbc.sp());
        EXPECT(0x8c0d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c0b));
        EXPECT(0xdd, gbc.readMem(0x8c0c));
        // CB DD 02FC
        gbc.setState(0x649c, 0x6bdb, 0x9d30, 0x2b23, 0x7c56, 0x2136, 0x1, 0x1);
        gbc.writeMem(0x649c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x6bdb, gbc.sp());
        EXPECT(0x649e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 02FD
        gbc.setState(0x8a10, 0xf942, 0x3790, 0xb880, 0xd2, 0xa63a, 0x0, 0x0);
        gbc.writeMem(0x8a10, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xf942, gbc.sp());
        EXPECT(0x8a12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a10));
        EXPECT(0xdd, gbc.readMem(0x8a11));
        // CB DD 02FE
        gbc.setState(0xab97, 0x8e1e, 0x7880, 0x6f10, 0x7c0f, 0xceff, 0x0, 0x1);
        gbc.writeMem(0xab97, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x8e1e, gbc.sp());
        EXPECT(0xab99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab97));
        EXPECT(0xdd, gbc.readMem(0xab98));
        // CB DD 02FF
        gbc.setState(0x32c3, 0x113b, 0x3cd0, 0x6b82, 0x1c96, 0x6420, 0x1, 0x0);
        gbc.writeMem(0x32c3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x113b, gbc.sp());
        EXPECT(0x32c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0300
        gbc.setState(0xdd1d, 0xa9ca, 0x1820, 0x1a66, 0xc7c5, 0x52d7, 0x1, 0x1);
        gbc.writeMem(0xdd1d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xa9ca, gbc.sp());
        EXPECT(0xdd1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd1d));
        EXPECT(0xdd, gbc.readMem(0xdd1e));
        // CB DD 0301
        gbc.setState(0xc425, 0xcfdf, 0x3390, 0x8fec, 0x73ad, 0xb5b8, 0x1, 0x0);
        gbc.writeMem(0xc425, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xcfdf, gbc.sp());
        EXPECT(0xc427, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc425));
        EXPECT(0xdd, gbc.readMem(0xc426));
        // CB DD 0302
        gbc.setState(0x34d0, 0x73e4, 0xf1e0, 0xeee9, 0xc8f2, 0xcd32, 0x0, 0x0);
        gbc.writeMem(0x34d0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x73e4, gbc.sp());
        EXPECT(0x34d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0303
        gbc.setState(0x86f8, 0xacbb, 0xc1e0, 0xa194, 0x2143, 0xb43b, 0x0, 0x0);
        gbc.writeMem(0x86f8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xacbb, gbc.sp());
        EXPECT(0x86fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86f8));
        EXPECT(0xdd, gbc.readMem(0x86f9));
        // CB DD 0304
        gbc.setState(0xd636, 0x47bb, 0x2470, 0x5b79, 0xbdd, 0x4da2, 0x1, 0x1);
        gbc.writeMem(0xd636, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x47bb, gbc.sp());
        EXPECT(0xd638, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd636));
        EXPECT(0xdd, gbc.readMem(0xd637));
        // CB DD 0305
        gbc.setState(0x70e4, 0x8292, 0x82c0, 0xc929, 0xb1ef, 0x4277, 0x1, 0x1);
        gbc.writeMem(0x70e4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x8292, gbc.sp());
        EXPECT(0x70e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0306
        gbc.setState(0x6055, 0x95b3, 0x34a0, 0xb311, 0xec63, 0xa5d5, 0x1, 0x0);
        gbc.writeMem(0x6055, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x95b3, gbc.sp());
        EXPECT(0x6057, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0307
        gbc.setState(0x8d89, 0x194a, 0xe2d0, 0xfe07, 0x8365, 0x92d0, 0x1, 0x0);
        gbc.writeMem(0x8d89, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x194a, gbc.sp());
        EXPECT(0x8d8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d89));
        EXPECT(0xdd, gbc.readMem(0x8d8a));
        // CB DD 0308
        gbc.setState(0x537, 0xa352, 0x5cd0, 0x1797, 0xd6, 0xaf1, 0x0, 0x0);
        gbc.writeMem(0x537, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xa352, gbc.sp());
        EXPECT(0x539, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0309
        gbc.setState(0xe861, 0x2805, 0xbfd0, 0x86da, 0xa6a3, 0xc6e2, 0x0, 0x1);
        gbc.writeMem(0xe861, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x2805, gbc.sp());
        EXPECT(0xe863, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe861));
        EXPECT(0xdd, gbc.readMem(0xe862));
        // CB DD 030A
        gbc.setState(0x818, 0x52f, 0x3c20, 0x846e, 0xa004, 0xe745, 0x0, 0x1);
        gbc.writeMem(0x818, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x52f, gbc.sp());
        EXPECT(0x81a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 030C
        gbc.setState(0xe4ba, 0x6311, 0x1740, 0xae04, 0xa92e, 0xc34d, 0x0, 0x0);
        gbc.writeMem(0xe4ba, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x6311, gbc.sp());
        EXPECT(0xe4bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4ba));
        EXPECT(0xdd, gbc.readMem(0xe4bb));
        // CB DD 030D
        gbc.setState(0xd767, 0xc3f9, 0xf070, 0xfd2e, 0xa8e6, 0x917b, 0x0, 0x0);
        gbc.writeMem(0xd767, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xc3f9, gbc.sp());
        EXPECT(0xd769, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd767));
        EXPECT(0xdd, gbc.readMem(0xd768));
        // CB DD 030E
        gbc.setState(0x9896, 0xe7d1, 0xee10, 0xd005, 0xe648, 0xb7b6, 0x0, 0x1);
        gbc.writeMem(0x9896, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xe7d1, gbc.sp());
        EXPECT(0x9898, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9896));
        EXPECT(0xdd, gbc.readMem(0x9897));
        // CB DD 030F
        gbc.setState(0x1eb, 0xf0f, 0x78d0, 0xcfd4, 0x9a0b, 0xa408, 0x1, 0x0);
        gbc.writeMem(0x1eb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xf0f, gbc.sp());
        EXPECT(0x1ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0310
        gbc.setState(0xaf87, 0xc3e, 0x8980, 0xaafc, 0x59f3, 0xe4fe, 0x0, 0x1);
        gbc.writeMem(0xaf87, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xc3e, gbc.sp());
        EXPECT(0xaf89, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf87));
        EXPECT(0xdd, gbc.readMem(0xaf88));
        // CB DD 0311
        gbc.setState(0xaa5e, 0x3723, 0x54b0, 0xdb45, 0xfbc4, 0x628a, 0x1, 0x0);
        gbc.writeMem(0xaa5e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x3723, gbc.sp());
        EXPECT(0xaa60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa5e));
        EXPECT(0xdd, gbc.readMem(0xaa5f));
        // CB DD 0312
        gbc.setState(0x9214, 0x841c, 0x3df0, 0xe2cb, 0x8e62, 0x99ae, 0x0, 0x0);
        gbc.writeMem(0x9214, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x841c, gbc.sp());
        EXPECT(0x9216, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9214));
        EXPECT(0xdd, gbc.readMem(0x9215));
        // CB DD 0313
        gbc.setState(0xb4e4, 0xaaa5, 0xb840, 0xaad9, 0xa2bc, 0xffb2, 0x1, 0x0);
        gbc.writeMem(0xb4e4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xaaa5, gbc.sp());
        EXPECT(0xb4e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4e4));
        EXPECT(0xdd, gbc.readMem(0xb4e5));
        // CB DD 0314
        gbc.setState(0x806e, 0x251f, 0xfee0, 0x7e64, 0xffaf, 0x5c3d, 0x1, 0x0);
        gbc.writeMem(0x806e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x251f, gbc.sp());
        EXPECT(0x8070, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x806e));
        EXPECT(0xdd, gbc.readMem(0x806f));
        // CB DD 0315
        gbc.setState(0x5a7f, 0x2dbc, 0x7ed0, 0x530, 0xcdd5, 0x2ab2, 0x0, 0x0);
        gbc.writeMem(0x5a7f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x2dbc, gbc.sp());
        EXPECT(0x5a81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0316
        gbc.setState(0x5fbe, 0x68d, 0x2620, 0x75c7, 0x13a8, 0x4367, 0x1, 0x0);
        gbc.writeMem(0x5fbe, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x68d, gbc.sp());
        EXPECT(0x5fc0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0317
        gbc.setState(0x831b, 0x1641, 0xe2b0, 0x990a, 0xd889, 0x6be2, 0x0, 0x1);
        gbc.writeMem(0x831b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x1641, gbc.sp());
        EXPECT(0x831d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x831b));
        EXPECT(0xdd, gbc.readMem(0x831c));
        // CB DD 0318
        gbc.setState(0x7bf8, 0xb2ff, 0x6820, 0xeffd, 0x170, 0xdc5b, 0x1, 0x0);
        gbc.writeMem(0x7bf8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xb2ff, gbc.sp());
        EXPECT(0x7bfa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0319
        gbc.setState(0x50a4, 0xb8de, 0xf630, 0x458a, 0xf7fa, 0x7b41, 0x1, 0x0);
        gbc.writeMem(0x50a4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xb8de, gbc.sp());
        EXPECT(0x50a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 031A
        gbc.setState(0x6ac, 0xd630, 0x15b0, 0x87f6, 0xf05a, 0x23de, 0x0, 0x1);
        gbc.writeMem(0x6ac, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xd630, gbc.sp());
        EXPECT(0x6ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 031B
        gbc.setState(0x8bdb, 0xa2a4, 0x890, 0xb039, 0xd653, 0x85c1, 0x0, 0x0);
        gbc.writeMem(0x8bdb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xa2a4, gbc.sp());
        EXPECT(0x8bdd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bdb));
        EXPECT(0xdd, gbc.readMem(0x8bdc));
        // CB DD 031D
        gbc.setState(0x70c1, 0xdf39, 0x3890, 0x2ba5, 0x85df, 0xb482, 0x1, 0x1);
        gbc.writeMem(0x70c1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xdf39, gbc.sp());
        EXPECT(0x70c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 031E
        gbc.setState(0xecc3, 0x5ee, 0x5700, 0x646a, 0x332, 0x7849, 0x0, 0x0);
        gbc.writeMem(0xecc3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x5ee, gbc.sp());
        EXPECT(0xecc5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecc3));
        EXPECT(0xdd, gbc.readMem(0xecc4));
        // CB DD 031F
        gbc.setState(0x9a2d, 0x648, 0xc260, 0x1bc0, 0x4155, 0x14b5, 0x1, 0x0);
        gbc.writeMem(0x9a2d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x648, gbc.sp());
        EXPECT(0x9a2f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a2d));
        EXPECT(0xdd, gbc.readMem(0x9a2e));
        // CB DD 0320
        gbc.setState(0x834b, 0xf44e, 0xfca0, 0x9dd7, 0x5227, 0x6065, 0x1, 0x0);
        gbc.writeMem(0x834b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xf44e, gbc.sp());
        EXPECT(0x834d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x834b));
        EXPECT(0xdd, gbc.readMem(0x834c));
        // CB DD 0321
        gbc.setState(0xb277, 0x4231, 0xde40, 0xe2cd, 0xe6c9, 0xf7a8, 0x1, 0x0);
        gbc.writeMem(0xb277, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x4231, gbc.sp());
        EXPECT(0xb279, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb277));
        EXPECT(0xdd, gbc.readMem(0xb278));
        // CB DD 0322
        gbc.setState(0x19b5, 0xffd2, 0x75a0, 0x136, 0xf819, 0xe2d5, 0x0, 0x1);
        gbc.writeMem(0x19b5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xffd2, gbc.sp());
        EXPECT(0x19b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0323
        gbc.setState(0xce68, 0x998f, 0x6cd0, 0xd28e, 0xc8ab, 0x3a4f, 0x0, 0x0);
        gbc.writeMem(0xce68, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x998f, gbc.sp());
        EXPECT(0xce6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce68));
        EXPECT(0xdd, gbc.readMem(0xce69));
        // CB DD 0324
        gbc.setState(0x2bd8, 0x67e7, 0xf440, 0x366d, 0x3cd3, 0x3549, 0x0, 0x1);
        gbc.writeMem(0x2bd8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x67e7, gbc.sp());
        EXPECT(0x2bda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0325
        gbc.setState(0x5d60, 0x6966, 0x3d30, 0x5886, 0xed46, 0x741d, 0x0, 0x1);
        gbc.writeMem(0x5d60, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x6966, gbc.sp());
        EXPECT(0x5d62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0326
        gbc.setState(0xd6f1, 0xd99c, 0x5520, 0xbb74, 0xc530, 0xe19c, 0x0, 0x1);
        gbc.writeMem(0xd6f1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xd99c, gbc.sp());
        EXPECT(0xd6f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6f1));
        EXPECT(0xdd, gbc.readMem(0xd6f2));
        // CB DD 0327
        gbc.setState(0xe410, 0xee42, 0xf760, 0x36c9, 0x6f55, 0x4379, 0x1, 0x0);
        gbc.writeMem(0xe410, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xee42, gbc.sp());
        EXPECT(0xe412, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe410));
        EXPECT(0xdd, gbc.readMem(0xe411));
        // CB DD 0328
        gbc.setState(0xdfd0, 0xfeb9, 0xe350, 0xe948, 0x9d80, 0xe7b3, 0x1, 0x1);
        gbc.writeMem(0xdfd0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xfeb9, gbc.sp());
        EXPECT(0xdfd2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfd0));
        EXPECT(0xdd, gbc.readMem(0xdfd1));
        // CB DD 0329
        gbc.setState(0xe0a3, 0xdb90, 0x30, 0x59fd, 0xe58c, 0x2a63, 0x0, 0x0);
        gbc.writeMem(0xe0a3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xdb90, gbc.sp());
        EXPECT(0xe0a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0a3));
        EXPECT(0xdd, gbc.readMem(0xe0a4));
        // CB DD 032B
        gbc.setState(0x6d05, 0x8774, 0x900, 0x4f09, 0xc49a, 0x8f54, 0x0, 0x1);
        gbc.writeMem(0x6d05, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x8774, gbc.sp());
        EXPECT(0x6d07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 032C
        gbc.setState(0x6e06, 0x20c8, 0xb900, 0x72b0, 0x485a, 0x241a, 0x1, 0x0);
        gbc.writeMem(0x6e06, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x20c8, gbc.sp());
        EXPECT(0x6e08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 032D
        gbc.setState(0xcd9b, 0xbe03, 0x6620, 0xe76f, 0xecb1, 0xe76b, 0x0, 0x0);
        gbc.writeMem(0xcd9b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xbe03, gbc.sp());
        EXPECT(0xcd9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd9b));
        EXPECT(0xdd, gbc.readMem(0xcd9c));
        // CB DD 032E
        gbc.setState(0x2d58, 0xaf3, 0xd400, 0xb079, 0x621a, 0xda04, 0x0, 0x0);
        gbc.writeMem(0x2d58, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xaf3, gbc.sp());
        EXPECT(0x2d5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 032F
        gbc.setState(0xd4fc, 0xddac, 0x1e80, 0xc3a2, 0x11ea, 0x631, 0x1, 0x0);
        gbc.writeMem(0xd4fc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xddac, gbc.sp());
        EXPECT(0xd4fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4fc));
        EXPECT(0xdd, gbc.readMem(0xd4fd));
        // CB DD 0330
        gbc.setState(0x5386, 0xd492, 0x1e50, 0x5dab, 0xaa1f, 0xf938, 0x0, 0x0);
        gbc.writeMem(0x5386, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xd492, gbc.sp());
        EXPECT(0x5388, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0331
        gbc.setState(0xad90, 0x297f, 0x92b0, 0xbd69, 0xd6a7, 0x2533, 0x0, 0x1);
        gbc.writeMem(0xad90, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x297f, gbc.sp());
        EXPECT(0xad92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad90));
        EXPECT(0xdd, gbc.readMem(0xad91));
        // CB DD 0332
        gbc.setState(0x2ab0, 0xf387, 0xe0e0, 0x55f2, 0x335b, 0xa3d7, 0x1, 0x0);
        gbc.writeMem(0x2ab0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xf387, gbc.sp());
        EXPECT(0x2ab2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0333
        gbc.setState(0x413f, 0xc167, 0x4d20, 0xa881, 0xb539, 0xe093, 0x0, 0x0);
        gbc.writeMem(0x413f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xc167, gbc.sp());
        EXPECT(0x4141, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0334
        gbc.setState(0xc9d6, 0x9655, 0xfee0, 0xbbc8, 0xb076, 0x7c7d, 0x1, 0x1);
        gbc.writeMem(0xc9d6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x9655, gbc.sp());
        EXPECT(0xc9d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9d6));
        EXPECT(0xdd, gbc.readMem(0xc9d7));
        // CB DD 0336
        gbc.setState(0xd49f, 0xeb99, 0xee30, 0x466e, 0xd91b, 0x81ff, 0x1, 0x0);
        gbc.writeMem(0xd49f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xeb99, gbc.sp());
        EXPECT(0xd4a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd49f));
        EXPECT(0xdd, gbc.readMem(0xd4a0));
        // CB DD 0337
        gbc.setState(0xab32, 0x6cb2, 0x1d10, 0x1fb9, 0x162e, 0x8d42, 0x0, 0x0);
        gbc.writeMem(0xab32, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x6cb2, gbc.sp());
        EXPECT(0xab34, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab32));
        EXPECT(0xdd, gbc.readMem(0xab33));
        // CB DD 0338
        gbc.setState(0x9fa7, 0x11cd, 0xf660, 0xa99b, 0x68a2, 0x98da, 0x1, 0x1);
        gbc.writeMem(0x9fa7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x11cd, gbc.sp());
        EXPECT(0x9fa9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fa7));
        EXPECT(0xdd, gbc.readMem(0x9fa8));
        // CB DD 0339
        gbc.setState(0x2e98, 0xe799, 0x2e50, 0xadd5, 0xadc7, 0xc67, 0x0, 0x0);
        gbc.writeMem(0x2e98, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xe799, gbc.sp());
        EXPECT(0x2e9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 033A
        gbc.setState(0x3007, 0x35f, 0xc10, 0x97d3, 0x13aa, 0xbed0, 0x1, 0x1);
        gbc.writeMem(0x3007, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x35f, gbc.sp());
        EXPECT(0x3009, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 033B
        gbc.setState(0xe155, 0xfd21, 0x840, 0x3c33, 0x3077, 0x278d, 0x0, 0x0);
        gbc.writeMem(0xe155, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xfd21, gbc.sp());
        EXPECT(0xe157, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe155));
        EXPECT(0xdd, gbc.readMem(0xe156));
        // CB DD 033C
        gbc.setState(0x57eb, 0xc798, 0xe300, 0xf7ea, 0xe4eb, 0x9d98, 0x1, 0x1);
        gbc.writeMem(0x57eb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xc798, gbc.sp());
        EXPECT(0x57ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 033D
        gbc.setState(0x2eb1, 0x4c52, 0xf240, 0x71b, 0x8e5c, 0xf83a, 0x0, 0x0);
        gbc.writeMem(0x2eb1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x4c52, gbc.sp());
        EXPECT(0x2eb3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 033E
        gbc.setState(0x4118, 0x6c53, 0x17a0, 0x3a1d, 0x1e61, 0x4b8c, 0x1, 0x1);
        gbc.writeMem(0x4118, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x6c53, gbc.sp());
        EXPECT(0x411a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 033F
        gbc.setState(0xa3b1, 0x4377, 0x4570, 0xecd7, 0xc4ef, 0xbde8, 0x1, 0x0);
        gbc.writeMem(0xa3b1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x4377, gbc.sp());
        EXPECT(0xa3b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3b1));
        EXPECT(0xdd, gbc.readMem(0xa3b2));
        // CB DD 0340
        gbc.setState(0x7602, 0xdc74, 0xd230, 0x8d25, 0x5544, 0x9c87, 0x1, 0x0);
        gbc.writeMem(0x7602, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xdc74, gbc.sp());
        EXPECT(0x7604, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0341
        gbc.setState(0x9a29, 0xe76, 0x1320, 0x81ac, 0xe148, 0xf308, 0x0, 0x0);
        gbc.writeMem(0x9a29, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xe76, gbc.sp());
        EXPECT(0x9a2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a29));
        EXPECT(0xdd, gbc.readMem(0x9a2a));
        // CB DD 0342
        gbc.setState(0x20eb, 0x154c, 0x38d0, 0xb613, 0x324a, 0x5dc, 0x1, 0x1);
        gbc.writeMem(0x20eb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x154c, gbc.sp());
        EXPECT(0x20ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0344
        gbc.setState(0x9461, 0x5e06, 0x76a0, 0x9332, 0xd52d, 0xf692, 0x0, 0x1);
        gbc.writeMem(0x9461, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x5e06, gbc.sp());
        EXPECT(0x9463, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9461));
        EXPECT(0xdd, gbc.readMem(0x9462));
        // CB DD 0345
        gbc.setState(0x1a98, 0x6736, 0x7560, 0x4aff, 0x7c4e, 0xa8b6, 0x1, 0x1);
        gbc.writeMem(0x1a98, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x6736, gbc.sp());
        EXPECT(0x1a9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0346
        gbc.setState(0xb8e4, 0xeaf2, 0x6f60, 0xf0c6, 0x65e0, 0x9eec, 0x0, 0x1);
        gbc.writeMem(0xb8e4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xeaf2, gbc.sp());
        EXPECT(0xb8e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8e4));
        EXPECT(0xdd, gbc.readMem(0xb8e5));
        // CB DD 0348
        gbc.setState(0xdd5d, 0x10fb, 0xb940, 0xb8b6, 0x4e84, 0xf1df, 0x1, 0x0);
        gbc.writeMem(0xdd5d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x10fb, gbc.sp());
        EXPECT(0xdd5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd5d));
        EXPECT(0xdd, gbc.readMem(0xdd5e));
        // CB DD 0349
        gbc.setState(0xcb5e, 0x89b1, 0x92b0, 0x163c, 0xfa46, 0xd16c, 0x1, 0x1);
        gbc.writeMem(0xcb5e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x89b1, gbc.sp());
        EXPECT(0xcb60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb5e));
        EXPECT(0xdd, gbc.readMem(0xcb5f));
        // CB DD 034A
        gbc.setState(0xad6d, 0x221f, 0x5d0, 0x4040, 0x392d, 0x566a, 0x0, 0x0);
        gbc.writeMem(0xad6d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x221f, gbc.sp());
        EXPECT(0xad6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad6d));
        EXPECT(0xdd, gbc.readMem(0xad6e));
        // CB DD 034B
        gbc.setState(0x8af, 0xd104, 0x3960, 0x4b85, 0xedde, 0x60ea, 0x0, 0x1);
        gbc.writeMem(0x8af, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xd104, gbc.sp());
        EXPECT(0x8b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 034C
        gbc.setState(0x2241, 0x37d7, 0x4fe0, 0x14d1, 0xbd4c, 0x8022, 0x0, 0x0);
        gbc.writeMem(0x2241, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x37d7, gbc.sp());
        EXPECT(0x2243, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 034D
        gbc.setState(0x9910, 0x4acd, 0x580, 0x4bd, 0x7696, 0x719a, 0x0, 0x0);
        gbc.writeMem(0x9910, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x4acd, gbc.sp());
        EXPECT(0x9912, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9910));
        EXPECT(0xdd, gbc.readMem(0x9911));
        // CB DD 034F
        gbc.setState(0x5ba5, 0xaa8e, 0x2290, 0x2cb2, 0x9c0b, 0x2ea7, 0x0, 0x1);
        gbc.writeMem(0x5ba5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xaa8e, gbc.sp());
        EXPECT(0x5ba7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0350
        gbc.setState(0x1f9d, 0xc6f1, 0xc000, 0xe9fb, 0x385, 0x975a, 0x0, 0x1);
        gbc.writeMem(0x1f9d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xc6f1, gbc.sp());
        EXPECT(0x1f9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0351
        gbc.setState(0xdb04, 0xc0ac, 0x4db0, 0x9291, 0xdd7d, 0xfdfe, 0x0, 0x0);
        gbc.writeMem(0xdb04, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xc0ac, gbc.sp());
        EXPECT(0xdb06, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb04));
        EXPECT(0xdd, gbc.readMem(0xdb05));
        // CB DD 0352
        gbc.setState(0xb02b, 0x1598, 0x8ea0, 0x6958, 0xc55c, 0x7768, 0x1, 0x1);
        gbc.writeMem(0xb02b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x1598, gbc.sp());
        EXPECT(0xb02d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb02b));
        EXPECT(0xdd, gbc.readMem(0xb02c));
        // CB DD 0353
        gbc.setState(0x8fde, 0x4e98, 0xb440, 0x8363, 0xbfc2, 0xcb73, 0x0, 0x1);
        gbc.writeMem(0x8fde, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x4e98, gbc.sp());
        EXPECT(0x8fe0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fde));
        EXPECT(0xdd, gbc.readMem(0x8fdf));
        // CB DD 0354
        gbc.setState(0xe0ae, 0x3095, 0xf8b0, 0x6ccd, 0xa23e, 0xda8f, 0x0, 0x1);
        gbc.writeMem(0xe0ae, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x3095, gbc.sp());
        EXPECT(0xe0b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0ae));
        EXPECT(0xdd, gbc.readMem(0xe0af));
        // CB DD 0355
        gbc.setState(0x31b3, 0xe236, 0xb0e0, 0xce10, 0x982e, 0x7ddb, 0x1, 0x0);
        gbc.writeMem(0x31b3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xe236, gbc.sp());
        EXPECT(0x31b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0356
        gbc.setState(0x61e2, 0x4916, 0x5da0, 0x7e90, 0x1a33, 0x45, 0x0, 0x0);
        gbc.writeMem(0x61e2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x4916, gbc.sp());
        EXPECT(0x61e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0357
        gbc.setState(0x5d, 0x5f41, 0xf3d0, 0xfa53, 0x9364, 0x8c05, 0x1, 0x0);
        gbc.writeMem(0x5d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x5f41, gbc.sp());
        EXPECT(0x5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0358
        gbc.setState(0xe354, 0xac6d, 0x8b60, 0x479, 0x9bad, 0x14d4, 0x0, 0x1);
        gbc.writeMem(0xe354, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xac6d, gbc.sp());
        EXPECT(0xe356, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe354));
        EXPECT(0xdd, gbc.readMem(0xe355));
        // CB DD 0359
        gbc.setState(0x2bc8, 0x19f0, 0xb260, 0x8f3e, 0x5be4, 0xb235, 0x0, 0x1);
        gbc.writeMem(0x2bc8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x19f0, gbc.sp());
        EXPECT(0x2bca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 035A
        gbc.setState(0xd219, 0xee6a, 0x3110, 0xa0c9, 0xa179, 0x423c, 0x1, 0x1);
        gbc.writeMem(0xd219, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xee6a, gbc.sp());
        EXPECT(0xd21b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd219));
        EXPECT(0xdd, gbc.readMem(0xd21a));
        // CB DD 035B
        gbc.setState(0xac81, 0x3045, 0xe5f0, 0x247c, 0xabd7, 0xabdf, 0x1, 0x1);
        gbc.writeMem(0xac81, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x3045, gbc.sp());
        EXPECT(0xac83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac81));
        EXPECT(0xdd, gbc.readMem(0xac82));
        // CB DD 035C
        gbc.setState(0x28a5, 0xeb74, 0xd440, 0x6eb9, 0xe9bc, 0x35c0, 0x1, 0x0);
        gbc.writeMem(0x28a5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xeb74, gbc.sp());
        EXPECT(0x28a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 035D
        gbc.setState(0x4f68, 0xd14a, 0x29d0, 0x3846, 0xdf27, 0x786a, 0x1, 0x0);
        gbc.writeMem(0x4f68, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xd14a, gbc.sp());
        EXPECT(0x4f6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 035E
        gbc.setState(0x2ce3, 0x5edc, 0xa740, 0xbde0, 0xd331, 0xc38, 0x0, 0x1);
        gbc.writeMem(0x2ce3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x5edc, gbc.sp());
        EXPECT(0x2ce5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 035F
        gbc.setState(0x5781, 0xce5d, 0x7d30, 0x9e52, 0x66d1, 0x6d47, 0x1, 0x1);
        gbc.writeMem(0x5781, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xce5d, gbc.sp());
        EXPECT(0x5783, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0360
        gbc.setState(0xeba, 0x42c3, 0x70a0, 0xa456, 0x5d01, 0xa572, 0x0, 0x0);
        gbc.writeMem(0xeba, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x42c3, gbc.sp());
        EXPECT(0xebc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0362
        gbc.setState(0x934a, 0x5c98, 0xbb20, 0xcb3e, 0xc53a, 0x6415, 0x0, 0x1);
        gbc.writeMem(0x934a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x5c98, gbc.sp());
        EXPECT(0x934c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x934a));
        EXPECT(0xdd, gbc.readMem(0x934b));
        // CB DD 0363
        gbc.setState(0x146e, 0x2f05, 0xcf30, 0x5175, 0x3f52, 0x9ec, 0x1, 0x1);
        gbc.writeMem(0x146e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x2f05, gbc.sp());
        EXPECT(0x1470, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0364
        gbc.setState(0x3465, 0x93e, 0x4180, 0x288c, 0x9c01, 0x8d37, 0x1, 0x0);
        gbc.writeMem(0x3465, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x93e, gbc.sp());
        EXPECT(0x3467, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0365
        gbc.setState(0xad1f, 0x18c4, 0x8cb0, 0xb4d8, 0x32d1, 0x5fca, 0x1, 0x0);
        gbc.writeMem(0xad1f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x18c4, gbc.sp());
        EXPECT(0xad21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad1f));
        EXPECT(0xdd, gbc.readMem(0xad20));
        // CB DD 0366
        gbc.setState(0x8e00, 0xb02c, 0x8170, 0x836a, 0xeee3, 0xf5fb, 0x0, 0x0);
        gbc.writeMem(0x8e00, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xb02c, gbc.sp());
        EXPECT(0x8e02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e00));
        EXPECT(0xdd, gbc.readMem(0x8e01));
        // CB DD 0367
        gbc.setState(0x486, 0x60ae, 0xe270, 0x9180, 0x3510, 0xc16c, 0x1, 0x1);
        gbc.writeMem(0x486, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x60ae, gbc.sp());
        EXPECT(0x488, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0368
        gbc.setState(0x86b5, 0x4c1f, 0x1f50, 0x1b39, 0x30c8, 0x56b7, 0x1, 0x1);
        gbc.writeMem(0x86b5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x4c1f, gbc.sp());
        EXPECT(0x86b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86b5));
        EXPECT(0xdd, gbc.readMem(0x86b6));
        // CB DD 0369
        gbc.setState(0x7031, 0x28bd, 0x8310, 0xd6c0, 0xad70, 0x2ca5, 0x1, 0x1);
        gbc.writeMem(0x7031, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x28bd, gbc.sp());
        EXPECT(0x7033, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 036A
        gbc.setState(0xf5d, 0x6464, 0x9ce0, 0xc1ee, 0xd3a8, 0x72ab, 0x0, 0x0);
        gbc.writeMem(0xf5d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x6464, gbc.sp());
        EXPECT(0xf5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 036B
        gbc.setState(0xd303, 0xad3b, 0x1890, 0x6562, 0xfed2, 0xb6b6, 0x1, 0x1);
        gbc.writeMem(0xd303, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xad3b, gbc.sp());
        EXPECT(0xd305, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd303));
        EXPECT(0xdd, gbc.readMem(0xd304));
        // CB DD 036C
        gbc.setState(0x1016, 0xdbba, 0xfa20, 0xed20, 0x65f7, 0xdb70, 0x1, 0x0);
        gbc.writeMem(0x1016, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xdbba, gbc.sp());
        EXPECT(0x1018, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 036D
        gbc.setState(0xd707, 0x217, 0xf5f0, 0x7473, 0x88e5, 0xcc5, 0x1, 0x1);
        gbc.writeMem(0xd707, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x217, gbc.sp());
        EXPECT(0xd709, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd707));
        EXPECT(0xdd, gbc.readMem(0xd708));
        // CB DD 036E
        gbc.setState(0x7780, 0x2301, 0x8290, 0xec2c, 0x1151, 0xca2, 0x1, 0x0);
        gbc.writeMem(0x7780, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x2301, gbc.sp());
        EXPECT(0x7782, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 036F
        gbc.setState(0xd96b, 0xe434, 0x4d00, 0xa3da, 0x16c2, 0xb890, 0x1, 0x0);
        gbc.writeMem(0xd96b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xe434, gbc.sp());
        EXPECT(0xd96d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd96b));
        EXPECT(0xdd, gbc.readMem(0xd96c));
        // CB DD 0372
        gbc.setState(0x329e, 0x952, 0xa690, 0x280f, 0x71cb, 0xb6fc, 0x1, 0x1);
        gbc.writeMem(0x329e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x952, gbc.sp());
        EXPECT(0x32a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0373
        gbc.setState(0xc1ec, 0x258a, 0xc00, 0xd83a, 0x844d, 0x3d21, 0x1, 0x0);
        gbc.writeMem(0xc1ec, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x258a, gbc.sp());
        EXPECT(0xc1ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1ec));
        EXPECT(0xdd, gbc.readMem(0xc1ed));
        // CB DD 0374
        gbc.setState(0x40ff, 0x2f65, 0x5ba0, 0xe230, 0x85b8, 0x2ad8, 0x1, 0x0);
        gbc.writeMem(0x40ff, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x2f65, gbc.sp());
        EXPECT(0x4101, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0375
        gbc.setState(0x5460, 0x4ab5, 0x9620, 0x50e, 0xccc3, 0xac6d, 0x1, 0x0);
        gbc.writeMem(0x5460, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x4ab5, gbc.sp());
        EXPECT(0x5462, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0376
        gbc.setState(0x45e7, 0x62ce, 0xf260, 0x4653, 0xc9a8, 0xc3af, 0x1, 0x1);
        gbc.writeMem(0x45e7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x62ce, gbc.sp());
        EXPECT(0x45e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0377
        gbc.setState(0x88d8, 0x34, 0xea00, 0x77e8, 0x5e43, 0xa511, 0x0, 0x1);
        gbc.writeMem(0x88d8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x34, gbc.sp());
        EXPECT(0x88da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88d8));
        EXPECT(0xdd, gbc.readMem(0x88d9));
        // CB DD 0378
        gbc.setState(0xcde1, 0x9a9d, 0xd50, 0x6214, 0x848, 0x9a26, 0x0, 0x0);
        gbc.writeMem(0xcde1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x9a9d, gbc.sp());
        EXPECT(0xcde3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcde1));
        EXPECT(0xdd, gbc.readMem(0xcde2));
        // CB DD 0379
        gbc.setState(0x2a06, 0x54fb, 0xf8e0, 0x993a, 0x8d18, 0x890d, 0x0, 0x0);
        gbc.writeMem(0x2a06, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x54fb, gbc.sp());
        EXPECT(0x2a08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 037A
        gbc.setState(0x98fd, 0x83c3, 0xc60, 0x42a6, 0x11d7, 0x35c7, 0x1, 0x1);
        gbc.writeMem(0x98fd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x83c3, gbc.sp());
        EXPECT(0x98ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98fd));
        EXPECT(0xdd, gbc.readMem(0x98fe));
        // CB DD 037B
        gbc.setState(0xf24, 0xf396, 0x5520, 0xd115, 0xb3ac, 0xe6d9, 0x1, 0x1);
        gbc.writeMem(0xf24, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xf396, gbc.sp());
        EXPECT(0xf26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 037C
        gbc.setState(0xe669, 0x229e, 0x3750, 0x6022, 0x15a7, 0x7813, 0x1, 0x0);
        gbc.writeMem(0xe669, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x229e, gbc.sp());
        EXPECT(0xe66b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe669));
        EXPECT(0xdd, gbc.readMem(0xe66a));
        // CB DD 037D
        gbc.setState(0xbd02, 0xeeca, 0x1050, 0x6d20, 0x180a, 0x1be4, 0x0, 0x1);
        gbc.writeMem(0xbd02, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xeeca, gbc.sp());
        EXPECT(0xbd04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd02));
        EXPECT(0xdd, gbc.readMem(0xbd03));
        // CB DD 037E
        gbc.setState(0xa76e, 0xe461, 0x3ca0, 0xeb4a, 0x8e52, 0xcbe1, 0x0, 0x1);
        gbc.writeMem(0xa76e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xe461, gbc.sp());
        EXPECT(0xa770, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa76e));
        EXPECT(0xdd, gbc.readMem(0xa76f));
        // CB DD 037F
        gbc.setState(0x6f8c, 0x3e53, 0x6160, 0xc32b, 0x7dde, 0xe5f8, 0x1, 0x1);
        gbc.writeMem(0x6f8c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x3e53, gbc.sp());
        EXPECT(0x6f8e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0380
        gbc.setState(0xc515, 0x3379, 0x2f0, 0x9323, 0x26de, 0x1d34, 0x1, 0x0);
        gbc.writeMem(0xc515, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x3379, gbc.sp());
        EXPECT(0xc517, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc515));
        EXPECT(0xdd, gbc.readMem(0xc516));
        // CB DD 0383
        gbc.setState(0x94a2, 0xe678, 0x3350, 0x3446, 0xf559, 0xf361, 0x1, 0x0);
        gbc.writeMem(0x94a2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xe678, gbc.sp());
        EXPECT(0x94a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94a2));
        EXPECT(0xdd, gbc.readMem(0x94a3));
        // CB DD 0384
        gbc.setState(0xd771, 0x936c, 0xe990, 0xe831, 0xe24a, 0xb71, 0x0, 0x1);
        gbc.writeMem(0xd771, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x936c, gbc.sp());
        EXPECT(0xd773, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd771));
        EXPECT(0xdd, gbc.readMem(0xd772));
        // CB DD 0385
        gbc.setState(0x2502, 0x6348, 0x1ae0, 0x8834, 0x6a1b, 0xc7ca, 0x0, 0x1);
        gbc.writeMem(0x2502, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x6348, gbc.sp());
        EXPECT(0x2504, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0386
        gbc.setState(0xd1bd, 0x652d, 0x7c80, 0xad89, 0xa30b, 0xac4a, 0x1, 0x0);
        gbc.writeMem(0xd1bd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x652d, gbc.sp());
        EXPECT(0xd1bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1bd));
        EXPECT(0xdd, gbc.readMem(0xd1be));
        // CB DD 0387
        gbc.setState(0xe142, 0xfab6, 0x9370, 0x1e85, 0x6b71, 0x5b3c, 0x0, 0x0);
        gbc.writeMem(0xe142, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xfab6, gbc.sp());
        EXPECT(0xe144, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe142));
        EXPECT(0xdd, gbc.readMem(0xe143));
        // CB DD 0388
        gbc.setState(0xc92d, 0x74dd, 0x5450, 0xd753, 0xc90f, 0xa1e3, 0x1, 0x0);
        gbc.writeMem(0xc92d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x74dd, gbc.sp());
        EXPECT(0xc92f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc92d));
        EXPECT(0xdd, gbc.readMem(0xc92e));
        // CB DD 0389
        gbc.setState(0xb308, 0xdb99, 0x1a40, 0xd0bd, 0xb3eb, 0x2a2a, 0x1, 0x1);
        gbc.writeMem(0xb308, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xdb99, gbc.sp());
        EXPECT(0xb30a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb308));
        EXPECT(0xdd, gbc.readMem(0xb309));
        // CB DD 038A
        gbc.setState(0x90e1, 0x2ce, 0xe8b0, 0x694b, 0x85b6, 0x2f8c, 0x1, 0x1);
        gbc.writeMem(0x90e1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x2ce, gbc.sp());
        EXPECT(0x90e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90e1));
        EXPECT(0xdd, gbc.readMem(0x90e2));
        // CB DD 038B
        gbc.setState(0xaf1, 0x3f7e, 0xfe90, 0xc093, 0x7667, 0x723b, 0x0, 0x0);
        gbc.writeMem(0xaf1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x3f7e, gbc.sp());
        EXPECT(0xaf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 038C
        gbc.setState(0x4462, 0x4f67, 0x3d30, 0xefe, 0x2dee, 0x1d5e, 0x1, 0x1);
        gbc.writeMem(0x4462, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x4f67, gbc.sp());
        EXPECT(0x4464, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 038D
        gbc.setState(0x2eec, 0xfd05, 0xa8c0, 0x7341, 0x3d03, 0x4772, 0x1, 0x1);
        gbc.writeMem(0x2eec, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xfd05, gbc.sp());
        EXPECT(0x2eee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 038E
        gbc.setState(0x8327, 0x6886, 0xb030, 0x4c01, 0x7595, 0xa5ee, 0x1, 0x0);
        gbc.writeMem(0x8327, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x6886, gbc.sp());
        EXPECT(0x8329, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8327));
        EXPECT(0xdd, gbc.readMem(0x8328));
        // CB DD 038F
        gbc.setState(0x5eb3, 0x7dc8, 0xbb10, 0xb785, 0xc4a9, 0x68fd, 0x0, 0x1);
        gbc.writeMem(0x5eb3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x7dc8, gbc.sp());
        EXPECT(0x5eb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0390
        gbc.setState(0x368, 0x6a3f, 0xf6a0, 0x405c, 0x4276, 0x1717, 0x0, 0x1);
        gbc.writeMem(0x368, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x6a3f, gbc.sp());
        EXPECT(0x36a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0391
        gbc.setState(0xde59, 0x2edc, 0x9ab0, 0xb32, 0x3966, 0x68e4, 0x1, 0x1);
        gbc.writeMem(0xde59, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x2edc, gbc.sp());
        EXPECT(0xde5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde59));
        EXPECT(0xdd, gbc.readMem(0xde5a));
        // CB DD 0392
        gbc.setState(0x268c, 0xe9fb, 0x60b0, 0x6bf9, 0x1d6e, 0x1769, 0x0, 0x0);
        gbc.writeMem(0x268c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xe9fb, gbc.sp());
        EXPECT(0x268e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0393
        gbc.setState(0x30a1, 0x6684, 0x1f70, 0x1cf4, 0x6734, 0x6ba0, 0x0, 0x1);
        gbc.writeMem(0x30a1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x6684, gbc.sp());
        EXPECT(0x30a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 0394
        gbc.setState(0x981a, 0x9a3, 0xc7b0, 0x3412, 0x9c80, 0x8548, 0x0, 0x0);
        gbc.writeMem(0x981a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x9a3, gbc.sp());
        EXPECT(0x981c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x981a));
        EXPECT(0xdd, gbc.readMem(0x981b));
        // CB DD 0395
        gbc.setState(0x8e0b, 0x413c, 0xf300, 0x6963, 0xe2fe, 0xbf6e, 0x1, 0x1);
        gbc.writeMem(0x8e0b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x413c, gbc.sp());
        EXPECT(0x8e0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e0b));
        EXPECT(0xdd, gbc.readMem(0x8e0c));
        // CB DD 0396
        gbc.setState(0x35a0, 0xeb3e, 0xd8c0, 0x6443, 0x2f42, 0xb8f3, 0x0, 0x1);
        gbc.writeMem(0x35a0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xeb3e, gbc.sp());
        EXPECT(0x35a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 0397
        gbc.setState(0x8d21, 0xa6, 0xa960, 0xbec, 0x3b39, 0x987f, 0x0, 0x1);
        gbc.writeMem(0x8d21, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xa6, gbc.sp());
        EXPECT(0x8d23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d21));
        EXPECT(0xdd, gbc.readMem(0x8d22));
        // CB DD 0398
        gbc.setState(0xc662, 0xba45, 0x1f90, 0xcc3, 0x7fc5, 0xb2fe, 0x0, 0x1);
        gbc.writeMem(0xc662, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xba45, gbc.sp());
        EXPECT(0xc664, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc662));
        EXPECT(0xdd, gbc.readMem(0xc663));
        // CB DD 0399
        gbc.setState(0xf, 0x549e, 0x6bf0, 0xa4e1, 0xd0c0, 0x6728, 0x1, 0x0);
        gbc.writeMem(0xf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x549e, gbc.sp());
        EXPECT(0x11, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 039A
        gbc.setState(0x79b6, 0xa26d, 0xea30, 0xd9e2, 0xfa8, 0x6044, 0x0, 0x0);
        gbc.writeMem(0x79b6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xa26d, gbc.sp());
        EXPECT(0x79b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 039B
        gbc.setState(0x5fa0, 0xc2ea, 0x4f00, 0x8974, 0x3303, 0x31a8, 0x0, 0x1);
        gbc.writeMem(0x5fa0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xc2ea, gbc.sp());
        EXPECT(0x5fa2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 039C
        gbc.setState(0x6e71, 0x52da, 0x13a0, 0xa552, 0x3289, 0x3933, 0x0, 0x1);
        gbc.writeMem(0x6e71, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x52da, gbc.sp());
        EXPECT(0x6e73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 039D
        gbc.setState(0x13cd, 0x18e8, 0xc380, 0x51e9, 0x60, 0x70fb, 0x1, 0x1);
        gbc.writeMem(0x13cd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x18e8, gbc.sp());
        EXPECT(0x13cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 039E
        gbc.setState(0xe280, 0xde72, 0xfd10, 0x3f55, 0x5035, 0x5663, 0x0, 0x0);
        gbc.writeMem(0xe280, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xde72, gbc.sp());
        EXPECT(0xe282, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe280));
        EXPECT(0xdd, gbc.readMem(0xe281));
        // CB DD 039F
        gbc.setState(0xee00, 0x541d, 0xea0, 0xe631, 0x9f0c, 0x30ee, 0x0, 0x1);
        gbc.writeMem(0xee00, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x541d, gbc.sp());
        EXPECT(0xee02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee00));
        EXPECT(0xdd, gbc.readMem(0xee01));
        // CB DD 03A0
        gbc.setState(0x9f9e, 0x50a8, 0x5a70, 0x29e7, 0xaccb, 0x9f58, 0x0, 0x0);
        gbc.writeMem(0x9f9e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x50a8, gbc.sp());
        EXPECT(0x9fa0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f9e));
        EXPECT(0xdd, gbc.readMem(0x9f9f));
        // CB DD 03A1
        gbc.setState(0x1f80, 0x445, 0x5860, 0x9a2b, 0xa939, 0x9a97, 0x1, 0x1);
        gbc.writeMem(0x1f80, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x445, gbc.sp());
        EXPECT(0x1f82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03A2
        gbc.setState(0xdd9, 0x5168, 0xd2d0, 0xed37, 0x597d, 0xa77d, 0x0, 0x1);
        gbc.writeMem(0xdd9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x5168, gbc.sp());
        EXPECT(0xddb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03A3
        gbc.setState(0x8e87, 0x8771, 0x3d60, 0x3a7a, 0xd723, 0xab4f, 0x1, 0x0);
        gbc.writeMem(0x8e87, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x8771, gbc.sp());
        EXPECT(0x8e89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e87));
        EXPECT(0xdd, gbc.readMem(0x8e88));
        // CB DD 03A4
        gbc.setState(0x9356, 0x894a, 0xcd50, 0x17bf, 0xe228, 0xf7e3, 0x1, 0x1);
        gbc.writeMem(0x9356, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x894a, gbc.sp());
        EXPECT(0x9358, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9356));
        EXPECT(0xdd, gbc.readMem(0x9357));
        // CB DD 03A5
        gbc.setState(0x6bd4, 0x252d, 0x30c0, 0x42ae, 0x4254, 0xa82b, 0x1, 0x0);
        gbc.writeMem(0x6bd4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x252d, gbc.sp());
        EXPECT(0x6bd6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03A6
        gbc.setState(0xc5e1, 0xb2c7, 0x6d0, 0x27b6, 0xea7f, 0xeced, 0x0, 0x1);
        gbc.writeMem(0xc5e1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xb2c7, gbc.sp());
        EXPECT(0xc5e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5e1));
        EXPECT(0xdd, gbc.readMem(0xc5e2));
        // CB DD 03A7
        gbc.setState(0xa796, 0xa29f, 0x50f0, 0xa74a, 0xe5af, 0xae6e, 0x1, 0x1);
        gbc.writeMem(0xa796, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xa29f, gbc.sp());
        EXPECT(0xa798, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa796));
        EXPECT(0xdd, gbc.readMem(0xa797));
        // CB DD 03A8
        gbc.setState(0x60cc, 0xff7b, 0xe380, 0xf3a, 0x1f90, 0x3e64, 0x1, 0x1);
        gbc.writeMem(0x60cc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xff7b, gbc.sp());
        EXPECT(0x60ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03A9
        gbc.setState(0x8db1, 0xf007, 0x8390, 0x8bf5, 0x829e, 0x70b, 0x1, 0x0);
        gbc.writeMem(0x8db1, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xf007, gbc.sp());
        EXPECT(0x8db3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8db1));
        EXPECT(0xdd, gbc.readMem(0x8db2));
        // CB DD 03AA
        gbc.setState(0xe0a5, 0xcae0, 0x7b0, 0x3c4, 0xc2d4, 0xf91, 0x0, 0x0);
        gbc.writeMem(0xe0a5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xcae0, gbc.sp());
        EXPECT(0xe0a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0a5));
        EXPECT(0xdd, gbc.readMem(0xe0a6));
        // CB DD 03AB
        gbc.setState(0xe998, 0x70ec, 0x44e0, 0x563f, 0xa20c, 0xd445, 0x1, 0x1);
        gbc.writeMem(0xe998, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x70ec, gbc.sp());
        EXPECT(0xe99a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe998));
        EXPECT(0xdd, gbc.readMem(0xe999));
        // CB DD 03AC
        gbc.setState(0xa9e0, 0x6fb9, 0x1b50, 0xfb4a, 0x478d, 0x81c1, 0x0, 0x0);
        gbc.writeMem(0xa9e0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x6fb9, gbc.sp());
        EXPECT(0xa9e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9e0));
        EXPECT(0xdd, gbc.readMem(0xa9e1));
        // CB DD 03AE
        gbc.setState(0xcf1b, 0x5a4c, 0x1240, 0x78d8, 0x36d0, 0xf8cd, 0x1, 0x1);
        gbc.writeMem(0xcf1b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x5a4c, gbc.sp());
        EXPECT(0xcf1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf1b));
        EXPECT(0xdd, gbc.readMem(0xcf1c));
        // CB DD 03AF
        gbc.setState(0xb963, 0xb7d5, 0xb240, 0x54e8, 0xfcf0, 0x5dc6, 0x1, 0x1);
        gbc.writeMem(0xb963, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xb7d5, gbc.sp());
        EXPECT(0xb965, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb963));
        EXPECT(0xdd, gbc.readMem(0xb964));
        // CB DD 03B0
        gbc.setState(0xa6dc, 0x35dc, 0x5c90, 0x93f3, 0x6586, 0xf677, 0x1, 0x0);
        gbc.writeMem(0xa6dc, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x35dc, gbc.sp());
        EXPECT(0xa6de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6dc));
        EXPECT(0xdd, gbc.readMem(0xa6dd));
        // CB DD 03B2
        gbc.setState(0x633f, 0x1052, 0x31e0, 0x1bfd, 0xd13b, 0x2b9b, 0x0, 0x1);
        gbc.writeMem(0x633f, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x1052, gbc.sp());
        EXPECT(0x6341, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03B4
        gbc.setState(0x9d66, 0x87fc, 0xa8b0, 0x66e4, 0xcc6f, 0x10b2, 0x0, 0x0);
        gbc.writeMem(0x9d66, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x87fc, gbc.sp());
        EXPECT(0x9d68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d66));
        EXPECT(0xdd, gbc.readMem(0x9d67));
        // CB DD 03B5
        gbc.setState(0xdabd, 0xa1ad, 0x8cc0, 0x3c55, 0xf048, 0x51b8, 0x1, 0x0);
        gbc.writeMem(0xdabd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xa1ad, gbc.sp());
        EXPECT(0xdabf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdabd));
        EXPECT(0xdd, gbc.readMem(0xdabe));
        // CB DD 03B6
        gbc.setState(0x3922, 0x2f95, 0xfa0, 0x33e8, 0xf78, 0xe0c1, 0x1, 0x1);
        gbc.writeMem(0x3922, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x2f95, gbc.sp());
        EXPECT(0x3924, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03B7
        gbc.setState(0x7fa2, 0x5122, 0xe4c0, 0x983f, 0x988f, 0xfd26, 0x0, 0x1);
        gbc.writeMem(0x7fa2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x5122, gbc.sp());
        EXPECT(0x7fa4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03B8
        gbc.setState(0x58a, 0x67cf, 0xfe70, 0x3a91, 0xb2f3, 0x3c8, 0x0, 0x1);
        gbc.writeMem(0x58a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x67cf, gbc.sp());
        EXPECT(0x58c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03B9
        gbc.setState(0xe60c, 0x93b3, 0x4180, 0xe7f6, 0xbe6, 0x4f5f, 0x1, 0x1);
        gbc.writeMem(0xe60c, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x93b3, gbc.sp());
        EXPECT(0xe60e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe60c));
        EXPECT(0xdd, gbc.readMem(0xe60d));
        // CB DD 03BA
        gbc.setState(0x338d, 0xc0d2, 0x7e90, 0xd252, 0xc769, 0x8797, 0x0, 0x0);
        gbc.writeMem(0x338d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xc0d2, gbc.sp());
        EXPECT(0x338f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03BB
        gbc.setState(0x6498, 0xd0cd, 0x3650, 0xd858, 0x39ad, 0xbd52, 0x1, 0x0);
        gbc.writeMem(0x6498, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xd0cd, gbc.sp());
        EXPECT(0x649a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03BC
        gbc.setState(0x108, 0x949d, 0x2fc0, 0xcd7, 0xca67, 0x556e, 0x0, 0x0);
        gbc.writeMem(0x108, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x949d, gbc.sp());
        EXPECT(0x10a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03BD
        gbc.setState(0x2309, 0xc9b3, 0x2100, 0xd1d0, 0x273, 0x7983, 0x1, 0x1);
        gbc.writeMem(0x2309, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xc9b3, gbc.sp());
        EXPECT(0x230b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03BE
        gbc.setState(0x1d1d, 0x77e7, 0x2ad0, 0xfcf7, 0xb8f3, 0x6966, 0x0, 0x1);
        gbc.writeMem(0x1d1d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x77e7, gbc.sp());
        EXPECT(0x1d1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03BF
        gbc.setState(0x4ca5, 0xad04, 0xa80, 0x656c, 0x89b9, 0x1286, 0x1, 0x1);
        gbc.writeMem(0x4ca5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xad04, gbc.sp());
        EXPECT(0x4ca7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03C0
        gbc.setState(0x447e, 0x78ab, 0x3f50, 0x8458, 0x741f, 0xfa3e, 0x0, 0x0);
        gbc.writeMem(0x447e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x78ab, gbc.sp());
        EXPECT(0x4480, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03C1
        gbc.setState(0x8ace, 0x805f, 0xfa30, 0x96c7, 0xecea, 0x888e, 0x0, 0x1);
        gbc.writeMem(0x8ace, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x805f, gbc.sp());
        EXPECT(0x8ad0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ace));
        EXPECT(0xdd, gbc.readMem(0x8acf));
        // CB DD 03C2
        gbc.setState(0x82fd, 0x5446, 0x4ee0, 0x4cbf, 0x6e47, 0xc973, 0x1, 0x1);
        gbc.writeMem(0x82fd, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x5446, gbc.sp());
        EXPECT(0x82ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82fd));
        EXPECT(0xdd, gbc.readMem(0x82fe));
        // CB DD 03C3
        gbc.setState(0x862a, 0x21e8, 0xa5c0, 0x7131, 0x1c7e, 0x7ae2, 0x0, 0x0);
        gbc.writeMem(0x862a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x21e8, gbc.sp());
        EXPECT(0x862c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x862a));
        EXPECT(0xdd, gbc.readMem(0x862b));
        // CB DD 03C4
        gbc.setState(0xd516, 0xf147, 0xd210, 0xaa15, 0xce11, 0x47f5, 0x0, 0x1);
        gbc.writeMem(0xd516, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xf147, gbc.sp());
        EXPECT(0xd518, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd516));
        EXPECT(0xdd, gbc.readMem(0xd517));
        // CB DD 03C5
        gbc.setState(0x67d8, 0xcd87, 0x90e0, 0x890f, 0x54f4, 0xbc99, 0x1, 0x1);
        gbc.writeMem(0x67d8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xcd87, gbc.sp());
        EXPECT(0x67da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03C6
        gbc.setState(0x2ba0, 0x75e1, 0x1b00, 0x564a, 0x97de, 0x3534, 0x1, 0x0);
        gbc.writeMem(0x2ba0, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x75e1, gbc.sp());
        EXPECT(0x2ba2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03C7
        gbc.setState(0xeca4, 0x730a, 0xe330, 0x79e3, 0xf0c5, 0x1054, 0x0, 0x1);
        gbc.writeMem(0xeca4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x730a, gbc.sp());
        EXPECT(0xeca6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeca4));
        EXPECT(0xdd, gbc.readMem(0xeca5));
        // CB DD 03C8
        gbc.setState(0xb35e, 0xaaa4, 0x76c0, 0xf79f, 0x96d, 0x26d9, 0x1, 0x1);
        gbc.writeMem(0xb35e, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xaaa4, gbc.sp());
        EXPECT(0xb360, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb35e));
        EXPECT(0xdd, gbc.readMem(0xb35f));
        // CB DD 03C9
        gbc.setState(0xda59, 0xe5b7, 0xe660, 0xca1b, 0x391e, 0x13fe, 0x0, 0x1);
        gbc.writeMem(0xda59, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xe5b7, gbc.sp());
        EXPECT(0xda5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda59));
        EXPECT(0xdd, gbc.readMem(0xda5a));
        // CB DD 03CB
        gbc.setState(0x27be, 0x3b3, 0xe330, 0x61de, 0xfae6, 0x4a7f, 0x1, 0x0);
        gbc.writeMem(0x27be, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x3b3, gbc.sp());
        EXPECT(0x27c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03CC
        gbc.setState(0xbc20, 0x2397, 0x4ca0, 0x38ae, 0x28bf, 0xa25f, 0x0, 0x1);
        gbc.writeMem(0xbc20, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x2397, gbc.sp());
        EXPECT(0xbc22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc20));
        EXPECT(0xdd, gbc.readMem(0xbc21));
        // CB DD 03CD
        gbc.setState(0x9df8, 0x1de1, 0xb820, 0xb1a, 0x1c0a, 0xf2dc, 0x0, 0x1);
        gbc.writeMem(0x9df8, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x1de1, gbc.sp());
        EXPECT(0x9dfa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9df8));
        EXPECT(0xdd, gbc.readMem(0x9df9));
        // CB DD 03CE
        gbc.setState(0x1f00, 0x4cde, 0x7e40, 0x2589, 0x762c, 0x2db3, 0x1, 0x0);
        gbc.writeMem(0x1f00, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x4cde, gbc.sp());
        EXPECT(0x1f02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03CF
        gbc.setState(0x47b4, 0x11b, 0xfc70, 0x6dba, 0x1077, 0xbf34, 0x1, 0x0);
        gbc.writeMem(0x47b4, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x11b, gbc.sp());
        EXPECT(0x47b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03D0
        gbc.setState(0xee71, 0x3a37, 0x5cb0, 0x58d6, 0x9647, 0x6f17, 0x0, 0x0);
        gbc.writeMem(0xee71, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x3a37, gbc.sp());
        EXPECT(0xee73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee71));
        EXPECT(0xdd, gbc.readMem(0xee72));
        // CB DD 03D1
        gbc.setState(0x1eb3, 0xf06c, 0x3600, 0xa64f, 0x93d2, 0x234f, 0x1, 0x0);
        gbc.writeMem(0x1eb3, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xf06c, gbc.sp());
        EXPECT(0x1eb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03D2
        gbc.setState(0xa3cb, 0x638a, 0xd950, 0xaf84, 0x77e4, 0x7670, 0x1, 0x0);
        gbc.writeMem(0xa3cb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x638a, gbc.sp());
        EXPECT(0xa3cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3cb));
        EXPECT(0xdd, gbc.readMem(0xa3cc));
        // CB DD 03D3
        gbc.setState(0x79a7, 0xb8ec, 0x3660, 0xd069, 0x49e1, 0x29f9, 0x0, 0x0);
        gbc.writeMem(0x79a7, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xb8ec, gbc.sp());
        EXPECT(0x79a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03D4
        gbc.setState(0x992a, 0x7a71, 0x7b40, 0x44cc, 0x3515, 0x3a7b, 0x0, 0x1);
        gbc.writeMem(0x992a, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x7a71, gbc.sp());
        EXPECT(0x992c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x992a));
        EXPECT(0xdd, gbc.readMem(0x992b));
        // CB DD 03D5
        gbc.setState(0xda2, 0x5809, 0x4d70, 0x52a3, 0x11ec, 0xe06a, 0x1, 0x0);
        gbc.writeMem(0xda2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x5809, gbc.sp());
        EXPECT(0xda4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03D6
        gbc.setState(0x5381, 0x5ac6, 0x3dc0, 0x6520, 0x49a8, 0x911d, 0x1, 0x1);
        gbc.writeMem(0x5381, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x5ac6, gbc.sp());
        EXPECT(0x5383, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03D7
        gbc.setState(0x335, 0x7153, 0x7810, 0x26ff, 0xa62f, 0x36b6, 0x1, 0x1);
        gbc.writeMem(0x335, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x7153, gbc.sp());
        EXPECT(0x337, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03D8
        gbc.setState(0xaacf, 0xec93, 0x6800, 0xd1ea, 0x33f9, 0x69ae, 0x0, 0x1);
        gbc.writeMem(0xaacf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xec93, gbc.sp());
        EXPECT(0xaad1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaacf));
        EXPECT(0xdd, gbc.readMem(0xaad0));
        // CB DD 03D9
        gbc.setState(0x5acf, 0x74c7, 0xcdc0, 0x85e0, 0x1764, 0x3cce, 0x0, 0x0);
        gbc.writeMem(0x5acf, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x74c7, gbc.sp());
        EXPECT(0x5ad1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03DA
        gbc.setState(0xd508, 0x2607, 0xa1e0, 0x6c5, 0xbb10, 0xcf14, 0x0, 0x0);
        gbc.writeMem(0xd508, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x2607, gbc.sp());
        EXPECT(0xd50a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd508));
        EXPECT(0xdd, gbc.readMem(0xd509));
        // CB DD 03DB
        gbc.setState(0xb42d, 0xad24, 0x9c00, 0xf536, 0x7d2f, 0x9baa, 0x0, 0x1);
        gbc.writeMem(0xb42d, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xad24, gbc.sp());
        EXPECT(0xb42f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb42d));
        EXPECT(0xdd, gbc.readMem(0xb42e));
        // CB DD 03DC
        gbc.setState(0x9dc2, 0x7999, 0xe430, 0xf5da, 0x8110, 0x916, 0x0, 0x1);
        gbc.writeMem(0x9dc2, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x7999, gbc.sp());
        EXPECT(0x9dc4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9dc2));
        EXPECT(0xdd, gbc.readMem(0x9dc3));
        // CB DD 03DD
        gbc.setState(0x62fa, 0x1a68, 0xd220, 0xe19a, 0x81da, 0x9bbb, 0x0, 0x1);
        gbc.writeMem(0x62fa, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x1a68, gbc.sp());
        EXPECT(0x62fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB DD 03DE
        gbc.setState(0xb592, 0x7f3, 0xee80, 0x84a9, 0x368d, 0x1911, 0x0, 0x0);
        gbc.writeMem(0xb592, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x7f3, gbc.sp());
        EXPECT(0xb594, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb592));
        EXPECT(0xdd, gbc.readMem(0xb593));
        // CB DD 03DF
        gbc.setState(0xa521, 0x726d, 0x7450, 0x74ea, 0x8c1, 0xf972, 0x1, 0x0);
        gbc.writeMem(0xa521, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x726d, gbc.sp());
        EXPECT(0xa523, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa521));
        EXPECT(0xdd, gbc.readMem(0xa522));
        // CB DD 03E0
        gbc.setState(0xb7f9, 0x257d, 0xcb40, 0x26c5, 0xa5c3, 0x4527, 0x0, 0x0);
        gbc.writeMem(0xb7f9, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x257d, gbc.sp());
        EXPECT(0xb7fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7f9));
        EXPECT(0xdd, gbc.readMem(0xb7fa));
        // CB DD 03E1
        gbc.setState(0x8c05, 0xb3f4, 0x1450, 0x1ccd, 0x7e2e, 0x42e3, 0x0, 0x1);
        gbc.writeMem(0x8c05, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xb3f4, gbc.sp());
        EXPECT(0x8c07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c05));
        EXPECT(0xdd, gbc.readMem(0x8c06));
        // CB DD 03E3
        gbc.setState(0xeccb, 0xa39e, 0xb480, 0xe324, 0xab38, 0xd2e1, 0x1, 0x0);
        gbc.writeMem(0xeccb, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xa39e, gbc.sp());
        EXPECT(0xeccd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeccb));
        EXPECT(0xdd, gbc.readMem(0xeccc));
        // CB DD 03E4
        gbc.setState(0x1be6, 0xf7, 0xaa70, 0x948e, 0x56a1, 0xfae4, 0x0, 0x0);
        gbc.writeMem(0x1be6, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xf7, gbc.sp());
        EXPECT(0x1be8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB DD 03E5
        gbc.setState(0x80f5, 0xcf1f, 0x8c90, 0x50a0, 0x57ce, 0xe1e5, 0x0, 0x1);
        gbc.writeMem(0x80f5, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xcf1f, gbc.sp());
        EXPECT(0x80f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80f5));
        EXPECT(0xdd, gbc.readMem(0x80f6));
        // CB DD 03E6
        gbc.setState(0x9f57, 0x4429, 0x7360, 0xed63, 0x31da, 0xb110, 0x1, 0x0);
        gbc.writeMem(0x9f57, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x4429, gbc.sp());
        EXPECT(0x9f59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f57));
        EXPECT(0xdd, gbc.readMem(0x9f58));
        // CB DD 03E7
        gbc.setState(0x769b, 0x15eb, 0x9990, 0x5c01, 0x20ba, 0x40ab, 0x0, 0x1);
        gbc.writeMem(0x769b, { 0xcb, 0xdd });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x15eb, gbc.sp());
        EXPECT(0x769d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
    }
