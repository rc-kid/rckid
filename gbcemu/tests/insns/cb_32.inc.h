    TEST(gbcemu, opcode_cb_32) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 32 0000
        gbc.setState(0xb49a, 0x257d, 0x8a70, 0x5ddb, 0x7f25, 0x2478, 0x0, 0x1);
        gbc.writeMem(0xb49a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x257d, gbc.sp());
        EXPECT(0xb49c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb49a));
        EXPECT(0x32, gbc.readMem(0xb49b));
        // CB 32 0001
        gbc.setState(0xd466, 0x2819, 0xae80, 0x6049, 0x617f, 0xff48, 0x1, 0x1);
        gbc.writeMem(0xd466, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x2819, gbc.sp());
        EXPECT(0xd468, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd466));
        EXPECT(0x32, gbc.readMem(0xd467));
        // CB 32 0002
        gbc.setState(0x9b9b, 0xa098, 0x1e70, 0x29f1, 0x6db2, 0x86ce, 0x1, 0x0);
        gbc.writeMem(0x9b9b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xa098, gbc.sp());
        EXPECT(0x9b9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b9b));
        EXPECT(0x32, gbc.readMem(0x9b9c));
        // CB 32 0003
        gbc.setState(0x34d, 0x6f40, 0x7f00, 0xefd1, 0x6ed, 0x7e39, 0x0, 0x0);
        gbc.writeMem(0x34d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x6f40, gbc.sp());
        EXPECT(0x34f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0004
        gbc.setState(0xeca7, 0x49c7, 0x6360, 0xfaa, 0xbde1, 0x9451, 0x0, 0x1);
        gbc.writeMem(0xeca7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x49c7, gbc.sp());
        EXPECT(0xeca9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeca7));
        EXPECT(0x32, gbc.readMem(0xeca8));
        // CB 32 0005
        gbc.setState(0x63e7, 0x9cb8, 0x9720, 0x1f74, 0x8a0f, 0x7f36, 0x1, 0x1);
        gbc.writeMem(0x63e7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x9cb8, gbc.sp());
        EXPECT(0x63e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0006
        gbc.setState(0x8a13, 0xaf43, 0xb1a0, 0x81a9, 0xeb3, 0xa9be, 0x0, 0x1);
        gbc.writeMem(0x8a13, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xaf43, gbc.sp());
        EXPECT(0x8a15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a13));
        EXPECT(0x32, gbc.readMem(0x8a14));
        // CB 32 0007
        gbc.setState(0xe598, 0x77bc, 0x6430, 0x6f65, 0x149e, 0x2782, 0x0, 0x1);
        gbc.writeMem(0xe598, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x77bc, gbc.sp());
        EXPECT(0xe59a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe598));
        EXPECT(0x32, gbc.readMem(0xe599));
        // CB 32 0008
        gbc.setState(0xcdb, 0xddf5, 0xb040, 0xe000, 0x2c26, 0x6401, 0x1, 0x1);
        gbc.writeMem(0xcdb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xddf5, gbc.sp());
        EXPECT(0xcdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0009
        gbc.setState(0x9b5f, 0xa89c, 0x84c0, 0x23bb, 0xab8b, 0xee40, 0x0, 0x1);
        gbc.writeMem(0x9b5f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xa89c, gbc.sp());
        EXPECT(0x9b61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b5f));
        EXPECT(0x32, gbc.readMem(0x9b60));
        // CB 32 000A
        gbc.setState(0x4538, 0x6867, 0xf690, 0xbcff, 0x64cd, 0xe89e, 0x0, 0x1);
        gbc.writeMem(0x4538, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x6867, gbc.sp());
        EXPECT(0x453a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 000B
        gbc.setState(0xdca, 0x5194, 0x19c0, 0x2c8d, 0x39bc, 0xaa8c, 0x0, 0x1);
        gbc.writeMem(0xdca, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x5194, gbc.sp());
        EXPECT(0xdcc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 000C
        gbc.setState(0x106, 0x51dc, 0xeed0, 0x5bbf, 0x89a, 0x88a7, 0x1, 0x0);
        gbc.writeMem(0x106, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x51dc, gbc.sp());
        EXPECT(0x108, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 000D
        gbc.setState(0xd077, 0xe884, 0x3190, 0xec32, 0x1069, 0x5b39, 0x0, 0x1);
        gbc.writeMem(0xd077, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xe884, gbc.sp());
        EXPECT(0xd079, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd077));
        EXPECT(0x32, gbc.readMem(0xd078));
        // CB 32 000E
        gbc.setState(0x4fb0, 0x4d0d, 0x28f0, 0x1a1c, 0x422e, 0xffaa, 0x1, 0x1);
        gbc.writeMem(0x4fb0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x4d0d, gbc.sp());
        EXPECT(0x4fb2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 000F
        gbc.setState(0xd5b, 0xfea0, 0xf330, 0x120d, 0x5bf8, 0xe170, 0x1, 0x1);
        gbc.writeMem(0xd5b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xfea0, gbc.sp());
        EXPECT(0xd5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0010
        gbc.setState(0x6160, 0x3bdd, 0xca90, 0xf74, 0x151a, 0x8837, 0x1, 0x0);
        gbc.writeMem(0x6160, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x3bdd, gbc.sp());
        EXPECT(0x6162, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0011
        gbc.setState(0xa7b7, 0x30ea, 0x58b0, 0xabf3, 0xe45, 0x2945, 0x0, 0x0);
        gbc.writeMem(0xa7b7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x30ea, gbc.sp());
        EXPECT(0xa7b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7b7));
        EXPECT(0x32, gbc.readMem(0xa7b8));
        // CB 32 0012
        gbc.setState(0x9329, 0x997a, 0x4a70, 0x5d5, 0x6ddf, 0xb2ab, 0x0, 0x0);
        gbc.writeMem(0x9329, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x997a, gbc.sp());
        EXPECT(0x932b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9329));
        EXPECT(0x32, gbc.readMem(0x932a));
        // CB 32 0013
        gbc.setState(0x18f, 0x7fdd, 0x6490, 0x2b5d, 0xfdb2, 0x3408, 0x1, 0x0);
        gbc.writeMem(0x18f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x7fdd, gbc.sp());
        EXPECT(0x191, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0014
        gbc.setState(0xb8dd, 0x4bc8, 0x10, 0xfc13, 0x4fb6, 0xfcc, 0x0, 0x1);
        gbc.writeMem(0xb8dd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x4bc8, gbc.sp());
        EXPECT(0xb8df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8dd));
        EXPECT(0x32, gbc.readMem(0xb8de));
        // CB 32 0016
        gbc.setState(0x7a50, 0x920a, 0x4690, 0x9933, 0xe14e, 0x5ff2, 0x1, 0x1);
        gbc.writeMem(0x7a50, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x920a, gbc.sp());
        EXPECT(0x7a52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0017
        gbc.setState(0x6d91, 0x4f81, 0x3480, 0xdeb, 0xb969, 0x829c, 0x1, 0x1);
        gbc.writeMem(0x6d91, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x4f81, gbc.sp());
        EXPECT(0x6d93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0018
        gbc.setState(0x9bdf, 0xeaad, 0xbe20, 0x9687, 0x39b0, 0x8f09, 0x0, 0x0);
        gbc.writeMem(0x9bdf, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xeaad, gbc.sp());
        EXPECT(0x9be1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bdf));
        EXPECT(0x32, gbc.readMem(0x9be0));
        // CB 32 0019
        gbc.setState(0x8d18, 0x8ab1, 0xf000, 0x5128, 0x2956, 0x26f6, 0x1, 0x1);
        gbc.writeMem(0x8d18, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x8ab1, gbc.sp());
        EXPECT(0x8d1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d18));
        EXPECT(0x32, gbc.readMem(0x8d19));
        // CB 32 001A
        gbc.setState(0x8b3d, 0xf780, 0x6680, 0xb33b, 0x7b9d, 0x8768, 0x0, 0x1);
        gbc.writeMem(0x8b3d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xf780, gbc.sp());
        EXPECT(0x8b3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b3d));
        EXPECT(0x32, gbc.readMem(0x8b3e));
        // CB 32 001B
        gbc.setState(0x208d, 0xb971, 0x48c0, 0xbae9, 0x72af, 0x3506, 0x0, 0x1);
        gbc.writeMem(0x208d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xb971, gbc.sp());
        EXPECT(0x208f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 001C
        gbc.setState(0xef73, 0x7efd, 0x7c60, 0xb971, 0xf98d, 0x4caf, 0x0, 0x1);
        gbc.writeMem(0xef73, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x7efd, gbc.sp());
        EXPECT(0xef75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef73));
        EXPECT(0x32, gbc.readMem(0xef74));
        // CB 32 001D
        gbc.setState(0xe99, 0xad9b, 0x60, 0x8eab, 0x8231, 0xeca4, 0x1, 0x1);
        gbc.writeMem(0xe99, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xad9b, gbc.sp());
        EXPECT(0xe9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 001E
        gbc.setState(0x4fa0, 0x82c3, 0xb3a0, 0xd9e6, 0xe4ec, 0xc2d3, 0x0, 0x1);
        gbc.writeMem(0x4fa0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x82c3, gbc.sp());
        EXPECT(0x4fa2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 001F
        gbc.setState(0x25f8, 0xb1ae, 0x6800, 0x396c, 0x87bc, 0xd550, 0x0, 0x1);
        gbc.writeMem(0x25f8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xb1ae, gbc.sp());
        EXPECT(0x25fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0020
        gbc.setState(0x57e1, 0xf088, 0x7d40, 0x5b43, 0xab88, 0x90a2, 0x1, 0x1);
        gbc.writeMem(0x57e1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xf088, gbc.sp());
        EXPECT(0x57e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0021
        gbc.setState(0xc69, 0xc9ef, 0xee20, 0x8eb9, 0x97, 0x6bb7, 0x1, 0x0);
        gbc.writeMem(0xc69, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xc9ef, gbc.sp());
        EXPECT(0xc6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0022
        gbc.setState(0x39dd, 0x7690, 0x1670, 0xf989, 0x2a52, 0x9120, 0x1, 0x0);
        gbc.writeMem(0x39dd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x7690, gbc.sp());
        EXPECT(0x39df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0023
        gbc.setState(0xdaa3, 0xe3eb, 0xe0f0, 0x1f, 0x4a, 0xdd1f, 0x0, 0x0);
        gbc.writeMem(0xdaa3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xe3eb, gbc.sp());
        EXPECT(0xdaa5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdaa3));
        EXPECT(0x32, gbc.readMem(0xdaa4));
        // CB 32 0024
        gbc.setState(0x720b, 0xa910, 0x3f70, 0x45aa, 0x1057, 0x8db7, 0x1, 0x0);
        gbc.writeMem(0x720b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xa910, gbc.sp());
        EXPECT(0x720d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0025
        gbc.setState(0x588b, 0x7101, 0x27f0, 0x50ef, 0x26d5, 0xb057, 0x0, 0x1);
        gbc.writeMem(0x588b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x7101, gbc.sp());
        EXPECT(0x588d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0026
        gbc.setState(0x3db2, 0x905a, 0x8b50, 0x2f65, 0x6e75, 0x7969, 0x1, 0x0);
        gbc.writeMem(0x3db2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x905a, gbc.sp());
        EXPECT(0x3db4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0027
        gbc.setState(0x1f28, 0xeaad, 0x6390, 0x26bc, 0x773a, 0x811c, 0x0, 0x1);
        gbc.writeMem(0x1f28, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xeaad, gbc.sp());
        EXPECT(0x1f2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0028
        gbc.setState(0x885e, 0xacb8, 0x52f0, 0xb1c1, 0x1d5c, 0xe372, 0x1, 0x0);
        gbc.writeMem(0x885e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xacb8, gbc.sp());
        EXPECT(0x8860, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x885e));
        EXPECT(0x32, gbc.readMem(0x885f));
        // CB 32 0029
        gbc.setState(0x5a67, 0xb557, 0x9b0, 0x55a5, 0xb777, 0xb236, 0x1, 0x0);
        gbc.writeMem(0x5a67, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xb557, gbc.sp());
        EXPECT(0x5a69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 002A
        gbc.setState(0x9e05, 0x4d60, 0xfc70, 0x9890, 0x242, 0x24a1, 0x1, 0x1);
        gbc.writeMem(0x9e05, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x4d60, gbc.sp());
        EXPECT(0x9e07, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e05));
        EXPECT(0x32, gbc.readMem(0x9e06));
        // CB 32 002B
        gbc.setState(0xaa9, 0xd547, 0x8cd0, 0xe3d9, 0x5a49, 0x57c7, 0x1, 0x0);
        gbc.writeMem(0xaa9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xd547, gbc.sp());
        EXPECT(0xaab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 002D
        gbc.setState(0x5884, 0xa291, 0x29e0, 0x1026, 0x3d57, 0x8d0a, 0x1, 0x1);
        gbc.writeMem(0x5884, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xa291, gbc.sp());
        EXPECT(0x5886, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 002E
        gbc.setState(0x8ae7, 0xb9a8, 0xb5e0, 0xf51a, 0x650, 0x3967, 0x1, 0x1);
        gbc.writeMem(0x8ae7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xb9a8, gbc.sp());
        EXPECT(0x8ae9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ae7));
        EXPECT(0x32, gbc.readMem(0x8ae8));
        // CB 32 002F
        gbc.setState(0x5272, 0xdfb2, 0x7f40, 0xff36, 0xa95a, 0xd239, 0x0, 0x0);
        gbc.writeMem(0x5272, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xdfb2, gbc.sp());
        EXPECT(0x5274, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0030
        gbc.setState(0xb511, 0x9fe7, 0x1c40, 0x275f, 0x6a5c, 0xe15d, 0x1, 0x1);
        gbc.writeMem(0xb511, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x9fe7, gbc.sp());
        EXPECT(0xb513, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb511));
        EXPECT(0x32, gbc.readMem(0xb512));
        // CB 32 0031
        gbc.setState(0x5dba, 0xd2a5, 0x7d60, 0x5982, 0x208a, 0x325c, 0x1, 0x1);
        gbc.writeMem(0x5dba, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xd2a5, gbc.sp());
        EXPECT(0x5dbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0032
        gbc.setState(0x689, 0x4b71, 0xf420, 0x6313, 0x656f, 0x9c73, 0x1, 0x1);
        gbc.writeMem(0x689, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x4b71, gbc.sp());
        EXPECT(0x68b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0033
        gbc.setState(0x2181, 0xe975, 0x1840, 0xcde2, 0xac63, 0x2707, 0x1, 0x0);
        gbc.writeMem(0x2181, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xe975, gbc.sp());
        EXPECT(0x2183, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0034
        gbc.setState(0xe96e, 0x61a1, 0x1930, 0x8d36, 0x272b, 0x6264, 0x0, 0x1);
        gbc.writeMem(0xe96e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x61a1, gbc.sp());
        EXPECT(0xe970, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe96e));
        EXPECT(0x32, gbc.readMem(0xe96f));
        // CB 32 0035
        gbc.setState(0xbc2e, 0xbf03, 0x2e90, 0x5fe8, 0xc7d5, 0x3554, 0x1, 0x1);
        gbc.writeMem(0xbc2e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xbf03, gbc.sp());
        EXPECT(0xbc30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc2e));
        EXPECT(0x32, gbc.readMem(0xbc2f));
        // CB 32 0036
        gbc.setState(0x1f24, 0xa68c, 0x5330, 0x34f, 0xc94a, 0x4d7e, 0x1, 0x0);
        gbc.writeMem(0x1f24, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xa68c, gbc.sp());
        EXPECT(0x1f26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0037
        gbc.setState(0xd52e, 0x9507, 0xd920, 0x8efe, 0xaad9, 0x79c6, 0x0, 0x0);
        gbc.writeMem(0xd52e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x9507, gbc.sp());
        EXPECT(0xd530, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd52e));
        EXPECT(0x32, gbc.readMem(0xd52f));
        // CB 32 0038
        gbc.setState(0xe36b, 0x1b7e, 0x990, 0xc50b, 0xaa34, 0x3a37, 0x1, 0x1);
        gbc.writeMem(0xe36b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x1b7e, gbc.sp());
        EXPECT(0xe36d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe36b));
        EXPECT(0x32, gbc.readMem(0xe36c));
        // CB 32 0039
        gbc.setState(0xe9b5, 0xed28, 0x1aa0, 0x2de0, 0xd419, 0xf498, 0x1, 0x0);
        gbc.writeMem(0xe9b5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xed28, gbc.sp());
        EXPECT(0xe9b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9b5));
        EXPECT(0x32, gbc.readMem(0xe9b6));
        // CB 32 003A
        gbc.setState(0x6793, 0x7b4d, 0x6230, 0x91a8, 0x6265, 0xf1e2, 0x0, 0x1);
        gbc.writeMem(0x6793, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x7b4d, gbc.sp());
        EXPECT(0x6795, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 003B
        gbc.setState(0x4862, 0xe89a, 0x3ee0, 0xc5a1, 0xa22d, 0x665e, 0x0, 0x0);
        gbc.writeMem(0x4862, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xe89a, gbc.sp());
        EXPECT(0x4864, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 003C
        gbc.setState(0xc512, 0x2882, 0xd310, 0xef54, 0x7a8a, 0x25fc, 0x1, 0x1);
        gbc.writeMem(0xc512, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x2882, gbc.sp());
        EXPECT(0xc514, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc512));
        EXPECT(0x32, gbc.readMem(0xc513));
        // CB 32 003D
        gbc.setState(0xa6d1, 0xac7f, 0xc360, 0x9f4, 0x9a3b, 0xd98f, 0x0, 0x1);
        gbc.writeMem(0xa6d1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xac7f, gbc.sp());
        EXPECT(0xa6d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6d1));
        EXPECT(0x32, gbc.readMem(0xa6d2));
        // CB 32 003F
        gbc.setState(0x1f13, 0xc297, 0x6220, 0xce4b, 0x986, 0x7877, 0x1, 0x1);
        gbc.writeMem(0x1f13, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xc297, gbc.sp());
        EXPECT(0x1f15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0040
        gbc.setState(0x41f7, 0x15e, 0x4ef0, 0x834f, 0x965c, 0x3b0f, 0x0, 0x0);
        gbc.writeMem(0x41f7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x15e, gbc.sp());
        EXPECT(0x41f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0041
        gbc.setState(0x35bd, 0x2055, 0x85c0, 0xf9de, 0x8461, 0xabc1, 0x1, 0x1);
        gbc.writeMem(0x35bd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x2055, gbc.sp());
        EXPECT(0x35bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0042
        gbc.setState(0x9557, 0x15ab, 0xed30, 0x899b, 0xc324, 0xe68c, 0x1, 0x0);
        gbc.writeMem(0x9557, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x15ab, gbc.sp());
        EXPECT(0x9559, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9557));
        EXPECT(0x32, gbc.readMem(0x9558));
        // CB 32 0043
        gbc.setState(0x46a6, 0xb813, 0x6a20, 0x8e2f, 0x9504, 0xd74a, 0x1, 0x1);
        gbc.writeMem(0x46a6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xb813, gbc.sp());
        EXPECT(0x46a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0044
        gbc.setState(0x8bf7, 0x24c8, 0x94c0, 0xa39b, 0xc8a, 0x94a, 0x1, 0x1);
        gbc.writeMem(0x8bf7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x24c8, gbc.sp());
        EXPECT(0x8bf9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bf7));
        EXPECT(0x32, gbc.readMem(0x8bf8));
        // CB 32 0045
        gbc.setState(0xda9f, 0xce26, 0x21b0, 0x6066, 0x6449, 0x2aa5, 0x0, 0x1);
        gbc.writeMem(0xda9f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xce26, gbc.sp());
        EXPECT(0xdaa1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda9f));
        EXPECT(0x32, gbc.readMem(0xdaa0));
        // CB 32 0047
        gbc.setState(0x81a5, 0xef36, 0x51c0, 0xa30c, 0xc22a, 0xd14, 0x0, 0x1);
        gbc.writeMem(0x81a5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xef36, gbc.sp());
        EXPECT(0x81a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81a5));
        EXPECT(0x32, gbc.readMem(0x81a6));
        // CB 32 0048
        gbc.setState(0xd8eb, 0xd594, 0x42a0, 0x20a2, 0xff0, 0x918b, 0x0, 0x1);
        gbc.writeMem(0xd8eb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xd594, gbc.sp());
        EXPECT(0xd8ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8eb));
        EXPECT(0x32, gbc.readMem(0xd8ec));
        // CB 32 0049
        gbc.setState(0x5fe0, 0xe648, 0xbea0, 0x34ad, 0x7f43, 0xc4ec, 0x0, 0x1);
        gbc.writeMem(0x5fe0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xe648, gbc.sp());
        EXPECT(0x5fe2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 004A
        gbc.setState(0x448, 0x7fc2, 0xce20, 0x9ac0, 0x1ea8, 0x1707, 0x1, 0x1);
        gbc.writeMem(0x448, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x7fc2, gbc.sp());
        EXPECT(0x44a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 004B
        gbc.setState(0x7180, 0xb0cc, 0x1f50, 0x74e9, 0x9f22, 0x29da, 0x0, 0x1);
        gbc.writeMem(0x7180, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xb0cc, gbc.sp());
        EXPECT(0x7182, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 004C
        gbc.setState(0x54e7, 0xf51e, 0xf520, 0x746e, 0x6f6, 0x3b49, 0x1, 0x1);
        gbc.writeMem(0x54e7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xf51e, gbc.sp());
        EXPECT(0x54e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 004D
        gbc.setState(0xec6e, 0x8f92, 0xed40, 0x6962, 0x8f09, 0x557c, 0x0, 0x0);
        gbc.writeMem(0xec6e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x8f92, gbc.sp());
        EXPECT(0xec70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec6e));
        EXPECT(0x32, gbc.readMem(0xec6f));
        // CB 32 004E
        gbc.setState(0x3fe6, 0x90c1, 0x2d90, 0x4db6, 0xda43, 0x7df3, 0x0, 0x1);
        gbc.writeMem(0x3fe6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x90c1, gbc.sp());
        EXPECT(0x3fe8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 004F
        gbc.setState(0xe6f7, 0xc92a, 0x1e30, 0x8355, 0x72a9, 0x55c2, 0x0, 0x1);
        gbc.writeMem(0xe6f7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xc92a, gbc.sp());
        EXPECT(0xe6f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6f7));
        EXPECT(0x32, gbc.readMem(0xe6f8));
        // CB 32 0050
        gbc.setState(0x2c5e, 0xcd9b, 0x4650, 0xe84f, 0xff68, 0x5754, 0x0, 0x0);
        gbc.writeMem(0x2c5e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xcd9b, gbc.sp());
        EXPECT(0x2c60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0051
        gbc.setState(0xbba1, 0xfb2, 0xcb90, 0x4fbd, 0xa5c1, 0x64d9, 0x0, 0x0);
        gbc.writeMem(0xbba1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xfb2, gbc.sp());
        EXPECT(0xbba3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbba1));
        EXPECT(0x32, gbc.readMem(0xbba2));
        // CB 32 0052
        gbc.setState(0x51b2, 0xb5cf, 0xa6e0, 0x83a5, 0x9fe4, 0x5726, 0x0, 0x0);
        gbc.writeMem(0x51b2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xb5cf, gbc.sp());
        EXPECT(0x51b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0053
        gbc.setState(0x168f, 0x9560, 0x7f10, 0x40d1, 0x99e7, 0xff6b, 0x0, 0x1);
        gbc.writeMem(0x168f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x9560, gbc.sp());
        EXPECT(0x1691, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0054
        gbc.setState(0x5ac7, 0xdbac, 0x910, 0xebda, 0x7a15, 0xff, 0x1, 0x1);
        gbc.writeMem(0x5ac7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xdbac, gbc.sp());
        EXPECT(0x5ac9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0055
        gbc.setState(0xbf60, 0x1f55, 0xa8a0, 0xdda5, 0x811d, 0xa707, 0x0, 0x0);
        gbc.writeMem(0xbf60, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x1f55, gbc.sp());
        EXPECT(0xbf62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf60));
        EXPECT(0x32, gbc.readMem(0xbf61));
        // CB 32 0056
        gbc.setState(0xb889, 0xcc84, 0x4230, 0x6b78, 0xdb48, 0xb29f, 0x1, 0x0);
        gbc.writeMem(0xb889, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xcc84, gbc.sp());
        EXPECT(0xb88b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb889));
        EXPECT(0x32, gbc.readMem(0xb88a));
        // CB 32 0057
        gbc.setState(0x430f, 0x26c7, 0x4ce0, 0x16ef, 0xd8c, 0x5b5b, 0x1, 0x1);
        gbc.writeMem(0x430f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x26c7, gbc.sp());
        EXPECT(0x4311, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0058
        gbc.setState(0x594e, 0xf920, 0xc50, 0xff17, 0x122e, 0x16fb, 0x0, 0x0);
        gbc.writeMem(0x594e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xf920, gbc.sp());
        EXPECT(0x5950, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0059
        gbc.setState(0x2711, 0x686b, 0x6c80, 0xb333, 0xd65e, 0xfc87, 0x0, 0x0);
        gbc.writeMem(0x2711, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x686b, gbc.sp());
        EXPECT(0x2713, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 005A
        gbc.setState(0xbf5a, 0x3066, 0xe700, 0x922f, 0x8051, 0x1587, 0x0, 0x1);
        gbc.writeMem(0xbf5a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x3066, gbc.sp());
        EXPECT(0xbf5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf5a));
        EXPECT(0x32, gbc.readMem(0xbf5b));
        // CB 32 005B
        gbc.setState(0x3deb, 0xd1f7, 0x23a0, 0xb8e6, 0x22c0, 0xcb83, 0x1, 0x0);
        gbc.writeMem(0x3deb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xd1f7, gbc.sp());
        EXPECT(0x3ded, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 005C
        gbc.setState(0x7954, 0x6801, 0xf640, 0xaa11, 0xc3d6, 0xbd3b, 0x0, 0x1);
        gbc.writeMem(0x7954, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x6801, gbc.sp());
        EXPECT(0x7956, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 005D
        gbc.setState(0x2677, 0x58ea, 0xe850, 0x3f6, 0x2cc2, 0xdd00, 0x1, 0x0);
        gbc.writeMem(0x2677, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x58ea, gbc.sp());
        EXPECT(0x2679, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 005E
        gbc.setState(0x23d6, 0x3d63, 0x3900, 0xb453, 0x2428, 0x7090, 0x0, 0x0);
        gbc.writeMem(0x23d6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x3d63, gbc.sp());
        EXPECT(0x23d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 005F
        gbc.setState(0xc1c1, 0xbb74, 0x8fb0, 0x2360, 0xce92, 0x2c6, 0x0, 0x0);
        gbc.writeMem(0xc1c1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xbb74, gbc.sp());
        EXPECT(0xc1c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1c1));
        EXPECT(0x32, gbc.readMem(0xc1c2));
        // CB 32 0060
        gbc.setState(0xc3ea, 0x7c32, 0xb2d0, 0x6e6b, 0xb47b, 0xbe89, 0x0, 0x0);
        gbc.writeMem(0xc3ea, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x7c32, gbc.sp());
        EXPECT(0xc3ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3ea));
        EXPECT(0x32, gbc.readMem(0xc3eb));
        // CB 32 0061
        gbc.setState(0x61d9, 0x42f, 0xeb40, 0x1013, 0x5c70, 0x1763, 0x0, 0x1);
        gbc.writeMem(0x61d9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x42f, gbc.sp());
        EXPECT(0x61db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0062
        gbc.setState(0xed79, 0x78d2, 0x6780, 0x182, 0xa5ca, 0x917f, 0x0, 0x0);
        gbc.writeMem(0xed79, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x78d2, gbc.sp());
        EXPECT(0xed7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed79));
        EXPECT(0x32, gbc.readMem(0xed7a));
        // CB 32 0063
        gbc.setState(0x2469, 0xc68, 0xe180, 0x4fc, 0x62ec, 0x8c76, 0x1, 0x1);
        gbc.writeMem(0x2469, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xc68, gbc.sp());
        EXPECT(0x246b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0064
        gbc.setState(0x1f9, 0xa081, 0xf8f0, 0x5ab4, 0x4f8e, 0xa4d3, 0x0, 0x0);
        gbc.writeMem(0x1f9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xa081, gbc.sp());
        EXPECT(0x1fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0065
        gbc.setState(0xed, 0x505, 0x1510, 0x1496, 0xc1ea, 0xa198, 0x1, 0x0);
        gbc.writeMem(0xed, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x505, gbc.sp());
        EXPECT(0xef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0066
        gbc.setState(0x570d, 0xe3e7, 0x9dc0, 0xed29, 0xe64d, 0xadd1, 0x0, 0x1);
        gbc.writeMem(0x570d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xe3e7, gbc.sp());
        EXPECT(0x570f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0068
        gbc.setState(0x6b9b, 0x3dbb, 0x3a80, 0xd42f, 0x2bb7, 0x4f8c, 0x0, 0x0);
        gbc.writeMem(0x6b9b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x3dbb, gbc.sp());
        EXPECT(0x6b9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0069
        gbc.setState(0x7fe6, 0xed12, 0x2c80, 0xd1ec, 0xf22f, 0x4e63, 0x1, 0x1);
        gbc.writeMem(0x7fe6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xed12, gbc.sp());
        EXPECT(0x7fe8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 006A
        gbc.setState(0x6b08, 0x2748, 0x7d90, 0x484b, 0xcc00, 0x3b2b, 0x1, 0x0);
        gbc.writeMem(0x6b08, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x2748, gbc.sp());
        EXPECT(0x6b0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 006B
        gbc.setState(0xc23d, 0xddbe, 0x39c0, 0xbca9, 0x7a1b, 0x135d, 0x0, 0x1);
        gbc.writeMem(0xc23d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xddbe, gbc.sp());
        EXPECT(0xc23f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc23d));
        EXPECT(0x32, gbc.readMem(0xc23e));
        // CB 32 006C
        gbc.setState(0xcd3e, 0x92a9, 0xd130, 0x48f, 0x6b4e, 0xe31, 0x1, 0x0);
        gbc.writeMem(0xcd3e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x92a9, gbc.sp());
        EXPECT(0xcd40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd3e));
        EXPECT(0x32, gbc.readMem(0xcd3f));
        // CB 32 006D
        gbc.setState(0xa0d0, 0x19b9, 0xed10, 0x540c, 0x94d7, 0xd7e, 0x1, 0x1);
        gbc.writeMem(0xa0d0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x19b9, gbc.sp());
        EXPECT(0xa0d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0d0));
        EXPECT(0x32, gbc.readMem(0xa0d1));
        // CB 32 006E
        gbc.setState(0x425e, 0xb5e1, 0xa280, 0x47fd, 0x88eb, 0xca2c, 0x0, 0x1);
        gbc.writeMem(0x425e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xb5e1, gbc.sp());
        EXPECT(0x4260, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 006F
        gbc.setState(0x9296, 0xf91b, 0x1390, 0x2591, 0xcfb6, 0xb8d6, 0x0, 0x0);
        gbc.writeMem(0x9296, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xf91b, gbc.sp());
        EXPECT(0x9298, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9296));
        EXPECT(0x32, gbc.readMem(0x9297));
        // CB 32 0070
        gbc.setState(0x73c4, 0x8599, 0x4960, 0xfde3, 0xb047, 0x25ca, 0x1, 0x1);
        gbc.writeMem(0x73c4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x8599, gbc.sp());
        EXPECT(0x73c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0071
        gbc.setState(0x87cb, 0xdb24, 0x970, 0x5c07, 0x773e, 0xcb46, 0x0, 0x1);
        gbc.writeMem(0x87cb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xdb24, gbc.sp());
        EXPECT(0x87cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87cb));
        EXPECT(0x32, gbc.readMem(0x87cc));
        // CB 32 0072
        gbc.setState(0xc9ff, 0xbce2, 0x6df0, 0x2e66, 0x7de2, 0x8c35, 0x1, 0x0);
        gbc.writeMem(0xc9ff, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xbce2, gbc.sp());
        EXPECT(0xca01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9ff));
        EXPECT(0x32, gbc.readMem(0xca00));
        // CB 32 0075
        gbc.setState(0x8389, 0x380f, 0xfa70, 0x8b50, 0x4f00, 0xfb3d, 0x1, 0x0);
        gbc.writeMem(0x8389, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x380f, gbc.sp());
        EXPECT(0x838b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8389));
        EXPECT(0x32, gbc.readMem(0x838a));
        // CB 32 0076
        gbc.setState(0x58ab, 0x8b9c, 0xfc60, 0xe9dd, 0x776, 0x15ce, 0x1, 0x1);
        gbc.writeMem(0x58ab, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x8b9c, gbc.sp());
        EXPECT(0x58ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0077
        gbc.setState(0x73e5, 0xdd55, 0xf210, 0x64c5, 0x1991, 0xd9bf, 0x1, 0x0);
        gbc.writeMem(0x73e5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xdd55, gbc.sp());
        EXPECT(0x73e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0078
        gbc.setState(0xa54, 0x835a, 0x7290, 0x6ec, 0xb6ee, 0x855e, 0x1, 0x1);
        gbc.writeMem(0xa54, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x835a, gbc.sp());
        EXPECT(0xa56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0079
        gbc.setState(0x9171, 0xe77f, 0xe80, 0x405f, 0xc03a, 0xefbf, 0x0, 0x1);
        gbc.writeMem(0x9171, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xe77f, gbc.sp());
        EXPECT(0x9173, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9171));
        EXPECT(0x32, gbc.readMem(0x9172));
        // CB 32 007A
        gbc.setState(0xa4a1, 0x8bdb, 0xcd40, 0x668a, 0x18, 0x612d, 0x0, 0x1);
        gbc.writeMem(0xa4a1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x8bdb, gbc.sp());
        EXPECT(0xa4a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4a1));
        EXPECT(0x32, gbc.readMem(0xa4a2));
        // CB 32 007B
        gbc.setState(0x95dd, 0xcfa3, 0xc90, 0xd1d7, 0x74e4, 0x72cd, 0x1, 0x1);
        gbc.writeMem(0x95dd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xcfa3, gbc.sp());
        EXPECT(0x95df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95dd));
        EXPECT(0x32, gbc.readMem(0x95de));
        // CB 32 007C
        gbc.setState(0xcdc, 0x95d3, 0x5280, 0xb986, 0x70c1, 0xf321, 0x0, 0x0);
        gbc.writeMem(0xcdc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x95d3, gbc.sp());
        EXPECT(0xcde, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 007D
        gbc.setState(0xaf56, 0xfa46, 0xa680, 0x3377, 0xd22e, 0x3a66, 0x0, 0x0);
        gbc.writeMem(0xaf56, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xfa46, gbc.sp());
        EXPECT(0xaf58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf56));
        EXPECT(0x32, gbc.readMem(0xaf57));
        // CB 32 007E
        gbc.setState(0x571f, 0xb9c6, 0x9300, 0x23b8, 0xe2f9, 0xa652, 0x1, 0x1);
        gbc.writeMem(0x571f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xb9c6, gbc.sp());
        EXPECT(0x5721, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 007F
        gbc.setState(0x551c, 0x2f1f, 0x9cd0, 0xb72, 0xdb2b, 0x814d, 0x0, 0x1);
        gbc.writeMem(0x551c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x2f1f, gbc.sp());
        EXPECT(0x551e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0080
        gbc.setState(0xa356, 0xbfe6, 0x86a0, 0x90ef, 0x2912, 0x27b1, 0x0, 0x1);
        gbc.writeMem(0xa356, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xbfe6, gbc.sp());
        EXPECT(0xa358, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa356));
        EXPECT(0x32, gbc.readMem(0xa357));
        // CB 32 0081
        gbc.setState(0x6b3d, 0x6811, 0x9bd0, 0x24e, 0x863c, 0x4aab, 0x0, 0x1);
        gbc.writeMem(0x6b3d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x6811, gbc.sp());
        EXPECT(0x6b3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0082
        gbc.setState(0x7e8a, 0xb7f3, 0x95a0, 0xef2e, 0x4ffb, 0x3076, 0x1, 0x0);
        gbc.writeMem(0x7e8a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xb7f3, gbc.sp());
        EXPECT(0x7e8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0083
        gbc.setState(0x2bef, 0xe1eb, 0xb860, 0x4af7, 0x4660, 0x3394, 0x1, 0x1);
        gbc.writeMem(0x2bef, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xe1eb, gbc.sp());
        EXPECT(0x2bf1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0084
        gbc.setState(0x68fe, 0x46c8, 0x92a0, 0xac8c, 0xead3, 0x4a3d, 0x0, 0x1);
        gbc.writeMem(0x68fe, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x46c8, gbc.sp());
        EXPECT(0x6900, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0085
        gbc.setState(0x69d9, 0x754f, 0x14c0, 0x7acf, 0x1706, 0xe937, 0x1, 0x0);
        gbc.writeMem(0x69d9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x754f, gbc.sp());
        EXPECT(0x69db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0088
        gbc.setState(0x5ae4, 0xaf87, 0x7260, 0x9de0, 0x2ea5, 0x7ac5, 0x0, 0x1);
        gbc.writeMem(0x5ae4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xaf87, gbc.sp());
        EXPECT(0x5ae6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 008A
        gbc.setState(0xed73, 0xf3a, 0x890, 0xc7b7, 0x527a, 0xa6ba, 0x0, 0x1);
        gbc.writeMem(0xed73, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xf3a, gbc.sp());
        EXPECT(0xed75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed73));
        EXPECT(0x32, gbc.readMem(0xed74));
        // CB 32 008B
        gbc.setState(0x3014, 0x3d1c, 0xc030, 0x1963, 0xf166, 0xf121, 0x0, 0x1);
        gbc.writeMem(0x3014, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x3d1c, gbc.sp());
        EXPECT(0x3016, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 008C
        gbc.setState(0x15df, 0x6309, 0xaa90, 0x2d13, 0x2457, 0xca, 0x1, 0x0);
        gbc.writeMem(0x15df, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x6309, gbc.sp());
        EXPECT(0x15e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 008D
        gbc.setState(0x480f, 0x1b20, 0xef0, 0x883a, 0xddea, 0xa2f5, 0x1, 0x1);
        gbc.writeMem(0x480f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x1b20, gbc.sp());
        EXPECT(0x4811, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 008E
        gbc.setState(0x55bd, 0x4f0b, 0x2920, 0xe6c5, 0xe483, 0x1a9a, 0x0, 0x1);
        gbc.writeMem(0x55bd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x4f0b, gbc.sp());
        EXPECT(0x55bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 008F
        gbc.setState(0xefea, 0x3198, 0x79a0, 0x6532, 0x11a5, 0xd4c6, 0x0, 0x1);
        gbc.writeMem(0xefea, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x3198, gbc.sp());
        EXPECT(0xefec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefea));
        EXPECT(0x32, gbc.readMem(0xefeb));
        // CB 32 0090
        gbc.setState(0x61ad, 0x2e92, 0xebd0, 0xe9a4, 0x96c4, 0x3942, 0x1, 0x0);
        gbc.writeMem(0x61ad, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x2e92, gbc.sp());
        EXPECT(0x61af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0091
        gbc.setState(0xd8a9, 0x8d25, 0xe7a0, 0x7464, 0xc3c9, 0x9ba5, 0x0, 0x0);
        gbc.writeMem(0xd8a9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x8d25, gbc.sp());
        EXPECT(0xd8ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8a9));
        EXPECT(0x32, gbc.readMem(0xd8aa));
        // CB 32 0092
        gbc.setState(0x30ef, 0x758d, 0xa290, 0xe148, 0x56b6, 0x9327, 0x1, 0x1);
        gbc.writeMem(0x30ef, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x758d, gbc.sp());
        EXPECT(0x30f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0093
        gbc.setState(0x5cb3, 0x9d54, 0x1a10, 0x23c1, 0xc2d1, 0x1c32, 0x0, 0x0);
        gbc.writeMem(0x5cb3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x9d54, gbc.sp());
        EXPECT(0x5cb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0095
        gbc.setState(0xb93e, 0x8fc, 0x1720, 0x21e8, 0x69ed, 0x6e7, 0x0, 0x0);
        gbc.writeMem(0xb93e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x8fc, gbc.sp());
        EXPECT(0xb940, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb93e));
        EXPECT(0x32, gbc.readMem(0xb93f));
        // CB 32 0096
        gbc.setState(0x985d, 0x63e9, 0xae20, 0x8f0a, 0xc946, 0xc85b, 0x1, 0x1);
        gbc.writeMem(0x985d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x63e9, gbc.sp());
        EXPECT(0x985f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x985d));
        EXPECT(0x32, gbc.readMem(0x985e));
        // CB 32 0097
        gbc.setState(0xbe21, 0x1877, 0x9d90, 0x3928, 0x3fe5, 0x9da4, 0x0, 0x1);
        gbc.writeMem(0xbe21, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x1877, gbc.sp());
        EXPECT(0xbe23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe21));
        EXPECT(0x32, gbc.readMem(0xbe22));
        // CB 32 0098
        gbc.setState(0xc751, 0xa7b3, 0x4800, 0x974f, 0xc6ef, 0xfb3d, 0x0, 0x1);
        gbc.writeMem(0xc751, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xa7b3, gbc.sp());
        EXPECT(0xc753, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc751));
        EXPECT(0x32, gbc.readMem(0xc752));
        // CB 32 0099
        gbc.setState(0x2064, 0x7434, 0x8b00, 0x91b1, 0xf776, 0x99c1, 0x1, 0x0);
        gbc.writeMem(0x2064, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x7434, gbc.sp());
        EXPECT(0x2066, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 009A
        gbc.setState(0x61c5, 0xa6bc, 0xa200, 0xfeae, 0x3bbc, 0xa59a, 0x1, 0x0);
        gbc.writeMem(0x61c5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xa6bc, gbc.sp());
        EXPECT(0x61c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 009B
        gbc.setState(0x9807, 0x579c, 0x7770, 0x76b0, 0xb6dd, 0x318c, 0x1, 0x0);
        gbc.writeMem(0x9807, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x579c, gbc.sp());
        EXPECT(0x9809, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9807));
        EXPECT(0x32, gbc.readMem(0x9808));
        // CB 32 009C
        gbc.setState(0xe5e0, 0xd87f, 0x19b0, 0xab98, 0x3422, 0x460a, 0x1, 0x0);
        gbc.writeMem(0xe5e0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xd87f, gbc.sp());
        EXPECT(0xe5e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5e0));
        EXPECT(0x32, gbc.readMem(0xe5e1));
        // CB 32 009D
        gbc.setState(0x724e, 0x89f3, 0x8b30, 0xc45f, 0x37d9, 0xa149, 0x0, 0x1);
        gbc.writeMem(0x724e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x89f3, gbc.sp());
        EXPECT(0x7250, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 009E
        gbc.setState(0x511e, 0x23e8, 0x8f80, 0xa013, 0x7962, 0x3671, 0x0, 0x0);
        gbc.writeMem(0x511e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x23e8, gbc.sp());
        EXPECT(0x5120, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 009F
        gbc.setState(0xec1f, 0xa908, 0xc330, 0x4bca, 0xc417, 0x8919, 0x1, 0x0);
        gbc.writeMem(0xec1f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xa908, gbc.sp());
        EXPECT(0xec21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec1f));
        EXPECT(0x32, gbc.readMem(0xec20));
        // CB 32 00A0
        gbc.setState(0xe573, 0x4e, 0x39a0, 0xac25, 0xbae5, 0xe0b6, 0x0, 0x0);
        gbc.writeMem(0xe573, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x4e, gbc.sp());
        EXPECT(0xe575, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe573));
        EXPECT(0x32, gbc.readMem(0xe574));
        // CB 32 00A1
        gbc.setState(0xa0ad, 0xde79, 0xfc70, 0x51c4, 0xf2c2, 0xc5ca, 0x1, 0x1);
        gbc.writeMem(0xa0ad, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xde79, gbc.sp());
        EXPECT(0xa0af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0ad));
        EXPECT(0x32, gbc.readMem(0xa0ae));
        // CB 32 00A2
        gbc.setState(0x26e7, 0x9751, 0x540, 0xa10d, 0x99a4, 0x8939, 0x0, 0x1);
        gbc.writeMem(0x26e7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x9751, gbc.sp());
        EXPECT(0x26e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00A3
        gbc.setState(0x3016, 0xb8d4, 0xab60, 0x6e6d, 0xda45, 0x28e5, 0x0, 0x1);
        gbc.writeMem(0x3016, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xb8d4, gbc.sp());
        EXPECT(0x3018, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00A4
        gbc.setState(0x7319, 0x6a9b, 0xa620, 0xc0c2, 0x8d97, 0x19e5, 0x0, 0x1);
        gbc.writeMem(0x7319, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x6a9b, gbc.sp());
        EXPECT(0x731b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00A5
        gbc.setState(0xab2b, 0x852a, 0x3240, 0x67bb, 0x56e3, 0xf04f, 0x1, 0x1);
        gbc.writeMem(0xab2b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x852a, gbc.sp());
        EXPECT(0xab2d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab2b));
        EXPECT(0x32, gbc.readMem(0xab2c));
        // CB 32 00A6
        gbc.setState(0x7b59, 0x8692, 0x7640, 0x8fda, 0x683f, 0x4cdd, 0x1, 0x1);
        gbc.writeMem(0x7b59, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x8692, gbc.sp());
        EXPECT(0x7b5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00A7
        gbc.setState(0x3c57, 0xe985, 0x4ca0, 0x3d38, 0x9354, 0x8f64, 0x1, 0x0);
        gbc.writeMem(0x3c57, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xe985, gbc.sp());
        EXPECT(0x3c59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00A9
        gbc.setState(0xdc53, 0xd96, 0x1b0, 0x1f59, 0x6829, 0x732d, 0x0, 0x0);
        gbc.writeMem(0xdc53, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xd96, gbc.sp());
        EXPECT(0xdc55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc53));
        EXPECT(0x32, gbc.readMem(0xdc54));
        // CB 32 00AA
        gbc.setState(0x5e0, 0x4f9, 0x8b10, 0x6b5, 0x5c53, 0xb567, 0x1, 0x0);
        gbc.writeMem(0x5e0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x4f9, gbc.sp());
        EXPECT(0x5e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00AB
        gbc.setState(0x48ad, 0x64d2, 0x6740, 0x743d, 0x1c87, 0x5748, 0x0, 0x0);
        gbc.writeMem(0x48ad, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x64d2, gbc.sp());
        EXPECT(0x48af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00AC
        gbc.setState(0xc2c2, 0xd031, 0x7810, 0x4ff0, 0x32f3, 0xcc9f, 0x0, 0x1);
        gbc.writeMem(0xc2c2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xd031, gbc.sp());
        EXPECT(0xc2c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2c2));
        EXPECT(0x32, gbc.readMem(0xc2c3));
        // CB 32 00AD
        gbc.setState(0x1a38, 0xedf, 0x5dc0, 0x53cd, 0x5cec, 0x3aee, 0x1, 0x0);
        gbc.writeMem(0x1a38, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xedf, gbc.sp());
        EXPECT(0x1a3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00AE
        gbc.setState(0xa053, 0x3df, 0xebe0, 0x965a, 0x61c5, 0x116c, 0x0, 0x1);
        gbc.writeMem(0xa053, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x3df, gbc.sp());
        EXPECT(0xa055, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa053));
        EXPECT(0x32, gbc.readMem(0xa054));
        // CB 32 00AF
        gbc.setState(0xae55, 0x8653, 0x73e0, 0xb1e6, 0x269f, 0x8bf7, 0x1, 0x1);
        gbc.writeMem(0xae55, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x8653, gbc.sp());
        EXPECT(0xae57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae55));
        EXPECT(0x32, gbc.readMem(0xae56));
        // CB 32 00B0
        gbc.setState(0x692, 0x5b81, 0x87b0, 0xeafa, 0x31ac, 0x9a97, 0x1, 0x0);
        gbc.writeMem(0x692, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x5b81, gbc.sp());
        EXPECT(0x694, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00B1
        gbc.setState(0x1542, 0x6902, 0xbcf0, 0x58dc, 0x22d7, 0xfb2c, 0x0, 0x0);
        gbc.writeMem(0x1542, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x6902, gbc.sp());
        EXPECT(0x1544, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00B2
        gbc.setState(0x601c, 0x5a9b, 0xb140, 0x9cdc, 0x2963, 0x51ca, 0x0, 0x1);
        gbc.writeMem(0x601c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x5a9b, gbc.sp());
        EXPECT(0x601e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00B3
        gbc.setState(0xbc69, 0x33f7, 0x20b0, 0xae93, 0xe088, 0x2b2d, 0x0, 0x1);
        gbc.writeMem(0xbc69, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x33f7, gbc.sp());
        EXPECT(0xbc6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc69));
        EXPECT(0x32, gbc.readMem(0xbc6a));
        // CB 32 00B4
        gbc.setState(0x917f, 0x3a2c, 0xb800, 0xe95e, 0xf5e5, 0xb94, 0x0, 0x1);
        gbc.writeMem(0x917f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x3a2c, gbc.sp());
        EXPECT(0x9181, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x917f));
        EXPECT(0x32, gbc.readMem(0x9180));
        // CB 32 00B5
        gbc.setState(0x67e5, 0x6420, 0xe7f0, 0x5f59, 0x2634, 0x1af3, 0x1, 0x1);
        gbc.writeMem(0x67e5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x6420, gbc.sp());
        EXPECT(0x67e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00B6
        gbc.setState(0x2756, 0xc32b, 0xbcf0, 0xb74, 0x72b9, 0xfb2d, 0x1, 0x1);
        gbc.writeMem(0x2756, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xc32b, gbc.sp());
        EXPECT(0x2758, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00B7
        gbc.setState(0xc569, 0xfd3e, 0x9ef0, 0x33e2, 0xbf40, 0xcd13, 0x0, 0x1);
        gbc.writeMem(0xc569, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xfd3e, gbc.sp());
        EXPECT(0xc56b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc569));
        EXPECT(0x32, gbc.readMem(0xc56a));
        // CB 32 00B8
        gbc.setState(0x942d, 0x81a8, 0x1f80, 0xa0e6, 0x6e86, 0xa8c9, 0x0, 0x0);
        gbc.writeMem(0x942d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x81a8, gbc.sp());
        EXPECT(0x942f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x942d));
        EXPECT(0x32, gbc.readMem(0x942e));
        // CB 32 00B9
        gbc.setState(0xa40b, 0xe8e5, 0x8080, 0x7b31, 0x3277, 0x87f4, 0x1, 0x0);
        gbc.writeMem(0xa40b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xe8e5, gbc.sp());
        EXPECT(0xa40d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa40b));
        EXPECT(0x32, gbc.readMem(0xa40c));
        // CB 32 00BA
        gbc.setState(0x1440, 0x385f, 0x5df0, 0x71c6, 0x68bc, 0xce3c, 0x1, 0x1);
        gbc.writeMem(0x1440, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x385f, gbc.sp());
        EXPECT(0x1442, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00BC
        gbc.setState(0x853a, 0x7adc, 0x3e00, 0xb347, 0xf25f, 0x8f8e, 0x1, 0x0);
        gbc.writeMem(0x853a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x7adc, gbc.sp());
        EXPECT(0x853c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x853a));
        EXPECT(0x32, gbc.readMem(0x853b));
        // CB 32 00BD
        gbc.setState(0x2b21, 0x852f, 0x44d0, 0x2857, 0x2f46, 0xad58, 0x1, 0x1);
        gbc.writeMem(0x2b21, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x852f, gbc.sp());
        EXPECT(0x2b23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00BE
        gbc.setState(0xa742, 0xc29c, 0xa1e0, 0x831c, 0xad4f, 0xe463, 0x0, 0x0);
        gbc.writeMem(0xa742, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xc29c, gbc.sp());
        EXPECT(0xa744, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa742));
        EXPECT(0x32, gbc.readMem(0xa743));
        // CB 32 00BF
        gbc.setState(0x65c3, 0xe278, 0x6cb0, 0xcf22, 0x6940, 0x406a, 0x0, 0x0);
        gbc.writeMem(0x65c3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xe278, gbc.sp());
        EXPECT(0x65c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00C0
        gbc.setState(0x537a, 0x9e53, 0x3c10, 0xffc, 0xdd49, 0x4367, 0x0, 0x1);
        gbc.writeMem(0x537a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x9e53, gbc.sp());
        EXPECT(0x537c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00C1
        gbc.setState(0xd98d, 0x2a13, 0x32d0, 0x47a0, 0x6fd2, 0x53cb, 0x0, 0x1);
        gbc.writeMem(0xd98d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x2a13, gbc.sp());
        EXPECT(0xd98f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd98d));
        EXPECT(0x32, gbc.readMem(0xd98e));
        // CB 32 00C3
        gbc.setState(0x88ea, 0x5672, 0x1fd0, 0x6c28, 0xea3a, 0xfd63, 0x0, 0x0);
        gbc.writeMem(0x88ea, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x5672, gbc.sp());
        EXPECT(0x88ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88ea));
        EXPECT(0x32, gbc.readMem(0x88eb));
        // CB 32 00C4
        gbc.setState(0x4216, 0xbf5a, 0xb910, 0x6e39, 0xa468, 0x10a4, 0x1, 0x1);
        gbc.writeMem(0x4216, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xbf5a, gbc.sp());
        EXPECT(0x4218, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00C6
        gbc.setState(0xa31c, 0x5dfd, 0x1340, 0x6d5, 0xcb6, 0x5596, 0x1, 0x0);
        gbc.writeMem(0xa31c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x5dfd, gbc.sp());
        EXPECT(0xa31e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa31c));
        EXPECT(0x32, gbc.readMem(0xa31d));
        // CB 32 00C7
        gbc.setState(0xd622, 0x903b, 0xd0c0, 0x8af6, 0xead9, 0x9797, 0x0, 0x1);
        gbc.writeMem(0xd622, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x903b, gbc.sp());
        EXPECT(0xd624, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd622));
        EXPECT(0x32, gbc.readMem(0xd623));
        // CB 32 00C8
        gbc.setState(0xc899, 0x94ac, 0x2340, 0xf320, 0xdfba, 0xcf5d, 0x0, 0x1);
        gbc.writeMem(0xc899, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x94ac, gbc.sp());
        EXPECT(0xc89b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc899));
        EXPECT(0x32, gbc.readMem(0xc89a));
        // CB 32 00C9
        gbc.setState(0xb9da, 0xa08d, 0x40, 0x543e, 0x3b06, 0xe14, 0x1, 0x0);
        gbc.writeMem(0xb9da, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xa08d, gbc.sp());
        EXPECT(0xb9dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9da));
        EXPECT(0x32, gbc.readMem(0xb9db));
        // CB 32 00CA
        gbc.setState(0x9f38, 0xc115, 0xc930, 0x6dc1, 0x8e6, 0x524, 0x0, 0x1);
        gbc.writeMem(0x9f38, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xc115, gbc.sp());
        EXPECT(0x9f3a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f38));
        EXPECT(0x32, gbc.readMem(0x9f39));
        // CB 32 00CB
        gbc.setState(0xa1bf, 0x4eb0, 0x71a0, 0xba67, 0xf670, 0x3f58, 0x0, 0x1);
        gbc.writeMem(0xa1bf, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x4eb0, gbc.sp());
        EXPECT(0xa1c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1bf));
        EXPECT(0x32, gbc.readMem(0xa1c0));
        // CB 32 00CC
        gbc.setState(0x4b2c, 0xa5ad, 0xb3a0, 0xfbfc, 0xfa65, 0x54cb, 0x1, 0x0);
        gbc.writeMem(0x4b2c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xa5ad, gbc.sp());
        EXPECT(0x4b2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00CD
        gbc.setState(0xe5be, 0x191a, 0xcdd0, 0x6a20, 0xbcd1, 0x62a8, 0x0, 0x1);
        gbc.writeMem(0xe5be, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x191a, gbc.sp());
        EXPECT(0xe5c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5be));
        EXPECT(0x32, gbc.readMem(0xe5bf));
        // CB 32 00CE
        gbc.setState(0x708d, 0x354f, 0xcb80, 0x2307, 0xff6f, 0x6eea, 0x1, 0x1);
        gbc.writeMem(0x708d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x354f, gbc.sp());
        EXPECT(0x708f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00CF
        gbc.setState(0x58a2, 0x7282, 0x740, 0xca34, 0xcc08, 0x867e, 0x0, 0x1);
        gbc.writeMem(0x58a2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x7282, gbc.sp());
        EXPECT(0x58a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00D0
        gbc.setState(0x3787, 0x55ee, 0xdf90, 0x8e0f, 0x81f0, 0x263b, 0x0, 0x0);
        gbc.writeMem(0x3787, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x55ee, gbc.sp());
        EXPECT(0x3789, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00D1
        gbc.setState(0x724e, 0x6720, 0x70e0, 0x27fd, 0x4304, 0x7848, 0x0, 0x1);
        gbc.writeMem(0x724e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x6720, gbc.sp());
        EXPECT(0x7250, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00D2
        gbc.setState(0x3572, 0x414a, 0xc580, 0x251c, 0x10fc, 0x93aa, 0x1, 0x1);
        gbc.writeMem(0x3572, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x414a, gbc.sp());
        EXPECT(0x3574, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00D3
        gbc.setState(0x62a2, 0xc5fc, 0xe480, 0x6464, 0xa966, 0xb502, 0x0, 0x0);
        gbc.writeMem(0x62a2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xc5fc, gbc.sp());
        EXPECT(0x62a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00D4
        gbc.setState(0x7972, 0xf8a3, 0x8080, 0x5b4f, 0xe537, 0x61d1, 0x1, 0x0);
        gbc.writeMem(0x7972, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xf8a3, gbc.sp());
        EXPECT(0x7974, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00D5
        gbc.setState(0x9e9d, 0x4227, 0xe30, 0xd39f, 0xe28b, 0x6a93, 0x0, 0x0);
        gbc.writeMem(0x9e9d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x4227, gbc.sp());
        EXPECT(0x9e9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e9d));
        EXPECT(0x32, gbc.readMem(0x9e9e));
        // CB 32 00D6
        gbc.setState(0x4c87, 0xb791, 0x87f0, 0x1540, 0x28f7, 0x6341, 0x1, 0x1);
        gbc.writeMem(0x4c87, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xb791, gbc.sp());
        EXPECT(0x4c89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00D7
        gbc.setState(0xe76d, 0x317d, 0x3f80, 0xb334, 0x74ee, 0xafec, 0x0, 0x1);
        gbc.writeMem(0xe76d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x317d, gbc.sp());
        EXPECT(0xe76f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe76d));
        EXPECT(0x32, gbc.readMem(0xe76e));
        // CB 32 00D8
        gbc.setState(0xa6df, 0x89af, 0xaa80, 0x1778, 0x2da0, 0x6fe4, 0x0, 0x0);
        gbc.writeMem(0xa6df, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x89af, gbc.sp());
        EXPECT(0xa6e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6df));
        EXPECT(0x32, gbc.readMem(0xa6e0));
        // CB 32 00D9
        gbc.setState(0xef83, 0xfd15, 0xb2a0, 0x2278, 0x583e, 0x62c3, 0x0, 0x1);
        gbc.writeMem(0xef83, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xfd15, gbc.sp());
        EXPECT(0xef85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef83));
        EXPECT(0x32, gbc.readMem(0xef84));
        // CB 32 00DA
        gbc.setState(0x54e1, 0x911d, 0x60a0, 0x6d54, 0x6877, 0xf40c, 0x1, 0x0);
        gbc.writeMem(0x54e1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x911d, gbc.sp());
        EXPECT(0x54e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00DB
        gbc.setState(0xd7cb, 0x74ca, 0xef20, 0x767f, 0x622c, 0xe1f9, 0x1, 0x1);
        gbc.writeMem(0xd7cb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x74ca, gbc.sp());
        EXPECT(0xd7cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7cb));
        EXPECT(0x32, gbc.readMem(0xd7cc));
        // CB 32 00DC
        gbc.setState(0x9881, 0x5ea8, 0x9d70, 0x1dcc, 0xb02c, 0x4728, 0x1, 0x0);
        gbc.writeMem(0x9881, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x5ea8, gbc.sp());
        EXPECT(0x9883, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9881));
        EXPECT(0x32, gbc.readMem(0x9882));
        // CB 32 00DD
        gbc.setState(0xde3a, 0x1ef4, 0xf9f0, 0x56d0, 0x5ba, 0x49df, 0x0, 0x1);
        gbc.writeMem(0xde3a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x1ef4, gbc.sp());
        EXPECT(0xde3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde3a));
        EXPECT(0x32, gbc.readMem(0xde3b));
        // CB 32 00DE
        gbc.setState(0x885a, 0xeb52, 0x5180, 0x6a13, 0x1566, 0xd4da, 0x1, 0x1);
        gbc.writeMem(0x885a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xeb52, gbc.sp());
        EXPECT(0x885c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x885a));
        EXPECT(0x32, gbc.readMem(0x885b));
        // CB 32 00DF
        gbc.setState(0x9244, 0xa954, 0xb1b0, 0x2a67, 0x79e5, 0xed6, 0x0, 0x0);
        gbc.writeMem(0x9244, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xa954, gbc.sp());
        EXPECT(0x9246, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9244));
        EXPECT(0x32, gbc.readMem(0x9245));
        // CB 32 00E0
        gbc.setState(0x7ffa, 0x6511, 0x7200, 0xc42, 0x3a62, 0x974d, 0x1, 0x0);
        gbc.writeMem(0x7ffa, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x6511, gbc.sp());
        EXPECT(0x7ffc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00E1
        gbc.setState(0xe779, 0xa80, 0xf600, 0xe2c3, 0x9ea6, 0x50f2, 0x0, 0x0);
        gbc.writeMem(0xe779, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xa80, gbc.sp());
        EXPECT(0xe77b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe779));
        EXPECT(0x32, gbc.readMem(0xe77a));
        // CB 32 00E3
        gbc.setState(0x25c4, 0xa09e, 0xafb0, 0x7ba7, 0x6154, 0xce92, 0x0, 0x0);
        gbc.writeMem(0x25c4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xa09e, gbc.sp());
        EXPECT(0x25c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00E4
        gbc.setState(0xcb7a, 0x2063, 0xb780, 0x46f9, 0x8671, 0x629, 0x1, 0x1);
        gbc.writeMem(0xcb7a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x2063, gbc.sp());
        EXPECT(0xcb7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb7a));
        EXPECT(0x32, gbc.readMem(0xcb7b));
        // CB 32 00E5
        gbc.setState(0x592, 0xd6e5, 0x5710, 0x5129, 0x365b, 0x2e36, 0x0, 0x1);
        gbc.writeMem(0x592, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xd6e5, gbc.sp());
        EXPECT(0x594, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00E6
        gbc.setState(0x16ac, 0xbb27, 0x2dc0, 0xecae, 0x7887, 0xd7e9, 0x1, 0x1);
        gbc.writeMem(0x16ac, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xbb27, gbc.sp());
        EXPECT(0x16ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00E7
        gbc.setState(0x311e, 0x9ff6, 0x6ff0, 0x5617, 0xf3af, 0x5c10, 0x1, 0x0);
        gbc.writeMem(0x311e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x9ff6, gbc.sp());
        EXPECT(0x3120, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00E8
        gbc.setState(0x4b6f, 0x62fe, 0xcef0, 0x1947, 0xb60f, 0x287, 0x1, 0x1);
        gbc.writeMem(0x4b6f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x62fe, gbc.sp());
        EXPECT(0x4b71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00E9
        gbc.setState(0x2a16, 0x485, 0xf1b0, 0x8c2c, 0xd723, 0x133a, 0x1, 0x1);
        gbc.writeMem(0x2a16, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x485, gbc.sp());
        EXPECT(0x2a18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00EA
        gbc.setState(0x44f, 0xaaaa, 0x8580, 0x114e, 0xec9a, 0xcace, 0x0, 0x0);
        gbc.writeMem(0x44f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xaaaa, gbc.sp());
        EXPECT(0x451, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00EB
        gbc.setState(0x1be4, 0xbbee, 0xb890, 0x45f5, 0xc9bb, 0x2715, 0x0, 0x1);
        gbc.writeMem(0x1be4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xbbee, gbc.sp());
        EXPECT(0x1be6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00ED
        gbc.setState(0x5cae, 0x574a, 0x9a50, 0x1fd0, 0x16c0, 0xb093, 0x0, 0x1);
        gbc.writeMem(0x5cae, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x574a, gbc.sp());
        EXPECT(0x5cb0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00EF
        gbc.setState(0xdad2, 0xc02b, 0x8d30, 0xba81, 0x24f4, 0x49f9, 0x0, 0x1);
        gbc.writeMem(0xdad2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xc02b, gbc.sp());
        EXPECT(0xdad4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdad2));
        EXPECT(0x32, gbc.readMem(0xdad3));
        // CB 32 00F0
        gbc.setState(0x85a4, 0xe01b, 0xeea0, 0x6272, 0x7c2b, 0xd7bb, 0x1, 0x0);
        gbc.writeMem(0x85a4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xe01b, gbc.sp());
        EXPECT(0x85a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85a4));
        EXPECT(0x32, gbc.readMem(0x85a5));
        // CB 32 00F1
        gbc.setState(0x8cad, 0x158b, 0x1e30, 0xf26f, 0x5845, 0xbc98, 0x1, 0x0);
        gbc.writeMem(0x8cad, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x158b, gbc.sp());
        EXPECT(0x8caf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cad));
        EXPECT(0x32, gbc.readMem(0x8cae));
        // CB 32 00F2
        gbc.setState(0xb29d, 0x93a5, 0x1f80, 0x608, 0xecd5, 0xb2d1, 0x0, 0x1);
        gbc.writeMem(0xb29d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x93a5, gbc.sp());
        EXPECT(0xb29f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb29d));
        EXPECT(0x32, gbc.readMem(0xb29e));
        // CB 32 00F3
        gbc.setState(0x988b, 0x657c, 0x5f40, 0xff2a, 0x342d, 0xee97, 0x0, 0x0);
        gbc.writeMem(0x988b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x657c, gbc.sp());
        EXPECT(0x988d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x988b));
        EXPECT(0x32, gbc.readMem(0x988c));
        // CB 32 00F4
        gbc.setState(0xb482, 0x111e, 0x2da0, 0xad60, 0x6941, 0xd11f, 0x0, 0x0);
        gbc.writeMem(0xb482, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x111e, gbc.sp());
        EXPECT(0xb484, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb482));
        EXPECT(0x32, gbc.readMem(0xb483));
        // CB 32 00F5
        gbc.setState(0x5d6d, 0x4b04, 0x8b50, 0x4586, 0xd03, 0xf448, 0x0, 0x1);
        gbc.writeMem(0x5d6d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x4b04, gbc.sp());
        EXPECT(0x5d6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00F6
        gbc.setState(0xc4c3, 0x2f7b, 0x9580, 0x89cf, 0x9be4, 0xbd9d, 0x0, 0x1);
        gbc.writeMem(0xc4c3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x2f7b, gbc.sp());
        EXPECT(0xc4c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4c3));
        EXPECT(0x32, gbc.readMem(0xc4c4));
        // CB 32 00F7
        gbc.setState(0x52cc, 0xd4ab, 0x6f10, 0x521a, 0xd775, 0x22ac, 0x0, 0x1);
        gbc.writeMem(0x52cc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xd4ab, gbc.sp());
        EXPECT(0x52ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00F8
        gbc.setState(0xe491, 0x4cc2, 0xac0, 0x7342, 0xe373, 0xd22a, 0x0, 0x1);
        gbc.writeMem(0xe491, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x4cc2, gbc.sp());
        EXPECT(0xe493, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe491));
        EXPECT(0x32, gbc.readMem(0xe492));
        // CB 32 00F9
        gbc.setState(0x89b9, 0x8284, 0xd130, 0xabcc, 0x8c7, 0x8bb9, 0x1, 0x0);
        gbc.writeMem(0x89b9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x8284, gbc.sp());
        EXPECT(0x89bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89b9));
        EXPECT(0x32, gbc.readMem(0x89ba));
        // CB 32 00FA
        gbc.setState(0xe627, 0xd929, 0x55f0, 0xd1cb, 0xb2c8, 0x6a9f, 0x0, 0x0);
        gbc.writeMem(0xe627, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xd929, gbc.sp());
        EXPECT(0xe629, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe627));
        EXPECT(0x32, gbc.readMem(0xe628));
        // CB 32 00FB
        gbc.setState(0x3f3e, 0x84b2, 0x330, 0xe550, 0xc6a1, 0x311d, 0x0, 0x0);
        gbc.writeMem(0x3f3e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x84b2, gbc.sp());
        EXPECT(0x3f40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 00FC
        gbc.setState(0xdf08, 0x6104, 0x6e40, 0xe12e, 0x68ec, 0x17ef, 0x1, 0x0);
        gbc.writeMem(0xdf08, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x6104, gbc.sp());
        EXPECT(0xdf0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf08));
        EXPECT(0x32, gbc.readMem(0xdf09));
        // CB 32 00FE
        gbc.setState(0x83e3, 0x62b2, 0xd0f0, 0xf25e, 0xfaa2, 0x9b07, 0x1, 0x1);
        gbc.writeMem(0x83e3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x62b2, gbc.sp());
        EXPECT(0x83e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83e3));
        EXPECT(0x32, gbc.readMem(0x83e4));
        // CB 32 00FF
        gbc.setState(0xeef0, 0xe57e, 0x4090, 0x9f92, 0xd11b, 0x37a1, 0x0, 0x1);
        gbc.writeMem(0xeef0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xe57e, gbc.sp());
        EXPECT(0xeef2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeef0));
        EXPECT(0x32, gbc.readMem(0xeef1));
        // CB 32 0100
        gbc.setState(0x7595, 0xd9ed, 0x4780, 0xba58, 0x6597, 0xa7f8, 0x1, 0x0);
        gbc.writeMem(0x7595, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xd9ed, gbc.sp());
        EXPECT(0x7597, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0101
        gbc.setState(0x1501, 0xdaa3, 0x2c80, 0x7ba4, 0x3688, 0xfefd, 0x1, 0x0);
        gbc.writeMem(0x1501, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xdaa3, gbc.sp());
        EXPECT(0x1503, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0102
        gbc.setState(0x8e06, 0x179e, 0x54e0, 0xe261, 0x30c9, 0xced3, 0x0, 0x1);
        gbc.writeMem(0x8e06, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x179e, gbc.sp());
        EXPECT(0x8e08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e06));
        EXPECT(0x32, gbc.readMem(0x8e07));
        // CB 32 0103
        gbc.setState(0xd07, 0xab74, 0xb7b0, 0xadcc, 0x81b7, 0x96d6, 0x1, 0x0);
        gbc.writeMem(0xd07, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xab74, gbc.sp());
        EXPECT(0xd09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0104
        gbc.setState(0xeae1, 0xcb85, 0x63a0, 0x3da6, 0xd847, 0xf369, 0x0, 0x1);
        gbc.writeMem(0xeae1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xcb85, gbc.sp());
        EXPECT(0xeae3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeae1));
        EXPECT(0x32, gbc.readMem(0xeae2));
        // CB 32 0106
        gbc.setState(0xe0b8, 0xbbb1, 0xd4e0, 0xbe9c, 0x7255, 0xf622, 0x1, 0x0);
        gbc.writeMem(0xe0b8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xbbb1, gbc.sp());
        EXPECT(0xe0ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0b8));
        EXPECT(0x32, gbc.readMem(0xe0b9));
        // CB 32 0107
        gbc.setState(0x3bc5, 0x55b0, 0x11d0, 0xdc79, 0xcf16, 0xa405, 0x1, 0x1);
        gbc.writeMem(0x3bc5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x55b0, gbc.sp());
        EXPECT(0x3bc7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0108
        gbc.setState(0x46f, 0x102b, 0x7640, 0xff20, 0x924a, 0x28f7, 0x1, 0x1);
        gbc.writeMem(0x46f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x102b, gbc.sp());
        EXPECT(0x471, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0109
        gbc.setState(0x191, 0xd668, 0xa0d0, 0x5e2d, 0xc69b, 0x76f0, 0x0, 0x1);
        gbc.writeMem(0x191, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xd668, gbc.sp());
        EXPECT(0x193, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 010A
        gbc.setState(0xc502, 0x4990, 0xdc10, 0x7c71, 0xb339, 0x5e1, 0x1, 0x1);
        gbc.writeMem(0xc502, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x4990, gbc.sp());
        EXPECT(0xc504, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc502));
        EXPECT(0x32, gbc.readMem(0xc503));
        // CB 32 010B
        gbc.setState(0x3dda, 0x8774, 0x9330, 0x95c0, 0xb529, 0xb76f, 0x1, 0x1);
        gbc.writeMem(0x3dda, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x8774, gbc.sp());
        EXPECT(0x3ddc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 010C
        gbc.setState(0x8d8a, 0xd28e, 0xb2c0, 0xf070, 0x30b1, 0x379c, 0x1, 0x1);
        gbc.writeMem(0x8d8a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xd28e, gbc.sp());
        EXPECT(0x8d8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d8a));
        EXPECT(0x32, gbc.readMem(0x8d8b));
        // CB 32 010D
        gbc.setState(0x860b, 0xf168, 0xb730, 0x6337, 0xb4ef, 0xcffd, 0x1, 0x0);
        gbc.writeMem(0x860b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xf168, gbc.sp());
        EXPECT(0x860d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x860b));
        EXPECT(0x32, gbc.readMem(0x860c));
        // CB 32 010E
        gbc.setState(0x43bb, 0xc496, 0x9b0, 0x404e, 0xe83, 0x327d, 0x0, 0x0);
        gbc.writeMem(0x43bb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xc496, gbc.sp());
        EXPECT(0x43bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 010F
        gbc.setState(0xc7cb, 0xdc30, 0x6730, 0x41c8, 0x9eb2, 0x59b0, 0x0, 0x0);
        gbc.writeMem(0xc7cb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xdc30, gbc.sp());
        EXPECT(0xc7cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7cb));
        EXPECT(0x32, gbc.readMem(0xc7cc));
        // CB 32 0110
        gbc.setState(0x7752, 0xf458, 0xd2b0, 0xab81, 0x99e2, 0x24d0, 0x0, 0x1);
        gbc.writeMem(0x7752, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xf458, gbc.sp());
        EXPECT(0x7754, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0111
        gbc.setState(0xdfad, 0x44ed, 0xf450, 0x4ebd, 0x3fb5, 0xdeff, 0x1, 0x0);
        gbc.writeMem(0xdfad, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x44ed, gbc.sp());
        EXPECT(0xdfaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfad));
        EXPECT(0x32, gbc.readMem(0xdfae));
        // CB 32 0112
        gbc.setState(0xed9, 0xc2f3, 0x71a0, 0x1e14, 0x33d5, 0x6694, 0x0, 0x0);
        gbc.writeMem(0xed9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xc2f3, gbc.sp());
        EXPECT(0xedb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0113
        gbc.setState(0x8061, 0xd377, 0x9e50, 0xbf00, 0x7739, 0xdc3e, 0x0, 0x1);
        gbc.writeMem(0x8061, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xd377, gbc.sp());
        EXPECT(0x8063, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8061));
        EXPECT(0x32, gbc.readMem(0x8062));
        // CB 32 0114
        gbc.setState(0xb6f8, 0xed6b, 0x4120, 0xfa54, 0x8455, 0x4d6a, 0x1, 0x1);
        gbc.writeMem(0xb6f8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xed6b, gbc.sp());
        EXPECT(0xb6fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6f8));
        EXPECT(0x32, gbc.readMem(0xb6f9));
        // CB 32 0115
        gbc.setState(0xaf08, 0xe24b, 0xa910, 0x976a, 0x9aa8, 0xdeb3, 0x1, 0x0);
        gbc.writeMem(0xaf08, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xe24b, gbc.sp());
        EXPECT(0xaf0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf08));
        EXPECT(0x32, gbc.readMem(0xaf09));
        // CB 32 0117
        gbc.setState(0x429, 0x97ef, 0xfd20, 0x8862, 0xfa21, 0x14f7, 0x1, 0x0);
        gbc.writeMem(0x429, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x97ef, gbc.sp());
        EXPECT(0x42b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0118
        gbc.setState(0x72db, 0x59a8, 0x11f0, 0xe4, 0xa5b1, 0xd6e3, 0x0, 0x1);
        gbc.writeMem(0x72db, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x59a8, gbc.sp());
        EXPECT(0x72dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0119
        gbc.setState(0xd5fa, 0x2b87, 0xbbf0, 0x9817, 0x1c8e, 0x7c45, 0x1, 0x1);
        gbc.writeMem(0xd5fa, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x2b87, gbc.sp());
        EXPECT(0xd5fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5fa));
        EXPECT(0x32, gbc.readMem(0xd5fb));
        // CB 32 011A
        gbc.setState(0x1592, 0xe45, 0xf570, 0x36bf, 0x4a3b, 0x7a6c, 0x0, 0x1);
        gbc.writeMem(0x1592, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xe45, gbc.sp());
        EXPECT(0x1594, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 011B
        gbc.setState(0xd9e8, 0x249f, 0x67c0, 0x1b78, 0x43c, 0x3604, 0x1, 0x0);
        gbc.writeMem(0xd9e8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x249f, gbc.sp());
        EXPECT(0xd9ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9e8));
        EXPECT(0x32, gbc.readMem(0xd9e9));
        // CB 32 011C
        gbc.setState(0x4a9b, 0xf17f, 0x8200, 0x63d7, 0xb437, 0x12dc, 0x0, 0x1);
        gbc.writeMem(0x4a9b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xf17f, gbc.sp());
        EXPECT(0x4a9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 011D
        gbc.setState(0x200a, 0x1c0d, 0x6260, 0xb1be, 0x30, 0x2d89, 0x0, 0x0);
        gbc.writeMem(0x200a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x1c0d, gbc.sp());
        EXPECT(0x200c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 011E
        gbc.setState(0xbbac, 0x4f70, 0x9a80, 0x1ebd, 0x112b, 0xef13, 0x1, 0x1);
        gbc.writeMem(0xbbac, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x4f70, gbc.sp());
        EXPECT(0xbbae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbac));
        EXPECT(0x32, gbc.readMem(0xbbad));
        // CB 32 011F
        gbc.setState(0xac23, 0x3aac, 0x81c0, 0x97c0, 0x495f, 0x990b, 0x0, 0x1);
        gbc.writeMem(0xac23, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x3aac, gbc.sp());
        EXPECT(0xac25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac23));
        EXPECT(0x32, gbc.readMem(0xac24));
        // CB 32 0120
        gbc.setState(0x542f, 0x519a, 0xce80, 0x7b0a, 0x4c0, 0xad48, 0x0, 0x1);
        gbc.writeMem(0x542f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x519a, gbc.sp());
        EXPECT(0x5431, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0121
        gbc.setState(0x5c0e, 0x7b34, 0xa280, 0x8661, 0xca5d, 0xc41c, 0x1, 0x0);
        gbc.writeMem(0x5c0e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x7b34, gbc.sp());
        EXPECT(0x5c10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0122
        gbc.setState(0xd0a6, 0x5485, 0xc410, 0x4580, 0x57a9, 0xcc4d, 0x1, 0x1);
        gbc.writeMem(0xd0a6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x5485, gbc.sp());
        EXPECT(0xd0a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0a6));
        EXPECT(0x32, gbc.readMem(0xd0a7));
        // CB 32 0123
        gbc.setState(0x9f2b, 0x9aed, 0xda10, 0xe7b5, 0x9ea9, 0xc2b0, 0x1, 0x0);
        gbc.writeMem(0x9f2b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x9aed, gbc.sp());
        EXPECT(0x9f2d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f2b));
        EXPECT(0x32, gbc.readMem(0x9f2c));
        // CB 32 0124
        gbc.setState(0x5a33, 0x1b8a, 0x6110, 0x93c8, 0x5236, 0x81d, 0x0, 0x1);
        gbc.writeMem(0x5a33, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x1b8a, gbc.sp());
        EXPECT(0x5a35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0125
        gbc.setState(0x3b75, 0xd6a9, 0x5e0, 0x56da, 0xf3d, 0x8bf6, 0x1, 0x0);
        gbc.writeMem(0x3b75, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xd6a9, gbc.sp());
        EXPECT(0x3b77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0126
        gbc.setState(0xef13, 0x682e, 0x6a90, 0x774a, 0x44c6, 0xefa, 0x1, 0x0);
        gbc.writeMem(0xef13, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x682e, gbc.sp());
        EXPECT(0xef15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef13));
        EXPECT(0x32, gbc.readMem(0xef14));
        // CB 32 0127
        gbc.setState(0x5717, 0x55b, 0x2bf0, 0x7264, 0x16e2, 0x2f93, 0x0, 0x0);
        gbc.writeMem(0x5717, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x55b, gbc.sp());
        EXPECT(0x5719, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0128
        gbc.setState(0x8b64, 0x9ea1, 0x7c10, 0x8900, 0x214d, 0xf3e0, 0x1, 0x1);
        gbc.writeMem(0x8b64, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x9ea1, gbc.sp());
        EXPECT(0x8b66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b64));
        EXPECT(0x32, gbc.readMem(0x8b65));
        // CB 32 0129
        gbc.setState(0x8eab, 0xf372, 0x5b30, 0xd55d, 0x43e3, 0x857e, 0x0, 0x1);
        gbc.writeMem(0x8eab, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xf372, gbc.sp());
        EXPECT(0x8ead, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8eab));
        EXPECT(0x32, gbc.readMem(0x8eac));
        // CB 32 012A
        gbc.setState(0xeb1a, 0x9ed, 0x5190, 0xfbc2, 0x7975, 0x47be, 0x1, 0x1);
        gbc.writeMem(0xeb1a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x9ed, gbc.sp());
        EXPECT(0xeb1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb1a));
        EXPECT(0x32, gbc.readMem(0xeb1b));
        // CB 32 012B
        gbc.setState(0x9de1, 0x7885, 0x10c0, 0xdca2, 0xd259, 0x5317, 0x0, 0x0);
        gbc.writeMem(0x9de1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x7885, gbc.sp());
        EXPECT(0x9de3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9de1));
        EXPECT(0x32, gbc.readMem(0x9de2));
        // CB 32 012C
        gbc.setState(0x32d, 0xa065, 0xf700, 0x4eca, 0xdc32, 0x41d7, 0x1, 0x0);
        gbc.writeMem(0x32d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xa065, gbc.sp());
        EXPECT(0x32f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 012D
        gbc.setState(0xc073, 0x19d0, 0xd260, 0x3cb6, 0xdd8f, 0xc7c4, 0x1, 0x0);
        gbc.writeMem(0xc073, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x19d0, gbc.sp());
        EXPECT(0xc075, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc073));
        EXPECT(0x32, gbc.readMem(0xc074));
        // CB 32 012E
        gbc.setState(0x96cb, 0x23b3, 0x71f0, 0xb31a, 0xdd23, 0xc600, 0x1, 0x0);
        gbc.writeMem(0x96cb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x23b3, gbc.sp());
        EXPECT(0x96cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96cb));
        EXPECT(0x32, gbc.readMem(0x96cc));
        // CB 32 012F
        gbc.setState(0x6a54, 0xc4ae, 0x43e0, 0xeec1, 0x5c83, 0x43ee, 0x0, 0x0);
        gbc.writeMem(0x6a54, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xc4ae, gbc.sp());
        EXPECT(0x6a56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0130
        gbc.setState(0xae77, 0xf98b, 0xe150, 0x3b5f, 0x6ae5, 0xa25f, 0x1, 0x0);
        gbc.writeMem(0xae77, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xf98b, gbc.sp());
        EXPECT(0xae79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae77));
        EXPECT(0x32, gbc.readMem(0xae78));
        // CB 32 0132
        gbc.setState(0x23ae, 0xd144, 0x7da0, 0x939c, 0x3797, 0x8a2f, 0x1, 0x0);
        gbc.writeMem(0x23ae, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xd144, gbc.sp());
        EXPECT(0x23b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0133
        gbc.setState(0xa394, 0x74de, 0xe8f0, 0xe149, 0xc92e, 0xfac3, 0x1, 0x0);
        gbc.writeMem(0xa394, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x74de, gbc.sp());
        EXPECT(0xa396, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa394));
        EXPECT(0x32, gbc.readMem(0xa395));
        // CB 32 0134
        gbc.setState(0xb947, 0x3591, 0x81f0, 0xdffb, 0x1d66, 0x39af, 0x0, 0x0);
        gbc.writeMem(0xb947, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x3591, gbc.sp());
        EXPECT(0xb949, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb947));
        EXPECT(0x32, gbc.readMem(0xb948));
        // CB 32 0135
        gbc.setState(0xe1d3, 0xfa98, 0xd1b0, 0xa083, 0x222f, 0x892, 0x0, 0x0);
        gbc.writeMem(0xe1d3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xfa98, gbc.sp());
        EXPECT(0xe1d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1d3));
        EXPECT(0x32, gbc.readMem(0xe1d4));
        // CB 32 0136
        gbc.setState(0x70d3, 0xf50e, 0x7f60, 0x478f, 0xc0f, 0x41b, 0x1, 0x1);
        gbc.writeMem(0x70d3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xf50e, gbc.sp());
        EXPECT(0x70d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0137
        gbc.setState(0x2851, 0xa933, 0x2060, 0x3ed1, 0xd93d, 0x7c03, 0x1, 0x1);
        gbc.writeMem(0x2851, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xa933, gbc.sp());
        EXPECT(0x2853, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0138
        gbc.setState(0xeb8c, 0x17e7, 0xb5f0, 0x1c09, 0xcdda, 0xe61f, 0x0, 0x1);
        gbc.writeMem(0xeb8c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x17e7, gbc.sp());
        EXPECT(0xeb8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb8c));
        EXPECT(0x32, gbc.readMem(0xeb8d));
        // CB 32 013A
        gbc.setState(0x438a, 0x8aa5, 0xe9d0, 0x1548, 0x8036, 0x1ef, 0x1, 0x0);
        gbc.writeMem(0x438a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x8aa5, gbc.sp());
        EXPECT(0x438c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 013B
        gbc.setState(0x6d4, 0x1d06, 0x6880, 0x6e54, 0x61ee, 0xbab9, 0x0, 0x1);
        gbc.writeMem(0x6d4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x1d06, gbc.sp());
        EXPECT(0x6d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 013C
        gbc.setState(0x4244, 0xe3b5, 0xa800, 0xa7a2, 0x2ca0, 0xa72d, 0x1, 0x1);
        gbc.writeMem(0x4244, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xe3b5, gbc.sp());
        EXPECT(0x4246, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 013D
        gbc.setState(0x95c9, 0x9069, 0x6980, 0x9953, 0x1ec, 0x7d11, 0x1, 0x1);
        gbc.writeMem(0x95c9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x9069, gbc.sp());
        EXPECT(0x95cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95c9));
        EXPECT(0x32, gbc.readMem(0x95ca));
        // CB 32 013E
        gbc.setState(0x1e51, 0xe889, 0x5d70, 0xd384, 0x4b80, 0x6b0, 0x1, 0x0);
        gbc.writeMem(0x1e51, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xe889, gbc.sp());
        EXPECT(0x1e53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 013F
        gbc.setState(0xe8c7, 0xf900, 0x3030, 0xa0ce, 0x28fd, 0x4cf5, 0x1, 0x0);
        gbc.writeMem(0xe8c7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xf900, gbc.sp());
        EXPECT(0xe8c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8c7));
        EXPECT(0x32, gbc.readMem(0xe8c8));
        // CB 32 0140
        gbc.setState(0xe701, 0x69e6, 0xa030, 0xccb1, 0xc98, 0xe204, 0x1, 0x0);
        gbc.writeMem(0xe701, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x69e6, gbc.sp());
        EXPECT(0xe703, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe701));
        EXPECT(0x32, gbc.readMem(0xe702));
        // CB 32 0141
        gbc.setState(0x183a, 0x2910, 0x3580, 0xc1e8, 0xaebc, 0x6a44, 0x0, 0x0);
        gbc.writeMem(0x183a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x2910, gbc.sp());
        EXPECT(0x183c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0142
        gbc.setState(0xe362, 0xb97e, 0xab0, 0xf9b6, 0xdc5c, 0x5a3d, 0x1, 0x0);
        gbc.writeMem(0xe362, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xb97e, gbc.sp());
        EXPECT(0xe364, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe362));
        EXPECT(0x32, gbc.readMem(0xe363));
        // CB 32 0143
        gbc.setState(0x1f2a, 0x8700, 0x5c50, 0x26d0, 0xc837, 0x4d3e, 0x0, 0x0);
        gbc.writeMem(0x1f2a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x8700, gbc.sp());
        EXPECT(0x1f2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0144
        gbc.setState(0xef5d, 0xc322, 0x86c0, 0xe30d, 0x605a, 0xdc0c, 0x0, 0x1);
        gbc.writeMem(0xef5d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xc322, gbc.sp());
        EXPECT(0xef5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef5d));
        EXPECT(0x32, gbc.readMem(0xef5e));
        // CB 32 0145
        gbc.setState(0x78a6, 0x436f, 0xf1d0, 0xa049, 0xa2e6, 0xb7f3, 0x1, 0x0);
        gbc.writeMem(0x78a6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x436f, gbc.sp());
        EXPECT(0x78a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0146
        gbc.setState(0xa20, 0x45dd, 0x1460, 0x9d09, 0x3cb1, 0x55d2, 0x1, 0x1);
        gbc.writeMem(0xa20, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x45dd, gbc.sp());
        EXPECT(0xa22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0147
        gbc.setState(0x9ee6, 0x6bfe, 0x1f30, 0xb7d5, 0xae0d, 0xd11b, 0x0, 0x1);
        gbc.writeMem(0x9ee6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x6bfe, gbc.sp());
        EXPECT(0x9ee8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ee6));
        EXPECT(0x32, gbc.readMem(0x9ee7));
        // CB 32 0148
        gbc.setState(0x705e, 0xc34a, 0x6dd0, 0x9f5e, 0xd9f0, 0x52b6, 0x1, 0x0);
        gbc.writeMem(0x705e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xc34a, gbc.sp());
        EXPECT(0x7060, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0149
        gbc.setState(0x137c, 0x60bc, 0xf230, 0x7fbc, 0x8f8e, 0x5ea, 0x1, 0x0);
        gbc.writeMem(0x137c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x60bc, gbc.sp());
        EXPECT(0x137e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 014A
        gbc.setState(0xe955, 0x8f98, 0x1c90, 0x924e, 0x6dd0, 0xae9f, 0x0, 0x0);
        gbc.writeMem(0xe955, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x8f98, gbc.sp());
        EXPECT(0xe957, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe955));
        EXPECT(0x32, gbc.readMem(0xe956));
        // CB 32 014B
        gbc.setState(0x12f, 0x5a7b, 0xf2b0, 0x589, 0x19f5, 0x6fbc, 0x1, 0x1);
        gbc.writeMem(0x12f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x5a7b, gbc.sp());
        EXPECT(0x131, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 014C
        gbc.setState(0x2708, 0xe83d, 0x4ee0, 0xc702, 0xb78c, 0xe8f9, 0x0, 0x0);
        gbc.writeMem(0x2708, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xe83d, gbc.sp());
        EXPECT(0x270a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 014D
        gbc.setState(0x3e99, 0xd77f, 0xd340, 0xc393, 0xb725, 0xe8f6, 0x0, 0x0);
        gbc.writeMem(0x3e99, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xd77f, gbc.sp());
        EXPECT(0x3e9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 014E
        gbc.setState(0xa1fd, 0x99a3, 0xad60, 0x7ee6, 0xb973, 0x8283, 0x1, 0x0);
        gbc.writeMem(0xa1fd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x99a3, gbc.sp());
        EXPECT(0xa1ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1fd));
        EXPECT(0x32, gbc.readMem(0xa1fe));
        // CB 32 014F
        gbc.setState(0x92e1, 0x36f8, 0xcef0, 0x97de, 0xaaeb, 0x55c5, 0x1, 0x0);
        gbc.writeMem(0x92e1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x36f8, gbc.sp());
        EXPECT(0x92e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92e1));
        EXPECT(0x32, gbc.readMem(0x92e2));
        // CB 32 0150
        gbc.setState(0x65fc, 0xa66b, 0x8fd0, 0x3112, 0xa030, 0x4b11, 0x1, 0x1);
        gbc.writeMem(0x65fc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xa66b, gbc.sp());
        EXPECT(0x65fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0151
        gbc.setState(0x24af, 0x2acb, 0xa5b0, 0x1003, 0x6413, 0xf18c, 0x1, 0x0);
        gbc.writeMem(0x24af, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x2acb, gbc.sp());
        EXPECT(0x24b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0152
        gbc.setState(0x8538, 0xc5f9, 0xbb0, 0xbd12, 0xe40a, 0x70c5, 0x0, 0x1);
        gbc.writeMem(0x8538, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xc5f9, gbc.sp());
        EXPECT(0x853a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8538));
        EXPECT(0x32, gbc.readMem(0x8539));
        // CB 32 0154
        gbc.setState(0x730f, 0xd165, 0xf1f0, 0xb833, 0x2499, 0x9f3f, 0x1, 0x1);
        gbc.writeMem(0x730f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xd165, gbc.sp());
        EXPECT(0x7311, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0155
        gbc.setState(0x37eb, 0xe56c, 0xed60, 0x17f4, 0xabd0, 0xaae9, 0x0, 0x1);
        gbc.writeMem(0x37eb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xe56c, gbc.sp());
        EXPECT(0x37ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0156
        gbc.setState(0x1a27, 0x4d6f, 0x9d50, 0xd9d4, 0x70e2, 0x6cc1, 0x0, 0x1);
        gbc.writeMem(0x1a27, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x4d6f, gbc.sp());
        EXPECT(0x1a29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0157
        gbc.setState(0xce75, 0xcdf7, 0x4390, 0x91a5, 0xfd8f, 0xeb06, 0x1, 0x1);
        gbc.writeMem(0xce75, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xcdf7, gbc.sp());
        EXPECT(0xce77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce75));
        EXPECT(0x32, gbc.readMem(0xce76));
        // CB 32 0158
        gbc.setState(0x72b8, 0x4968, 0xbf10, 0xb560, 0x2fc5, 0xddd, 0x0, 0x1);
        gbc.writeMem(0x72b8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x4968, gbc.sp());
        EXPECT(0x72ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0159
        gbc.setState(0x3c9, 0x974e, 0x2d10, 0x2cf6, 0x5473, 0x7fe7, 0x0, 0x0);
        gbc.writeMem(0x3c9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x974e, gbc.sp());
        EXPECT(0x3cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 015A
        gbc.setState(0xd570, 0x1ff5, 0x9bf0, 0xb06a, 0x2441, 0x83de, 0x1, 0x0);
        gbc.writeMem(0xd570, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x1ff5, gbc.sp());
        EXPECT(0xd572, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd570));
        EXPECT(0x32, gbc.readMem(0xd571));
        // CB 32 015B
        gbc.setState(0xef55, 0x5b95, 0x8e0, 0xa561, 0x5b97, 0xc4f8, 0x0, 0x0);
        gbc.writeMem(0xef55, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x5b95, gbc.sp());
        EXPECT(0xef57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef55));
        EXPECT(0x32, gbc.readMem(0xef56));
        // CB 32 015C
        gbc.setState(0x7c2, 0xe148, 0x9410, 0x9563, 0x9a6b, 0x20c5, 0x1, 0x0);
        gbc.writeMem(0x7c2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xe148, gbc.sp());
        EXPECT(0x7c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 015D
        gbc.setState(0x3121, 0x65d8, 0xbba0, 0x254c, 0xdc56, 0x902e, 0x0, 0x0);
        gbc.writeMem(0x3121, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x65d8, gbc.sp());
        EXPECT(0x3123, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 015E
        gbc.setState(0xdfbc, 0x5372, 0x9b20, 0xfe5c, 0x787d, 0xf420, 0x1, 0x0);
        gbc.writeMem(0xdfbc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x5372, gbc.sp());
        EXPECT(0xdfbe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfbc));
        EXPECT(0x32, gbc.readMem(0xdfbd));
        // CB 32 015F
        gbc.setState(0x3ba7, 0x4361, 0x340, 0xe72, 0xdb3f, 0x1256, 0x1, 0x0);
        gbc.writeMem(0x3ba7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x4361, gbc.sp());
        EXPECT(0x3ba9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0160
        gbc.setState(0xcfdc, 0x4a8a, 0xe310, 0x396e, 0x1121, 0x8ec2, 0x1, 0x0);
        gbc.writeMem(0xcfdc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x4a8a, gbc.sp());
        EXPECT(0xcfde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfdc));
        EXPECT(0x32, gbc.readMem(0xcfdd));
        // CB 32 0161
        gbc.setState(0x6159, 0x43f3, 0x5380, 0xb663, 0x87b0, 0x4da7, 0x1, 0x0);
        gbc.writeMem(0x6159, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x43f3, gbc.sp());
        EXPECT(0x615b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0162
        gbc.setState(0x8952, 0xfe67, 0xbfb0, 0x7246, 0x477d, 0x60f9, 0x0, 0x1);
        gbc.writeMem(0x8952, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xfe67, gbc.sp());
        EXPECT(0x8954, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8952));
        EXPECT(0x32, gbc.readMem(0x8953));
        // CB 32 0163
        gbc.setState(0x76e5, 0x682f, 0x5140, 0x7b5e, 0xb697, 0x953, 0x1, 0x0);
        gbc.writeMem(0x76e5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x682f, gbc.sp());
        EXPECT(0x76e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0164
        gbc.setState(0x1938, 0x58af, 0xf740, 0xe2a3, 0xd030, 0x9b77, 0x0, 0x0);
        gbc.writeMem(0x1938, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x58af, gbc.sp());
        EXPECT(0x193a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0165
        gbc.setState(0x5be1, 0x2f4a, 0x9eb0, 0xe92c, 0x30c3, 0x418a, 0x0, 0x0);
        gbc.writeMem(0x5be1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x2f4a, gbc.sp());
        EXPECT(0x5be3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0166
        gbc.setState(0x7c77, 0x7747, 0xb830, 0x65ac, 0x585, 0x54b3, 0x0, 0x0);
        gbc.writeMem(0x7c77, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x7747, gbc.sp());
        EXPECT(0x7c79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0167
        gbc.setState(0x60c3, 0xeb07, 0xc840, 0x8b20, 0xc013, 0x366a, 0x0, 0x1);
        gbc.writeMem(0x60c3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xeb07, gbc.sp());
        EXPECT(0x60c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0168
        gbc.setState(0x6ebb, 0x43cc, 0xebf0, 0x80e2, 0x9753, 0x19bb, 0x1, 0x1);
        gbc.writeMem(0x6ebb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x43cc, gbc.sp());
        EXPECT(0x6ebd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0169
        gbc.setState(0x7af, 0xbe1, 0xdfd0, 0x7e1a, 0x76e9, 0xfd33, 0x1, 0x0);
        gbc.writeMem(0x7af, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xbe1, gbc.sp());
        EXPECT(0x7b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 016A
        gbc.setState(0xe323, 0x5a3b, 0xde40, 0xc15e, 0x27ee, 0xe2c7, 0x1, 0x0);
        gbc.writeMem(0xe323, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x5a3b, gbc.sp());
        EXPECT(0xe325, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe323));
        EXPECT(0x32, gbc.readMem(0xe324));
        // CB 32 016C
        gbc.setState(0x7932, 0xba69, 0xd030, 0x4a98, 0xfcc7, 0x7add, 0x1, 0x0);
        gbc.writeMem(0x7932, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xba69, gbc.sp());
        EXPECT(0x7934, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 016D
        gbc.setState(0xb282, 0xbd71, 0xb750, 0x4865, 0x8226, 0xb20a, 0x1, 0x0);
        gbc.writeMem(0xb282, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xbd71, gbc.sp());
        EXPECT(0xb284, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb282));
        EXPECT(0x32, gbc.readMem(0xb283));
        // CB 32 016E
        gbc.setState(0xed0b, 0xcf2b, 0x57e0, 0xa40, 0xbdfe, 0x496f, 0x1, 0x1);
        gbc.writeMem(0xed0b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xcf2b, gbc.sp());
        EXPECT(0xed0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed0b));
        EXPECT(0x32, gbc.readMem(0xed0c));
        // CB 32 016F
        gbc.setState(0x153b, 0xa52a, 0x3100, 0x4110, 0xdb35, 0xe2f6, 0x0, 0x1);
        gbc.writeMem(0x153b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xa52a, gbc.sp());
        EXPECT(0x153d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0170
        gbc.setState(0xa59e, 0xce5c, 0x3ca0, 0xc1a4, 0xbb56, 0x61c7, 0x0, 0x1);
        gbc.writeMem(0xa59e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xce5c, gbc.sp());
        EXPECT(0xa5a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa59e));
        EXPECT(0x32, gbc.readMem(0xa59f));
        // CB 32 0171
        gbc.setState(0x2c47, 0x6970, 0x2cc0, 0x56d7, 0x19d9, 0xe9c, 0x0, 0x1);
        gbc.writeMem(0x2c47, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x6970, gbc.sp());
        EXPECT(0x2c49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0172
        gbc.setState(0x4f84, 0x99fe, 0x5190, 0x3eee, 0x3d85, 0x83e5, 0x0, 0x1);
        gbc.writeMem(0x4f84, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x99fe, gbc.sp());
        EXPECT(0x4f86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0174
        gbc.setState(0x13d8, 0x9ca7, 0x9fd0, 0xa395, 0x2972, 0x419, 0x1, 0x0);
        gbc.writeMem(0x13d8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x9ca7, gbc.sp());
        EXPECT(0x13da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0175
        gbc.setState(0xe6e0, 0xa5f4, 0x7b80, 0x209, 0x9e05, 0xe833, 0x0, 0x1);
        gbc.writeMem(0xe6e0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xa5f4, gbc.sp());
        EXPECT(0xe6e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6e0));
        EXPECT(0x32, gbc.readMem(0xe6e1));
        // CB 32 0176
        gbc.setState(0x2200, 0xcc18, 0x5850, 0xe663, 0x7c16, 0x8629, 0x1, 0x1);
        gbc.writeMem(0x2200, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xcc18, gbc.sp());
        EXPECT(0x2202, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0177
        gbc.setState(0x9600, 0x394e, 0x0, 0x3eb, 0xf5bf, 0x1a98, 0x0, 0x1);
        gbc.writeMem(0x9600, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x394e, gbc.sp());
        EXPECT(0x9602, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9600));
        EXPECT(0x32, gbc.readMem(0x9601));
        // CB 32 0178
        gbc.setState(0xea8e, 0xfcfd, 0xa6b0, 0xce58, 0x98f5, 0xc13c, 0x1, 0x0);
        gbc.writeMem(0xea8e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xfcfd, gbc.sp());
        EXPECT(0xea90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea8e));
        EXPECT(0x32, gbc.readMem(0xea8f));
        // CB 32 0179
        gbc.setState(0x5f5a, 0x18d, 0xa620, 0x7aa9, 0xb229, 0xf0d9, 0x1, 0x0);
        gbc.writeMem(0x5f5a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x18d, gbc.sp());
        EXPECT(0x5f5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 017A
        gbc.setState(0x7f85, 0xcb1b, 0x9a50, 0x97a4, 0xf927, 0xa580, 0x0, 0x0);
        gbc.writeMem(0x7f85, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xcb1b, gbc.sp());
        EXPECT(0x7f87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 017B
        gbc.setState(0x7423, 0x6b51, 0x6650, 0xd2dc, 0x8e7e, 0x8efc, 0x1, 0x0);
        gbc.writeMem(0x7423, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x6b51, gbc.sp());
        EXPECT(0x7425, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 017C
        gbc.setState(0x30b3, 0x1de4, 0xd440, 0xcdd4, 0xffa7, 0x4e55, 0x1, 0x1);
        gbc.writeMem(0x30b3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x1de4, gbc.sp());
        EXPECT(0x30b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 017D
        gbc.setState(0x5700, 0x23ad, 0xd450, 0xff7e, 0x57d8, 0x5a4a, 0x1, 0x0);
        gbc.writeMem(0x5700, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x23ad, gbc.sp());
        EXPECT(0x5702, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 017E
        gbc.setState(0x7d75, 0xe99b, 0x3dd0, 0x8bf6, 0x880b, 0xb226, 0x1, 0x0);
        gbc.writeMem(0x7d75, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xe99b, gbc.sp());
        EXPECT(0x7d77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 017F
        gbc.setState(0xa13c, 0xf1d3, 0x4840, 0xff9b, 0x54be, 0xd167, 0x0, 0x0);
        gbc.writeMem(0xa13c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xf1d3, gbc.sp());
        EXPECT(0xa13e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa13c));
        EXPECT(0x32, gbc.readMem(0xa13d));
        // CB 32 0180
        gbc.setState(0x7e37, 0x5082, 0xf430, 0xebc4, 0x6928, 0xc252, 0x0, 0x1);
        gbc.writeMem(0x7e37, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x5082, gbc.sp());
        EXPECT(0x7e39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0181
        gbc.setState(0xb768, 0xbf62, 0x68b0, 0x37aa, 0xe391, 0x7e97, 0x1, 0x1);
        gbc.writeMem(0xb768, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xbf62, gbc.sp());
        EXPECT(0xb76a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb768));
        EXPECT(0x32, gbc.readMem(0xb769));
        // CB 32 0182
        gbc.setState(0x8d2e, 0xd0b0, 0x9170, 0x54b3, 0x187d, 0x499d, 0x0, 0x1);
        gbc.writeMem(0x8d2e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xd0b0, gbc.sp());
        EXPECT(0x8d30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d2e));
        EXPECT(0x32, gbc.readMem(0x8d2f));
        // CB 32 0183
        gbc.setState(0xca0a, 0x8799, 0x9990, 0x9bc1, 0x4e48, 0x8be, 0x0, 0x1);
        gbc.writeMem(0xca0a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x8799, gbc.sp());
        EXPECT(0xca0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca0a));
        EXPECT(0x32, gbc.readMem(0xca0b));
        // CB 32 0184
        gbc.setState(0xaf0c, 0xb241, 0x82e0, 0x2cb9, 0xcdf5, 0xa5c, 0x1, 0x1);
        gbc.writeMem(0xaf0c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xb241, gbc.sp());
        EXPECT(0xaf0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf0c));
        EXPECT(0x32, gbc.readMem(0xaf0d));
        // CB 32 0185
        gbc.setState(0x565d, 0xb094, 0x2850, 0x6a96, 0x420e, 0xefa5, 0x1, 0x1);
        gbc.writeMem(0x565d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xb094, gbc.sp());
        EXPECT(0x565f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0186
        gbc.setState(0x5766, 0xea61, 0xc010, 0xb756, 0xbe9c, 0x836c, 0x0, 0x0);
        gbc.writeMem(0x5766, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xea61, gbc.sp());
        EXPECT(0x5768, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0187
        gbc.setState(0xb12f, 0x5e45, 0x23c0, 0x499a, 0xb813, 0x79ae, 0x1, 0x1);
        gbc.writeMem(0xb12f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x5e45, gbc.sp());
        EXPECT(0xb131, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb12f));
        EXPECT(0x32, gbc.readMem(0xb130));
        // CB 32 0188
        gbc.setState(0x6d23, 0x2e16, 0xfd80, 0xba76, 0x696, 0xfaae, 0x1, 0x1);
        gbc.writeMem(0x6d23, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x2e16, gbc.sp());
        EXPECT(0x6d25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0189
        gbc.setState(0x1f98, 0x8d7f, 0x51a0, 0xcb10, 0x1245, 0xfa0d, 0x1, 0x1);
        gbc.writeMem(0x1f98, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x8d7f, gbc.sp());
        EXPECT(0x1f9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 018A
        gbc.setState(0xd07a, 0x45ef, 0xd500, 0x53dd, 0xfbb4, 0x38b6, 0x1, 0x1);
        gbc.writeMem(0xd07a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x45ef, gbc.sp());
        EXPECT(0xd07c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd07a));
        EXPECT(0x32, gbc.readMem(0xd07b));
        // CB 32 018B
        gbc.setState(0x4e44, 0x51f5, 0x3460, 0x88dd, 0x7788, 0xe5ab, 0x0, 0x1);
        gbc.writeMem(0x4e44, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x51f5, gbc.sp());
        EXPECT(0x4e46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 018C
        gbc.setState(0xdcb9, 0xb578, 0x50, 0xe44b, 0xa41f, 0x49f7, 0x1, 0x0);
        gbc.writeMem(0xdcb9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xb578, gbc.sp());
        EXPECT(0xdcbb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcb9));
        EXPECT(0x32, gbc.readMem(0xdcba));
        // CB 32 018D
        gbc.setState(0x8fb2, 0xc049, 0x3740, 0x7b42, 0x9690, 0xfd7d, 0x1, 0x0);
        gbc.writeMem(0x8fb2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xc049, gbc.sp());
        EXPECT(0x8fb4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fb2));
        EXPECT(0x32, gbc.readMem(0x8fb3));
        // CB 32 018E
        gbc.setState(0xd936, 0x8a4b, 0xbbb0, 0x8f89, 0xa369, 0x9f4e, 0x1, 0x1);
        gbc.writeMem(0xd936, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x8a4b, gbc.sp());
        EXPECT(0xd938, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd936));
        EXPECT(0x32, gbc.readMem(0xd937));
        // CB 32 018F
        gbc.setState(0x664d, 0x6ae9, 0x3cf0, 0xc5e9, 0x1f9a, 0x5285, 0x1, 0x1);
        gbc.writeMem(0x664d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x6ae9, gbc.sp());
        EXPECT(0x664f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0190
        gbc.setState(0xd134, 0xd030, 0x8050, 0xed74, 0xa03e, 0x2e84, 0x1, 0x0);
        gbc.writeMem(0xd134, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xd030, gbc.sp());
        EXPECT(0xd136, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd134));
        EXPECT(0x32, gbc.readMem(0xd135));
        // CB 32 0191
        gbc.setState(0x7609, 0x4e14, 0xcf60, 0x1ab, 0x286, 0xa449, 0x1, 0x1);
        gbc.writeMem(0x7609, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x4e14, gbc.sp());
        EXPECT(0x760b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0193
        gbc.setState(0x5f88, 0xb93c, 0x4c50, 0xe798, 0x2835, 0xbfa6, 0x1, 0x1);
        gbc.writeMem(0x5f88, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xb93c, gbc.sp());
        EXPECT(0x5f8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0194
        gbc.setState(0x633e, 0xb9f0, 0x51b0, 0x38fe, 0x866d, 0xc17f, 0x1, 0x1);
        gbc.writeMem(0x633e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xb9f0, gbc.sp());
        EXPECT(0x6340, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0195
        gbc.setState(0x8882, 0x45d5, 0x7290, 0xc2ed, 0x31ce, 0xbaa0, 0x0, 0x1);
        gbc.writeMem(0x8882, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x45d5, gbc.sp());
        EXPECT(0x8884, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8882));
        EXPECT(0x32, gbc.readMem(0x8883));
        // CB 32 0196
        gbc.setState(0x3713, 0xf90a, 0x4ba0, 0x4661, 0x37e8, 0x5f99, 0x0, 0x0);
        gbc.writeMem(0x3713, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xf90a, gbc.sp());
        EXPECT(0x3715, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0197
        gbc.setState(0x5467, 0xf50d, 0x67d0, 0xbcc9, 0x4092, 0x3bee, 0x0, 0x0);
        gbc.writeMem(0x5467, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xf50d, gbc.sp());
        EXPECT(0x5469, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0198
        gbc.setState(0xcb41, 0x1c36, 0x4790, 0xdce3, 0xcb62, 0xe516, 0x0, 0x1);
        gbc.writeMem(0xcb41, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x1c36, gbc.sp());
        EXPECT(0xcb43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb41));
        EXPECT(0x32, gbc.readMem(0xcb42));
        // CB 32 0199
        gbc.setState(0x2a4, 0x5177, 0x6a20, 0x5f4a, 0xd2cb, 0xaecb, 0x0, 0x1);
        gbc.writeMem(0x2a4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x5177, gbc.sp());
        EXPECT(0x2a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 019A
        gbc.setState(0xc945, 0xaa4, 0x5620, 0x8ae9, 0xda90, 0x9bb9, 0x0, 0x0);
        gbc.writeMem(0xc945, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xaa4, gbc.sp());
        EXPECT(0xc947, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc945));
        EXPECT(0x32, gbc.readMem(0xc946));
        // CB 32 019B
        gbc.setState(0xc938, 0x9f49, 0x7f40, 0x7621, 0x6880, 0xbc4c, 0x1, 0x1);
        gbc.writeMem(0xc938, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x9f49, gbc.sp());
        EXPECT(0xc93a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc938));
        EXPECT(0x32, gbc.readMem(0xc939));
        // CB 32 019C
        gbc.setState(0x4e66, 0xf14f, 0x8980, 0x8ad2, 0xb09a, 0x16ac, 0x0, 0x1);
        gbc.writeMem(0x4e66, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xf14f, gbc.sp());
        EXPECT(0x4e68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 019D
        gbc.setState(0x77e3, 0x11e1, 0xfa40, 0xc0a7, 0xf7c9, 0x24a7, 0x1, 0x0);
        gbc.writeMem(0x77e3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x11e1, gbc.sp());
        EXPECT(0x77e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 019E
        gbc.setState(0x9741, 0x860b, 0x8720, 0xb4b4, 0x57ab, 0x2f37, 0x0, 0x0);
        gbc.writeMem(0x9741, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x860b, gbc.sp());
        EXPECT(0x9743, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9741));
        EXPECT(0x32, gbc.readMem(0x9742));
        // CB 32 019F
        gbc.setState(0x5070, 0x80c9, 0x82c0, 0x27e3, 0x3597, 0x52a1, 0x0, 0x1);
        gbc.writeMem(0x5070, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x80c9, gbc.sp());
        EXPECT(0x5072, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01A0
        gbc.setState(0x36b2, 0x6bdf, 0x57b0, 0x8c08, 0xa04e, 0x4195, 0x1, 0x0);
        gbc.writeMem(0x36b2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x6bdf, gbc.sp());
        EXPECT(0x36b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01A2
        gbc.setState(0x314b, 0x45c4, 0x1330, 0x29b6, 0x6339, 0x2283, 0x0, 0x0);
        gbc.writeMem(0x314b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x45c4, gbc.sp());
        EXPECT(0x314d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01A3
        gbc.setState(0xaa45, 0x116a, 0x20, 0x6ecd, 0xead0, 0xefe7, 0x0, 0x1);
        gbc.writeMem(0xaa45, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x116a, gbc.sp());
        EXPECT(0xaa47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa45));
        EXPECT(0x32, gbc.readMem(0xaa46));
        // CB 32 01A4
        gbc.setState(0xa3fb, 0x334c, 0x2b0, 0xb942, 0x8f52, 0xb8dc, 0x1, 0x0);
        gbc.writeMem(0xa3fb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x334c, gbc.sp());
        EXPECT(0xa3fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3fb));
        EXPECT(0x32, gbc.readMem(0xa3fc));
        // CB 32 01A5
        gbc.setState(0x59fd, 0x3cc6, 0x9a00, 0x866f, 0x1aaf, 0x74f8, 0x0, 0x1);
        gbc.writeMem(0x59fd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x3cc6, gbc.sp());
        EXPECT(0x59ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01A6
        gbc.setState(0x9f78, 0x4d89, 0xfc00, 0xbcf1, 0x7c6, 0xe7b3, 0x1, 0x0);
        gbc.writeMem(0x9f78, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x4d89, gbc.sp());
        EXPECT(0x9f7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f78));
        EXPECT(0x32, gbc.readMem(0x9f79));
        // CB 32 01A7
        gbc.setState(0xecab, 0xe77a, 0xcd0, 0x681b, 0xb91b, 0x3301, 0x0, 0x1);
        gbc.writeMem(0xecab, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xe77a, gbc.sp());
        EXPECT(0xecad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecab));
        EXPECT(0x32, gbc.readMem(0xecac));
        // CB 32 01A8
        gbc.setState(0x1bac, 0x5125, 0x20d0, 0x216d, 0xde2a, 0xa540, 0x0, 0x1);
        gbc.writeMem(0x1bac, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x5125, gbc.sp());
        EXPECT(0x1bae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01A9
        gbc.setState(0xdbe, 0x8a74, 0xa8f0, 0x5040, 0xe780, 0x3b74, 0x1, 0x0);
        gbc.writeMem(0xdbe, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x8a74, gbc.sp());
        EXPECT(0xdc0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01AA
        gbc.setState(0x2190, 0x638e, 0xbca0, 0xcc8e, 0x9d40, 0x429, 0x0, 0x0);
        gbc.writeMem(0x2190, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x638e, gbc.sp());
        EXPECT(0x2192, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01AB
        gbc.setState(0x73c8, 0xa780, 0x6ae0, 0xeb02, 0x62f6, 0xf0b3, 0x1, 0x0);
        gbc.writeMem(0x73c8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xa780, gbc.sp());
        EXPECT(0x73ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01AC
        gbc.setState(0x5c8d, 0x8193, 0xda30, 0xab3f, 0x4e5e, 0x7a0b, 0x0, 0x0);
        gbc.writeMem(0x5c8d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x8193, gbc.sp());
        EXPECT(0x5c8f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01AD
        gbc.setState(0xce8e, 0x7cb1, 0x3700, 0x98e0, 0xc609, 0x3810, 0x1, 0x0);
        gbc.writeMem(0xce8e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x7cb1, gbc.sp());
        EXPECT(0xce90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce8e));
        EXPECT(0x32, gbc.readMem(0xce8f));
        // CB 32 01AE
        gbc.setState(0x4834, 0x2483, 0xa3b0, 0xda5e, 0xf723, 0x95d, 0x0, 0x0);
        gbc.writeMem(0x4834, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x2483, gbc.sp());
        EXPECT(0x4836, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01B0
        gbc.setState(0x4da8, 0xb86c, 0xf710, 0xcdb4, 0x9ba9, 0xf5ff, 0x0, 0x1);
        gbc.writeMem(0x4da8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xb86c, gbc.sp());
        EXPECT(0x4daa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01B1
        gbc.setState(0x1a7f, 0x25dc, 0xe700, 0x9cd5, 0xfcab, 0x57f4, 0x1, 0x1);
        gbc.writeMem(0x1a7f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x25dc, gbc.sp());
        EXPECT(0x1a81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01B2
        gbc.setState(0xc53d, 0xc567, 0xde00, 0xa791, 0x3c38, 0xf408, 0x1, 0x0);
        gbc.writeMem(0xc53d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xc567, gbc.sp());
        EXPECT(0xc53f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc53d));
        EXPECT(0x32, gbc.readMem(0xc53e));
        // CB 32 01B3
        gbc.setState(0x9d63, 0xe2a9, 0x3850, 0x1eb8, 0x7ed5, 0x17cf, 0x1, 0x1);
        gbc.writeMem(0x9d63, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xe2a9, gbc.sp());
        EXPECT(0x9d65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d63));
        EXPECT(0x32, gbc.readMem(0x9d64));
        // CB 32 01B4
        gbc.setState(0x9eda, 0xbdae, 0x38a0, 0x821c, 0x4cbe, 0x9a58, 0x1, 0x0);
        gbc.writeMem(0x9eda, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xbdae, gbc.sp());
        EXPECT(0x9edc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9eda));
        EXPECT(0x32, gbc.readMem(0x9edb));
        // CB 32 01B5
        gbc.setState(0xdea2, 0xa51e, 0xcaf0, 0x517a, 0x308a, 0x2785, 0x0, 0x0);
        gbc.writeMem(0xdea2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xa51e, gbc.sp());
        EXPECT(0xdea4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdea2));
        EXPECT(0x32, gbc.readMem(0xdea3));
        // CB 32 01B7
        gbc.setState(0x303f, 0x6201, 0xb4d0, 0x20cd, 0x3041, 0x920f, 0x1, 0x0);
        gbc.writeMem(0x303f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x6201, gbc.sp());
        EXPECT(0x3041, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01B8
        gbc.setState(0x34b8, 0x1a78, 0x3e50, 0x9cdd, 0xa9d8, 0x33d1, 0x1, 0x0);
        gbc.writeMem(0x34b8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x1a78, gbc.sp());
        EXPECT(0x34ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01BA
        gbc.setState(0x5468, 0xadac, 0xd180, 0xd167, 0xbaa6, 0x7ba1, 0x0, 0x1);
        gbc.writeMem(0x5468, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xadac, gbc.sp());
        EXPECT(0x546a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01BC
        gbc.setState(0xe541, 0x3f3b, 0xbea0, 0xa13e, 0xa5ce, 0x2bec, 0x0, 0x0);
        gbc.writeMem(0xe541, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x3f3b, gbc.sp());
        EXPECT(0xe543, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe541));
        EXPECT(0x32, gbc.readMem(0xe542));
        // CB 32 01BD
        gbc.setState(0xe93c, 0xb75b, 0xc260, 0x5561, 0x1ed0, 0xf343, 0x1, 0x1);
        gbc.writeMem(0xe93c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xb75b, gbc.sp());
        EXPECT(0xe93e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe93c));
        EXPECT(0x32, gbc.readMem(0xe93d));
        // CB 32 01BE
        gbc.setState(0xa09d, 0x6cb2, 0xdcf0, 0x137f, 0x76c7, 0x12d8, 0x0, 0x1);
        gbc.writeMem(0xa09d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x6cb2, gbc.sp());
        EXPECT(0xa09f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa09d));
        EXPECT(0x32, gbc.readMem(0xa09e));
        // CB 32 01BF
        gbc.setState(0x45e2, 0xda63, 0x9640, 0x92a1, 0xf2d, 0x7108, 0x0, 0x1);
        gbc.writeMem(0x45e2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xda63, gbc.sp());
        EXPECT(0x45e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01C0
        gbc.setState(0x663a, 0x2850, 0x6350, 0x5bcf, 0x4665, 0xf0a5, 0x0, 0x0);
        gbc.writeMem(0x663a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x2850, gbc.sp());
        EXPECT(0x663c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01C1
        gbc.setState(0x22e0, 0xf5a4, 0xe7b0, 0x93e3, 0x14c5, 0x6359, 0x1, 0x1);
        gbc.writeMem(0x22e0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xf5a4, gbc.sp());
        EXPECT(0x22e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01C2
        gbc.setState(0xce2a, 0x26ed, 0x1380, 0x58b0, 0x24e4, 0x523c, 0x1, 0x1);
        gbc.writeMem(0xce2a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x26ed, gbc.sp());
        EXPECT(0xce2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce2a));
        EXPECT(0x32, gbc.readMem(0xce2b));
        // CB 32 01C3
        gbc.setState(0xcdf1, 0x8596, 0x8520, 0xffb3, 0x99cd, 0x75e3, 0x1, 0x0);
        gbc.writeMem(0xcdf1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x8596, gbc.sp());
        EXPECT(0xcdf3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdf1));
        EXPECT(0x32, gbc.readMem(0xcdf2));
        // CB 32 01C4
        gbc.setState(0xffe, 0xa9ba, 0x5a60, 0x9ec9, 0x2323, 0x849f, 0x0, 0x1);
        gbc.writeMem(0xffe, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xa9ba, gbc.sp());
        EXPECT(0x1000, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01C5
        gbc.setState(0x86a9, 0x6495, 0xd4c0, 0x9438, 0xdfe7, 0x5846, 0x1, 0x1);
        gbc.writeMem(0x86a9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x6495, gbc.sp());
        EXPECT(0x86ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86a9));
        EXPECT(0x32, gbc.readMem(0x86aa));
        // CB 32 01C6
        gbc.setState(0xc551, 0x13f6, 0xdf0, 0x66e7, 0xb35a, 0x9350, 0x1, 0x0);
        gbc.writeMem(0xc551, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x13f6, gbc.sp());
        EXPECT(0xc553, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc551));
        EXPECT(0x32, gbc.readMem(0xc552));
        // CB 32 01C7
        gbc.setState(0x7c6e, 0xe767, 0xb8f0, 0x797, 0xa2e, 0xaebf, 0x0, 0x0);
        gbc.writeMem(0x7c6e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xe767, gbc.sp());
        EXPECT(0x7c70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01C8
        gbc.setState(0x2b69, 0x4e2, 0x7300, 0x3d0f, 0x86b9, 0x2cb2, 0x0, 0x0);
        gbc.writeMem(0x2b69, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x4e2, gbc.sp());
        EXPECT(0x2b6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01C9
        gbc.setState(0x7c1d, 0x86ad, 0x8b10, 0x1922, 0xada5, 0x53b8, 0x1, 0x1);
        gbc.writeMem(0x7c1d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x86ad, gbc.sp());
        EXPECT(0x7c1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01CA
        gbc.setState(0x209c, 0x9357, 0x3330, 0x81a7, 0x2b0e, 0xc781, 0x1, 0x1);
        gbc.writeMem(0x209c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x9357, gbc.sp());
        EXPECT(0x209e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01CB
        gbc.setState(0x2ced, 0xcea5, 0xd820, 0x318e, 0x7470, 0x3998, 0x1, 0x1);
        gbc.writeMem(0x2ced, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xcea5, gbc.sp());
        EXPECT(0x2cef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01CC
        gbc.setState(0x76be, 0x21bd, 0xd650, 0x5470, 0x2119, 0x7bf7, 0x1, 0x1);
        gbc.writeMem(0x76be, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x21bd, gbc.sp());
        EXPECT(0x76c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01CD
        gbc.setState(0x8c5f, 0xf9f6, 0xeed0, 0x8d3d, 0x33f0, 0x3b66, 0x0, 0x1);
        gbc.writeMem(0x8c5f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xf9f6, gbc.sp());
        EXPECT(0x8c61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c5f));
        EXPECT(0x32, gbc.readMem(0x8c60));
        // CB 32 01CE
        gbc.setState(0x30ec, 0x16a1, 0x7080, 0x8796, 0xd795, 0x5750, 0x0, 0x1);
        gbc.writeMem(0x30ec, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x16a1, gbc.sp());
        EXPECT(0x30ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01CF
        gbc.setState(0x2449, 0x6b9c, 0xb5b0, 0x248d, 0xd250, 0x6d69, 0x1, 0x0);
        gbc.writeMem(0x2449, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x6b9c, gbc.sp());
        EXPECT(0x244b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01D0
        gbc.setState(0xca69, 0x6eb0, 0xeb10, 0x60b6, 0xab49, 0xdcab, 0x1, 0x1);
        gbc.writeMem(0xca69, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x6eb0, gbc.sp());
        EXPECT(0xca6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca69));
        EXPECT(0x32, gbc.readMem(0xca6a));
        // CB 32 01D1
        gbc.setState(0x2a1e, 0xa198, 0x4dc0, 0x6eb3, 0x4154, 0xfe52, 0x0, 0x0);
        gbc.writeMem(0x2a1e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xa198, gbc.sp());
        EXPECT(0x2a20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01D2
        gbc.setState(0x3bae, 0xfa47, 0x2540, 0x4fac, 0x6fc8, 0x6b9e, 0x1, 0x0);
        gbc.writeMem(0x3bae, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xfa47, gbc.sp());
        EXPECT(0x3bb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01D3
        gbc.setState(0x1b88, 0xe580, 0xb180, 0x31c8, 0x2f6c, 0xcbee, 0x0, 0x0);
        gbc.writeMem(0x1b88, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xe580, gbc.sp());
        EXPECT(0x1b8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01D4
        gbc.setState(0xac9f, 0x8da, 0xdae0, 0xf5b1, 0x7457, 0xe91e, 0x1, 0x0);
        gbc.writeMem(0xac9f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x8da, gbc.sp());
        EXPECT(0xaca1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac9f));
        EXPECT(0x32, gbc.readMem(0xaca0));
        // CB 32 01D5
        gbc.setState(0x651b, 0xbf8b, 0x40c0, 0x1a1, 0x23d, 0xfe4e, 0x1, 0x1);
        gbc.writeMem(0x651b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xbf8b, gbc.sp());
        EXPECT(0x651d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01D7
        gbc.setState(0x87c, 0x545e, 0x5bc0, 0x3fc2, 0x25a7, 0xc3d1, 0x0, 0x0);
        gbc.writeMem(0x87c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x545e, gbc.sp());
        EXPECT(0x87e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01D8
        gbc.setState(0x35d4, 0x3df, 0xddb0, 0x489f, 0xb2b, 0x7d7d, 0x1, 0x1);
        gbc.writeMem(0x35d4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x3df, gbc.sp());
        EXPECT(0x35d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01D9
        gbc.setState(0x6a20, 0x85f4, 0xa7e0, 0xa09b, 0xe9de, 0x99b2, 0x0, 0x0);
        gbc.writeMem(0x6a20, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x85f4, gbc.sp());
        EXPECT(0x6a22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01DA
        gbc.setState(0x6f88, 0xda24, 0x76b0, 0xa7b1, 0x2d25, 0xb199, 0x0, 0x0);
        gbc.writeMem(0x6f88, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xda24, gbc.sp());
        EXPECT(0x6f8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01DB
        gbc.setState(0x76cf, 0xdcff, 0xccb0, 0x3825, 0xf511, 0xf83, 0x0, 0x1);
        gbc.writeMem(0x76cf, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xdcff, gbc.sp());
        EXPECT(0x76d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01DC
        gbc.setState(0xa63c, 0xcf8f, 0xe290, 0xa6d6, 0xd3f2, 0x15e0, 0x1, 0x1);
        gbc.writeMem(0xa63c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xcf8f, gbc.sp());
        EXPECT(0xa63e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa63c));
        EXPECT(0x32, gbc.readMem(0xa63d));
        // CB 32 01DD
        gbc.setState(0xa6b6, 0x8d04, 0x7a70, 0xe9a5, 0xdf85, 0xab0b, 0x0, 0x1);
        gbc.writeMem(0xa6b6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x8d04, gbc.sp());
        EXPECT(0xa6b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6b6));
        EXPECT(0x32, gbc.readMem(0xa6b7));
        // CB 32 01DE
        gbc.setState(0x8ccd, 0x7e1, 0x96f0, 0x8c2c, 0xf77e, 0xa551, 0x0, 0x0);
        gbc.writeMem(0x8ccd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x7e1, gbc.sp());
        EXPECT(0x8ccf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ccd));
        EXPECT(0x32, gbc.readMem(0x8cce));
        // CB 32 01DF
        gbc.setState(0xeba1, 0xf8e1, 0xd130, 0xc4be, 0x8cdb, 0xc437, 0x1, 0x0);
        gbc.writeMem(0xeba1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xf8e1, gbc.sp());
        EXPECT(0xeba3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeba1));
        EXPECT(0x32, gbc.readMem(0xeba2));
        // CB 32 01E0
        gbc.setState(0xab1d, 0x5dc9, 0xc940, 0xf5fa, 0x13d1, 0xd950, 0x0, 0x0);
        gbc.writeMem(0xab1d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x5dc9, gbc.sp());
        EXPECT(0xab1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab1d));
        EXPECT(0x32, gbc.readMem(0xab1e));
        // CB 32 01E1
        gbc.setState(0xd37, 0xc128, 0x8bc0, 0xaaa0, 0x5df7, 0x18f9, 0x1, 0x0);
        gbc.writeMem(0xd37, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xc128, gbc.sp());
        EXPECT(0xd39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01E2
        gbc.setState(0x5243, 0x5064, 0xfbe0, 0x3542, 0x780c, 0x6fb4, 0x1, 0x0);
        gbc.writeMem(0x5243, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x5064, gbc.sp());
        EXPECT(0x5245, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01E3
        gbc.setState(0xa18, 0xecca, 0x2af0, 0xe315, 0xde51, 0x9923, 0x0, 0x0);
        gbc.writeMem(0xa18, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xecca, gbc.sp());
        EXPECT(0xa1a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01E4
        gbc.setState(0xc7a9, 0xcf9c, 0x6c80, 0x249d, 0xfcb2, 0x372, 0x0, 0x1);
        gbc.writeMem(0xc7a9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xcf9c, gbc.sp());
        EXPECT(0xc7ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7a9));
        EXPECT(0x32, gbc.readMem(0xc7aa));
        // CB 32 01E5
        gbc.setState(0x41a8, 0x11ba, 0x1360, 0x59e9, 0x2b69, 0xca79, 0x0, 0x1);
        gbc.writeMem(0x41a8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x11ba, gbc.sp());
        EXPECT(0x41aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01E6
        gbc.setState(0xf90, 0x7766, 0x2b40, 0x21c2, 0xdc1, 0xf676, 0x0, 0x1);
        gbc.writeMem(0xf90, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x7766, gbc.sp());
        EXPECT(0xf92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01E7
        gbc.setState(0x7cdb, 0x1837, 0x5940, 0x66e, 0xa640, 0x11d8, 0x1, 0x1);
        gbc.writeMem(0x7cdb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x1837, gbc.sp());
        EXPECT(0x7cdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01E8
        gbc.setState(0xc1ea, 0xdd5c, 0xbac0, 0x68c4, 0xe25b, 0xde30, 0x1, 0x1);
        gbc.writeMem(0xc1ea, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xdd5c, gbc.sp());
        EXPECT(0xc1ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1ea));
        EXPECT(0x32, gbc.readMem(0xc1eb));
        // CB 32 01EA
        gbc.setState(0xc0, 0xda0c, 0x9c80, 0x36a4, 0x9ae5, 0x48b0, 0x0, 0x1);
        gbc.writeMem(0xc0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xda0c, gbc.sp());
        EXPECT(0xc2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01EB
        gbc.setState(0x8c0a, 0x9ee, 0xcb40, 0x2dcc, 0x23c0, 0xdc4a, 0x1, 0x0);
        gbc.writeMem(0x8c0a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x9ee, gbc.sp());
        EXPECT(0x8c0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c0a));
        EXPECT(0x32, gbc.readMem(0x8c0b));
        // CB 32 01EC
        gbc.setState(0x482d, 0x6b0b, 0xa9d0, 0xc8fa, 0x2d7c, 0x1d13, 0x0, 0x0);
        gbc.writeMem(0x482d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x6b0b, gbc.sp());
        EXPECT(0x482f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01ED
        gbc.setState(0x85b7, 0x9e1a, 0x1a80, 0xfc18, 0xa7f9, 0xce87, 0x1, 0x0);
        gbc.writeMem(0x85b7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x9e1a, gbc.sp());
        EXPECT(0x85b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85b7));
        EXPECT(0x32, gbc.readMem(0x85b8));
        // CB 32 01EE
        gbc.setState(0x3c02, 0xe95, 0xfa0, 0x7230, 0x8645, 0x5dfa, 0x1, 0x0);
        gbc.writeMem(0x3c02, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xe95, gbc.sp());
        EXPECT(0x3c04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01EF
        gbc.setState(0x87b8, 0xc125, 0x2740, 0x597b, 0x62f1, 0x240c, 0x0, 0x0);
        gbc.writeMem(0x87b8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xc125, gbc.sp());
        EXPECT(0x87ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87b8));
        EXPECT(0x32, gbc.readMem(0x87b9));
        // CB 32 01F0
        gbc.setState(0x9da1, 0xa4d4, 0x6c60, 0x2d13, 0x8f90, 0x4e60, 0x0, 0x0);
        gbc.writeMem(0x9da1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xa4d4, gbc.sp());
        EXPECT(0x9da3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9da1));
        EXPECT(0x32, gbc.readMem(0x9da2));
        // CB 32 01F1
        gbc.setState(0x2b47, 0x3c16, 0x6570, 0xba04, 0xad7a, 0x8a6c, 0x0, 0x0);
        gbc.writeMem(0x2b47, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x3c16, gbc.sp());
        EXPECT(0x2b49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01F2
        gbc.setState(0xe518, 0x8c94, 0x2d60, 0xf509, 0x9c95, 0xccd3, 0x0, 0x0);
        gbc.writeMem(0xe518, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x8c94, gbc.sp());
        EXPECT(0xe51a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe518));
        EXPECT(0x32, gbc.readMem(0xe519));
        // CB 32 01F3
        gbc.setState(0xc0ae, 0x2d48, 0x88a0, 0x9543, 0x9aa1, 0xb74, 0x1, 0x1);
        gbc.writeMem(0xc0ae, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x2d48, gbc.sp());
        EXPECT(0xc0b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0ae));
        EXPECT(0x32, gbc.readMem(0xc0af));
        // CB 32 01F4
        gbc.setState(0x3628, 0xa55f, 0x7440, 0xe8fa, 0x89c, 0xce10, 0x0, 0x0);
        gbc.writeMem(0x3628, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xa55f, gbc.sp());
        EXPECT(0x362a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01F6
        gbc.setState(0xdc7f, 0x6135, 0x1900, 0x34e0, 0xa057, 0x15f5, 0x1, 0x0);
        gbc.writeMem(0xdc7f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x6135, gbc.sp());
        EXPECT(0xdc81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc7f));
        EXPECT(0x32, gbc.readMem(0xdc80));
        // CB 32 01F7
        gbc.setState(0x9877, 0xcd71, 0x690, 0x79fd, 0xab5a, 0x6911, 0x0, 0x1);
        gbc.writeMem(0x9877, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xcd71, gbc.sp());
        EXPECT(0x9879, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9877));
        EXPECT(0x32, gbc.readMem(0x9878));
        // CB 32 01F8
        gbc.setState(0xb70f, 0xf936, 0xe6e0, 0xf66c, 0x2532, 0x5009, 0x1, 0x1);
        gbc.writeMem(0xb70f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xf936, gbc.sp());
        EXPECT(0xb711, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb70f));
        EXPECT(0x32, gbc.readMem(0xb710));
        // CB 32 01F9
        gbc.setState(0x3436, 0x3533, 0xaad0, 0x341d, 0xf50, 0x82de, 0x0, 0x1);
        gbc.writeMem(0x3436, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x3533, gbc.sp());
        EXPECT(0x3438, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01FA
        gbc.setState(0xc37c, 0x7513, 0x9660, 0x9ca5, 0xe77b, 0x2632, 0x0, 0x1);
        gbc.writeMem(0xc37c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x7513, gbc.sp());
        EXPECT(0xc37e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc37c));
        EXPECT(0x32, gbc.readMem(0xc37d));
        // CB 32 01FB
        gbc.setState(0x4ff0, 0xad2f, 0x2470, 0xc9f3, 0x6d1d, 0xce63, 0x1, 0x0);
        gbc.writeMem(0x4ff0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xad2f, gbc.sp());
        EXPECT(0x4ff2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01FC
        gbc.setState(0x8ca3, 0x17b2, 0x19b0, 0xa0f7, 0x5993, 0xd040, 0x0, 0x1);
        gbc.writeMem(0x8ca3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x17b2, gbc.sp());
        EXPECT(0x8ca5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ca3));
        EXPECT(0x32, gbc.readMem(0x8ca4));
        // CB 32 01FD
        gbc.setState(0xcf4c, 0x2c94, 0xe550, 0x6350, 0x802c, 0xd403, 0x0, 0x0);
        gbc.writeMem(0xcf4c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x2c94, gbc.sp());
        EXPECT(0xcf4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf4c));
        EXPECT(0x32, gbc.readMem(0xcf4d));
        // CB 32 01FE
        gbc.setState(0x96a, 0xf357, 0x1fc0, 0x467d, 0x34a5, 0x37a9, 0x0, 0x0);
        gbc.writeMem(0x96a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xf357, gbc.sp());
        EXPECT(0x96c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 01FF
        gbc.setState(0x6689, 0xb128, 0x8f00, 0x719e, 0xe144, 0xaa57, 0x1, 0x0);
        gbc.writeMem(0x6689, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xb128, gbc.sp());
        EXPECT(0x668b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0200
        gbc.setState(0x8f3a, 0xc3e8, 0xe520, 0x1551, 0x693d, 0x1d56, 0x0, 0x0);
        gbc.writeMem(0x8f3a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xc3e8, gbc.sp());
        EXPECT(0x8f3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f3a));
        EXPECT(0x32, gbc.readMem(0x8f3b));
        // CB 32 0201
        gbc.setState(0xe43d, 0x4b0f, 0xc480, 0x1117, 0x14d9, 0x2bfe, 0x1, 0x1);
        gbc.writeMem(0xe43d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x4b0f, gbc.sp());
        EXPECT(0xe43f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe43d));
        EXPECT(0x32, gbc.readMem(0xe43e));
        // CB 32 0202
        gbc.setState(0x641e, 0x2ba3, 0xae70, 0x3682, 0x95e0, 0xdf54, 0x1, 0x1);
        gbc.writeMem(0x641e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x2ba3, gbc.sp());
        EXPECT(0x6420, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0203
        gbc.setState(0xbf34, 0x4ad, 0x5520, 0x66ab, 0x46f4, 0x3ae5, 0x1, 0x1);
        gbc.writeMem(0xbf34, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x4ad, gbc.sp());
        EXPECT(0xbf36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf34));
        EXPECT(0x32, gbc.readMem(0xbf35));
        // CB 32 0204
        gbc.setState(0x19d8, 0xdb44, 0x8cc0, 0xf6a7, 0x263b, 0xa099, 0x1, 0x1);
        gbc.writeMem(0x19d8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xdb44, gbc.sp());
        EXPECT(0x19da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0205
        gbc.setState(0x6ea4, 0x4e33, 0x970, 0xb21e, 0x767c, 0x5f94, 0x0, 0x1);
        gbc.writeMem(0x6ea4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x4e33, gbc.sp());
        EXPECT(0x6ea6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0206
        gbc.setState(0xe017, 0x8772, 0x51a0, 0x75c2, 0x217d, 0x2f10, 0x1, 0x0);
        gbc.writeMem(0xe017, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x8772, gbc.sp());
        EXPECT(0xe019, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe017));
        EXPECT(0x32, gbc.readMem(0xe018));
        // CB 32 0207
        gbc.setState(0x40fb, 0xbccc, 0xd3b0, 0x4669, 0x830e, 0xc044, 0x1, 0x0);
        gbc.writeMem(0x40fb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xbccc, gbc.sp());
        EXPECT(0x40fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0208
        gbc.setState(0xb8f3, 0x45cd, 0xef20, 0xf8f3, 0x35c0, 0xf509, 0x0, 0x1);
        gbc.writeMem(0xb8f3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x45cd, gbc.sp());
        EXPECT(0xb8f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8f3));
        EXPECT(0x32, gbc.readMem(0xb8f4));
        // CB 32 0209
        gbc.setState(0x95d4, 0x4e8c, 0xa9c0, 0x3357, 0x2ef2, 0x7c3f, 0x1, 0x1);
        gbc.writeMem(0x95d4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x4e8c, gbc.sp());
        EXPECT(0x95d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95d4));
        EXPECT(0x32, gbc.readMem(0x95d5));
        // CB 32 020A
        gbc.setState(0x7c62, 0xdf19, 0x76d0, 0x1d9c, 0x8a38, 0x234, 0x1, 0x0);
        gbc.writeMem(0x7c62, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xdf19, gbc.sp());
        EXPECT(0x7c64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 020B
        gbc.setState(0x2e95, 0x9212, 0xccd0, 0x636c, 0xf3fe, 0x94ed, 0x0, 0x1);
        gbc.writeMem(0x2e95, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x9212, gbc.sp());
        EXPECT(0x2e97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 020C
        gbc.setState(0xa6d5, 0x4e67, 0x86e0, 0x9310, 0x484c, 0xe64e, 0x1, 0x0);
        gbc.writeMem(0xa6d5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x4e67, gbc.sp());
        EXPECT(0xa6d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6d5));
        EXPECT(0x32, gbc.readMem(0xa6d6));
        // CB 32 020D
        gbc.setState(0x8d71, 0xe3c8, 0xf770, 0x64df, 0xde89, 0x5078, 0x1, 0x0);
        gbc.writeMem(0x8d71, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xe3c8, gbc.sp());
        EXPECT(0x8d73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d71));
        EXPECT(0x32, gbc.readMem(0x8d72));
        // CB 32 020E
        gbc.setState(0xd224, 0xb2ee, 0xb600, 0x89f0, 0x680f, 0xae10, 0x0, 0x1);
        gbc.writeMem(0xd224, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xb2ee, gbc.sp());
        EXPECT(0xd226, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd224));
        EXPECT(0x32, gbc.readMem(0xd225));
        // CB 32 020F
        gbc.setState(0x902b, 0x5af7, 0x6250, 0x1e88, 0x3447, 0xf98a, 0x0, 0x1);
        gbc.writeMem(0x902b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x5af7, gbc.sp());
        EXPECT(0x902d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x902b));
        EXPECT(0x32, gbc.readMem(0x902c));
        // CB 32 0211
        gbc.setState(0xc22, 0x1831, 0xc3c0, 0xc969, 0x8297, 0xf31e, 0x1, 0x1);
        gbc.writeMem(0xc22, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x1831, gbc.sp());
        EXPECT(0xc24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0212
        gbc.setState(0x4c13, 0xf0, 0xae30, 0x5486, 0xca5, 0x521b, 0x1, 0x1);
        gbc.writeMem(0x4c13, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xf0, gbc.sp());
        EXPECT(0x4c15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0213
        gbc.setState(0x540c, 0xa755, 0xc560, 0xaa5d, 0xd3b, 0xdcdd, 0x0, 0x0);
        gbc.writeMem(0x540c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xa755, gbc.sp());
        EXPECT(0x540e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0214
        gbc.setState(0x48e4, 0xdc24, 0xb8c0, 0x2182, 0xcd4c, 0x9647, 0x1, 0x1);
        gbc.writeMem(0x48e4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xdc24, gbc.sp());
        EXPECT(0x48e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0215
        gbc.setState(0x54d6, 0x953, 0x93b0, 0x5a72, 0x6398, 0xddfb, 0x0, 0x1);
        gbc.writeMem(0x54d6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x953, gbc.sp());
        EXPECT(0x54d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0216
        gbc.setState(0xd00f, 0x153c, 0xcd20, 0xbf61, 0x9996, 0xcc8a, 0x0, 0x1);
        gbc.writeMem(0xd00f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x153c, gbc.sp());
        EXPECT(0xd011, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd00f));
        EXPECT(0x32, gbc.readMem(0xd010));
        // CB 32 0217
        gbc.setState(0xd865, 0xae81, 0xe0d0, 0x4c06, 0x1982, 0xf530, 0x0, 0x0);
        gbc.writeMem(0xd865, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xae81, gbc.sp());
        EXPECT(0xd867, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd865));
        EXPECT(0x32, gbc.readMem(0xd866));
        // CB 32 0218
        gbc.setState(0x96a2, 0xc30d, 0x66e0, 0xa375, 0xbf18, 0xc682, 0x0, 0x1);
        gbc.writeMem(0x96a2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xc30d, gbc.sp());
        EXPECT(0x96a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96a2));
        EXPECT(0x32, gbc.readMem(0x96a3));
        // CB 32 0219
        gbc.setState(0x88fc, 0xf13f, 0xfbc0, 0xfefa, 0x7a48, 0x7c29, 0x0, 0x0);
        gbc.writeMem(0x88fc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xf13f, gbc.sp());
        EXPECT(0x88fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88fc));
        EXPECT(0x32, gbc.readMem(0x88fd));
        // CB 32 021A
        gbc.setState(0x9ece, 0x8d61, 0xc110, 0x2be2, 0xc47a, 0x9459, 0x0, 0x0);
        gbc.writeMem(0x9ece, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x8d61, gbc.sp());
        EXPECT(0x9ed0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ece));
        EXPECT(0x32, gbc.readMem(0x9ecf));
        // CB 32 021B
        gbc.setState(0x817c, 0x2581, 0x65b0, 0x796a, 0x46c3, 0x75f8, 0x1, 0x1);
        gbc.writeMem(0x817c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x2581, gbc.sp());
        EXPECT(0x817e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x817c));
        EXPECT(0x32, gbc.readMem(0x817d));
        // CB 32 021C
        gbc.setState(0x64fd, 0x4052, 0x260, 0x1d43, 0xfc9c, 0x548e, 0x0, 0x0);
        gbc.writeMem(0x64fd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x4052, gbc.sp());
        EXPECT(0x64ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 021D
        gbc.setState(0x4971, 0x6db0, 0xab10, 0x86d5, 0x50ca, 0xb8a0, 0x0, 0x1);
        gbc.writeMem(0x4971, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x6db0, gbc.sp());
        EXPECT(0x4973, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 021E
        gbc.setState(0x662d, 0x284f, 0xd020, 0x6789, 0xb40, 0x9f50, 0x1, 0x1);
        gbc.writeMem(0x662d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x284f, gbc.sp());
        EXPECT(0x662f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 021F
        gbc.setState(0x4230, 0x40f3, 0x5b0, 0xd2ef, 0x6224, 0x51a8, 0x0, 0x0);
        gbc.writeMem(0x4230, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x40f3, gbc.sp());
        EXPECT(0x4232, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0220
        gbc.setState(0x3a0, 0xea9d, 0xf1b0, 0xa144, 0x3569, 0x49f3, 0x0, 0x0);
        gbc.writeMem(0x3a0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xea9d, gbc.sp());
        EXPECT(0x3a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0221
        gbc.setState(0x211a, 0x80d0, 0x31e0, 0xa887, 0x6ec4, 0x84f, 0x0, 0x0);
        gbc.writeMem(0x211a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x80d0, gbc.sp());
        EXPECT(0x211c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0222
        gbc.setState(0x183d, 0x32f, 0x62b0, 0xb77c, 0x8f8f, 0x491, 0x0, 0x1);
        gbc.writeMem(0x183d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x32f, gbc.sp());
        EXPECT(0x183f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0223
        gbc.setState(0xd745, 0xe3e7, 0x87e0, 0xeacb, 0x4127, 0xb258, 0x0, 0x0);
        gbc.writeMem(0xd745, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xe3e7, gbc.sp());
        EXPECT(0xd747, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd745));
        EXPECT(0x32, gbc.readMem(0xd746));
        // CB 32 0224
        gbc.setState(0x6a65, 0x560a, 0x17a0, 0x3fed, 0x2889, 0xa8a4, 0x1, 0x0);
        gbc.writeMem(0x6a65, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x560a, gbc.sp());
        EXPECT(0x6a67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0225
        gbc.setState(0x100f, 0xcfec, 0xdfe0, 0x2a78, 0x6a9e, 0xb35e, 0x1, 0x0);
        gbc.writeMem(0x100f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xcfec, gbc.sp());
        EXPECT(0x1011, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0227
        gbc.setState(0x3653, 0xc712, 0xe2f0, 0x198d, 0x60ef, 0xab6, 0x1, 0x0);
        gbc.writeMem(0x3653, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xc712, gbc.sp());
        EXPECT(0x3655, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0228
        gbc.setState(0x63ac, 0x8020, 0x410, 0xa030, 0xfcd, 0xe8db, 0x0, 0x1);
        gbc.writeMem(0x63ac, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x8020, gbc.sp());
        EXPECT(0x63ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0229
        gbc.setState(0x16c, 0x315e, 0x9e0, 0xb189, 0xd9c4, 0x616a, 0x0, 0x0);
        gbc.writeMem(0x16c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x315e, gbc.sp());
        EXPECT(0x16e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 022A
        gbc.setState(0x6c61, 0x37d8, 0xbba0, 0xac36, 0x474c, 0xacd1, 0x1, 0x0);
        gbc.writeMem(0x6c61, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x37d8, gbc.sp());
        EXPECT(0x6c63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 022B
        gbc.setState(0xb38a, 0x4ec4, 0xf530, 0x68fc, 0x5771, 0xa0a5, 0x1, 0x1);
        gbc.writeMem(0xb38a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x4ec4, gbc.sp());
        EXPECT(0xb38c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb38a));
        EXPECT(0x32, gbc.readMem(0xb38b));
        // CB 32 022C
        gbc.setState(0xd09f, 0xa319, 0x46d0, 0xd4bf, 0xce61, 0xd68f, 0x0, 0x0);
        gbc.writeMem(0xd09f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xa319, gbc.sp());
        EXPECT(0xd0a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd09f));
        EXPECT(0x32, gbc.readMem(0xd0a0));
        // CB 32 022D
        gbc.setState(0x4ad7, 0x65ea, 0xfa30, 0xd5b9, 0x9ffe, 0x82c0, 0x1, 0x0);
        gbc.writeMem(0x4ad7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x65ea, gbc.sp());
        EXPECT(0x4ad9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 022E
        gbc.setState(0x5637, 0x861f, 0xf520, 0x5b0e, 0xc10, 0x3471, 0x0, 0x0);
        gbc.writeMem(0x5637, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x861f, gbc.sp());
        EXPECT(0x5639, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 022F
        gbc.setState(0x270a, 0xe432, 0xcf00, 0x9fce, 0xbef0, 0x4647, 0x1, 0x0);
        gbc.writeMem(0x270a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xe432, gbc.sp());
        EXPECT(0x270c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0230
        gbc.setState(0x778e, 0x1479, 0xa410, 0xcd02, 0xd1eb, 0xad11, 0x0, 0x1);
        gbc.writeMem(0x778e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x1479, gbc.sp());
        EXPECT(0x7790, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0231
        gbc.setState(0x1f60, 0xfb81, 0xca0, 0xf636, 0x4808, 0x8b3e, 0x0, 0x0);
        gbc.writeMem(0x1f60, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xfb81, gbc.sp());
        EXPECT(0x1f62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0232
        gbc.setState(0x1642, 0x8b90, 0x3ff0, 0xf9e0, 0x2f7, 0xb502, 0x1, 0x1);
        gbc.writeMem(0x1642, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x8b90, gbc.sp());
        EXPECT(0x1644, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0233
        gbc.setState(0x2094, 0xa2d1, 0xd800, 0x22fc, 0xf790, 0x6af4, 0x0, 0x1);
        gbc.writeMem(0x2094, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xa2d1, gbc.sp());
        EXPECT(0x2096, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0234
        gbc.setState(0xeea2, 0xbbf3, 0xcf30, 0x1c8e, 0x7ea9, 0xf6ce, 0x1, 0x0);
        gbc.writeMem(0xeea2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xbbf3, gbc.sp());
        EXPECT(0xeea4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeea2));
        EXPECT(0x32, gbc.readMem(0xeea3));
        // CB 32 0235
        gbc.setState(0xe1f6, 0xfffa, 0x710, 0x6346, 0x43b2, 0x623f, 0x0, 0x1);
        gbc.writeMem(0xe1f6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xfffa, gbc.sp());
        EXPECT(0xe1f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1f6));
        EXPECT(0x32, gbc.readMem(0xe1f7));
        // CB 32 0236
        gbc.setState(0x2236, 0xde23, 0x33b0, 0xae2a, 0xf99c, 0x296f, 0x0, 0x0);
        gbc.writeMem(0x2236, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xde23, gbc.sp());
        EXPECT(0x2238, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0237
        gbc.setState(0x325b, 0x322d, 0x46f0, 0xb3f5, 0x9f38, 0xeb78, 0x1, 0x0);
        gbc.writeMem(0x325b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x322d, gbc.sp());
        EXPECT(0x325d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0238
        gbc.setState(0x6edb, 0x627, 0x3330, 0x7042, 0x5266, 0x83cf, 0x1, 0x0);
        gbc.writeMem(0x6edb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x627, gbc.sp());
        EXPECT(0x6edd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0239
        gbc.setState(0x1eab, 0x4e86, 0x7ae0, 0x7f93, 0xd550, 0x97e2, 0x1, 0x0);
        gbc.writeMem(0x1eab, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x4e86, gbc.sp());
        EXPECT(0x1ead, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 023A
        gbc.setState(0x2b51, 0x653, 0xf460, 0xad3d, 0x7418, 0xc6db, 0x1, 0x1);
        gbc.writeMem(0x2b51, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x653, gbc.sp());
        EXPECT(0x2b53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 023B
        gbc.setState(0xcbf7, 0xb70c, 0xd8d0, 0xb277, 0xb735, 0x85b2, 0x1, 0x0);
        gbc.writeMem(0xcbf7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xb70c, gbc.sp());
        EXPECT(0xcbf9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbf7));
        EXPECT(0x32, gbc.readMem(0xcbf8));
        // CB 32 023C
        gbc.setState(0x52c4, 0xaeba, 0x8630, 0xc740, 0xed51, 0x4644, 0x1, 0x0);
        gbc.writeMem(0x52c4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xaeba, gbc.sp());
        EXPECT(0x52c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 023D
        gbc.setState(0xc715, 0xf4f1, 0x2290, 0x61cf, 0x7120, 0xfbb5, 0x1, 0x1);
        gbc.writeMem(0xc715, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xf4f1, gbc.sp());
        EXPECT(0xc717, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc715));
        EXPECT(0x32, gbc.readMem(0xc716));
        // CB 32 023E
        gbc.setState(0xd383, 0x9b84, 0x2510, 0xe4f1, 0xd106, 0x7d9, 0x1, 0x1);
        gbc.writeMem(0xd383, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x9b84, gbc.sp());
        EXPECT(0xd385, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd383));
        EXPECT(0x32, gbc.readMem(0xd384));
        // CB 32 023F
        gbc.setState(0x57f4, 0x9cc8, 0xd9b0, 0x3c98, 0x6fc7, 0x88b6, 0x1, 0x1);
        gbc.writeMem(0x57f4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x9cc8, gbc.sp());
        EXPECT(0x57f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0240
        gbc.setState(0x81e9, 0x44e6, 0xcc10, 0xf985, 0xe009, 0x13c5, 0x1, 0x0);
        gbc.writeMem(0x81e9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x44e6, gbc.sp());
        EXPECT(0x81eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81e9));
        EXPECT(0x32, gbc.readMem(0x81ea));
        // CB 32 0242
        gbc.setState(0xeb76, 0x8770, 0x3500, 0xf8da, 0x6a37, 0x280f, 0x0, 0x1);
        gbc.writeMem(0xeb76, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x8770, gbc.sp());
        EXPECT(0xeb78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb76));
        EXPECT(0x32, gbc.readMem(0xeb77));
        // CB 32 0243
        gbc.setState(0xbdd9, 0x5dcc, 0xb040, 0x4cfa, 0x29e6, 0x400a, 0x1, 0x0);
        gbc.writeMem(0xbdd9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x5dcc, gbc.sp());
        EXPECT(0xbddb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdd9));
        EXPECT(0x32, gbc.readMem(0xbdda));
        // CB 32 0244
        gbc.setState(0x2291, 0xbe00, 0x2e80, 0xe97a, 0x10e9, 0xc1de, 0x1, 0x1);
        gbc.writeMem(0x2291, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xbe00, gbc.sp());
        EXPECT(0x2293, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0245
        gbc.setState(0xc20d, 0x1596, 0x51a0, 0x2dea, 0x910d, 0x556c, 0x0, 0x1);
        gbc.writeMem(0xc20d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x1596, gbc.sp());
        EXPECT(0xc20f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc20d));
        EXPECT(0x32, gbc.readMem(0xc20e));
        // CB 32 0246
        gbc.setState(0x9fc9, 0xfb6a, 0x80, 0x519c, 0xb598, 0x1907, 0x1, 0x0);
        gbc.writeMem(0x9fc9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xfb6a, gbc.sp());
        EXPECT(0x9fcb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fc9));
        EXPECT(0x32, gbc.readMem(0x9fca));
        // CB 32 0247
        gbc.setState(0xd44e, 0x2fef, 0xe5b0, 0x208a, 0xecfa, 0x5567, 0x1, 0x0);
        gbc.writeMem(0xd44e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x2fef, gbc.sp());
        EXPECT(0xd450, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd44e));
        EXPECT(0x32, gbc.readMem(0xd44f));
        // CB 32 0248
        gbc.setState(0x9e60, 0x84c2, 0x4120, 0xbb20, 0x7ea7, 0xbf48, 0x0, 0x1);
        gbc.writeMem(0x9e60, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x84c2, gbc.sp());
        EXPECT(0x9e62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e60));
        EXPECT(0x32, gbc.readMem(0x9e61));
        // CB 32 0249
        gbc.setState(0x6d63, 0xe1cb, 0xb3b0, 0xd1c9, 0x3c41, 0xf476, 0x0, 0x0);
        gbc.writeMem(0x6d63, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xe1cb, gbc.sp());
        EXPECT(0x6d65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 024A
        gbc.setState(0x43eb, 0x6bc4, 0xa670, 0x716c, 0x413a, 0x5b23, 0x0, 0x0);
        gbc.writeMem(0x43eb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x6bc4, gbc.sp());
        EXPECT(0x43ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 024B
        gbc.setState(0x17a3, 0x69f9, 0x5ef0, 0xa347, 0x9a6a, 0xc348, 0x1, 0x0);
        gbc.writeMem(0x17a3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x69f9, gbc.sp());
        EXPECT(0x17a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 024C
        gbc.setState(0x9f4c, 0xa261, 0xe50, 0x362e, 0xc9, 0x81fd, 0x1, 0x1);
        gbc.writeMem(0x9f4c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xa261, gbc.sp());
        EXPECT(0x9f4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f4c));
        EXPECT(0x32, gbc.readMem(0x9f4d));
        // CB 32 024D
        gbc.setState(0x6308, 0xeb02, 0x38e0, 0x9e60, 0x278d, 0xbf3b, 0x1, 0x1);
        gbc.writeMem(0x6308, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xeb02, gbc.sp());
        EXPECT(0x630a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 024E
        gbc.setState(0x704b, 0x24e3, 0xb5c0, 0x7c6a, 0x8c94, 0x4c11, 0x1, 0x0);
        gbc.writeMem(0x704b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x24e3, gbc.sp());
        EXPECT(0x704d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 024F
        gbc.setState(0xc848, 0xa949, 0xeea0, 0xf29a, 0x7ffa, 0x9f9b, 0x0, 0x1);
        gbc.writeMem(0xc848, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xa949, gbc.sp());
        EXPECT(0xc84a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc848));
        EXPECT(0x32, gbc.readMem(0xc849));
        // CB 32 0250
        gbc.setState(0xb003, 0xce42, 0xa320, 0x210d, 0x826d, 0xd068, 0x0, 0x1);
        gbc.writeMem(0xb003, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xce42, gbc.sp());
        EXPECT(0xb005, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb003));
        EXPECT(0x32, gbc.readMem(0xb004));
        // CB 32 0251
        gbc.setState(0x457f, 0x32cf, 0x1900, 0x28d0, 0xcd86, 0xd503, 0x1, 0x1);
        gbc.writeMem(0x457f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x32cf, gbc.sp());
        EXPECT(0x4581, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0252
        gbc.setState(0xb7d8, 0x35ef, 0x1460, 0x254b, 0x3662, 0xbfe9, 0x0, 0x1);
        gbc.writeMem(0xb7d8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x35ef, gbc.sp());
        EXPECT(0xb7da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7d8));
        EXPECT(0x32, gbc.readMem(0xb7d9));
        // CB 32 0253
        gbc.setState(0xbaa5, 0xd5cd, 0xea50, 0x8afc, 0x4a36, 0x5002, 0x0, 0x1);
        gbc.writeMem(0xbaa5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xd5cd, gbc.sp());
        EXPECT(0xbaa7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaa5));
        EXPECT(0x32, gbc.readMem(0xbaa6));
        // CB 32 0254
        gbc.setState(0x711c, 0xe5a6, 0xa940, 0xbd65, 0xba66, 0x418a, 0x0, 0x1);
        gbc.writeMem(0x711c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xe5a6, gbc.sp());
        EXPECT(0x711e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0255
        gbc.setState(0x61c1, 0x2020, 0x7c10, 0x923e, 0x2855, 0x6995, 0x0, 0x1);
        gbc.writeMem(0x61c1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x2020, gbc.sp());
        EXPECT(0x61c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0256
        gbc.setState(0x2826, 0x8141, 0x2730, 0xb575, 0xc511, 0xd45c, 0x1, 0x1);
        gbc.writeMem(0x2826, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x8141, gbc.sp());
        EXPECT(0x2828, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0257
        gbc.setState(0x1d0, 0x4821, 0x3930, 0x4835, 0x6f71, 0xcafc, 0x0, 0x1);
        gbc.writeMem(0x1d0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x4821, gbc.sp());
        EXPECT(0x1d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0258
        gbc.setState(0x5e61, 0xcabb, 0xe3c0, 0x3f23, 0xa27b, 0x3cd1, 0x0, 0x0);
        gbc.writeMem(0x5e61, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xcabb, gbc.sp());
        EXPECT(0x5e63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 025A
        gbc.setState(0xb9aa, 0xba2f, 0x1ab0, 0xf05b, 0xc349, 0x72d5, 0x1, 0x0);
        gbc.writeMem(0xb9aa, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xba2f, gbc.sp());
        EXPECT(0xb9ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9aa));
        EXPECT(0x32, gbc.readMem(0xb9ab));
        // CB 32 025B
        gbc.setState(0xd0a3, 0xf705, 0x51b0, 0x957c, 0xa77d, 0x7527, 0x0, 0x1);
        gbc.writeMem(0xd0a3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xf705, gbc.sp());
        EXPECT(0xd0a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0a3));
        EXPECT(0x32, gbc.readMem(0xd0a4));
        // CB 32 025C
        gbc.setState(0x12a4, 0xf50e, 0xd90, 0x4852, 0x7c84, 0xaa53, 0x1, 0x0);
        gbc.writeMem(0x12a4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xf50e, gbc.sp());
        EXPECT(0x12a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 025D
        gbc.setState(0x8f35, 0x1fb8, 0xb9a0, 0x687b, 0x388d, 0x666c, 0x0, 0x0);
        gbc.writeMem(0x8f35, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x1fb8, gbc.sp());
        EXPECT(0x8f37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f35));
        EXPECT(0x32, gbc.readMem(0x8f36));
        // CB 32 025F
        gbc.setState(0x7327, 0xf738, 0xd380, 0x1467, 0x50e9, 0xa747, 0x1, 0x0);
        gbc.writeMem(0x7327, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xf738, gbc.sp());
        EXPECT(0x7329, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0261
        gbc.setState(0x99ed, 0xbb2b, 0x2a60, 0xe4fb, 0x2ebc, 0x905a, 0x0, 0x1);
        gbc.writeMem(0x99ed, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xbb2b, gbc.sp());
        EXPECT(0x99ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99ed));
        EXPECT(0x32, gbc.readMem(0x99ee));
        // CB 32 0262
        gbc.setState(0x8d7d, 0x126, 0x79c0, 0xd161, 0x957f, 0x61d5, 0x0, 0x0);
        gbc.writeMem(0x8d7d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x126, gbc.sp());
        EXPECT(0x8d7f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d7d));
        EXPECT(0x32, gbc.readMem(0x8d7e));
        // CB 32 0263
        gbc.setState(0x6a83, 0xbc98, 0x8ef0, 0xb4cc, 0x8069, 0xf955, 0x0, 0x1);
        gbc.writeMem(0x6a83, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xbc98, gbc.sp());
        EXPECT(0x6a85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0264
        gbc.setState(0x2b25, 0xe2e2, 0x8010, 0xe595, 0x9de, 0xe293, 0x1, 0x0);
        gbc.writeMem(0x2b25, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xe2e2, gbc.sp());
        EXPECT(0x2b27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0265
        gbc.setState(0xc330, 0x8076, 0xd430, 0x3edc, 0xf2f3, 0x7aba, 0x1, 0x1);
        gbc.writeMem(0xc330, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x8076, gbc.sp());
        EXPECT(0xc332, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc330));
        EXPECT(0x32, gbc.readMem(0xc331));
        // CB 32 0266
        gbc.setState(0x98b0, 0x82d5, 0x8ea0, 0xc7f, 0x5fc3, 0xc5c6, 0x1, 0x0);
        gbc.writeMem(0x98b0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x82d5, gbc.sp());
        EXPECT(0x98b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98b0));
        EXPECT(0x32, gbc.readMem(0x98b1));
        // CB 32 0267
        gbc.setState(0x99c0, 0xcdc1, 0x1870, 0xa3f0, 0x8180, 0xff32, 0x0, 0x0);
        gbc.writeMem(0x99c0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xcdc1, gbc.sp());
        EXPECT(0x99c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99c0));
        EXPECT(0x32, gbc.readMem(0x99c1));
        // CB 32 0268
        gbc.setState(0xbf0e, 0x5051, 0x4ea0, 0x65b0, 0x76cd, 0x2330, 0x1, 0x0);
        gbc.writeMem(0xbf0e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x5051, gbc.sp());
        EXPECT(0xbf10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf0e));
        EXPECT(0x32, gbc.readMem(0xbf0f));
        // CB 32 0269
        gbc.setState(0x4271, 0xb69f, 0xf6c0, 0xd1e1, 0x8d17, 0xd4dc, 0x0, 0x0);
        gbc.writeMem(0x4271, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xb69f, gbc.sp());
        EXPECT(0x4273, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 026A
        gbc.setState(0x1244, 0x6b65, 0x9360, 0x5854, 0xb577, 0xe1e, 0x1, 0x0);
        gbc.writeMem(0x1244, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x6b65, gbc.sp());
        EXPECT(0x1246, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 026B
        gbc.setState(0xd7a1, 0xbea8, 0xae60, 0x5c9a, 0xa03b, 0x450c, 0x1, 0x1);
        gbc.writeMem(0xd7a1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xbea8, gbc.sp());
        EXPECT(0xd7a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7a1));
        EXPECT(0x32, gbc.readMem(0xd7a2));
        // CB 32 026C
        gbc.setState(0x68d7, 0x613d, 0xc190, 0x5109, 0xf2df, 0xe444, 0x1, 0x0);
        gbc.writeMem(0x68d7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x613d, gbc.sp());
        EXPECT(0x68d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 026D
        gbc.setState(0x9253, 0xb5bc, 0xf520, 0xb86, 0x3407, 0x5e16, 0x0, 0x1);
        gbc.writeMem(0x9253, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xb5bc, gbc.sp());
        EXPECT(0x9255, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9253));
        EXPECT(0x32, gbc.readMem(0x9254));
        // CB 32 026E
        gbc.setState(0xda1e, 0x44b1, 0xde90, 0x7dbb, 0xabd9, 0xaebb, 0x1, 0x1);
        gbc.writeMem(0xda1e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x44b1, gbc.sp());
        EXPECT(0xda20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda1e));
        EXPECT(0x32, gbc.readMem(0xda1f));
        // CB 32 026F
        gbc.setState(0xa300, 0xb6be, 0x1b20, 0x26c4, 0x4757, 0xb86f, 0x1, 0x1);
        gbc.writeMem(0xa300, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xb6be, gbc.sp());
        EXPECT(0xa302, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa300));
        EXPECT(0x32, gbc.readMem(0xa301));
        // CB 32 0270
        gbc.setState(0xb2df, 0xccd2, 0x2be0, 0x1604, 0xc8f0, 0xfc96, 0x1, 0x1);
        gbc.writeMem(0xb2df, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xccd2, gbc.sp());
        EXPECT(0xb2e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2df));
        EXPECT(0x32, gbc.readMem(0xb2e0));
        // CB 32 0271
        gbc.setState(0x183f, 0x1897, 0xe080, 0x1190, 0x99a, 0xfe69, 0x1, 0x0);
        gbc.writeMem(0x183f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x1897, gbc.sp());
        EXPECT(0x1841, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0272
        gbc.setState(0xd7a3, 0x12ac, 0x1680, 0x9e1, 0x1ec4, 0xcb1d, 0x1, 0x1);
        gbc.writeMem(0xd7a3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x12ac, gbc.sp());
        EXPECT(0xd7a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7a3));
        EXPECT(0x32, gbc.readMem(0xd7a4));
        // CB 32 0274
        gbc.setState(0xdd8a, 0xd7d0, 0x82a0, 0xbd0f, 0xe63e, 0x1a48, 0x0, 0x0);
        gbc.writeMem(0xdd8a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xd7d0, gbc.sp());
        EXPECT(0xdd8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd8a));
        EXPECT(0x32, gbc.readMem(0xdd8b));
        // CB 32 0275
        gbc.setState(0xcabc, 0x7d8b, 0xf5d0, 0x7e62, 0x6f07, 0xc0b2, 0x1, 0x1);
        gbc.writeMem(0xcabc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x7d8b, gbc.sp());
        EXPECT(0xcabe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcabc));
        EXPECT(0x32, gbc.readMem(0xcabd));
        // CB 32 0276
        gbc.setState(0x6a10, 0x53b3, 0xc1c0, 0x895d, 0xd65d, 0xd065, 0x1, 0x1);
        gbc.writeMem(0x6a10, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x53b3, gbc.sp());
        EXPECT(0x6a12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0277
        gbc.setState(0xcaeb, 0x4d11, 0x4ab0, 0x75, 0x3f21, 0x2468, 0x0, 0x1);
        gbc.writeMem(0xcaeb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x4d11, gbc.sp());
        EXPECT(0xcaed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaeb));
        EXPECT(0x32, gbc.readMem(0xcaec));
        // CB 32 0278
        gbc.setState(0x44d2, 0x93d1, 0x61a0, 0xc6fd, 0xa272, 0x7c5d, 0x1, 0x0);
        gbc.writeMem(0x44d2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x93d1, gbc.sp());
        EXPECT(0x44d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0279
        gbc.setState(0xb654, 0xa08d, 0xc210, 0x1ee4, 0xeecf, 0x4ca1, 0x0, 0x0);
        gbc.writeMem(0xb654, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xa08d, gbc.sp());
        EXPECT(0xb656, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb654));
        EXPECT(0x32, gbc.readMem(0xb655));
        // CB 32 027A
        gbc.setState(0x1c9, 0x7d7f, 0x1e40, 0x4bea, 0x1b5e, 0x3fa9, 0x0, 0x0);
        gbc.writeMem(0x1c9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x7d7f, gbc.sp());
        EXPECT(0x1cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 027B
        gbc.setState(0xa482, 0xf450, 0xeac0, 0xeec2, 0xd4ec, 0xddfa, 0x1, 0x0);
        gbc.writeMem(0xa482, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xf450, gbc.sp());
        EXPECT(0xa484, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa482));
        EXPECT(0x32, gbc.readMem(0xa483));
        // CB 32 027C
        gbc.setState(0x8d94, 0x1359, 0xe630, 0x59b2, 0xf1d3, 0x1ae0, 0x0, 0x0);
        gbc.writeMem(0x8d94, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x1359, gbc.sp());
        EXPECT(0x8d96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d94));
        EXPECT(0x32, gbc.readMem(0x8d95));
        // CB 32 027D
        gbc.setState(0x55a7, 0x697f, 0xc130, 0x940, 0x6af3, 0xb9da, 0x0, 0x1);
        gbc.writeMem(0x55a7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x697f, gbc.sp());
        EXPECT(0x55a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 027E
        gbc.setState(0xdc95, 0x5a9f, 0x2310, 0x23fc, 0x9754, 0x3aba, 0x0, 0x1);
        gbc.writeMem(0xdc95, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x5a9f, gbc.sp());
        EXPECT(0xdc97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc95));
        EXPECT(0x32, gbc.readMem(0xdc96));
        // CB 32 027F
        gbc.setState(0x11a9, 0x51d5, 0x3990, 0xb078, 0x3709, 0xba26, 0x0, 0x1);
        gbc.writeMem(0x11a9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x51d5, gbc.sp());
        EXPECT(0x11ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0280
        gbc.setState(0xe048, 0x5d8, 0x1880, 0x5d93, 0x606b, 0x43f2, 0x1, 0x0);
        gbc.writeMem(0xe048, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x5d8, gbc.sp());
        EXPECT(0xe04a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe048));
        EXPECT(0x32, gbc.readMem(0xe049));
        // CB 32 0281
        gbc.setState(0x9c8e, 0xeb48, 0x70b0, 0x59e5, 0x74b6, 0xbe44, 0x1, 0x1);
        gbc.writeMem(0x9c8e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xeb48, gbc.sp());
        EXPECT(0x9c90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c8e));
        EXPECT(0x32, gbc.readMem(0x9c8f));
        // CB 32 0282
        gbc.setState(0xcfd3, 0xdcb3, 0x6870, 0xb169, 0xde7f, 0xacc9, 0x1, 0x1);
        gbc.writeMem(0xcfd3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xdcb3, gbc.sp());
        EXPECT(0xcfd5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfd3));
        EXPECT(0x32, gbc.readMem(0xcfd4));
        // CB 32 0283
        gbc.setState(0xe96d, 0x9cfd, 0x2b70, 0xbc33, 0xf6b4, 0xa1f3, 0x1, 0x1);
        gbc.writeMem(0xe96d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x9cfd, gbc.sp());
        EXPECT(0xe96f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe96d));
        EXPECT(0x32, gbc.readMem(0xe96e));
        // CB 32 0284
        gbc.setState(0xdc39, 0x5f87, 0x48f0, 0x5a27, 0x8328, 0xfbf5, 0x0, 0x1);
        gbc.writeMem(0xdc39, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x5f87, gbc.sp());
        EXPECT(0xdc3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc39));
        EXPECT(0x32, gbc.readMem(0xdc3a));
        // CB 32 0285
        gbc.setState(0x2e6e, 0x6e87, 0xa9a0, 0x76bd, 0x99ba, 0x8b16, 0x0, 0x0);
        gbc.writeMem(0x2e6e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x6e87, gbc.sp());
        EXPECT(0x2e70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0286
        gbc.setState(0x3c6a, 0x6e46, 0x790, 0xd826, 0x7340, 0xf8c6, 0x0, 0x1);
        gbc.writeMem(0x3c6a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x6e46, gbc.sp());
        EXPECT(0x3c6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0287
        gbc.setState(0xe8a1, 0xce46, 0xe810, 0x9ac9, 0x3dbd, 0x84b, 0x0, 0x1);
        gbc.writeMem(0xe8a1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xce46, gbc.sp());
        EXPECT(0xe8a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8a1));
        EXPECT(0x32, gbc.readMem(0xe8a2));
        // CB 32 0288
        gbc.setState(0x42a5, 0xd5e1, 0x8b20, 0x1c05, 0x117e, 0xbf7a, 0x1, 0x1);
        gbc.writeMem(0x42a5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xd5e1, gbc.sp());
        EXPECT(0x42a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0289
        gbc.setState(0xa157, 0x86f0, 0xd160, 0x3399, 0x4e95, 0x596e, 0x1, 0x1);
        gbc.writeMem(0xa157, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x86f0, gbc.sp());
        EXPECT(0xa159, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa157));
        EXPECT(0x32, gbc.readMem(0xa158));
        // CB 32 028A
        gbc.setState(0xe945, 0x33e, 0x32a0, 0x51f1, 0xd7ac, 0xbe0, 0x0, 0x1);
        gbc.writeMem(0xe945, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x33e, gbc.sp());
        EXPECT(0xe947, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe945));
        EXPECT(0x32, gbc.readMem(0xe946));
        // CB 32 028C
        gbc.setState(0x6ce3, 0xa455, 0xfb90, 0x80f2, 0x41a8, 0x5841, 0x1, 0x1);
        gbc.writeMem(0x6ce3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xa455, gbc.sp());
        EXPECT(0x6ce5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 028D
        gbc.setState(0x447b, 0x339e, 0x8a00, 0xb3fc, 0xd87c, 0x28c2, 0x0, 0x0);
        gbc.writeMem(0x447b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x339e, gbc.sp());
        EXPECT(0x447d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 028E
        gbc.setState(0x58c6, 0xdec, 0x4780, 0x1c2c, 0x15dd, 0xdaab, 0x1, 0x1);
        gbc.writeMem(0x58c6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xdec, gbc.sp());
        EXPECT(0x58c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0290
        gbc.setState(0xe484, 0x10bc, 0x9cd0, 0x61dc, 0xb5d, 0x59aa, 0x1, 0x1);
        gbc.writeMem(0xe484, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x10bc, gbc.sp());
        EXPECT(0xe486, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe484));
        EXPECT(0x32, gbc.readMem(0xe485));
        // CB 32 0291
        gbc.setState(0xb6ab, 0x34a8, 0x1ad0, 0x5f6d, 0xcacf, 0x99d, 0x1, 0x0);
        gbc.writeMem(0xb6ab, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x34a8, gbc.sp());
        EXPECT(0xb6ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6ab));
        EXPECT(0x32, gbc.readMem(0xb6ac));
        // CB 32 0292
        gbc.setState(0x137b, 0xc65b, 0x64b0, 0x6dbe, 0xcb5b, 0xbdd, 0x0, 0x1);
        gbc.writeMem(0x137b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xc65b, gbc.sp());
        EXPECT(0x137d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0293
        gbc.setState(0x4aee, 0xab4d, 0x3ff0, 0x9f63, 0x4911, 0x6dc6, 0x0, 0x0);
        gbc.writeMem(0x4aee, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xab4d, gbc.sp());
        EXPECT(0x4af0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0294
        gbc.setState(0x2b1e, 0x49ba, 0x9a90, 0xa3e3, 0x31b8, 0x187a, 0x0, 0x1);
        gbc.writeMem(0x2b1e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x49ba, gbc.sp());
        EXPECT(0x2b20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0295
        gbc.setState(0x510f, 0x9e95, 0x9960, 0x56bc, 0x7cc0, 0xdde4, 0x1, 0x1);
        gbc.writeMem(0x510f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x9e95, gbc.sp());
        EXPECT(0x5111, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0296
        gbc.setState(0x32ce, 0x25a0, 0xc2b0, 0xac02, 0xe63c, 0x2724, 0x0, 0x1);
        gbc.writeMem(0x32ce, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x25a0, gbc.sp());
        EXPECT(0x32d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0297
        gbc.setState(0xdf71, 0xf77c, 0x15c0, 0x47d2, 0xb722, 0xb1f3, 0x1, 0x0);
        gbc.writeMem(0xdf71, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xf77c, gbc.sp());
        EXPECT(0xdf73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf71));
        EXPECT(0x32, gbc.readMem(0xdf72));
        // CB 32 0298
        gbc.setState(0x185a, 0x7cf8, 0xf4f0, 0xc942, 0xa73c, 0x8214, 0x1, 0x1);
        gbc.writeMem(0x185a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x7cf8, gbc.sp());
        EXPECT(0x185c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0299
        gbc.setState(0x590, 0x617b, 0x2130, 0x36b, 0x820c, 0x5544, 0x1, 0x0);
        gbc.writeMem(0x590, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x617b, gbc.sp());
        EXPECT(0x592, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 029A
        gbc.setState(0x9cb9, 0x592f, 0xb570, 0xa6f1, 0x967b, 0xce61, 0x0, 0x1);
        gbc.writeMem(0x9cb9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x592f, gbc.sp());
        EXPECT(0x9cbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cb9));
        EXPECT(0x32, gbc.readMem(0x9cba));
        // CB 32 029B
        gbc.setState(0x4ec5, 0xccf9, 0x21d0, 0x1e0e, 0x7ed, 0x9245, 0x1, 0x0);
        gbc.writeMem(0x4ec5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xccf9, gbc.sp());
        EXPECT(0x4ec7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 029C
        gbc.setState(0x4319, 0x394a, 0x1aa0, 0x43dc, 0x145b, 0x4bd7, 0x0, 0x0);
        gbc.writeMem(0x4319, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x394a, gbc.sp());
        EXPECT(0x431b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 029D
        gbc.setState(0x751a, 0x1c2c, 0xa0b0, 0x28dd, 0x89f, 0xd169, 0x1, 0x1);
        gbc.writeMem(0x751a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x1c2c, gbc.sp());
        EXPECT(0x751c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 029E
        gbc.setState(0xaec8, 0xd5b7, 0x3fa0, 0xdd37, 0x88bc, 0xc373, 0x1, 0x0);
        gbc.writeMem(0xaec8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xd5b7, gbc.sp());
        EXPECT(0xaeca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaec8));
        EXPECT(0x32, gbc.readMem(0xaec9));
        // CB 32 029F
        gbc.setState(0x41d3, 0x59b0, 0xdde0, 0x8a01, 0xa7c2, 0xe315, 0x0, 0x0);
        gbc.writeMem(0x41d3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x59b0, gbc.sp());
        EXPECT(0x41d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02A0
        gbc.setState(0x29f9, 0x8302, 0xc7d0, 0xc02d, 0xb995, 0xb4c7, 0x1, 0x0);
        gbc.writeMem(0x29f9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x8302, gbc.sp());
        EXPECT(0x29fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02A1
        gbc.setState(0x241a, 0xcde0, 0x2b50, 0xb15d, 0x2e57, 0xdac5, 0x1, 0x0);
        gbc.writeMem(0x241a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xcde0, gbc.sp());
        EXPECT(0x241c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02A2
        gbc.setState(0xd1c2, 0x177d, 0x97a0, 0xf627, 0xdf72, 0x45f1, 0x1, 0x0);
        gbc.writeMem(0xd1c2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x177d, gbc.sp());
        EXPECT(0xd1c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1c2));
        EXPECT(0x32, gbc.readMem(0xd1c3));
        // CB 32 02A4
        gbc.setState(0xc1be, 0x8e54, 0x9890, 0xfd4a, 0xb1c5, 0x44d2, 0x1, 0x1);
        gbc.writeMem(0xc1be, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x8e54, gbc.sp());
        EXPECT(0xc1c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1be));
        EXPECT(0x32, gbc.readMem(0xc1bf));
        // CB 32 02A5
        gbc.setState(0xd6cc, 0x1465, 0x4890, 0x5ea7, 0xb12d, 0x18cc, 0x0, 0x0);
        gbc.writeMem(0xd6cc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x1465, gbc.sp());
        EXPECT(0xd6ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6cc));
        EXPECT(0x32, gbc.readMem(0xd6cd));
        // CB 32 02A6
        gbc.setState(0x78b5, 0x354a, 0x9830, 0x8f9, 0x3d40, 0x5f5, 0x0, 0x0);
        gbc.writeMem(0x78b5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x354a, gbc.sp());
        EXPECT(0x78b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02A7
        gbc.setState(0x7f35, 0x2e30, 0xaa0, 0x82bf, 0xb690, 0xd362, 0x1, 0x1);
        gbc.writeMem(0x7f35, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x2e30, gbc.sp());
        EXPECT(0x7f37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02A9
        gbc.setState(0x104d, 0x6106, 0xdd80, 0x3291, 0xb0ae, 0x464c, 0x0, 0x0);
        gbc.writeMem(0x104d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x6106, gbc.sp());
        EXPECT(0x104f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02AA
        gbc.setState(0xbf87, 0xaa6c, 0xc640, 0xfbe5, 0xeaa9, 0x2ec9, 0x1, 0x1);
        gbc.writeMem(0xbf87, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xaa6c, gbc.sp());
        EXPECT(0xbf89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf87));
        EXPECT(0x32, gbc.readMem(0xbf88));
        // CB 32 02AB
        gbc.setState(0x3c3f, 0x10cf, 0xa580, 0xf65c, 0xeb75, 0x3e99, 0x1, 0x1);
        gbc.writeMem(0x3c3f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x10cf, gbc.sp());
        EXPECT(0x3c41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02AC
        gbc.setState(0x935b, 0x3541, 0x6be0, 0x2d40, 0x59ad, 0x5d98, 0x1, 0x1);
        gbc.writeMem(0x935b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x3541, gbc.sp());
        EXPECT(0x935d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x935b));
        EXPECT(0x32, gbc.readMem(0x935c));
        // CB 32 02AD
        gbc.setState(0x86d3, 0x54f3, 0x7090, 0xf142, 0x1a9c, 0xad4b, 0x1, 0x1);
        gbc.writeMem(0x86d3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x54f3, gbc.sp());
        EXPECT(0x86d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86d3));
        EXPECT(0x32, gbc.readMem(0x86d4));
        // CB 32 02AE
        gbc.setState(0x2d01, 0x404, 0xa1e0, 0xeac8, 0xf41a, 0x6251, 0x1, 0x1);
        gbc.writeMem(0x2d01, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x404, gbc.sp());
        EXPECT(0x2d03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02AF
        gbc.setState(0xa626, 0xa1a5, 0x8cc0, 0xb83b, 0x8001, 0xa870, 0x1, 0x1);
        gbc.writeMem(0xa626, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xa1a5, gbc.sp());
        EXPECT(0xa628, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa626));
        EXPECT(0x32, gbc.readMem(0xa627));
        // CB 32 02B0
        gbc.setState(0x241e, 0xa5a7, 0x42e0, 0xc7a7, 0x67d5, 0x958a, 0x0, 0x1);
        gbc.writeMem(0x241e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xa5a7, gbc.sp());
        EXPECT(0x2420, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02B1
        gbc.setState(0xc1d6, 0x9826, 0x360, 0x4e45, 0x6fa, 0x1190, 0x1, 0x0);
        gbc.writeMem(0xc1d6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x9826, gbc.sp());
        EXPECT(0xc1d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1d6));
        EXPECT(0x32, gbc.readMem(0xc1d7));
        // CB 32 02B2
        gbc.setState(0x1829, 0xcbc8, 0x4b40, 0x6005, 0xc2ae, 0x74b0, 0x0, 0x0);
        gbc.writeMem(0x1829, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xcbc8, gbc.sp());
        EXPECT(0x182b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02B3
        gbc.setState(0xbe04, 0x7850, 0xd1f0, 0xce03, 0x7f9d, 0xe5a0, 0x1, 0x0);
        gbc.writeMem(0xbe04, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x7850, gbc.sp());
        EXPECT(0xbe06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe04));
        EXPECT(0x32, gbc.readMem(0xbe05));
        // CB 32 02B4
        gbc.setState(0x3cfd, 0xa45a, 0x4600, 0x2183, 0x6952, 0x9a20, 0x1, 0x0);
        gbc.writeMem(0x3cfd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xa45a, gbc.sp());
        EXPECT(0x3cff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02B5
        gbc.setState(0xc42c, 0x6d93, 0xcf40, 0xee8e, 0x837c, 0x28f, 0x1, 0x0);
        gbc.writeMem(0xc42c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x6d93, gbc.sp());
        EXPECT(0xc42e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc42c));
        EXPECT(0x32, gbc.readMem(0xc42d));
        // CB 32 02B6
        gbc.setState(0x685, 0x580c, 0xbba0, 0x11d0, 0xc945, 0x97d8, 0x0, 0x0);
        gbc.writeMem(0x685, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x580c, gbc.sp());
        EXPECT(0x687, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02B7
        gbc.setState(0xd998, 0x6edf, 0x2990, 0x1f91, 0xedbf, 0x25b3, 0x1, 0x0);
        gbc.writeMem(0xd998, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x6edf, gbc.sp());
        EXPECT(0xd99a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd998));
        EXPECT(0x32, gbc.readMem(0xd999));
        // CB 32 02B8
        gbc.setState(0xb45b, 0xbac7, 0x4830, 0x7f24, 0xc3b3, 0xe90e, 0x0, 0x1);
        gbc.writeMem(0xb45b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xbac7, gbc.sp());
        EXPECT(0xb45d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb45b));
        EXPECT(0x32, gbc.readMem(0xb45c));
        // CB 32 02B9
        gbc.setState(0x66c8, 0xff53, 0x1dc0, 0x28c6, 0x7532, 0x9a62, 0x1, 0x1);
        gbc.writeMem(0x66c8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xff53, gbc.sp());
        EXPECT(0x66ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02BA
        gbc.setState(0xdba0, 0xd19a, 0xff70, 0x177d, 0x4d76, 0xdf45, 0x1, 0x1);
        gbc.writeMem(0xdba0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xd19a, gbc.sp());
        EXPECT(0xdba2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdba0));
        EXPECT(0x32, gbc.readMem(0xdba1));
        // CB 32 02BB
        gbc.setState(0x7cb0, 0x8ca, 0xbc80, 0x350b, 0x5511, 0x5fe3, 0x0, 0x1);
        gbc.writeMem(0x7cb0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x8ca, gbc.sp());
        EXPECT(0x7cb2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02BD
        gbc.setState(0x18a5, 0x1794, 0xed50, 0x23dc, 0x1cd4, 0xa020, 0x1, 0x0);
        gbc.writeMem(0x18a5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x1794, gbc.sp());
        EXPECT(0x18a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02BE
        gbc.setState(0x6f8a, 0x62a2, 0x2c50, 0xe8e6, 0xac74, 0x29bd, 0x1, 0x0);
        gbc.writeMem(0x6f8a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x62a2, gbc.sp());
        EXPECT(0x6f8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02BF
        gbc.setState(0xcbe7, 0xb572, 0xd440, 0x12e7, 0x23fa, 0x655, 0x1, 0x0);
        gbc.writeMem(0xcbe7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xb572, gbc.sp());
        EXPECT(0xcbe9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbe7));
        EXPECT(0x32, gbc.readMem(0xcbe8));
        // CB 32 02C0
        gbc.setState(0x6632, 0x92ec, 0x86a0, 0x973c, 0xdb29, 0xad69, 0x0, 0x0);
        gbc.writeMem(0x6632, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x92ec, gbc.sp());
        EXPECT(0x6634, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02C1
        gbc.setState(0x326, 0xa852, 0xb0d0, 0xe4bb, 0x4dd, 0xdde7, 0x0, 0x0);
        gbc.writeMem(0x326, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xa852, gbc.sp());
        EXPECT(0x328, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02C2
        gbc.setState(0x533d, 0xfff2, 0x9a00, 0x4ef2, 0x836c, 0x56ad, 0x0, 0x1);
        gbc.writeMem(0x533d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xfff2, gbc.sp());
        EXPECT(0x533f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02C3
        gbc.setState(0xe792, 0xe22c, 0x69d0, 0x7b74, 0xee04, 0x97c6, 0x1, 0x0);
        gbc.writeMem(0xe792, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xe22c, gbc.sp());
        EXPECT(0xe794, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe792));
        EXPECT(0x32, gbc.readMem(0xe793));
        // CB 32 02C4
        gbc.setState(0xb0cb, 0x1721, 0xf0, 0xea82, 0xd77c, 0xee6c, 0x0, 0x1);
        gbc.writeMem(0xb0cb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x1721, gbc.sp());
        EXPECT(0xb0cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0cb));
        EXPECT(0x32, gbc.readMem(0xb0cc));
        // CB 32 02C5
        gbc.setState(0x98fe, 0x6f23, 0x5de0, 0x33ce, 0x11d1, 0xaa57, 0x0, 0x1);
        gbc.writeMem(0x98fe, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x6f23, gbc.sp());
        EXPECT(0x9900, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98fe));
        EXPECT(0x32, gbc.readMem(0x98ff));
        // CB 32 02C6
        gbc.setState(0x5fa, 0x7cf5, 0x7470, 0x6fd9, 0x2848, 0x96ca, 0x1, 0x0);
        gbc.writeMem(0x5fa, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x7cf5, gbc.sp());
        EXPECT(0x5fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02C8
        gbc.setState(0x8516, 0xc57f, 0x6320, 0x45, 0x9a12, 0x8195, 0x1, 0x0);
        gbc.writeMem(0x8516, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xc57f, gbc.sp());
        EXPECT(0x8518, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8516));
        EXPECT(0x32, gbc.readMem(0x8517));
        // CB 32 02C9
        gbc.setState(0x77bf, 0xc28b, 0xf1f0, 0x7a7b, 0x991d, 0xe196, 0x1, 0x1);
        gbc.writeMem(0x77bf, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xc28b, gbc.sp());
        EXPECT(0x77c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02CA
        gbc.setState(0x3dc0, 0x953f, 0xbe30, 0xa4be, 0x9c56, 0x5bd7, 0x1, 0x1);
        gbc.writeMem(0x3dc0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x953f, gbc.sp());
        EXPECT(0x3dc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02CB
        gbc.setState(0x418c, 0x1410, 0xf1a0, 0x901e, 0x59f7, 0x248f, 0x1, 0x0);
        gbc.writeMem(0x418c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x1410, gbc.sp());
        EXPECT(0x418e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02CC
        gbc.setState(0x7954, 0x103d, 0x71d0, 0xdb3d, 0xb26b, 0x5ccf, 0x0, 0x1);
        gbc.writeMem(0x7954, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x103d, gbc.sp());
        EXPECT(0x7956, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02CD
        gbc.setState(0x12a5, 0xbe3, 0x1c10, 0xd030, 0x4660, 0x85ea, 0x1, 0x1);
        gbc.writeMem(0x12a5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xbe3, gbc.sp());
        EXPECT(0x12a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02CE
        gbc.setState(0xe998, 0xaa94, 0x6c70, 0x8d8c, 0xcdfd, 0x65f6, 0x0, 0x1);
        gbc.writeMem(0xe998, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xaa94, gbc.sp());
        EXPECT(0xe99a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe998));
        EXPECT(0x32, gbc.readMem(0xe999));
        // CB 32 02CF
        gbc.setState(0x8585, 0x28de, 0x4580, 0x6ee3, 0x8254, 0x176a, 0x0, 0x0);
        gbc.writeMem(0x8585, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x28de, gbc.sp());
        EXPECT(0x8587, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8585));
        EXPECT(0x32, gbc.readMem(0x8586));
        // CB 32 02D0
        gbc.setState(0xd676, 0x253d, 0xa3e0, 0x129f, 0x5de, 0xc624, 0x0, 0x1);
        gbc.writeMem(0xd676, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x253d, gbc.sp());
        EXPECT(0xd678, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd676));
        EXPECT(0x32, gbc.readMem(0xd677));
        // CB 32 02D1
        gbc.setState(0x408, 0x98d7, 0xb160, 0xdf53, 0xe4aa, 0x8d5d, 0x1, 0x0);
        gbc.writeMem(0x408, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x98d7, gbc.sp());
        EXPECT(0x40a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02D2
        gbc.setState(0x98ab, 0xa145, 0xc330, 0x2ace, 0x98d, 0x2ea6, 0x0, 0x0);
        gbc.writeMem(0x98ab, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xa145, gbc.sp());
        EXPECT(0x98ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98ab));
        EXPECT(0x32, gbc.readMem(0x98ac));
        // CB 32 02D3
        gbc.setState(0x4729, 0xe90e, 0x1420, 0x22c8, 0xa8a2, 0xf822, 0x0, 0x1);
        gbc.writeMem(0x4729, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xe90e, gbc.sp());
        EXPECT(0x472b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02D4
        gbc.setState(0xc34c, 0xa839, 0x8180, 0x5bca, 0x60a6, 0x73d9, 0x0, 0x1);
        gbc.writeMem(0xc34c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xa839, gbc.sp());
        EXPECT(0xc34e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc34c));
        EXPECT(0x32, gbc.readMem(0xc34d));
        // CB 32 02D5
        gbc.setState(0xd88e, 0x7932, 0x5f20, 0xf754, 0xa3ef, 0x2019, 0x1, 0x0);
        gbc.writeMem(0xd88e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x7932, gbc.sp());
        EXPECT(0xd890, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd88e));
        EXPECT(0x32, gbc.readMem(0xd88f));
        // CB 32 02D6
        gbc.setState(0xc7f2, 0x1d80, 0x6d60, 0x5637, 0x2414, 0x1598, 0x0, 0x0);
        gbc.writeMem(0xc7f2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x1d80, gbc.sp());
        EXPECT(0xc7f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7f2));
        EXPECT(0x32, gbc.readMem(0xc7f3));
        // CB 32 02D7
        gbc.setState(0x2b06, 0xbb90, 0x92e0, 0xbe71, 0x4103, 0xdef8, 0x1, 0x1);
        gbc.writeMem(0x2b06, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xbb90, gbc.sp());
        EXPECT(0x2b08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02D8
        gbc.setState(0xc739, 0xf130, 0x28c0, 0x5751, 0xe9e5, 0x1b09, 0x1, 0x1);
        gbc.writeMem(0xc739, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xf130, gbc.sp());
        EXPECT(0xc73b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc739));
        EXPECT(0x32, gbc.readMem(0xc73a));
        // CB 32 02D9
        gbc.setState(0x81d8, 0xad5f, 0x51e0, 0x1c67, 0x69cc, 0xe28b, 0x1, 0x0);
        gbc.writeMem(0x81d8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xad5f, gbc.sp());
        EXPECT(0x81da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81d8));
        EXPECT(0x32, gbc.readMem(0x81d9));
        // CB 32 02DA
        gbc.setState(0x4ceb, 0x6312, 0x1610, 0x509b, 0x38cf, 0x6f38, 0x0, 0x0);
        gbc.writeMem(0x4ceb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x6312, gbc.sp());
        EXPECT(0x4ced, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02DB
        gbc.setState(0x5c14, 0xe3b, 0xd2a0, 0xae07, 0x86ca, 0x88b5, 0x1, 0x1);
        gbc.writeMem(0x5c14, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xe3b, gbc.sp());
        EXPECT(0x5c16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02DC
        gbc.setState(0x1d70, 0x42c7, 0x1960, 0x8cc, 0x9ef8, 0x3856, 0x0, 0x0);
        gbc.writeMem(0x1d70, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x42c7, gbc.sp());
        EXPECT(0x1d72, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02DD
        gbc.setState(0x9078, 0x59ae, 0x8d90, 0xc458, 0x7b8, 0x74d6, 0x0, 0x1);
        gbc.writeMem(0x9078, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x59ae, gbc.sp());
        EXPECT(0x907a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9078));
        EXPECT(0x32, gbc.readMem(0x9079));
        // CB 32 02DE
        gbc.setState(0x4ea8, 0x936b, 0x4b80, 0x513c, 0x3af2, 0x8d02, 0x1, 0x0);
        gbc.writeMem(0x4ea8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x936b, gbc.sp());
        EXPECT(0x4eaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02DF
        gbc.setState(0x977e, 0x4d6f, 0xf290, 0x988d, 0xde72, 0xb5c7, 0x1, 0x1);
        gbc.writeMem(0x977e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x4d6f, gbc.sp());
        EXPECT(0x9780, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x977e));
        EXPECT(0x32, gbc.readMem(0x977f));
        // CB 32 02E0
        gbc.setState(0xa9e0, 0xf6d8, 0x4b10, 0xb69d, 0xe70a, 0x2729, 0x1, 0x1);
        gbc.writeMem(0xa9e0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xf6d8, gbc.sp());
        EXPECT(0xa9e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9e0));
        EXPECT(0x32, gbc.readMem(0xa9e1));
        // CB 32 02E1
        gbc.setState(0x776c, 0xee3d, 0xc4a0, 0x2684, 0x43ea, 0x5d6b, 0x1, 0x0);
        gbc.writeMem(0x776c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xee3d, gbc.sp());
        EXPECT(0x776e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02E2
        gbc.setState(0xb175, 0x63dd, 0x4bb0, 0xf7b3, 0x19a0, 0xa42f, 0x0, 0x0);
        gbc.writeMem(0xb175, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x63dd, gbc.sp());
        EXPECT(0xb177, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb175));
        EXPECT(0x32, gbc.readMem(0xb176));
        // CB 32 02E3
        gbc.setState(0x7de5, 0x98ae, 0x7510, 0xbfb7, 0x5247, 0x948a, 0x0, 0x0);
        gbc.writeMem(0x7de5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x98ae, gbc.sp());
        EXPECT(0x7de7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02E4
        gbc.setState(0x1a6b, 0xc059, 0x7040, 0x48eb, 0xf84e, 0x6b1, 0x1, 0x0);
        gbc.writeMem(0x1a6b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xc059, gbc.sp());
        EXPECT(0x1a6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02E5
        gbc.setState(0x9d19, 0xd10d, 0xb550, 0xf8a6, 0x4a77, 0xc122, 0x1, 0x0);
        gbc.writeMem(0x9d19, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xd10d, gbc.sp());
        EXPECT(0x9d1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d19));
        EXPECT(0x32, gbc.readMem(0x9d1a));
        // CB 32 02E6
        gbc.setState(0x2ddb, 0xfda8, 0xd4f0, 0x97cd, 0x86f3, 0xa700, 0x0, 0x0);
        gbc.writeMem(0x2ddb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xfda8, gbc.sp());
        EXPECT(0x2ddd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02E7
        gbc.setState(0x54e9, 0x5987, 0xb4f0, 0xc0c6, 0x2c7e, 0x609, 0x1, 0x0);
        gbc.writeMem(0x54e9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x5987, gbc.sp());
        EXPECT(0x54eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02E8
        gbc.setState(0x9ee6, 0x6b1f, 0x49a0, 0x23ab, 0xe5e1, 0x23dd, 0x0, 0x0);
        gbc.writeMem(0x9ee6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x6b1f, gbc.sp());
        EXPECT(0x9ee8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ee6));
        EXPECT(0x32, gbc.readMem(0x9ee7));
        // CB 32 02E9
        gbc.setState(0x813d, 0xfb1a, 0x6cc0, 0x2d91, 0x45c4, 0x9fa5, 0x0, 0x1);
        gbc.writeMem(0x813d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xfb1a, gbc.sp());
        EXPECT(0x813f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x813d));
        EXPECT(0x32, gbc.readMem(0x813e));
        // CB 32 02EA
        gbc.setState(0x85a3, 0xf1e4, 0xe6d0, 0x3043, 0xb350, 0xb7ea, 0x1, 0x1);
        gbc.writeMem(0x85a3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xf1e4, gbc.sp());
        EXPECT(0x85a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85a3));
        EXPECT(0x32, gbc.readMem(0x85a4));
        // CB 32 02EB
        gbc.setState(0x18e2, 0x8850, 0xcb0, 0x9bf0, 0xf3d2, 0x26e4, 0x0, 0x0);
        gbc.writeMem(0x18e2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x8850, gbc.sp());
        EXPECT(0x18e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02EC
        gbc.setState(0x20d3, 0x6403, 0xf490, 0x487b, 0xd8a2, 0x8751, 0x1, 0x0);
        gbc.writeMem(0x20d3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x6403, gbc.sp());
        EXPECT(0x20d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02ED
        gbc.setState(0x2cd2, 0xe19e, 0xeaa0, 0x4221, 0x2893, 0xb4ae, 0x0, 0x0);
        gbc.writeMem(0x2cd2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xe19e, gbc.sp());
        EXPECT(0x2cd4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02EE
        gbc.setState(0x3bae, 0x120f, 0xd2d0, 0x299a, 0xbf3a, 0xcd8e, 0x1, 0x0);
        gbc.writeMem(0x3bae, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x120f, gbc.sp());
        EXPECT(0x3bb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02EF
        gbc.setState(0x7d2f, 0x1961, 0xf990, 0xf827, 0xba0c, 0x8d26, 0x1, 0x1);
        gbc.writeMem(0x7d2f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x1961, gbc.sp());
        EXPECT(0x7d31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02F0
        gbc.setState(0xc7ed, 0xf8ce, 0x1000, 0xef14, 0x4860, 0xf966, 0x1, 0x0);
        gbc.writeMem(0xc7ed, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xf8ce, gbc.sp());
        EXPECT(0xc7ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7ed));
        EXPECT(0x32, gbc.readMem(0xc7ee));
        // CB 32 02F1
        gbc.setState(0xa2b5, 0xfb0a, 0xd780, 0x9b57, 0xf571, 0x6c23, 0x0, 0x0);
        gbc.writeMem(0xa2b5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xfb0a, gbc.sp());
        EXPECT(0xa2b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2b5));
        EXPECT(0x32, gbc.readMem(0xa2b6));
        // CB 32 02F2
        gbc.setState(0x33bb, 0x544b, 0x95f0, 0x4fad, 0x3e5c, 0xb406, 0x1, 0x1);
        gbc.writeMem(0x33bb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x544b, gbc.sp());
        EXPECT(0x33bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02F3
        gbc.setState(0x14db, 0x3d4c, 0xf020, 0xc5af, 0xa0d5, 0xfc05, 0x1, 0x1);
        gbc.writeMem(0x14db, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x3d4c, gbc.sp());
        EXPECT(0x14dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02F4
        gbc.setState(0xa1e0, 0xeac7, 0xbf40, 0x9cda, 0x229a, 0xcbe2, 0x1, 0x0);
        gbc.writeMem(0xa1e0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xeac7, gbc.sp());
        EXPECT(0xa1e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1e0));
        EXPECT(0x32, gbc.readMem(0xa1e1));
        // CB 32 02F5
        gbc.setState(0x707, 0x2a04, 0x3750, 0x23df, 0xa880, 0x135e, 0x1, 0x0);
        gbc.writeMem(0x707, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x2a04, gbc.sp());
        EXPECT(0x709, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02F6
        gbc.setState(0xcd46, 0xe9c1, 0xf590, 0x93eb, 0x25c5, 0xcfd6, 0x0, 0x0);
        gbc.writeMem(0xcd46, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xe9c1, gbc.sp());
        EXPECT(0xcd48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd46));
        EXPECT(0x32, gbc.readMem(0xcd47));
        // CB 32 02F7
        gbc.setState(0x74d6, 0x4c24, 0xfca0, 0xb4fa, 0x162f, 0xc86a, 0x1, 0x1);
        gbc.writeMem(0x74d6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x4c24, gbc.sp());
        EXPECT(0x74d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02F8
        gbc.setState(0x5ebd, 0x7d07, 0xb790, 0x8cbc, 0x976a, 0x6447, 0x0, 0x0);
        gbc.writeMem(0x5ebd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x7d07, gbc.sp());
        EXPECT(0x5ebf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02F9
        gbc.setState(0x24e4, 0x4ad1, 0x8890, 0xe4f7, 0xd6c9, 0x5fd2, 0x1, 0x1);
        gbc.writeMem(0x24e4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x4ad1, gbc.sp());
        EXPECT(0x24e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02FA
        gbc.setState(0x3773, 0x919c, 0xfeb0, 0xae99, 0xbdb8, 0x9ae9, 0x0, 0x1);
        gbc.writeMem(0x3773, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x919c, gbc.sp());
        EXPECT(0x3775, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02FB
        gbc.setState(0x589, 0xe78b, 0xa760, 0x300c, 0xd326, 0x6691, 0x1, 0x1);
        gbc.writeMem(0x589, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xe78b, gbc.sp());
        EXPECT(0x58b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 02FC
        gbc.setState(0xcecf, 0x736e, 0x5a00, 0xb612, 0x89ae, 0x9faa, 0x1, 0x1);
        gbc.writeMem(0xcecf, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x736e, gbc.sp());
        EXPECT(0xced1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcecf));
        EXPECT(0x32, gbc.readMem(0xced0));
        // CB 32 02FD
        gbc.setState(0xb9c8, 0x8220, 0x30a0, 0xae74, 0x7272, 0x9d59, 0x1, 0x1);
        gbc.writeMem(0xb9c8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x8220, gbc.sp());
        EXPECT(0xb9ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9c8));
        EXPECT(0x32, gbc.readMem(0xb9c9));
        // CB 32 02FE
        gbc.setState(0xb87f, 0xb0c8, 0x9a90, 0xbe42, 0xc8e0, 0x92eb, 0x1, 0x0);
        gbc.writeMem(0xb87f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xb0c8, gbc.sp());
        EXPECT(0xb881, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb87f));
        EXPECT(0x32, gbc.readMem(0xb880));
        // CB 32 02FF
        gbc.setState(0x5e52, 0x8d55, 0x19c0, 0x37e3, 0xacea, 0xff82, 0x1, 0x0);
        gbc.writeMem(0x5e52, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x8d55, gbc.sp());
        EXPECT(0x5e54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0300
        gbc.setState(0x6db4, 0x71a3, 0xd50, 0xe671, 0xb396, 0x9df3, 0x1, 0x0);
        gbc.writeMem(0x6db4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x71a3, gbc.sp());
        EXPECT(0x6db6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0301
        gbc.setState(0xb0fb, 0x17b0, 0x9410, 0xa1db, 0x93d5, 0xaa4c, 0x1, 0x0);
        gbc.writeMem(0xb0fb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x17b0, gbc.sp());
        EXPECT(0xb0fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0fb));
        EXPECT(0x32, gbc.readMem(0xb0fc));
        // CB 32 0302
        gbc.setState(0x8c24, 0xf5da, 0x8a10, 0x26d2, 0xcc4a, 0x2fac, 0x1, 0x0);
        gbc.writeMem(0x8c24, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xf5da, gbc.sp());
        EXPECT(0x8c26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c24));
        EXPECT(0x32, gbc.readMem(0x8c25));
        // CB 32 0303
        gbc.setState(0x3a3a, 0xb90e, 0xeae0, 0x97ef, 0x4bd9, 0x4deb, 0x0, 0x0);
        gbc.writeMem(0x3a3a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xb90e, gbc.sp());
        EXPECT(0x3a3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0304
        gbc.setState(0x955a, 0xcf25, 0xb50, 0x5e8e, 0x4a3d, 0xe8ed, 0x1, 0x0);
        gbc.writeMem(0x955a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xcf25, gbc.sp());
        EXPECT(0x955c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x955a));
        EXPECT(0x32, gbc.readMem(0x955b));
        // CB 32 0305
        gbc.setState(0xcc8c, 0x166, 0xb390, 0xaefb, 0x27d3, 0x6257, 0x1, 0x1);
        gbc.writeMem(0xcc8c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x166, gbc.sp());
        EXPECT(0xcc8e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc8c));
        EXPECT(0x32, gbc.readMem(0xcc8d));
        // CB 32 0306
        gbc.setState(0x830a, 0xa53b, 0x35a0, 0x29a3, 0x32da, 0xf4ac, 0x1, 0x1);
        gbc.writeMem(0x830a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xa53b, gbc.sp());
        EXPECT(0x830c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x830a));
        EXPECT(0x32, gbc.readMem(0x830b));
        // CB 32 0307
        gbc.setState(0x17e3, 0xee3e, 0x4930, 0x3726, 0xb7a, 0x220c, 0x0, 0x0);
        gbc.writeMem(0x17e3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xee3e, gbc.sp());
        EXPECT(0x17e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0308
        gbc.setState(0x756a, 0x31d1, 0x5150, 0x3e85, 0x5a62, 0xeb90, 0x1, 0x1);
        gbc.writeMem(0x756a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x31d1, gbc.sp());
        EXPECT(0x756c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0309
        gbc.setState(0x8305, 0x3f81, 0x71c0, 0x462a, 0xfe74, 0x648, 0x0, 0x1);
        gbc.writeMem(0x8305, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x3f81, gbc.sp());
        EXPECT(0x8307, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8305));
        EXPECT(0x32, gbc.readMem(0x8306));
        // CB 32 030A
        gbc.setState(0x4d68, 0xa03c, 0xe050, 0x6509, 0x3bdb, 0x92dd, 0x1, 0x0);
        gbc.writeMem(0x4d68, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xa03c, gbc.sp());
        EXPECT(0x4d6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 030B
        gbc.setState(0x54a4, 0x51cf, 0xd4c0, 0x2520, 0x9988, 0x4ea8, 0x0, 0x1);
        gbc.writeMem(0x54a4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x51cf, gbc.sp());
        EXPECT(0x54a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 030C
        gbc.setState(0x4501, 0xcdb, 0xa300, 0x4878, 0x9dda, 0xa9bb, 0x1, 0x1);
        gbc.writeMem(0x4501, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xcdb, gbc.sp());
        EXPECT(0x4503, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 030E
        gbc.setState(0x6a05, 0xa991, 0xcaf0, 0xda71, 0x1b2a, 0xccd6, 0x0, 0x1);
        gbc.writeMem(0x6a05, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xa991, gbc.sp());
        EXPECT(0x6a07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 030F
        gbc.setState(0x6a3, 0x3b08, 0x9900, 0x1f45, 0x774f, 0xe2d1, 0x0, 0x1);
        gbc.writeMem(0x6a3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x3b08, gbc.sp());
        EXPECT(0x6a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0310
        gbc.setState(0xd424, 0x6404, 0xb7f0, 0x4d74, 0xceaf, 0x8bad, 0x1, 0x1);
        gbc.writeMem(0xd424, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x6404, gbc.sp());
        EXPECT(0xd426, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd424));
        EXPECT(0x32, gbc.readMem(0xd425));
        // CB 32 0311
        gbc.setState(0xb474, 0xc329, 0x2aa0, 0x9f94, 0x505d, 0xd30e, 0x0, 0x1);
        gbc.writeMem(0xb474, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xc329, gbc.sp());
        EXPECT(0xb476, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb474));
        EXPECT(0x32, gbc.readMem(0xb475));
        // CB 32 0312
        gbc.setState(0x70fd, 0x4d1d, 0x1b20, 0xf63, 0xea1, 0xd44d, 0x0, 0x0);
        gbc.writeMem(0x70fd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x4d1d, gbc.sp());
        EXPECT(0x70ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0313
        gbc.setState(0x6ba0, 0x7e3d, 0x3bb0, 0xdb29, 0xdf0c, 0xef4f, 0x1, 0x0);
        gbc.writeMem(0x6ba0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x7e3d, gbc.sp());
        EXPECT(0x6ba2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0314
        gbc.setState(0x8d3d, 0xcf2c, 0xf3d0, 0xc23a, 0x31ef, 0x946, 0x0, 0x0);
        gbc.writeMem(0x8d3d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xcf2c, gbc.sp());
        EXPECT(0x8d3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d3d));
        EXPECT(0x32, gbc.readMem(0x8d3e));
        // CB 32 0315
        gbc.setState(0x7052, 0x6858, 0x7b40, 0x40b7, 0xf760, 0x9570, 0x1, 0x0);
        gbc.writeMem(0x7052, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x6858, gbc.sp());
        EXPECT(0x7054, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0316
        gbc.setState(0x7a2c, 0xecf4, 0x5620, 0xe647, 0x640a, 0x9f7b, 0x1, 0x1);
        gbc.writeMem(0x7a2c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xecf4, gbc.sp());
        EXPECT(0x7a2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0317
        gbc.setState(0x258f, 0x977b, 0xd500, 0x5f3a, 0x482d, 0x1e25, 0x0, 0x0);
        gbc.writeMem(0x258f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x977b, gbc.sp());
        EXPECT(0x2591, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0318
        gbc.setState(0x606d, 0xdf92, 0xa4c0, 0x7550, 0x8fe4, 0xb666, 0x1, 0x0);
        gbc.writeMem(0x606d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xdf92, gbc.sp());
        EXPECT(0x606f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0319
        gbc.setState(0xec3f, 0x2c7f, 0xbdc0, 0x6ba2, 0x8f07, 0xbb60, 0x0, 0x0);
        gbc.writeMem(0xec3f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x2c7f, gbc.sp());
        EXPECT(0xec41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec3f));
        EXPECT(0x32, gbc.readMem(0xec40));
        // CB 32 031A
        gbc.setState(0xd40a, 0x3d53, 0x1870, 0xcc9a, 0xd186, 0x3b29, 0x1, 0x1);
        gbc.writeMem(0xd40a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x3d53, gbc.sp());
        EXPECT(0xd40c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd40a));
        EXPECT(0x32, gbc.readMem(0xd40b));
        // CB 32 031B
        gbc.setState(0xe706, 0xfa46, 0xad50, 0xf168, 0x8cfc, 0x2861, 0x0, 0x1);
        gbc.writeMem(0xe706, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xfa46, gbc.sp());
        EXPECT(0xe708, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe706));
        EXPECT(0x32, gbc.readMem(0xe707));
        // CB 32 031C
        gbc.setState(0x776, 0xb1ea, 0xc760, 0x1c02, 0x4dfb, 0x6793, 0x1, 0x1);
        gbc.writeMem(0x776, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xb1ea, gbc.sp());
        EXPECT(0x778, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 031D
        gbc.setState(0x6d90, 0xa20d, 0x91f0, 0xa3b6, 0xb6d1, 0x1d03, 0x0, 0x1);
        gbc.writeMem(0x6d90, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xa20d, gbc.sp());
        EXPECT(0x6d92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 031E
        gbc.setState(0x868c, 0x135d, 0xf920, 0x47d1, 0x7e29, 0x73a2, 0x0, 0x0);
        gbc.writeMem(0x868c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x135d, gbc.sp());
        EXPECT(0x868e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x868c));
        EXPECT(0x32, gbc.readMem(0x868d));
        // CB 32 0322
        gbc.setState(0x6d5a, 0x6994, 0x30f0, 0x255a, 0x20e9, 0xe1a4, 0x1, 0x1);
        gbc.writeMem(0x6d5a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x6994, gbc.sp());
        EXPECT(0x6d5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0323
        gbc.setState(0x34fe, 0x1f44, 0x38e0, 0x8286, 0xe60f, 0x494c, 0x1, 0x1);
        gbc.writeMem(0x34fe, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x1f44, gbc.sp());
        EXPECT(0x3500, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0324
        gbc.setState(0xd6ab, 0x5370, 0x7150, 0x7686, 0x7209, 0xa28f, 0x1, 0x1);
        gbc.writeMem(0xd6ab, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x5370, gbc.sp());
        EXPECT(0xd6ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6ab));
        EXPECT(0x32, gbc.readMem(0xd6ac));
        // CB 32 0325
        gbc.setState(0xcc05, 0xbde8, 0x23a0, 0x2a8c, 0x2273, 0xa265, 0x0, 0x0);
        gbc.writeMem(0xcc05, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xbde8, gbc.sp());
        EXPECT(0xcc07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc05));
        EXPECT(0x32, gbc.readMem(0xcc06));
        // CB 32 0326
        gbc.setState(0x3418, 0x8d98, 0xca50, 0x4ead, 0x5c62, 0x4a61, 0x0, 0x1);
        gbc.writeMem(0x3418, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x8d98, gbc.sp());
        EXPECT(0x341a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0327
        gbc.setState(0x4adc, 0xc44e, 0xe60, 0xdc19, 0xa66e, 0x66f9, 0x0, 0x1);
        gbc.writeMem(0x4adc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xc44e, gbc.sp());
        EXPECT(0x4ade, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0328
        gbc.setState(0x3370, 0xdda6, 0x49c0, 0x6de3, 0x7205, 0x10ef, 0x1, 0x1);
        gbc.writeMem(0x3370, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xdda6, gbc.sp());
        EXPECT(0x3372, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0329
        gbc.setState(0x7f9a, 0xde1e, 0xb5b0, 0x950f, 0x5ded, 0xe2db, 0x0, 0x1);
        gbc.writeMem(0x7f9a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xde1e, gbc.sp());
        EXPECT(0x7f9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 032A
        gbc.setState(0x5eb8, 0x7d71, 0x37b0, 0x5c31, 0xd3e2, 0x5e00, 0x1, 0x0);
        gbc.writeMem(0x5eb8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x7d71, gbc.sp());
        EXPECT(0x5eba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 032B
        gbc.setState(0x40c4, 0x12d1, 0xbb80, 0x8822, 0x9da0, 0x8270, 0x1, 0x0);
        gbc.writeMem(0x40c4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x12d1, gbc.sp());
        EXPECT(0x40c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 032C
        gbc.setState(0xec5f, 0xe77c, 0xe640, 0x28e2, 0x1cf2, 0xa69a, 0x1, 0x1);
        gbc.writeMem(0xec5f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xe77c, gbc.sp());
        EXPECT(0xec61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec5f));
        EXPECT(0x32, gbc.readMem(0xec60));
        // CB 32 032D
        gbc.setState(0x1b, 0x7394, 0xd1b0, 0x1db2, 0xad88, 0xa2a2, 0x1, 0x1);
        gbc.writeMem(0x1b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x7394, gbc.sp());
        EXPECT(0x1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 032F
        gbc.setState(0xba60, 0x80c1, 0xcad0, 0xadb0, 0x3c3c, 0x991, 0x0, 0x1);
        gbc.writeMem(0xba60, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x80c1, gbc.sp());
        EXPECT(0xba62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba60));
        EXPECT(0x32, gbc.readMem(0xba61));
        // CB 32 0330
        gbc.setState(0x251f, 0xd558, 0x25e0, 0xf081, 0x93a8, 0x520b, 0x1, 0x0);
        gbc.writeMem(0x251f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xd558, gbc.sp());
        EXPECT(0x2521, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0331
        gbc.setState(0x9210, 0xb373, 0xa5b0, 0x47e2, 0x6c99, 0x23c7, 0x0, 0x0);
        gbc.writeMem(0x9210, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xb373, gbc.sp());
        EXPECT(0x9212, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9210));
        EXPECT(0x32, gbc.readMem(0x9211));
        // CB 32 0332
        gbc.setState(0x8aae, 0x2563, 0x1200, 0xf96, 0x77d1, 0xb16e, 0x0, 0x1);
        gbc.writeMem(0x8aae, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x2563, gbc.sp());
        EXPECT(0x8ab0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8aae));
        EXPECT(0x32, gbc.readMem(0x8aaf));
        // CB 32 0333
        gbc.setState(0x4c71, 0x6e18, 0xc0c0, 0x8c01, 0xa489, 0x2388, 0x1, 0x1);
        gbc.writeMem(0x4c71, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x6e18, gbc.sp());
        EXPECT(0x4c73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0334
        gbc.setState(0x7e78, 0x9570, 0x7770, 0x825f, 0x321f, 0x90a7, 0x1, 0x1);
        gbc.writeMem(0x7e78, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x9570, gbc.sp());
        EXPECT(0x7e7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0335
        gbc.setState(0xcd67, 0x9ab8, 0x5a70, 0x9778, 0xf120, 0x6b87, 0x1, 0x0);
        gbc.writeMem(0xcd67, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x9ab8, gbc.sp());
        EXPECT(0xcd69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd67));
        EXPECT(0x32, gbc.readMem(0xcd68));
        // CB 32 0336
        gbc.setState(0x7307, 0x3f60, 0x7390, 0xd5b9, 0xfa2d, 0xccc9, 0x0, 0x0);
        gbc.writeMem(0x7307, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x3f60, gbc.sp());
        EXPECT(0x7309, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0337
        gbc.setState(0x4aea, 0xeaa7, 0xec10, 0x32c3, 0x3d51, 0x4196, 0x1, 0x0);
        gbc.writeMem(0x4aea, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xeaa7, gbc.sp());
        EXPECT(0x4aec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0338
        gbc.setState(0xdefe, 0x9903, 0x2c40, 0x981b, 0x9cf3, 0xd716, 0x1, 0x0);
        gbc.writeMem(0xdefe, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x9903, gbc.sp());
        EXPECT(0xdf00, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdefe));
        EXPECT(0x32, gbc.readMem(0xdeff));
        // CB 32 033A
        gbc.setState(0x2991, 0xd05a, 0xd0b0, 0x1677, 0xbc4, 0xa545, 0x0, 0x0);
        gbc.writeMem(0x2991, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xd05a, gbc.sp());
        EXPECT(0x2993, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 033B
        gbc.setState(0x8eab, 0xb7a9, 0x5370, 0xbf24, 0xa156, 0x9f50, 0x1, 0x1);
        gbc.writeMem(0x8eab, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xb7a9, gbc.sp());
        EXPECT(0x8ead, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8eab));
        EXPECT(0x32, gbc.readMem(0x8eac));
        // CB 32 033C
        gbc.setState(0xecf0, 0x962f, 0x8150, 0xc179, 0xf9af, 0xf8c2, 0x0, 0x0);
        gbc.writeMem(0xecf0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x962f, gbc.sp());
        EXPECT(0xecf2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecf0));
        EXPECT(0x32, gbc.readMem(0xecf1));
        // CB 32 033D
        gbc.setState(0xaa7c, 0xe3ac, 0xca60, 0x41e8, 0x81ca, 0x8a3c, 0x0, 0x1);
        gbc.writeMem(0xaa7c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xe3ac, gbc.sp());
        EXPECT(0xaa7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa7c));
        EXPECT(0x32, gbc.readMem(0xaa7d));
        // CB 32 033E
        gbc.setState(0x6dcd, 0xc3e5, 0x1710, 0x4f95, 0x63a8, 0x12f4, 0x1, 0x0);
        gbc.writeMem(0x6dcd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xc3e5, gbc.sp());
        EXPECT(0x6dcf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 033F
        gbc.setState(0xce6a, 0xd04b, 0xeae0, 0x8955, 0x9601, 0xdcaf, 0x0, 0x0);
        gbc.writeMem(0xce6a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xd04b, gbc.sp());
        EXPECT(0xce6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce6a));
        EXPECT(0x32, gbc.readMem(0xce6b));
        // CB 32 0340
        gbc.setState(0x3e6b, 0xca73, 0x1220, 0x95f9, 0xf6e3, 0xb5e7, 0x0, 0x0);
        gbc.writeMem(0x3e6b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xca73, gbc.sp());
        EXPECT(0x3e6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0342
        gbc.setState(0x47be, 0x6337, 0xe190, 0xa842, 0x6423, 0x2dc5, 0x1, 0x1);
        gbc.writeMem(0x47be, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x6337, gbc.sp());
        EXPECT(0x47c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0343
        gbc.setState(0x92b9, 0xd319, 0x1b80, 0xe712, 0x627c, 0x8550, 0x1, 0x1);
        gbc.writeMem(0x92b9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xd319, gbc.sp());
        EXPECT(0x92bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92b9));
        EXPECT(0x32, gbc.readMem(0x92ba));
        // CB 32 0344
        gbc.setState(0xb685, 0x8abf, 0x73d0, 0xe634, 0xc12b, 0x3066, 0x1, 0x1);
        gbc.writeMem(0xb685, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x8abf, gbc.sp());
        EXPECT(0xb687, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb685));
        EXPECT(0x32, gbc.readMem(0xb686));
        // CB 32 0345
        gbc.setState(0x4664, 0xe18a, 0x5a50, 0xc58f, 0x2d4b, 0xb3b, 0x0, 0x1);
        gbc.writeMem(0x4664, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xe18a, gbc.sp());
        EXPECT(0x4666, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0346
        gbc.setState(0x9beb, 0x280, 0xff20, 0x4464, 0x8fc, 0xf706, 0x0, 0x1);
        gbc.writeMem(0x9beb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x280, gbc.sp());
        EXPECT(0x9bed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9beb));
        EXPECT(0x32, gbc.readMem(0x9bec));
        // CB 32 0347
        gbc.setState(0x8018, 0xb09b, 0x2900, 0x6a12, 0xd5e2, 0x7025, 0x0, 0x1);
        gbc.writeMem(0x8018, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xb09b, gbc.sp());
        EXPECT(0x801a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8018));
        EXPECT(0x32, gbc.readMem(0x8019));
        // CB 32 0348
        gbc.setState(0x1613, 0x56ee, 0x9a40, 0x20f7, 0x4c6, 0x52ce, 0x0, 0x0);
        gbc.writeMem(0x1613, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x56ee, gbc.sp());
        EXPECT(0x1615, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0349
        gbc.setState(0x1436, 0x7bf, 0xdea0, 0x642b, 0xbc1a, 0xc184, 0x1, 0x1);
        gbc.writeMem(0x1436, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x7bf, gbc.sp());
        EXPECT(0x1438, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 034A
        gbc.setState(0xe0ee, 0xd0bc, 0xaa40, 0x9312, 0xa27c, 0x7a0e, 0x1, 0x0);
        gbc.writeMem(0xe0ee, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xd0bc, gbc.sp());
        EXPECT(0xe0f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0ee));
        EXPECT(0x32, gbc.readMem(0xe0ef));
        // CB 32 034B
        gbc.setState(0x27dc, 0xb32e, 0x8500, 0x574d, 0xe85d, 0xff24, 0x0, 0x0);
        gbc.writeMem(0x27dc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xb32e, gbc.sp());
        EXPECT(0x27de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 034C
        gbc.setState(0xed59, 0x4a8, 0xe570, 0xae25, 0x3f31, 0xac6b, 0x0, 0x1);
        gbc.writeMem(0xed59, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x4a8, gbc.sp());
        EXPECT(0xed5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed59));
        EXPECT(0x32, gbc.readMem(0xed5a));
        // CB 32 034D
        gbc.setState(0xd7ef, 0x6b13, 0x970, 0xdf7c, 0xebbd, 0xdc97, 0x0, 0x0);
        gbc.writeMem(0xd7ef, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x6b13, gbc.sp());
        EXPECT(0xd7f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7ef));
        EXPECT(0x32, gbc.readMem(0xd7f0));
        // CB 32 034F
        gbc.setState(0xaac, 0xc79, 0xfd20, 0xffa0, 0x7d6a, 0x43e8, 0x0, 0x0);
        gbc.writeMem(0xaac, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xc79, gbc.sp());
        EXPECT(0xaae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0350
        gbc.setState(0x84e3, 0x35a2, 0x86a0, 0x9832, 0x7e8b, 0x8a45, 0x0, 0x0);
        gbc.writeMem(0x84e3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x35a2, gbc.sp());
        EXPECT(0x84e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84e3));
        EXPECT(0x32, gbc.readMem(0x84e4));
        // CB 32 0351
        gbc.setState(0xea84, 0x3ed, 0xc2d0, 0x7870, 0x319d, 0x3da8, 0x0, 0x0);
        gbc.writeMem(0xea84, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x3ed, gbc.sp());
        EXPECT(0xea86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea84));
        EXPECT(0x32, gbc.readMem(0xea85));
        // CB 32 0352
        gbc.setState(0xa924, 0xf4b3, 0x6890, 0x2992, 0xef16, 0xdd7b, 0x1, 0x1);
        gbc.writeMem(0xa924, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xf4b3, gbc.sp());
        EXPECT(0xa926, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa924));
        EXPECT(0x32, gbc.readMem(0xa925));
        // CB 32 0353
        gbc.setState(0x10b, 0x848f, 0xaa90, 0x2c5, 0x3dd5, 0x2f62, 0x1, 0x0);
        gbc.writeMem(0x10b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x848f, gbc.sp());
        EXPECT(0x10d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0354
        gbc.setState(0x770b, 0xfc87, 0x8770, 0x83ac, 0x49f5, 0xf838, 0x0, 0x0);
        gbc.writeMem(0x770b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xfc87, gbc.sp());
        EXPECT(0x770d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0355
        gbc.setState(0x97a6, 0xb15b, 0xb1a0, 0x80d6, 0xb259, 0x2404, 0x1, 0x0);
        gbc.writeMem(0x97a6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xb15b, gbc.sp());
        EXPECT(0x97a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97a6));
        EXPECT(0x32, gbc.readMem(0x97a7));
        // CB 32 0356
        gbc.setState(0x8290, 0x6081, 0x2550, 0xebc8, 0x6af3, 0xbdfe, 0x1, 0x0);
        gbc.writeMem(0x8290, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x6081, gbc.sp());
        EXPECT(0x8292, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8290));
        EXPECT(0x32, gbc.readMem(0x8291));
        // CB 32 0357
        gbc.setState(0x488c, 0x3ba3, 0x1440, 0x5d18, 0x526b, 0x4a7d, 0x1, 0x0);
        gbc.writeMem(0x488c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x3ba3, gbc.sp());
        EXPECT(0x488e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0358
        gbc.setState(0xddda, 0x78cd, 0x62e0, 0xa422, 0x6288, 0xcf76, 0x0, 0x1);
        gbc.writeMem(0xddda, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x78cd, gbc.sp());
        EXPECT(0xdddc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddda));
        EXPECT(0x32, gbc.readMem(0xdddb));
        // CB 32 0359
        gbc.setState(0x9cb1, 0xafbb, 0xd800, 0x55e3, 0x5674, 0x57c9, 0x1, 0x1);
        gbc.writeMem(0x9cb1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xafbb, gbc.sp());
        EXPECT(0x9cb3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cb1));
        EXPECT(0x32, gbc.readMem(0x9cb2));
        // CB 32 035A
        gbc.setState(0xd238, 0xa896, 0xdf60, 0xbf41, 0xf5db, 0x8452, 0x1, 0x1);
        gbc.writeMem(0xd238, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xa896, gbc.sp());
        EXPECT(0xd23a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd238));
        EXPECT(0x32, gbc.readMem(0xd239));
        // CB 32 035B
        gbc.setState(0x513d, 0x2a3b, 0xf210, 0x9006, 0x93b7, 0x3893, 0x1, 0x0);
        gbc.writeMem(0x513d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x2a3b, gbc.sp());
        EXPECT(0x513f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 035C
        gbc.setState(0xb8da, 0x6283, 0xb090, 0x85bf, 0x5a10, 0x203d, 0x0, 0x0);
        gbc.writeMem(0xb8da, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x6283, gbc.sp());
        EXPECT(0xb8dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8da));
        EXPECT(0x32, gbc.readMem(0xb8db));
        // CB 32 035D
        gbc.setState(0xb225, 0xeed8, 0xe570, 0x42af, 0x63, 0x11bb, 0x0, 0x0);
        gbc.writeMem(0xb225, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xeed8, gbc.sp());
        EXPECT(0xb227, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb225));
        EXPECT(0x32, gbc.readMem(0xb226));
        // CB 32 035E
        gbc.setState(0xd99f, 0x64f5, 0x5810, 0xd297, 0x681c, 0xd9b9, 0x1, 0x0);
        gbc.writeMem(0xd99f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x64f5, gbc.sp());
        EXPECT(0xd9a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd99f));
        EXPECT(0x32, gbc.readMem(0xd9a0));
        // CB 32 035F
        gbc.setState(0x7899, 0x68d7, 0x11b0, 0x11c9, 0x6f6f, 0x7333, 0x0, 0x0);
        gbc.writeMem(0x7899, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x68d7, gbc.sp());
        EXPECT(0x789b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0360
        gbc.setState(0x69, 0x38a9, 0xe3a0, 0xd593, 0x9c71, 0xc558, 0x0, 0x0);
        gbc.writeMem(0x69, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x38a9, gbc.sp());
        EXPECT(0x6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0361
        gbc.setState(0x96d, 0x583c, 0x6990, 0x1338, 0x3fc2, 0xdd93, 0x1, 0x1);
        gbc.writeMem(0x96d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x583c, gbc.sp());
        EXPECT(0x96f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0362
        gbc.setState(0x689b, 0xa159, 0x8da0, 0x1280, 0xe725, 0x3331, 0x0, 0x0);
        gbc.writeMem(0x689b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xa159, gbc.sp());
        EXPECT(0x689d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0363
        gbc.setState(0x93f6, 0x33ee, 0xb8a0, 0x918d, 0x630d, 0xc2ce, 0x1, 0x1);
        gbc.writeMem(0x93f6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x33ee, gbc.sp());
        EXPECT(0x93f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93f6));
        EXPECT(0x32, gbc.readMem(0x93f7));
        // CB 32 0364
        gbc.setState(0x3f31, 0xf51, 0x88b0, 0xa082, 0x637b, 0x44a4, 0x0, 0x1);
        gbc.writeMem(0x3f31, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xf51, gbc.sp());
        EXPECT(0x3f33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0365
        gbc.setState(0x610e, 0x7ac, 0xc1c0, 0x4a7c, 0x4790, 0xd6da, 0x1, 0x1);
        gbc.writeMem(0x610e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x7ac, gbc.sp());
        EXPECT(0x6110, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0366
        gbc.setState(0x7ad5, 0xfe7e, 0x44e0, 0x6001, 0xb735, 0x28ea, 0x0, 0x1);
        gbc.writeMem(0x7ad5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xfe7e, gbc.sp());
        EXPECT(0x7ad7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0367
        gbc.setState(0xec01, 0x2118, 0x1610, 0xb300, 0x9903, 0x3ae0, 0x1, 0x0);
        gbc.writeMem(0xec01, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x2118, gbc.sp());
        EXPECT(0xec03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec01));
        EXPECT(0x32, gbc.readMem(0xec02));
        // CB 32 0368
        gbc.setState(0xec8f, 0xc9e1, 0xf6d0, 0x58fe, 0xf324, 0xf132, 0x0, 0x0);
        gbc.writeMem(0xec8f, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xc9e1, gbc.sp());
        EXPECT(0xec91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec8f));
        EXPECT(0x32, gbc.readMem(0xec90));
        // CB 32 0369
        gbc.setState(0x15f5, 0xed74, 0x920, 0xee84, 0x6ae1, 0x32e5, 0x0, 0x0);
        gbc.writeMem(0x15f5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xed74, gbc.sp());
        EXPECT(0x15f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 036A
        gbc.setState(0xd35e, 0x8e3, 0x3210, 0xd402, 0x35f6, 0x1c61, 0x0, 0x0);
        gbc.writeMem(0xd35e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x8e3, gbc.sp());
        EXPECT(0xd360, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd35e));
        EXPECT(0x32, gbc.readMem(0xd35f));
        // CB 32 036B
        gbc.setState(0xdc8, 0xa5a1, 0xa0, 0x4311, 0x88e2, 0x318a, 0x1, 0x0);
        gbc.writeMem(0xdc8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xa5a1, gbc.sp());
        EXPECT(0xdca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 036C
        gbc.setState(0xeca2, 0x6ade, 0xf0d0, 0x4c8a, 0xdab9, 0x1022, 0x0, 0x1);
        gbc.writeMem(0xeca2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x6ade, gbc.sp());
        EXPECT(0xeca4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeca2));
        EXPECT(0x32, gbc.readMem(0xeca3));
        // CB 32 036D
        gbc.setState(0x5ab0, 0x12a0, 0x650, 0xaccd, 0xdfc7, 0x3db3, 0x0, 0x0);
        gbc.writeMem(0x5ab0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x12a0, gbc.sp());
        EXPECT(0x5ab2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 036E
        gbc.setState(0x1281, 0xa6e9, 0x65d0, 0xa314, 0x121d, 0x79fd, 0x1, 0x1);
        gbc.writeMem(0x1281, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xa6e9, gbc.sp());
        EXPECT(0x1283, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 036F
        gbc.setState(0x411b, 0xcf, 0xbc40, 0x5042, 0xf535, 0x4b6, 0x1, 0x0);
        gbc.writeMem(0x411b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xcf, gbc.sp());
        EXPECT(0x411d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0371
        gbc.setState(0x3518, 0xb479, 0x14e0, 0xf2fd, 0xd18e, 0x13f7, 0x0, 0x0);
        gbc.writeMem(0x3518, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xb479, gbc.sp());
        EXPECT(0x351a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0372
        gbc.setState(0x6682, 0x4d9c, 0x8b0, 0x6ea4, 0x9df4, 0x691c, 0x0, 0x1);
        gbc.writeMem(0x6682, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x4d9c, gbc.sp());
        EXPECT(0x6684, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0373
        gbc.setState(0x9718, 0x76cd, 0xb40, 0x1f6e, 0x5dee, 0x9988, 0x1, 0x0);
        gbc.writeMem(0x9718, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x76cd, gbc.sp());
        EXPECT(0x971a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9718));
        EXPECT(0x32, gbc.readMem(0x9719));
        // CB 32 0374
        gbc.setState(0x2ecc, 0xdbb9, 0xc90, 0x1646, 0x84f3, 0x7809, 0x1, 0x0);
        gbc.writeMem(0x2ecc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xdbb9, gbc.sp());
        EXPECT(0x2ece, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0375
        gbc.setState(0x2c6d, 0x2cd1, 0xf3b0, 0x8837, 0xdc6c, 0xae81, 0x0, 0x1);
        gbc.writeMem(0x2c6d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x2cd1, gbc.sp());
        EXPECT(0x2c6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0376
        gbc.setState(0x31ff, 0x5394, 0x6f90, 0x2cd6, 0x8d4, 0x12b6, 0x0, 0x0);
        gbc.writeMem(0x31ff, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x5394, gbc.sp());
        EXPECT(0x3201, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0378
        gbc.setState(0x1ba0, 0x11b9, 0xe7a0, 0xa871, 0x7134, 0xde77, 0x0, 0x1);
        gbc.writeMem(0x1ba0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x11b9, gbc.sp());
        EXPECT(0x1ba2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0379
        gbc.setState(0x184d, 0xa3a1, 0x7680, 0xa4e8, 0xf272, 0x6e16, 0x1, 0x1);
        gbc.writeMem(0x184d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xa3a1, gbc.sp());
        EXPECT(0x184f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 037A
        gbc.setState(0x3606, 0x5e43, 0x670, 0x5e45, 0x9121, 0x3b4d, 0x0, 0x1);
        gbc.writeMem(0x3606, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x5e43, gbc.sp());
        EXPECT(0x3608, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 037B
        gbc.setState(0xd29a, 0xb0b6, 0x38b0, 0xe1b8, 0x1800, 0x1cdf, 0x0, 0x0);
        gbc.writeMem(0xd29a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xb0b6, gbc.sp());
        EXPECT(0xd29c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd29a));
        EXPECT(0x32, gbc.readMem(0xd29b));
        // CB 32 037C
        gbc.setState(0x9488, 0xf7eb, 0x1650, 0x6a4b, 0x651d, 0x69f, 0x0, 0x0);
        gbc.writeMem(0x9488, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xf7eb, gbc.sp());
        EXPECT(0x948a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9488));
        EXPECT(0x32, gbc.readMem(0x9489));
        // CB 32 037D
        gbc.setState(0x5fad, 0x1997, 0xf8e0, 0xbc3a, 0xf86d, 0xf09e, 0x0, 0x0);
        gbc.writeMem(0x5fad, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x1997, gbc.sp());
        EXPECT(0x5faf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 037E
        gbc.setState(0x3ac2, 0xf04d, 0xfd30, 0x2b5, 0xda06, 0x6b, 0x0, 0x0);
        gbc.writeMem(0x3ac2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xf04d, gbc.sp());
        EXPECT(0x3ac4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 037F
        gbc.setState(0x32b3, 0xa883, 0xc90, 0xed68, 0x2bbc, 0xfe9e, 0x1, 0x1);
        gbc.writeMem(0x32b3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xa883, gbc.sp());
        EXPECT(0x32b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0380
        gbc.setState(0xab78, 0x6286, 0x7540, 0xf459, 0xd929, 0xda8b, 0x0, 0x0);
        gbc.writeMem(0xab78, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x6286, gbc.sp());
        EXPECT(0xab7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab78));
        EXPECT(0x32, gbc.readMem(0xab79));
        // CB 32 0381
        gbc.setState(0x3ba, 0xa674, 0xe7f0, 0x3ec2, 0x72e1, 0xe647, 0x1, 0x1);
        gbc.writeMem(0x3ba, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xa674, gbc.sp());
        EXPECT(0x3bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0382
        gbc.setState(0x58f7, 0x954e, 0x2ec0, 0xd6c2, 0x711b, 0xd3f3, 0x0, 0x1);
        gbc.writeMem(0x58f7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x954e, gbc.sp());
        EXPECT(0x58f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0384
        gbc.setState(0x4258, 0x6e0f, 0x8540, 0x407, 0xfb64, 0x3f07, 0x1, 0x1);
        gbc.writeMem(0x4258, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x6e0f, gbc.sp());
        EXPECT(0x425a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0385
        gbc.setState(0x66e7, 0xd3a, 0x6a40, 0x945c, 0x34b3, 0x7f76, 0x0, 0x0);
        gbc.writeMem(0x66e7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xd3a, gbc.sp());
        EXPECT(0x66e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0386
        gbc.setState(0x3577, 0x369a, 0xe4e0, 0x734c, 0x3f16, 0x1c1b, 0x0, 0x0);
        gbc.writeMem(0x3577, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x369a, gbc.sp());
        EXPECT(0x3579, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0387
        gbc.setState(0x31b, 0xbe4a, 0xd80, 0x9b73, 0x6dad, 0x5d7c, 0x1, 0x1);
        gbc.writeMem(0x31b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xbe4a, gbc.sp());
        EXPECT(0x31d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0389
        gbc.setState(0xb242, 0x69a1, 0x2440, 0xf70c, 0xd6b7, 0x71ec, 0x1, 0x1);
        gbc.writeMem(0xb242, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x69a1, gbc.sp());
        EXPECT(0xb244, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb242));
        EXPECT(0x32, gbc.readMem(0xb243));
        // CB 32 038A
        gbc.setState(0x113d, 0xdc79, 0x1e60, 0xc7c6, 0xe0d7, 0x7672, 0x1, 0x0);
        gbc.writeMem(0x113d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xdc79, gbc.sp());
        EXPECT(0x113f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 038B
        gbc.setState(0xb330, 0x6d21, 0x7370, 0x5c8, 0xe6cc, 0xade4, 0x0, 0x0);
        gbc.writeMem(0xb330, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x6d21, gbc.sp());
        EXPECT(0xb332, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb330));
        EXPECT(0x32, gbc.readMem(0xb331));
        // CB 32 038C
        gbc.setState(0x5286, 0x3b36, 0xe0a0, 0x34bf, 0xc48, 0x6770, 0x1, 0x0);
        gbc.writeMem(0x5286, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x3b36, gbc.sp());
        EXPECT(0x5288, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 038D
        gbc.setState(0x1ad, 0x6e55, 0x4ec0, 0xacd1, 0x22f, 0x57b, 0x1, 0x1);
        gbc.writeMem(0x1ad, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x6e55, gbc.sp());
        EXPECT(0x1af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 038E
        gbc.setState(0xb3b2, 0xb14a, 0x4790, 0xfcd3, 0xd38a, 0x55b2, 0x1, 0x0);
        gbc.writeMem(0xb3b2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xb14a, gbc.sp());
        EXPECT(0xb3b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3b2));
        EXPECT(0x32, gbc.readMem(0xb3b3));
        // CB 32 038F
        gbc.setState(0xbe97, 0x52ab, 0x7d90, 0x424e, 0xfc70, 0x530a, 0x0, 0x1);
        gbc.writeMem(0xbe97, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x52ab, gbc.sp());
        EXPECT(0xbe99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe97));
        EXPECT(0x32, gbc.readMem(0xbe98));
        // CB 32 0390
        gbc.setState(0xa023, 0x5e53, 0x8f0, 0xbf5c, 0xa405, 0x2710, 0x1, 0x1);
        gbc.writeMem(0xa023, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x5e53, gbc.sp());
        EXPECT(0xa025, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa023));
        EXPECT(0x32, gbc.readMem(0xa024));
        // CB 32 0391
        gbc.setState(0xd322, 0xbb0c, 0xa130, 0x197e, 0x6308, 0x7a47, 0x1, 0x1);
        gbc.writeMem(0xd322, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xbb0c, gbc.sp());
        EXPECT(0xd324, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd322));
        EXPECT(0x32, gbc.readMem(0xd323));
        // CB 32 0392
        gbc.setState(0xaf39, 0x1188, 0x5160, 0x6f64, 0xc8a1, 0x2dd, 0x1, 0x1);
        gbc.writeMem(0xaf39, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x1188, gbc.sp());
        EXPECT(0xaf3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf39));
        EXPECT(0x32, gbc.readMem(0xaf3a));
        // CB 32 0393
        gbc.setState(0x5d23, 0xee3d, 0xb6b0, 0x4676, 0x9238, 0x5b64, 0x0, 0x1);
        gbc.writeMem(0x5d23, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xee3d, gbc.sp());
        EXPECT(0x5d25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0394
        gbc.setState(0xbf3e, 0x18e3, 0x2c10, 0xb419, 0x5c0a, 0x745c, 0x0, 0x1);
        gbc.writeMem(0xbf3e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x18e3, gbc.sp());
        EXPECT(0xbf40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf3e));
        EXPECT(0x32, gbc.readMem(0xbf3f));
        // CB 32 0395
        gbc.setState(0x8ecc, 0x8a15, 0xb680, 0xd62d, 0x11a6, 0x5394, 0x0, 0x1);
        gbc.writeMem(0x8ecc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x8a15, gbc.sp());
        EXPECT(0x8ece, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ecc));
        EXPECT(0x32, gbc.readMem(0x8ecd));
        // CB 32 0396
        gbc.setState(0x7065, 0xd857, 0x4310, 0x409e, 0x735f, 0xc7fc, 0x0, 0x0);
        gbc.writeMem(0x7065, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xd857, gbc.sp());
        EXPECT(0x7067, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0397
        gbc.setState(0xdcb7, 0x6953, 0xa7a0, 0x2c43, 0x43a3, 0x2b6c, 0x1, 0x1);
        gbc.writeMem(0xdcb7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x6953, gbc.sp());
        EXPECT(0xdcb9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcb7));
        EXPECT(0x32, gbc.readMem(0xdcb8));
        // CB 32 0398
        gbc.setState(0xb34, 0xd9fe, 0x6c0, 0x212b, 0xa2c1, 0xf516, 0x1, 0x0);
        gbc.writeMem(0xb34, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xd9fe, gbc.sp());
        EXPECT(0xb36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 0399
        gbc.setState(0x8402, 0x5953, 0xfd40, 0xd799, 0x33c0, 0xf29e, 0x1, 0x1);
        gbc.writeMem(0x8402, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x5953, gbc.sp());
        EXPECT(0x8404, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8402));
        EXPECT(0x32, gbc.readMem(0x8403));
        // CB 32 039A
        gbc.setState(0xe179, 0xfef8, 0xf860, 0x25b, 0xdd24, 0x707b, 0x1, 0x0);
        gbc.writeMem(0xe179, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xfef8, gbc.sp());
        EXPECT(0xe17b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe179));
        EXPECT(0x32, gbc.readMem(0xe17a));
        // CB 32 039B
        gbc.setState(0xcba3, 0x12b7, 0xbf70, 0x2c9b, 0x60ac, 0x4da4, 0x0, 0x1);
        gbc.writeMem(0xcba3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x12b7, gbc.sp());
        EXPECT(0xcba5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcba3));
        EXPECT(0x32, gbc.readMem(0xcba4));
        // CB 32 039C
        gbc.setState(0xe088, 0x8a05, 0xae50, 0xdc0c, 0xfdb2, 0x46e4, 0x1, 0x1);
        gbc.writeMem(0xe088, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x8a05, gbc.sp());
        EXPECT(0xe08a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe088));
        EXPECT(0x32, gbc.readMem(0xe089));
        // CB 32 039D
        gbc.setState(0xbb56, 0x5852, 0xf2a0, 0x144c, 0x6095, 0xcc09, 0x0, 0x1);
        gbc.writeMem(0xbb56, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x5852, gbc.sp());
        EXPECT(0xbb58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb56));
        EXPECT(0x32, gbc.readMem(0xbb57));
        // CB 32 039E
        gbc.setState(0x5793, 0x1644, 0x8010, 0xe12d, 0x1228, 0x7ba2, 0x1, 0x1);
        gbc.writeMem(0x5793, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x1644, gbc.sp());
        EXPECT(0x5795, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 039F
        gbc.setState(0x452b, 0x92ec, 0xb1a0, 0x5826, 0xfad, 0x2481, 0x0, 0x0);
        gbc.writeMem(0x452b, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x92ec, gbc.sp());
        EXPECT(0x452d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03A0
        gbc.setState(0x47e, 0x2b9d, 0x8940, 0xc364, 0x4dfc, 0xf77b, 0x0, 0x1);
        gbc.writeMem(0x47e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x2b9d, gbc.sp());
        EXPECT(0x480, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03A1
        gbc.setState(0xac83, 0x9196, 0x9840, 0xd979, 0xe3d9, 0xab41, 0x0, 0x0);
        gbc.writeMem(0xac83, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x9196, gbc.sp());
        EXPECT(0xac85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac83));
        EXPECT(0x32, gbc.readMem(0xac84));
        // CB 32 03A2
        gbc.setState(0x1cf4, 0xe1dd, 0x540, 0x35bf, 0x1830, 0x550e, 0x0, 0x0);
        gbc.writeMem(0x1cf4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xe1dd, gbc.sp());
        EXPECT(0x1cf6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03A3
        gbc.setState(0xbac4, 0xad61, 0xdce0, 0xb0ae, 0xa591, 0xab45, 0x1, 0x0);
        gbc.writeMem(0xbac4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xad61, gbc.sp());
        EXPECT(0xbac6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbac4));
        EXPECT(0x32, gbc.readMem(0xbac5));
        // CB 32 03A4
        gbc.setState(0x6f4a, 0xb2b9, 0x9a40, 0xbbf2, 0x14d7, 0x58b2, 0x0, 0x1);
        gbc.writeMem(0x6f4a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xb2b9, gbc.sp());
        EXPECT(0x6f4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03A5
        gbc.setState(0x92e5, 0x6c48, 0x8640, 0x283f, 0xfd3f, 0x2742, 0x1, 0x1);
        gbc.writeMem(0x92e5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x6c48, gbc.sp());
        EXPECT(0x92e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92e5));
        EXPECT(0x32, gbc.readMem(0x92e6));
        // CB 32 03A6
        gbc.setState(0x51ba, 0x116, 0x4d90, 0xaa50, 0x3f4e, 0xe913, 0x0, 0x1);
        gbc.writeMem(0x51ba, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x116, gbc.sp());
        EXPECT(0x51bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03A7
        gbc.setState(0x35c3, 0x2122, 0x60b0, 0x2b7c, 0xb157, 0xc26c, 0x1, 0x1);
        gbc.writeMem(0x35c3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x2122, gbc.sp());
        EXPECT(0x35c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03A8
        gbc.setState(0xa742, 0x58b3, 0xbf40, 0x52d2, 0x7944, 0xc691, 0x1, 0x0);
        gbc.writeMem(0xa742, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x58b3, gbc.sp());
        EXPECT(0xa744, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa742));
        EXPECT(0x32, gbc.readMem(0xa743));
        // CB 32 03A9
        gbc.setState(0x651c, 0xc612, 0x4a00, 0x7427, 0x7f83, 0x8d3a, 0x0, 0x1);
        gbc.writeMem(0x651c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xc612, gbc.sp());
        EXPECT(0x651e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03AA
        gbc.setState(0x3dc8, 0x5440, 0xa180, 0x5a7a, 0xd549, 0x1818, 0x0, 0x0);
        gbc.writeMem(0x3dc8, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x5440, gbc.sp());
        EXPECT(0x3dca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03AB
        gbc.setState(0xbb19, 0x3a43, 0xb2d0, 0xf085, 0x8708, 0xded, 0x1, 0x0);
        gbc.writeMem(0xbb19, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x3a43, gbc.sp());
        EXPECT(0xbb1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb19));
        EXPECT(0x32, gbc.readMem(0xbb1a));
        // CB 32 03AC
        gbc.setState(0x6585, 0x6a09, 0xe2a0, 0x8eb1, 0x1947, 0x4715, 0x1, 0x0);
        gbc.writeMem(0x6585, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x6a09, gbc.sp());
        EXPECT(0x6587, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03AD
        gbc.setState(0x83e2, 0x76e3, 0xdb40, 0x2ce7, 0x9839, 0xb27f, 0x0, 0x0);
        gbc.writeMem(0x83e2, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x76e3, gbc.sp());
        EXPECT(0x83e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83e2));
        EXPECT(0x32, gbc.readMem(0x83e3));
        // CB 32 03AE
        gbc.setState(0xdeda, 0xfd89, 0x4540, 0xb129, 0xda75, 0xb89d, 0x1, 0x1);
        gbc.writeMem(0xdeda, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xfd89, gbc.sp());
        EXPECT(0xdedc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdeda));
        EXPECT(0x32, gbc.readMem(0xdedb));
        // CB 32 03AF
        gbc.setState(0xdff4, 0xa122, 0xda10, 0xc7f5, 0x2f4, 0x63b5, 0x0, 0x0);
        gbc.writeMem(0xdff4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xa122, gbc.sp());
        EXPECT(0xdff6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdff4));
        EXPECT(0x32, gbc.readMem(0xdff5));
        // CB 32 03B0
        gbc.setState(0x569e, 0xcf66, 0x3f30, 0x491, 0x42c1, 0x2167, 0x0, 0x0);
        gbc.writeMem(0x569e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xcf66, gbc.sp());
        EXPECT(0x56a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03B1
        gbc.setState(0xc5bb, 0x7661, 0x1830, 0x20b, 0xbdf5, 0xf71f, 0x0, 0x1);
        gbc.writeMem(0xc5bb, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x7661, gbc.sp());
        EXPECT(0xc5bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5bb));
        EXPECT(0x32, gbc.readMem(0xc5bc));
        // CB 32 03B2
        gbc.setState(0x48d1, 0xb50c, 0x8ff0, 0x4fb, 0xdc3b, 0x4357, 0x1, 0x0);
        gbc.writeMem(0x48d1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xb50c, gbc.sp());
        EXPECT(0x48d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03B3
        gbc.setState(0x33f1, 0x39e4, 0x9f90, 0x8557, 0xe770, 0xbd41, 0x0, 0x1);
        gbc.writeMem(0x33f1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x39e4, gbc.sp());
        EXPECT(0x33f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03B4
        gbc.setState(0xc661, 0x182d, 0x6950, 0xbe21, 0xd1e, 0xac18, 0x1, 0x0);
        gbc.writeMem(0xc661, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x182d, gbc.sp());
        EXPECT(0xc663, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc661));
        EXPECT(0x32, gbc.readMem(0xc662));
        // CB 32 03B5
        gbc.setState(0x9ca6, 0x4659, 0xf870, 0xe889, 0x519a, 0x355e, 0x0, 0x0);
        gbc.writeMem(0x9ca6, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x4659, gbc.sp());
        EXPECT(0x9ca8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ca6));
        EXPECT(0x32, gbc.readMem(0x9ca7));
        // CB 32 03B6
        gbc.setState(0x7031, 0x86e2, 0xbfa0, 0x4357, 0x800e, 0x7831, 0x1, 0x0);
        gbc.writeMem(0x7031, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x86e2, gbc.sp());
        EXPECT(0x7033, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03B8
        gbc.setState(0x3e13, 0x2704, 0x4000, 0x86b8, 0x9e43, 0xee0c, 0x1, 0x1);
        gbc.writeMem(0x3e13, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x2704, gbc.sp());
        EXPECT(0x3e15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03B9
        gbc.setState(0xa458, 0x62b1, 0x9660, 0xe84f, 0xa620, 0xc596, 0x1, 0x0);
        gbc.writeMem(0xa458, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x62b1, gbc.sp());
        EXPECT(0xa45a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa458));
        EXPECT(0x32, gbc.readMem(0xa459));
        // CB 32 03BA
        gbc.setState(0xe809, 0x503e, 0xdce0, 0xb72a, 0x5e43, 0xd5f1, 0x0, 0x0);
        gbc.writeMem(0xe809, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x503e, gbc.sp());
        EXPECT(0xe80b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe809));
        EXPECT(0x32, gbc.readMem(0xe80a));
        // CB 32 03BB
        gbc.setState(0x8e5e, 0xaab8, 0xcc40, 0xb0be, 0x144b, 0xe3bd, 0x1, 0x0);
        gbc.writeMem(0x8e5e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xaab8, gbc.sp());
        EXPECT(0x8e60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e5e));
        EXPECT(0x32, gbc.readMem(0x8e5f));
        // CB 32 03BC
        gbc.setState(0xd2ec, 0x2825, 0x6d80, 0xdd3d, 0x2882, 0xf375, 0x0, 0x0);
        gbc.writeMem(0xd2ec, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x2825, gbc.sp());
        EXPECT(0xd2ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2ec));
        EXPECT(0x32, gbc.readMem(0xd2ed));
        // CB 32 03BD
        gbc.setState(0xb696, 0x77, 0x2030, 0xe21c, 0x5dca, 0xef45, 0x1, 0x0);
        gbc.writeMem(0xb696, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x77, gbc.sp());
        EXPECT(0xb698, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb696));
        EXPECT(0x32, gbc.readMem(0xb697));
        // CB 32 03BE
        gbc.setState(0x5514, 0x1092, 0x5ae0, 0x8f08, 0x597f, 0x9e10, 0x1, 0x1);
        gbc.writeMem(0x5514, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x1092, gbc.sp());
        EXPECT(0x5516, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03BF
        gbc.setState(0x51b5, 0x3560, 0xfbb0, 0x3e1a, 0x353, 0xdcb7, 0x1, 0x0);
        gbc.writeMem(0x51b5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x3560, gbc.sp());
        EXPECT(0x51b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03C0
        gbc.setState(0x6fb3, 0x42d7, 0xa2b0, 0xaf45, 0x4e7b, 0xa42c, 0x1, 0x0);
        gbc.writeMem(0x6fb3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x42d7, gbc.sp());
        EXPECT(0x6fb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03C1
        gbc.setState(0xaf2d, 0xea0d, 0xaba0, 0x6c51, 0xad2a, 0x52b5, 0x0, 0x1);
        gbc.writeMem(0xaf2d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xea0d, gbc.sp());
        EXPECT(0xaf2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf2d));
        EXPECT(0x32, gbc.readMem(0xaf2e));
        // CB 32 03C2
        gbc.setState(0x492d, 0xee95, 0x5130, 0x6774, 0x3dd3, 0x7c29, 0x0, 0x0);
        gbc.writeMem(0x492d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xee95, gbc.sp());
        EXPECT(0x492f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03C3
        gbc.setState(0x8110, 0x2c57, 0x5b80, 0xb36a, 0x7854, 0xf690, 0x1, 0x0);
        gbc.writeMem(0x8110, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x2c57, gbc.sp());
        EXPECT(0x8112, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8110));
        EXPECT(0x32, gbc.readMem(0x8111));
        // CB 32 03C4
        gbc.setState(0xcabf, 0xfbe4, 0x6ea0, 0xb982, 0xf93a, 0xb826, 0x1, 0x0);
        gbc.writeMem(0xcabf, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xfbe4, gbc.sp());
        EXPECT(0xcac1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcabf));
        EXPECT(0x32, gbc.readMem(0xcac0));
        // CB 32 03C6
        gbc.setState(0x4ea7, 0xa80d, 0xeb50, 0x9a61, 0x7f89, 0x136, 0x0, 0x1);
        gbc.writeMem(0x4ea7, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xa80d, gbc.sp());
        EXPECT(0x4ea9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03C7
        gbc.setState(0x3a67, 0xf1d7, 0xe2a0, 0xfeb2, 0xd31d, 0xf8fc, 0x1, 0x0);
        gbc.writeMem(0x3a67, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xf1d7, gbc.sp());
        EXPECT(0x3a69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03C8
        gbc.setState(0x147c, 0x1ad7, 0x26d0, 0xca6b, 0x550, 0x9729, 0x1, 0x0);
        gbc.writeMem(0x147c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x1ad7, gbc.sp());
        EXPECT(0x147e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03C9
        gbc.setState(0xbc0e, 0xf4ea, 0xdcd0, 0x75c, 0x15e4, 0xc52f, 0x0, 0x0);
        gbc.writeMem(0xbc0e, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xf4ea, gbc.sp());
        EXPECT(0xbc10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc0e));
        EXPECT(0x32, gbc.readMem(0xbc0f));
        // CB 32 03CA
        gbc.setState(0x3bf1, 0x2e19, 0xc850, 0xb4f, 0x504, 0xf53, 0x0, 0x1);
        gbc.writeMem(0x3bf1, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x2e19, gbc.sp());
        EXPECT(0x3bf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03CC
        gbc.setState(0xa045, 0xe55f, 0xc4a0, 0x4b03, 0x6f07, 0x181c, 0x0, 0x1);
        gbc.writeMem(0xa045, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xe55f, gbc.sp());
        EXPECT(0xa047, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa045));
        EXPECT(0x32, gbc.readMem(0xa046));
        // CB 32 03CD
        gbc.setState(0xfc, 0xb3b8, 0xe600, 0x5664, 0x4510, 0x35a9, 0x1, 0x1);
        gbc.writeMem(0xfc, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xb3b8, gbc.sp());
        EXPECT(0xfe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03CE
        gbc.setState(0x4a6d, 0xe287, 0x3010, 0x9186, 0x28f6, 0x4da3, 0x1, 0x0);
        gbc.writeMem(0x4a6d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xe287, gbc.sp());
        EXPECT(0x4a6f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03CF
        gbc.setState(0x2975, 0x9c78, 0xd350, 0x4f21, 0x6449, 0x9c0b, 0x0, 0x0);
        gbc.writeMem(0x2975, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x9c78, gbc.sp());
        EXPECT(0x2977, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03D0
        gbc.setState(0x398a, 0x222f, 0x2100, 0x3f41, 0x470e, 0x8b7, 0x1, 0x0);
        gbc.writeMem(0x398a, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x222f, gbc.sp());
        EXPECT(0x398c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03D1
        gbc.setState(0x5de, 0xc692, 0x2df0, 0x1d3d, 0x47e0, 0xe79d, 0x0, 0x0);
        gbc.writeMem(0x5de, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xc692, gbc.sp());
        EXPECT(0x5e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03D2
        gbc.setState(0x7822, 0xae84, 0xd510, 0xad2c, 0x991c, 0x4df6, 0x1, 0x1);
        gbc.writeMem(0x7822, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xae84, gbc.sp());
        EXPECT(0x7824, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03D3
        gbc.setState(0x1226, 0xc000, 0xa0e0, 0x59b6, 0x5646, 0x2937, 0x0, 0x1);
        gbc.writeMem(0x1226, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xc000, gbc.sp());
        EXPECT(0x1228, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03D4
        gbc.setState(0x65ba, 0x4898, 0xa020, 0xe892, 0xd767, 0x1f6c, 0x0, 0x0);
        gbc.writeMem(0x65ba, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x4898, gbc.sp());
        EXPECT(0x65bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03D5
        gbc.setState(0x3f1d, 0x642c, 0x3b70, 0xbec4, 0x4ecb, 0x88e6, 0x0, 0x1);
        gbc.writeMem(0x3f1d, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x642c, gbc.sp());
        EXPECT(0x3f1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03D6
        gbc.setState(0x1c89, 0x7c41, 0xd700, 0x33e, 0x79b7, 0x5533, 0x1, 0x1);
        gbc.writeMem(0x1c89, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x7c41, gbc.sp());
        EXPECT(0x1c8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03D7
        gbc.setState(0xd21c, 0x745d, 0x2530, 0xd320, 0xac01, 0x1af6, 0x0, 0x0);
        gbc.writeMem(0xd21c, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x745d, gbc.sp());
        EXPECT(0xd21e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd21c));
        EXPECT(0x32, gbc.readMem(0xd21d));
        // CB 32 03D8
        gbc.setState(0x39df, 0x22f7, 0xb3b0, 0x473, 0xe927, 0x1341, 0x1, 0x1);
        gbc.writeMem(0x39df, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x22f7, gbc.sp());
        EXPECT(0x39e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03D9
        gbc.setState(0xe8cd, 0xa813, 0xc290, 0xe80, 0x4f8b, 0xd374, 0x1, 0x0);
        gbc.writeMem(0xe8cd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xa813, gbc.sp());
        EXPECT(0xe8cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8cd));
        EXPECT(0x32, gbc.readMem(0xe8ce));
        // CB 32 03DA
        gbc.setState(0xe979, 0xcfc9, 0x9ae0, 0x8075, 0x82f5, 0xe38b, 0x1, 0x1);
        gbc.writeMem(0xe979, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xcfc9, gbc.sp());
        EXPECT(0xe97b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe979));
        EXPECT(0x32, gbc.readMem(0xe97a));
        // CB 32 03DB
        gbc.setState(0x5cd, 0x4341, 0xb8e0, 0x9c20, 0xb60b, 0x867d, 0x0, 0x1);
        gbc.writeMem(0x5cd, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x4341, gbc.sp());
        EXPECT(0x5cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03DC
        gbc.setState(0xbac0, 0x3ce8, 0x7100, 0xcd0c, 0xbf62, 0x9f80, 0x1, 0x1);
        gbc.writeMem(0xbac0, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x3ce8, gbc.sp());
        EXPECT(0xbac2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbac0));
        EXPECT(0x32, gbc.readMem(0xbac1));
        // CB 32 03DD
        gbc.setState(0xbea5, 0xd568, 0xc330, 0xc38d, 0x136, 0x6aad, 0x1, 0x0);
        gbc.writeMem(0xbea5, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xd568, gbc.sp());
        EXPECT(0xbea7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbea5));
        EXPECT(0x32, gbc.readMem(0xbea6));
        // CB 32 03DE
        gbc.setState(0x4f29, 0xfcd4, 0xe030, 0x6de8, 0xeb95, 0x70b0, 0x1, 0x1);
        gbc.writeMem(0x4f29, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xfcd4, gbc.sp());
        EXPECT(0x4f2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03DF
        gbc.setState(0xea42, 0x6259, 0x62f0, 0x5eb6, 0x209d, 0x56cc, 0x1, 0x0);
        gbc.writeMem(0xea42, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x6259, gbc.sp());
        EXPECT(0xea44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea42));
        EXPECT(0x32, gbc.readMem(0xea43));
        // CB 32 03E0
        gbc.setState(0xc6b3, 0x10fc, 0x1de0, 0xe0c7, 0xf889, 0xeb6d, 0x0, 0x0);
        gbc.writeMem(0xc6b3, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x10fc, gbc.sp());
        EXPECT(0xc6b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6b3));
        EXPECT(0x32, gbc.readMem(0xc6b4));
        // CB 32 03E1
        gbc.setState(0xec96, 0xd91d, 0x10c0, 0x9cc1, 0x11ff, 0x4012, 0x1, 0x0);
        gbc.writeMem(0xec96, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xd91d, gbc.sp());
        EXPECT(0xec98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec96));
        EXPECT(0x32, gbc.readMem(0xec97));
        // CB 32 03E2
        gbc.setState(0x3e93, 0x11b6, 0x8780, 0x7805, 0x9168, 0x6519, 0x0, 0x0);
        gbc.writeMem(0x3e93, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x11b6, gbc.sp());
        EXPECT(0x3e95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03E3
        gbc.setState(0xbca, 0x2128, 0xe730, 0xad55, 0xf579, 0xb4a7, 0x1, 0x1);
        gbc.writeMem(0xbca, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x2128, gbc.sp());
        EXPECT(0xbcc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03E5
        gbc.setState(0x1be9, 0x460b, 0x6ee0, 0x10b2, 0x5f10, 0x89f0, 0x0, 0x0);
        gbc.writeMem(0x1be9, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x460b, gbc.sp());
        EXPECT(0x1beb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 32 03E6
        gbc.setState(0xab21, 0x420c, 0x5480, 0x758e, 0x54bc, 0x5281, 0x1, 0x1);
        gbc.writeMem(0xab21, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x420c, gbc.sp());
        EXPECT(0xab23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab21));
        EXPECT(0x32, gbc.readMem(0xab22));
        // CB 32 03E7
        gbc.setState(0x59a4, 0x6c26, 0x650, 0x4c, 0xb3ea, 0x14de, 0x0, 0x1);
        gbc.writeMem(0x59a4, { 0xcb, 0x32 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x6c26, gbc.sp());
        EXPECT(0x59a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
    }
