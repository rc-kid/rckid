    TEST(gbcemu, opcode_cb_86) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 86 0000
        gbc.setState(0x815c, 0xb704, 0x1950, 0x3612, 0xd28, 0xf36e, 0x0, 0x0);
        gbc.writeMem(0x815c, { 0xcb, 0x86 });
        gbc.writeMem(0xf36e, { 0x5e });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xb704, gbc.sp());
        EXPECT(0x815e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x815c));
        EXPECT(0x86, gbc.readMem(0x815d));
        EXPECT(0x5e, gbc.readMem(0xf36e));
        // CB 86 0004
        gbc.setState(0x5d30, 0xf2f4, 0x5d60, 0xbe1b, 0x7ada, 0x7aed, 0x0, 0x0);
        gbc.writeMem(0x5d30, { 0xcb, 0x86 });
        gbc.writeMem(0x7aed, { 0xba });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xf2f4, gbc.sp());
        EXPECT(0x5d32, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0005
        gbc.setState(0x9065, 0x366c, 0xc390, 0x4a2e, 0xfa75, 0xb0b9, 0x0, 0x0);
        gbc.writeMem(0x9065, { 0xcb, 0x86 });
        gbc.writeMem(0xb0b9, { 0x97 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x366c, gbc.sp());
        EXPECT(0x9067, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9065));
        EXPECT(0x86, gbc.readMem(0x9066));
        EXPECT(0x96, gbc.readMem(0xb0b9));
        // CB 86 0007
        gbc.setState(0xd1, 0x5197, 0xc760, 0x8e55, 0x81b8, 0xe444, 0x1, 0x1);
        gbc.writeMem(0xd1, { 0xcb, 0x86 });
        gbc.writeMem(0xe444, { 0x41 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x5197, gbc.sp());
        EXPECT(0xd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x40, gbc.readMem(0xe444));
        // CB 86 0008
        gbc.setState(0xfb0, 0xb895, 0x62b0, 0xff5d, 0x4258, 0x2e57, 0x0, 0x0);
        gbc.writeMem(0xfb0, { 0xcb, 0x86 });
        gbc.writeMem(0x2e57, { 0xb8 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xb895, gbc.sp());
        EXPECT(0xfb2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0009
        gbc.setState(0xbbdb, 0x9c64, 0x8440, 0xbc2b, 0x2017, 0xc824, 0x1, 0x0);
        gbc.writeMem(0xbbdb, { 0xcb, 0x86 });
        gbc.writeMem(0xc824, { 0xb6 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x9c64, gbc.sp());
        EXPECT(0xbbdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbdb));
        EXPECT(0x86, gbc.readMem(0xbbdc));
        EXPECT(0xb6, gbc.readMem(0xc824));
        // CB 86 000A
        gbc.setState(0x96cb, 0x93d, 0x9010, 0xd8e6, 0xc562, 0x57f, 0x1, 0x1);
        gbc.writeMem(0x57f, { 0x62 });
        gbc.writeMem(0x96cb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x93d, gbc.sp());
        EXPECT(0x96cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96cb));
        EXPECT(0x86, gbc.readMem(0x96cc));
        // CB 86 000B
        gbc.setState(0x737e, 0xdc8a, 0xdf40, 0x54e0, 0xab4, 0xf338, 0x0, 0x0);
        gbc.writeMem(0x737e, { 0xcb, 0x86 });
        gbc.writeMem(0xf338, { 0x9a });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xdc8a, gbc.sp());
        EXPECT(0x7380, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9a, gbc.readMem(0xf338));
        // CB 86 000C
        gbc.setState(0x95dd, 0x50c7, 0x7c40, 0x4829, 0xe6ee, 0xeca7, 0x1, 0x1);
        gbc.writeMem(0x95dd, { 0xcb, 0x86 });
        gbc.writeMem(0xeca7, { 0xd2 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x50c7, gbc.sp());
        EXPECT(0x95df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95dd));
        EXPECT(0x86, gbc.readMem(0x95de));
        EXPECT(0xd2, gbc.readMem(0xeca7));
        // CB 86 000D
        gbc.setState(0x2c5f, 0x7505, 0xea60, 0x529b, 0x741d, 0xf14f, 0x0, 0x1);
        gbc.writeMem(0x2c5f, { 0xcb, 0x86 });
        gbc.writeMem(0xf14f, { 0xd5 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x7505, gbc.sp());
        EXPECT(0x2c61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd4, gbc.readMem(0xf14f));
        // CB 86 000E
        gbc.setState(0x5704, 0xd406, 0xc4a0, 0x7ee5, 0xaf46, 0xfb8, 0x0, 0x0);
        gbc.writeMem(0xfb8, { 0x1a });
        gbc.writeMem(0x5704, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xd406, gbc.sp());
        EXPECT(0x5706, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0010
        gbc.setState(0xa736, 0x4718, 0xc490, 0x20ba, 0xdd29, 0x449b, 0x1, 0x0);
        gbc.writeMem(0x449b, { 0xe4 });
        gbc.writeMem(0xa736, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x4718, gbc.sp());
        EXPECT(0xa738, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa736));
        EXPECT(0x86, gbc.readMem(0xa737));
        // CB 86 0011
        gbc.setState(0x574b, 0x1913, 0x3860, 0xa71b, 0xcbf, 0x5a67, 0x0, 0x0);
        gbc.writeMem(0x574b, { 0xcb, 0x86 });
        gbc.writeMem(0x5a67, { 0x38 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x1913, gbc.sp());
        EXPECT(0x574d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0013
        gbc.setState(0x4c76, 0x7f98, 0x3590, 0x444a, 0x4cef, 0xfcb4, 0x0, 0x1);
        gbc.writeMem(0x4c76, { 0xcb, 0x86 });
        gbc.writeMem(0xfcb4, { 0xac });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x7f98, gbc.sp());
        EXPECT(0x4c78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xac, gbc.readMem(0xfcb4));
        // CB 86 0015
        gbc.setState(0x8dbd, 0x29c6, 0x3b30, 0xc3fc, 0xbc0e, 0xf10b, 0x1, 0x1);
        gbc.writeMem(0x8dbd, { 0xcb, 0x86 });
        gbc.writeMem(0xf10b, { 0xe3 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x29c6, gbc.sp());
        EXPECT(0x8dbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dbd));
        EXPECT(0x86, gbc.readMem(0x8dbe));
        EXPECT(0xe2, gbc.readMem(0xf10b));
        // CB 86 0017
        gbc.setState(0x6b1, 0x5533, 0xe590, 0x1079, 0x4e59, 0xcb64, 0x1, 0x1);
        gbc.writeMem(0x6b1, { 0xcb, 0x86 });
        gbc.writeMem(0xcb64, { 0xcf });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x5533, gbc.sp());
        EXPECT(0x6b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0xcb64));
        // CB 86 0018
        gbc.setState(0x179, 0xc301, 0xe50, 0x12fe, 0x2039, 0x7aa0, 0x1, 0x1);
        gbc.writeMem(0x179, { 0xcb, 0x86 });
        gbc.writeMem(0x7aa0, { 0x94 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xc301, gbc.sp());
        EXPECT(0x17b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 001A
        gbc.setState(0x4c89, 0xde04, 0x21b0, 0x4bcb, 0xc91b, 0xaa39, 0x1, 0x0);
        gbc.writeMem(0x4c89, { 0xcb, 0x86 });
        gbc.writeMem(0xaa39, { 0xf6 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xde04, gbc.sp());
        EXPECT(0x4c8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf6, gbc.readMem(0xaa39));
        // CB 86 001B
        gbc.setState(0x424, 0x2104, 0x88d0, 0xf67c, 0xdc15, 0x54f2, 0x0, 0x1);
        gbc.writeMem(0x424, { 0xcb, 0x86 });
        gbc.writeMem(0x54f2, { 0xa });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x2104, gbc.sp());
        EXPECT(0x426, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 001C
        gbc.setState(0x30d2, 0xca4a, 0xc70, 0x4dbb, 0x1909, 0xdceb, 0x0, 0x1);
        gbc.writeMem(0x30d2, { 0xcb, 0x86 });
        gbc.writeMem(0xdceb, { 0x87 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xca4a, gbc.sp());
        EXPECT(0x30d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xdceb));
        // CB 86 001D
        gbc.setState(0xe0cf, 0xc45, 0x99d0, 0x94a6, 0x6dd, 0x9f75, 0x1, 0x0);
        gbc.writeMem(0x9f75, { 0x3c });
        gbc.writeMem(0xe0cf, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xc45, gbc.sp());
        EXPECT(0xe0d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3c, gbc.readMem(0x9f75));
        EXPECT(0xcb, gbc.readMem(0xe0cf));
        EXPECT(0x86, gbc.readMem(0xe0d0));
        // CB 86 001E
        gbc.setState(0xb55b, 0x5c6c, 0xefa0, 0x678f, 0x4298, 0x80a1, 0x1, 0x1);
        gbc.writeMem(0x80a1, { 0x94 });
        gbc.writeMem(0xb55b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x5c6c, gbc.sp());
        EXPECT(0xb55d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x94, gbc.readMem(0x80a1));
        EXPECT(0xcb, gbc.readMem(0xb55b));
        EXPECT(0x86, gbc.readMem(0xb55c));
        // CB 86 001F
        gbc.setState(0xceb5, 0xa858, 0xaf70, 0x51bf, 0xe3ce, 0xe8ef, 0x0, 0x1);
        gbc.writeMem(0xceb5, { 0xcb, 0x86 });
        gbc.writeMem(0xe8ef, { 0x60 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xa858, gbc.sp());
        EXPECT(0xceb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xceb5));
        EXPECT(0x86, gbc.readMem(0xceb6));
        EXPECT(0x60, gbc.readMem(0xe8ef));
        // CB 86 0020
        gbc.setState(0xdb0b, 0x3b02, 0xb260, 0x31de, 0x2b82, 0x57e9, 0x0, 0x1);
        gbc.writeMem(0x57e9, { 0xb8 });
        gbc.writeMem(0xdb0b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x3b02, gbc.sp());
        EXPECT(0xdb0d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb0b));
        EXPECT(0x86, gbc.readMem(0xdb0c));
        // CB 86 0023
        gbc.setState(0x33db, 0xc440, 0x8e60, 0x1fee, 0xa4cc, 0xe39d, 0x1, 0x0);
        gbc.writeMem(0x33db, { 0xcb, 0x86 });
        gbc.writeMem(0xe39d, { 0xbd });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xc440, gbc.sp());
        EXPECT(0x33dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbc, gbc.readMem(0xe39d));
        // CB 86 0024
        gbc.setState(0xf81, 0xb62a, 0x46c0, 0x28a4, 0xe1c2, 0xed4f, 0x0, 0x0);
        gbc.writeMem(0xf81, { 0xcb, 0x86 });
        gbc.writeMem(0xed4f, { 0xef });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xb62a, gbc.sp());
        EXPECT(0xf83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xed4f));
        // CB 86 0026
        gbc.setState(0x2b2e, 0x2cd2, 0x5860, 0x3dd8, 0x19b2, 0xbb20, 0x0, 0x1);
        gbc.writeMem(0x2b2e, { 0xcb, 0x86 });
        gbc.writeMem(0xbb20, { 0x48 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x2cd2, gbc.sp());
        EXPECT(0x2b30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0xbb20));
        // CB 86 0027
        gbc.setState(0x448b, 0xaa68, 0x83e0, 0xf33e, 0x7f55, 0xb80f, 0x1, 0x0);
        gbc.writeMem(0x448b, { 0xcb, 0x86 });
        gbc.writeMem(0xb80f, { 0x52 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xaa68, gbc.sp());
        EXPECT(0x448d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0xb80f));
        // CB 86 0028
        gbc.setState(0xdc6a, 0xe90b, 0xcde0, 0xe293, 0xf1ea, 0xf2d4, 0x0, 0x1);
        gbc.writeMem(0xdc6a, { 0xcb, 0x86 });
        gbc.writeMem(0xf2d4, { 0x41 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xe90b, gbc.sp());
        EXPECT(0xdc6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc6a));
        EXPECT(0x86, gbc.readMem(0xdc6b));
        EXPECT(0x40, gbc.readMem(0xf2d4));
        // CB 86 0029
        gbc.setState(0xe12f, 0x1e02, 0x9e00, 0x19ac, 0x64fe, 0xdd4a, 0x1, 0x1);
        gbc.writeMem(0xdd4a, { 0x66 });
        gbc.writeMem(0xe12f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x1e02, gbc.sp());
        EXPECT(0xe131, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0xdd4a));
        EXPECT(0xcb, gbc.readMem(0xe12f));
        EXPECT(0x86, gbc.readMem(0xe130));
        // CB 86 002B
        gbc.setState(0xeac2, 0x3ca4, 0x9a80, 0xe9f2, 0x12a, 0xb08c, 0x1, 0x1);
        gbc.writeMem(0xb08c, { 0x9b });
        gbc.writeMem(0xeac2, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x3ca4, gbc.sp());
        EXPECT(0xeac4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9a, gbc.readMem(0xb08c));
        EXPECT(0xcb, gbc.readMem(0xeac2));
        EXPECT(0x86, gbc.readMem(0xeac3));
        // CB 86 002E
        gbc.setState(0xe55d, 0x1613, 0xc330, 0x739, 0x947e, 0x4c40, 0x0, 0x1);
        gbc.writeMem(0x4c40, { 0x38 });
        gbc.writeMem(0xe55d, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x1613, gbc.sp());
        EXPECT(0xe55f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe55d));
        EXPECT(0x86, gbc.readMem(0xe55e));
        // CB 86 002F
        gbc.setState(0x10b1, 0xc7f9, 0xafe0, 0x66db, 0x96ea, 0xb60c, 0x1, 0x0);
        gbc.writeMem(0x10b1, { 0xcb, 0x86 });
        gbc.writeMem(0xb60c, { 0xb0 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xc7f9, gbc.sp());
        EXPECT(0x10b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb0, gbc.readMem(0xb60c));
        // CB 86 0033
        gbc.setState(0x34e8, 0x6809, 0xbc50, 0x6211, 0x9977, 0xbcfd, 0x0, 0x0);
        gbc.writeMem(0x34e8, { 0xcb, 0x86 });
        gbc.writeMem(0xbcfd, { 0x7e });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x6809, gbc.sp());
        EXPECT(0x34ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0xbcfd));
        // CB 86 0034
        gbc.setState(0xfa8, 0x4c45, 0x12a0, 0x2e19, 0x4448, 0xb75c, 0x0, 0x1);
        gbc.writeMem(0xfa8, { 0xcb, 0x86 });
        gbc.writeMem(0xb75c, { 0xa0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x4c45, gbc.sp());
        EXPECT(0xfaa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0xb75c));
        // CB 86 0036
        gbc.setState(0x669f, 0x5f92, 0x9a80, 0x2dcd, 0xf8c4, 0xd2d0, 0x1, 0x1);
        gbc.writeMem(0x669f, { 0xcb, 0x86 });
        gbc.writeMem(0xd2d0, { 0x1 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x5f92, gbc.sp());
        EXPECT(0x66a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x0, gbc.readMem(0xd2d0));
        // CB 86 0039
        gbc.setState(0xeacb, 0x9dd0, 0x8010, 0x7c62, 0xf0d9, 0xdf4a, 0x0, 0x0);
        gbc.writeMem(0xdf4a, { 0x64 });
        gbc.writeMem(0xeacb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x9dd0, gbc.sp());
        EXPECT(0xeacd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x64, gbc.readMem(0xdf4a));
        EXPECT(0xcb, gbc.readMem(0xeacb));
        EXPECT(0x86, gbc.readMem(0xeacc));
        // CB 86 003A
        gbc.setState(0xe8f4, 0x1d96, 0xc7a0, 0x965a, 0xe55d, 0xb50c, 0x1, 0x0);
        gbc.writeMem(0xb50c, { 0xf8 });
        gbc.writeMem(0xe8f4, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x1d96, gbc.sp());
        EXPECT(0xe8f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf8, gbc.readMem(0xb50c));
        EXPECT(0xcb, gbc.readMem(0xe8f4));
        EXPECT(0x86, gbc.readMem(0xe8f5));
        // CB 86 003B
        gbc.setState(0x1c23, 0xe91c, 0x8250, 0xaa0d, 0xf18f, 0x399d, 0x0, 0x0);
        gbc.writeMem(0x1c23, { 0xcb, 0x86 });
        gbc.writeMem(0x399d, { 0x9e });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xe91c, gbc.sp());
        EXPECT(0x1c25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 003C
        gbc.setState(0x3038, 0x5100, 0x28f0, 0x106e, 0xd587, 0xbecf, 0x1, 0x1);
        gbc.writeMem(0x3038, { 0xcb, 0x86 });
        gbc.writeMem(0xbecf, { 0x30 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x5100, gbc.sp());
        EXPECT(0x303a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x30, gbc.readMem(0xbecf));
        // CB 86 003D
        gbc.setState(0x2525, 0x9df3, 0x290, 0xb87d, 0x5560, 0xab3, 0x1, 0x1);
        gbc.writeMem(0xab3, { 0xf2 });
        gbc.writeMem(0x2525, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x9df3, gbc.sp());
        EXPECT(0x2527, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0042
        gbc.setState(0x90aa, 0xc366, 0x3510, 0x61d3, 0xab5b, 0xc597, 0x1, 0x1);
        gbc.writeMem(0x90aa, { 0xcb, 0x86 });
        gbc.writeMem(0xc597, { 0x47 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xc366, gbc.sp());
        EXPECT(0x90ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90aa));
        EXPECT(0x86, gbc.readMem(0x90ab));
        EXPECT(0x46, gbc.readMem(0xc597));
        // CB 86 0045
        gbc.setState(0x725c, 0xba15, 0x2fc0, 0x3ad, 0xf2c, 0xd5de, 0x0, 0x0);
        gbc.writeMem(0x725c, { 0xcb, 0x86 });
        gbc.writeMem(0xd5de, { 0xde });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xba15, gbc.sp());
        EXPECT(0x725e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xde, gbc.readMem(0xd5de));
        // CB 86 0046
        gbc.setState(0x5e18, 0x89d2, 0xdcb0, 0x5d31, 0xf04e, 0xcd72, 0x0, 0x0);
        gbc.writeMem(0x5e18, { 0xcb, 0x86 });
        gbc.writeMem(0xcd72, { 0xf2 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x89d2, gbc.sp());
        EXPECT(0x5e1a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0xcd72));
        // CB 86 0047
        gbc.setState(0x8449, 0xc071, 0x6c0, 0xc5e0, 0x5356, 0xe996, 0x0, 0x0);
        gbc.writeMem(0x8449, { 0xcb, 0x86 });
        gbc.writeMem(0xe996, { 0xbe });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xc071, gbc.sp());
        EXPECT(0x844b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8449));
        EXPECT(0x86, gbc.readMem(0x844a));
        EXPECT(0xbe, gbc.readMem(0xe996));
        // CB 86 0049
        gbc.setState(0x723f, 0x11e6, 0x83e0, 0x5464, 0x5e86, 0x8460, 0x0, 0x1);
        gbc.writeMem(0x723f, { 0xcb, 0x86 });
        gbc.writeMem(0x8460, { 0x4e });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x11e6, gbc.sp());
        EXPECT(0x7241, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0x8460));
        // CB 86 004A
        gbc.setState(0xf1d, 0x76d7, 0x1ae0, 0x8ca4, 0x5fca, 0x83dd, 0x1, 0x0);
        gbc.writeMem(0xf1d, { 0xcb, 0x86 });
        gbc.writeMem(0x83dd, { 0xcf });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x76d7, gbc.sp());
        EXPECT(0xf1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0x83dd));
        // CB 86 004B
        gbc.setState(0x5796, 0xd9f8, 0x75c0, 0xeff1, 0x344d, 0x1e06, 0x0, 0x1);
        gbc.writeMem(0x1e06, { 0xe });
        gbc.writeMem(0x5796, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xd9f8, gbc.sp());
        EXPECT(0x5798, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 004C
        gbc.setState(0x3760, 0x1acc, 0xd90, 0xd6bd, 0xfc3, 0xd5c0, 0x0, 0x1);
        gbc.writeMem(0x3760, { 0xcb, 0x86 });
        gbc.writeMem(0xd5c0, { 0x49 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x1acc, gbc.sp());
        EXPECT(0x3762, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0xd5c0));
        // CB 86 004D
        gbc.setState(0xc2ae, 0x71d5, 0x6020, 0x12e, 0x3d4, 0x96c3, 0x1, 0x1);
        gbc.writeMem(0x96c3, { 0xcd });
        gbc.writeMem(0xc2ae, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x71d5, gbc.sp());
        EXPECT(0xc2b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x96c3));
        EXPECT(0xcb, gbc.readMem(0xc2ae));
        EXPECT(0x86, gbc.readMem(0xc2af));
        // CB 86 004F
        gbc.setState(0x2978, 0x291f, 0xce30, 0xd0fb, 0x8885, 0x7b2b, 0x0, 0x1);
        gbc.writeMem(0x2978, { 0xcb, 0x86 });
        gbc.writeMem(0x7b2b, { 0x18 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x291f, gbc.sp());
        EXPECT(0x297a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0050
        gbc.setState(0x9121, 0x816c, 0xc40, 0x197, 0xdf5d, 0xd915, 0x0, 0x1);
        gbc.writeMem(0x9121, { 0xcb, 0x86 });
        gbc.writeMem(0xd915, { 0xc5 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x816c, gbc.sp());
        EXPECT(0x9123, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9121));
        EXPECT(0x86, gbc.readMem(0x9122));
        EXPECT(0xc4, gbc.readMem(0xd915));
        // CB 86 0052
        gbc.setState(0xd9f5, 0x91e7, 0xf400, 0x166a, 0xd77e, 0x2c7e, 0x1, 0x1);
        gbc.writeMem(0x2c7e, { 0x8 });
        gbc.writeMem(0xd9f5, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x91e7, gbc.sp());
        EXPECT(0xd9f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9f5));
        EXPECT(0x86, gbc.readMem(0xd9f6));
        // CB 86 0055
        gbc.setState(0xca41, 0x2d2c, 0xcee0, 0x3, 0x672, 0xdc02, 0x0, 0x1);
        gbc.writeMem(0xca41, { 0xcb, 0x86 });
        gbc.writeMem(0xdc02, { 0x37 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x2d2c, gbc.sp());
        EXPECT(0xca43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca41));
        EXPECT(0x86, gbc.readMem(0xca42));
        EXPECT(0x36, gbc.readMem(0xdc02));
        // CB 86 0056
        gbc.setState(0x77ed, 0xfade, 0x1680, 0x1916, 0x764b, 0xe427, 0x0, 0x0);
        gbc.writeMem(0x77ed, { 0xcb, 0x86 });
        gbc.writeMem(0xe427, { 0xe4 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xfade, gbc.sp());
        EXPECT(0x77ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0xe427));
        // CB 86 0057
        gbc.setState(0x9b47, 0xbf95, 0xa030, 0xc017, 0xe684, 0xe838, 0x1, 0x0);
        gbc.writeMem(0x9b47, { 0xcb, 0x86 });
        gbc.writeMem(0xe838, { 0xcf });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xbf95, gbc.sp());
        EXPECT(0x9b49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b47));
        EXPECT(0x86, gbc.readMem(0x9b48));
        EXPECT(0xce, gbc.readMem(0xe838));
        // CB 86 0058
        gbc.setState(0xd824, 0x82f0, 0xd2a0, 0x6416, 0xc882, 0x456f, 0x1, 0x0);
        gbc.writeMem(0x456f, { 0xa2 });
        gbc.writeMem(0xd824, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x82f0, gbc.sp());
        EXPECT(0xd826, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd824));
        EXPECT(0x86, gbc.readMem(0xd825));
        // CB 86 0059
        gbc.setState(0x1c3, 0xfa10, 0x2a50, 0x8d9c, 0x9505, 0xd189, 0x0, 0x1);
        gbc.writeMem(0x1c3, { 0xcb, 0x86 });
        gbc.writeMem(0xd189, { 0x95 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xfa10, gbc.sp());
        EXPECT(0x1c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x94, gbc.readMem(0xd189));
        // CB 86 005A
        gbc.setState(0xcb8b, 0xa000, 0x4fb0, 0x3ed8, 0xd900, 0xd525, 0x1, 0x0);
        gbc.writeMem(0xcb8b, { 0xcb, 0x86 });
        gbc.writeMem(0xd525, { 0x67 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xa000, gbc.sp());
        EXPECT(0xcb8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb8b));
        EXPECT(0x86, gbc.readMem(0xcb8c));
        EXPECT(0x66, gbc.readMem(0xd525));
        // CB 86 005C
        gbc.setState(0xe9e6, 0xb030, 0xfc10, 0x9992, 0xa737, 0x3595, 0x1, 0x1);
        gbc.writeMem(0x3595, { 0xfe });
        gbc.writeMem(0xe9e6, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xb030, gbc.sp());
        EXPECT(0xe9e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9e6));
        EXPECT(0x86, gbc.readMem(0xe9e7));
        // CB 86 005D
        gbc.setState(0x8c52, 0x4306, 0x15f0, 0xb0e6, 0x388b, 0xd63a, 0x1, 0x0);
        gbc.writeMem(0x8c52, { 0xcb, 0x86 });
        gbc.writeMem(0xd63a, { 0xb6 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x4306, gbc.sp());
        EXPECT(0x8c54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c52));
        EXPECT(0x86, gbc.readMem(0x8c53));
        EXPECT(0xb6, gbc.readMem(0xd63a));
        // CB 86 005E
        gbc.setState(0x7a5a, 0x2990, 0x4e30, 0x1751, 0x3ae3, 0x8186, 0x1, 0x0);
        gbc.writeMem(0x7a5a, { 0xcb, 0x86 });
        gbc.writeMem(0x8186, { 0x90 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x2990, gbc.sp());
        EXPECT(0x7a5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0x8186));
        // CB 86 0060
        gbc.setState(0xa0a3, 0x7abb, 0xa3c0, 0xc6d5, 0x16b0, 0x4c4e, 0x1, 0x1);
        gbc.writeMem(0x4c4e, { 0xcc });
        gbc.writeMem(0xa0a3, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x7abb, gbc.sp());
        EXPECT(0xa0a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0a3));
        EXPECT(0x86, gbc.readMem(0xa0a4));
        // CB 86 0061
        gbc.setState(0xeea9, 0xfdca, 0xb310, 0xd01, 0x2e29, 0x8b1a, 0x1, 0x0);
        gbc.writeMem(0x8b1a, { 0xe2 });
        gbc.writeMem(0xeea9, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xfdca, gbc.sp());
        EXPECT(0xeeab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe2, gbc.readMem(0x8b1a));
        EXPECT(0xcb, gbc.readMem(0xeea9));
        EXPECT(0x86, gbc.readMem(0xeeaa));
        // CB 86 0062
        gbc.setState(0xe3bc, 0x310d, 0xd7a0, 0xad84, 0x872b, 0xe97f, 0x0, 0x1);
        gbc.writeMem(0xe3bc, { 0xcb, 0x86 });
        gbc.writeMem(0xe97f, { 0x0 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x310d, gbc.sp());
        EXPECT(0xe3be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3bc));
        EXPECT(0x86, gbc.readMem(0xe3bd));
        EXPECT(0x0, gbc.readMem(0xe97f));
        // CB 86 0064
        gbc.setState(0xe5c8, 0x14a5, 0xcb30, 0x1679, 0xe606, 0xd173, 0x1, 0x1);
        gbc.writeMem(0xd173, { 0x5d });
        gbc.writeMem(0xe5c8, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x14a5, gbc.sp());
        EXPECT(0xe5ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5c, gbc.readMem(0xd173));
        EXPECT(0xcb, gbc.readMem(0xe5c8));
        EXPECT(0x86, gbc.readMem(0xe5c9));
        // CB 86 0065
        gbc.setState(0x7a3f, 0x482c, 0x2760, 0xf19, 0x58a0, 0xc285, 0x1, 0x0);
        gbc.writeMem(0x7a3f, { 0xcb, 0x86 });
        gbc.writeMem(0xc285, { 0xb4 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x482c, gbc.sp());
        EXPECT(0x7a41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0xc285));
        // CB 86 0066
        gbc.setState(0xdc05, 0xc71c, 0x3550, 0xbf17, 0x2c85, 0xac64, 0x0, 0x1);
        gbc.writeMem(0xac64, { 0x9 });
        gbc.writeMem(0xdc05, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xc71c, gbc.sp());
        EXPECT(0xdc07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8, gbc.readMem(0xac64));
        EXPECT(0xcb, gbc.readMem(0xdc05));
        EXPECT(0x86, gbc.readMem(0xdc06));
        // CB 86 0068
        gbc.setState(0x10df, 0x9390, 0x36d0, 0x45, 0x24a2, 0xc817, 0x1, 0x1);
        gbc.writeMem(0x10df, { 0xcb, 0x86 });
        gbc.writeMem(0xc817, { 0xef });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x9390, gbc.sp());
        EXPECT(0x10e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xc817));
        // CB 86 0069
        gbc.setState(0x4455, 0xe5e3, 0x8590, 0xf57b, 0x4efb, 0x55e2, 0x0, 0x0);
        gbc.writeMem(0x4455, { 0xcb, 0x86 });
        gbc.writeMem(0x55e2, { 0x58 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xe5e3, gbc.sp());
        EXPECT(0x4457, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 006A
        gbc.setState(0x8ab, 0x42bb, 0x2950, 0x4a35, 0x544d, 0xb797, 0x0, 0x1);
        gbc.writeMem(0x8ab, { 0xcb, 0x86 });
        gbc.writeMem(0xb797, { 0x1d });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x42bb, gbc.sp());
        EXPECT(0x8ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0xb797));
        // CB 86 006C
        gbc.setState(0xd224, 0x2fdc, 0x3320, 0x96b5, 0x23bd, 0xc417, 0x0, 0x0);
        gbc.writeMem(0xc417, { 0xee });
        gbc.writeMem(0xd224, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x2fdc, gbc.sp());
        EXPECT(0xd226, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xc417));
        EXPECT(0xcb, gbc.readMem(0xd224));
        EXPECT(0x86, gbc.readMem(0xd225));
        // CB 86 006D
        gbc.setState(0xd6ff, 0xea6, 0xf620, 0xad8, 0xb79a, 0xfe14, 0x1, 0x1);
        gbc.writeMem(0xd6ff, { 0xcb, 0x86 });
        gbc.writeMem(0xfe14, { 0xd7 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xea6, gbc.sp());
        EXPECT(0xd701, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6ff));
        EXPECT(0x86, gbc.readMem(0xd700));
        EXPECT(0xd6, gbc.readMem(0xfe14));
        // CB 86 006F
        gbc.setState(0xad9b, 0xe6aa, 0xfce0, 0xaf2e, 0xb4f, 0x5ca3, 0x1, 0x0);
        gbc.writeMem(0x5ca3, { 0x3e });
        gbc.writeMem(0xad9b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xe6aa, gbc.sp());
        EXPECT(0xad9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad9b));
        EXPECT(0x86, gbc.readMem(0xad9c));
        // CB 86 0070
        gbc.setState(0x9b94, 0x2443, 0x9960, 0xaf3e, 0x56b9, 0xbd5, 0x1, 0x1);
        gbc.writeMem(0xbd5, { 0x34 });
        gbc.writeMem(0x9b94, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x2443, gbc.sp());
        EXPECT(0x9b96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b94));
        EXPECT(0x86, gbc.readMem(0x9b95));
        // CB 86 0071
        gbc.setState(0x4672, 0x10b5, 0x1080, 0x10f4, 0xffc6, 0x81fb, 0x0, 0x1);
        gbc.writeMem(0x4672, { 0xcb, 0x86 });
        gbc.writeMem(0x81fb, { 0x67 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x10b5, gbc.sp());
        EXPECT(0x4674, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0x81fb));
        // CB 86 0072
        gbc.setState(0x9a17, 0x1cdd, 0x4ca0, 0xefe9, 0x7d70, 0xc8f6, 0x1, 0x1);
        gbc.writeMem(0x9a17, { 0xcb, 0x86 });
        gbc.writeMem(0xc8f6, { 0x52 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x1cdd, gbc.sp());
        EXPECT(0x9a19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a17));
        EXPECT(0x86, gbc.readMem(0x9a18));
        EXPECT(0x52, gbc.readMem(0xc8f6));
        // CB 86 0073
        gbc.setState(0x3c84, 0xeb3e, 0x27c0, 0x8fdb, 0xd642, 0xa313, 0x0, 0x1);
        gbc.writeMem(0x3c84, { 0xcb, 0x86 });
        gbc.writeMem(0xa313, { 0xe4 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xeb3e, gbc.sp());
        EXPECT(0x3c86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0xa313));
        // CB 86 0074
        gbc.setState(0x5ee6, 0xaddc, 0x7760, 0x1c45, 0xee54, 0xa356, 0x0, 0x0);
        gbc.writeMem(0x5ee6, { 0xcb, 0x86 });
        gbc.writeMem(0xa356, { 0x8e });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xaddc, gbc.sp());
        EXPECT(0x5ee8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8e, gbc.readMem(0xa356));
        // CB 86 0075
        gbc.setState(0xe1f, 0x57e2, 0xe6e0, 0x560, 0x5a09, 0xcb9c, 0x0, 0x0);
        gbc.writeMem(0xe1f, { 0xcb, 0x86 });
        gbc.writeMem(0xcb9c, { 0x46 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x57e2, gbc.sp());
        EXPECT(0xe21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x46, gbc.readMem(0xcb9c));
        // CB 86 0076
        gbc.setState(0xa8b3, 0xeec8, 0x460, 0x684c, 0x23e1, 0x9437, 0x1, 0x0);
        gbc.writeMem(0x9437, { 0x50 });
        gbc.writeMem(0xa8b3, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xeec8, gbc.sp());
        EXPECT(0xa8b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0x9437));
        EXPECT(0xcb, gbc.readMem(0xa8b3));
        EXPECT(0x86, gbc.readMem(0xa8b4));
        // CB 86 0077
        gbc.setState(0x438d, 0x99d7, 0xa9c0, 0x2074, 0xcf59, 0xa00f, 0x1, 0x0);
        gbc.writeMem(0x438d, { 0xcb, 0x86 });
        gbc.writeMem(0xa00f, { 0x28 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x99d7, gbc.sp());
        EXPECT(0x438f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0xa00f));
        // CB 86 0078
        gbc.setState(0x1b29, 0xf284, 0xb540, 0xfebe, 0xfa2, 0x7fa9, 0x0, 0x0);
        gbc.writeMem(0x1b29, { 0xcb, 0x86 });
        gbc.writeMem(0x7fa9, { 0xc8 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xf284, gbc.sp());
        EXPECT(0x1b2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0079
        gbc.setState(0xa491, 0x4cf4, 0x6770, 0xef66, 0xa36a, 0xbea3, 0x1, 0x0);
        gbc.writeMem(0xa491, { 0xcb, 0x86 });
        gbc.writeMem(0xbea3, { 0x31 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x4cf4, gbc.sp());
        EXPECT(0xa493, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa491));
        EXPECT(0x86, gbc.readMem(0xa492));
        EXPECT(0x30, gbc.readMem(0xbea3));
        // CB 86 007A
        gbc.setState(0xb86e, 0x8a7a, 0x6310, 0x83bc, 0x3051, 0x20fa, 0x1, 0x1);
        gbc.writeMem(0x20fa, { 0x18 });
        gbc.writeMem(0xb86e, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x8a7a, gbc.sp());
        EXPECT(0xb870, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb86e));
        EXPECT(0x86, gbc.readMem(0xb86f));
        // CB 86 007B
        gbc.setState(0x2e57, 0xb209, 0xe8b0, 0xeb10, 0x73a, 0xf8e8, 0x1, 0x0);
        gbc.writeMem(0x2e57, { 0xcb, 0x86 });
        gbc.writeMem(0xf8e8, { 0xe7 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xb209, gbc.sp());
        EXPECT(0x2e59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe6, gbc.readMem(0xf8e8));
        // CB 86 007C
        gbc.setState(0xa38b, 0x9fe0, 0x49f0, 0xd30f, 0x7fc5, 0xae75, 0x0, 0x0);
        gbc.writeMem(0xa38b, { 0xcb, 0x86 });
        gbc.writeMem(0xae75, { 0xa9 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x9fe0, gbc.sp());
        EXPECT(0xa38d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa38b));
        EXPECT(0x86, gbc.readMem(0xa38c));
        EXPECT(0xa8, gbc.readMem(0xae75));
        // CB 86 007D
        gbc.setState(0x100d, 0x6238, 0x38a0, 0x4f27, 0x7943, 0xb0cf, 0x0, 0x1);
        gbc.writeMem(0x100d, { 0xcb, 0x86 });
        gbc.writeMem(0xb0cf, { 0xd7 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x6238, gbc.sp());
        EXPECT(0x100f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0xb0cf));
        // CB 86 007E
        gbc.setState(0x7022, 0xc9b0, 0xeb0, 0xb909, 0x62f0, 0xc291, 0x1, 0x0);
        gbc.writeMem(0x7022, { 0xcb, 0x86 });
        gbc.writeMem(0xc291, { 0xc5 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xc9b0, gbc.sp());
        EXPECT(0x7024, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xc291));
        // CB 86 007F
        gbc.setState(0xc2ae, 0xda, 0xc5a0, 0x37b7, 0xf149, 0x3f91, 0x0, 0x1);
        gbc.writeMem(0x3f91, { 0x6e });
        gbc.writeMem(0xc2ae, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xda, gbc.sp());
        EXPECT(0xc2b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2ae));
        EXPECT(0x86, gbc.readMem(0xc2af));
        // CB 86 0081
        gbc.setState(0x80bb, 0xb95c, 0x2230, 0x161c, 0x55d6, 0x2094, 0x0, 0x0);
        gbc.writeMem(0x2094, { 0x42 });
        gbc.writeMem(0x80bb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xb95c, gbc.sp());
        EXPECT(0x80bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80bb));
        EXPECT(0x86, gbc.readMem(0x80bc));
        // CB 86 0082
        gbc.setState(0xa341, 0x22e3, 0xa130, 0xd4f1, 0xab1b, 0x5d73, 0x0, 0x0);
        gbc.writeMem(0x5d73, { 0xb8 });
        gbc.writeMem(0xa341, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x22e3, gbc.sp());
        EXPECT(0xa343, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa341));
        EXPECT(0x86, gbc.readMem(0xa342));
        // CB 86 0083
        gbc.setState(0x9195, 0x44c1, 0x2030, 0x143e, 0x5b2c, 0xc667, 0x0, 0x0);
        gbc.writeMem(0x9195, { 0xcb, 0x86 });
        gbc.writeMem(0xc667, { 0xcf });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x44c1, gbc.sp());
        EXPECT(0x9197, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9195));
        EXPECT(0x86, gbc.readMem(0x9196));
        EXPECT(0xce, gbc.readMem(0xc667));
        // CB 86 0085
        gbc.setState(0x3f95, 0x57c4, 0x8e90, 0x4d55, 0xcc38, 0x193f, 0x1, 0x1);
        gbc.writeMem(0x193f, { 0x7c });
        gbc.writeMem(0x3f95, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x57c4, gbc.sp());
        EXPECT(0x3f97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0086
        gbc.setState(0x392b, 0x4215, 0x2e80, 0xac31, 0xcb72, 0xd2e7, 0x0, 0x0);
        gbc.writeMem(0x392b, { 0xcb, 0x86 });
        gbc.writeMem(0xd2e7, { 0x58 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x4215, gbc.sp());
        EXPECT(0x392d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0xd2e7));
        // CB 86 008A
        gbc.setState(0x9d5f, 0x21ff, 0xa3d0, 0x7e3f, 0x97d, 0x1d74, 0x0, 0x1);
        gbc.writeMem(0x1d74, { 0x98 });
        gbc.writeMem(0x9d5f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x21ff, gbc.sp());
        EXPECT(0x9d61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d5f));
        EXPECT(0x86, gbc.readMem(0x9d60));
        // CB 86 008B
        gbc.setState(0xdbfa, 0x9165, 0x9e30, 0x1f2e, 0xca62, 0x8b65, 0x1, 0x0);
        gbc.writeMem(0x8b65, { 0xd4 });
        gbc.writeMem(0xdbfa, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x9165, gbc.sp());
        EXPECT(0xdbfc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd4, gbc.readMem(0x8b65));
        EXPECT(0xcb, gbc.readMem(0xdbfa));
        EXPECT(0x86, gbc.readMem(0xdbfb));
        // CB 86 008C
        gbc.setState(0x9e3f, 0x72b1, 0x1630, 0x125c, 0x70c3, 0xeef5, 0x1, 0x0);
        gbc.writeMem(0x9e3f, { 0xcb, 0x86 });
        gbc.writeMem(0xeef5, { 0xd9 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x72b1, gbc.sp());
        EXPECT(0x9e41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e3f));
        EXPECT(0x86, gbc.readMem(0x9e40));
        EXPECT(0xd8, gbc.readMem(0xeef5));
        // CB 86 008E
        gbc.setState(0x27b5, 0x114a, 0x6580, 0x48f8, 0x2f41, 0xb6b9, 0x1, 0x0);
        gbc.writeMem(0x27b5, { 0xcb, 0x86 });
        gbc.writeMem(0xb6b9, { 0x6d });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x114a, gbc.sp());
        EXPECT(0x27b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6c, gbc.readMem(0xb6b9));
        // CB 86 008F
        gbc.setState(0x69a3, 0x80cc, 0x7790, 0xb43a, 0xc375, 0x5341, 0x1, 0x1);
        gbc.writeMem(0x5341, { 0x7a });
        gbc.writeMem(0x69a3, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x80cc, gbc.sp());
        EXPECT(0x69a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0091
        gbc.setState(0x2ece, 0x2861, 0xdeb0, 0xfb06, 0x5b7b, 0xaa5a, 0x0, 0x1);
        gbc.writeMem(0x2ece, { 0xcb, 0x86 });
        gbc.writeMem(0xaa5a, { 0xcf });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x2861, gbc.sp());
        EXPECT(0x2ed0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0xaa5a));
        // CB 86 0092
        gbc.setState(0xb0c, 0x1b8, 0x4630, 0x2bba, 0x3521, 0xf0cf, 0x0, 0x0);
        gbc.writeMem(0xb0c, { 0xcb, 0x86 });
        gbc.writeMem(0xf0cf, { 0x62 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x1b8, gbc.sp());
        EXPECT(0xb0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0xf0cf));
        // CB 86 0093
        gbc.setState(0x8310, 0x9190, 0x7b30, 0xd60c, 0xc231, 0xa5cc, 0x0, 0x1);
        gbc.writeMem(0x8310, { 0xcb, 0x86 });
        gbc.writeMem(0xa5cc, { 0xa4 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x9190, gbc.sp());
        EXPECT(0x8312, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8310));
        EXPECT(0x86, gbc.readMem(0x8311));
        EXPECT(0xa4, gbc.readMem(0xa5cc));
        // CB 86 0094
        gbc.setState(0x3985, 0xda15, 0x2ed0, 0x8038, 0x4776, 0xd6a3, 0x1, 0x0);
        gbc.writeMem(0x3985, { 0xcb, 0x86 });
        gbc.writeMem(0xd6a3, { 0x6f });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xda15, gbc.sp());
        EXPECT(0x3987, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6e, gbc.readMem(0xd6a3));
        // CB 86 0095
        gbc.setState(0x70db, 0xe7d, 0x6f70, 0x585d, 0xe4ac, 0xb775, 0x1, 0x0);
        gbc.writeMem(0x70db, { 0xcb, 0x86 });
        gbc.writeMem(0xb775, { 0x12 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xe7d, gbc.sp());
        EXPECT(0x70dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0xb775));
        // CB 86 0097
        gbc.setState(0xc883, 0x20ce, 0x4fa0, 0xb1c5, 0xe0e7, 0xdf09, 0x0, 0x1);
        gbc.writeMem(0xc883, { 0xcb, 0x86 });
        gbc.writeMem(0xdf09, { 0x6f });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x20ce, gbc.sp());
        EXPECT(0xc885, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc883));
        EXPECT(0x86, gbc.readMem(0xc884));
        EXPECT(0x6e, gbc.readMem(0xdf09));
        // CB 86 0099
        gbc.setState(0x4b1, 0x99c5, 0xf5d0, 0x739f, 0x4f6d, 0x87a1, 0x1, 0x0);
        gbc.writeMem(0x4b1, { 0xcb, 0x86 });
        gbc.writeMem(0x87a1, { 0xd });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x99c5, gbc.sp());
        EXPECT(0x4b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc, gbc.readMem(0x87a1));
        // CB 86 009A
        gbc.setState(0xac5f, 0xc637, 0x6070, 0x28f, 0xf76e, 0xa52, 0x0, 0x0);
        gbc.writeMem(0xa52, { 0x7a });
        gbc.writeMem(0xac5f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xc637, gbc.sp());
        EXPECT(0xac61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac5f));
        EXPECT(0x86, gbc.readMem(0xac60));
        // CB 86 009C
        gbc.setState(0x96be, 0x7eba, 0x9c40, 0xafc8, 0xd76b, 0xab9d, 0x0, 0x0);
        gbc.writeMem(0x96be, { 0xcb, 0x86 });
        gbc.writeMem(0xab9d, { 0x4a });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x7eba, gbc.sp());
        EXPECT(0x96c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96be));
        EXPECT(0x86, gbc.readMem(0x96bf));
        EXPECT(0x4a, gbc.readMem(0xab9d));
        // CB 86 009D
        gbc.setState(0xd627, 0xd369, 0x96b0, 0xcf76, 0x7a65, 0xa689, 0x1, 0x1);
        gbc.writeMem(0xa689, { 0xb4 });
        gbc.writeMem(0xd627, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xd369, gbc.sp());
        EXPECT(0xd629, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0xa689));
        EXPECT(0xcb, gbc.readMem(0xd627));
        EXPECT(0x86, gbc.readMem(0xd628));
        // CB 86 009E
        gbc.setState(0xe6df, 0xef03, 0xdfa0, 0xfab8, 0xf0f, 0xfb37, 0x1, 0x1);
        gbc.writeMem(0xe6df, { 0xcb, 0x86 });
        gbc.writeMem(0xfb37, { 0x13 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xef03, gbc.sp());
        EXPECT(0xe6e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6df));
        EXPECT(0x86, gbc.readMem(0xe6e0));
        EXPECT(0x12, gbc.readMem(0xfb37));
        // CB 86 009F
        gbc.setState(0xa66b, 0xf9cc, 0x27c0, 0x2e6d, 0xfa6d, 0xff14, 0x0, 0x1);
        gbc.writeMem(0xa66b, { 0xcb, 0x86 });
        gbc.writeMem(0xff14, { 0xae });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xf9cc, gbc.sp());
        EXPECT(0xa66d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa66b));
        EXPECT(0x86, gbc.readMem(0xa66c));
        EXPECT(0xae, gbc.readMem(0xff14));
        // CB 86 00A0
        gbc.setState(0xc1cf, 0x4659, 0xca60, 0xdf42, 0x6f71, 0x9656, 0x0, 0x1);
        gbc.writeMem(0x9656, { 0xcc });
        gbc.writeMem(0xc1cf, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x4659, gbc.sp());
        EXPECT(0xc1d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9656));
        EXPECT(0xcb, gbc.readMem(0xc1cf));
        EXPECT(0x86, gbc.readMem(0xc1d0));
        // CB 86 00A1
        gbc.setState(0x2f5f, 0x55b0, 0x7490, 0x38a7, 0x1534, 0x179e, 0x1, 0x0);
        gbc.writeMem(0x179e, { 0x88 });
        gbc.writeMem(0x2f5f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x55b0, gbc.sp());
        EXPECT(0x2f61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 00A2
        gbc.setState(0x70f2, 0xf61e, 0x9f40, 0xec27, 0x6e1b, 0xe48e, 0x0, 0x0);
        gbc.writeMem(0x70f2, { 0xcb, 0x86 });
        gbc.writeMem(0xe48e, { 0x27 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xf61e, gbc.sp());
        EXPECT(0x70f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x26, gbc.readMem(0xe48e));
        // CB 86 00A4
        gbc.setState(0x92e6, 0x952c, 0x2560, 0x4620, 0x7d08, 0xaf7c, 0x1, 0x1);
        gbc.writeMem(0x92e6, { 0xcb, 0x86 });
        gbc.writeMem(0xaf7c, { 0x5f });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x952c, gbc.sp());
        EXPECT(0x92e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92e6));
        EXPECT(0x86, gbc.readMem(0x92e7));
        EXPECT(0x5e, gbc.readMem(0xaf7c));
        // CB 86 00A6
        gbc.setState(0xa5f3, 0x964c, 0x32d0, 0x9456, 0x5886, 0x7927, 0x0, 0x1);
        gbc.writeMem(0x7927, { 0xe8 });
        gbc.writeMem(0xa5f3, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x964c, gbc.sp());
        EXPECT(0xa5f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5f3));
        EXPECT(0x86, gbc.readMem(0xa5f4));
        // CB 86 00A9
        gbc.setState(0xabc5, 0x5f15, 0xc630, 0x82fb, 0x7c68, 0xbdb0, 0x1, 0x1);
        gbc.writeMem(0xabc5, { 0xcb, 0x86 });
        gbc.writeMem(0xbdb0, { 0x25 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x5f15, gbc.sp());
        EXPECT(0xabc7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabc5));
        EXPECT(0x86, gbc.readMem(0xabc6));
        EXPECT(0x24, gbc.readMem(0xbdb0));
        // CB 86 00AB
        gbc.setState(0xe7a6, 0xfe59, 0x94c0, 0xb3e2, 0x2d3e, 0x8846, 0x1, 0x0);
        gbc.writeMem(0x8846, { 0x18 });
        gbc.writeMem(0xe7a6, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xfe59, gbc.sp());
        EXPECT(0xe7a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x18, gbc.readMem(0x8846));
        EXPECT(0xcb, gbc.readMem(0xe7a6));
        EXPECT(0x86, gbc.readMem(0xe7a7));
        // CB 86 00AC
        gbc.setState(0x25d5, 0x950, 0xd350, 0xa155, 0x887a, 0xd9d4, 0x1, 0x1);
        gbc.writeMem(0x25d5, { 0xcb, 0x86 });
        gbc.writeMem(0xd9d4, { 0xd2 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x950, gbc.sp());
        EXPECT(0x25d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0xd9d4));
        // CB 86 00AD
        gbc.setState(0xbdcb, 0x5d7e, 0x7300, 0xd51b, 0xb81c, 0x2dab, 0x0, 0x1);
        gbc.writeMem(0x2dab, { 0xa4 });
        gbc.writeMem(0xbdcb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x5d7e, gbc.sp());
        EXPECT(0xbdcd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdcb));
        EXPECT(0x86, gbc.readMem(0xbdcc));
        // CB 86 00AE
        gbc.setState(0x51d3, 0xb556, 0x7c30, 0xbed4, 0xa017, 0xf3cc, 0x1, 0x0);
        gbc.writeMem(0x51d3, { 0xcb, 0x86 });
        gbc.writeMem(0xf3cc, { 0x98 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xb556, gbc.sp());
        EXPECT(0x51d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0xf3cc));
        // CB 86 00B0
        gbc.setState(0x362f, 0x32c3, 0xc160, 0xd86e, 0x6ee9, 0xc0af, 0x1, 0x1);
        gbc.writeMem(0x362f, { 0xcb, 0x86 });
        gbc.writeMem(0xc0af, { 0x57 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x32c3, gbc.sp());
        EXPECT(0x3631, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x56, gbc.readMem(0xc0af));
        // CB 86 00B1
        gbc.setState(0x8bcb, 0x868a, 0x10, 0x4fc7, 0xd301, 0x7313, 0x1, 0x0);
        gbc.writeMem(0x7313, { 0x6a });
        gbc.writeMem(0x8bcb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x868a, gbc.sp());
        EXPECT(0x8bcd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bcb));
        EXPECT(0x86, gbc.readMem(0x8bcc));
        // CB 86 00B2
        gbc.setState(0x6500, 0x10d2, 0xd960, 0xc41f, 0xf2ba, 0x8d0b, 0x1, 0x1);
        gbc.writeMem(0x6500, { 0xcb, 0x86 });
        gbc.writeMem(0x8d0b, { 0x8b });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x10d2, gbc.sp());
        EXPECT(0x6502, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8a, gbc.readMem(0x8d0b));
        // CB 86 00B3
        gbc.setState(0xa21a, 0xb973, 0x14e0, 0xa7f8, 0x4554, 0x279e, 0x1, 0x0);
        gbc.writeMem(0x279e, { 0xb4 });
        gbc.writeMem(0xa21a, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xb973, gbc.sp());
        EXPECT(0xa21c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa21a));
        EXPECT(0x86, gbc.readMem(0xa21b));
        // CB 86 00B4
        gbc.setState(0x1aac, 0x5b83, 0x87a0, 0x53fc, 0x6a35, 0xe61f, 0x1, 0x0);
        gbc.writeMem(0x1aac, { 0xcb, 0x86 });
        gbc.writeMem(0xe61f, { 0xf3 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x5b83, gbc.sp());
        EXPECT(0x1aae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0xe61f));
        // CB 86 00B5
        gbc.setState(0x3208, 0x3edc, 0x2710, 0xd461, 0xd36c, 0xc4e, 0x0, 0x0);
        gbc.writeMem(0xc4e, { 0x8c });
        gbc.writeMem(0x3208, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x3edc, gbc.sp());
        EXPECT(0x320a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 00B7
        gbc.setState(0xaf50, 0xb18a, 0x1eb0, 0x5e1, 0x201c, 0x8867, 0x1, 0x0);
        gbc.writeMem(0x8867, { 0xb9 });
        gbc.writeMem(0xaf50, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xb18a, gbc.sp());
        EXPECT(0xaf52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb8, gbc.readMem(0x8867));
        EXPECT(0xcb, gbc.readMem(0xaf50));
        EXPECT(0x86, gbc.readMem(0xaf51));
        // CB 86 00B8
        gbc.setState(0x93f9, 0x1de, 0xda90, 0x89b1, 0x1d81, 0xf206, 0x0, 0x0);
        gbc.writeMem(0x93f9, { 0xcb, 0x86 });
        gbc.writeMem(0xf206, { 0xcb });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x1de, gbc.sp());
        EXPECT(0x93fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93f9));
        EXPECT(0x86, gbc.readMem(0x93fa));
        EXPECT(0xca, gbc.readMem(0xf206));
        // CB 86 00B9
        gbc.setState(0x1c31, 0x5b3c, 0x6270, 0x9db2, 0x3614, 0xf048, 0x0, 0x0);
        gbc.writeMem(0x1c31, { 0xcb, 0x86 });
        gbc.writeMem(0xf048, { 0x67 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x5b3c, gbc.sp());
        EXPECT(0x1c33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0xf048));
        // CB 86 00BA
        gbc.setState(0x6b55, 0xd52, 0x71e0, 0x7cfa, 0xb2c4, 0xbcdb, 0x1, 0x1);
        gbc.writeMem(0x6b55, { 0xcb, 0x86 });
        gbc.writeMem(0xbcdb, { 0x5e });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xd52, gbc.sp());
        EXPECT(0x6b57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5e, gbc.readMem(0xbcdb));
        // CB 86 00BB
        gbc.setState(0xacaf, 0x5da7, 0x7d80, 0xd3d2, 0xf32c, 0xbd02, 0x0, 0x1);
        gbc.writeMem(0xacaf, { 0xcb, 0x86 });
        gbc.writeMem(0xbd02, { 0x7f });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x5da7, gbc.sp());
        EXPECT(0xacb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacaf));
        EXPECT(0x86, gbc.readMem(0xacb0));
        EXPECT(0x7e, gbc.readMem(0xbd02));
        // CB 86 00BD
        gbc.setState(0xb4e0, 0xda27, 0x2450, 0x2f6, 0x4f0e, 0x4175, 0x0, 0x1);
        gbc.writeMem(0x4175, { 0x32 });
        gbc.writeMem(0xb4e0, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xda27, gbc.sp());
        EXPECT(0xb4e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4e0));
        EXPECT(0x86, gbc.readMem(0xb4e1));
        // CB 86 00BE
        gbc.setState(0x2ab3, 0xbab6, 0x7b00, 0x716d, 0xe961, 0xe3c4, 0x0, 0x0);
        gbc.writeMem(0x2ab3, { 0xcb, 0x86 });
        gbc.writeMem(0xe3c4, { 0x92 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xbab6, gbc.sp());
        EXPECT(0x2ab5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x92, gbc.readMem(0xe3c4));
        // CB 86 00C2
        gbc.setState(0xda61, 0xf214, 0xc720, 0xcc59, 0xe431, 0x633, 0x1, 0x0);
        gbc.writeMem(0x633, { 0xb4 });
        gbc.writeMem(0xda61, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xf214, gbc.sp());
        EXPECT(0xda63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda61));
        EXPECT(0x86, gbc.readMem(0xda62));
        // CB 86 00C5
        gbc.setState(0x6bd1, 0xbbe8, 0x35e0, 0x9ba4, 0x915, 0x7926, 0x0, 0x1);
        gbc.writeMem(0x6bd1, { 0xcb, 0x86 });
        gbc.writeMem(0x7926, { 0xaa });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xbbe8, gbc.sp());
        EXPECT(0x6bd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 00C6
        gbc.setState(0x5916, 0xbe5a, 0xf100, 0x66c5, 0x1592, 0x4806, 0x1, 0x1);
        gbc.writeMem(0x4806, { 0xb0 });
        gbc.writeMem(0x5916, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xbe5a, gbc.sp());
        EXPECT(0x5918, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 00C7
        gbc.setState(0x4dfc, 0x5d9a, 0xd620, 0x8d68, 0xb287, 0xc9fd, 0x0, 0x1);
        gbc.writeMem(0x4dfc, { 0xcb, 0x86 });
        gbc.writeMem(0xc9fd, { 0x5e });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x5d9a, gbc.sp());
        EXPECT(0x4dfe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5e, gbc.readMem(0xc9fd));
        // CB 86 00C9
        gbc.setState(0x8f30, 0xe22d, 0x7ab0, 0x8d21, 0x8599, 0xc6ba, 0x0, 0x1);
        gbc.writeMem(0x8f30, { 0xcb, 0x86 });
        gbc.writeMem(0xc6ba, { 0xff });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xe22d, gbc.sp());
        EXPECT(0x8f32, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f30));
        EXPECT(0x86, gbc.readMem(0x8f31));
        EXPECT(0xfe, gbc.readMem(0xc6ba));
        // CB 86 00CA
        gbc.setState(0xc15e, 0xb1f2, 0xf400, 0x41e0, 0x2428, 0x24b, 0x0, 0x1);
        gbc.writeMem(0x24b, { 0x30 });
        gbc.writeMem(0xc15e, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xb1f2, gbc.sp());
        EXPECT(0xc160, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc15e));
        EXPECT(0x86, gbc.readMem(0xc15f));
        // CB 86 00CC
        gbc.setState(0x8ceb, 0x502b, 0x6f20, 0x4b59, 0x19cc, 0xa3d0, 0x1, 0x1);
        gbc.writeMem(0x8ceb, { 0xcb, 0x86 });
        gbc.writeMem(0xa3d0, { 0x68 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x502b, gbc.sp());
        EXPECT(0x8ced, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ceb));
        EXPECT(0x86, gbc.readMem(0x8cec));
        EXPECT(0x68, gbc.readMem(0xa3d0));
        // CB 86 00CD
        gbc.setState(0x115a, 0xe8f6, 0x6f70, 0x461c, 0x1a21, 0x4b25, 0x0, 0x1);
        gbc.writeMem(0x115a, { 0xcb, 0x86 });
        gbc.writeMem(0x4b25, { 0x9c });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xe8f6, gbc.sp());
        EXPECT(0x115c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 00CF
        gbc.setState(0xcc76, 0x6d9e, 0xb250, 0x50bb, 0x2b6a, 0xaef2, 0x1, 0x1);
        gbc.writeMem(0xaef2, { 0xb6 });
        gbc.writeMem(0xcc76, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x6d9e, gbc.sp());
        EXPECT(0xcc78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0xaef2));
        EXPECT(0xcb, gbc.readMem(0xcc76));
        EXPECT(0x86, gbc.readMem(0xcc77));
        // CB 86 00D0
        gbc.setState(0xd87c, 0xaf4, 0xda00, 0x71bf, 0xcf12, 0x195e, 0x0, 0x1);
        gbc.writeMem(0x195e, { 0xf8 });
        gbc.writeMem(0xd87c, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xaf4, gbc.sp());
        EXPECT(0xd87e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd87c));
        EXPECT(0x86, gbc.readMem(0xd87d));
        // CB 86 00D2
        gbc.setState(0x8793, 0xe45f, 0x2b40, 0x68b1, 0x42d5, 0x22e6, 0x0, 0x0);
        gbc.writeMem(0x22e6, { 0x40 });
        gbc.writeMem(0x8793, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xe45f, gbc.sp());
        EXPECT(0x8795, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8793));
        EXPECT(0x86, gbc.readMem(0x8794));
        // CB 86 00D3
        gbc.setState(0xdfae, 0xd11b, 0xdf30, 0xf599, 0xb07b, 0x1269, 0x1, 0x0);
        gbc.writeMem(0x1269, { 0xca });
        gbc.writeMem(0xdfae, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xd11b, gbc.sp());
        EXPECT(0xdfb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfae));
        EXPECT(0x86, gbc.readMem(0xdfaf));
        // CB 86 00D4
        gbc.setState(0x14a0, 0xeee3, 0xdb20, 0x21d8, 0xd2b9, 0xb10e, 0x0, 0x1);
        gbc.writeMem(0x14a0, { 0xcb, 0x86 });
        gbc.writeMem(0xb10e, { 0x2d });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xeee3, gbc.sp());
        EXPECT(0x14a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2c, gbc.readMem(0xb10e));
        // CB 86 00D5
        gbc.setState(0x72eb, 0xac09, 0x8a80, 0x9ebd, 0x2283, 0x6cdc, 0x0, 0x1);
        gbc.writeMem(0x6cdc, { 0x9a });
        gbc.writeMem(0x72eb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xac09, gbc.sp());
        EXPECT(0x72ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 00D6
        gbc.setState(0x2781, 0xd5cb, 0xa0d0, 0x357d, 0x44e2, 0x90fe, 0x1, 0x0);
        gbc.writeMem(0x2781, { 0xcb, 0x86 });
        gbc.writeMem(0x90fe, { 0xe4 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xd5cb, gbc.sp());
        EXPECT(0x2783, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0x90fe));
        // CB 86 00D7
        gbc.setState(0x5325, 0x2659, 0x7b60, 0x1fc9, 0x103c, 0x2692, 0x1, 0x0);
        gbc.writeMem(0x2692, { 0xa2 });
        gbc.writeMem(0x5325, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x2659, gbc.sp());
        EXPECT(0x5327, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 00D8
        gbc.setState(0xad6, 0xec9d, 0x1220, 0x8a45, 0xca8, 0x1541, 0x0, 0x0);
        gbc.writeMem(0xad6, { 0xcb, 0x86 });
        gbc.writeMem(0x1541, { 0xb0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xec9d, gbc.sp());
        EXPECT(0xad8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 00D9
        gbc.setState(0x5f06, 0x72ad, 0x1b00, 0xecf0, 0x8c2f, 0xd752, 0x0, 0x0);
        gbc.writeMem(0x5f06, { 0xcb, 0x86 });
        gbc.writeMem(0xd752, { 0x9e });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x72ad, gbc.sp());
        EXPECT(0x5f08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9e, gbc.readMem(0xd752));
        // CB 86 00DA
        gbc.setState(0x4391, 0x2716, 0x3900, 0x2d90, 0xab1c, 0x5946, 0x1, 0x0);
        gbc.writeMem(0x4391, { 0xcb, 0x86 });
        gbc.writeMem(0x5946, { 0x9a });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x2716, gbc.sp());
        EXPECT(0x4393, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 00DC
        gbc.setState(0x851c, 0x686d, 0xa1f0, 0xb8f2, 0x2515, 0xa738, 0x0, 0x1);
        gbc.writeMem(0x851c, { 0xcb, 0x86 });
        gbc.writeMem(0xa738, { 0x72 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x686d, gbc.sp());
        EXPECT(0x851e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x851c));
        EXPECT(0x86, gbc.readMem(0x851d));
        EXPECT(0x72, gbc.readMem(0xa738));
        // CB 86 00DE
        gbc.setState(0xa3c9, 0x282b, 0xa930, 0xb2b0, 0x8a8b, 0xe2e1, 0x1, 0x1);
        gbc.writeMem(0xa3c9, { 0xcb, 0x86 });
        gbc.writeMem(0xe2e1, { 0x99 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x282b, gbc.sp());
        EXPECT(0xa3cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3c9));
        EXPECT(0x86, gbc.readMem(0xa3ca));
        EXPECT(0x98, gbc.readMem(0xe2e1));
        // CB 86 00DF
        gbc.setState(0x327a, 0x78e9, 0xfdc0, 0x84b2, 0x675f, 0x3c6b, 0x0, 0x0);
        gbc.writeMem(0x327a, { 0xcb, 0x86 });
        gbc.writeMem(0x3c6b, { 0xa2 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x78e9, gbc.sp());
        EXPECT(0x327c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 00E0
        gbc.setState(0xba80, 0x926e, 0x4700, 0x2974, 0x779d, 0xcde2, 0x0, 0x1);
        gbc.writeMem(0xba80, { 0xcb, 0x86 });
        gbc.writeMem(0xcde2, { 0x15 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x926e, gbc.sp());
        EXPECT(0xba82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba80));
        EXPECT(0x86, gbc.readMem(0xba81));
        EXPECT(0x14, gbc.readMem(0xcde2));
        // CB 86 00E1
        gbc.setState(0xab48, 0x9614, 0xcc30, 0xafee, 0x2acc, 0xcd31, 0x0, 0x0);
        gbc.writeMem(0xab48, { 0xcb, 0x86 });
        gbc.writeMem(0xcd31, { 0x32 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x9614, gbc.sp());
        EXPECT(0xab4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab48));
        EXPECT(0x86, gbc.readMem(0xab49));
        EXPECT(0x32, gbc.readMem(0xcd31));
        // CB 86 00E2
        gbc.setState(0x6084, 0xf798, 0xf830, 0x8df2, 0x8d88, 0x3aac, 0x1, 0x0);
        gbc.writeMem(0x3aac, { 0xe0 });
        gbc.writeMem(0x6084, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xf798, gbc.sp());
        EXPECT(0x6086, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 00E3
        gbc.setState(0x1846, 0x6b44, 0xfe90, 0xd3a0, 0x9ff2, 0xef74, 0x1, 0x0);
        gbc.writeMem(0x1846, { 0xcb, 0x86 });
        gbc.writeMem(0xef74, { 0x4c });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x6b44, gbc.sp());
        EXPECT(0x1848, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4c, gbc.readMem(0xef74));
        // CB 86 00E4
        gbc.setState(0x7b23, 0x8a99, 0x3050, 0xa7e6, 0x48d7, 0xb35b, 0x0, 0x0);
        gbc.writeMem(0x7b23, { 0xcb, 0x86 });
        gbc.writeMem(0xb35b, { 0xa7 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x8a99, gbc.sp());
        EXPECT(0x7b25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0xb35b));
        // CB 86 00E5
        gbc.setState(0x71d8, 0xafbb, 0x2ce0, 0x51be, 0x7238, 0x1802, 0x0, 0x0);
        gbc.writeMem(0x1802, { 0x1c });
        gbc.writeMem(0x71d8, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xafbb, gbc.sp());
        EXPECT(0x71da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 00E6
        gbc.setState(0xa27f, 0xc7b1, 0x910, 0x7c32, 0x6917, 0x9f73, 0x1, 0x1);
        gbc.writeMem(0x9f73, { 0xc9 });
        gbc.writeMem(0xa27f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xc7b1, gbc.sp());
        EXPECT(0xa281, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc8, gbc.readMem(0x9f73));
        EXPECT(0xcb, gbc.readMem(0xa27f));
        EXPECT(0x86, gbc.readMem(0xa280));
        // CB 86 00E8
        gbc.setState(0xe58, 0x9b1b, 0x4e60, 0xc86c, 0x1fdf, 0x563a, 0x0, 0x1);
        gbc.writeMem(0xe58, { 0xcb, 0x86 });
        gbc.writeMem(0x563a, { 0x70 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x9b1b, gbc.sp());
        EXPECT(0xe5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 00E9
        gbc.setState(0xd6b6, 0x7566, 0x3d40, 0xaf66, 0xca79, 0x9e38, 0x1, 0x0);
        gbc.writeMem(0x9e38, { 0xef });
        gbc.writeMem(0xd6b6, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x7566, gbc.sp());
        EXPECT(0xd6b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0x9e38));
        EXPECT(0xcb, gbc.readMem(0xd6b6));
        EXPECT(0x86, gbc.readMem(0xd6b7));
        // CB 86 00EC
        gbc.setState(0x1086, 0xd6b8, 0xd2a0, 0xf2a6, 0x594a, 0xa157, 0x0, 0x0);
        gbc.writeMem(0x1086, { 0xcb, 0x86 });
        gbc.writeMem(0xa157, { 0x32 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xd6b8, gbc.sp());
        EXPECT(0x1088, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xa157));
        // CB 86 00ED
        gbc.setState(0xa170, 0x30da, 0xff70, 0xbe02, 0xaa46, 0x30da, 0x1, 0x1);
        gbc.writeMem(0x30da, { 0xe4 });
        gbc.writeMem(0xa170, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x30da, gbc.sp());
        EXPECT(0xa172, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa170));
        EXPECT(0x86, gbc.readMem(0xa171));
        // CB 86 00F0
        gbc.setState(0x654b, 0xe387, 0x3e40, 0x8a7, 0xd5fb, 0xd43d, 0x1, 0x1);
        gbc.writeMem(0x654b, { 0xcb, 0x86 });
        gbc.writeMem(0xd43d, { 0xc4 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xe387, gbc.sp());
        EXPECT(0x654d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xd43d));
        // CB 86 00F1
        gbc.setState(0x96ee, 0x51b8, 0x1af0, 0xd5d3, 0x504c, 0x97ae, 0x0, 0x0);
        gbc.writeMem(0x96ee, { 0xcb, 0x86 });
        gbc.writeMem(0x97ae, { 0x66 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x51b8, gbc.sp());
        EXPECT(0x96f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96ee));
        EXPECT(0x86, gbc.readMem(0x96ef));
        EXPECT(0x66, gbc.readMem(0x97ae));
        // CB 86 00F2
        gbc.setState(0xcca5, 0x444a, 0xca30, 0xc96b, 0x1eae, 0xdf0d, 0x0, 0x0);
        gbc.writeMem(0xcca5, { 0xcb, 0x86 });
        gbc.writeMem(0xdf0d, { 0xc3 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x444a, gbc.sp());
        EXPECT(0xcca7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcca5));
        EXPECT(0x86, gbc.readMem(0xcca6));
        EXPECT(0xc2, gbc.readMem(0xdf0d));
        // CB 86 00F4
        gbc.setState(0x91ec, 0xbfcc, 0x8100, 0x952d, 0x26f2, 0xfd99, 0x1, 0x1);
        gbc.writeMem(0x91ec, { 0xcb, 0x86 });
        gbc.writeMem(0xfd99, { 0x8e });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xbfcc, gbc.sp());
        EXPECT(0x91ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91ec));
        EXPECT(0x86, gbc.readMem(0x91ed));
        EXPECT(0x8e, gbc.readMem(0xfd99));
        // CB 86 00F6
        gbc.setState(0x98db, 0x53c9, 0x68e0, 0x1b1c, 0x74e2, 0x16c4, 0x0, 0x0);
        gbc.writeMem(0x16c4, { 0x9a });
        gbc.writeMem(0x98db, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x53c9, gbc.sp());
        EXPECT(0x98dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98db));
        EXPECT(0x86, gbc.readMem(0x98dc));
        // CB 86 00F7
        gbc.setState(0xe91c, 0xd9b8, 0x7540, 0xbed7, 0xf9ca, 0x43fd, 0x0, 0x1);
        gbc.writeMem(0x43fd, { 0x7c });
        gbc.writeMem(0xe91c, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xd9b8, gbc.sp());
        EXPECT(0xe91e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe91c));
        EXPECT(0x86, gbc.readMem(0xe91d));
        // CB 86 00F8
        gbc.setState(0x23f1, 0x76f3, 0x5fe0, 0x2bfd, 0xd10a, 0xfbc5, 0x0, 0x1);
        gbc.writeMem(0x23f1, { 0xcb, 0x86 });
        gbc.writeMem(0xfbc5, { 0x4e });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x76f3, gbc.sp());
        EXPECT(0x23f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0xfbc5));
        // CB 86 00FA
        gbc.setState(0x5824, 0x3d87, 0x3b00, 0x257, 0x334e, 0xa8f, 0x1, 0x1);
        gbc.writeMem(0xa8f, { 0x4 });
        gbc.writeMem(0x5824, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x3d87, gbc.sp());
        EXPECT(0x5826, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 00FB
        gbc.setState(0x4f9d, 0xdf46, 0x53d0, 0x943f, 0x2f36, 0x8bec, 0x0, 0x0);
        gbc.writeMem(0x4f9d, { 0xcb, 0x86 });
        gbc.writeMem(0x8bec, { 0xba });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xdf46, gbc.sp());
        EXPECT(0x4f9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xba, gbc.readMem(0x8bec));
        // CB 86 00FD
        gbc.setState(0x5fb6, 0xffbe, 0x7a90, 0x46d3, 0x6581, 0x5034, 0x0, 0x0);
        gbc.writeMem(0x5034, { 0xfe });
        gbc.writeMem(0x5fb6, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xffbe, gbc.sp());
        EXPECT(0x5fb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 00FE
        gbc.setState(0x2a8a, 0xf747, 0xf10, 0xa601, 0x4d10, 0x3830, 0x0, 0x1);
        gbc.writeMem(0x2a8a, { 0xcb, 0x86 });
        gbc.writeMem(0x3830, { 0x4c });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xf747, gbc.sp());
        EXPECT(0x2a8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 00FF
        gbc.setState(0x5f86, 0x45d, 0x54e0, 0x6872, 0x4bb8, 0xe37e, 0x1, 0x0);
        gbc.writeMem(0x5f86, { 0xcb, 0x86 });
        gbc.writeMem(0xe37e, { 0xe0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x45d, gbc.sp());
        EXPECT(0x5f88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe0, gbc.readMem(0xe37e));
        // CB 86 0100
        gbc.setState(0x4331, 0x22d9, 0x2970, 0x7e0f, 0x3beb, 0x7240, 0x0, 0x0);
        gbc.writeMem(0x4331, { 0xcb, 0x86 });
        gbc.writeMem(0x7240, { 0x4c });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x22d9, gbc.sp());
        EXPECT(0x4333, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0101
        gbc.setState(0x9112, 0xe509, 0x2750, 0x5a59, 0x948c, 0xe227, 0x1, 0x0);
        gbc.writeMem(0x9112, { 0xcb, 0x86 });
        gbc.writeMem(0xe227, { 0x8 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xe509, gbc.sp());
        EXPECT(0x9114, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9112));
        EXPECT(0x86, gbc.readMem(0x9113));
        EXPECT(0x8, gbc.readMem(0xe227));
        // CB 86 0102
        gbc.setState(0x47b5, 0x5fd7, 0x4c00, 0x6412, 0x5ac2, 0x821d, 0x1, 0x1);
        gbc.writeMem(0x47b5, { 0xcb, 0x86 });
        gbc.writeMem(0x821d, { 0x53 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x5fd7, gbc.sp());
        EXPECT(0x47b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0x821d));
        // CB 86 0104
        gbc.setState(0xdfc0, 0x3972, 0xd390, 0xa4ba, 0xae39, 0x5d71, 0x1, 0x0);
        gbc.writeMem(0x5d71, { 0xa2 });
        gbc.writeMem(0xdfc0, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x3972, gbc.sp());
        EXPECT(0xdfc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfc0));
        EXPECT(0x86, gbc.readMem(0xdfc1));
        // CB 86 0105
        gbc.setState(0xa4ab, 0x7a06, 0x29a0, 0x70cf, 0x8ece, 0xcf58, 0x0, 0x1);
        gbc.writeMem(0xa4ab, { 0xcb, 0x86 });
        gbc.writeMem(0xcf58, { 0xa1 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x7a06, gbc.sp());
        EXPECT(0xa4ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4ab));
        EXPECT(0x86, gbc.readMem(0xa4ac));
        EXPECT(0xa0, gbc.readMem(0xcf58));
        // CB 86 0106
        gbc.setState(0x9afc, 0x7c00, 0xe60, 0x9fb8, 0x35c3, 0x83a6, 0x0, 0x1);
        gbc.writeMem(0x83a6, { 0x2c });
        gbc.writeMem(0x9afc, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x7c00, gbc.sp());
        EXPECT(0x9afe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2c, gbc.readMem(0x83a6));
        EXPECT(0xcb, gbc.readMem(0x9afc));
        EXPECT(0x86, gbc.readMem(0x9afd));
        // CB 86 0107
        gbc.setState(0xf43, 0x14ab, 0x31e0, 0x8086, 0x4fe1, 0xb440, 0x1, 0x0);
        gbc.writeMem(0xf43, { 0xcb, 0x86 });
        gbc.writeMem(0xb440, { 0xf2 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x14ab, gbc.sp());
        EXPECT(0xf45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0xb440));
        // CB 86 0108
        gbc.setState(0xe0ac, 0xce1d, 0x7230, 0x28a6, 0x2bd6, 0xdc3e, 0x0, 0x1);
        gbc.writeMem(0xdc3e, { 0xf0 });
        gbc.writeMem(0xe0ac, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xce1d, gbc.sp());
        EXPECT(0xe0ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf0, gbc.readMem(0xdc3e));
        EXPECT(0xcb, gbc.readMem(0xe0ac));
        EXPECT(0x86, gbc.readMem(0xe0ad));
        // CB 86 0109
        gbc.setState(0x37cd, 0xa180, 0x4480, 0xe911, 0xe582, 0xa5d4, 0x1, 0x1);
        gbc.writeMem(0x37cd, { 0xcb, 0x86 });
        gbc.writeMem(0xa5d4, { 0x61 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xa180, gbc.sp());
        EXPECT(0x37cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0xa5d4));
        // CB 86 010B
        gbc.setState(0x636d, 0x517f, 0xd2f0, 0xc760, 0xaae6, 0x7eb0, 0x0, 0x1);
        gbc.writeMem(0x636d, { 0xcb, 0x86 });
        gbc.writeMem(0x7eb0, { 0x32 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x517f, gbc.sp());
        EXPECT(0x636f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 010C
        gbc.setState(0x83dc, 0x47c8, 0x1630, 0x6e56, 0x9456, 0xf80a, 0x1, 0x1);
        gbc.writeMem(0x83dc, { 0xcb, 0x86 });
        gbc.writeMem(0xf80a, { 0x82 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x47c8, gbc.sp());
        EXPECT(0x83de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83dc));
        EXPECT(0x86, gbc.readMem(0x83dd));
        EXPECT(0x82, gbc.readMem(0xf80a));
        // CB 86 010D
        gbc.setState(0xc298, 0xa579, 0x1c20, 0xb2f4, 0x8e47, 0x1b4, 0x1, 0x0);
        gbc.writeMem(0x1b4, { 0x56 });
        gbc.writeMem(0xc298, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xa579, gbc.sp());
        EXPECT(0xc29a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc298));
        EXPECT(0x86, gbc.readMem(0xc299));
        // CB 86 010F
        gbc.setState(0xd41f, 0xd3e3, 0xa3c0, 0x9c75, 0xdacc, 0xea45, 0x1, 0x0);
        gbc.writeMem(0xd41f, { 0xcb, 0x86 });
        gbc.writeMem(0xea45, { 0x84 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xd3e3, gbc.sp());
        EXPECT(0xd421, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd41f));
        EXPECT(0x86, gbc.readMem(0xd420));
        EXPECT(0x84, gbc.readMem(0xea45));
        // CB 86 0112
        gbc.setState(0xd4f8, 0xbf07, 0x2ca0, 0x30bc, 0x1d0e, 0x541d, 0x1, 0x0);
        gbc.writeMem(0x541d, { 0x60 });
        gbc.writeMem(0xd4f8, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xbf07, gbc.sp());
        EXPECT(0xd4fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4f8));
        EXPECT(0x86, gbc.readMem(0xd4f9));
        // CB 86 0113
        gbc.setState(0x5ec2, 0x1eb3, 0x39c0, 0xe5f1, 0xf616, 0x9c6d, 0x0, 0x0);
        gbc.writeMem(0x5ec2, { 0xcb, 0x86 });
        gbc.writeMem(0x9c6d, { 0xe5 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x1eb3, gbc.sp());
        EXPECT(0x5ec4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0x9c6d));
        // CB 86 0114
        gbc.setState(0x55e1, 0xf9f9, 0xd5f0, 0x6641, 0xf747, 0xb1ac, 0x1, 0x0);
        gbc.writeMem(0x55e1, { 0xcb, 0x86 });
        gbc.writeMem(0xb1ac, { 0x88 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xf9f9, gbc.sp());
        EXPECT(0x55e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x88, gbc.readMem(0xb1ac));
        // CB 86 0116
        gbc.setState(0x74f3, 0x5fe6, 0xf0d0, 0xba7a, 0xf922, 0xea2a, 0x0, 0x1);
        gbc.writeMem(0x74f3, { 0xcb, 0x86 });
        gbc.writeMem(0xea2a, { 0x8d });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x5fe6, gbc.sp());
        EXPECT(0x74f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0xea2a));
        // CB 86 0117
        gbc.setState(0x857d, 0xd862, 0xbd60, 0x8543, 0xbd03, 0xf3e9, 0x0, 0x0);
        gbc.writeMem(0x857d, { 0xcb, 0x86 });
        gbc.writeMem(0xf3e9, { 0x79 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xd862, gbc.sp());
        EXPECT(0x857f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x857d));
        EXPECT(0x86, gbc.readMem(0x857e));
        EXPECT(0x78, gbc.readMem(0xf3e9));
        // CB 86 0118
        gbc.setState(0x8a5e, 0xc7c, 0xf160, 0xb4b9, 0xcc09, 0xda70, 0x1, 0x1);
        gbc.writeMem(0x8a5e, { 0xcb, 0x86 });
        gbc.writeMem(0xda70, { 0x8d });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xc7c, gbc.sp());
        EXPECT(0x8a60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a5e));
        EXPECT(0x86, gbc.readMem(0x8a5f));
        EXPECT(0x8c, gbc.readMem(0xda70));
        // CB 86 0119
        gbc.setState(0x5521, 0x8668, 0x3c70, 0xe61e, 0x15a3, 0x5d3f, 0x0, 0x1);
        gbc.writeMem(0x5521, { 0xcb, 0x86 });
        gbc.writeMem(0x5d3f, { 0xc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x8668, gbc.sp());
        EXPECT(0x5523, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 011A
        gbc.setState(0xbcf7, 0xd1b9, 0xcd0, 0xaf47, 0xdf2c, 0xd2fa, 0x0, 0x0);
        gbc.writeMem(0xbcf7, { 0xcb, 0x86 });
        gbc.writeMem(0xd2fa, { 0x29 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xd1b9, gbc.sp());
        EXPECT(0xbcf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcf7));
        EXPECT(0x86, gbc.readMem(0xbcf8));
        EXPECT(0x28, gbc.readMem(0xd2fa));
        // CB 86 011B
        gbc.setState(0x87f6, 0x80ca, 0xef30, 0x8ced, 0x9a3d, 0xe43f, 0x0, 0x0);
        gbc.writeMem(0x87f6, { 0xcb, 0x86 });
        gbc.writeMem(0xe43f, { 0x50 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x80ca, gbc.sp());
        EXPECT(0x87f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87f6));
        EXPECT(0x86, gbc.readMem(0x87f7));
        EXPECT(0x50, gbc.readMem(0xe43f));
        // CB 86 011C
        gbc.setState(0x2a5e, 0x9c42, 0x4d60, 0xaa08, 0xa26a, 0xf7d0, 0x0, 0x1);
        gbc.writeMem(0x2a5e, { 0xcb, 0x86 });
        gbc.writeMem(0xf7d0, { 0x2a });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x9c42, gbc.sp());
        EXPECT(0x2a60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0xf7d0));
        // CB 86 011D
        gbc.setState(0x6db6, 0x33b8, 0xace0, 0x3cc4, 0xd3b1, 0xb16a, 0x1, 0x1);
        gbc.writeMem(0x6db6, { 0xcb, 0x86 });
        gbc.writeMem(0xb16a, { 0x7c });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x33b8, gbc.sp());
        EXPECT(0x6db8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xb16a));
        // CB 86 011E
        gbc.setState(0xd76a, 0x489e, 0x7410, 0x910, 0x55ec, 0xfee1, 0x1, 0x1);
        gbc.writeMem(0xd76a, { 0xcb, 0x86 });
        gbc.writeMem(0xfee1, { 0x9 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x489e, gbc.sp());
        EXPECT(0xd76c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd76a));
        EXPECT(0x86, gbc.readMem(0xd76b));
        EXPECT(0x8, gbc.readMem(0xfee1));
        // CB 86 011F
        gbc.setState(0x8555, 0x623c, 0x4740, 0x9d1b, 0xfc88, 0xe659, 0x0, 0x1);
        gbc.writeMem(0x8555, { 0xcb, 0x86 });
        gbc.writeMem(0xe659, { 0xda });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x623c, gbc.sp());
        EXPECT(0x8557, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8555));
        EXPECT(0x86, gbc.readMem(0x8556));
        EXPECT(0xda, gbc.readMem(0xe659));
        // CB 86 0120
        gbc.setState(0x2619, 0xeddc, 0xfb00, 0xbdc1, 0xa720, 0x4ea6, 0x1, 0x1);
        gbc.writeMem(0x2619, { 0xcb, 0x86 });
        gbc.writeMem(0x4ea6, { 0xd2 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xeddc, gbc.sp());
        EXPECT(0x261b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0123
        gbc.setState(0x613f, 0xe4ad, 0x4800, 0xe8f1, 0x9e6, 0x9b19, 0x0, 0x0);
        gbc.writeMem(0x613f, { 0xcb, 0x86 });
        gbc.writeMem(0x9b19, { 0x9e });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xe4ad, gbc.sp());
        EXPECT(0x6141, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9e, gbc.readMem(0x9b19));
        // CB 86 0124
        gbc.setState(0x4afb, 0x58ea, 0xc6a0, 0xb11, 0x591b, 0xc99f, 0x0, 0x0);
        gbc.writeMem(0x4afb, { 0xcb, 0x86 });
        gbc.writeMem(0xc99f, { 0xd4 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x58ea, gbc.sp());
        EXPECT(0x4afd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd4, gbc.readMem(0xc99f));
        // CB 86 0125
        gbc.setState(0x8d77, 0xfc97, 0x4c50, 0x852a, 0xd25, 0x6d59, 0x0, 0x1);
        gbc.writeMem(0x6d59, { 0x4a });
        gbc.writeMem(0x8d77, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xfc97, gbc.sp());
        EXPECT(0x8d79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d77));
        EXPECT(0x86, gbc.readMem(0x8d78));
        // CB 86 0128
        gbc.setState(0x177c, 0x1304, 0x10, 0x8544, 0xc7d6, 0xb136, 0x0, 0x0);
        gbc.writeMem(0x177c, { 0xcb, 0x86 });
        gbc.writeMem(0xb136, { 0x1b });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x1304, gbc.sp());
        EXPECT(0x177e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1a, gbc.readMem(0xb136));
        // CB 86 0129
        gbc.setState(0xa208, 0xeb61, 0x5e80, 0x4d82, 0x5b5f, 0xa2bd, 0x0, 0x0);
        gbc.writeMem(0xa208, { 0xcb, 0x86 });
        gbc.writeMem(0xa2bd, { 0xd });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xeb61, gbc.sp());
        EXPECT(0xa20a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa208));
        EXPECT(0x86, gbc.readMem(0xa209));
        EXPECT(0xc, gbc.readMem(0xa2bd));
        // CB 86 012B
        gbc.setState(0xdca, 0xe3a, 0x2d80, 0xf718, 0xfc09, 0x892e, 0x0, 0x1);
        gbc.writeMem(0xdca, { 0xcb, 0x86 });
        gbc.writeMem(0x892e, { 0x2a });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xe3a, gbc.sp());
        EXPECT(0xdcc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0x892e));
        // CB 86 012C
        gbc.setState(0xdc65, 0x7b1b, 0xb680, 0xe15a, 0xcab9, 0x48ce, 0x0, 0x0);
        gbc.writeMem(0x48ce, { 0xd6 });
        gbc.writeMem(0xdc65, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x7b1b, gbc.sp());
        EXPECT(0xdc67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc65));
        EXPECT(0x86, gbc.readMem(0xdc66));
        // CB 86 012E
        gbc.setState(0x2eea, 0xd615, 0x9440, 0x87ae, 0x2b47, 0xe3d9, 0x1, 0x0);
        gbc.writeMem(0x2eea, { 0xcb, 0x86 });
        gbc.writeMem(0xe3d9, { 0xe5 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xd615, gbc.sp());
        EXPECT(0x2eec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0xe3d9));
        // CB 86 012F
        gbc.setState(0xe285, 0x7a46, 0xba20, 0x1aa4, 0x56c4, 0x4fd6, 0x0, 0x0);
        gbc.writeMem(0x4fd6, { 0x76 });
        gbc.writeMem(0xe285, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x7a46, gbc.sp());
        EXPECT(0xe287, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe285));
        EXPECT(0x86, gbc.readMem(0xe286));
        // CB 86 0131
        gbc.setState(0x9e23, 0x1192, 0xeda0, 0xdf28, 0xab1, 0x3d58, 0x0, 0x0);
        gbc.writeMem(0x3d58, { 0xb2 });
        gbc.writeMem(0x9e23, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x1192, gbc.sp());
        EXPECT(0x9e25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e23));
        EXPECT(0x86, gbc.readMem(0x9e24));
        // CB 86 0132
        gbc.setState(0x6abf, 0x9be8, 0xd410, 0xb99a, 0x5b73, 0xd033, 0x0, 0x0);
        gbc.writeMem(0x6abf, { 0xcb, 0x86 });
        gbc.writeMem(0xd033, { 0x68 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x9be8, gbc.sp());
        EXPECT(0x6ac1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x68, gbc.readMem(0xd033));
        // CB 86 0134
        gbc.setState(0x9784, 0xd8d8, 0xb870, 0x7212, 0x3f98, 0x9ecf, 0x1, 0x0);
        gbc.writeMem(0x9784, { 0xcb, 0x86 });
        gbc.writeMem(0x9ecf, { 0xf3 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xd8d8, gbc.sp());
        EXPECT(0x9786, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9784));
        EXPECT(0x86, gbc.readMem(0x9785));
        EXPECT(0xf2, gbc.readMem(0x9ecf));
        // CB 86 0135
        gbc.setState(0xeebe, 0x1770, 0x9580, 0x6d31, 0xf45d, 0xd610, 0x1, 0x0);
        gbc.writeMem(0xd610, { 0x5f });
        gbc.writeMem(0xeebe, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x1770, gbc.sp());
        EXPECT(0xeec0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5e, gbc.readMem(0xd610));
        EXPECT(0xcb, gbc.readMem(0xeebe));
        EXPECT(0x86, gbc.readMem(0xeebf));
        // CB 86 0136
        gbc.setState(0x4596, 0xd5c0, 0xfab0, 0x1dca, 0x8937, 0x2123, 0x0, 0x1);
        gbc.writeMem(0x2123, { 0x8e });
        gbc.writeMem(0x4596, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xd5c0, gbc.sp());
        EXPECT(0x4598, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0137
        gbc.setState(0xc938, 0x293f, 0x2ef0, 0x5c16, 0xef25, 0xf907, 0x1, 0x0);
        gbc.writeMem(0xc938, { 0xcb, 0x86 });
        gbc.writeMem(0xf907, { 0x6d });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x293f, gbc.sp());
        EXPECT(0xc93a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc938));
        EXPECT(0x86, gbc.readMem(0xc939));
        EXPECT(0x6c, gbc.readMem(0xf907));
        // CB 86 0138
        gbc.setState(0xc729, 0x9d8f, 0x1b50, 0x784d, 0x2766, 0x2c78, 0x1, 0x1);
        gbc.writeMem(0x2c78, { 0x2 });
        gbc.writeMem(0xc729, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x9d8f, gbc.sp());
        EXPECT(0xc72b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc729));
        EXPECT(0x86, gbc.readMem(0xc72a));
        // CB 86 013A
        gbc.setState(0x9a27, 0xc55, 0x7a10, 0xcfcc, 0x205e, 0xded8, 0x1, 0x0);
        gbc.writeMem(0x9a27, { 0xcb, 0x86 });
        gbc.writeMem(0xded8, { 0xb0 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xc55, gbc.sp());
        EXPECT(0x9a29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a27));
        EXPECT(0x86, gbc.readMem(0x9a28));
        EXPECT(0xb0, gbc.readMem(0xded8));
        // CB 86 013C
        gbc.setState(0xb483, 0x7b87, 0xd1e0, 0x4ebd, 0x3a48, 0xff76, 0x1, 0x0);
        gbc.writeMem(0xb483, { 0xcb, 0x86 });
        gbc.writeMem(0xff76, { 0x23 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x7b87, gbc.sp());
        EXPECT(0xb485, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb483));
        EXPECT(0x86, gbc.readMem(0xb484));
        EXPECT(0x22, gbc.readMem(0xff76));
        // CB 86 013D
        gbc.setState(0xbc9e, 0xd93b, 0x9800, 0xcf94, 0xbb29, 0xf4f8, 0x0, 0x1);
        gbc.writeMem(0xbc9e, { 0xcb, 0x86 });
        gbc.writeMem(0xf4f8, { 0x47 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xd93b, gbc.sp());
        EXPECT(0xbca0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc9e));
        EXPECT(0x86, gbc.readMem(0xbc9f));
        EXPECT(0x46, gbc.readMem(0xf4f8));
        // CB 86 013E
        gbc.setState(0x6ce7, 0x8000, 0x560, 0xca7c, 0xfb15, 0xb5bd, 0x1, 0x0);
        gbc.writeMem(0x6ce7, { 0xcb, 0x86 });
        gbc.writeMem(0xb5bd, { 0xa4 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x8000, gbc.sp());
        EXPECT(0x6ce9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa4, gbc.readMem(0xb5bd));
        // CB 86 0140
        gbc.setState(0xedff, 0x5564, 0xf630, 0x5a6b, 0x88c5, 0x36c1, 0x1, 0x0);
        gbc.writeMem(0x36c1, { 0x5c });
        gbc.writeMem(0xedff, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x5564, gbc.sp());
        EXPECT(0xee01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedff));
        EXPECT(0x86, gbc.readMem(0xee00));
        // CB 86 0141
        gbc.setState(0x144f, 0x530e, 0x5bb0, 0xc59f, 0x6221, 0xc32f, 0x1, 0x0);
        gbc.writeMem(0x144f, { 0xcb, 0x86 });
        gbc.writeMem(0xc32f, { 0x57 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x530e, gbc.sp());
        EXPECT(0x1451, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x56, gbc.readMem(0xc32f));
        // CB 86 0142
        gbc.setState(0x5419, 0x1d35, 0xd190, 0x65bb, 0x90b6, 0x5023, 0x1, 0x0);
        gbc.writeMem(0x5023, { 0xf4 });
        gbc.writeMem(0x5419, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x1d35, gbc.sp());
        EXPECT(0x541b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0143
        gbc.setState(0x519a, 0xb557, 0xb5e0, 0x21cd, 0xd437, 0x3922, 0x0, 0x1);
        gbc.writeMem(0x3922, { 0x90 });
        gbc.writeMem(0x519a, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xb557, gbc.sp());
        EXPECT(0x519c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0144
        gbc.setState(0x6e08, 0x9559, 0x9ae0, 0x8989, 0xeacc, 0xf79d, 0x0, 0x0);
        gbc.writeMem(0x6e08, { 0xcb, 0x86 });
        gbc.writeMem(0xf79d, { 0x89 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x9559, gbc.sp());
        EXPECT(0x6e0a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x88, gbc.readMem(0xf79d));
        // CB 86 0145
        gbc.setState(0x6a28, 0xc463, 0xbdb0, 0x40ae, 0x45ed, 0x7f98, 0x0, 0x0);
        gbc.writeMem(0x6a28, { 0xcb, 0x86 });
        gbc.writeMem(0x7f98, { 0x22 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xc463, gbc.sp());
        EXPECT(0x6a2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0147
        gbc.setState(0xb3b2, 0x59b7, 0x8900, 0x11d4, 0xb34f, 0x6b8e, 0x1, 0x1);
        gbc.writeMem(0x6b8e, { 0x2 });
        gbc.writeMem(0xb3b2, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x59b7, gbc.sp());
        EXPECT(0xb3b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3b2));
        EXPECT(0x86, gbc.readMem(0xb3b3));
        // CB 86 014B
        gbc.setState(0xa6ab, 0x618f, 0xc6b0, 0x242a, 0x963b, 0x5aea, 0x1, 0x0);
        gbc.writeMem(0x5aea, { 0xe2 });
        gbc.writeMem(0xa6ab, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x618f, gbc.sp());
        EXPECT(0xa6ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6ab));
        EXPECT(0x86, gbc.readMem(0xa6ac));
        // CB 86 014D
        gbc.setState(0x3c90, 0x1fcb, 0xb7f0, 0x2c1f, 0x5b58, 0x8fd1, 0x1, 0x1);
        gbc.writeMem(0x3c90, { 0xcb, 0x86 });
        gbc.writeMem(0x8fd1, { 0x95 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x1fcb, gbc.sp());
        EXPECT(0x3c92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x94, gbc.readMem(0x8fd1));
        // CB 86 0152
        gbc.setState(0x7804, 0x757c, 0x2900, 0x7066, 0xa125, 0xcc85, 0x1, 0x1);
        gbc.writeMem(0x7804, { 0xcb, 0x86 });
        gbc.writeMem(0xcc85, { 0x95 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x757c, gbc.sp());
        EXPECT(0x7806, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x94, gbc.readMem(0xcc85));
        // CB 86 0153
        gbc.setState(0x8448, 0xad95, 0x80b0, 0x785f, 0x78ee, 0x4895, 0x1, 0x0);
        gbc.writeMem(0x4895, { 0xa2 });
        gbc.writeMem(0x8448, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xad95, gbc.sp());
        EXPECT(0x844a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8448));
        EXPECT(0x86, gbc.readMem(0x8449));
        // CB 86 0154
        gbc.setState(0x3a23, 0x8b5b, 0x15f0, 0x4424, 0xbbfe, 0xe7c4, 0x0, 0x0);
        gbc.writeMem(0x3a23, { 0xcb, 0x86 });
        gbc.writeMem(0xe7c4, { 0x16 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x8b5b, gbc.sp());
        EXPECT(0x3a25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x16, gbc.readMem(0xe7c4));
        // CB 86 0155
        gbc.setState(0xefea, 0x1909, 0xbf00, 0x5ef7, 0x9825, 0x8a0c, 0x0, 0x1);
        gbc.writeMem(0x8a0c, { 0xab });
        gbc.writeMem(0xefea, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x1909, gbc.sp());
        EXPECT(0xefec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaa, gbc.readMem(0x8a0c));
        EXPECT(0xcb, gbc.readMem(0xefea));
        EXPECT(0x86, gbc.readMem(0xefeb));
        // CB 86 0156
        gbc.setState(0x6a98, 0xb87b, 0x2980, 0xd882, 0xe50d, 0xe1e3, 0x0, 0x1);
        gbc.writeMem(0x6a98, { 0xcb, 0x86 });
        gbc.writeMem(0xe1e3, { 0xe8 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xb87b, gbc.sp());
        EXPECT(0x6a9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe8, gbc.readMem(0xe1e3));
        // CB 86 0158
        gbc.setState(0x3b91, 0xe314, 0xf8c0, 0x3a39, 0xb13d, 0x4f53, 0x1, 0x0);
        gbc.writeMem(0x3b91, { 0xcb, 0x86 });
        gbc.writeMem(0x4f53, { 0xe2 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xe314, gbc.sp());
        EXPECT(0x3b93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0159
        gbc.setState(0xd2d3, 0xd7ad, 0x7340, 0x6f46, 0x9298, 0x2478, 0x0, 0x1);
        gbc.writeMem(0x2478, { 0xd0 });
        gbc.writeMem(0xd2d3, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xd7ad, gbc.sp());
        EXPECT(0xd2d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2d3));
        EXPECT(0x86, gbc.readMem(0xd2d4));
        // CB 86 015B
        gbc.setState(0xc47b, 0x1423, 0x6df0, 0xcdc8, 0x397c, 0xdfe6, 0x1, 0x0);
        gbc.writeMem(0xc47b, { 0xcb, 0x86 });
        gbc.writeMem(0xdfe6, { 0x5f });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x1423, gbc.sp());
        EXPECT(0xc47d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc47b));
        EXPECT(0x86, gbc.readMem(0xc47c));
        EXPECT(0x5e, gbc.readMem(0xdfe6));
        // CB 86 015D
        gbc.setState(0x2c6, 0x84fc, 0x1b20, 0xe966, 0xddf4, 0xf52d, 0x0, 0x1);
        gbc.writeMem(0x2c6, { 0xcb, 0x86 });
        gbc.writeMem(0xf52d, { 0xf8 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x84fc, gbc.sp());
        EXPECT(0x2c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf8, gbc.readMem(0xf52d));
        // CB 86 015E
        gbc.setState(0x3853, 0x345f, 0xa910, 0x5738, 0x23a, 0x16aa, 0x1, 0x0);
        gbc.writeMem(0x16aa, { 0x1a });
        gbc.writeMem(0x3853, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x345f, gbc.sp());
        EXPECT(0x3855, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0160
        gbc.setState(0x23b5, 0x2abf, 0x1a60, 0xa938, 0x6baf, 0xe88d, 0x1, 0x1);
        gbc.writeMem(0x23b5, { 0xcb, 0x86 });
        gbc.writeMem(0xe88d, { 0xa1 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x2abf, gbc.sp());
        EXPECT(0x23b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0xe88d));
        // CB 86 0161
        gbc.setState(0x9ef1, 0x26d8, 0xf6e0, 0xcc8f, 0x8fd3, 0xcf79, 0x0, 0x1);
        gbc.writeMem(0x9ef1, { 0xcb, 0x86 });
        gbc.writeMem(0xcf79, { 0x9d });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x26d8, gbc.sp());
        EXPECT(0x9ef3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ef1));
        EXPECT(0x86, gbc.readMem(0x9ef2));
        EXPECT(0x9c, gbc.readMem(0xcf79));
        // CB 86 0162
        gbc.setState(0xd670, 0x8d42, 0xfc80, 0xe2ec, 0x97f2, 0xca16, 0x0, 0x1);
        gbc.writeMem(0xca16, { 0x42 });
        gbc.writeMem(0xd670, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x8d42, gbc.sp());
        EXPECT(0xd672, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x42, gbc.readMem(0xca16));
        EXPECT(0xcb, gbc.readMem(0xd670));
        EXPECT(0x86, gbc.readMem(0xd671));
        // CB 86 0163
        gbc.setState(0x4147, 0x1d7d, 0x620, 0x5992, 0x99b, 0xf772, 0x1, 0x1);
        gbc.writeMem(0x4147, { 0xcb, 0x86 });
        gbc.writeMem(0xf772, { 0x8b });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x1d7d, gbc.sp());
        EXPECT(0x4149, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8a, gbc.readMem(0xf772));
        // CB 86 0164
        gbc.setState(0x6e98, 0x3459, 0x550, 0x169d, 0xcaf6, 0xd20b, 0x0, 0x1);
        gbc.writeMem(0x6e98, { 0xcb, 0x86 });
        gbc.writeMem(0xd20b, { 0x23 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x3459, gbc.sp());
        EXPECT(0x6e9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x22, gbc.readMem(0xd20b));
        // CB 86 0166
        gbc.setState(0x1fce, 0x209a, 0xc080, 0x11f8, 0x2d05, 0x980b, 0x0, 0x0);
        gbc.writeMem(0x1fce, { 0xcb, 0x86 });
        gbc.writeMem(0x980b, { 0xc1 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x209a, gbc.sp());
        EXPECT(0x1fd0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc0, gbc.readMem(0x980b));
        // CB 86 0169
        gbc.setState(0x24f9, 0x958f, 0x7780, 0x9e3, 0x4c5d, 0xed01, 0x1, 0x1);
        gbc.writeMem(0x24f9, { 0xcb, 0x86 });
        gbc.writeMem(0xed01, { 0x84 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x958f, gbc.sp());
        EXPECT(0x24fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0xed01));
        // CB 86 016A
        gbc.setState(0xed8c, 0x28f1, 0x7480, 0x6f7b, 0x227, 0x1968, 0x0, 0x1);
        gbc.writeMem(0x1968, { 0xec });
        gbc.writeMem(0xed8c, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x28f1, gbc.sp());
        EXPECT(0xed8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed8c));
        EXPECT(0x86, gbc.readMem(0xed8d));
        // CB 86 016C
        gbc.setState(0x7bd6, 0xe248, 0xce60, 0xd0ed, 0xbdfb, 0x13d4, 0x0, 0x0);
        gbc.writeMem(0x13d4, { 0xf0 });
        gbc.writeMem(0x7bd6, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xe248, gbc.sp());
        EXPECT(0x7bd8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 016F
        gbc.setState(0x3b4e, 0x2036, 0x4530, 0x292e, 0x6164, 0x937f, 0x0, 0x0);
        gbc.writeMem(0x3b4e, { 0xcb, 0x86 });
        gbc.writeMem(0x937f, { 0x42 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x2036, gbc.sp());
        EXPECT(0x3b50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x42, gbc.readMem(0x937f));
        // CB 86 0170
        gbc.setState(0xd110, 0xc9f2, 0xa8c0, 0xc192, 0x23d, 0xa0c8, 0x0, 0x1);
        gbc.writeMem(0xa0c8, { 0x98 });
        gbc.writeMem(0xd110, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xc9f2, gbc.sp());
        EXPECT(0xd112, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0xa0c8));
        EXPECT(0xcb, gbc.readMem(0xd110));
        EXPECT(0x86, gbc.readMem(0xd111));
        // CB 86 0172
        gbc.setState(0xda0a, 0xf04f, 0xc290, 0xdac8, 0x51b4, 0xd3fd, 0x1, 0x0);
        gbc.writeMem(0xd3fd, { 0x50 });
        gbc.writeMem(0xda0a, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xf04f, gbc.sp());
        EXPECT(0xda0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0xd3fd));
        EXPECT(0xcb, gbc.readMem(0xda0a));
        EXPECT(0x86, gbc.readMem(0xda0b));
        // CB 86 0173
        gbc.setState(0x3948, 0x29a3, 0xbe70, 0xb642, 0x9060, 0xbe18, 0x1, 0x1);
        gbc.writeMem(0x3948, { 0xcb, 0x86 });
        gbc.writeMem(0xbe18, { 0xd1 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x29a3, gbc.sp());
        EXPECT(0x394a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd0, gbc.readMem(0xbe18));
        // CB 86 0174
        gbc.setState(0xd5d1, 0x9867, 0xaeb0, 0x326d, 0x7549, 0xbdd2, 0x0, 0x1);
        gbc.writeMem(0xbdd2, { 0x45 });
        gbc.writeMem(0xd5d1, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x9867, gbc.sp());
        EXPECT(0xd5d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x44, gbc.readMem(0xbdd2));
        EXPECT(0xcb, gbc.readMem(0xd5d1));
        EXPECT(0x86, gbc.readMem(0xd5d2));
        // CB 86 0175
        gbc.setState(0xd634, 0x641d, 0x3480, 0x7120, 0xa107, 0x3d2f, 0x0, 0x0);
        gbc.writeMem(0x3d2f, { 0x42 });
        gbc.writeMem(0xd634, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x641d, gbc.sp());
        EXPECT(0xd636, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd634));
        EXPECT(0x86, gbc.readMem(0xd635));
        // CB 86 0176
        gbc.setState(0xdb31, 0xab2c, 0x77c0, 0xaab5, 0xeaed, 0x8ab1, 0x1, 0x0);
        gbc.writeMem(0x8ab1, { 0x96 });
        gbc.writeMem(0xdb31, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xab2c, gbc.sp());
        EXPECT(0xdb33, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x96, gbc.readMem(0x8ab1));
        EXPECT(0xcb, gbc.readMem(0xdb31));
        EXPECT(0x86, gbc.readMem(0xdb32));
        // CB 86 0177
        gbc.setState(0xb1f8, 0x768, 0x9f50, 0xd1ba, 0x182e, 0xc08d, 0x1, 0x0);
        gbc.writeMem(0xb1f8, { 0xcb, 0x86 });
        gbc.writeMem(0xc08d, { 0xa6 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x768, gbc.sp());
        EXPECT(0xb1fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1f8));
        EXPECT(0x86, gbc.readMem(0xb1f9));
        EXPECT(0xa6, gbc.readMem(0xc08d));
        // CB 86 0178
        gbc.setState(0xe9f1, 0x4a5d, 0x9180, 0x87c8, 0xbdbd, 0xf7b5, 0x0, 0x1);
        gbc.writeMem(0xe9f1, { 0xcb, 0x86 });
        gbc.writeMem(0xf7b5, { 0x3d });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x4a5d, gbc.sp());
        EXPECT(0xe9f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9f1));
        EXPECT(0x86, gbc.readMem(0xe9f2));
        EXPECT(0x3c, gbc.readMem(0xf7b5));
        // CB 86 0179
        gbc.setState(0x47e9, 0xdb75, 0xde80, 0xfcdd, 0x164f, 0xc2c6, 0x1, 0x1);
        gbc.writeMem(0x47e9, { 0xcb, 0x86 });
        gbc.writeMem(0xc2c6, { 0x84 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xdb75, gbc.sp());
        EXPECT(0x47eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0xc2c6));
        // CB 86 017A
        gbc.setState(0x9386, 0x4748, 0xcf00, 0x8ec3, 0xd6fc, 0xadc6, 0x1, 0x0);
        gbc.writeMem(0x9386, { 0xcb, 0x86 });
        gbc.writeMem(0xadc6, { 0xde });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x4748, gbc.sp());
        EXPECT(0x9388, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9386));
        EXPECT(0x86, gbc.readMem(0x9387));
        EXPECT(0xde, gbc.readMem(0xadc6));
        // CB 86 017B
        gbc.setState(0x277b, 0xb18, 0x55d0, 0x369f, 0xdef3, 0x9a3f, 0x0, 0x0);
        gbc.writeMem(0x277b, { 0xcb, 0x86 });
        gbc.writeMem(0x9a3f, { 0x81 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xb18, gbc.sp());
        EXPECT(0x277d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x80, gbc.readMem(0x9a3f));
        // CB 86 017C
        gbc.setState(0xb533, 0x520, 0x510, 0x5a21, 0x1f56, 0xaff7, 0x0, 0x1);
        gbc.writeMem(0xaff7, { 0x4a });
        gbc.writeMem(0xb533, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x520, gbc.sp());
        EXPECT(0xb535, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4a, gbc.readMem(0xaff7));
        EXPECT(0xcb, gbc.readMem(0xb533));
        EXPECT(0x86, gbc.readMem(0xb534));
        // CB 86 017E
        gbc.setState(0x4e91, 0xfa4e, 0x1050, 0x26d5, 0xa0cb, 0x43a1, 0x0, 0x0);
        gbc.writeMem(0x43a1, { 0x66 });
        gbc.writeMem(0x4e91, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xfa4e, gbc.sp());
        EXPECT(0x4e93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 017F
        gbc.setState(0x55b6, 0xf544, 0x5aa0, 0x7ff7, 0x3770, 0x6b4a, 0x1, 0x1);
        gbc.writeMem(0x55b6, { 0xcb, 0x86 });
        gbc.writeMem(0x6b4a, { 0x4a });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xf544, gbc.sp());
        EXPECT(0x55b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0180
        gbc.setState(0x96b1, 0xe856, 0xd3b0, 0x7766, 0xbfa7, 0x1732, 0x1, 0x1);
        gbc.writeMem(0x1732, { 0xf4 });
        gbc.writeMem(0x96b1, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xe856, gbc.sp());
        EXPECT(0x96b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96b1));
        EXPECT(0x86, gbc.readMem(0x96b2));
        // CB 86 0182
        gbc.setState(0xefc1, 0x91eb, 0x99b0, 0xee8a, 0x55c6, 0xf3b2, 0x1, 0x1);
        gbc.writeMem(0xefc1, { 0xcb, 0x86 });
        gbc.writeMem(0xf3b2, { 0xdc });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x91eb, gbc.sp());
        EXPECT(0xefc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefc1));
        EXPECT(0x86, gbc.readMem(0xefc2));
        EXPECT(0xdc, gbc.readMem(0xf3b2));
        // CB 86 0183
        gbc.setState(0xb5a5, 0x3bc, 0x85c0, 0x4f3d, 0x742b, 0xb775, 0x1, 0x0);
        gbc.writeMem(0xb5a5, { 0xcb, 0x86 });
        gbc.writeMem(0xb775, { 0x12 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x3bc, gbc.sp());
        EXPECT(0xb5a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5a5));
        EXPECT(0x86, gbc.readMem(0xb5a6));
        EXPECT(0x12, gbc.readMem(0xb775));
        // CB 86 0185
        gbc.setState(0xb2a4, 0x470b, 0xc800, 0x7837, 0x2950, 0xd698, 0x0, 0x0);
        gbc.writeMem(0xb2a4, { 0xcb, 0x86 });
        gbc.writeMem(0xd698, { 0x11 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x470b, gbc.sp());
        EXPECT(0xb2a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2a4));
        EXPECT(0x86, gbc.readMem(0xb2a5));
        EXPECT(0x10, gbc.readMem(0xd698));
        // CB 86 0187
        gbc.setState(0xaaf3, 0x7a9f, 0xac90, 0x237a, 0x607c, 0xc30a, 0x0, 0x0);
        gbc.writeMem(0xaaf3, { 0xcb, 0x86 });
        gbc.writeMem(0xc30a, { 0x10 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x7a9f, gbc.sp());
        EXPECT(0xaaf5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaaf3));
        EXPECT(0x86, gbc.readMem(0xaaf4));
        EXPECT(0x10, gbc.readMem(0xc30a));
        // CB 86 0188
        gbc.setState(0x27a1, 0x3a1d, 0x97b0, 0xf0bd, 0xd57c, 0x9368, 0x0, 0x0);
        gbc.writeMem(0x27a1, { 0xcb, 0x86 });
        gbc.writeMem(0x9368, { 0x36 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x3a1d, gbc.sp());
        EXPECT(0x27a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0x9368));
        // CB 86 0189
        gbc.setState(0xe4d7, 0x88ad, 0x8f50, 0x137c, 0xbc4a, 0x50c8, 0x0, 0x1);
        gbc.writeMem(0x50c8, { 0x38 });
        gbc.writeMem(0xe4d7, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x88ad, gbc.sp());
        EXPECT(0xe4d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4d7));
        EXPECT(0x86, gbc.readMem(0xe4d8));
        // CB 86 018A
        gbc.setState(0x2821, 0x5b85, 0xd800, 0x2797, 0x7384, 0xd638, 0x0, 0x1);
        gbc.writeMem(0x2821, { 0xcb, 0x86 });
        gbc.writeMem(0xd638, { 0xfb });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x5b85, gbc.sp());
        EXPECT(0x2823, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfa, gbc.readMem(0xd638));
        // CB 86 018B
        gbc.setState(0x1c1b, 0x1a73, 0xc560, 0x3834, 0x122, 0x88c1, 0x0, 0x1);
        gbc.writeMem(0x1c1b, { 0xcb, 0x86 });
        gbc.writeMem(0x88c1, { 0x66 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x1a73, gbc.sp());
        EXPECT(0x1c1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0x88c1));
        // CB 86 018C
        gbc.setState(0xab67, 0x8375, 0x130, 0xba5b, 0x8851, 0xaa90, 0x1, 0x1);
        gbc.writeMem(0xaa90, { 0xd8 });
        gbc.writeMem(0xab67, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x8375, gbc.sp());
        EXPECT(0xab69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd8, gbc.readMem(0xaa90));
        EXPECT(0xcb, gbc.readMem(0xab67));
        EXPECT(0x86, gbc.readMem(0xab68));
        // CB 86 018D
        gbc.setState(0xe6c5, 0xa4f8, 0x41f0, 0xcd80, 0x2548, 0x9def, 0x0, 0x0);
        gbc.writeMem(0x9def, { 0x19 });
        gbc.writeMem(0xe6c5, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xa4f8, gbc.sp());
        EXPECT(0xe6c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x18, gbc.readMem(0x9def));
        EXPECT(0xcb, gbc.readMem(0xe6c5));
        EXPECT(0x86, gbc.readMem(0xe6c6));
        // CB 86 018F
        gbc.setState(0x58b7, 0x8a26, 0x8090, 0x49d3, 0x42fe, 0x666f, 0x0, 0x1);
        gbc.writeMem(0x58b7, { 0xcb, 0x86 });
        gbc.writeMem(0x666f, { 0xb8 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x8a26, gbc.sp());
        EXPECT(0x58b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0190
        gbc.setState(0x3fe7, 0x8385, 0x5840, 0x2974, 0x7702, 0x40cd, 0x0, 0x1);
        gbc.writeMem(0x3fe7, { 0xcb, 0x86 });
        gbc.writeMem(0x40cd, { 0xf4 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x8385, gbc.sp());
        EXPECT(0x3fe9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0191
        gbc.setState(0x9703, 0xea07, 0x1c00, 0xa7cf, 0xbe69, 0xe0a6, 0x1, 0x0);
        gbc.writeMem(0x9703, { 0xcb, 0x86 });
        gbc.writeMem(0xe0a6, { 0x68 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xea07, gbc.sp());
        EXPECT(0x9705, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9703));
        EXPECT(0x86, gbc.readMem(0x9704));
        EXPECT(0x68, gbc.readMem(0xe0a6));
        // CB 86 0193
        gbc.setState(0xdaa0, 0x8280, 0xfa10, 0xacea, 0x6d46, 0x7ad, 0x0, 0x1);
        gbc.writeMem(0x7ad, { 0x18 });
        gbc.writeMem(0xdaa0, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x8280, gbc.sp());
        EXPECT(0xdaa2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdaa0));
        EXPECT(0x86, gbc.readMem(0xdaa1));
        // CB 86 0195
        gbc.setState(0x301c, 0x2213, 0x2b20, 0x6dea, 0x27c1, 0x8edc, 0x0, 0x0);
        gbc.writeMem(0x301c, { 0xcb, 0x86 });
        gbc.writeMem(0x8edc, { 0xd1 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x2213, gbc.sp());
        EXPECT(0x301e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd0, gbc.readMem(0x8edc));
        // CB 86 0196
        gbc.setState(0xd026, 0x42b1, 0x71f0, 0x4623, 0xb0b1, 0x9a3b, 0x0, 0x0);
        gbc.writeMem(0x9a3b, { 0x2a });
        gbc.writeMem(0xd026, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x42b1, gbc.sp());
        EXPECT(0xd028, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0x9a3b));
        EXPECT(0xcb, gbc.readMem(0xd026));
        EXPECT(0x86, gbc.readMem(0xd027));
        // CB 86 0198
        gbc.setState(0x6c56, 0xc740, 0xce60, 0xbeb0, 0x8e4c, 0xed62, 0x1, 0x1);
        gbc.writeMem(0x6c56, { 0xcb, 0x86 });
        gbc.writeMem(0xed62, { 0x58 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xc740, gbc.sp());
        EXPECT(0x6c58, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0xed62));
        // CB 86 0199
        gbc.setState(0x12f3, 0x133e, 0x3030, 0x1b9f, 0x7706, 0xdb34, 0x1, 0x1);
        gbc.writeMem(0x12f3, { 0xcb, 0x86 });
        gbc.writeMem(0xdb34, { 0x61 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x133e, gbc.sp());
        EXPECT(0x12f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0xdb34));
        // CB 86 019A
        gbc.setState(0xbd3c, 0x6f6e, 0xbd10, 0x162a, 0x3c80, 0x90db, 0x0, 0x1);
        gbc.writeMem(0x90db, { 0xcf });
        gbc.writeMem(0xbd3c, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x6f6e, gbc.sp());
        EXPECT(0xbd3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0x90db));
        EXPECT(0xcb, gbc.readMem(0xbd3c));
        EXPECT(0x86, gbc.readMem(0xbd3d));
        // CB 86 019B
        gbc.setState(0x42fa, 0x112, 0x85d0, 0xc482, 0x59e5, 0x938f, 0x0, 0x1);
        gbc.writeMem(0x42fa, { 0xcb, 0x86 });
        gbc.writeMem(0x938f, { 0xda });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x112, gbc.sp());
        EXPECT(0x42fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xda, gbc.readMem(0x938f));
        // CB 86 019C
        gbc.setState(0xbfc3, 0x9ce5, 0x4aa0, 0xa6fc, 0xa4ab, 0xcb65, 0x0, 0x1);
        gbc.writeMem(0xbfc3, { 0xcb, 0x86 });
        gbc.writeMem(0xcb65, { 0x16 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x9ce5, gbc.sp());
        EXPECT(0xbfc5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfc3));
        EXPECT(0x86, gbc.readMem(0xbfc4));
        EXPECT(0x16, gbc.readMem(0xcb65));
        // CB 86 019D
        gbc.setState(0xc7f1, 0x75e1, 0xcf10, 0x4036, 0xc1b7, 0xca07, 0x1, 0x1);
        gbc.writeMem(0xc7f1, { 0xcb, 0x86 });
        gbc.writeMem(0xca07, { 0x6c });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x75e1, gbc.sp());
        EXPECT(0xc7f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7f1));
        EXPECT(0x86, gbc.readMem(0xc7f2));
        EXPECT(0x6c, gbc.readMem(0xca07));
        // CB 86 019E
        gbc.setState(0x52fc, 0xbc, 0xa5d0, 0xcc04, 0xc4bc, 0x74f0, 0x1, 0x0);
        gbc.writeMem(0x52fc, { 0xcb, 0x86 });
        gbc.writeMem(0x74f0, { 0x5a });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xbc, gbc.sp());
        EXPECT(0x52fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 019F
        gbc.setState(0xa4b7, 0x8499, 0x2d40, 0x79a0, 0xc025, 0xa695, 0x0, 0x0);
        gbc.writeMem(0xa4b7, { 0xcb, 0x86 });
        gbc.writeMem(0xa695, { 0xa3 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x8499, gbc.sp());
        EXPECT(0xa4b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4b7));
        EXPECT(0x86, gbc.readMem(0xa4b8));
        EXPECT(0xa2, gbc.readMem(0xa695));
        // CB 86 01A1
        gbc.setState(0xed89, 0xc37d, 0xa3e0, 0x14b4, 0x5a19, 0xfb71, 0x0, 0x1);
        gbc.writeMem(0xed89, { 0xcb, 0x86 });
        gbc.writeMem(0xfb71, { 0xf3 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xc37d, gbc.sp());
        EXPECT(0xed8b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed89));
        EXPECT(0x86, gbc.readMem(0xed8a));
        EXPECT(0xf2, gbc.readMem(0xfb71));
        // CB 86 01A2
        gbc.setState(0x5aea, 0xefe4, 0xa5c0, 0x2277, 0xb627, 0xde72, 0x1, 0x0);
        gbc.writeMem(0x5aea, { 0xcb, 0x86 });
        gbc.writeMem(0xde72, { 0xc1 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xefe4, gbc.sp());
        EXPECT(0x5aec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc0, gbc.readMem(0xde72));
        // CB 86 01A5
        gbc.setState(0x77ed, 0x6300, 0xc4a0, 0xf6c, 0x3485, 0xe02e, 0x0, 0x1);
        gbc.writeMem(0x77ed, { 0xcb, 0x86 });
        gbc.writeMem(0xe02e, { 0x64 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x6300, gbc.sp());
        EXPECT(0x77ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x64, gbc.readMem(0xe02e));
        // CB 86 01A6
        gbc.setState(0x9e71, 0xf2c9, 0x7330, 0xa060, 0x7988, 0x514f, 0x0, 0x1);
        gbc.writeMem(0x514f, { 0x3e });
        gbc.writeMem(0x9e71, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xf2c9, gbc.sp());
        EXPECT(0x9e73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e71));
        EXPECT(0x86, gbc.readMem(0x9e72));
        // CB 86 01A7
        gbc.setState(0xa754, 0xcae0, 0x690, 0x3d84, 0x7728, 0xd0c3, 0x0, 0x0);
        gbc.writeMem(0xa754, { 0xcb, 0x86 });
        gbc.writeMem(0xd0c3, { 0x6b });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xcae0, gbc.sp());
        EXPECT(0xa756, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa754));
        EXPECT(0x86, gbc.readMem(0xa755));
        EXPECT(0x6a, gbc.readMem(0xd0c3));
        // CB 86 01A8
        gbc.setState(0x150b, 0x3fd0, 0xb50, 0xb79f, 0xff81, 0x556, 0x1, 0x0);
        gbc.writeMem(0x556, { 0x46 });
        gbc.writeMem(0x150b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x3fd0, gbc.sp());
        EXPECT(0x150d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 01AA
        gbc.setState(0xb648, 0xfaac, 0xd5e0, 0x5f4, 0xa9d1, 0xe3b7, 0x1, 0x0);
        gbc.writeMem(0xb648, { 0xcb, 0x86 });
        gbc.writeMem(0xe3b7, { 0x78 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xfaac, gbc.sp());
        EXPECT(0xb64a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb648));
        EXPECT(0x86, gbc.readMem(0xb649));
        EXPECT(0x78, gbc.readMem(0xe3b7));
        // CB 86 01AB
        gbc.setState(0x60ee, 0xdcde, 0x4930, 0x6f0f, 0xd84, 0xc911, 0x1, 0x1);
        gbc.writeMem(0x60ee, { 0xcb, 0x86 });
        gbc.writeMem(0xc911, { 0x1 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xdcde, gbc.sp());
        EXPECT(0x60f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x0, gbc.readMem(0xc911));
        // CB 86 01AC
        gbc.setState(0xb90b, 0xb74b, 0x7560, 0x9521, 0x97a, 0x8296, 0x0, 0x1);
        gbc.writeMem(0x8296, { 0xd2 });
        gbc.writeMem(0xb90b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xb74b, gbc.sp());
        EXPECT(0xb90d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0x8296));
        EXPECT(0xcb, gbc.readMem(0xb90b));
        EXPECT(0x86, gbc.readMem(0xb90c));
        // CB 86 01AD
        gbc.setState(0x854c, 0xe78f, 0xada0, 0xb652, 0x9b02, 0xc18b, 0x0, 0x0);
        gbc.writeMem(0x854c, { 0xcb, 0x86 });
        gbc.writeMem(0xc18b, { 0x60 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xe78f, gbc.sp());
        EXPECT(0x854e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x854c));
        EXPECT(0x86, gbc.readMem(0x854d));
        EXPECT(0x60, gbc.readMem(0xc18b));
        // CB 86 01AE
        gbc.setState(0x7697, 0x61d, 0x2aa0, 0x7294, 0x7ea5, 0xe2ed, 0x0, 0x1);
        gbc.writeMem(0x7697, { 0xcb, 0x86 });
        gbc.writeMem(0xe2ed, { 0x9f });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x61d, gbc.sp());
        EXPECT(0x7699, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9e, gbc.readMem(0xe2ed));
        // CB 86 01B1
        gbc.setState(0xdb48, 0x4509, 0xd240, 0x8697, 0x979, 0xca50, 0x0, 0x0);
        gbc.writeMem(0xca50, { 0x97 });
        gbc.writeMem(0xdb48, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x4509, gbc.sp());
        EXPECT(0xdb4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x96, gbc.readMem(0xca50));
        EXPECT(0xcb, gbc.readMem(0xdb48));
        EXPECT(0x86, gbc.readMem(0xdb49));
        // CB 86 01B2
        gbc.setState(0xe262, 0x12a8, 0xce30, 0x9116, 0x83d7, 0xc2ea, 0x1, 0x0);
        gbc.writeMem(0xc2ea, { 0x52 });
        gbc.writeMem(0xe262, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x12a8, gbc.sp());
        EXPECT(0xe264, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0xc2ea));
        EXPECT(0xcb, gbc.readMem(0xe262));
        EXPECT(0x86, gbc.readMem(0xe263));
        // CB 86 01B4
        gbc.setState(0xb668, 0xa748, 0xd3d0, 0x7554, 0x3593, 0x3ca4, 0x0, 0x0);
        gbc.writeMem(0x3ca4, { 0x74 });
        gbc.writeMem(0xb668, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xa748, gbc.sp());
        EXPECT(0xb66a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb668));
        EXPECT(0x86, gbc.readMem(0xb669));
        // CB 86 01B5
        gbc.setState(0x9226, 0x84c9, 0x32f0, 0x8d6b, 0xea15, 0x351d, 0x0, 0x0);
        gbc.writeMem(0x351d, { 0xe });
        gbc.writeMem(0x9226, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x84c9, gbc.sp());
        EXPECT(0x9228, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9226));
        EXPECT(0x86, gbc.readMem(0x9227));
        // CB 86 01B6
        gbc.setState(0xa2df, 0xa0ae, 0xe7c0, 0x95b2, 0xb0b6, 0xec4e, 0x1, 0x0);
        gbc.writeMem(0xa2df, { 0xcb, 0x86 });
        gbc.writeMem(0xec4e, { 0xdf });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xa0ae, gbc.sp());
        EXPECT(0xa2e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2df));
        EXPECT(0x86, gbc.readMem(0xa2e0));
        EXPECT(0xde, gbc.readMem(0xec4e));
        // CB 86 01B7
        gbc.setState(0xa3d6, 0xeb92, 0xb000, 0x9e11, 0x84fe, 0xb4bd, 0x1, 0x0);
        gbc.writeMem(0xa3d6, { 0xcb, 0x86 });
        gbc.writeMem(0xb4bd, { 0xc2 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xeb92, gbc.sp());
        EXPECT(0xa3d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3d6));
        EXPECT(0x86, gbc.readMem(0xa3d7));
        EXPECT(0xc2, gbc.readMem(0xb4bd));
        // CB 86 01B9
        gbc.setState(0x7395, 0x53da, 0xc1b0, 0xcf22, 0x2027, 0xc6ae, 0x0, 0x0);
        gbc.writeMem(0x7395, { 0xcb, 0x86 });
        gbc.writeMem(0xc6ae, { 0x8f });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x53da, gbc.sp());
        EXPECT(0x7397, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8e, gbc.readMem(0xc6ae));
        // CB 86 01BA
        gbc.setState(0xb65, 0xbff3, 0x7e10, 0xa531, 0xe836, 0xd3d2, 0x1, 0x0);
        gbc.writeMem(0xb65, { 0xcb, 0x86 });
        gbc.writeMem(0xd3d2, { 0x4 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xbff3, gbc.sp());
        EXPECT(0xb67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0xd3d2));
        // CB 86 01BB
        gbc.setState(0x7c6e, 0x6ccf, 0x6200, 0xebc, 0xe6a1, 0xb794, 0x0, 0x0);
        gbc.writeMem(0x7c6e, { 0xcb, 0x86 });
        gbc.writeMem(0xb794, { 0x5 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x6ccf, gbc.sp());
        EXPECT(0x7c70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0xb794));
        // CB 86 01BC
        gbc.setState(0xdda8, 0xbedb, 0xec10, 0x3cc6, 0x4ae4, 0xeee0, 0x1, 0x0);
        gbc.writeMem(0xdda8, { 0xcb, 0x86 });
        gbc.writeMem(0xeee0, { 0x69 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xbedb, gbc.sp());
        EXPECT(0xddaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdda8));
        EXPECT(0x86, gbc.readMem(0xdda9));
        EXPECT(0x68, gbc.readMem(0xeee0));
        // CB 86 01BE
        gbc.setState(0xaa7c, 0xa2bf, 0x4c00, 0xe0ec, 0x5062, 0xcd30, 0x0, 0x1);
        gbc.writeMem(0xaa7c, { 0xcb, 0x86 });
        gbc.writeMem(0xcd30, { 0x13 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xa2bf, gbc.sp());
        EXPECT(0xaa7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa7c));
        EXPECT(0x86, gbc.readMem(0xaa7d));
        EXPECT(0x12, gbc.readMem(0xcd30));
        // CB 86 01BF
        gbc.setState(0x5650, 0x7b09, 0x43f0, 0x5054, 0x695e, 0xeba0, 0x1, 0x1);
        gbc.writeMem(0x5650, { 0xcb, 0x86 });
        gbc.writeMem(0xeba0, { 0xcd });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x7b09, gbc.sp());
        EXPECT(0x5652, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xeba0));
        // CB 86 01C0
        gbc.setState(0xbb2b, 0x304, 0xe0f0, 0xc098, 0x876, 0x57c1, 0x0, 0x1);
        gbc.writeMem(0x57c1, { 0xb6 });
        gbc.writeMem(0xbb2b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x304, gbc.sp());
        EXPECT(0xbb2d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb2b));
        EXPECT(0x86, gbc.readMem(0xbb2c));
        // CB 86 01C2
        gbc.setState(0xf1a, 0x2f69, 0x5440, 0x4325, 0x3e0a, 0xbaaf, 0x0, 0x1);
        gbc.writeMem(0xf1a, { 0xcb, 0x86 });
        gbc.writeMem(0xbaaf, { 0xfd });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x2f69, gbc.sp());
        EXPECT(0xf1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfc, gbc.readMem(0xbaaf));
        // CB 86 01C3
        gbc.setState(0x48b0, 0xc6e9, 0x4850, 0xb2c5, 0x75b3, 0xe3c7, 0x0, 0x0);
        gbc.writeMem(0x48b0, { 0xcb, 0x86 });
        gbc.writeMem(0xe3c7, { 0x91 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xc6e9, gbc.sp());
        EXPECT(0x48b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0xe3c7));
        // CB 86 01C5
        gbc.setState(0x219b, 0x8486, 0x3070, 0xec4, 0x1242, 0xebcb, 0x0, 0x1);
        gbc.writeMem(0x219b, { 0xcb, 0x86 });
        gbc.writeMem(0xebcb, { 0x90 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x8486, gbc.sp());
        EXPECT(0x219d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0xebcb));
        // CB 86 01C7
        gbc.setState(0x831c, 0x2dd1, 0x3b10, 0x6265, 0xa18d, 0x8547, 0x1, 0x1);
        gbc.writeMem(0x831c, { 0xcb, 0x86 });
        gbc.writeMem(0x8547, { 0x4a });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x2dd1, gbc.sp());
        EXPECT(0x831e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x831c));
        EXPECT(0x86, gbc.readMem(0x831d));
        EXPECT(0x4a, gbc.readMem(0x8547));
        // CB 86 01C8
        gbc.setState(0x5a0a, 0x6176, 0xf7a0, 0x9f58, 0x4994, 0x6435, 0x1, 0x0);
        gbc.writeMem(0x5a0a, { 0xcb, 0x86 });
        gbc.writeMem(0x6435, { 0x2a });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x6176, gbc.sp());
        EXPECT(0x5a0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 01CA
        gbc.setState(0x2c20, 0xcfa4, 0x5f50, 0xe6a4, 0x1669, 0x9231, 0x0, 0x0);
        gbc.writeMem(0x2c20, { 0xcb, 0x86 });
        gbc.writeMem(0x9231, { 0x81 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xcfa4, gbc.sp());
        EXPECT(0x2c22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x80, gbc.readMem(0x9231));
        // CB 86 01CB
        gbc.setState(0xc43b, 0xdcec, 0xccd0, 0x95a2, 0x6435, 0x9bea, 0x1, 0x0);
        gbc.writeMem(0x9bea, { 0x24 });
        gbc.writeMem(0xc43b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xdcec, gbc.sp());
        EXPECT(0xc43d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0x9bea));
        EXPECT(0xcb, gbc.readMem(0xc43b));
        EXPECT(0x86, gbc.readMem(0xc43c));
        // CB 86 01CC
        gbc.setState(0xde13, 0x728d, 0x5990, 0xb19a, 0x335e, 0xe14e, 0x1, 0x0);
        gbc.writeMem(0xde13, { 0xcb, 0x86 });
        gbc.writeMem(0xe14e, { 0x3b });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x728d, gbc.sp());
        EXPECT(0xde15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde13));
        EXPECT(0x86, gbc.readMem(0xde14));
        EXPECT(0x3a, gbc.readMem(0xe14e));
        // CB 86 01CD
        gbc.setState(0x1811, 0xc92a, 0xc710, 0x1357, 0x78e, 0x4c5, 0x1, 0x1);
        gbc.writeMem(0x4c5, { 0x78 });
        gbc.writeMem(0x1811, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xc92a, gbc.sp());
        EXPECT(0x1813, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 01CE
        gbc.setState(0x888a, 0xd564, 0x79c0, 0x5a5e, 0xd4cd, 0x7947, 0x0, 0x1);
        gbc.writeMem(0x7947, { 0x3a });
        gbc.writeMem(0x888a, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xd564, gbc.sp());
        EXPECT(0x888c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x888a));
        EXPECT(0x86, gbc.readMem(0x888b));
        // CB 86 01CF
        gbc.setState(0xcce4, 0xecbe, 0xbce0, 0x2471, 0x8c31, 0x1cac, 0x0, 0x1);
        gbc.writeMem(0x1cac, { 0x36 });
        gbc.writeMem(0xcce4, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xecbe, gbc.sp());
        EXPECT(0xcce6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcce4));
        EXPECT(0x86, gbc.readMem(0xcce5));
        // CB 86 01D0
        gbc.setState(0x4d1, 0x6cee, 0xaa70, 0x2ee8, 0xf3b3, 0xad3f, 0x1, 0x0);
        gbc.writeMem(0x4d1, { 0xcb, 0x86 });
        gbc.writeMem(0xad3f, { 0x73 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x6cee, gbc.sp());
        EXPECT(0x4d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x72, gbc.readMem(0xad3f));
        // CB 86 01D2
        gbc.setState(0x954b, 0xdc1a, 0x2be0, 0x3f9, 0x8dec, 0xbb62, 0x1, 0x1);
        gbc.writeMem(0x954b, { 0xcb, 0x86 });
        gbc.writeMem(0xbb62, { 0x2a });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xdc1a, gbc.sp());
        EXPECT(0x954d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x954b));
        EXPECT(0x86, gbc.readMem(0x954c));
        EXPECT(0x2a, gbc.readMem(0xbb62));
        // CB 86 01D3
        gbc.setState(0x60cb, 0x64b4, 0xe320, 0x2171, 0x3991, 0xb5fc, 0x0, 0x0);
        gbc.writeMem(0x60cb, { 0xcb, 0x86 });
        gbc.writeMem(0xb5fc, { 0x86 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x64b4, gbc.sp());
        EXPECT(0x60cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xb5fc));
        // CB 86 01D4
        gbc.setState(0x7368, 0x1175, 0x6300, 0xeae8, 0xcda3, 0xcbca, 0x0, 0x1);
        gbc.writeMem(0x7368, { 0xcb, 0x86 });
        gbc.writeMem(0xcbca, { 0x65 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x1175, gbc.sp());
        EXPECT(0x736a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x64, gbc.readMem(0xcbca));
        // CB 86 01D5
        gbc.setState(0xd41d, 0x9d28, 0x8690, 0xd818, 0x9518, 0x383, 0x1, 0x0);
        gbc.writeMem(0x383, { 0xd0 });
        gbc.writeMem(0xd41d, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x9d28, gbc.sp());
        EXPECT(0xd41f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd41d));
        EXPECT(0x86, gbc.readMem(0xd41e));
        // CB 86 01D7
        gbc.setState(0xd393, 0x8620, 0x80f0, 0x33be, 0x9976, 0x32d5, 0x1, 0x0);
        gbc.writeMem(0x32d5, { 0xde });
        gbc.writeMem(0xd393, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x8620, gbc.sp());
        EXPECT(0xd395, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd393));
        EXPECT(0x86, gbc.readMem(0xd394));
        // CB 86 01D8
        gbc.setState(0xd77d, 0xc618, 0x5300, 0xe588, 0xdd63, 0x394e, 0x1, 0x1);
        gbc.writeMem(0x394e, { 0xfc });
        gbc.writeMem(0xd77d, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xc618, gbc.sp());
        EXPECT(0xd77f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd77d));
        EXPECT(0x86, gbc.readMem(0xd77e));
        // CB 86 01DA
        gbc.setState(0xc1d, 0x23ad, 0x95f0, 0xd9c6, 0x77c8, 0x6322, 0x1, 0x0);
        gbc.writeMem(0xc1d, { 0xcb, 0x86 });
        gbc.writeMem(0x6322, { 0x54 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x23ad, gbc.sp());
        EXPECT(0xc1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 01DB
        gbc.setState(0xe5cd, 0xe8d1, 0xbc0, 0xf653, 0xa24, 0xa870, 0x1, 0x0);
        gbc.writeMem(0xa870, { 0x9 });
        gbc.writeMem(0xe5cd, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xe8d1, gbc.sp());
        EXPECT(0xe5cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8, gbc.readMem(0xa870));
        EXPECT(0xcb, gbc.readMem(0xe5cd));
        EXPECT(0x86, gbc.readMem(0xe5ce));
        // CB 86 01DC
        gbc.setState(0xe65, 0xbc8b, 0xdb60, 0x3198, 0x2c2d, 0x9131, 0x0, 0x0);
        gbc.writeMem(0xe65, { 0xcb, 0x86 });
        gbc.writeMem(0x9131, { 0xfc });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xbc8b, gbc.sp());
        EXPECT(0xe67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfc, gbc.readMem(0x9131));
        // CB 86 01DD
        gbc.setState(0xdb6e, 0x56f9, 0x9ea0, 0xc9be, 0xf0, 0xc75d, 0x0, 0x1);
        gbc.writeMem(0xc75d, { 0xcc });
        gbc.writeMem(0xdb6e, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x56f9, gbc.sp());
        EXPECT(0xdb70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc75d));
        EXPECT(0xcb, gbc.readMem(0xdb6e));
        EXPECT(0x86, gbc.readMem(0xdb6f));
        // CB 86 01DE
        gbc.setState(0xca7, 0x5a4b, 0x5e0, 0xea25, 0x73b5, 0x8342, 0x1, 0x0);
        gbc.writeMem(0xca7, { 0xcb, 0x86 });
        gbc.writeMem(0x8342, { 0x98 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x5a4b, gbc.sp());
        EXPECT(0xca9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0x8342));
        // CB 86 01DF
        gbc.setState(0x36a4, 0xedf8, 0x30a0, 0x9386, 0xf5e1, 0x7aa0, 0x1, 0x0);
        gbc.writeMem(0x36a4, { 0xcb, 0x86 });
        gbc.writeMem(0x7aa0, { 0x94 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xedf8, gbc.sp());
        EXPECT(0x36a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 01E1
        gbc.setState(0x1636, 0x2256, 0xf4b0, 0xca8, 0x97de, 0x83d1, 0x1, 0x1);
        gbc.writeMem(0x1636, { 0xcb, 0x86 });
        gbc.writeMem(0x83d1, { 0x13 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x2256, gbc.sp());
        EXPECT(0x1638, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0x83d1));
        // CB 86 01E3
        gbc.setState(0x24c2, 0x5f65, 0x1370, 0x70e9, 0xf332, 0x85cb, 0x0, 0x0);
        gbc.writeMem(0x24c2, { 0xcb, 0x86 });
        gbc.writeMem(0x85cb, { 0xfb });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x5f65, gbc.sp());
        EXPECT(0x24c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfa, gbc.readMem(0x85cb));
        // CB 86 01E4
        gbc.setState(0x1c, 0xf7bd, 0x3060, 0xc069, 0x9b11, 0xb125, 0x0, 0x1);
        gbc.writeMem(0x1c, { 0xcb, 0x86 });
        gbc.writeMem(0xb125, { 0xd6 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xf7bd, gbc.sp());
        EXPECT(0x1e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0xb125));
        // CB 86 01E5
        gbc.setState(0xd4a, 0xa36a, 0x8cc0, 0xe1f6, 0x86e2, 0x2468, 0x1, 0x0);
        gbc.writeMem(0xd4a, { 0xcb, 0x86 });
        gbc.writeMem(0x2468, { 0xba });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xa36a, gbc.sp());
        EXPECT(0xd4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 01E6
        gbc.setState(0x6636, 0xebd0, 0xbf00, 0xf783, 0x3a, 0xa8e9, 0x0, 0x1);
        gbc.writeMem(0x6636, { 0xcb, 0x86 });
        gbc.writeMem(0xa8e9, { 0x75 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xebd0, gbc.sp());
        EXPECT(0x6638, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xa8e9));
        // CB 86 01E7
        gbc.setState(0x855d, 0xf533, 0xb620, 0x850c, 0xcf3e, 0xd755, 0x1, 0x1);
        gbc.writeMem(0x855d, { 0xcb, 0x86 });
        gbc.writeMem(0xd755, { 0xfa });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xf533, gbc.sp());
        EXPECT(0x855f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x855d));
        EXPECT(0x86, gbc.readMem(0x855e));
        EXPECT(0xfa, gbc.readMem(0xd755));
        // CB 86 01E8
        gbc.setState(0x97e9, 0x37b7, 0x96a0, 0x82de, 0xe03f, 0x1c16, 0x1, 0x1);
        gbc.writeMem(0x1c16, { 0x74 });
        gbc.writeMem(0x97e9, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x37b7, gbc.sp());
        EXPECT(0x97eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97e9));
        EXPECT(0x86, gbc.readMem(0x97ea));
        // CB 86 01E9
        gbc.setState(0x9f93, 0x5f7e, 0xfd90, 0x6474, 0xbfde, 0x4c7, 0x0, 0x1);
        gbc.writeMem(0x4c7, { 0xf0 });
        gbc.writeMem(0x9f93, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x5f7e, gbc.sp());
        EXPECT(0x9f95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f93));
        EXPECT(0x86, gbc.readMem(0x9f94));
        // CB 86 01EB
        gbc.setState(0x6bd1, 0x51f9, 0x17d0, 0x1c1f, 0xe500, 0x89a5, 0x0, 0x1);
        gbc.writeMem(0x6bd1, { 0xcb, 0x86 });
        gbc.writeMem(0x89a5, { 0x39 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x51f9, gbc.sp());
        EXPECT(0x6bd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0x89a5));
        // CB 86 01EC
        gbc.setState(0x246, 0x74a9, 0x83f0, 0xb6be, 0xdb59, 0xc539, 0x0, 0x0);
        gbc.writeMem(0x246, { 0xcb, 0x86 });
        gbc.writeMem(0xc539, { 0xdd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x74a9, gbc.sp());
        EXPECT(0x248, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc539));
        // CB 86 01ED
        gbc.setState(0xb855, 0x395c, 0x4c50, 0x4d8, 0x1c48, 0xdccc, 0x1, 0x1);
        gbc.writeMem(0xb855, { 0xcb, 0x86 });
        gbc.writeMem(0xdccc, { 0x17 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x395c, gbc.sp());
        EXPECT(0xb857, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb855));
        EXPECT(0x86, gbc.readMem(0xb856));
        EXPECT(0x16, gbc.readMem(0xdccc));
        // CB 86 01F0
        gbc.setState(0x78b1, 0x5cb5, 0xa690, 0x598a, 0x78fd, 0x914c, 0x1, 0x1);
        gbc.writeMem(0x78b1, { 0xcb, 0x86 });
        gbc.writeMem(0x914c, { 0x3 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x5cb5, gbc.sp());
        EXPECT(0x78b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2, gbc.readMem(0x914c));
        // CB 86 01F2
        gbc.setState(0xe4c1, 0x28dc, 0x2310, 0x117f, 0xc653, 0xed65, 0x1, 0x1);
        gbc.writeMem(0xe4c1, { 0xcb, 0x86 });
        gbc.writeMem(0xed65, { 0xe1 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x28dc, gbc.sp());
        EXPECT(0xe4c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4c1));
        EXPECT(0x86, gbc.readMem(0xe4c2));
        EXPECT(0xe0, gbc.readMem(0xed65));
        // CB 86 01F3
        gbc.setState(0xdbe, 0xb2d5, 0x74c0, 0xb59a, 0x38ae, 0xe3c1, 0x0, 0x0);
        gbc.writeMem(0xdbe, { 0xcb, 0x86 });
        gbc.writeMem(0xe3c1, { 0xb7 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xb2d5, gbc.sp());
        EXPECT(0xdc0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0xe3c1));
        // CB 86 01F4
        gbc.setState(0xbb4b, 0x4c39, 0x7eb0, 0x5143, 0xc4fb, 0x341c, 0x1, 0x0);
        gbc.writeMem(0x341c, { 0x6c });
        gbc.writeMem(0xbb4b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x4c39, gbc.sp());
        EXPECT(0xbb4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb4b));
        EXPECT(0x86, gbc.readMem(0xbb4c));
        // CB 86 01F5
        gbc.setState(0x73c2, 0xcf4f, 0xdce0, 0x6d24, 0x2d21, 0xd50c, 0x0, 0x1);
        gbc.writeMem(0x73c2, { 0xcb, 0x86 });
        gbc.writeMem(0xd50c, { 0xc6 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xcf4f, gbc.sp());
        EXPECT(0x73c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc6, gbc.readMem(0xd50c));
        // CB 86 01F6
        gbc.setState(0x6ebf, 0xadd1, 0x8ce0, 0x98da, 0xca3e, 0xb878, 0x1, 0x0);
        gbc.writeMem(0x6ebf, { 0xcb, 0x86 });
        gbc.writeMem(0xb878, { 0xbe });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xadd1, gbc.sp());
        EXPECT(0x6ec1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0xb878));
        // CB 86 01F7
        gbc.setState(0x7c90, 0x3382, 0x66d0, 0xa7e4, 0xae01, 0x1d5f, 0x0, 0x1);
        gbc.writeMem(0x1d5f, { 0x66 });
        gbc.writeMem(0x7c90, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x3382, gbc.sp());
        EXPECT(0x7c92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 01F8
        gbc.setState(0xd6e6, 0xf52, 0x6050, 0xe05e, 0xa399, 0xd3ff, 0x0, 0x1);
        gbc.writeMem(0xd3ff, { 0x48 });
        gbc.writeMem(0xd6e6, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xf52, gbc.sp());
        EXPECT(0xd6e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0xd3ff));
        EXPECT(0xcb, gbc.readMem(0xd6e6));
        EXPECT(0x86, gbc.readMem(0xd6e7));
        // CB 86 01FA
        gbc.setState(0xd7f6, 0x1793, 0xc240, 0xef35, 0x598d, 0x2adb, 0x0, 0x0);
        gbc.writeMem(0x2adb, { 0x92 });
        gbc.writeMem(0xd7f6, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x1793, gbc.sp());
        EXPECT(0xd7f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7f6));
        EXPECT(0x86, gbc.readMem(0xd7f7));
        // CB 86 01FB
        gbc.setState(0xde52, 0xb965, 0xa1e0, 0x8ef4, 0x3236, 0xc079, 0x1, 0x0);
        gbc.writeMem(0xc079, { 0x8f });
        gbc.writeMem(0xde52, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xb965, gbc.sp());
        EXPECT(0xde54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8e, gbc.readMem(0xc079));
        EXPECT(0xcb, gbc.readMem(0xde52));
        EXPECT(0x86, gbc.readMem(0xde53));
        // CB 86 01FC
        gbc.setState(0xba5b, 0xf959, 0xe0a0, 0x7ab3, 0xfc4d, 0xe7ac, 0x0, 0x0);
        gbc.writeMem(0xba5b, { 0xcb, 0x86 });
        gbc.writeMem(0xe7ac, { 0x84 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xf959, gbc.sp());
        EXPECT(0xba5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba5b));
        EXPECT(0x86, gbc.readMem(0xba5c));
        EXPECT(0x84, gbc.readMem(0xe7ac));
        // CB 86 01FE
        gbc.setState(0x9d5f, 0x739e, 0xce40, 0x9d43, 0x6de2, 0x34c9, 0x0, 0x0);
        gbc.writeMem(0x34c9, { 0x1c });
        gbc.writeMem(0x9d5f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x739e, gbc.sp());
        EXPECT(0x9d61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d5f));
        EXPECT(0x86, gbc.readMem(0x9d60));
        // CB 86 01FF
        gbc.setState(0x5f88, 0xb787, 0x2820, 0x3af2, 0x1000, 0xe114, 0x1, 0x1);
        gbc.writeMem(0x5f88, { 0xcb, 0x86 });
        gbc.writeMem(0xe114, { 0x3e });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xb787, gbc.sp());
        EXPECT(0x5f8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0xe114));
        // CB 86 0200
        gbc.setState(0xf92, 0x1b69, 0x94d0, 0x21b1, 0x9151, 0xd65e, 0x1, 0x0);
        gbc.writeMem(0xf92, { 0xcb, 0x86 });
        gbc.writeMem(0xd65e, { 0x8c });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x1b69, gbc.sp());
        EXPECT(0xf94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0xd65e));
        // CB 86 0201
        gbc.setState(0xc71c, 0x6336, 0x8250, 0xb935, 0xd16a, 0xd521, 0x1, 0x0);
        gbc.writeMem(0xc71c, { 0xcb, 0x86 });
        gbc.writeMem(0xd521, { 0xcc });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x6336, gbc.sp());
        EXPECT(0xc71e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc71c));
        EXPECT(0x86, gbc.readMem(0xc71d));
        EXPECT(0xcc, gbc.readMem(0xd521));
        // CB 86 0202
        gbc.setState(0x1d29, 0x1de5, 0xb20, 0xc939, 0x1d5, 0xb093, 0x0, 0x0);
        gbc.writeMem(0x1d29, { 0xcb, 0x86 });
        gbc.writeMem(0xb093, { 0xc1 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x1de5, gbc.sp());
        EXPECT(0x1d2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc0, gbc.readMem(0xb093));
        // CB 86 0203
        gbc.setState(0xd234, 0x3671, 0xbd40, 0x23a3, 0xabdc, 0xddc7, 0x1, 0x0);
        gbc.writeMem(0xd234, { 0xcb, 0x86 });
        gbc.writeMem(0xddc7, { 0x62 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x3671, gbc.sp());
        EXPECT(0xd236, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd234));
        EXPECT(0x86, gbc.readMem(0xd235));
        EXPECT(0x62, gbc.readMem(0xddc7));
        // CB 86 0206
        gbc.setState(0xd17e, 0x1482, 0x5ae0, 0xaf7, 0xa4a8, 0x5a1a, 0x0, 0x1);
        gbc.writeMem(0x5a1a, { 0xc });
        gbc.writeMem(0xd17e, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x1482, gbc.sp());
        EXPECT(0xd180, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd17e));
        EXPECT(0x86, gbc.readMem(0xd17f));
        // CB 86 0207
        gbc.setState(0xd5ff, 0x226c, 0xb4b0, 0x40fe, 0xc14d, 0xd54e, 0x1, 0x1);
        gbc.writeMem(0xd54e, { 0x68 });
        gbc.writeMem(0xd5ff, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x226c, gbc.sp());
        EXPECT(0xd601, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x68, gbc.readMem(0xd54e));
        EXPECT(0xcb, gbc.readMem(0xd5ff));
        EXPECT(0x86, gbc.readMem(0xd600));
        // CB 86 0208
        gbc.setState(0xb533, 0x1e1f, 0x3480, 0x678e, 0x446d, 0x2931, 0x0, 0x0);
        gbc.writeMem(0x2931, { 0x58 });
        gbc.writeMem(0xb533, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x1e1f, gbc.sp());
        EXPECT(0xb535, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb533));
        EXPECT(0x86, gbc.readMem(0xb534));
        // CB 86 020A
        gbc.setState(0xa57, 0x522c, 0xf600, 0x8ea7, 0xa31, 0x6172, 0x1, 0x1);
        gbc.writeMem(0xa57, { 0xcb, 0x86 });
        gbc.writeMem(0x6172, { 0x6c });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x522c, gbc.sp());
        EXPECT(0xa59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 020C
        gbc.setState(0x6b55, 0x4c7c, 0x9470, 0xfa90, 0x6071, 0xf1b5, 0x1, 0x0);
        gbc.writeMem(0x6b55, { 0xcb, 0x86 });
        gbc.writeMem(0xf1b5, { 0xd4 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x4c7c, gbc.sp());
        EXPECT(0x6b57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd4, gbc.readMem(0xf1b5));
        // CB 86 020D
        gbc.setState(0x5b1d, 0x580, 0xf910, 0x5b58, 0x317, 0xb6b9, 0x0, 0x0);
        gbc.writeMem(0x5b1d, { 0xcb, 0x86 });
        gbc.writeMem(0xb6b9, { 0x6d });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x580, gbc.sp());
        EXPECT(0x5b1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6c, gbc.readMem(0xb6b9));
        // CB 86 020F
        gbc.setState(0xe342, 0x80f0, 0x4890, 0x2722, 0xb157, 0xe313, 0x1, 0x0);
        gbc.writeMem(0xe313, { 0xc2 });
        gbc.writeMem(0xe342, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x80f0, gbc.sp());
        EXPECT(0xe344, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc2, gbc.readMem(0xe313));
        EXPECT(0xcb, gbc.readMem(0xe342));
        EXPECT(0x86, gbc.readMem(0xe343));
        // CB 86 0210
        gbc.setState(0x4a54, 0xe8ca, 0xe1d0, 0x4b33, 0x8b8b, 0xd08d, 0x0, 0x1);
        gbc.writeMem(0x4a54, { 0xcb, 0x86 });
        gbc.writeMem(0xd08d, { 0xb0 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xe8ca, gbc.sp());
        EXPECT(0x4a56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb0, gbc.readMem(0xd08d));
        // CB 86 0211
        gbc.setState(0xaa22, 0x33b4, 0x9000, 0x414f, 0x512b, 0x4281, 0x1, 0x1);
        gbc.writeMem(0x4281, { 0x5e });
        gbc.writeMem(0xaa22, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x33b4, gbc.sp());
        EXPECT(0xaa24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa22));
        EXPECT(0x86, gbc.readMem(0xaa23));
        // CB 86 0212
        gbc.setState(0x1418, 0x5c0d, 0x6dd0, 0x14c3, 0x921, 0xdf7f, 0x1, 0x1);
        gbc.writeMem(0x1418, { 0xcb, 0x86 });
        gbc.writeMem(0xdf7f, { 0x2f });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x5c0d, gbc.sp());
        EXPECT(0x141a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2e, gbc.readMem(0xdf7f));
        // CB 86 0213
        gbc.setState(0x1d98, 0x3b7, 0x28f0, 0xf821, 0x5333, 0xcf3d, 0x0, 0x0);
        gbc.writeMem(0x1d98, { 0xcb, 0x86 });
        gbc.writeMem(0xcf3d, { 0x3d });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x3b7, gbc.sp());
        EXPECT(0x1d9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3c, gbc.readMem(0xcf3d));
        // CB 86 0214
        gbc.setState(0x2b20, 0x2ad3, 0x2710, 0xfe2f, 0xae41, 0xe852, 0x0, 0x0);
        gbc.writeMem(0x2b20, { 0xcb, 0x86 });
        gbc.writeMem(0xe852, { 0x91 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x2ad3, gbc.sp());
        EXPECT(0x2b22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0xe852));
        // CB 86 0216
        gbc.setState(0x3117, 0xd376, 0xa30, 0x7edc, 0x9f5, 0x6e25, 0x0, 0x0);
        gbc.writeMem(0x3117, { 0xcb, 0x86 });
        gbc.writeMem(0x6e25, { 0xf2 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xd376, gbc.sp());
        EXPECT(0x3119, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0218
        gbc.setState(0x70d8, 0x91d9, 0x3b60, 0xd3a3, 0x6f4f, 0x38d1, 0x0, 0x1);
        gbc.writeMem(0x38d1, { 0x78 });
        gbc.writeMem(0x70d8, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x91d9, gbc.sp());
        EXPECT(0x70da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0219
        gbc.setState(0xdb33, 0x9950, 0x9770, 0x7ea0, 0x40b7, 0xd9f7, 0x1, 0x1);
        gbc.writeMem(0xd9f7, { 0x92 });
        gbc.writeMem(0xdb33, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x9950, gbc.sp());
        EXPECT(0xdb35, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x92, gbc.readMem(0xd9f7));
        EXPECT(0xcb, gbc.readMem(0xdb33));
        EXPECT(0x86, gbc.readMem(0xdb34));
        // CB 86 021B
        gbc.setState(0x4825, 0x53e9, 0x6c0, 0xd8cd, 0x1101, 0x9990, 0x1, 0x0);
        gbc.writeMem(0x4825, { 0xcb, 0x86 });
        gbc.writeMem(0x9990, { 0xef });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x53e9, gbc.sp());
        EXPECT(0x4827, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0x9990));
        // CB 86 021C
        gbc.setState(0x3356, 0x1fe3, 0xee10, 0x3bcb, 0x9393, 0xb655, 0x1, 0x0);
        gbc.writeMem(0x3356, { 0xcb, 0x86 });
        gbc.writeMem(0xb655, { 0xf7 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x1fe3, gbc.sp());
        EXPECT(0x3358, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf6, gbc.readMem(0xb655));
        // CB 86 021D
        gbc.setState(0x1025, 0xb304, 0x8550, 0xbabd, 0xa6, 0x4b62, 0x1, 0x0);
        gbc.writeMem(0x1025, { 0xcb, 0x86 });
        gbc.writeMem(0x4b62, { 0xba });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xb304, gbc.sp());
        EXPECT(0x1027, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 021E
        gbc.setState(0xa1ff, 0xf3ab, 0xde70, 0xebc2, 0x5b03, 0x5cff, 0x0, 0x0);
        gbc.writeMem(0x5cff, { 0x68 });
        gbc.writeMem(0xa1ff, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xf3ab, gbc.sp());
        EXPECT(0xa201, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1ff));
        EXPECT(0x86, gbc.readMem(0xa200));
        // CB 86 021F
        gbc.setState(0xf5a, 0x9bd9, 0x260, 0xf556, 0x23b8, 0x1be6, 0x0, 0x1);
        gbc.writeMem(0xf5a, { 0xcb, 0x86 });
        gbc.writeMem(0x1be6, { 0x5e });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x9bd9, gbc.sp());
        EXPECT(0xf5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0220
        gbc.setState(0xabd6, 0xa0e1, 0x7270, 0xc370, 0xa496, 0xf4f1, 0x0, 0x1);
        gbc.writeMem(0xabd6, { 0xcb, 0x86 });
        gbc.writeMem(0xf4f1, { 0x12 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xa0e1, gbc.sp());
        EXPECT(0xabd8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabd6));
        EXPECT(0x86, gbc.readMem(0xabd7));
        EXPECT(0x12, gbc.readMem(0xf4f1));
        // CB 86 0222
        gbc.setState(0x4833, 0x4eb6, 0xba0, 0x46d4, 0xa19, 0xd68d, 0x1, 0x1);
        gbc.writeMem(0x4833, { 0xcb, 0x86 });
        gbc.writeMem(0xd68d, { 0xb0 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x4eb6, gbc.sp());
        EXPECT(0x4835, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb0, gbc.readMem(0xd68d));
        // CB 86 0224
        gbc.setState(0x7887, 0x2765, 0xe240, 0x4428, 0x9416, 0x86dd, 0x0, 0x0);
        gbc.writeMem(0x7887, { 0xcb, 0x86 });
        gbc.writeMem(0x86dd, { 0x93 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x2765, gbc.sp());
        EXPECT(0x7889, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x92, gbc.readMem(0x86dd));
        // CB 86 0225
        gbc.setState(0xd763, 0x9289, 0x2ab0, 0x4ead, 0x351e, 0x793f, 0x0, 0x1);
        gbc.writeMem(0x793f, { 0xae });
        gbc.writeMem(0xd763, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x9289, gbc.sp());
        EXPECT(0xd765, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd763));
        EXPECT(0x86, gbc.readMem(0xd764));
        // CB 86 0226
        gbc.setState(0x54e6, 0x95a6, 0x9b10, 0xe28c, 0xdc6, 0xfc4c, 0x1, 0x1);
        gbc.writeMem(0x54e6, { 0xcb, 0x86 });
        gbc.writeMem(0xfc4c, { 0x1 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x95a6, gbc.sp());
        EXPECT(0x54e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x0, gbc.readMem(0xfc4c));
        // CB 86 0228
        gbc.setState(0x4f6c, 0x99de, 0xdef0, 0x659a, 0xf530, 0x23c1, 0x1, 0x1);
        gbc.writeMem(0x23c1, { 0x1c });
        gbc.writeMem(0x4f6c, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x99de, gbc.sp());
        EXPECT(0x4f6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0229
        gbc.setState(0x434f, 0x5e1a, 0xa2b0, 0xf854, 0x1f72, 0xb47f, 0x1, 0x0);
        gbc.writeMem(0x434f, { 0xcb, 0x86 });
        gbc.writeMem(0xb47f, { 0xcb });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x5e1a, gbc.sp());
        EXPECT(0x4351, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0xb47f));
        // CB 86 022A
        gbc.setState(0x1aea, 0x5271, 0xa3d0, 0x7b85, 0x11ec, 0xb293, 0x1, 0x0);
        gbc.writeMem(0x1aea, { 0xcb, 0x86 });
        gbc.writeMem(0xb293, { 0x94 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x5271, gbc.sp());
        EXPECT(0x1aec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x94, gbc.readMem(0xb293));
        // CB 86 022C
        gbc.setState(0x6cf, 0x6efc, 0xb870, 0x2e9c, 0xc9ae, 0xb415, 0x0, 0x1);
        gbc.writeMem(0x6cf, { 0xcb, 0x86 });
        gbc.writeMem(0xb415, { 0xd3 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x6efc, gbc.sp());
        EXPECT(0x6d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0xb415));
        // CB 86 022F
        gbc.setState(0x5763, 0x98e3, 0x30d0, 0xc96f, 0x9e5c, 0x295c, 0x1, 0x1);
        gbc.writeMem(0x295c, { 0x42 });
        gbc.writeMem(0x5763, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x98e3, gbc.sp());
        EXPECT(0x5765, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0230
        gbc.setState(0x547f, 0x2c3d, 0x2980, 0xa8ff, 0xdb1c, 0x4dad, 0x0, 0x0);
        gbc.writeMem(0x4dad, { 0xbc });
        gbc.writeMem(0x547f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x2c3d, gbc.sp());
        EXPECT(0x5481, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0231
        gbc.setState(0x9724, 0x9c19, 0x11b0, 0x1132, 0x3b56, 0xf246, 0x1, 0x0);
        gbc.writeMem(0x9724, { 0xcb, 0x86 });
        gbc.writeMem(0xf246, { 0xac });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x9c19, gbc.sp());
        EXPECT(0x9726, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9724));
        EXPECT(0x86, gbc.readMem(0x9725));
        EXPECT(0xac, gbc.readMem(0xf246));
        // CB 86 0232
        gbc.setState(0x31cd, 0xca71, 0xcd60, 0x7cff, 0x803a, 0x44eb, 0x1, 0x0);
        gbc.writeMem(0x31cd, { 0xcb, 0x86 });
        gbc.writeMem(0x44eb, { 0x6a });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xca71, gbc.sp());
        EXPECT(0x31cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0233
        gbc.setState(0x85e9, 0xcdce, 0x9b70, 0xc3e3, 0xec5, 0x3e61, 0x0, 0x1);
        gbc.writeMem(0x3e61, { 0x72 });
        gbc.writeMem(0x85e9, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xcdce, gbc.sp());
        EXPECT(0x85eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85e9));
        EXPECT(0x86, gbc.readMem(0x85ea));
        // CB 86 0234
        gbc.setState(0x873d, 0xc0, 0x7bc0, 0x5ce2, 0xcb54, 0x954f, 0x0, 0x0);
        gbc.writeMem(0x873d, { 0xcb, 0x86 });
        gbc.writeMem(0x954f, { 0xee });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xc0, gbc.sp());
        EXPECT(0x873f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x873d));
        EXPECT(0x86, gbc.readMem(0x873e));
        EXPECT(0xee, gbc.readMem(0x954f));
        // CB 86 0235
        gbc.setState(0x9e4e, 0xb7d6, 0xab20, 0x7e07, 0x9656, 0x5612, 0x1, 0x0);
        gbc.writeMem(0x5612, { 0xd8 });
        gbc.writeMem(0x9e4e, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xb7d6, gbc.sp());
        EXPECT(0x9e50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e4e));
        EXPECT(0x86, gbc.readMem(0x9e4f));
        // CB 86 0236
        gbc.setState(0x3e9a, 0x628d, 0x8d70, 0xaa65, 0xe8dc, 0xfc7f, 0x0, 0x0);
        gbc.writeMem(0x3e9a, { 0xcb, 0x86 });
        gbc.writeMem(0xfc7f, { 0x5a });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x628d, gbc.sp());
        EXPECT(0x3e9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5a, gbc.readMem(0xfc7f));
        // CB 86 0237
        gbc.setState(0x7c58, 0x9cb0, 0xd330, 0x136b, 0x2a75, 0x77b4, 0x1, 0x1);
        gbc.writeMem(0x77b4, { 0xee });
        gbc.writeMem(0x7c58, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x9cb0, gbc.sp());
        EXPECT(0x7c5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0238
        gbc.setState(0xb851, 0x268e, 0xfa40, 0xa2a3, 0x1c7b, 0x7340, 0x1, 0x0);
        gbc.writeMem(0x7340, { 0x5e });
        gbc.writeMem(0xb851, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x268e, gbc.sp());
        EXPECT(0xb853, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb851));
        EXPECT(0x86, gbc.readMem(0xb852));
        // CB 86 0239
        gbc.setState(0xe8e, 0xf8b4, 0xcb0, 0x54eb, 0xf78, 0x886c, 0x1, 0x1);
        gbc.writeMem(0xe8e, { 0xcb, 0x86 });
        gbc.writeMem(0x886c, { 0xb5 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xf8b4, gbc.sp());
        EXPECT(0xe90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0x886c));
        // CB 86 023A
        gbc.setState(0x24e2, 0xad3, 0x78a0, 0xe7aa, 0xc5ae, 0xca70, 0x0, 0x0);
        gbc.writeMem(0x24e2, { 0xcb, 0x86 });
        gbc.writeMem(0xca70, { 0x86 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xad3, gbc.sp());
        EXPECT(0x24e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xca70));
        // CB 86 023B
        gbc.setState(0xd1e9, 0x4ec0, 0xe890, 0x8ed1, 0x1346, 0x9c08, 0x1, 0x1);
        gbc.writeMem(0x9c08, { 0xf2 });
        gbc.writeMem(0xd1e9, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x4ec0, gbc.sp());
        EXPECT(0xd1eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0x9c08));
        EXPECT(0xcb, gbc.readMem(0xd1e9));
        EXPECT(0x86, gbc.readMem(0xd1ea));
        // CB 86 023C
        gbc.setState(0xc862, 0x83fa, 0x9410, 0x2300, 0xf1ae, 0x7ad1, 0x1, 0x0);
        gbc.writeMem(0x7ad1, { 0x8c });
        gbc.writeMem(0xc862, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x83fa, gbc.sp());
        EXPECT(0xc864, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc862));
        EXPECT(0x86, gbc.readMem(0xc863));
        // CB 86 023D
        gbc.setState(0xa5a, 0xc0b6, 0x6710, 0xd58a, 0x4309, 0xfad, 0x0, 0x1);
        gbc.writeMem(0xa5a, { 0xcb, 0x86 });
        gbc.writeMem(0xfad, { 0xd6 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xc0b6, gbc.sp());
        EXPECT(0xa5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 023E
        gbc.setState(0x90d6, 0x86ac, 0x8b20, 0xaace, 0x7d25, 0xac7e, 0x1, 0x0);
        gbc.writeMem(0x90d6, { 0xcb, 0x86 });
        gbc.writeMem(0xac7e, { 0x8 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x86ac, gbc.sp());
        EXPECT(0x90d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90d6));
        EXPECT(0x86, gbc.readMem(0x90d7));
        EXPECT(0x8, gbc.readMem(0xac7e));
        // CB 86 023F
        gbc.setState(0x60c, 0xfb6d, 0x7ae0, 0xc265, 0xe06, 0xcde2, 0x1, 0x0);
        gbc.writeMem(0x60c, { 0xcb, 0x86 });
        gbc.writeMem(0xcde2, { 0x15 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xfb6d, gbc.sp());
        EXPECT(0x60e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x14, gbc.readMem(0xcde2));
        // CB 86 0240
        gbc.setState(0xb0a, 0x201c, 0x9d20, 0xc002, 0x1ae6, 0x276b, 0x1, 0x1);
        gbc.writeMem(0xb0a, { 0xcb, 0x86 });
        gbc.writeMem(0x276b, { 0x5e });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x201c, gbc.sp());
        EXPECT(0xb0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0241
        gbc.setState(0x8e5, 0xf8b9, 0x7b00, 0xe461, 0x1239, 0x35e5, 0x0, 0x0);
        gbc.writeMem(0x8e5, { 0xcb, 0x86 });
        gbc.writeMem(0x35e5, { 0xe4 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xf8b9, gbc.sp());
        EXPECT(0x8e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0242
        gbc.setState(0x6d31, 0x2e6d, 0x1800, 0xc05f, 0xfcbb, 0xa3cb, 0x1, 0x1);
        gbc.writeMem(0x6d31, { 0xcb, 0x86 });
        gbc.writeMem(0xa3cb, { 0x6b });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x2e6d, gbc.sp());
        EXPECT(0x6d33, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6a, gbc.readMem(0xa3cb));
        // CB 86 0243
        gbc.setState(0x6da0, 0x8f40, 0x9640, 0x74fe, 0xbc8b, 0x3720, 0x1, 0x0);
        gbc.writeMem(0x3720, { 0x4c });
        gbc.writeMem(0x6da0, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x8f40, gbc.sp());
        EXPECT(0x6da2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0246
        gbc.setState(0x6896, 0x86e0, 0x6a20, 0x63e0, 0x378e, 0x9f23, 0x1, 0x0);
        gbc.writeMem(0x6896, { 0xcb, 0x86 });
        gbc.writeMem(0x9f23, { 0xeb });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x86e0, gbc.sp());
        EXPECT(0x6898, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9f23));
        // CB 86 0247
        gbc.setState(0x126b, 0x8c52, 0xc9c0, 0xd7ba, 0xd193, 0x7a79, 0x1, 0x1);
        gbc.writeMem(0x126b, { 0xcb, 0x86 });
        gbc.writeMem(0x7a79, { 0xe0 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x8c52, gbc.sp());
        EXPECT(0x126d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0248
        gbc.setState(0x8b48, 0x4e7b, 0x87d0, 0xe29f, 0xda94, 0xa6b6, 0x0, 0x1);
        gbc.writeMem(0x8b48, { 0xcb, 0x86 });
        gbc.writeMem(0xa6b6, { 0x9f });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x4e7b, gbc.sp());
        EXPECT(0x8b4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b48));
        EXPECT(0x86, gbc.readMem(0x8b49));
        EXPECT(0x9e, gbc.readMem(0xa6b6));
        // CB 86 0249
        gbc.setState(0x58e3, 0x7561, 0xce50, 0x414f, 0x8c87, 0xca9, 0x1, 0x1);
        gbc.writeMem(0xca9, { 0x98 });
        gbc.writeMem(0x58e3, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x7561, gbc.sp());
        EXPECT(0x58e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 024A
        gbc.setState(0x7955, 0xfd38, 0x74c0, 0x8128, 0x5475, 0x4ad, 0x0, 0x1);
        gbc.writeMem(0x4ad, { 0x86 });
        gbc.writeMem(0x7955, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xfd38, gbc.sp());
        EXPECT(0x7957, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 024B
        gbc.setState(0x47dd, 0xfe90, 0x1010, 0xfe2d, 0xd423, 0x6ac3, 0x1, 0x0);
        gbc.writeMem(0x47dd, { 0xcb, 0x86 });
        gbc.writeMem(0x6ac3, { 0xea });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xfe90, gbc.sp());
        EXPECT(0x47df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 024C
        gbc.setState(0x40ee, 0x2c1f, 0xb840, 0x3890, 0xc869, 0xac0b, 0x1, 0x0);
        gbc.writeMem(0x40ee, { 0xcb, 0x86 });
        gbc.writeMem(0xac0b, { 0x28 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x2c1f, gbc.sp());
        EXPECT(0x40f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0xac0b));
        // CB 86 0250
        gbc.setState(0x448, 0x95d0, 0x10f0, 0x8d64, 0xb724, 0xc9d7, 0x0, 0x0);
        gbc.writeMem(0x448, { 0xcb, 0x86 });
        gbc.writeMem(0xc9d7, { 0x1d });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x95d0, gbc.sp());
        EXPECT(0x44a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0xc9d7));
        // CB 86 0253
        gbc.setState(0xc049, 0x3d3c, 0x8240, 0x55dc, 0xb683, 0xa98a, 0x0, 0x0);
        gbc.writeMem(0xa98a, { 0x5c });
        gbc.writeMem(0xc049, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x3d3c, gbc.sp());
        EXPECT(0xc04b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5c, gbc.readMem(0xa98a));
        EXPECT(0xcb, gbc.readMem(0xc049));
        EXPECT(0x86, gbc.readMem(0xc04a));
        // CB 86 0255
        gbc.setState(0x67b6, 0x3fef, 0xba40, 0x36ab, 0x695d, 0xe93c, 0x1, 0x1);
        gbc.writeMem(0x67b6, { 0xcb, 0x86 });
        gbc.writeMem(0xe93c, { 0x5b });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x3fef, gbc.sp());
        EXPECT(0x67b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5a, gbc.readMem(0xe93c));
        // CB 86 0256
        gbc.setState(0xaab9, 0x8da7, 0xb450, 0xd51e, 0xac6b, 0xfddb, 0x1, 0x1);
        gbc.writeMem(0xaab9, { 0xcb, 0x86 });
        gbc.writeMem(0xfddb, { 0x85 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x8da7, gbc.sp());
        EXPECT(0xaabb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaab9));
        EXPECT(0x86, gbc.readMem(0xaaba));
        EXPECT(0x84, gbc.readMem(0xfddb));
        // CB 86 0259
        gbc.setState(0x2644, 0x2ada, 0x2410, 0x90f0, 0x17a0, 0xb044, 0x0, 0x1);
        gbc.writeMem(0x2644, { 0xcb, 0x86 });
        gbc.writeMem(0xb044, { 0x7e });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x2ada, gbc.sp());
        EXPECT(0x2646, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0xb044));
        // CB 86 025A
        gbc.setState(0xee37, 0x4620, 0xb290, 0x83e, 0x610d, 0xd824, 0x1, 0x1);
        gbc.writeMem(0xd824, { 0x9e });
        gbc.writeMem(0xee37, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x4620, gbc.sp());
        EXPECT(0xee39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9e, gbc.readMem(0xd824));
        EXPECT(0xcb, gbc.readMem(0xee37));
        EXPECT(0x86, gbc.readMem(0xee38));
        // CB 86 025B
        gbc.setState(0x7318, 0x3c0a, 0x77c0, 0xe36, 0xe0d0, 0xd5bc, 0x1, 0x0);
        gbc.writeMem(0x7318, { 0xcb, 0x86 });
        gbc.writeMem(0xd5bc, { 0xb5 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x3c0a, gbc.sp());
        EXPECT(0x731a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0xd5bc));
        // CB 86 025C
        gbc.setState(0xeec8, 0xb9bf, 0x1680, 0xda75, 0x7c74, 0x9476, 0x1, 0x1);
        gbc.writeMem(0x9476, { 0xd5 });
        gbc.writeMem(0xeec8, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xb9bf, gbc.sp());
        EXPECT(0xeeca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd4, gbc.readMem(0x9476));
        EXPECT(0xcb, gbc.readMem(0xeec8));
        EXPECT(0x86, gbc.readMem(0xeec9));
        // CB 86 025E
        gbc.setState(0x890c, 0x27d5, 0x8ca0, 0x8f8f, 0xf14, 0xe00f, 0x1, 0x1);
        gbc.writeMem(0x890c, { 0xcb, 0x86 });
        gbc.writeMem(0xe00f, { 0xdc });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x27d5, gbc.sp());
        EXPECT(0x890e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x890c));
        EXPECT(0x86, gbc.readMem(0x890d));
        EXPECT(0xdc, gbc.readMem(0xe00f));
        // CB 86 0260
        gbc.setState(0x318f, 0xceec, 0x5c90, 0xd574, 0x9afe, 0xb287, 0x0, 0x0);
        gbc.writeMem(0x318f, { 0xcb, 0x86 });
        gbc.writeMem(0xb287, { 0x57 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xceec, gbc.sp());
        EXPECT(0x3191, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x56, gbc.readMem(0xb287));
        // CB 86 0261
        gbc.setState(0xec91, 0x5fe0, 0x5e60, 0x4134, 0x2189, 0xe760, 0x1, 0x1);
        gbc.writeMem(0xe760, { 0x51 });
        gbc.writeMem(0xec91, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x5fe0, gbc.sp());
        EXPECT(0xec93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0xe760));
        EXPECT(0xcb, gbc.readMem(0xec91));
        EXPECT(0x86, gbc.readMem(0xec92));
        // CB 86 0262
        gbc.setState(0x9662, 0x129b, 0x6920, 0x4f1, 0xe206, 0xd80d, 0x1, 0x1);
        gbc.writeMem(0x9662, { 0xcb, 0x86 });
        gbc.writeMem(0xd80d, { 0xf6 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x129b, gbc.sp());
        EXPECT(0x9664, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9662));
        EXPECT(0x86, gbc.readMem(0x9663));
        EXPECT(0xf6, gbc.readMem(0xd80d));
        // CB 86 0264
        gbc.setState(0xc533, 0x763b, 0x3d10, 0xf68a, 0x1dca, 0xf07d, 0x0, 0x1);
        gbc.writeMem(0xc533, { 0xcb, 0x86 });
        gbc.writeMem(0xf07d, { 0x92 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x763b, gbc.sp());
        EXPECT(0xc535, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc533));
        EXPECT(0x86, gbc.readMem(0xc534));
        EXPECT(0x92, gbc.readMem(0xf07d));
        // CB 86 0266
        gbc.setState(0x7862, 0x56b, 0xecd0, 0xa4b9, 0x7ffd, 0x204b, 0x0, 0x1);
        gbc.writeMem(0x204b, { 0x12 });
        gbc.writeMem(0x7862, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x56b, gbc.sp());
        EXPECT(0x7864, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0268
        gbc.setState(0x6ef6, 0x5e04, 0x1fe0, 0xa2fe, 0x6034, 0xb2b0, 0x0, 0x0);
        gbc.writeMem(0x6ef6, { 0xcb, 0x86 });
        gbc.writeMem(0xb2b0, { 0x22 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x5e04, gbc.sp());
        EXPECT(0x6ef8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x22, gbc.readMem(0xb2b0));
        // CB 86 026A
        gbc.setState(0xed8c, 0x9ecb, 0x5a90, 0xd76b, 0x19b3, 0x3fb5, 0x0, 0x0);
        gbc.writeMem(0x3fb5, { 0xe6 });
        gbc.writeMem(0xed8c, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x9ecb, gbc.sp());
        EXPECT(0xed8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed8c));
        EXPECT(0x86, gbc.readMem(0xed8d));
        // CB 86 026E
        gbc.setState(0xe84d, 0x9a5c, 0x87e0, 0xd7e0, 0xd260, 0x6625, 0x0, 0x1);
        gbc.writeMem(0x6625, { 0x7c });
        gbc.writeMem(0xe84d, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x9a5c, gbc.sp());
        EXPECT(0xe84f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe84d));
        EXPECT(0x86, gbc.readMem(0xe84e));
        // CB 86 026F
        gbc.setState(0xeae9, 0x1231, 0x7b30, 0xbb2c, 0x7136, 0xf6b4, 0x1, 0x1);
        gbc.writeMem(0xeae9, { 0xcb, 0x86 });
        gbc.writeMem(0xf6b4, { 0x56 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x1231, gbc.sp());
        EXPECT(0xeaeb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeae9));
        EXPECT(0x86, gbc.readMem(0xeaea));
        EXPECT(0x56, gbc.readMem(0xf6b4));
        // CB 86 0270
        gbc.setState(0x74a7, 0xf82e, 0x9a10, 0xbd64, 0x5371, 0xfc7f, 0x1, 0x1);
        gbc.writeMem(0x74a7, { 0xcb, 0x86 });
        gbc.writeMem(0xfc7f, { 0x5a });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xf82e, gbc.sp());
        EXPECT(0x74a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5a, gbc.readMem(0xfc7f));
        // CB 86 0271
        gbc.setState(0xb941, 0x42, 0xda0, 0x7a28, 0x8db4, 0x5c66, 0x1, 0x1);
        gbc.writeMem(0x5c66, { 0xe4 });
        gbc.writeMem(0xb941, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x42, gbc.sp());
        EXPECT(0xb943, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb941));
        EXPECT(0x86, gbc.readMem(0xb942));
        // CB 86 0272
        gbc.setState(0xb94b, 0xe386, 0x7060, 0x1ac5, 0x2ac7, 0x8ee2, 0x0, 0x1);
        gbc.writeMem(0x8ee2, { 0x6f });
        gbc.writeMem(0xb94b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xe386, gbc.sp());
        EXPECT(0xb94d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6e, gbc.readMem(0x8ee2));
        EXPECT(0xcb, gbc.readMem(0xb94b));
        EXPECT(0x86, gbc.readMem(0xb94c));
        // CB 86 0274
        gbc.setState(0xe75b, 0xeca6, 0x2a20, 0x671b, 0x817c, 0x6a63, 0x1, 0x0);
        gbc.writeMem(0x6a63, { 0xb2 });
        gbc.writeMem(0xe75b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xeca6, gbc.sp());
        EXPECT(0xe75d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe75b));
        EXPECT(0x86, gbc.readMem(0xe75c));
        // CB 86 0275
        gbc.setState(0x96ec, 0x8fe5, 0xa50, 0x4593, 0x6cab, 0xbe31, 0x0, 0x1);
        gbc.writeMem(0x96ec, { 0xcb, 0x86 });
        gbc.writeMem(0xbe31, { 0xf5 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x8fe5, gbc.sp());
        EXPECT(0x96ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96ec));
        EXPECT(0x86, gbc.readMem(0x96ed));
        EXPECT(0xf4, gbc.readMem(0xbe31));
        // CB 86 0277
        gbc.setState(0x5614, 0x91c5, 0xc5b0, 0xc500, 0xdeed, 0xffb1, 0x1, 0x0);
        gbc.writeMem(0x5614, { 0xcb, 0x86 });
        gbc.writeMem(0xffb1, { 0x63 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x91c5, gbc.sp());
        EXPECT(0x5616, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0xffb1));
        // CB 86 0278
        gbc.setState(0x6251, 0x455e, 0xea00, 0x5fc1, 0x3d1f, 0xf338, 0x1, 0x1);
        gbc.writeMem(0x6251, { 0xcb, 0x86 });
        gbc.writeMem(0xf338, { 0x9a });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x455e, gbc.sp());
        EXPECT(0x6253, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9a, gbc.readMem(0xf338));
        // CB 86 0279
        gbc.setState(0x4834, 0xab7, 0xd470, 0xd5a0, 0xe36b, 0xc4d7, 0x1, 0x1);
        gbc.writeMem(0x4834, { 0xcb, 0x86 });
        gbc.writeMem(0xc4d7, { 0xee });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xab7, gbc.sp());
        EXPECT(0x4836, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xc4d7));
        // CB 86 027A
        gbc.setState(0x9067, 0xcef9, 0xd550, 0x3922, 0xff4d, 0x31ae, 0x0, 0x0);
        gbc.writeMem(0x31ae, { 0xe });
        gbc.writeMem(0x9067, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xcef9, gbc.sp());
        EXPECT(0x9069, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9067));
        EXPECT(0x86, gbc.readMem(0x9068));
        // CB 86 027B
        gbc.setState(0x5dab, 0x2512, 0x84a0, 0x4e99, 0x7204, 0xa1f6, 0x1, 0x0);
        gbc.writeMem(0x5dab, { 0xcb, 0x86 });
        gbc.writeMem(0xa1f6, { 0xef });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x2512, gbc.sp());
        EXPECT(0x5dad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xa1f6));
        // CB 86 027C
        gbc.setState(0xc145, 0x18e2, 0x5310, 0x152d, 0xdcc5, 0xc0df, 0x0, 0x1);
        gbc.writeMem(0xc0df, { 0xa6 });
        gbc.writeMem(0xc145, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x18e2, gbc.sp());
        EXPECT(0xc147, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0xc0df));
        EXPECT(0xcb, gbc.readMem(0xc145));
        EXPECT(0x86, gbc.readMem(0xc146));
        // CB 86 027D
        gbc.setState(0x9dca, 0xa0ad, 0x9ae0, 0x4f19, 0xc102, 0x83ef, 0x1, 0x1);
        gbc.writeMem(0x83ef, { 0xa7 });
        gbc.writeMem(0x9dca, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xa0ad, gbc.sp());
        EXPECT(0x9dcc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0x83ef));
        EXPECT(0xcb, gbc.readMem(0x9dca));
        EXPECT(0x86, gbc.readMem(0x9dcb));
        // CB 86 027F
        gbc.setState(0x513f, 0xc650, 0xc6a0, 0x55a5, 0x5a8b, 0x42b2, 0x0, 0x0);
        gbc.writeMem(0x42b2, { 0xce });
        gbc.writeMem(0x513f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xc650, gbc.sp());
        EXPECT(0x5141, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0281
        gbc.setState(0x8439, 0xf4e, 0x4040, 0xc6fd, 0xbb5f, 0x9406, 0x0, 0x0);
        gbc.writeMem(0x8439, { 0xcb, 0x86 });
        gbc.writeMem(0x9406, { 0xdd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xf4e, gbc.sp());
        EXPECT(0x843b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8439));
        EXPECT(0x86, gbc.readMem(0x843a));
        EXPECT(0xdc, gbc.readMem(0x9406));
        // CB 86 0284
        gbc.setState(0xc1f2, 0x4664, 0xbe80, 0x34a8, 0x24cb, 0x9546, 0x1, 0x1);
        gbc.writeMem(0x9546, { 0x25 });
        gbc.writeMem(0xc1f2, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x4664, gbc.sp());
        EXPECT(0xc1f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0x9546));
        EXPECT(0xcb, gbc.readMem(0xc1f2));
        EXPECT(0x86, gbc.readMem(0xc1f3));
        // CB 86 0286
        gbc.setState(0xd625, 0x49ef, 0x5fb0, 0xdf25, 0xde07, 0xd620, 0x0, 0x1);
        gbc.writeMem(0xd620, { 0x21 });
        gbc.writeMem(0xd625, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x49ef, gbc.sp());
        EXPECT(0xd627, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x20, gbc.readMem(0xd620));
        EXPECT(0xcb, gbc.readMem(0xd625));
        EXPECT(0x86, gbc.readMem(0xd626));
        // CB 86 0287
        gbc.setState(0x1576, 0xfda0, 0x9c80, 0x2008, 0x5cf0, 0x4f76, 0x1, 0x0);
        gbc.writeMem(0x1576, { 0xcb, 0x86 });
        gbc.writeMem(0x4f76, { 0xba });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xfda0, gbc.sp());
        EXPECT(0x1578, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0289
        gbc.setState(0xa72f, 0x3c59, 0xf620, 0x5b1c, 0x5670, 0x87a9, 0x1, 0x1);
        gbc.writeMem(0x87a9, { 0xf3 });
        gbc.writeMem(0xa72f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x3c59, gbc.sp());
        EXPECT(0xa731, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0x87a9));
        EXPECT(0xcb, gbc.readMem(0xa72f));
        EXPECT(0x86, gbc.readMem(0xa730));
        // CB 86 028A
        gbc.setState(0x987a, 0xe6bf, 0x2480, 0x46da, 0x735e, 0x970d, 0x0, 0x0);
        gbc.writeMem(0x970d, { 0x26 });
        gbc.writeMem(0x987a, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xe6bf, gbc.sp());
        EXPECT(0x987c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x26, gbc.readMem(0x970d));
        EXPECT(0xcb, gbc.readMem(0x987a));
        EXPECT(0x86, gbc.readMem(0x987b));
        // CB 86 028B
        gbc.setState(0xcb92, 0x7b39, 0x7080, 0x61e2, 0x3fee, 0xed5b, 0x0, 0x0);
        gbc.writeMem(0xcb92, { 0xcb, 0x86 });
        gbc.writeMem(0xed5b, { 0xef });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x7b39, gbc.sp());
        EXPECT(0xcb94, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb92));
        EXPECT(0x86, gbc.readMem(0xcb93));
        EXPECT(0xee, gbc.readMem(0xed5b));
        // CB 86 028C
        gbc.setState(0x6fbc, 0xa61b, 0x6340, 0x23d2, 0xe4b8, 0x147d, 0x0, 0x1);
        gbc.writeMem(0x147d, { 0x5e });
        gbc.writeMem(0x6fbc, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xa61b, gbc.sp());
        EXPECT(0x6fbe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 028D
        gbc.setState(0x510a, 0x236d, 0xc320, 0x377b, 0xf6e3, 0x3ea7, 0x0, 0x0);
        gbc.writeMem(0x3ea7, { 0xba });
        gbc.writeMem(0x510a, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x236d, gbc.sp());
        EXPECT(0x510c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 028F
        gbc.setState(0xbe65, 0xad53, 0xf8c0, 0x5396, 0x8927, 0xb35f, 0x0, 0x1);
        gbc.writeMem(0xb35f, { 0x8e });
        gbc.writeMem(0xbe65, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xad53, gbc.sp());
        EXPECT(0xbe67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8e, gbc.readMem(0xb35f));
        EXPECT(0xcb, gbc.readMem(0xbe65));
        EXPECT(0x86, gbc.readMem(0xbe66));
        // CB 86 0293
        gbc.setState(0xb8f6, 0x7e55, 0xfa30, 0xd115, 0x5d24, 0x870a, 0x0, 0x0);
        gbc.writeMem(0x870a, { 0x7c });
        gbc.writeMem(0xb8f6, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x7e55, gbc.sp());
        EXPECT(0xb8f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0x870a));
        EXPECT(0xcb, gbc.readMem(0xb8f6));
        EXPECT(0x86, gbc.readMem(0xb8f7));
        // CB 86 0294
        gbc.setState(0xcbf, 0x24dc, 0xcc80, 0xcab9, 0x3429, 0xc5d7, 0x1, 0x1);
        gbc.writeMem(0xcbf, { 0xcb, 0x86 });
        gbc.writeMem(0xc5d7, { 0x18 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x24dc, gbc.sp());
        EXPECT(0xcc1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x18, gbc.readMem(0xc5d7));
        // CB 86 0296
        gbc.setState(0xcb04, 0xa608, 0x5720, 0xacb6, 0xa9bc, 0xd33b, 0x0, 0x1);
        gbc.writeMem(0xcb04, { 0xcb, 0x86 });
        gbc.writeMem(0xd33b, { 0x23 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xa608, gbc.sp());
        EXPECT(0xcb06, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb04));
        EXPECT(0x86, gbc.readMem(0xcb05));
        EXPECT(0x22, gbc.readMem(0xd33b));
        // CB 86 0297
        gbc.setState(0x3925, 0x38d8, 0x11c0, 0x3c98, 0xcc79, 0xc301, 0x0, 0x1);
        gbc.writeMem(0x3925, { 0xcb, 0x86 });
        gbc.writeMem(0xc301, { 0x25 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x38d8, gbc.sp());
        EXPECT(0x3927, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0xc301));
        // CB 86 029A
        gbc.setState(0x484a, 0xe70, 0xa170, 0x6c1f, 0xf0c5, 0xb168, 0x1, 0x1);
        gbc.writeMem(0x484a, { 0xcb, 0x86 });
        gbc.writeMem(0xb168, { 0x77 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xe70, gbc.sp());
        EXPECT(0x484c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x76, gbc.readMem(0xb168));
        // CB 86 029C
        gbc.setState(0x682d, 0xcd29, 0xc140, 0x7db8, 0x38ca, 0xbd51, 0x1, 0x1);
        gbc.writeMem(0x682d, { 0xcb, 0x86 });
        gbc.writeMem(0xbd51, { 0xeb });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xcd29, gbc.sp());
        EXPECT(0x682f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xbd51));
        // CB 86 029D
        gbc.setState(0x507f, 0x3932, 0xb10, 0x4d37, 0x75f9, 0xfe98, 0x0, 0x0);
        gbc.writeMem(0x507f, { 0xcb, 0x86 });
        gbc.writeMem(0xfe98, { 0xd });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x3932, gbc.sp());
        EXPECT(0x5081, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc, gbc.readMem(0xfe98));
        // CB 86 029E
        gbc.setState(0x5150, 0x3102, 0xd3c0, 0x39c7, 0xe244, 0x80fe, 0x1, 0x0);
        gbc.writeMem(0x5150, { 0xcb, 0x86 });
        gbc.writeMem(0x80fe, { 0xcf });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x3102, gbc.sp());
        EXPECT(0x5152, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0x80fe));
        // CB 86 02A0
        gbc.setState(0x40ea, 0x4099, 0xc320, 0x5309, 0xbb52, 0x9e89, 0x1, 0x1);
        gbc.writeMem(0x40ea, { 0xcb, 0x86 });
        gbc.writeMem(0x9e89, { 0xbe });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x4099, gbc.sp());
        EXPECT(0x40ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0x9e89));
        // CB 86 02A1
        gbc.setState(0x1b21, 0xe8a1, 0xe850, 0x6658, 0x566e, 0x9b95, 0x0, 0x0);
        gbc.writeMem(0x1b21, { 0xcb, 0x86 });
        gbc.writeMem(0x9b95, { 0xd3 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xe8a1, gbc.sp());
        EXPECT(0x1b23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0x9b95));
        // CB 86 02A2
        gbc.setState(0xe468, 0xfd98, 0xdf10, 0x8289, 0xcca8, 0xad12, 0x0, 0x1);
        gbc.writeMem(0xad12, { 0xee });
        gbc.writeMem(0xe468, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xfd98, gbc.sp());
        EXPECT(0xe46a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xad12));
        EXPECT(0xcb, gbc.readMem(0xe468));
        EXPECT(0x86, gbc.readMem(0xe469));
        // CB 86 02A3
        gbc.setState(0xedf6, 0xd16f, 0xea0, 0x4381, 0xed2f, 0xf832, 0x1, 0x1);
        gbc.writeMem(0xedf6, { 0xcb, 0x86 });
        gbc.writeMem(0xf832, { 0xf0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xd16f, gbc.sp());
        EXPECT(0xedf8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedf6));
        EXPECT(0x86, gbc.readMem(0xedf7));
        EXPECT(0xf0, gbc.readMem(0xf832));
        // CB 86 02A4
        gbc.setState(0xe1fb, 0xa6ce, 0x9b70, 0x9a90, 0xefee, 0xdc19, 0x0, 0x0);
        gbc.writeMem(0xdc19, { 0xb9 });
        gbc.writeMem(0xe1fb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xa6ce, gbc.sp());
        EXPECT(0xe1fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb8, gbc.readMem(0xdc19));
        EXPECT(0xcb, gbc.readMem(0xe1fb));
        EXPECT(0x86, gbc.readMem(0xe1fc));
        // CB 86 02A8
        gbc.setState(0x85e1, 0x260c, 0xaf0, 0x71cd, 0x4e71, 0x7ef9, 0x0, 0x1);
        gbc.writeMem(0x7ef9, { 0x9c });
        gbc.writeMem(0x85e1, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x260c, gbc.sp());
        EXPECT(0x85e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85e1));
        EXPECT(0x86, gbc.readMem(0x85e2));
        // CB 86 02A9
        gbc.setState(0x5c6e, 0x1bc6, 0xe150, 0xcdcd, 0x8ed6, 0xa09d, 0x1, 0x0);
        gbc.writeMem(0x5c6e, { 0xcb, 0x86 });
        gbc.writeMem(0xa09d, { 0xf });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x1bc6, gbc.sp());
        EXPECT(0x5c70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe, gbc.readMem(0xa09d));
        // CB 86 02AA
        gbc.setState(0xd004, 0x54e8, 0xa700, 0xc378, 0xc65c, 0xb5b1, 0x0, 0x1);
        gbc.writeMem(0xb5b1, { 0x4e });
        gbc.writeMem(0xd004, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x54e8, gbc.sp());
        EXPECT(0xd006, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0xb5b1));
        EXPECT(0xcb, gbc.readMem(0xd004));
        EXPECT(0x86, gbc.readMem(0xd005));
        // CB 86 02AB
        gbc.setState(0x5bcd, 0xb624, 0x4ab0, 0x874f, 0x7f65, 0xb59d, 0x0, 0x0);
        gbc.writeMem(0x5bcd, { 0xcb, 0x86 });
        gbc.writeMem(0xb59d, { 0xbd });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xb624, gbc.sp());
        EXPECT(0x5bcf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbc, gbc.readMem(0xb59d));
        // CB 86 02AC
        gbc.setState(0x1fb3, 0x8b84, 0x2380, 0x7449, 0xf8b1, 0xb41b, 0x1, 0x0);
        gbc.writeMem(0x1fb3, { 0xcb, 0x86 });
        gbc.writeMem(0xb41b, { 0x36 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x8b84, gbc.sp());
        EXPECT(0x1fb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0xb41b));
        // CB 86 02AD
        gbc.setState(0xe2eb, 0xa308, 0x7fc0, 0xe7a7, 0xa6fd, 0x5251, 0x1, 0x0);
        gbc.writeMem(0x5251, { 0xbc });
        gbc.writeMem(0xe2eb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xa308, gbc.sp());
        EXPECT(0xe2ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2eb));
        EXPECT(0x86, gbc.readMem(0xe2ec));
        // CB 86 02AE
        gbc.setState(0x4760, 0x80ba, 0x7740, 0xc1dc, 0x45ed, 0x5192, 0x1, 0x1);
        gbc.writeMem(0x4760, { 0xcb, 0x86 });
        gbc.writeMem(0x5192, { 0x60 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x80ba, gbc.sp());
        EXPECT(0x4762, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 02B1
        gbc.setState(0xebf9, 0x35cc, 0xc550, 0x8c39, 0xbe29, 0x2416, 0x0, 0x1);
        gbc.writeMem(0x2416, { 0xea });
        gbc.writeMem(0xebf9, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x35cc, gbc.sp());
        EXPECT(0xebfb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebf9));
        EXPECT(0x86, gbc.readMem(0xebfa));
        // CB 86 02B2
        gbc.setState(0x2453, 0x5c94, 0xb820, 0xc3d, 0x5c88, 0xd94b, 0x1, 0x1);
        gbc.writeMem(0x2453, { 0xcb, 0x86 });
        gbc.writeMem(0xd94b, { 0x54 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x5c94, gbc.sp());
        EXPECT(0x2455, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0xd94b));
        // CB 86 02B4
        gbc.setState(0x5d15, 0x41aa, 0xfc90, 0xeda4, 0xff62, 0x49bb, 0x1, 0x1);
        gbc.writeMem(0x49bb, { 0x1a });
        gbc.writeMem(0x5d15, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x41aa, gbc.sp());
        EXPECT(0x5d17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 02B7
        gbc.setState(0x5eaf, 0xd79e, 0x8270, 0x2607, 0x7b1a, 0x4825, 0x0, 0x0);
        gbc.writeMem(0x4825, { 0x5c });
        gbc.writeMem(0x5eaf, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xd79e, gbc.sp());
        EXPECT(0x5eb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 02B8
        gbc.setState(0x84a4, 0x37f, 0xc070, 0x7f09, 0x3a8f, 0x9acf, 0x0, 0x1);
        gbc.writeMem(0x84a4, { 0xcb, 0x86 });
        gbc.writeMem(0x9acf, { 0xa2 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x37f, gbc.sp());
        EXPECT(0x84a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84a4));
        EXPECT(0x86, gbc.readMem(0x84a5));
        EXPECT(0xa2, gbc.readMem(0x9acf));
        // CB 86 02B9
        gbc.setState(0x994b, 0xcfb2, 0xb4e0, 0xc33b, 0x6ede, 0xa2bd, 0x0, 0x0);
        gbc.writeMem(0x994b, { 0xcb, 0x86 });
        gbc.writeMem(0xa2bd, { 0xd });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xcfb2, gbc.sp());
        EXPECT(0x994d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x994b));
        EXPECT(0x86, gbc.readMem(0x994c));
        EXPECT(0xc, gbc.readMem(0xa2bd));
        // CB 86 02BA
        gbc.setState(0xcff0, 0x4e6f, 0x45e0, 0x6b58, 0x881f, 0x7e0c, 0x0, 0x0);
        gbc.writeMem(0x7e0c, { 0xaa });
        gbc.writeMem(0xcff0, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x4e6f, gbc.sp());
        EXPECT(0xcff2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcff0));
        EXPECT(0x86, gbc.readMem(0xcff1));
        // CB 86 02BD
        gbc.setState(0x5133, 0x69f0, 0x6430, 0x11be, 0x7daf, 0x465e, 0x1, 0x0);
        gbc.writeMem(0x465e, { 0xac });
        gbc.writeMem(0x5133, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x69f0, gbc.sp());
        EXPECT(0x5135, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 02BE
        gbc.setState(0x18ac, 0xf1bb, 0xf970, 0xc924, 0x6c74, 0x2e3, 0x1, 0x1);
        gbc.writeMem(0x2e3, { 0x2 });
        gbc.writeMem(0x18ac, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xf1bb, gbc.sp());
        EXPECT(0x18ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 02C0
        gbc.setState(0xbdca, 0xe111, 0xaf40, 0xbcfe, 0xb761, 0xc9db, 0x1, 0x0);
        gbc.writeMem(0xbdca, { 0xcb, 0x86 });
        gbc.writeMem(0xc9db, { 0x1f });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xe111, gbc.sp());
        EXPECT(0xbdcc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdca));
        EXPECT(0x86, gbc.readMem(0xbdcb));
        EXPECT(0x1e, gbc.readMem(0xc9db));
        // CB 86 02C1
        gbc.setState(0xd0c7, 0x4f64, 0x3230, 0xee9c, 0x87c7, 0xa7c1, 0x0, 0x1);
        gbc.writeMem(0xa7c1, { 0x7 });
        gbc.writeMem(0xd0c7, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x4f64, gbc.sp());
        EXPECT(0xd0c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6, gbc.readMem(0xa7c1));
        EXPECT(0xcb, gbc.readMem(0xd0c7));
        EXPECT(0x86, gbc.readMem(0xd0c8));
        // CB 86 02C3
        gbc.setState(0x62a8, 0x3cab, 0x7720, 0x3d74, 0x761e, 0x7efb, 0x0, 0x0);
        gbc.writeMem(0x62a8, { 0xcb, 0x86 });
        gbc.writeMem(0x7efb, { 0x2e });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x3cab, gbc.sp());
        EXPECT(0x62aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 02C4
        gbc.setState(0x650e, 0x92e, 0x8750, 0xda23, 0x7ca8, 0x83b, 0x1, 0x0);
        gbc.writeMem(0x83b, { 0xd4 });
        gbc.writeMem(0x650e, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x92e, gbc.sp());
        EXPECT(0x6510, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 02C5
        gbc.setState(0xba99, 0x9d4b, 0xa7b0, 0xde46, 0x1951, 0xc343, 0x0, 0x0);
        gbc.writeMem(0xba99, { 0xcb, 0x86 });
        gbc.writeMem(0xc343, { 0x5f });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x9d4b, gbc.sp());
        EXPECT(0xba9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba99));
        EXPECT(0x86, gbc.readMem(0xba9a));
        EXPECT(0x5e, gbc.readMem(0xc343));
        // CB 86 02C8
        gbc.setState(0xd896, 0x99bc, 0xeed0, 0x494f, 0x5e57, 0x8004, 0x1, 0x1);
        gbc.writeMem(0x8004, { 0xba });
        gbc.writeMem(0xd896, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x99bc, gbc.sp());
        EXPECT(0xd898, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xba, gbc.readMem(0x8004));
        EXPECT(0xcb, gbc.readMem(0xd896));
        EXPECT(0x86, gbc.readMem(0xd897));
        // CB 86 02C9
        gbc.setState(0x7807, 0x57f, 0x40f0, 0x165f, 0xab4d, 0xc518, 0x0, 0x1);
        gbc.writeMem(0x7807, { 0xcb, 0x86 });
        gbc.writeMem(0xc518, { 0xbf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x57f, gbc.sp());
        EXPECT(0x7809, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0xc518));
        // CB 86 02CB
        gbc.setState(0x8a56, 0x6374, 0xa150, 0x3f67, 0xbcc, 0xce1e, 0x1, 0x1);
        gbc.writeMem(0x8a56, { 0xcb, 0x86 });
        gbc.writeMem(0xce1e, { 0x69 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x6374, gbc.sp());
        EXPECT(0x8a58, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a56));
        EXPECT(0x86, gbc.readMem(0x8a57));
        EXPECT(0x68, gbc.readMem(0xce1e));
        // CB 86 02CC
        gbc.setState(0xc007, 0x9655, 0xd7e0, 0x650f, 0x8591, 0xad5a, 0x0, 0x1);
        gbc.writeMem(0xad5a, { 0x6f });
        gbc.writeMem(0xc007, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x9655, gbc.sp());
        EXPECT(0xc009, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6e, gbc.readMem(0xad5a));
        EXPECT(0xcb, gbc.readMem(0xc007));
        EXPECT(0x86, gbc.readMem(0xc008));
        // CB 86 02CE
        gbc.setState(0x25bc, 0xce6c, 0xcc10, 0x6e60, 0x8892, 0x9dbd, 0x0, 0x0);
        gbc.writeMem(0x25bc, { 0xcb, 0x86 });
        gbc.writeMem(0x9dbd, { 0x24 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xce6c, gbc.sp());
        EXPECT(0x25be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0x9dbd));
        // CB 86 02CF
        gbc.setState(0xcf9e, 0x3505, 0x4a30, 0x8178, 0x7470, 0xdfe9, 0x1, 0x0);
        gbc.writeMem(0xcf9e, { 0xcb, 0x86 });
        gbc.writeMem(0xdfe9, { 0x1f });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x3505, gbc.sp());
        EXPECT(0xcfa0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf9e));
        EXPECT(0x86, gbc.readMem(0xcf9f));
        EXPECT(0x1e, gbc.readMem(0xdfe9));
        // CB 86 02D0
        gbc.setState(0x526d, 0xe714, 0x7660, 0x117f, 0xb4bc, 0x97bc, 0x1, 0x1);
        gbc.writeMem(0x526d, { 0xcb, 0x86 });
        gbc.writeMem(0x97bc, { 0xda });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xe714, gbc.sp());
        EXPECT(0x526f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xda, gbc.readMem(0x97bc));
        // CB 86 02D3
        gbc.setState(0xb321, 0x43e6, 0x6480, 0xecbe, 0x5104, 0xdbc7, 0x1, 0x1);
        gbc.writeMem(0xb321, { 0xcb, 0x86 });
        gbc.writeMem(0xdbc7, { 0x37 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x43e6, gbc.sp());
        EXPECT(0xb323, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb321));
        EXPECT(0x86, gbc.readMem(0xb322));
        EXPECT(0x36, gbc.readMem(0xdbc7));
        // CB 86 02D5
        gbc.setState(0x1bc7, 0x3508, 0x2ce0, 0xe97c, 0x9587, 0xd905, 0x1, 0x1);
        gbc.writeMem(0x1bc7, { 0xcb, 0x86 });
        gbc.writeMem(0xd905, { 0xa0 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x3508, gbc.sp());
        EXPECT(0x1bc9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0xd905));
        // CB 86 02D6
        gbc.setState(0x334e, 0xb179, 0x50d0, 0xfcf8, 0xf71f, 0x889f, 0x1, 0x1);
        gbc.writeMem(0x334e, { 0xcb, 0x86 });
        gbc.writeMem(0x889f, { 0x7a });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xb179, gbc.sp());
        EXPECT(0x3350, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7a, gbc.readMem(0x889f));
        // CB 86 02D7
        gbc.setState(0x13f3, 0x408b, 0xad50, 0xf7f7, 0xc65b, 0xed38, 0x0, 0x0);
        gbc.writeMem(0x13f3, { 0xcb, 0x86 });
        gbc.writeMem(0xed38, { 0x36 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x408b, gbc.sp());
        EXPECT(0x13f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0xed38));
        // CB 86 02D8
        gbc.setState(0x5b2, 0x8f9b, 0x4a90, 0xe8ec, 0x595d, 0x88a8, 0x0, 0x1);
        gbc.writeMem(0x5b2, { 0xcb, 0x86 });
        gbc.writeMem(0x88a8, { 0xe0 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x8f9b, gbc.sp());
        EXPECT(0x5b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe0, gbc.readMem(0x88a8));
        // CB 86 02D9
        gbc.setState(0x7810, 0x8d0c, 0xfad0, 0xca4, 0xc64f, 0xc690, 0x1, 0x0);
        gbc.writeMem(0x7810, { 0xcb, 0x86 });
        gbc.writeMem(0xc690, { 0x11 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x8d0c, gbc.sp());
        EXPECT(0x7812, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x10, gbc.readMem(0xc690));
        // CB 86 02DA
        gbc.setState(0x6941, 0x5661, 0x7730, 0xa95a, 0x303b, 0x1efe, 0x0, 0x1);
        gbc.writeMem(0x1efe, { 0x84 });
        gbc.writeMem(0x6941, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x5661, gbc.sp());
        EXPECT(0x6943, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 02DB
        gbc.setState(0x13a4, 0x46c4, 0x1d90, 0x1c4a, 0xcc54, 0x797d, 0x0, 0x1);
        gbc.writeMem(0x13a4, { 0xcb, 0x86 });
        gbc.writeMem(0x797d, { 0xb6 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x46c4, gbc.sp());
        EXPECT(0x13a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 02DC
        gbc.setState(0x295f, 0xd56f, 0x53f0, 0xa795, 0xf392, 0xa9b0, 0x1, 0x1);
        gbc.writeMem(0x295f, { 0xcb, 0x86 });
        gbc.writeMem(0xa9b0, { 0x6a });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xd56f, gbc.sp());
        EXPECT(0x2961, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6a, gbc.readMem(0xa9b0));
        // CB 86 02DD
        gbc.setState(0xef80, 0xe16a, 0xabf0, 0xe5ea, 0xb972, 0x6956, 0x1, 0x1);
        gbc.writeMem(0x6956, { 0xc0 });
        gbc.writeMem(0xef80, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xe16a, gbc.sp());
        EXPECT(0xef82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef80));
        EXPECT(0x86, gbc.readMem(0xef81));
        // CB 86 02DE
        gbc.setState(0x362, 0x799f, 0xc9e0, 0x7080, 0x13f, 0xb85, 0x1, 0x1);
        gbc.writeMem(0x362, { 0xcb, 0x86 });
        gbc.writeMem(0xb85, { 0x58 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x799f, gbc.sp());
        EXPECT(0x364, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 02DF
        gbc.setState(0xbd3, 0xce8b, 0xf0c0, 0xa0a7, 0xbfb8, 0x9d55, 0x1, 0x0);
        gbc.writeMem(0xbd3, { 0xcb, 0x86 });
        gbc.writeMem(0x9d55, { 0x1b });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xce8b, gbc.sp());
        EXPECT(0xbd5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1a, gbc.readMem(0x9d55));
        // CB 86 02E0
        gbc.setState(0xd3c9, 0xd886, 0x8a60, 0x8e85, 0xb4d9, 0xe915, 0x0, 0x1);
        gbc.writeMem(0xd3c9, { 0xcb, 0x86 });
        gbc.writeMem(0xe915, { 0x26 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xd886, gbc.sp());
        EXPECT(0xd3cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3c9));
        EXPECT(0x86, gbc.readMem(0xd3ca));
        EXPECT(0x26, gbc.readMem(0xe915));
        // CB 86 02E1
        gbc.setState(0x4526, 0xb45f, 0x45d0, 0x67a1, 0x9dcc, 0x649b, 0x1, 0x0);
        gbc.writeMem(0x4526, { 0xcb, 0x86 });
        gbc.writeMem(0x649b, { 0x86 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xb45f, gbc.sp());
        EXPECT(0x4528, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 02E2
        gbc.setState(0x964d, 0xc642, 0xbc40, 0x8e65, 0x917a, 0x2d1e, 0x0, 0x1);
        gbc.writeMem(0x2d1e, { 0xa2 });
        gbc.writeMem(0x964d, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xc642, gbc.sp());
        EXPECT(0x964f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x964d));
        EXPECT(0x86, gbc.readMem(0x964e));
        // CB 86 02E3
        gbc.setState(0x7af3, 0x1ac2, 0xa70, 0xf29, 0x7a4e, 0x9d7f, 0x1, 0x0);
        gbc.writeMem(0x7af3, { 0xcb, 0x86 });
        gbc.writeMem(0x9d7f, { 0x37 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x1ac2, gbc.sp());
        EXPECT(0x7af5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0x9d7f));
        // CB 86 02E4
        gbc.setState(0xaba7, 0xda38, 0xe160, 0xd8c4, 0x801, 0x8c40, 0x1, 0x0);
        gbc.writeMem(0x8c40, { 0xaa });
        gbc.writeMem(0xaba7, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xda38, gbc.sp());
        EXPECT(0xaba9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaa, gbc.readMem(0x8c40));
        EXPECT(0xcb, gbc.readMem(0xaba7));
        EXPECT(0x86, gbc.readMem(0xaba8));
        // CB 86 02E5
        gbc.setState(0x2b5b, 0xe395, 0xf890, 0xecda, 0x3b28, 0xd978, 0x0, 0x0);
        gbc.writeMem(0x2b5b, { 0xcb, 0x86 });
        gbc.writeMem(0xd978, { 0x56 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xe395, gbc.sp());
        EXPECT(0x2b5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x56, gbc.readMem(0xd978));
        // CB 86 02E7
        gbc.setState(0x7c9f, 0xe052, 0x630, 0x5197, 0xf583, 0xbce3, 0x1, 0x1);
        gbc.writeMem(0x7c9f, { 0xcb, 0x86 });
        gbc.writeMem(0xbce3, { 0x18 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xe052, gbc.sp());
        EXPECT(0x7ca1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x18, gbc.readMem(0xbce3));
        // CB 86 02E8
        gbc.setState(0xaac5, 0x5e7d, 0xd350, 0x5e32, 0x1a1b, 0xd105, 0x0, 0x1);
        gbc.writeMem(0xaac5, { 0xcb, 0x86 });
        gbc.writeMem(0xd105, { 0x5f });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x5e7d, gbc.sp());
        EXPECT(0xaac7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaac5));
        EXPECT(0x86, gbc.readMem(0xaac6));
        EXPECT(0x5e, gbc.readMem(0xd105));
        // CB 86 02E9
        gbc.setState(0x6f3b, 0x80fd, 0xbd80, 0xd3c1, 0x8920, 0xa391, 0x1, 0x1);
        gbc.writeMem(0x6f3b, { 0xcb, 0x86 });
        gbc.writeMem(0xa391, { 0x7f });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x80fd, gbc.sp());
        EXPECT(0x6f3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0xa391));
        // CB 86 02EA
        gbc.setState(0x1076, 0x7538, 0xcd40, 0x5fac, 0xe4ed, 0x8484, 0x0, 0x1);
        gbc.writeMem(0x1076, { 0xcb, 0x86 });
        gbc.writeMem(0x8484, { 0x17 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x7538, gbc.sp());
        EXPECT(0x1078, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x16, gbc.readMem(0x8484));
        // CB 86 02EB
        gbc.setState(0x2b21, 0xeb89, 0x40, 0x2195, 0xf5d1, 0xf35e, 0x0, 0x1);
        gbc.writeMem(0x2b21, { 0xcb, 0x86 });
        gbc.writeMem(0xf35e, { 0x49 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xeb89, gbc.sp());
        EXPECT(0x2b23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0xf35e));
        // CB 86 02EC
        gbc.setState(0x6725, 0x201a, 0xee30, 0xd7f8, 0xa27, 0xd230, 0x0, 0x1);
        gbc.writeMem(0x6725, { 0xcb, 0x86 });
        gbc.writeMem(0xd230, { 0x8c });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x201a, gbc.sp());
        EXPECT(0x6727, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0xd230));
        // CB 86 02ED
        gbc.setState(0x4683, 0x9128, 0xd870, 0x4e9b, 0x7dbb, 0x8926, 0x1, 0x1);
        gbc.writeMem(0x4683, { 0xcb, 0x86 });
        gbc.writeMem(0x8926, { 0xfa });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x9128, gbc.sp());
        EXPECT(0x4685, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfa, gbc.readMem(0x8926));
        // CB 86 02EF
        gbc.setState(0x6492, 0xc202, 0xdd00, 0xbbf0, 0x6f2b, 0xa816, 0x0, 0x1);
        gbc.writeMem(0x6492, { 0xcb, 0x86 });
        gbc.writeMem(0xa816, { 0x5e });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xc202, gbc.sp());
        EXPECT(0x6494, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5e, gbc.readMem(0xa816));
        // CB 86 02F0
        gbc.setState(0x3a0d, 0x369, 0x12a0, 0xdcb0, 0xaff1, 0x6ca2, 0x0, 0x0);
        gbc.writeMem(0x3a0d, { 0xcb, 0x86 });
        gbc.writeMem(0x6ca2, { 0x54 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x369, gbc.sp());
        EXPECT(0x3a0f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 02F1
        gbc.setState(0xd0cf, 0x277d, 0x2b60, 0x91ac, 0x5d74, 0x1f7c, 0x0, 0x1);
        gbc.writeMem(0x1f7c, { 0x98 });
        gbc.writeMem(0xd0cf, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x277d, gbc.sp());
        EXPECT(0xd0d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0cf));
        EXPECT(0x86, gbc.readMem(0xd0d0));
        // CB 86 02F3
        gbc.setState(0x116f, 0x2501, 0xdb20, 0xd488, 0xb607, 0xa7ef, 0x1, 0x0);
        gbc.writeMem(0x116f, { 0xcb, 0x86 });
        gbc.writeMem(0xa7ef, { 0x3b });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x2501, gbc.sp());
        EXPECT(0x1171, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3a, gbc.readMem(0xa7ef));
        // CB 86 02F4
        gbc.setState(0xd269, 0x7e2, 0xa860, 0xa446, 0x6d39, 0x8119, 0x1, 0x0);
        gbc.writeMem(0x8119, { 0xab });
        gbc.writeMem(0xd269, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x7e2, gbc.sp());
        EXPECT(0xd26b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaa, gbc.readMem(0x8119));
        EXPECT(0xcb, gbc.readMem(0xd269));
        EXPECT(0x86, gbc.readMem(0xd26a));
        // CB 86 02F5
        gbc.setState(0x1677, 0x15bd, 0xc050, 0x1edf, 0xf813, 0x5928, 0x0, 0x1);
        gbc.writeMem(0x1677, { 0xcb, 0x86 });
        gbc.writeMem(0x5928, { 0x8a });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x15bd, gbc.sp());
        EXPECT(0x1679, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 02F6
        gbc.setState(0x97d2, 0xc4ca, 0xa0c0, 0x1811, 0x960e, 0x9780, 0x1, 0x0);
        gbc.writeMem(0x9780, { 0xe4 });
        gbc.writeMem(0x97d2, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xc4ca, gbc.sp());
        EXPECT(0x97d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0x9780));
        EXPECT(0xcb, gbc.readMem(0x97d2));
        EXPECT(0x86, gbc.readMem(0x97d3));
        // CB 86 02F7
        gbc.setState(0x4a95, 0x64d9, 0x1340, 0x33a4, 0x33c, 0xf83c, 0x1, 0x0);
        gbc.writeMem(0x4a95, { 0xcb, 0x86 });
        gbc.writeMem(0xf83c, { 0x73 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x64d9, gbc.sp());
        EXPECT(0x4a97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x72, gbc.readMem(0xf83c));
        // CB 86 02F8
        gbc.setState(0xd7fd, 0xfa31, 0xb8d0, 0x432f, 0xab59, 0x5731, 0x0, 0x0);
        gbc.writeMem(0x5731, { 0xe6 });
        gbc.writeMem(0xd7fd, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xfa31, gbc.sp());
        EXPECT(0xd7ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7fd));
        EXPECT(0x86, gbc.readMem(0xd7fe));
        // CB 86 02F9
        gbc.setState(0x870b, 0xc728, 0xc8f0, 0x2b8e, 0xad26, 0x9937, 0x0, 0x1);
        gbc.writeMem(0x870b, { 0xcb, 0x86 });
        gbc.writeMem(0x9937, { 0x7a });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xc728, gbc.sp());
        EXPECT(0x870d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x870b));
        EXPECT(0x86, gbc.readMem(0x870c));
        EXPECT(0x7a, gbc.readMem(0x9937));
        // CB 86 02FA
        gbc.setState(0x7e36, 0x3bd3, 0x42d0, 0xe073, 0x914c, 0x1c5c, 0x0, 0x0);
        gbc.writeMem(0x1c5c, { 0xf6 });
        gbc.writeMem(0x7e36, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x3bd3, gbc.sp());
        EXPECT(0x7e38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 02FB
        gbc.setState(0xe723, 0x450c, 0x63e0, 0xbcec, 0xa3d, 0xdb4e, 0x1, 0x1);
        gbc.writeMem(0xdb4e, { 0x47 });
        gbc.writeMem(0xe723, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x450c, gbc.sp());
        EXPECT(0xe725, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x46, gbc.readMem(0xdb4e));
        EXPECT(0xcb, gbc.readMem(0xe723));
        EXPECT(0x86, gbc.readMem(0xe724));
        // CB 86 02FD
        gbc.setState(0x1389, 0x7de2, 0xcae0, 0xf110, 0xc476, 0xc8f4, 0x1, 0x0);
        gbc.writeMem(0x1389, { 0xcb, 0x86 });
        gbc.writeMem(0xc8f4, { 0xeb });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x7de2, gbc.sp());
        EXPECT(0x138b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc8f4));
        // CB 86 02FE
        gbc.setState(0xe797, 0x5d8c, 0x1fc0, 0xbe6f, 0x26e2, 0xb10d, 0x0, 0x0);
        gbc.writeMem(0xb10d, { 0x47 });
        gbc.writeMem(0xe797, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x5d8c, gbc.sp());
        EXPECT(0xe799, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x46, gbc.readMem(0xb10d));
        EXPECT(0xcb, gbc.readMem(0xe797));
        EXPECT(0x86, gbc.readMem(0xe798));
        // CB 86 02FF
        gbc.setState(0x3121, 0xed8a, 0x7270, 0xfe59, 0xb66a, 0xaf6c, 0x0, 0x0);
        gbc.writeMem(0x3121, { 0xcb, 0x86 });
        gbc.writeMem(0xaf6c, { 0x7d });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xed8a, gbc.sp());
        EXPECT(0x3123, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xaf6c));
        // CB 86 0300
        gbc.setState(0xe3e2, 0x523b, 0xd7c0, 0xf2e6, 0x591f, 0x9ca9, 0x1, 0x0);
        gbc.writeMem(0x9ca9, { 0x4c });
        gbc.writeMem(0xe3e2, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x523b, gbc.sp());
        EXPECT(0xe3e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4c, gbc.readMem(0x9ca9));
        EXPECT(0xcb, gbc.readMem(0xe3e2));
        EXPECT(0x86, gbc.readMem(0xe3e3));
        // CB 86 0301
        gbc.setState(0x8d7, 0xc196, 0x2570, 0x6855, 0x1335, 0xffab, 0x1, 0x0);
        gbc.writeMem(0x8d7, { 0xcb, 0x86 });
        gbc.writeMem(0xffab, { 0xe7 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xc196, gbc.sp());
        EXPECT(0x8d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe6, gbc.readMem(0xffab));
        // CB 86 0302
        gbc.setState(0x43e4, 0xd653, 0xafc0, 0xcd5e, 0x49fd, 0xfe91, 0x1, 0x1);
        gbc.writeMem(0x43e4, { 0xcb, 0x86 });
        gbc.writeMem(0xfe91, { 0x10 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xd653, gbc.sp());
        EXPECT(0x43e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x10, gbc.readMem(0xfe91));
        // CB 86 0303
        gbc.setState(0xa0f8, 0x217f, 0x57f0, 0x929e, 0xf963, 0xc7a5, 0x1, 0x1);
        gbc.writeMem(0xa0f8, { 0xcb, 0x86 });
        gbc.writeMem(0xc7a5, { 0xf1 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x217f, gbc.sp());
        EXPECT(0xa0fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0f8));
        EXPECT(0x86, gbc.readMem(0xa0f9));
        EXPECT(0xf0, gbc.readMem(0xc7a5));
        // CB 86 0305
        gbc.setState(0xe966, 0x60e1, 0x73e0, 0xe53f, 0x238c, 0x9854, 0x1, 0x0);
        gbc.writeMem(0x9854, { 0x38 });
        gbc.writeMem(0xe966, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x60e1, gbc.sp());
        EXPECT(0xe968, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0x9854));
        EXPECT(0xcb, gbc.readMem(0xe966));
        EXPECT(0x86, gbc.readMem(0xe967));
        // CB 86 0307
        gbc.setState(0x20cc, 0xe709, 0xab50, 0xe67d, 0x5c00, 0xe930, 0x1, 0x1);
        gbc.writeMem(0x20cc, { 0xcb, 0x86 });
        gbc.writeMem(0xe930, { 0x4f });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xe709, gbc.sp());
        EXPECT(0x20ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0xe930));
        // CB 86 0308
        gbc.setState(0xe492, 0x4cb9, 0xa530, 0xf862, 0x913b, 0x41a4, 0x1, 0x0);
        gbc.writeMem(0x41a4, { 0x32 });
        gbc.writeMem(0xe492, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x4cb9, gbc.sp());
        EXPECT(0xe494, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe492));
        EXPECT(0x86, gbc.readMem(0xe493));
        // CB 86 030C
        gbc.setState(0x2d03, 0x3d7c, 0x4740, 0x9198, 0x4e02, 0xd9ea, 0x0, 0x1);
        gbc.writeMem(0x2d03, { 0xcb, 0x86 });
        gbc.writeMem(0xd9ea, { 0x70 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x3d7c, gbc.sp());
        EXPECT(0x2d05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x70, gbc.readMem(0xd9ea));
        // CB 86 030D
        gbc.setState(0xc1cd, 0x5c00, 0xddb0, 0xc30f, 0x6b21, 0x16cb, 0x0, 0x1);
        gbc.writeMem(0x16cb, { 0x34 });
        gbc.writeMem(0xc1cd, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x5c00, gbc.sp());
        EXPECT(0xc1cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1cd));
        EXPECT(0x86, gbc.readMem(0xc1ce));
        // CB 86 030E
        gbc.setState(0xa975, 0xe40c, 0x3630, 0x7c7a, 0xcb8, 0xd55f, 0x1, 0x1);
        gbc.writeMem(0xa975, { 0xcb, 0x86 });
        gbc.writeMem(0xd55f, { 0x5a });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xe40c, gbc.sp());
        EXPECT(0xa977, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa975));
        EXPECT(0x86, gbc.readMem(0xa976));
        EXPECT(0x5a, gbc.readMem(0xd55f));
        // CB 86 030F
        gbc.setState(0xde41, 0x3ade, 0xefe0, 0x8eb7, 0x471f, 0xc18d, 0x1, 0x1);
        gbc.writeMem(0xc18d, { 0x5c });
        gbc.writeMem(0xde41, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x3ade, gbc.sp());
        EXPECT(0xde43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5c, gbc.readMem(0xc18d));
        EXPECT(0xcb, gbc.readMem(0xde41));
        EXPECT(0x86, gbc.readMem(0xde42));
        // CB 86 0310
        gbc.setState(0xeccb, 0x3ec0, 0x9e80, 0x4901, 0xc800, 0x4908, 0x0, 0x0);
        gbc.writeMem(0x4908, { 0xa6 });
        gbc.writeMem(0xeccb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x3ec0, gbc.sp());
        EXPECT(0xeccd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeccb));
        EXPECT(0x86, gbc.readMem(0xeccc));
        // CB 86 0311
        gbc.setState(0x60a4, 0xfe08, 0xd080, 0x15e, 0x7e18, 0x8bb2, 0x1, 0x0);
        gbc.writeMem(0x60a4, { 0xcb, 0x86 });
        gbc.writeMem(0x8bb2, { 0x57 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xfe08, gbc.sp());
        EXPECT(0x60a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x56, gbc.readMem(0x8bb2));
        // CB 86 0312
        gbc.setState(0x800b, 0xcc6b, 0xcab0, 0xee55, 0x9800, 0x28ec, 0x0, 0x0);
        gbc.writeMem(0x28ec, { 0xec });
        gbc.writeMem(0x800b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xcc6b, gbc.sp());
        EXPECT(0x800d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x800b));
        EXPECT(0x86, gbc.readMem(0x800c));
        // CB 86 0313
        gbc.setState(0x8ad, 0x5491, 0x9de0, 0x365f, 0x8880, 0x45c4, 0x1, 0x1);
        gbc.writeMem(0x8ad, { 0xcb, 0x86 });
        gbc.writeMem(0x45c4, { 0x62 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x5491, gbc.sp());
        EXPECT(0x8af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0315
        gbc.setState(0x4651, 0x6260, 0x2d20, 0x9a7a, 0xf79, 0x8a5f, 0x0, 0x1);
        gbc.writeMem(0x4651, { 0xcb, 0x86 });
        gbc.writeMem(0x8a5f, { 0x32 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x6260, gbc.sp());
        EXPECT(0x4653, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0x8a5f));
        // CB 86 0317
        gbc.setState(0x165f, 0xf188, 0x9300, 0x3a06, 0xbcc4, 0xa59a, 0x0, 0x0);
        gbc.writeMem(0x165f, { 0xcb, 0x86 });
        gbc.writeMem(0xa59a, { 0x4b });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xf188, gbc.sp());
        EXPECT(0x1661, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4a, gbc.readMem(0xa59a));
        // CB 86 0318
        gbc.setState(0xbbfa, 0x1bee, 0xd010, 0x6041, 0x90d7, 0xd2e3, 0x0, 0x1);
        gbc.writeMem(0xbbfa, { 0xcb, 0x86 });
        gbc.writeMem(0xd2e3, { 0x9b });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x1bee, gbc.sp());
        EXPECT(0xbbfc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbfa));
        EXPECT(0x86, gbc.readMem(0xbbfb));
        EXPECT(0x9a, gbc.readMem(0xd2e3));
        // CB 86 0319
        gbc.setState(0x54d9, 0x895b, 0x7910, 0x3a60, 0xc742, 0xdbb5, 0x0, 0x0);
        gbc.writeMem(0x54d9, { 0xcb, 0x86 });
        gbc.writeMem(0xdbb5, { 0xcb });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x895b, gbc.sp());
        EXPECT(0x54db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0xdbb5));
        // CB 86 031A
        gbc.setState(0x4342, 0x88c7, 0x9e10, 0xebbe, 0x217, 0xc552, 0x0, 0x1);
        gbc.writeMem(0x4342, { 0xcb, 0x86 });
        gbc.writeMem(0xc552, { 0xa4 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x88c7, gbc.sp());
        EXPECT(0x4344, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa4, gbc.readMem(0xc552));
        // CB 86 031B
        gbc.setState(0xa537, 0xed7d, 0x7800, 0x7e36, 0x9a81, 0xe09d, 0x1, 0x1);
        gbc.writeMem(0xa537, { 0xcb, 0x86 });
        gbc.writeMem(0xe09d, { 0xc9 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xed7d, gbc.sp());
        EXPECT(0xa539, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa537));
        EXPECT(0x86, gbc.readMem(0xa538));
        EXPECT(0xc8, gbc.readMem(0xe09d));
        // CB 86 031E
        gbc.setState(0xa673, 0xa438, 0x1f0, 0xfdb1, 0x1167, 0x7d7e, 0x0, 0x0);
        gbc.writeMem(0x7d7e, { 0x24 });
        gbc.writeMem(0xa673, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xa438, gbc.sp());
        EXPECT(0xa675, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa673));
        EXPECT(0x86, gbc.readMem(0xa674));
        // CB 86 031F
        gbc.setState(0x1e2c, 0x7129, 0x8650, 0xe0f, 0xa556, 0x7e81, 0x0, 0x1);
        gbc.writeMem(0x1e2c, { 0xcb, 0x86 });
        gbc.writeMem(0x7e81, { 0xf0 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x7129, gbc.sp());
        EXPECT(0x1e2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0320
        gbc.setState(0xe428, 0xbcdf, 0x8a20, 0x872b, 0xb536, 0x9db9, 0x1, 0x1);
        gbc.writeMem(0x9db9, { 0xa1 });
        gbc.writeMem(0xe428, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xbcdf, gbc.sp());
        EXPECT(0xe42a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0x9db9));
        EXPECT(0xcb, gbc.readMem(0xe428));
        EXPECT(0x86, gbc.readMem(0xe429));
        // CB 86 0324
        gbc.setState(0x4398, 0x606f, 0x2b90, 0xba06, 0xf3af, 0xa84e, 0x1, 0x0);
        gbc.writeMem(0x4398, { 0xcb, 0x86 });
        gbc.writeMem(0xa84e, { 0x75 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x606f, gbc.sp());
        EXPECT(0x439a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xa84e));
        // CB 86 0326
        gbc.setState(0xa0da, 0xcf6f, 0x7af0, 0x2a4e, 0xac91, 0xedae, 0x0, 0x0);
        gbc.writeMem(0xa0da, { 0xcb, 0x86 });
        gbc.writeMem(0xedae, { 0x5b });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xcf6f, gbc.sp());
        EXPECT(0xa0dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0da));
        EXPECT(0x86, gbc.readMem(0xa0db));
        EXPECT(0x5a, gbc.readMem(0xedae));
        // CB 86 0327
        gbc.setState(0xc1ed, 0x4e37, 0x8370, 0xb3ef, 0xaf9f, 0x84ca, 0x1, 0x1);
        gbc.writeMem(0x84ca, { 0x2d });
        gbc.writeMem(0xc1ed, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x4e37, gbc.sp());
        EXPECT(0xc1ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2c, gbc.readMem(0x84ca));
        EXPECT(0xcb, gbc.readMem(0xc1ed));
        EXPECT(0x86, gbc.readMem(0xc1ee));
        // CB 86 0328
        gbc.setState(0x1299, 0x418c, 0xaed0, 0x24f2, 0x75d6, 0x1f76, 0x0, 0x1);
        gbc.writeMem(0x1299, { 0xcb, 0x86 });
        gbc.writeMem(0x1f76, { 0x16 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x418c, gbc.sp());
        EXPECT(0x129b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0329
        gbc.setState(0xea65, 0x4f31, 0x5e50, 0x7377, 0xca52, 0x191, 0x0, 0x1);
        gbc.writeMem(0x191, { 0xb4 });
        gbc.writeMem(0xea65, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x4f31, gbc.sp());
        EXPECT(0xea67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea65));
        EXPECT(0x86, gbc.readMem(0xea66));
        // CB 86 032C
        gbc.setState(0x5a1e, 0x6ed6, 0xb400, 0x9f06, 0xa1a8, 0xbf38, 0x0, 0x0);
        gbc.writeMem(0x5a1e, { 0xcb, 0x86 });
        gbc.writeMem(0xbf38, { 0x4b });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x6ed6, gbc.sp());
        EXPECT(0x5a20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4a, gbc.readMem(0xbf38));
        // CB 86 032D
        gbc.setState(0x5ba6, 0x9fb6, 0xb4b0, 0x5643, 0xaa2f, 0x3df0, 0x1, 0x1);
        gbc.writeMem(0x3df0, { 0x68 });
        gbc.writeMem(0x5ba6, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x9fb6, gbc.sp());
        EXPECT(0x5ba8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 032E
        gbc.setState(0x45be, 0x6f0d, 0x3f00, 0x6412, 0xe902, 0x435d, 0x0, 0x1);
        gbc.writeMem(0x435d, { 0xa2 });
        gbc.writeMem(0x45be, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x6f0d, gbc.sp());
        EXPECT(0x45c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 032F
        gbc.setState(0xec1e, 0x74fb, 0x76c0, 0xe88c, 0xaf1f, 0x9edd, 0x1, 0x1);
        gbc.writeMem(0x9edd, { 0x8d });
        gbc.writeMem(0xec1e, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x74fb, gbc.sp());
        EXPECT(0xec20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0x9edd));
        EXPECT(0xcb, gbc.readMem(0xec1e));
        EXPECT(0x86, gbc.readMem(0xec1f));
        // CB 86 0331
        gbc.setState(0x6656, 0x683, 0x19d0, 0xea7, 0x202, 0x7232, 0x1, 0x1);
        gbc.writeMem(0x6656, { 0xcb, 0x86 });
        gbc.writeMem(0x7232, { 0xe });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x683, gbc.sp());
        EXPECT(0x6658, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0332
        gbc.setState(0x79c1, 0x15d4, 0xb8c0, 0x5e18, 0x2c5, 0x8366, 0x0, 0x1);
        gbc.writeMem(0x79c1, { 0xcb, 0x86 });
        gbc.writeMem(0x8366, { 0xea });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x15d4, gbc.sp());
        EXPECT(0x79c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8366));
        // CB 86 0333
        gbc.setState(0x65c8, 0xc9ec, 0xbbc0, 0x577d, 0xa647, 0xe97, 0x0, 0x1);
        gbc.writeMem(0xe97, { 0x10 });
        gbc.writeMem(0x65c8, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xc9ec, gbc.sp());
        EXPECT(0x65ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0334
        gbc.setState(0xaa29, 0x3c17, 0x3e60, 0x7264, 0xb759, 0x8b72, 0x1, 0x1);
        gbc.writeMem(0x8b72, { 0xe2 });
        gbc.writeMem(0xaa29, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x3c17, gbc.sp());
        EXPECT(0xaa2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe2, gbc.readMem(0x8b72));
        EXPECT(0xcb, gbc.readMem(0xaa29));
        EXPECT(0x86, gbc.readMem(0xaa2a));
        // CB 86 0335
        gbc.setState(0xc7cc, 0xd11b, 0xdf60, 0x9200, 0xfa15, 0x822a, 0x0, 0x1);
        gbc.writeMem(0x822a, { 0xc4 });
        gbc.writeMem(0xc7cc, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xd11b, gbc.sp());
        EXPECT(0xc7ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0x822a));
        EXPECT(0xcb, gbc.readMem(0xc7cc));
        EXPECT(0x86, gbc.readMem(0xc7cd));
        // CB 86 0336
        gbc.setState(0xd9cd, 0x8dcc, 0x9990, 0xa21e, 0xa27b, 0x541b, 0x1, 0x1);
        gbc.writeMem(0x541b, { 0x48 });
        gbc.writeMem(0xd9cd, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x8dcc, gbc.sp());
        EXPECT(0xd9cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9cd));
        EXPECT(0x86, gbc.readMem(0xd9ce));
        // CB 86 0337
        gbc.setState(0xd7ad, 0xf583, 0xd6f0, 0x4a1f, 0xc709, 0x98f3, 0x1, 0x1);
        gbc.writeMem(0x98f3, { 0xa3 });
        gbc.writeMem(0xd7ad, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xf583, gbc.sp());
        EXPECT(0xd7af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa2, gbc.readMem(0x98f3));
        EXPECT(0xcb, gbc.readMem(0xd7ad));
        EXPECT(0x86, gbc.readMem(0xd7ae));
        // CB 86 0338
        gbc.setState(0x77fd, 0x6fbf, 0x64f0, 0x603, 0x193b, 0x8114, 0x0, 0x0);
        gbc.writeMem(0x77fd, { 0xcb, 0x86 });
        gbc.writeMem(0x8114, { 0x2c });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x6fbf, gbc.sp());
        EXPECT(0x77ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2c, gbc.readMem(0x8114));
        // CB 86 0339
        gbc.setState(0x963f, 0x29bb, 0x3e90, 0x2823, 0xa670, 0xd682, 0x1, 0x0);
        gbc.writeMem(0x963f, { 0xcb, 0x86 });
        gbc.writeMem(0xd682, { 0xc0 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x29bb, gbc.sp());
        EXPECT(0x9641, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x963f));
        EXPECT(0x86, gbc.readMem(0x9640));
        EXPECT(0xc0, gbc.readMem(0xd682));
        // CB 86 033B
        gbc.setState(0x2119, 0xb907, 0x2a80, 0x22bf, 0x68e2, 0x1d2f, 0x1, 0x0);
        gbc.writeMem(0x1d2f, { 0xce });
        gbc.writeMem(0x2119, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xb907, gbc.sp());
        EXPECT(0x211b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 033C
        gbc.setState(0x7bc2, 0x134d, 0x17d0, 0xa185, 0xdd86, 0x3877, 0x0, 0x1);
        gbc.writeMem(0x3877, { 0x5a });
        gbc.writeMem(0x7bc2, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x134d, gbc.sp());
        EXPECT(0x7bc4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 033D
        gbc.setState(0x5bd1, 0x9da, 0x6730, 0xa6d9, 0x586, 0x2f7a, 0x0, 0x0);
        gbc.writeMem(0x2f7a, { 0xbe });
        gbc.writeMem(0x5bd1, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x9da, gbc.sp());
        EXPECT(0x5bd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 033E
        gbc.setState(0xa3db, 0xaaac, 0xf360, 0x2942, 0x5a56, 0x170e, 0x0, 0x0);
        gbc.writeMem(0x170e, { 0x82 });
        gbc.writeMem(0xa3db, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xaaac, gbc.sp());
        EXPECT(0xa3dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3db));
        EXPECT(0x86, gbc.readMem(0xa3dc));
        // CB 86 033F
        gbc.setState(0xa06b, 0x74a, 0xd790, 0xd318, 0xba5d, 0x2145, 0x1, 0x1);
        gbc.writeMem(0x2145, { 0x28 });
        gbc.writeMem(0xa06b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x74a, gbc.sp());
        EXPECT(0xa06d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa06b));
        EXPECT(0x86, gbc.readMem(0xa06c));
        // CB 86 0340
        gbc.setState(0x1950, 0xb38a, 0xd410, 0xf2ff, 0xc68f, 0x9829, 0x1, 0x0);
        gbc.writeMem(0x1950, { 0xcb, 0x86 });
        gbc.writeMem(0x9829, { 0x67 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xb38a, gbc.sp());
        EXPECT(0x1952, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0x9829));
        // CB 86 0341
        gbc.setState(0xb43a, 0xca04, 0xbc60, 0x21, 0xc91c, 0xe12a, 0x1, 0x0);
        gbc.writeMem(0xb43a, { 0xcb, 0x86 });
        gbc.writeMem(0xe12a, { 0x8c });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xca04, gbc.sp());
        EXPECT(0xb43c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb43a));
        EXPECT(0x86, gbc.readMem(0xb43b));
        EXPECT(0x8c, gbc.readMem(0xe12a));
        // CB 86 0342
        gbc.setState(0xdef2, 0x3ee2, 0x30d0, 0xfd4e, 0xafc6, 0x6749, 0x1, 0x1);
        gbc.writeMem(0x6749, { 0x52 });
        gbc.writeMem(0xdef2, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x3ee2, gbc.sp());
        EXPECT(0xdef4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdef2));
        EXPECT(0x86, gbc.readMem(0xdef3));
        // CB 86 0343
        gbc.setState(0x93bb, 0x9f12, 0x3340, 0x9370, 0xe435, 0x5034, 0x1, 0x0);
        gbc.writeMem(0x5034, { 0xfe });
        gbc.writeMem(0x93bb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x9f12, gbc.sp());
        EXPECT(0x93bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93bb));
        EXPECT(0x86, gbc.readMem(0x93bc));
        // CB 86 0344
        gbc.setState(0x8ac8, 0xa1b9, 0xc9d0, 0xb1c2, 0xe0dc, 0x31c8, 0x0, 0x0);
        gbc.writeMem(0x31c8, { 0xc6 });
        gbc.writeMem(0x8ac8, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xa1b9, gbc.sp());
        EXPECT(0x8aca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ac8));
        EXPECT(0x86, gbc.readMem(0x8ac9));
        // CB 86 0345
        gbc.setState(0xe90f, 0x11d0, 0x8aa0, 0x32a9, 0xc522, 0xe5d5, 0x0, 0x0);
        gbc.writeMem(0xe5d5, { 0x50 });
        gbc.writeMem(0xe90f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x11d0, gbc.sp());
        EXPECT(0xe911, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0xe5d5));
        EXPECT(0xcb, gbc.readMem(0xe90f));
        EXPECT(0x86, gbc.readMem(0xe910));
        // CB 86 0346
        gbc.setState(0x5eb3, 0x5c2a, 0x2360, 0x5e28, 0xe8b0, 0x77d1, 0x1, 0x1);
        gbc.writeMem(0x5eb3, { 0xcb, 0x86 });
        gbc.writeMem(0x77d1, { 0xca });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x5c2a, gbc.sp());
        EXPECT(0x5eb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0347
        gbc.setState(0xed37, 0xe701, 0x7580, 0xf042, 0xa2fd, 0xa4f9, 0x0, 0x1);
        gbc.writeMem(0xa4f9, { 0x6a });
        gbc.writeMem(0xed37, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xe701, gbc.sp());
        EXPECT(0xed39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6a, gbc.readMem(0xa4f9));
        EXPECT(0xcb, gbc.readMem(0xed37));
        EXPECT(0x86, gbc.readMem(0xed38));
        // CB 86 0348
        gbc.setState(0x26db, 0x54ff, 0x5bf0, 0x3e91, 0x698d, 0xa312, 0x0, 0x0);
        gbc.writeMem(0x26db, { 0xcb, 0x86 });
        gbc.writeMem(0xa312, { 0x5f });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x54ff, gbc.sp());
        EXPECT(0x26dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5e, gbc.readMem(0xa312));
        // CB 86 0349
        gbc.setState(0x6b27, 0x9a5f, 0xbff0, 0xf3dc, 0xfbb1, 0x44a1, 0x1, 0x0);
        gbc.writeMem(0x44a1, { 0xbe });
        gbc.writeMem(0x6b27, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x9a5f, gbc.sp());
        EXPECT(0x6b29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 034B
        gbc.setState(0xc591, 0x2015, 0x9e40, 0xf1c5, 0xd84a, 0xd338, 0x0, 0x0);
        gbc.writeMem(0xc591, { 0xcb, 0x86 });
        gbc.writeMem(0xd338, { 0x20 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x2015, gbc.sp());
        EXPECT(0xc593, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc591));
        EXPECT(0x86, gbc.readMem(0xc592));
        EXPECT(0x20, gbc.readMem(0xd338));
        // CB 86 034C
        gbc.setState(0x6219, 0x4a89, 0x5090, 0x6440, 0x6e69, 0x14bb, 0x1, 0x1);
        gbc.writeMem(0x14bb, { 0xf6 });
        gbc.writeMem(0x6219, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x4a89, gbc.sp());
        EXPECT(0x621b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 034E
        gbc.setState(0x7e5b, 0xe229, 0xaf30, 0x7885, 0x8714, 0x24a3, 0x0, 0x0);
        gbc.writeMem(0x24a3, { 0xaa });
        gbc.writeMem(0x7e5b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xe229, gbc.sp());
        EXPECT(0x7e5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 034F
        gbc.setState(0x44b2, 0xc18d, 0x5db0, 0xe5f7, 0xfb9f, 0x86aa, 0x1, 0x0);
        gbc.writeMem(0x44b2, { 0xcb, 0x86 });
        gbc.writeMem(0x86aa, { 0x91 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xc18d, gbc.sp());
        EXPECT(0x44b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0x86aa));
        // CB 86 0350
        gbc.setState(0x2872, 0x634, 0xd3c0, 0x64b5, 0x4c66, 0xb859, 0x1, 0x0);
        gbc.writeMem(0x2872, { 0xcb, 0x86 });
        gbc.writeMem(0xb859, { 0x9e });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x634, gbc.sp());
        EXPECT(0x2874, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9e, gbc.readMem(0xb859));
        // CB 86 0351
        gbc.setState(0x90b7, 0x8278, 0xfaa0, 0x4278, 0xa4d9, 0xd06d, 0x1, 0x1);
        gbc.writeMem(0x90b7, { 0xcb, 0x86 });
        gbc.writeMem(0xd06d, { 0xe6 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x8278, gbc.sp());
        EXPECT(0x90b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90b7));
        EXPECT(0x86, gbc.readMem(0x90b8));
        EXPECT(0xe6, gbc.readMem(0xd06d));
        // CB 86 0352
        gbc.setState(0x19d5, 0x4257, 0x6d40, 0xedc0, 0xea89, 0xcd9a, 0x1, 0x1);
        gbc.writeMem(0x19d5, { 0xcb, 0x86 });
        gbc.writeMem(0xcd9a, { 0x3 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x4257, gbc.sp());
        EXPECT(0x19d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2, gbc.readMem(0xcd9a));
        // CB 86 0353
        gbc.setState(0xde6c, 0x7dc7, 0xe840, 0x4574, 0xafaa, 0xce07, 0x0, 0x1);
        gbc.writeMem(0xce07, { 0x48 });
        gbc.writeMem(0xde6c, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x7dc7, gbc.sp());
        EXPECT(0xde6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0xce07));
        EXPECT(0xcb, gbc.readMem(0xde6c));
        EXPECT(0x86, gbc.readMem(0xde6d));
        // CB 86 0355
        gbc.setState(0x3ba7, 0x1c91, 0x3ed0, 0x993d, 0x443b, 0x474, 0x0, 0x0);
        gbc.writeMem(0x474, { 0xf6 });
        gbc.writeMem(0x3ba7, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x1c91, gbc.sp());
        EXPECT(0x3ba9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0357
        gbc.setState(0x1939, 0x10c1, 0xf7a0, 0xa4e5, 0x9aea, 0xadde, 0x1, 0x1);
        gbc.writeMem(0x1939, { 0xcb, 0x86 });
        gbc.writeMem(0xadde, { 0x27 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x10c1, gbc.sp());
        EXPECT(0x193b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x26, gbc.readMem(0xadde));
        // CB 86 0358
        gbc.setState(0x2c62, 0xa298, 0x4e80, 0x6252, 0xc75c, 0xb12f, 0x1, 0x0);
        gbc.writeMem(0x2c62, { 0xcb, 0x86 });
        gbc.writeMem(0xb12f, { 0xe2 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xa298, gbc.sp());
        EXPECT(0x2c64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe2, gbc.readMem(0xb12f));
        // CB 86 0359
        gbc.setState(0x21b1, 0x7d16, 0x92e0, 0x909a, 0x9ee3, 0xa7d7, 0x0, 0x1);
        gbc.writeMem(0x21b1, { 0xcb, 0x86 });
        gbc.writeMem(0xa7d7, { 0xaf });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x7d16, gbc.sp());
        EXPECT(0x21b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xae, gbc.readMem(0xa7d7));
        // CB 86 035A
        gbc.setState(0x918f, 0x5be7, 0x1eb0, 0xe82c, 0xd0f2, 0x56e9, 0x0, 0x1);
        gbc.writeMem(0x56e9, { 0xee });
        gbc.writeMem(0x918f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x5be7, gbc.sp());
        EXPECT(0x9191, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x918f));
        EXPECT(0x86, gbc.readMem(0x9190));
        // CB 86 035B
        gbc.setState(0x834e, 0xce94, 0x53f0, 0x51b1, 0x3ab6, 0x14d0, 0x0, 0x1);
        gbc.writeMem(0x14d0, { 0xf0 });
        gbc.writeMem(0x834e, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xce94, gbc.sp());
        EXPECT(0x8350, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x834e));
        EXPECT(0x86, gbc.readMem(0x834f));
        // CB 86 035C
        gbc.setState(0x6ef, 0xb7c2, 0xd30, 0xb43, 0x57c7, 0xa94e, 0x0, 0x0);
        gbc.writeMem(0x6ef, { 0xcb, 0x86 });
        gbc.writeMem(0xa94e, { 0xa5 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xb7c2, gbc.sp());
        EXPECT(0x6f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa4, gbc.readMem(0xa94e));
        // CB 86 035F
        gbc.setState(0x740, 0xec52, 0x1da0, 0xc5f6, 0x560b, 0xc59a, 0x0, 0x1);
        gbc.writeMem(0x740, { 0xcb, 0x86 });
        gbc.writeMem(0xc59a, { 0x9a });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xec52, gbc.sp());
        EXPECT(0x742, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9a, gbc.readMem(0xc59a));
        // CB 86 0362
        gbc.setState(0x15c8, 0x6ce8, 0xda60, 0x6e6b, 0x4254, 0xff95, 0x1, 0x0);
        gbc.writeMem(0x15c8, { 0xcb, 0x86 });
        gbc.writeMem(0xff95, { 0x33 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x6ce8, gbc.sp());
        EXPECT(0x15ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xff95));
        // CB 86 0364
        gbc.setState(0x157d, 0x190b, 0xf630, 0x9fd5, 0x753f, 0xfac3, 0x1, 0x1);
        gbc.writeMem(0x157d, { 0xcb, 0x86 });
        gbc.writeMem(0xfac3, { 0x24 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x190b, gbc.sp());
        EXPECT(0x157f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0xfac3));
        // CB 86 0366
        gbc.setState(0x13aa, 0xe50d, 0x84c0, 0x665e, 0x40eb, 0xe4b2, 0x0, 0x0);
        gbc.writeMem(0x13aa, { 0xcb, 0x86 });
        gbc.writeMem(0xe4b2, { 0x85 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xe50d, gbc.sp());
        EXPECT(0x13ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0xe4b2));
        // CB 86 0368
        gbc.setState(0xe5cb, 0x58, 0xac30, 0x23b8, 0x7492, 0xb302, 0x0, 0x0);
        gbc.writeMem(0xb302, { 0x1c });
        gbc.writeMem(0xe5cb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x58, gbc.sp());
        EXPECT(0xe5cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0xb302));
        EXPECT(0xcb, gbc.readMem(0xe5cb));
        EXPECT(0x86, gbc.readMem(0xe5cc));
        // CB 86 036A
        gbc.setState(0x9a5e, 0x7734, 0x6ce0, 0x14c6, 0xb96b, 0x9f56, 0x0, 0x0);
        gbc.writeMem(0x9a5e, { 0xcb, 0x86 });
        gbc.writeMem(0x9f56, { 0xa4 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x7734, gbc.sp());
        EXPECT(0x9a60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a5e));
        EXPECT(0x86, gbc.readMem(0x9a5f));
        EXPECT(0xa4, gbc.readMem(0x9f56));
        // CB 86 036B
        gbc.setState(0x8b9f, 0xb2e3, 0xb040, 0x16a3, 0xa322, 0xa26a, 0x1, 0x0);
        gbc.writeMem(0x8b9f, { 0xcb, 0x86 });
        gbc.writeMem(0xa26a, { 0x7d });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xb2e3, gbc.sp());
        EXPECT(0x8ba1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b9f));
        EXPECT(0x86, gbc.readMem(0x8ba0));
        EXPECT(0x7c, gbc.readMem(0xa26a));
        // CB 86 036D
        gbc.setState(0x4eae, 0x7691, 0xc0a0, 0x435c, 0x359c, 0x3dd0, 0x0, 0x0);
        gbc.writeMem(0x3dd0, { 0x4c });
        gbc.writeMem(0x4eae, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x7691, gbc.sp());
        EXPECT(0x4eb0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 036E
        gbc.setState(0x68b5, 0x71e, 0xdcc0, 0x6fd9, 0x2b7, 0x8e4a, 0x0, 0x0);
        gbc.writeMem(0x68b5, { 0xcb, 0x86 });
        gbc.writeMem(0x8e4a, { 0x77 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x71e, gbc.sp());
        EXPECT(0x68b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x76, gbc.readMem(0x8e4a));
        // CB 86 036F
        gbc.setState(0x342c, 0x6cb8, 0x7b60, 0xd98, 0x8ca2, 0xc5a5, 0x1, 0x0);
        gbc.writeMem(0x342c, { 0xcb, 0x86 });
        gbc.writeMem(0xc5a5, { 0x3f });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x6cb8, gbc.sp());
        EXPECT(0x342e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0xc5a5));
        // CB 86 0370
        gbc.setState(0x1482, 0xff4e, 0x210, 0xe148, 0x6f69, 0x4eb4, 0x0, 0x1);
        gbc.writeMem(0x1482, { 0xcb, 0x86 });
        gbc.writeMem(0x4eb4, { 0x4a });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xff4e, gbc.sp());
        EXPECT(0x1484, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0371
        gbc.setState(0xb586, 0xd284, 0xcb10, 0xee36, 0xb2f4, 0x6d3e, 0x1, 0x0);
        gbc.writeMem(0x6d3e, { 0xc2 });
        gbc.writeMem(0xb586, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xd284, gbc.sp());
        EXPECT(0xb588, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb586));
        EXPECT(0x86, gbc.readMem(0xb587));
        // CB 86 0372
        gbc.setState(0x6fb4, 0x5aac, 0xe220, 0x135f, 0xd5ef, 0x47d8, 0x0, 0x0);
        gbc.writeMem(0x47d8, { 0x60 });
        gbc.writeMem(0x6fb4, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x5aac, gbc.sp());
        EXPECT(0x6fb6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0373
        gbc.setState(0xd76a, 0x44ff, 0xe3e0, 0xfa87, 0x8d82, 0xafc5, 0x1, 0x1);
        gbc.writeMem(0xafc5, { 0x9b });
        gbc.writeMem(0xd76a, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x44ff, gbc.sp());
        EXPECT(0xd76c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9a, gbc.readMem(0xafc5));
        EXPECT(0xcb, gbc.readMem(0xd76a));
        EXPECT(0x86, gbc.readMem(0xd76b));
        // CB 86 0374
        gbc.setState(0x9102, 0xa1b3, 0xba90, 0xf13, 0x663a, 0x4331, 0x0, 0x0);
        gbc.writeMem(0x4331, { 0xba });
        gbc.writeMem(0x9102, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xa1b3, gbc.sp());
        EXPECT(0x9104, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9102));
        EXPECT(0x86, gbc.readMem(0x9103));
        // CB 86 0375
        gbc.setState(0x924d, 0x99ec, 0x2140, 0x4c1d, 0x49f6, 0xf8fc, 0x1, 0x1);
        gbc.writeMem(0x924d, { 0xcb, 0x86 });
        gbc.writeMem(0xf8fc, { 0x1b });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x99ec, gbc.sp());
        EXPECT(0x924f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x924d));
        EXPECT(0x86, gbc.readMem(0x924e));
        EXPECT(0x1a, gbc.readMem(0xf8fc));
        // CB 86 0376
        gbc.setState(0x35e1, 0xefc7, 0xc630, 0xf781, 0xc078, 0xb8c3, 0x1, 0x1);
        gbc.writeMem(0x35e1, { 0xcb, 0x86 });
        gbc.writeMem(0xb8c3, { 0xc4 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xefc7, gbc.sp());
        EXPECT(0x35e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xb8c3));
        // CB 86 0377
        gbc.setState(0xa2a5, 0xcd28, 0xc5c0, 0xa00a, 0x4be8, 0x42c1, 0x0, 0x1);
        gbc.writeMem(0x42c1, { 0xa6 });
        gbc.writeMem(0xa2a5, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xcd28, gbc.sp());
        EXPECT(0xa2a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2a5));
        EXPECT(0x86, gbc.readMem(0xa2a6));
        // CB 86 0379
        gbc.setState(0x448a, 0xfade, 0xfe90, 0x57e8, 0x62cf, 0x96e, 0x0, 0x1);
        gbc.writeMem(0x96e, { 0xec });
        gbc.writeMem(0x448a, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xfade, gbc.sp());
        EXPECT(0x448c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 037B
        gbc.setState(0x110f, 0x32a9, 0x9270, 0xaae5, 0xa5f1, 0x5234, 0x1, 0x0);
        gbc.writeMem(0x110f, { 0xcb, 0x86 });
        gbc.writeMem(0x5234, { 0xd2 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x32a9, gbc.sp());
        EXPECT(0x1111, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 037C
        gbc.setState(0xee8a, 0x7448, 0xcc80, 0xd5e2, 0x3abe, 0x6d92, 0x1, 0x1);
        gbc.writeMem(0x6d92, { 0x66 });
        gbc.writeMem(0xee8a, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x7448, gbc.sp());
        EXPECT(0xee8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee8a));
        EXPECT(0x86, gbc.readMem(0xee8b));
        // CB 86 037F
        gbc.setState(0x342b, 0xfbf6, 0xcbb0, 0xe88d, 0x777, 0xcb9, 0x0, 0x1);
        gbc.writeMem(0xcb9, { 0x44 });
        gbc.writeMem(0x342b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xfbf6, gbc.sp());
        EXPECT(0x342d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0381
        gbc.setState(0x8e2, 0xe35, 0x6cf0, 0xa9, 0xd90a, 0x2e24, 0x1, 0x1);
        gbc.writeMem(0x8e2, { 0xcb, 0x86 });
        gbc.writeMem(0x2e24, { 0xd8 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xe35, gbc.sp());
        EXPECT(0x8e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0382
        gbc.setState(0x6320, 0xb8f, 0x6590, 0x7e96, 0xe4a2, 0xc586, 0x1, 0x1);
        gbc.writeMem(0x6320, { 0xcb, 0x86 });
        gbc.writeMem(0xc586, { 0xea });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xb8f, gbc.sp());
        EXPECT(0x6322, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc586));
        // CB 86 0383
        gbc.setState(0x4608, 0x2519, 0xebd0, 0x2b0e, 0x783b, 0x64cb, 0x0, 0x1);
        gbc.writeMem(0x4608, { 0xcb, 0x86 });
        gbc.writeMem(0x64cb, { 0x3a });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x2519, gbc.sp());
        EXPECT(0x460a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 0384
        gbc.setState(0x2496, 0x2bcb, 0x80, 0xf45b, 0x686e, 0x110, 0x0, 0x0);
        gbc.writeMem(0x110, { 0xf8 });
        gbc.writeMem(0x2496, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x2bcb, gbc.sp());
        EXPECT(0x2498, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0385
        gbc.setState(0xbaf7, 0x70e8, 0x2fd0, 0x953d, 0x1ee3, 0x8ea8, 0x0, 0x0);
        gbc.writeMem(0x8ea8, { 0x3e });
        gbc.writeMem(0xbaf7, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x70e8, gbc.sp());
        EXPECT(0xbaf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0x8ea8));
        EXPECT(0xcb, gbc.readMem(0xbaf7));
        EXPECT(0x86, gbc.readMem(0xbaf8));
        // CB 86 0386
        gbc.setState(0x2856, 0x4956, 0x28e0, 0x31c4, 0xe3cc, 0x4dbd, 0x0, 0x0);
        gbc.writeMem(0x2856, { 0xcb, 0x86 });
        gbc.writeMem(0x4dbd, { 0x80 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x4956, gbc.sp());
        EXPECT(0x2858, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0389
        gbc.setState(0xdf23, 0x914f, 0x6a50, 0x53ab, 0xe5da, 0xe25e, 0x1, 0x0);
        gbc.writeMem(0xdf23, { 0xcb, 0x86 });
        gbc.writeMem(0xe25e, { 0x70 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x914f, gbc.sp());
        EXPECT(0xdf25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf23));
        EXPECT(0x86, gbc.readMem(0xdf24));
        EXPECT(0x70, gbc.readMem(0xe25e));
        // CB 86 038A
        gbc.setState(0xa51, 0x977a, 0xa660, 0x6e89, 0x724a, 0x1b57, 0x0, 0x0);
        gbc.writeMem(0xa51, { 0xcb, 0x86 });
        gbc.writeMem(0x1b57, { 0x52 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x977a, gbc.sp());
        EXPECT(0xa53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 038B
        gbc.setState(0x8333, 0xfc05, 0xd970, 0xa9ea, 0x80b1, 0xbd93, 0x0, 0x1);
        gbc.writeMem(0x8333, { 0xcb, 0x86 });
        gbc.writeMem(0xbd93, { 0x22 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xfc05, gbc.sp());
        EXPECT(0x8335, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8333));
        EXPECT(0x86, gbc.readMem(0x8334));
        EXPECT(0x22, gbc.readMem(0xbd93));
        // CB 86 038C
        gbc.setState(0x17b1, 0xce25, 0xe860, 0x52bf, 0xf17c, 0xda4f, 0x1, 0x0);
        gbc.writeMem(0x17b1, { 0xcb, 0x86 });
        gbc.writeMem(0xda4f, { 0x4a });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xce25, gbc.sp());
        EXPECT(0x17b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4a, gbc.readMem(0xda4f));
        // CB 86 038D
        gbc.setState(0x869f, 0xec7c, 0x6a10, 0x34a9, 0x16db, 0xf47f, 0x0, 0x0);
        gbc.writeMem(0x869f, { 0xcb, 0x86 });
        gbc.writeMem(0xf47f, { 0xb3 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xec7c, gbc.sp());
        EXPECT(0x86a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x869f));
        EXPECT(0x86, gbc.readMem(0x86a0));
        EXPECT(0xb2, gbc.readMem(0xf47f));
        // CB 86 038F
        gbc.setState(0xc2db, 0xd018, 0xe910, 0x6766, 0x1b8, 0xfae0, 0x1, 0x1);
        gbc.writeMem(0xc2db, { 0xcb, 0x86 });
        gbc.writeMem(0xfae0, { 0x7f });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xd018, gbc.sp());
        EXPECT(0xc2dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2db));
        EXPECT(0x86, gbc.readMem(0xc2dc));
        EXPECT(0x7e, gbc.readMem(0xfae0));
        // CB 86 0390
        gbc.setState(0x28d, 0xed8a, 0xd20, 0x8b85, 0x1567, 0xbe2f, 0x1, 0x1);
        gbc.writeMem(0x28d, { 0xcb, 0x86 });
        gbc.writeMem(0xbe2f, { 0x75 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xed8a, gbc.sp());
        EXPECT(0x28f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xbe2f));
        // CB 86 0391
        gbc.setState(0x3ee5, 0xd72b, 0x11d0, 0xf311, 0xa129, 0xa05e, 0x0, 0x1);
        gbc.writeMem(0x3ee5, { 0xcb, 0x86 });
        gbc.writeMem(0xa05e, { 0xca });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xd72b, gbc.sp());
        EXPECT(0x3ee7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0xa05e));
        // CB 86 0396
        gbc.setState(0xb7c3, 0x8313, 0x46c0, 0x3745, 0x9cc3, 0xdd76, 0x0, 0x1);
        gbc.writeMem(0xb7c3, { 0xcb, 0x86 });
        gbc.writeMem(0xdd76, { 0x84 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x8313, gbc.sp());
        EXPECT(0xb7c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7c3));
        EXPECT(0x86, gbc.readMem(0xb7c4));
        EXPECT(0x84, gbc.readMem(0xdd76));
        // CB 86 0397
        gbc.setState(0x6ca7, 0xc83, 0xc4c0, 0xeb2d, 0x7425, 0xb6b, 0x0, 0x1);
        gbc.writeMem(0xb6b, { 0x7c });
        gbc.writeMem(0x6ca7, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xc83, gbc.sp());
        EXPECT(0x6ca9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 0398
        gbc.setState(0x5da0, 0x1f4a, 0xe3c0, 0xcf89, 0x5312, 0xfc33, 0x0, 0x1);
        gbc.writeMem(0x5da0, { 0xcb, 0x86 });
        gbc.writeMem(0xfc33, { 0xbc });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x1f4a, gbc.sp());
        EXPECT(0x5da2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbc, gbc.readMem(0xfc33));
        // CB 86 0399
        gbc.setState(0xccd1, 0x5124, 0x2b80, 0x9418, 0x39c7, 0x4e10, 0x0, 0x1);
        gbc.writeMem(0x4e10, { 0xee });
        gbc.writeMem(0xccd1, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x5124, gbc.sp());
        EXPECT(0xccd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccd1));
        EXPECT(0x86, gbc.readMem(0xccd2));
        // CB 86 039A
        gbc.setState(0x4bc5, 0xbdf9, 0x95e0, 0x492b, 0x3dc6, 0xd06c, 0x1, 0x0);
        gbc.writeMem(0x4bc5, { 0xcb, 0x86 });
        gbc.writeMem(0xd06c, { 0x84 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xbdf9, gbc.sp());
        EXPECT(0x4bc7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0xd06c));
        // CB 86 039C
        gbc.setState(0xdd9, 0x63f9, 0x920, 0x8579, 0x74ce, 0x31d9, 0x0, 0x0);
        gbc.writeMem(0xdd9, { 0xcb, 0x86 });
        gbc.writeMem(0x31d9, { 0x5e });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x63f9, gbc.sp());
        EXPECT(0xddb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 039D
        gbc.setState(0x7b41, 0xfed3, 0x9940, 0xd510, 0xde89, 0x4800, 0x1, 0x1);
        gbc.writeMem(0x4800, { 0x78 });
        gbc.writeMem(0x7b41, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xfed3, gbc.sp());
        EXPECT(0x7b43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 039F
        gbc.setState(0x376e, 0x9a55, 0x8250, 0xa0f8, 0xd915, 0xb6e6, 0x1, 0x1);
        gbc.writeMem(0x376e, { 0xcb, 0x86 });
        gbc.writeMem(0xb6e6, { 0xd3 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x9a55, gbc.sp());
        EXPECT(0x3770, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0xb6e6));
        // CB 86 03A0
        gbc.setState(0xb3ed, 0xe34a, 0x4300, 0x1185, 0x8b2d, 0x87d9, 0x0, 0x0);
        gbc.writeMem(0x87d9, { 0x60 });
        gbc.writeMem(0xb3ed, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xe34a, gbc.sp());
        EXPECT(0xb3ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0x87d9));
        EXPECT(0xcb, gbc.readMem(0xb3ed));
        EXPECT(0x86, gbc.readMem(0xb3ee));
        // CB 86 03A1
        gbc.setState(0x30b2, 0x5a3a, 0x5410, 0x4ab0, 0x1f32, 0x4970, 0x0, 0x0);
        gbc.writeMem(0x30b2, { 0xcb, 0x86 });
        gbc.writeMem(0x4970, { 0xa2 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x5a3a, gbc.sp());
        EXPECT(0x30b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 03A2
        gbc.setState(0x41f1, 0x746, 0xfb10, 0xda1d, 0x4ec8, 0xc350, 0x1, 0x1);
        gbc.writeMem(0x41f1, { 0xcb, 0x86 });
        gbc.writeMem(0xc350, { 0x89 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x746, gbc.sp());
        EXPECT(0x41f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x88, gbc.readMem(0xc350));
        // CB 86 03A6
        gbc.setState(0xb299, 0xcbba, 0x5e30, 0x6bb, 0x34f, 0x6b53, 0x0, 0x0);
        gbc.writeMem(0x6b53, { 0x62 });
        gbc.writeMem(0xb299, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xcbba, gbc.sp());
        EXPECT(0xb29b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb299));
        EXPECT(0x86, gbc.readMem(0xb29a));
        // CB 86 03A7
        gbc.setState(0x97dd, 0x213e, 0x7840, 0x19af, 0xa153, 0x881a, 0x1, 0x0);
        gbc.writeMem(0x881a, { 0xa9 });
        gbc.writeMem(0x97dd, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x213e, gbc.sp());
        EXPECT(0x97df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa8, gbc.readMem(0x881a));
        EXPECT(0xcb, gbc.readMem(0x97dd));
        EXPECT(0x86, gbc.readMem(0x97de));
        // CB 86 03AB
        gbc.setState(0xef42, 0x846b, 0x2390, 0xf376, 0xcc30, 0xd26, 0x1, 0x1);
        gbc.writeMem(0xd26, { 0x6e });
        gbc.writeMem(0xef42, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x846b, gbc.sp());
        EXPECT(0xef44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef42));
        EXPECT(0x86, gbc.readMem(0xef43));
        // CB 86 03AC
        gbc.setState(0x32af, 0xb3d, 0x5a70, 0x1140, 0x2635, 0xf1f3, 0x1, 0x1);
        gbc.writeMem(0x32af, { 0xcb, 0x86 });
        gbc.writeMem(0xf1f3, { 0x3e });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xb3d, gbc.sp());
        EXPECT(0x32b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0xf1f3));
        // CB 86 03AD
        gbc.setState(0x39b0, 0x4db4, 0x67b0, 0x72b6, 0xacfa, 0x1afd, 0x1, 0x0);
        gbc.writeMem(0x1afd, { 0xce });
        gbc.writeMem(0x39b0, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x4db4, gbc.sp());
        EXPECT(0x39b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 03AE
        gbc.setState(0x7c10, 0x65e2, 0xc060, 0x3846, 0x5bd8, 0xf84f, 0x0, 0x0);
        gbc.writeMem(0x7c10, { 0xcb, 0x86 });
        gbc.writeMem(0xf84f, { 0x78 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x65e2, gbc.sp());
        EXPECT(0x7c12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xf84f));
        // CB 86 03B0
        gbc.setState(0x177e, 0x2c05, 0x1830, 0x114f, 0x9490, 0xcabd, 0x1, 0x0);
        gbc.writeMem(0x177e, { 0xcb, 0x86 });
        gbc.writeMem(0xcabd, { 0x40 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x2c05, gbc.sp());
        EXPECT(0x1780, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x40, gbc.readMem(0xcabd));
        // CB 86 03B2
        gbc.setState(0x8ab9, 0x6852, 0x4a00, 0x79ac, 0xd6d7, 0xeb69, 0x1, 0x0);
        gbc.writeMem(0x8ab9, { 0xcb, 0x86 });
        gbc.writeMem(0xeb69, { 0x3d });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x6852, gbc.sp());
        EXPECT(0x8abb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ab9));
        EXPECT(0x86, gbc.readMem(0x8aba));
        EXPECT(0x3c, gbc.readMem(0xeb69));
        // CB 86 03B3
        gbc.setState(0x9d12, 0x1e75, 0x2d00, 0xa59d, 0x1bc0, 0xe156, 0x1, 0x1);
        gbc.writeMem(0x9d12, { 0xcb, 0x86 });
        gbc.writeMem(0xe156, { 0x98 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x1e75, gbc.sp());
        EXPECT(0x9d14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d12));
        EXPECT(0x86, gbc.readMem(0x9d13));
        EXPECT(0x98, gbc.readMem(0xe156));
        // CB 86 03B4
        gbc.setState(0xd068, 0x83c5, 0xfc70, 0xe42e, 0x1ff, 0xfe4e, 0x1, 0x0);
        gbc.writeMem(0xd068, { 0xcb, 0x86 });
        gbc.writeMem(0xfe4e, { 0xef });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x83c5, gbc.sp());
        EXPECT(0xd06a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd068));
        EXPECT(0x86, gbc.readMem(0xd069));
        EXPECT(0xee, gbc.readMem(0xfe4e));
        // CB 86 03B6
        gbc.setState(0x42e6, 0x4812, 0x6150, 0xc73b, 0xcbe4, 0x2d4a, 0x0, 0x1);
        gbc.writeMem(0x2d4a, { 0x7c });
        gbc.writeMem(0x42e6, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x4812, gbc.sp());
        EXPECT(0x42e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 03B8
        gbc.setState(0xd0ff, 0xfd51, 0x9da0, 0x7b82, 0xd704, 0xd73e, 0x0, 0x1);
        gbc.writeMem(0xd0ff, { 0xcb, 0x86 });
        gbc.writeMem(0xd73e, { 0x3e });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xfd51, gbc.sp());
        EXPECT(0xd101, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0ff));
        EXPECT(0x86, gbc.readMem(0xd100));
        EXPECT(0x3e, gbc.readMem(0xd73e));
        // CB 86 03B9
        gbc.setState(0x6590, 0x11e6, 0x5610, 0xc0ec, 0x7ef1, 0xd79d, 0x1, 0x1);
        gbc.writeMem(0x6590, { 0xcb, 0x86 });
        gbc.writeMem(0xd79d, { 0x79 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x11e6, gbc.sp());
        EXPECT(0x6592, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xd79d));
        // CB 86 03BA
        gbc.setState(0xcd94, 0xc605, 0xd760, 0x41c6, 0xf623, 0xbf8a, 0x0, 0x0);
        gbc.writeMem(0xbf8a, { 0x32 });
        gbc.writeMem(0xcd94, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xc605, gbc.sp());
        EXPECT(0xcd96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xbf8a));
        EXPECT(0xcb, gbc.readMem(0xcd94));
        EXPECT(0x86, gbc.readMem(0xcd95));
        // CB 86 03BB
        gbc.setState(0xa5d2, 0xdbe7, 0x8600, 0x5e3a, 0x7b72, 0x4c79, 0x1, 0x1);
        gbc.writeMem(0x4c79, { 0x82 });
        gbc.writeMem(0xa5d2, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xdbe7, gbc.sp());
        EXPECT(0xa5d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5d2));
        EXPECT(0x86, gbc.readMem(0xa5d3));
        // CB 86 03BC
        gbc.setState(0x6b2c, 0x6f0b, 0xadf0, 0x55df, 0xe2e9, 0xc07b, 0x0, 0x1);
        gbc.writeMem(0x6b2c, { 0xcb, 0x86 });
        gbc.writeMem(0xc07b, { 0xda });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x6f0b, gbc.sp());
        EXPECT(0x6b2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xda, gbc.readMem(0xc07b));
        // CB 86 03BD
        gbc.setState(0x53e1, 0x724c, 0xeb50, 0x541, 0x8274, 0xa05d, 0x0, 0x1);
        gbc.writeMem(0x53e1, { 0xcb, 0x86 });
        gbc.writeMem(0xa05d, { 0x8e });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x724c, gbc.sp());
        EXPECT(0x53e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8e, gbc.readMem(0xa05d));
        // CB 86 03BE
        gbc.setState(0xd9fe, 0x6a0, 0xd8c0, 0xf4ac, 0xed8c, 0xf8c8, 0x0, 0x1);
        gbc.writeMem(0xd9fe, { 0xcb, 0x86 });
        gbc.writeMem(0xf8c8, { 0xcb });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x6a0, gbc.sp());
        EXPECT(0xda00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9fe));
        EXPECT(0x86, gbc.readMem(0xd9ff));
        EXPECT(0xca, gbc.readMem(0xf8c8));
        // CB 86 03BF
        gbc.setState(0x496e, 0x62e7, 0xec90, 0xb55c, 0x1938, 0x3db4, 0x1, 0x0);
        gbc.writeMem(0x3db4, { 0xb6 });
        gbc.writeMem(0x496e, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x62e7, gbc.sp());
        EXPECT(0x4970, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 03C1
        gbc.setState(0x69f4, 0x58f0, 0xb350, 0x152b, 0x2897, 0x6bfe, 0x0, 0x1);
        gbc.writeMem(0x69f4, { 0xcb, 0x86 });
        gbc.writeMem(0x6bfe, { 0xa2 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x58f0, gbc.sp());
        EXPECT(0x69f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 86 03C5
        gbc.setState(0x4896, 0xef64, 0x5650, 0x8972, 0x991e, 0xa1f7, 0x0, 0x1);
        gbc.writeMem(0x4896, { 0xcb, 0x86 });
        gbc.writeMem(0xa1f7, { 0x9d });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xef64, gbc.sp());
        EXPECT(0x4898, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9c, gbc.readMem(0xa1f7));
        // CB 86 03C6
        gbc.setState(0x39d6, 0xd5bd, 0xdc20, 0x644d, 0x6cdc, 0xac07, 0x0, 0x0);
        gbc.writeMem(0x39d6, { 0xcb, 0x86 });
        gbc.writeMem(0xac07, { 0x94 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xd5bd, gbc.sp());
        EXPECT(0x39d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x94, gbc.readMem(0xac07));
        // CB 86 03C7
        gbc.setState(0xb494, 0xed9e, 0x4dd0, 0xe093, 0x9432, 0x9185, 0x1, 0x1);
        gbc.writeMem(0x9185, { 0xf7 });
        gbc.writeMem(0xb494, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xed9e, gbc.sp());
        EXPECT(0xb496, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf6, gbc.readMem(0x9185));
        EXPECT(0xcb, gbc.readMem(0xb494));
        EXPECT(0x86, gbc.readMem(0xb495));
        // CB 86 03C8
        gbc.setState(0x8794, 0x9c6d, 0x21a0, 0xcec2, 0x4a71, 0x9fc8, 0x1, 0x1);
        gbc.writeMem(0x8794, { 0xcb, 0x86 });
        gbc.writeMem(0x9fc8, { 0xc1 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x9c6d, gbc.sp());
        EXPECT(0x8796, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8794));
        EXPECT(0x86, gbc.readMem(0x8795));
        EXPECT(0xc0, gbc.readMem(0x9fc8));
        // CB 86 03C9
        gbc.setState(0xb430, 0x85b2, 0x6c40, 0x1c83, 0xea0a, 0xbf6f, 0x1, 0x0);
        gbc.writeMem(0xb430, { 0xcb, 0x86 });
        gbc.writeMem(0xbf6f, { 0x26 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x85b2, gbc.sp());
        EXPECT(0xb432, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb430));
        EXPECT(0x86, gbc.readMem(0xb431));
        EXPECT(0x26, gbc.readMem(0xbf6f));
        // CB 86 03CB
        gbc.setState(0x595a, 0x83f, 0x2e0, 0x223f, 0x68ec, 0xce29, 0x0, 0x0);
        gbc.writeMem(0x595a, { 0xcb, 0x86 });
        gbc.writeMem(0xce29, { 0xf8 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x83f, gbc.sp());
        EXPECT(0x595c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf8, gbc.readMem(0xce29));
        // CB 86 03CC
        gbc.setState(0x1dc9, 0xb2e2, 0xf00, 0x165a, 0x32f6, 0xf1e3, 0x1, 0x1);
        gbc.writeMem(0x1dc9, { 0xcb, 0x86 });
        gbc.writeMem(0xf1e3, { 0x48 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xb2e2, gbc.sp());
        EXPECT(0x1dcb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0xf1e3));
        // CB 86 03CD
        gbc.setState(0x4d1a, 0x4c51, 0xcb0, 0xd87a, 0xb7a, 0xf7b1, 0x0, 0x0);
        gbc.writeMem(0x4d1a, { 0xcb, 0x86 });
        gbc.writeMem(0xf7b1, { 0x17 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x4c51, gbc.sp());
        EXPECT(0x4d1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x16, gbc.readMem(0xf7b1));
        // CB 86 03CE
        gbc.setState(0x4096, 0xa8e3, 0xadc0, 0x4c91, 0xbce1, 0x58ff, 0x1, 0x1);
        gbc.writeMem(0x4096, { 0xcb, 0x86 });
        gbc.writeMem(0x58ff, { 0x7c });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xa8e3, gbc.sp());
        EXPECT(0x4098, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 03CF
        gbc.setState(0xaad4, 0xaaf9, 0x7a10, 0x66a7, 0x57c0, 0xf5ef, 0x0, 0x1);
        gbc.writeMem(0xaad4, { 0xcb, 0x86 });
        gbc.writeMem(0xf5ef, { 0x8b });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xaaf9, gbc.sp());
        EXPECT(0xaad6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaad4));
        EXPECT(0x86, gbc.readMem(0xaad5));
        EXPECT(0x8a, gbc.readMem(0xf5ef));
        // CB 86 03D0
        gbc.setState(0x11ab, 0x7b88, 0x1d10, 0x7810, 0xedc1, 0x99af, 0x1, 0x0);
        gbc.writeMem(0x11ab, { 0xcb, 0x86 });
        gbc.writeMem(0x99af, { 0x15 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x7b88, gbc.sp());
        EXPECT(0x11ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x14, gbc.readMem(0x99af));
        // CB 86 03D2
        gbc.setState(0x4fb0, 0x5107, 0xa4b0, 0xb66e, 0xce0, 0xc72b, 0x0, 0x0);
        gbc.writeMem(0x4fb0, { 0xcb, 0x86 });
        gbc.writeMem(0xc72b, { 0x8 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x5107, gbc.sp());
        EXPECT(0x4fb2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8, gbc.readMem(0xc72b));
        // CB 86 03D3
        gbc.setState(0x6711, 0x655, 0xfe50, 0x4eef, 0xf0af, 0xf6c3, 0x1, 0x1);
        gbc.writeMem(0x6711, { 0xcb, 0x86 });
        gbc.writeMem(0xf6c3, { 0x44 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x655, gbc.sp());
        EXPECT(0x6713, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x44, gbc.readMem(0xf6c3));
        // CB 86 03D4
        gbc.setState(0x502f, 0xfbf7, 0xbd30, 0xc642, 0x96a, 0xa084, 0x0, 0x1);
        gbc.writeMem(0x502f, { 0xcb, 0x86 });
        gbc.writeMem(0xa084, { 0x92 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xfbf7, gbc.sp());
        EXPECT(0x5031, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x92, gbc.readMem(0xa084));
        // CB 86 03D5
        gbc.setState(0x10ad, 0x3e33, 0x21b0, 0x6c3a, 0xbd58, 0xad58, 0x1, 0x0);
        gbc.writeMem(0x10ad, { 0xcb, 0x86 });
        gbc.writeMem(0xad58, { 0xa4 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x3e33, gbc.sp());
        EXPECT(0x10af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa4, gbc.readMem(0xad58));
        // CB 86 03D6
        gbc.setState(0x326, 0x616f, 0x5d80, 0x60a8, 0xba90, 0xd021, 0x1, 0x0);
        gbc.writeMem(0x326, { 0xcb, 0x86 });
        gbc.writeMem(0xd021, { 0x80 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x616f, gbc.sp());
        EXPECT(0x328, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x80, gbc.readMem(0xd021));
        // CB 86 03D7
        gbc.setState(0xd6fe, 0xe59a, 0xf010, 0x5227, 0x2121, 0xcea5, 0x1, 0x0);
        gbc.writeMem(0xcea5, { 0x12 });
        gbc.writeMem(0xd6fe, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xe59a, gbc.sp());
        EXPECT(0xd700, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0xcea5));
        EXPECT(0xcb, gbc.readMem(0xd6fe));
        EXPECT(0x86, gbc.readMem(0xd6ff));
        // CB 86 03D8
        gbc.setState(0x843b, 0xd3e, 0xa780, 0x54f6, 0xc179, 0x253e, 0x1, 0x1);
        gbc.writeMem(0x253e, { 0xa });
        gbc.writeMem(0x843b, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xd3e, gbc.sp());
        EXPECT(0x843d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x843b));
        EXPECT(0x86, gbc.readMem(0x843c));
        // CB 86 03D9
        gbc.setState(0xd94c, 0x4373, 0xcd00, 0x393d, 0x64c9, 0x6c6b, 0x0, 0x0);
        gbc.writeMem(0x6c6b, { 0xca });
        gbc.writeMem(0xd94c, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x4373, gbc.sp());
        EXPECT(0xd94e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd94c));
        EXPECT(0x86, gbc.readMem(0xd94d));
        // CB 86 03DA
        gbc.setState(0x86d, 0xae9f, 0xfe40, 0x55c0, 0x952d, 0x3382, 0x0, 0x1);
        gbc.writeMem(0x86d, { 0xcb, 0x86 });
        gbc.writeMem(0x3382, { 0x20 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xae9f, gbc.sp());
        EXPECT(0x86f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 86 03DB
        gbc.setState(0xcf2f, 0x96bf, 0xfad0, 0x5ee8, 0xf3fc, 0x90b3, 0x1, 0x1);
        gbc.writeMem(0x90b3, { 0x8e });
        gbc.writeMem(0xcf2f, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x96bf, gbc.sp());
        EXPECT(0xcf31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8e, gbc.readMem(0x90b3));
        EXPECT(0xcb, gbc.readMem(0xcf2f));
        EXPECT(0x86, gbc.readMem(0xcf30));
        // CB 86 03DD
        gbc.setState(0xe7fb, 0xa3dc, 0x44f0, 0xc172, 0xd95e, 0xb4ef, 0x1, 0x0);
        gbc.writeMem(0xb4ef, { 0x9b });
        gbc.writeMem(0xe7fb, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xa3dc, gbc.sp());
        EXPECT(0xe7fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9a, gbc.readMem(0xb4ef));
        EXPECT(0xcb, gbc.readMem(0xe7fb));
        EXPECT(0x86, gbc.readMem(0xe7fc));
        // CB 86 03E0
        gbc.setState(0xba84, 0x1a50, 0x86e0, 0x2349, 0xd72e, 0x847c, 0x0, 0x0);
        gbc.writeMem(0x847c, { 0x8c });
        gbc.writeMem(0xba84, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x1a50, gbc.sp());
        EXPECT(0xba86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0x847c));
        EXPECT(0xcb, gbc.readMem(0xba84));
        EXPECT(0x86, gbc.readMem(0xba85));
        // CB 86 03E1
        gbc.setState(0x23cd, 0xfe10, 0x8660, 0xc019, 0xedf3, 0xbfcd, 0x0, 0x1);
        gbc.writeMem(0x23cd, { 0xcb, 0x86 });
        gbc.writeMem(0xbfcd, { 0x99 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xfe10, gbc.sp());
        EXPECT(0x23cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0xbfcd));
        // CB 86 03E3
        gbc.setState(0x5ecd, 0xfca7, 0x9d30, 0x1063, 0x23c1, 0xaf71, 0x0, 0x1);
        gbc.writeMem(0x5ecd, { 0xcb, 0x86 });
        gbc.writeMem(0xaf71, { 0x4e });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xfca7, gbc.sp());
        EXPECT(0x5ecf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0xaf71));
        // CB 86 03E5
        gbc.setState(0x59ac, 0xa7c1, 0xabd0, 0x58bf, 0x817b, 0xc96d, 0x1, 0x0);
        gbc.writeMem(0x59ac, { 0xcb, 0x86 });
        gbc.writeMem(0xc96d, { 0x2e });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xa7c1, gbc.sp());
        EXPECT(0x59ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2e, gbc.readMem(0xc96d));
        // CB 86 03E6
        gbc.setState(0xb4a4, 0x983d, 0x19d0, 0x2773, 0x8d35, 0x9d9d, 0x1, 0x1);
        gbc.writeMem(0x9d9d, { 0x8f });
        gbc.writeMem(0xb4a4, { 0xcb, 0x86 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x983d, gbc.sp());
        EXPECT(0xb4a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8e, gbc.readMem(0x9d9d));
        EXPECT(0xcb, gbc.readMem(0xb4a4));
        EXPECT(0x86, gbc.readMem(0xb4a5));
        // CB 86 03E7
        gbc.setState(0x1e71, 0x9be, 0x53e0, 0xc1ea, 0x7cbb, 0x9e78, 0x1, 0x0);
        gbc.writeMem(0x1e71, { 0xcb, 0x86 });
        gbc.writeMem(0x9e78, { 0x84 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x9be, gbc.sp());
        EXPECT(0x1e73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0x9e78));
    }
