    TEST(gbcemu, opcode_cb_bc) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB BC 0000
        gbc.setState(0x6c4c, 0xf07b, 0x6b30, 0x3f23, 0x23d2, 0x332, 0x0, 0x1);
        gbc.writeMem(0x6c4c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xf07b, gbc.sp());
        EXPECT(0x6c4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0001
        gbc.setState(0xa2da, 0x1cc0, 0x7560, 0xf3bd, 0xbe3a, 0xd22a, 0x1, 0x1);
        gbc.writeMem(0xa2da, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x1cc0, gbc.sp());
        EXPECT(0xa2dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2da));
        EXPECT(0xbc, gbc.readMem(0xa2db));
        // CB BC 0002
        gbc.setState(0xcb8c, 0x6422, 0xf70, 0x604e, 0xb2df, 0xdedb, 0x1, 0x0);
        gbc.writeMem(0xcb8c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x6422, gbc.sp());
        EXPECT(0xcb8e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb8c));
        EXPECT(0xbc, gbc.readMem(0xcb8d));
        // CB BC 0003
        gbc.setState(0xea05, 0xda1d, 0xecb0, 0x2b0f, 0x15f8, 0xe098, 0x1, 0x1);
        gbc.writeMem(0xea05, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xda1d, gbc.sp());
        EXPECT(0xea07, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea05));
        EXPECT(0xbc, gbc.readMem(0xea06));
        // CB BC 0004
        gbc.setState(0xd91e, 0x59b7, 0xd520, 0x681c, 0x3057, 0x2f08, 0x1, 0x1);
        gbc.writeMem(0xd91e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x59b7, gbc.sp());
        EXPECT(0xd920, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd91e));
        EXPECT(0xbc, gbc.readMem(0xd91f));
        // CB BC 0005
        gbc.setState(0xb1e4, 0x3b6b, 0x2b30, 0x7858, 0x6306, 0xee10, 0x1, 0x1);
        gbc.writeMem(0xb1e4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x3b6b, gbc.sp());
        EXPECT(0xb1e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1e4));
        EXPECT(0xbc, gbc.readMem(0xb1e5));
        // CB BC 0006
        gbc.setState(0x1a92, 0xca58, 0xa840, 0x92b8, 0x9887, 0x4f82, 0x1, 0x0);
        gbc.writeMem(0x1a92, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xca58, gbc.sp());
        EXPECT(0x1a94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0007
        gbc.setState(0xc1d9, 0x2af3, 0x6290, 0xe7c0, 0x659d, 0xa87f, 0x0, 0x0);
        gbc.writeMem(0xc1d9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x2af3, gbc.sp());
        EXPECT(0xc1db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1d9));
        EXPECT(0xbc, gbc.readMem(0xc1da));
        // CB BC 0008
        gbc.setState(0x5c90, 0x3281, 0xe300, 0xae1b, 0x5169, 0xfe70, 0x0, 0x1);
        gbc.writeMem(0x5c90, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x3281, gbc.sp());
        EXPECT(0x5c92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0009
        gbc.setState(0x3cae, 0x70c6, 0x22f0, 0x2c8d, 0xc36c, 0x6880, 0x1, 0x1);
        gbc.writeMem(0x3cae, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x70c6, gbc.sp());
        EXPECT(0x3cb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 000A
        gbc.setState(0xc858, 0xf2ce, 0xcbe0, 0xedc0, 0x7ba2, 0x901, 0x0, 0x0);
        gbc.writeMem(0xc858, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xf2ce, gbc.sp());
        EXPECT(0xc85a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc858));
        EXPECT(0xbc, gbc.readMem(0xc859));
        // CB BC 000B
        gbc.setState(0xa39b, 0x83df, 0x9e10, 0xe114, 0x7e26, 0x3206, 0x0, 0x0);
        gbc.writeMem(0xa39b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x83df, gbc.sp());
        EXPECT(0xa39d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa39b));
        EXPECT(0xbc, gbc.readMem(0xa39c));
        // CB BC 000C
        gbc.setState(0x4387, 0x455d, 0x19a0, 0xb40c, 0xdce8, 0x762d, 0x1, 0x1);
        gbc.writeMem(0x4387, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x455d, gbc.sp());
        EXPECT(0x4389, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 000D
        gbc.setState(0x8a80, 0xfc00, 0x4e10, 0x79ec, 0x1437, 0x2342, 0x0, 0x1);
        gbc.writeMem(0x8a80, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xfc00, gbc.sp());
        EXPECT(0x8a82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a80));
        EXPECT(0xbc, gbc.readMem(0x8a81));
        // CB BC 000E
        gbc.setState(0xdf4f, 0xf32, 0xf930, 0xce6e, 0x7e31, 0xdc27, 0x0, 0x0);
        gbc.writeMem(0xdf4f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xf32, gbc.sp());
        EXPECT(0xdf51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf4f));
        EXPECT(0xbc, gbc.readMem(0xdf50));
        // CB BC 000F
        gbc.setState(0x3455, 0xfbbd, 0x77f0, 0x62bf, 0x98dd, 0x669c, 0x0, 0x1);
        gbc.writeMem(0x3455, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xfbbd, gbc.sp());
        EXPECT(0x3457, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0010
        gbc.setState(0x585d, 0xe6c5, 0x63f0, 0xf0b6, 0xdb07, 0x1692, 0x0, 0x1);
        gbc.writeMem(0x585d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xe6c5, gbc.sp());
        EXPECT(0x585f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0011
        gbc.setState(0x453a, 0x8568, 0x6c10, 0x6c80, 0x17f0, 0x5f91, 0x0, 0x0);
        gbc.writeMem(0x453a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x8568, gbc.sp());
        EXPECT(0x453c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0012
        gbc.setState(0x6b58, 0x6c72, 0xd660, 0x6e7, 0x15b9, 0x4081, 0x0, 0x0);
        gbc.writeMem(0x6b58, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x6c72, gbc.sp());
        EXPECT(0x6b5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0013
        gbc.setState(0xad4, 0x6ae9, 0xc240, 0x2732, 0x6405, 0x74f7, 0x0, 0x1);
        gbc.writeMem(0xad4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x6ae9, gbc.sp());
        EXPECT(0xad6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0014
        gbc.setState(0x94eb, 0xb267, 0xf0e0, 0x658, 0x2480, 0xfd81, 0x1, 0x1);
        gbc.writeMem(0x94eb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xb267, gbc.sp());
        EXPECT(0x94ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94eb));
        EXPECT(0xbc, gbc.readMem(0x94ec));
        // CB BC 0015
        gbc.setState(0x6e3, 0x3d6d, 0x77f0, 0xc15, 0x5ae8, 0xd009, 0x1, 0x1);
        gbc.writeMem(0x6e3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x3d6d, gbc.sp());
        EXPECT(0x6e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0017
        gbc.setState(0x56df, 0x84f0, 0xc0d0, 0x1d92, 0x69fd, 0x4a4b, 0x1, 0x0);
        gbc.writeMem(0x56df, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x84f0, gbc.sp());
        EXPECT(0x56e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0018
        gbc.setState(0x19ac, 0x9238, 0x4870, 0xd470, 0x42e7, 0xa215, 0x1, 0x0);
        gbc.writeMem(0x19ac, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x9238, gbc.sp());
        EXPECT(0x19ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0019
        gbc.setState(0xea4e, 0xf5b3, 0x59f0, 0x8874, 0x937, 0x9e4c, 0x0, 0x1);
        gbc.writeMem(0xea4e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xf5b3, gbc.sp());
        EXPECT(0xea50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea4e));
        EXPECT(0xbc, gbc.readMem(0xea4f));
        // CB BC 001A
        gbc.setState(0xa23d, 0x7bfa, 0x53c0, 0x7e26, 0x7255, 0x6f51, 0x1, 0x0);
        gbc.writeMem(0xa23d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x7bfa, gbc.sp());
        EXPECT(0xa23f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa23d));
        EXPECT(0xbc, gbc.readMem(0xa23e));
        // CB BC 001B
        gbc.setState(0x8636, 0xa165, 0xd550, 0x7fdd, 0xfd33, 0x5e05, 0x0, 0x0);
        gbc.writeMem(0x8636, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xa165, gbc.sp());
        EXPECT(0x8638, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8636));
        EXPECT(0xbc, gbc.readMem(0x8637));
        // CB BC 001C
        gbc.setState(0xdfc9, 0x11cd, 0x60d0, 0x381d, 0x5e5d, 0xcff4, 0x1, 0x1);
        gbc.writeMem(0xdfc9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x11cd, gbc.sp());
        EXPECT(0xdfcb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfc9));
        EXPECT(0xbc, gbc.readMem(0xdfca));
        // CB BC 001D
        gbc.setState(0xd22a, 0xc2d5, 0x9be0, 0x8978, 0x8c4b, 0xc846, 0x1, 0x1);
        gbc.writeMem(0xd22a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xc2d5, gbc.sp());
        EXPECT(0xd22c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd22a));
        EXPECT(0xbc, gbc.readMem(0xd22b));
        // CB BC 001F
        gbc.setState(0x74fe, 0x4926, 0x23e0, 0x815d, 0xcee8, 0x8691, 0x1, 0x1);
        gbc.writeMem(0x74fe, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x4926, gbc.sp());
        EXPECT(0x7500, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0020
        gbc.setState(0xe0a, 0xabbb, 0x4430, 0x64db, 0xe15a, 0xe5b, 0x1, 0x1);
        gbc.writeMem(0xe0a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xabbb, gbc.sp());
        EXPECT(0xe0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0021
        gbc.setState(0x5140, 0x8fe3, 0xc050, 0xe5f0, 0x9d39, 0x9f6a, 0x1, 0x1);
        gbc.writeMem(0x5140, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x8fe3, gbc.sp());
        EXPECT(0x5142, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0022
        gbc.setState(0x5cec, 0x99, 0x2a20, 0x45b1, 0x916f, 0x75d, 0x0, 0x0);
        gbc.writeMem(0x5cec, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x99, gbc.sp());
        EXPECT(0x5cee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0024
        gbc.setState(0x9ecf, 0x21, 0x7370, 0xf325, 0x1a1e, 0x50ab, 0x0, 0x0);
        gbc.writeMem(0x9ecf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x21, gbc.sp());
        EXPECT(0x9ed1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ecf));
        EXPECT(0xbc, gbc.readMem(0x9ed0));
        // CB BC 0025
        gbc.setState(0xdabf, 0xfba0, 0x3a60, 0x5a60, 0x3a8e, 0xfa2e, 0x0, 0x1);
        gbc.writeMem(0xdabf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xfba0, gbc.sp());
        EXPECT(0xdac1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdabf));
        EXPECT(0xbc, gbc.readMem(0xdac0));
        // CB BC 0026
        gbc.setState(0x64b, 0x42cb, 0xfaf0, 0xe004, 0x82ff, 0x2b2a, 0x1, 0x0);
        gbc.writeMem(0x64b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x42cb, gbc.sp());
        EXPECT(0x64d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0027
        gbc.setState(0x5ae6, 0xb9fe, 0xa150, 0xfcb5, 0x10e1, 0x8a1b, 0x1, 0x1);
        gbc.writeMem(0x5ae6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xb9fe, gbc.sp());
        EXPECT(0x5ae8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0028
        gbc.setState(0xd352, 0x54ee, 0x7d0, 0xc3d3, 0x1aab, 0xa57c, 0x0, 0x0);
        gbc.writeMem(0xd352, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x54ee, gbc.sp());
        EXPECT(0xd354, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd352));
        EXPECT(0xbc, gbc.readMem(0xd353));
        // CB BC 0029
        gbc.setState(0x9812, 0x29e4, 0xee0, 0xc2e1, 0x3f77, 0xddc0, 0x1, 0x1);
        gbc.writeMem(0x9812, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x29e4, gbc.sp());
        EXPECT(0x9814, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9812));
        EXPECT(0xbc, gbc.readMem(0x9813));
        // CB BC 002A
        gbc.setState(0x9b65, 0xc16f, 0xbeb0, 0x8d73, 0xd9b9, 0x14ed, 0x1, 0x1);
        gbc.writeMem(0x9b65, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xc16f, gbc.sp());
        EXPECT(0x9b67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b65));
        EXPECT(0xbc, gbc.readMem(0x9b66));
        // CB BC 002B
        gbc.setState(0xa38a, 0x887f, 0xb6b0, 0x2b11, 0x6b08, 0x250e, 0x0, 0x0);
        gbc.writeMem(0xa38a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x887f, gbc.sp());
        EXPECT(0xa38c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa38a));
        EXPECT(0xbc, gbc.readMem(0xa38b));
        // CB BC 002C
        gbc.setState(0xada9, 0xb94, 0xcfb0, 0x9b4f, 0x6b1d, 0xd1cc, 0x1, 0x0);
        gbc.writeMem(0xada9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xb94, gbc.sp());
        EXPECT(0xadab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xada9));
        EXPECT(0xbc, gbc.readMem(0xadaa));
        // CB BC 002D
        gbc.setState(0xd70, 0x8a77, 0x3b10, 0xd3d6, 0xd83, 0xdcbe, 0x0, 0x0);
        gbc.writeMem(0xd70, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x8a77, gbc.sp());
        EXPECT(0xd72, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 002E
        gbc.setState(0xb65, 0x22de, 0xf3b0, 0x7c96, 0x8883, 0x3da6, 0x1, 0x1);
        gbc.writeMem(0xb65, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x22de, gbc.sp());
        EXPECT(0xb67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 002F
        gbc.setState(0x9277, 0x8f02, 0x3070, 0xd9b1, 0x30f8, 0x9afb, 0x0, 0x0);
        gbc.writeMem(0x9277, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x8f02, gbc.sp());
        EXPECT(0x9279, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9277));
        EXPECT(0xbc, gbc.readMem(0x9278));
        // CB BC 0030
        gbc.setState(0xe6fb, 0x4e0d, 0x93c0, 0xff1c, 0xd775, 0xb079, 0x1, 0x0);
        gbc.writeMem(0xe6fb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x4e0d, gbc.sp());
        EXPECT(0xe6fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6fb));
        EXPECT(0xbc, gbc.readMem(0xe6fc));
        // CB BC 0031
        gbc.setState(0xe84e, 0xd5b, 0x9250, 0xb90, 0xda1e, 0xe8b6, 0x0, 0x0);
        gbc.writeMem(0xe84e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xd5b, gbc.sp());
        EXPECT(0xe850, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe84e));
        EXPECT(0xbc, gbc.readMem(0xe84f));
        // CB BC 0032
        gbc.setState(0x3fd8, 0x67a1, 0xd6b0, 0xf85e, 0x1a42, 0x771a, 0x1, 0x0);
        gbc.writeMem(0x3fd8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x67a1, gbc.sp());
        EXPECT(0x3fda, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0033
        gbc.setState(0x5bba, 0x7473, 0xc420, 0xe6ed, 0xcef, 0xe7a6, 0x1, 0x0);
        gbc.writeMem(0x5bba, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x7473, gbc.sp());
        EXPECT(0x5bbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0034
        gbc.setState(0x6416, 0x59fe, 0x22c0, 0xd013, 0xc15, 0x4abd, 0x0, 0x1);
        gbc.writeMem(0x6416, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x59fe, gbc.sp());
        EXPECT(0x6418, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0035
        gbc.setState(0x184a, 0xe966, 0x38c0, 0x600e, 0x6fda, 0xda98, 0x1, 0x0);
        gbc.writeMem(0x184a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xe966, gbc.sp());
        EXPECT(0x184c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0036
        gbc.setState(0x9118, 0x6dc1, 0x23d0, 0x9a69, 0xbaed, 0x42d9, 0x0, 0x0);
        gbc.writeMem(0x9118, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x6dc1, gbc.sp());
        EXPECT(0x911a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9118));
        EXPECT(0xbc, gbc.readMem(0x9119));
        // CB BC 0037
        gbc.setState(0x3fe0, 0xe3d2, 0x56d0, 0xc8f3, 0xe935, 0x956b, 0x1, 0x1);
        gbc.writeMem(0x3fe0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xe3d2, gbc.sp());
        EXPECT(0x3fe2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0038
        gbc.setState(0x4d2, 0x91d3, 0x78a0, 0x82a8, 0xf757, 0x957a, 0x0, 0x0);
        gbc.writeMem(0x4d2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x91d3, gbc.sp());
        EXPECT(0x4d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0039
        gbc.setState(0x7ef, 0x2f51, 0x17d0, 0x63b4, 0x99ad, 0x8ddc, 0x0, 0x1);
        gbc.writeMem(0x7ef, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x2f51, gbc.sp());
        EXPECT(0x7f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 003A
        gbc.setState(0xd6ee, 0x735d, 0xc670, 0xcdb, 0xfb, 0x838e, 0x0, 0x0);
        gbc.writeMem(0xd6ee, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x735d, gbc.sp());
        EXPECT(0xd6f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6ee));
        EXPECT(0xbc, gbc.readMem(0xd6ef));
        // CB BC 003B
        gbc.setState(0xbed7, 0xa27b, 0x9b50, 0x2766, 0x2cd7, 0x7220, 0x1, 0x0);
        gbc.writeMem(0xbed7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xa27b, gbc.sp());
        EXPECT(0xbed9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbed7));
        EXPECT(0xbc, gbc.readMem(0xbed8));
        // CB BC 003C
        gbc.setState(0xeda4, 0x5e45, 0xca60, 0x4a5c, 0x2d2e, 0x12b0, 0x1, 0x0);
        gbc.writeMem(0xeda4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x5e45, gbc.sp());
        EXPECT(0xeda6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeda4));
        EXPECT(0xbc, gbc.readMem(0xeda5));
        // CB BC 003D
        gbc.setState(0x5abd, 0x733f, 0x7880, 0x6897, 0x63, 0xaff0, 0x1, 0x1);
        gbc.writeMem(0x5abd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x733f, gbc.sp());
        EXPECT(0x5abf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 003E
        gbc.setState(0x165f, 0x86bb, 0x4bc0, 0x9e7b, 0x3533, 0x23dd, 0x0, 0x0);
        gbc.writeMem(0x165f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x86bb, gbc.sp());
        EXPECT(0x1661, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 003F
        gbc.setState(0xcf96, 0x9f55, 0x4060, 0x74f4, 0xdcd1, 0xc81b, 0x0, 0x0);
        gbc.writeMem(0xcf96, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x9f55, gbc.sp());
        EXPECT(0xcf98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf96));
        EXPECT(0xbc, gbc.readMem(0xcf97));
        // CB BC 0040
        gbc.setState(0xd823, 0xc185, 0x6860, 0x733d, 0x54a2, 0x2bd1, 0x0, 0x1);
        gbc.writeMem(0xd823, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xc185, gbc.sp());
        EXPECT(0xd825, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd823));
        EXPECT(0xbc, gbc.readMem(0xd824));
        // CB BC 0041
        gbc.setState(0x7185, 0x9573, 0x67b0, 0x268d, 0xd793, 0x689f, 0x0, 0x0);
        gbc.writeMem(0x7185, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x9573, gbc.sp());
        EXPECT(0x7187, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0042
        gbc.setState(0x39e9, 0x894c, 0xf140, 0x1a54, 0x9be8, 0xce79, 0x0, 0x1);
        gbc.writeMem(0x39e9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x894c, gbc.sp());
        EXPECT(0x39eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0043
        gbc.setState(0x8d81, 0x614f, 0x4840, 0xda62, 0x95c0, 0xe957, 0x0, 0x0);
        gbc.writeMem(0x8d81, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x614f, gbc.sp());
        EXPECT(0x8d83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d81));
        EXPECT(0xbc, gbc.readMem(0x8d82));
        // CB BC 0044
        gbc.setState(0xcc9b, 0xf1b9, 0xbbe0, 0xfc2e, 0x7a99, 0xa2a, 0x1, 0x1);
        gbc.writeMem(0xcc9b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xf1b9, gbc.sp());
        EXPECT(0xcc9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc9b));
        EXPECT(0xbc, gbc.readMem(0xcc9c));
        // CB BC 0045
        gbc.setState(0xaba2, 0xaa40, 0x6510, 0x566, 0x7727, 0x1116, 0x1, 0x0);
        gbc.writeMem(0xaba2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xaa40, gbc.sp());
        EXPECT(0xaba4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaba2));
        EXPECT(0xbc, gbc.readMem(0xaba3));
        // CB BC 0046
        gbc.setState(0x4ead, 0x667f, 0xa20, 0x17da, 0x7aaa, 0x31df, 0x0, 0x1);
        gbc.writeMem(0x4ead, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x667f, gbc.sp());
        EXPECT(0x4eaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0047
        gbc.setState(0xd594, 0x90a2, 0xf3f0, 0x3d30, 0x6ec2, 0xd154, 0x0, 0x0);
        gbc.writeMem(0xd594, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x90a2, gbc.sp());
        EXPECT(0xd596, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd594));
        EXPECT(0xbc, gbc.readMem(0xd595));
        // CB BC 0048
        gbc.setState(0x9196, 0xbea4, 0x9c80, 0xea07, 0xecf9, 0xa35b, 0x0, 0x1);
        gbc.writeMem(0x9196, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xbea4, gbc.sp());
        EXPECT(0x9198, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9196));
        EXPECT(0xbc, gbc.readMem(0x9197));
        // CB BC 0049
        gbc.setState(0xa907, 0x3942, 0xb370, 0x8d69, 0x9afa, 0x63f6, 0x0, 0x1);
        gbc.writeMem(0xa907, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x3942, gbc.sp());
        EXPECT(0xa909, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa907));
        EXPECT(0xbc, gbc.readMem(0xa908));
        // CB BC 004B
        gbc.setState(0x4ebf, 0x2965, 0x1e50, 0xe69d, 0x68f1, 0x240e, 0x1, 0x0);
        gbc.writeMem(0x4ebf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x2965, gbc.sp());
        EXPECT(0x4ec1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 004C
        gbc.setState(0x75df, 0xa780, 0xdfd0, 0xc91e, 0x22b0, 0x1e5, 0x0, 0x0);
        gbc.writeMem(0x75df, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xa780, gbc.sp());
        EXPECT(0x75e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 004D
        gbc.setState(0x2694, 0x45ac, 0x2780, 0x4058, 0x8486, 0x715e, 0x1, 0x1);
        gbc.writeMem(0x2694, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x45ac, gbc.sp());
        EXPECT(0x2696, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 004E
        gbc.setState(0xe073, 0x2705, 0x5db0, 0x66c8, 0x7951, 0x833b, 0x1, 0x0);
        gbc.writeMem(0xe073, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x2705, gbc.sp());
        EXPECT(0xe075, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe073));
        EXPECT(0xbc, gbc.readMem(0xe074));
        // CB BC 004F
        gbc.setState(0x540f, 0x24a2, 0x77f0, 0x2aea, 0x3240, 0xc94c, 0x1, 0x0);
        gbc.writeMem(0x540f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x24a2, gbc.sp());
        EXPECT(0x5411, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0050
        gbc.setState(0x60e0, 0xf934, 0x5aa0, 0x25c4, 0x79f6, 0x3127, 0x1, 0x0);
        gbc.writeMem(0x60e0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xf934, gbc.sp());
        EXPECT(0x60e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0051
        gbc.setState(0xae99, 0xa76f, 0xbf70, 0x892a, 0x1c35, 0x1df4, 0x0, 0x0);
        gbc.writeMem(0xae99, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xa76f, gbc.sp());
        EXPECT(0xae9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae99));
        EXPECT(0xbc, gbc.readMem(0xae9a));
        // CB BC 0052
        gbc.setState(0x7aa7, 0xbf4d, 0x7c70, 0xeee, 0xa91e, 0xa4e5, 0x0, 0x1);
        gbc.writeMem(0x7aa7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xbf4d, gbc.sp());
        EXPECT(0x7aa9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0053
        gbc.setState(0xc2bc, 0xe294, 0x8b70, 0x5a92, 0x256a, 0x7d85, 0x0, 0x1);
        gbc.writeMem(0xc2bc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xe294, gbc.sp());
        EXPECT(0xc2be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2bc));
        EXPECT(0xbc, gbc.readMem(0xc2bd));
        // CB BC 0054
        gbc.setState(0x1a4b, 0xafb2, 0x8670, 0x42ff, 0x4750, 0x8bba, 0x0, 0x1);
        gbc.writeMem(0x1a4b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xafb2, gbc.sp());
        EXPECT(0x1a4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0055
        gbc.setState(0xe1b0, 0x7b95, 0x14d0, 0xcbec, 0xe79f, 0x1621, 0x0, 0x0);
        gbc.writeMem(0xe1b0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x7b95, gbc.sp());
        EXPECT(0xe1b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1b0));
        EXPECT(0xbc, gbc.readMem(0xe1b1));
        // CB BC 0056
        gbc.setState(0x2a3, 0xd65a, 0x8f60, 0xcb88, 0xe610, 0xa5f4, 0x0, 0x1);
        gbc.writeMem(0x2a3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xd65a, gbc.sp());
        EXPECT(0x2a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0057
        gbc.setState(0xa560, 0x34bd, 0xfba0, 0x2560, 0xae15, 0x8291, 0x1, 0x1);
        gbc.writeMem(0xa560, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x34bd, gbc.sp());
        EXPECT(0xa562, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa560));
        EXPECT(0xbc, gbc.readMem(0xa561));
        // CB BC 0058
        gbc.setState(0xd23, 0x1115, 0xc90, 0x1c49, 0x772f, 0xa1f8, 0x0, 0x0);
        gbc.writeMem(0xd23, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x1115, gbc.sp());
        EXPECT(0xd25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0059
        gbc.setState(0x411, 0x990a, 0xa7f0, 0xe037, 0xdabc, 0xfd1b, 0x1, 0x1);
        gbc.writeMem(0x411, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x990a, gbc.sp());
        EXPECT(0x413, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 005A
        gbc.setState(0xcf9, 0x3769, 0xd970, 0xd54e, 0x7978, 0xa76, 0x1, 0x1);
        gbc.writeMem(0xcf9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x3769, gbc.sp());
        EXPECT(0xcfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 005B
        gbc.setState(0xe2c6, 0x719, 0xc310, 0x2d15, 0x41c5, 0x788d, 0x1, 0x1);
        gbc.writeMem(0xe2c6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x719, gbc.sp());
        EXPECT(0xe2c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2c6));
        EXPECT(0xbc, gbc.readMem(0xe2c7));
        // CB BC 005E
        gbc.setState(0x606e, 0x7ef9, 0xedf0, 0x3143, 0x8654, 0xb7d5, 0x1, 0x1);
        gbc.writeMem(0x606e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x7ef9, gbc.sp());
        EXPECT(0x6070, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 005F
        gbc.setState(0x993a, 0xfe55, 0x58b0, 0xeab6, 0x10a8, 0x7da9, 0x1, 0x0);
        gbc.writeMem(0x993a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xfe55, gbc.sp());
        EXPECT(0x993c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x993a));
        EXPECT(0xbc, gbc.readMem(0x993b));
        // CB BC 0060
        gbc.setState(0x9c9d, 0x97f4, 0x23b0, 0xd90e, 0x9f01, 0x4b09, 0x0, 0x1);
        gbc.writeMem(0x9c9d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x97f4, gbc.sp());
        EXPECT(0x9c9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c9d));
        EXPECT(0xbc, gbc.readMem(0x9c9e));
        // CB BC 0062
        gbc.setState(0xe6bd, 0x15a4, 0x1c50, 0xea7c, 0x91a9, 0xcb44, 0x1, 0x0);
        gbc.writeMem(0xe6bd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x15a4, gbc.sp());
        EXPECT(0xe6bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6bd));
        EXPECT(0xbc, gbc.readMem(0xe6be));
        // CB BC 0063
        gbc.setState(0x2f11, 0x9fa1, 0xcb70, 0x7a14, 0x2883, 0x75d3, 0x1, 0x0);
        gbc.writeMem(0x2f11, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x9fa1, gbc.sp());
        EXPECT(0x2f13, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0064
        gbc.setState(0x2dd6, 0xd57c, 0xb8b0, 0x9d16, 0x6be, 0x283f, 0x1, 0x1);
        gbc.writeMem(0x2dd6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xd57c, gbc.sp());
        EXPECT(0x2dd8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0065
        gbc.setState(0x91c0, 0xfab, 0xd2b0, 0xa69c, 0xea36, 0x7450, 0x0, 0x0);
        gbc.writeMem(0x91c0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xfab, gbc.sp());
        EXPECT(0x91c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91c0));
        EXPECT(0xbc, gbc.readMem(0x91c1));
        // CB BC 0066
        gbc.setState(0xda9b, 0x5d57, 0xae30, 0xf45b, 0x9cb6, 0xf679, 0x1, 0x0);
        gbc.writeMem(0xda9b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x5d57, gbc.sp());
        EXPECT(0xda9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda9b));
        EXPECT(0xbc, gbc.readMem(0xda9c));
        // CB BC 0067
        gbc.setState(0x79ad, 0x9ea3, 0x9dc0, 0xd94, 0xbb8, 0xb594, 0x1, 0x1);
        gbc.writeMem(0x79ad, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x9ea3, gbc.sp());
        EXPECT(0x79af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0068
        gbc.setState(0xa84, 0x9bec, 0x3620, 0xfb90, 0x7de, 0x80f7, 0x0, 0x0);
        gbc.writeMem(0xa84, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x9bec, gbc.sp());
        EXPECT(0xa86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0069
        gbc.setState(0xe897, 0x74d3, 0x1810, 0x355c, 0x5a6, 0xc8a6, 0x0, 0x1);
        gbc.writeMem(0xe897, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x74d3, gbc.sp());
        EXPECT(0xe899, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe897));
        EXPECT(0xbc, gbc.readMem(0xe898));
        // CB BC 006A
        gbc.setState(0xc0e3, 0xe2f7, 0x17b0, 0x251a, 0x1256, 0x9953, 0x1, 0x1);
        gbc.writeMem(0xc0e3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xe2f7, gbc.sp());
        EXPECT(0xc0e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0e3));
        EXPECT(0xbc, gbc.readMem(0xc0e4));
        // CB BC 006B
        gbc.setState(0x629e, 0x1882, 0xf230, 0xd6c9, 0x7c71, 0x82f0, 0x1, 0x1);
        gbc.writeMem(0x629e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x1882, gbc.sp());
        EXPECT(0x62a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 006C
        gbc.setState(0x2c8f, 0x1e6f, 0xda70, 0x9723, 0xf4bc, 0x82be, 0x0, 0x1);
        gbc.writeMem(0x2c8f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x1e6f, gbc.sp());
        EXPECT(0x2c91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 006D
        gbc.setState(0x6c79, 0xe7e9, 0x2a70, 0x4e88, 0x179a, 0x2ff6, 0x1, 0x0);
        gbc.writeMem(0x6c79, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xe7e9, gbc.sp());
        EXPECT(0x6c7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 006E
        gbc.setState(0x153, 0xdedc, 0x95f0, 0x7c81, 0xf137, 0x2647, 0x1, 0x0);
        gbc.writeMem(0x153, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xdedc, gbc.sp());
        EXPECT(0x155, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 006F
        gbc.setState(0x285, 0xcd4b, 0x4100, 0x95b4, 0x4439, 0x6603, 0x0, 0x0);
        gbc.writeMem(0x285, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xcd4b, gbc.sp());
        EXPECT(0x287, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0070
        gbc.setState(0x74f3, 0xce82, 0xd1b0, 0x7ef, 0x19b5, 0x8a18, 0x0, 0x1);
        gbc.writeMem(0x74f3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xce82, gbc.sp());
        EXPECT(0x74f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0071
        gbc.setState(0x8e98, 0x2c4, 0xd2b0, 0xb491, 0xbd73, 0x86d1, 0x1, 0x0);
        gbc.writeMem(0x8e98, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x2c4, gbc.sp());
        EXPECT(0x8e9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e98));
        EXPECT(0xbc, gbc.readMem(0x8e99));
        // CB BC 0072
        gbc.setState(0xa07a, 0x2be9, 0x55d0, 0x9f29, 0x5c68, 0x3f25, 0x1, 0x1);
        gbc.writeMem(0xa07a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x2be9, gbc.sp());
        EXPECT(0xa07c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa07a));
        EXPECT(0xbc, gbc.readMem(0xa07b));
        // CB BC 0073
        gbc.setState(0xac2, 0xcd40, 0xb80, 0x3262, 0xcfca, 0xc7f3, 0x0, 0x0);
        gbc.writeMem(0xac2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xcd40, gbc.sp());
        EXPECT(0xac4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0074
        gbc.setState(0xb1d, 0x40db, 0xc260, 0xde24, 0xbbe8, 0x7de7, 0x1, 0x1);
        gbc.writeMem(0xb1d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x40db, gbc.sp());
        EXPECT(0xb1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0075
        gbc.setState(0x8e0c, 0xda5d, 0xd870, 0x9eae, 0xed40, 0xa6b1, 0x1, 0x1);
        gbc.writeMem(0x8e0c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xda5d, gbc.sp());
        EXPECT(0x8e0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e0c));
        EXPECT(0xbc, gbc.readMem(0x8e0d));
        // CB BC 0076
        gbc.setState(0x4f86, 0xdeb9, 0x4a20, 0x32c7, 0x9619, 0xd3b7, 0x1, 0x1);
        gbc.writeMem(0x4f86, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xdeb9, gbc.sp());
        EXPECT(0x4f88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0077
        gbc.setState(0xe0ba, 0x7138, 0x3480, 0x7596, 0x4c86, 0x2d9b, 0x1, 0x0);
        gbc.writeMem(0xe0ba, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x7138, gbc.sp());
        EXPECT(0xe0bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0ba));
        EXPECT(0xbc, gbc.readMem(0xe0bb));
        // CB BC 0078
        gbc.setState(0x48f9, 0xb41, 0xe260, 0x8b23, 0x3b1, 0xa2ab, 0x1, 0x1);
        gbc.writeMem(0x48f9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xb41, gbc.sp());
        EXPECT(0x48fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0079
        gbc.setState(0x5e84, 0xbdc7, 0xedb0, 0x16d2, 0xb1bc, 0xc949, 0x0, 0x1);
        gbc.writeMem(0x5e84, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xbdc7, gbc.sp());
        EXPECT(0x5e86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 007A
        gbc.setState(0xe5d8, 0xf43a, 0x9160, 0x89ad, 0x7af6, 0x40ef, 0x0, 0x1);
        gbc.writeMem(0xe5d8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xf43a, gbc.sp());
        EXPECT(0xe5da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5d8));
        EXPECT(0xbc, gbc.readMem(0xe5d9));
        // CB BC 007B
        gbc.setState(0xe748, 0xacaa, 0x5140, 0x89c, 0xc2c8, 0x700d, 0x1, 0x1);
        gbc.writeMem(0xe748, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xacaa, gbc.sp());
        EXPECT(0xe74a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe748));
        EXPECT(0xbc, gbc.readMem(0xe749));
        // CB BC 007C
        gbc.setState(0x9f19, 0xaabf, 0x5e0, 0x1d8b, 0x683, 0x9c73, 0x0, 0x0);
        gbc.writeMem(0x9f19, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xaabf, gbc.sp());
        EXPECT(0x9f1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f19));
        EXPECT(0xbc, gbc.readMem(0x9f1a));
        // CB BC 007D
        gbc.setState(0xed49, 0x4646, 0x5210, 0x4b1d, 0x398f, 0x271d, 0x1, 0x0);
        gbc.writeMem(0xed49, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x4646, gbc.sp());
        EXPECT(0xed4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed49));
        EXPECT(0xbc, gbc.readMem(0xed4a));
        // CB BC 007E
        gbc.setState(0xb1b6, 0x7352, 0x4580, 0xa002, 0xf522, 0xa1ce, 0x0, 0x0);
        gbc.writeMem(0xb1b6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x7352, gbc.sp());
        EXPECT(0xb1b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1b6));
        EXPECT(0xbc, gbc.readMem(0xb1b7));
        // CB BC 007F
        gbc.setState(0x6668, 0x7e2d, 0x110, 0x4613, 0xafea, 0xa4ac, 0x0, 0x1);
        gbc.writeMem(0x6668, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x7e2d, gbc.sp());
        EXPECT(0x666a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0080
        gbc.setState(0x598, 0x8153, 0xa740, 0x396e, 0xc65c, 0xc356, 0x1, 0x1);
        gbc.writeMem(0x598, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x8153, gbc.sp());
        EXPECT(0x59a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0081
        gbc.setState(0x9ef, 0xb3d2, 0xe6b0, 0x8257, 0x5d2, 0xa95c, 0x0, 0x1);
        gbc.writeMem(0x9ef, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xb3d2, gbc.sp());
        EXPECT(0x9f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0082
        gbc.setState(0x4b97, 0xba16, 0x6e0, 0x55b, 0xa1ec, 0x473e, 0x0, 0x0);
        gbc.writeMem(0x4b97, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xba16, gbc.sp());
        EXPECT(0x4b99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0083
        gbc.setState(0xac6f, 0x2952, 0x3c90, 0x6021, 0x7e6f, 0xd507, 0x0, 0x1);
        gbc.writeMem(0xac6f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x2952, gbc.sp());
        EXPECT(0xac71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac6f));
        EXPECT(0xbc, gbc.readMem(0xac70));
        // CB BC 0084
        gbc.setState(0x14d8, 0x2d98, 0x1dc0, 0xb8c0, 0xcacf, 0x9372, 0x1, 0x0);
        gbc.writeMem(0x14d8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x2d98, gbc.sp());
        EXPECT(0x14da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0085
        gbc.setState(0xdef6, 0x1084, 0x5590, 0x5c84, 0xf590, 0x5c10, 0x1, 0x0);
        gbc.writeMem(0xdef6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x1084, gbc.sp());
        EXPECT(0xdef8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdef6));
        EXPECT(0xbc, gbc.readMem(0xdef7));
        // CB BC 0086
        gbc.setState(0x5718, 0xffcc, 0xbcb0, 0x119c, 0x345a, 0xaeff, 0x0, 0x1);
        gbc.writeMem(0x5718, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xffcc, gbc.sp());
        EXPECT(0x571a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0087
        gbc.setState(0x4d0d, 0x1bdc, 0x4f60, 0xfd4b, 0x548c, 0xcbd8, 0x0, 0x0);
        gbc.writeMem(0x4d0d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x1bdc, gbc.sp());
        EXPECT(0x4d0f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0088
        gbc.setState(0x14d3, 0x806a, 0x6440, 0x8755, 0x9727, 0xdb33, 0x1, 0x0);
        gbc.writeMem(0x14d3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x806a, gbc.sp());
        EXPECT(0x14d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0089
        gbc.setState(0x25aa, 0x5f4c, 0x8580, 0xd7b6, 0x266f, 0x108d, 0x0, 0x1);
        gbc.writeMem(0x25aa, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x5f4c, gbc.sp());
        EXPECT(0x25ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 008A
        gbc.setState(0xaee1, 0x937e, 0x4e0, 0xed25, 0xf20b, 0xba5f, 0x1, 0x1);
        gbc.writeMem(0xaee1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x937e, gbc.sp());
        EXPECT(0xaee3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaee1));
        EXPECT(0xbc, gbc.readMem(0xaee2));
        // CB BC 008B
        gbc.setState(0xaee7, 0xb129, 0xe2a0, 0xef50, 0x5369, 0x3409, 0x0, 0x0);
        gbc.writeMem(0xaee7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xb129, gbc.sp());
        EXPECT(0xaee9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaee7));
        EXPECT(0xbc, gbc.readMem(0xaee8));
        // CB BC 008C
        gbc.setState(0x3c7b, 0x45a9, 0x6d90, 0xda37, 0x251e, 0xf025, 0x1, 0x0);
        gbc.writeMem(0x3c7b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x45a9, gbc.sp());
        EXPECT(0x3c7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 008D
        gbc.setState(0xc348, 0x19be, 0xe9c0, 0x79ee, 0xe39a, 0xd1e, 0x1, 0x0);
        gbc.writeMem(0xc348, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x19be, gbc.sp());
        EXPECT(0xc34a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc348));
        EXPECT(0xbc, gbc.readMem(0xc349));
        // CB BC 008E
        gbc.setState(0xa6de, 0x3358, 0xa8c0, 0x9cb1, 0xe969, 0xa6, 0x1, 0x0);
        gbc.writeMem(0xa6de, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x3358, gbc.sp());
        EXPECT(0xa6e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6de));
        EXPECT(0xbc, gbc.readMem(0xa6df));
        // CB BC 008F
        gbc.setState(0xb497, 0x9c69, 0x1a0, 0xf0b7, 0x25f9, 0x7f4f, 0x1, 0x0);
        gbc.writeMem(0xb497, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x9c69, gbc.sp());
        EXPECT(0xb499, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb497));
        EXPECT(0xbc, gbc.readMem(0xb498));
        // CB BC 0090
        gbc.setState(0xde62, 0xd553, 0x1290, 0x3b63, 0x9a32, 0x6c37, 0x1, 0x1);
        gbc.writeMem(0xde62, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xd553, gbc.sp());
        EXPECT(0xde64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde62));
        EXPECT(0xbc, gbc.readMem(0xde63));
        // CB BC 0091
        gbc.setState(0x4b7e, 0x8810, 0x2f40, 0x9ccb, 0x4717, 0x9479, 0x0, 0x0);
        gbc.writeMem(0x4b7e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x8810, gbc.sp());
        EXPECT(0x4b80, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0092
        gbc.setState(0xd04c, 0xccd0, 0x4650, 0x7551, 0xa68, 0x51e4, 0x1, 0x0);
        gbc.writeMem(0xd04c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xccd0, gbc.sp());
        EXPECT(0xd04e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd04c));
        EXPECT(0xbc, gbc.readMem(0xd04d));
        // CB BC 0093
        gbc.setState(0x8192, 0x712a, 0x9970, 0x6409, 0x779d, 0xcd57, 0x1, 0x0);
        gbc.writeMem(0x8192, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x712a, gbc.sp());
        EXPECT(0x8194, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8192));
        EXPECT(0xbc, gbc.readMem(0x8193));
        // CB BC 0094
        gbc.setState(0xd39b, 0xa787, 0xd8a0, 0xd3ce, 0xf6e0, 0x4d6f, 0x1, 0x0);
        gbc.writeMem(0xd39b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xa787, gbc.sp());
        EXPECT(0xd39d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd39b));
        EXPECT(0xbc, gbc.readMem(0xd39c));
        // CB BC 0096
        gbc.setState(0xdebc, 0x2e28, 0x8f0, 0x9e29, 0xaa2b, 0xaa2b, 0x1, 0x0);
        gbc.writeMem(0xdebc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x2e28, gbc.sp());
        EXPECT(0xdebe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdebc));
        EXPECT(0xbc, gbc.readMem(0xdebd));
        // CB BC 0097
        gbc.setState(0x492d, 0xf8b1, 0xda60, 0x78f3, 0xca8a, 0xf14e, 0x0, 0x1);
        gbc.writeMem(0x492d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xf8b1, gbc.sp());
        EXPECT(0x492f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0098
        gbc.setState(0xd46e, 0xa24, 0x8c30, 0x9b69, 0x800, 0xed18, 0x0, 0x1);
        gbc.writeMem(0xd46e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xa24, gbc.sp());
        EXPECT(0xd470, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd46e));
        EXPECT(0xbc, gbc.readMem(0xd46f));
        // CB BC 0099
        gbc.setState(0x6fae, 0x4df9, 0x7d00, 0xe838, 0x9449, 0xe695, 0x0, 0x0);
        gbc.writeMem(0x6fae, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x4df9, gbc.sp());
        EXPECT(0x6fb0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 009A
        gbc.setState(0x2cf7, 0xa8a, 0xecb0, 0x9273, 0x802, 0xe108, 0x1, 0x1);
        gbc.writeMem(0x2cf7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xa8a, gbc.sp());
        EXPECT(0x2cf9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 009B
        gbc.setState(0x154f, 0x376c, 0x7910, 0x817b, 0x523a, 0xba35, 0x0, 0x1);
        gbc.writeMem(0x154f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x376c, gbc.sp());
        EXPECT(0x1551, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 009D
        gbc.setState(0x464f, 0x4df8, 0xa500, 0x59c4, 0x7cab, 0x9683, 0x1, 0x1);
        gbc.writeMem(0x464f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x4df8, gbc.sp());
        EXPECT(0x4651, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 009E
        gbc.setState(0xaf82, 0x2030, 0xaa0, 0xcf0a, 0xd25, 0xd83, 0x1, 0x0);
        gbc.writeMem(0xaf82, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x2030, gbc.sp());
        EXPECT(0xaf84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf82));
        EXPECT(0xbc, gbc.readMem(0xaf83));
        // CB BC 009F
        gbc.setState(0x8829, 0x9168, 0x7a90, 0x9f27, 0x47ac, 0x6bee, 0x1, 0x0);
        gbc.writeMem(0x8829, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x9168, gbc.sp());
        EXPECT(0x882b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8829));
        EXPECT(0xbc, gbc.readMem(0x882a));
        // CB BC 00A0
        gbc.setState(0x4dd2, 0x68a8, 0x1ec0, 0xbb84, 0xca13, 0xaaff, 0x0, 0x0);
        gbc.writeMem(0x4dd2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x68a8, gbc.sp());
        EXPECT(0x4dd4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00A1
        gbc.setState(0xd389, 0x1fe3, 0x540, 0xbd67, 0x1c68, 0xd911, 0x1, 0x0);
        gbc.writeMem(0xd389, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x1fe3, gbc.sp());
        EXPECT(0xd38b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd389));
        EXPECT(0xbc, gbc.readMem(0xd38a));
        // CB BC 00A3
        gbc.setState(0x6463, 0x7c69, 0x76d0, 0xc0e4, 0xae2e, 0xa5df, 0x1, 0x0);
        gbc.writeMem(0x6463, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x7c69, gbc.sp());
        EXPECT(0x6465, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00A4
        gbc.setState(0xe7b0, 0xb279, 0xab10, 0x8b4c, 0xb4f7, 0x3898, 0x1, 0x0);
        gbc.writeMem(0xe7b0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xb279, gbc.sp());
        EXPECT(0xe7b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7b0));
        EXPECT(0xbc, gbc.readMem(0xe7b1));
        // CB BC 00A5
        gbc.setState(0xee90, 0xbd59, 0xe90, 0xe3c2, 0x25c5, 0x21c, 0x0, 0x0);
        gbc.writeMem(0xee90, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xbd59, gbc.sp());
        EXPECT(0xee92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee90));
        EXPECT(0xbc, gbc.readMem(0xee91));
        // CB BC 00A6
        gbc.setState(0x8440, 0xaa, 0xf420, 0x7944, 0x9a51, 0xf16c, 0x1, 0x1);
        gbc.writeMem(0x8440, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xaa, gbc.sp());
        EXPECT(0x8442, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8440));
        EXPECT(0xbc, gbc.readMem(0x8441));
        // CB BC 00A7
        gbc.setState(0xc571, 0x6a80, 0x1e50, 0xc475, 0x81f3, 0x255c, 0x1, 0x1);
        gbc.writeMem(0xc571, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x6a80, gbc.sp());
        EXPECT(0xc573, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc571));
        EXPECT(0xbc, gbc.readMem(0xc572));
        // CB BC 00A9
        gbc.setState(0xba63, 0xd77a, 0x52d0, 0xa2f5, 0x385e, 0x804e, 0x1, 0x0);
        gbc.writeMem(0xba63, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xd77a, gbc.sp());
        EXPECT(0xba65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba63));
        EXPECT(0xbc, gbc.readMem(0xba64));
        // CB BC 00AA
        gbc.setState(0x1b62, 0x97b7, 0x8ef0, 0x4cfb, 0x5c29, 0xb0c1, 0x1, 0x0);
        gbc.writeMem(0x1b62, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x97b7, gbc.sp());
        EXPECT(0x1b64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00AB
        gbc.setState(0x6ec5, 0xdd59, 0x9980, 0x20ec, 0xf878, 0x6830, 0x1, 0x1);
        gbc.writeMem(0x6ec5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xdd59, gbc.sp());
        EXPECT(0x6ec7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00AC
        gbc.setState(0x9130, 0x980, 0x3a90, 0xae8, 0xa8ad, 0x8d70, 0x0, 0x0);
        gbc.writeMem(0x9130, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x980, gbc.sp());
        EXPECT(0x9132, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9130));
        EXPECT(0xbc, gbc.readMem(0x9131));
        // CB BC 00AD
        gbc.setState(0xed1a, 0xc84f, 0xf30, 0xe816, 0x90dd, 0x12cb, 0x1, 0x0);
        gbc.writeMem(0xed1a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xc84f, gbc.sp());
        EXPECT(0xed1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed1a));
        EXPECT(0xbc, gbc.readMem(0xed1b));
        // CB BC 00AE
        gbc.setState(0x184a, 0xa833, 0x4830, 0x73b7, 0x7ce4, 0x9415, 0x1, 0x0);
        gbc.writeMem(0x184a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xa833, gbc.sp());
        EXPECT(0x184c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00AF
        gbc.setState(0x3daa, 0xb7c4, 0x4270, 0xb69b, 0x482f, 0x6810, 0x0, 0x1);
        gbc.writeMem(0x3daa, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xb7c4, gbc.sp());
        EXPECT(0x3dac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00B0
        gbc.setState(0xd1a4, 0x390c, 0xcce0, 0x65e9, 0xe981, 0x9908, 0x1, 0x0);
        gbc.writeMem(0xd1a4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x390c, gbc.sp());
        EXPECT(0xd1a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1a4));
        EXPECT(0xbc, gbc.readMem(0xd1a5));
        // CB BC 00B1
        gbc.setState(0xaafe, 0x75b4, 0xfaf0, 0x3c5f, 0xd3b2, 0x3cef, 0x0, 0x1);
        gbc.writeMem(0xaafe, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x75b4, gbc.sp());
        EXPECT(0xab00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaafe));
        EXPECT(0xbc, gbc.readMem(0xaaff));
        // CB BC 00B2
        gbc.setState(0x3e4, 0xf8a4, 0x4ef0, 0xfb59, 0x5d43, 0x31d5, 0x0, 0x1);
        gbc.writeMem(0x3e4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xf8a4, gbc.sp());
        EXPECT(0x3e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00B3
        gbc.setState(0xe9c6, 0x950, 0xac80, 0xa086, 0x1dbf, 0x17bb, 0x0, 0x1);
        gbc.writeMem(0xe9c6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x950, gbc.sp());
        EXPECT(0xe9c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9c6));
        EXPECT(0xbc, gbc.readMem(0xe9c7));
        // CB BC 00B4
        gbc.setState(0xd269, 0xb6cc, 0x69d0, 0x867e, 0xc3b5, 0x943c, 0x1, 0x0);
        gbc.writeMem(0xd269, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xb6cc, gbc.sp());
        EXPECT(0xd26b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd269));
        EXPECT(0xbc, gbc.readMem(0xd26a));
        // CB BC 00B5
        gbc.setState(0xb13b, 0xec72, 0xb30, 0xf33b, 0xd370, 0x6ca1, 0x1, 0x1);
        gbc.writeMem(0xb13b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xec72, gbc.sp());
        EXPECT(0xb13d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb13b));
        EXPECT(0xbc, gbc.readMem(0xb13c));
        // CB BC 00B6
        gbc.setState(0x11e8, 0x1662, 0x7710, 0x2e16, 0x1aff, 0xaf0b, 0x0, 0x0);
        gbc.writeMem(0x11e8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x1662, gbc.sp());
        EXPECT(0x11ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00B7
        gbc.setState(0xcdc6, 0xeb6f, 0xdc70, 0xd90b, 0xfecd, 0xcda0, 0x1, 0x0);
        gbc.writeMem(0xcdc6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xeb6f, gbc.sp());
        EXPECT(0xcdc8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdc6));
        EXPECT(0xbc, gbc.readMem(0xcdc7));
        // CB BC 00B8
        gbc.setState(0x9b96, 0xcb0, 0x1510, 0xaed2, 0xb766, 0xbba3, 0x0, 0x0);
        gbc.writeMem(0x9b96, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xcb0, gbc.sp());
        EXPECT(0x9b98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b96));
        EXPECT(0xbc, gbc.readMem(0x9b97));
        // CB BC 00B9
        gbc.setState(0xa805, 0xfde1, 0xa7f0, 0x3568, 0x4af8, 0x29f0, 0x0, 0x1);
        gbc.writeMem(0xa805, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xfde1, gbc.sp());
        EXPECT(0xa807, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa805));
        EXPECT(0xbc, gbc.readMem(0xa806));
        // CB BC 00BA
        gbc.setState(0x9961, 0xc230, 0x71f0, 0x297a, 0x91ed, 0x1ac8, 0x0, 0x1);
        gbc.writeMem(0x9961, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xc230, gbc.sp());
        EXPECT(0x9963, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9961));
        EXPECT(0xbc, gbc.readMem(0x9962));
        // CB BC 00BB
        gbc.setState(0x1dbe, 0x31b8, 0x1e20, 0xa426, 0xb22d, 0xb3a5, 0x0, 0x0);
        gbc.writeMem(0x1dbe, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x31b8, gbc.sp());
        EXPECT(0x1dc0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00BC
        gbc.setState(0x7d22, 0x9a9e, 0x7480, 0xdca2, 0x80c2, 0x4113, 0x0, 0x1);
        gbc.writeMem(0x7d22, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x9a9e, gbc.sp());
        EXPECT(0x7d24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00BD
        gbc.setState(0x72fa, 0x2293, 0xf520, 0x644a, 0x1300, 0x1c3c, 0x1, 0x1);
        gbc.writeMem(0x72fa, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x2293, gbc.sp());
        EXPECT(0x72fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00BE
        gbc.setState(0xb7ea, 0x3340, 0x1590, 0x9c6c, 0xd9d9, 0xee0b, 0x0, 0x0);
        gbc.writeMem(0xb7ea, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x3340, gbc.sp());
        EXPECT(0xb7ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7ea));
        EXPECT(0xbc, gbc.readMem(0xb7eb));
        // CB BC 00BF
        gbc.setState(0xe305, 0xf512, 0x1650, 0xac17, 0xfedc, 0x17, 0x1, 0x0);
        gbc.writeMem(0xe305, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xf512, gbc.sp());
        EXPECT(0xe307, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe305));
        EXPECT(0xbc, gbc.readMem(0xe306));
        // CB BC 00C0
        gbc.setState(0x5bc, 0xd7d3, 0xcc40, 0x162b, 0x42b4, 0x10b6, 0x0, 0x0);
        gbc.writeMem(0x5bc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xd7d3, gbc.sp());
        EXPECT(0x5be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00C1
        gbc.setState(0xcd54, 0x365d, 0xe3a0, 0xe6fa, 0xccd7, 0x1dfc, 0x0, 0x0);
        gbc.writeMem(0xcd54, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x365d, gbc.sp());
        EXPECT(0xcd56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd54));
        EXPECT(0xbc, gbc.readMem(0xcd55));
        // CB BC 00C2
        gbc.setState(0x780, 0xd276, 0x8630, 0xfe3e, 0x8682, 0x81d8, 0x1, 0x1);
        gbc.writeMem(0x780, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xd276, gbc.sp());
        EXPECT(0x782, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00C3
        gbc.setState(0x6aa4, 0xb22b, 0x9fb0, 0x8cc7, 0x8171, 0xd98c, 0x0, 0x0);
        gbc.writeMem(0x6aa4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xb22b, gbc.sp());
        EXPECT(0x6aa6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00C4
        gbc.setState(0x69b, 0x696, 0x27a0, 0x7325, 0xc03d, 0xae70, 0x0, 0x0);
        gbc.writeMem(0x69b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x696, gbc.sp());
        EXPECT(0x69d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00C5
        gbc.setState(0xad30, 0xd1ee, 0xafd0, 0x8e38, 0xb57b, 0x186d, 0x1, 0x1);
        gbc.writeMem(0xad30, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xd1ee, gbc.sp());
        EXPECT(0xad32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad30));
        EXPECT(0xbc, gbc.readMem(0xad31));
        // CB BC 00C6
        gbc.setState(0xc84c, 0xc55b, 0xbbc0, 0x7e5e, 0xe4b, 0x596c, 0x1, 0x0);
        gbc.writeMem(0xc84c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xc55b, gbc.sp());
        EXPECT(0xc84e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc84c));
        EXPECT(0xbc, gbc.readMem(0xc84d));
        // CB BC 00C7
        gbc.setState(0x663a, 0x921a, 0xef0, 0xb632, 0xea95, 0xe360, 0x0, 0x0);
        gbc.writeMem(0x663a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x921a, gbc.sp());
        EXPECT(0x663c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00C8
        gbc.setState(0x2500, 0xda0a, 0xdf00, 0x96fe, 0x436a, 0xb34, 0x1, 0x0);
        gbc.writeMem(0x2500, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xda0a, gbc.sp());
        EXPECT(0x2502, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00C9
        gbc.setState(0xd458, 0x797, 0x8e80, 0xdee, 0x19aa, 0x40f1, 0x1, 0x1);
        gbc.writeMem(0xd458, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x797, gbc.sp());
        EXPECT(0xd45a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd458));
        EXPECT(0xbc, gbc.readMem(0xd459));
        // CB BC 00CA
        gbc.setState(0x95dc, 0xd3a1, 0x5dc0, 0x1bd7, 0xa7f2, 0x4624, 0x0, 0x1);
        gbc.writeMem(0x95dc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xd3a1, gbc.sp());
        EXPECT(0x95de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95dc));
        EXPECT(0xbc, gbc.readMem(0x95dd));
        // CB BC 00CB
        gbc.setState(0x6af8, 0xd219, 0xba60, 0xd575, 0x3950, 0x8ac6, 0x0, 0x0);
        gbc.writeMem(0x6af8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xd219, gbc.sp());
        EXPECT(0x6afa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00CC
        gbc.setState(0x4592, 0x2fe7, 0x1e40, 0x2aa6, 0x1de1, 0x1d6, 0x1, 0x0);
        gbc.writeMem(0x4592, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x2fe7, gbc.sp());
        EXPECT(0x4594, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00CD
        gbc.setState(0x7a6, 0x6c53, 0x5a80, 0x5195, 0xeab, 0x748b, 0x0, 0x0);
        gbc.writeMem(0x7a6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x6c53, gbc.sp());
        EXPECT(0x7a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00CE
        gbc.setState(0x574, 0xcf67, 0xf230, 0xc66a, 0xc7a9, 0x9a9e, 0x0, 0x1);
        gbc.writeMem(0x574, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xcf67, gbc.sp());
        EXPECT(0x576, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00CF
        gbc.setState(0xda6a, 0x72c0, 0x7ae0, 0xd33b, 0xbdf3, 0x83ee, 0x1, 0x1);
        gbc.writeMem(0xda6a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x72c0, gbc.sp());
        EXPECT(0xda6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda6a));
        EXPECT(0xbc, gbc.readMem(0xda6b));
        // CB BC 00D0
        gbc.setState(0x19c, 0x23ae, 0xc580, 0x702e, 0xd44a, 0xf797, 0x0, 0x0);
        gbc.writeMem(0x19c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x23ae, gbc.sp());
        EXPECT(0x19e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00D1
        gbc.setState(0xe06d, 0x4783, 0x160, 0x3f0, 0x1082, 0xbdeb, 0x0, 0x1);
        gbc.writeMem(0xe06d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x4783, gbc.sp());
        EXPECT(0xe06f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe06d));
        EXPECT(0xbc, gbc.readMem(0xe06e));
        // CB BC 00D2
        gbc.setState(0x6dde, 0x87e6, 0x4920, 0xc3f4, 0xdbb1, 0xe6e2, 0x0, 0x0);
        gbc.writeMem(0x6dde, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x87e6, gbc.sp());
        EXPECT(0x6de0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00D3
        gbc.setState(0x5160, 0x9f2c, 0x7540, 0x4804, 0x18ba, 0x19fb, 0x0, 0x0);
        gbc.writeMem(0x5160, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x9f2c, gbc.sp());
        EXPECT(0x5162, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00D4
        gbc.setState(0x2abe, 0xfdcf, 0xe350, 0x5ced, 0x7d1e, 0xc903, 0x0, 0x1);
        gbc.writeMem(0x2abe, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xfdcf, gbc.sp());
        EXPECT(0x2ac0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00D5
        gbc.setState(0x1e54, 0x55c5, 0xa4a0, 0xf611, 0xe4d1, 0xf8cc, 0x0, 0x0);
        gbc.writeMem(0x1e54, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x55c5, gbc.sp());
        EXPECT(0x1e56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00D6
        gbc.setState(0xde9f, 0xcf3d, 0xd160, 0xbd4b, 0xc72e, 0x34af, 0x0, 0x0);
        gbc.writeMem(0xde9f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xcf3d, gbc.sp());
        EXPECT(0xdea1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde9f));
        EXPECT(0xbc, gbc.readMem(0xdea0));
        // CB BC 00D8
        gbc.setState(0x579c, 0x4cf7, 0x6170, 0x15b3, 0xc256, 0x89e9, 0x1, 0x1);
        gbc.writeMem(0x579c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x4cf7, gbc.sp());
        EXPECT(0x579e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00D9
        gbc.setState(0x761, 0x8151, 0xa8f0, 0xb027, 0x6665, 0x20b8, 0x1, 0x0);
        gbc.writeMem(0x761, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x8151, gbc.sp());
        EXPECT(0x763, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00DA
        gbc.setState(0x23c, 0x626, 0x6280, 0x5966, 0x7ab1, 0x84a0, 0x1, 0x1);
        gbc.writeMem(0x23c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x626, gbc.sp());
        EXPECT(0x23e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00DB
        gbc.setState(0x8e95, 0x3540, 0x9dd0, 0x2eb6, 0xf5a5, 0xfdb6, 0x0, 0x0);
        gbc.writeMem(0x8e95, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x3540, gbc.sp());
        EXPECT(0x8e97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e95));
        EXPECT(0xbc, gbc.readMem(0x8e96));
        // CB BC 00DC
        gbc.setState(0xd346, 0xaa83, 0xb750, 0xab6a, 0x8828, 0x2181, 0x1, 0x1);
        gbc.writeMem(0xd346, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xaa83, gbc.sp());
        EXPECT(0xd348, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd346));
        EXPECT(0xbc, gbc.readMem(0xd347));
        // CB BC 00DD
        gbc.setState(0x3c07, 0xaf6a, 0xc0f0, 0x98f7, 0x1d50, 0xa591, 0x1, 0x1);
        gbc.writeMem(0x3c07, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xaf6a, gbc.sp());
        EXPECT(0x3c09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00DE
        gbc.setState(0x9aa, 0x183c, 0x1840, 0x5cc6, 0x2a01, 0x937d, 0x1, 0x0);
        gbc.writeMem(0x9aa, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x183c, gbc.sp());
        EXPECT(0x9ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00DF
        gbc.setState(0xb991, 0x731a, 0x5290, 0xd017, 0xdf7f, 0x16c7, 0x1, 0x0);
        gbc.writeMem(0xb991, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x731a, gbc.sp());
        EXPECT(0xb993, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb991));
        EXPECT(0xbc, gbc.readMem(0xb992));
        // CB BC 00E0
        gbc.setState(0x2bb4, 0x3375, 0x7850, 0x5ee6, 0xd205, 0x2613, 0x0, 0x1);
        gbc.writeMem(0x2bb4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x3375, gbc.sp());
        EXPECT(0x2bb6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00E1
        gbc.setState(0xbf55, 0x6b6, 0x8470, 0x5860, 0x95aa, 0x8e15, 0x0, 0x0);
        gbc.writeMem(0xbf55, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x6b6, gbc.sp());
        EXPECT(0xbf57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf55));
        EXPECT(0xbc, gbc.readMem(0xbf56));
        // CB BC 00E2
        gbc.setState(0x5b6b, 0xc6da, 0x1f40, 0xa65, 0xea8a, 0xeab2, 0x0, 0x0);
        gbc.writeMem(0x5b6b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xc6da, gbc.sp());
        EXPECT(0x5b6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00E3
        gbc.setState(0x7aaa, 0xe944, 0x2190, 0xe597, 0xcda7, 0xbc9a, 0x0, 0x1);
        gbc.writeMem(0x7aaa, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xe944, gbc.sp());
        EXPECT(0x7aac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00E4
        gbc.setState(0x857f, 0xfa9f, 0xe4f0, 0x37e2, 0x8772, 0x7490, 0x0, 0x0);
        gbc.writeMem(0x857f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xfa9f, gbc.sp());
        EXPECT(0x8581, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x857f));
        EXPECT(0xbc, gbc.readMem(0x8580));
        // CB BC 00E5
        gbc.setState(0x8e65, 0xc87c, 0xab10, 0x8518, 0xf5e2, 0x3c9, 0x1, 0x1);
        gbc.writeMem(0x8e65, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xc87c, gbc.sp());
        EXPECT(0x8e67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e65));
        EXPECT(0xbc, gbc.readMem(0x8e66));
        // CB BC 00E6
        gbc.setState(0x902b, 0xe3c, 0x3f70, 0xfe7f, 0x1418, 0x2af1, 0x1, 0x0);
        gbc.writeMem(0x902b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xe3c, gbc.sp());
        EXPECT(0x902d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x902b));
        EXPECT(0xbc, gbc.readMem(0x902c));
        // CB BC 00E7
        gbc.setState(0x7df7, 0xbf48, 0xf60, 0x574, 0xb7c8, 0x70a6, 0x0, 0x0);
        gbc.writeMem(0x7df7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xbf48, gbc.sp());
        EXPECT(0x7df9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00E8
        gbc.setState(0x7abf, 0x2ab3, 0xffa0, 0x310d, 0x7c51, 0x91de, 0x0, 0x0);
        gbc.writeMem(0x7abf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x2ab3, gbc.sp());
        EXPECT(0x7ac1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00E9
        gbc.setState(0xb60c, 0xd0a8, 0x600, 0x3059, 0xe516, 0xb7dc, 0x0, 0x1);
        gbc.writeMem(0xb60c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xd0a8, gbc.sp());
        EXPECT(0xb60e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb60c));
        EXPECT(0xbc, gbc.readMem(0xb60d));
        // CB BC 00EA
        gbc.setState(0x8ba2, 0x3ae1, 0x82c0, 0xf560, 0x471d, 0xd1eb, 0x1, 0x1);
        gbc.writeMem(0x8ba2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x3ae1, gbc.sp());
        EXPECT(0x8ba4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ba2));
        EXPECT(0xbc, gbc.readMem(0x8ba3));
        // CB BC 00EB
        gbc.setState(0xb7d0, 0x17be, 0xf150, 0x6a40, 0x823f, 0xeb83, 0x0, 0x1);
        gbc.writeMem(0xb7d0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x17be, gbc.sp());
        EXPECT(0xb7d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7d0));
        EXPECT(0xbc, gbc.readMem(0xb7d1));
        // CB BC 00EC
        gbc.setState(0xd998, 0x74e1, 0x5100, 0xbb66, 0x1bcc, 0xdabb, 0x0, 0x0);
        gbc.writeMem(0xd998, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x74e1, gbc.sp());
        EXPECT(0xd99a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd998));
        EXPECT(0xbc, gbc.readMem(0xd999));
        // CB BC 00ED
        gbc.setState(0xaab0, 0xbe92, 0xccb0, 0xc053, 0x19df, 0x83a7, 0x0, 0x1);
        gbc.writeMem(0xaab0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xbe92, gbc.sp());
        EXPECT(0xaab2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaab0));
        EXPECT(0xbc, gbc.readMem(0xaab1));
        // CB BC 00EE
        gbc.setState(0x21e5, 0x10f6, 0x37b0, 0xef5a, 0xfab7, 0x5658, 0x0, 0x1);
        gbc.writeMem(0x21e5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x10f6, gbc.sp());
        EXPECT(0x21e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00EF
        gbc.setState(0xda39, 0x5196, 0x54e0, 0xf590, 0xdefe, 0xd6a, 0x0, 0x1);
        gbc.writeMem(0xda39, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x5196, gbc.sp());
        EXPECT(0xda3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda39));
        EXPECT(0xbc, gbc.readMem(0xda3a));
        // CB BC 00F0
        gbc.setState(0xcbb5, 0x1b57, 0xe0a0, 0x2af4, 0x6edd, 0x65b1, 0x0, 0x0);
        gbc.writeMem(0xcbb5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x1b57, gbc.sp());
        EXPECT(0xcbb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbb5));
        EXPECT(0xbc, gbc.readMem(0xcbb6));
        // CB BC 00F1
        gbc.setState(0x80ca, 0x255, 0xfce0, 0x72a8, 0x768e, 0xc320, 0x0, 0x1);
        gbc.writeMem(0x80ca, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x255, gbc.sp());
        EXPECT(0x80cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80ca));
        EXPECT(0xbc, gbc.readMem(0x80cb));
        // CB BC 00F2
        gbc.setState(0xb97, 0x8efd, 0xfd80, 0xdfd5, 0x6606, 0xf734, 0x1, 0x0);
        gbc.writeMem(0xb97, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x8efd, gbc.sp());
        EXPECT(0xb99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00F3
        gbc.setState(0xc22e, 0x12b6, 0xd4b0, 0x28c5, 0x8890, 0xbe77, 0x0, 0x1);
        gbc.writeMem(0xc22e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x12b6, gbc.sp());
        EXPECT(0xc230, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc22e));
        EXPECT(0xbc, gbc.readMem(0xc22f));
        // CB BC 00F4
        gbc.setState(0x37e1, 0x2df5, 0x9a70, 0x3111, 0xde55, 0x4d2c, 0x1, 0x0);
        gbc.writeMem(0x37e1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x2df5, gbc.sp());
        EXPECT(0x37e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00F5
        gbc.setState(0x88b1, 0xb31b, 0x6300, 0xcc61, 0x1dbd, 0x9901, 0x0, 0x0);
        gbc.writeMem(0x88b1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xb31b, gbc.sp());
        EXPECT(0x88b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88b1));
        EXPECT(0xbc, gbc.readMem(0x88b2));
        // CB BC 00F6
        gbc.setState(0xbdad, 0xe390, 0x8e80, 0x8601, 0x6ead, 0x7191, 0x1, 0x0);
        gbc.writeMem(0xbdad, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xe390, gbc.sp());
        EXPECT(0xbdaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdad));
        EXPECT(0xbc, gbc.readMem(0xbdae));
        // CB BC 00F7
        gbc.setState(0x6d37, 0x378a, 0xac0, 0x1025, 0xfa8c, 0x3c45, 0x1, 0x1);
        gbc.writeMem(0x6d37, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x378a, gbc.sp());
        EXPECT(0x6d39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00F8
        gbc.setState(0xcc3e, 0x57e4, 0x2a30, 0x8293, 0xcc8d, 0x7a3d, 0x1, 0x1);
        gbc.writeMem(0xcc3e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x57e4, gbc.sp());
        EXPECT(0xcc40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc3e));
        EXPECT(0xbc, gbc.readMem(0xcc3f));
        // CB BC 00F9
        gbc.setState(0xcfe5, 0xb207, 0xf50, 0x6865, 0x9251, 0xe4a, 0x0, 0x1);
        gbc.writeMem(0xcfe5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xb207, gbc.sp());
        EXPECT(0xcfe7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfe5));
        EXPECT(0xbc, gbc.readMem(0xcfe6));
        // CB BC 00FA
        gbc.setState(0x2a5e, 0x29be, 0xe540, 0xe58c, 0x1ef4, 0x172d, 0x0, 0x1);
        gbc.writeMem(0x2a5e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x29be, gbc.sp());
        EXPECT(0x2a60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00FB
        gbc.setState(0x5a7a, 0x5b0a, 0xb3d0, 0x4250, 0x7b65, 0x24a7, 0x0, 0x1);
        gbc.writeMem(0x5a7a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x5b0a, gbc.sp());
        EXPECT(0x5a7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 00FC
        gbc.setState(0x1939, 0xf8ae, 0x6b00, 0x22bc, 0x9803, 0x6d7e, 0x1, 0x1);
        gbc.writeMem(0x1939, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xf8ae, gbc.sp());
        EXPECT(0x193b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00FD
        gbc.setState(0x15ac, 0xbee9, 0x5480, 0x247b, 0x85d8, 0x5fb5, 0x1, 0x0);
        gbc.writeMem(0x15ac, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xbee9, gbc.sp());
        EXPECT(0x15ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 00FE
        gbc.setState(0x872e, 0x36d3, 0x57f0, 0x4c88, 0xb7ef, 0x8d16, 0x0, 0x1);
        gbc.writeMem(0x872e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x36d3, gbc.sp());
        EXPECT(0x8730, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x872e));
        EXPECT(0xbc, gbc.readMem(0x872f));
        // CB BC 0100
        gbc.setState(0x54bc, 0xef65, 0xdfd0, 0x4a77, 0xc83c, 0x666c, 0x0, 0x0);
        gbc.writeMem(0x54bc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xef65, gbc.sp());
        EXPECT(0x54be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0101
        gbc.setState(0xc3e9, 0xb79b, 0x4cc0, 0xa079, 0x9e3a, 0x4e36, 0x1, 0x1);
        gbc.writeMem(0xc3e9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xb79b, gbc.sp());
        EXPECT(0xc3eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3e9));
        EXPECT(0xbc, gbc.readMem(0xc3ea));
        // CB BC 0102
        gbc.setState(0xc31f, 0xad7, 0x2090, 0x13f, 0xb572, 0xd35e, 0x0, 0x0);
        gbc.writeMem(0xc31f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xad7, gbc.sp());
        EXPECT(0xc321, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc31f));
        EXPECT(0xbc, gbc.readMem(0xc320));
        // CB BC 0103
        gbc.setState(0x9102, 0x777d, 0xcc70, 0x6803, 0xad1e, 0x6dd, 0x1, 0x0);
        gbc.writeMem(0x9102, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x777d, gbc.sp());
        EXPECT(0x9104, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9102));
        EXPECT(0xbc, gbc.readMem(0x9103));
        // CB BC 0104
        gbc.setState(0xaffb, 0x6be4, 0xc210, 0x9cb6, 0x3f7b, 0xecfb, 0x1, 0x0);
        gbc.writeMem(0xaffb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x6be4, gbc.sp());
        EXPECT(0xaffd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaffb));
        EXPECT(0xbc, gbc.readMem(0xaffc));
        // CB BC 0105
        gbc.setState(0x8df5, 0x9206, 0xc420, 0xe124, 0x9471, 0x7d80, 0x1, 0x1);
        gbc.writeMem(0x8df5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x9206, gbc.sp());
        EXPECT(0x8df7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8df5));
        EXPECT(0xbc, gbc.readMem(0x8df6));
        // CB BC 0106
        gbc.setState(0xaf50, 0xa53e, 0xbcb0, 0xa9c6, 0xbb52, 0x98a2, 0x0, 0x1);
        gbc.writeMem(0xaf50, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xa53e, gbc.sp());
        EXPECT(0xaf52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf50));
        EXPECT(0xbc, gbc.readMem(0xaf51));
        // CB BC 0107
        gbc.setState(0x7e61, 0xfaa9, 0x42e0, 0x235b, 0xdfec, 0x3616, 0x0, 0x1);
        gbc.writeMem(0x7e61, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xfaa9, gbc.sp());
        EXPECT(0x7e63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0108
        gbc.setState(0xaed9, 0xd6a5, 0x6f70, 0x370d, 0x24b5, 0xf39d, 0x1, 0x1);
        gbc.writeMem(0xaed9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xd6a5, gbc.sp());
        EXPECT(0xaedb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaed9));
        EXPECT(0xbc, gbc.readMem(0xaeda));
        // CB BC 0109
        gbc.setState(0x8298, 0x9872, 0x5270, 0x8712, 0x3f7d, 0x1e94, 0x0, 0x1);
        gbc.writeMem(0x8298, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x9872, gbc.sp());
        EXPECT(0x829a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8298));
        EXPECT(0xbc, gbc.readMem(0x8299));
        // CB BC 010A
        gbc.setState(0x792c, 0x6588, 0x11c0, 0x7956, 0x4333, 0x4e95, 0x0, 0x1);
        gbc.writeMem(0x792c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x6588, gbc.sp());
        EXPECT(0x792e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 010B
        gbc.setState(0x1ffa, 0x6c6b, 0x7e30, 0x7885, 0xd3b9, 0x33b4, 0x0, 0x0);
        gbc.writeMem(0x1ffa, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x6c6b, gbc.sp());
        EXPECT(0x1ffc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 010C
        gbc.setState(0xbbfd, 0x1c93, 0x4b70, 0x602f, 0x9ff2, 0xd6b8, 0x0, 0x0);
        gbc.writeMem(0xbbfd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x1c93, gbc.sp());
        EXPECT(0xbbff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbfd));
        EXPECT(0xbc, gbc.readMem(0xbbfe));
        // CB BC 010D
        gbc.setState(0x6d0e, 0x87d0, 0x7880, 0xf216, 0xedfc, 0xbe13, 0x0, 0x1);
        gbc.writeMem(0x6d0e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x87d0, gbc.sp());
        EXPECT(0x6d10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 010E
        gbc.setState(0xbfa0, 0x378d, 0x38b0, 0x4d0f, 0x95fd, 0x2f80, 0x0, 0x1);
        gbc.writeMem(0xbfa0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x378d, gbc.sp());
        EXPECT(0xbfa2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfa0));
        EXPECT(0xbc, gbc.readMem(0xbfa1));
        // CB BC 010F
        gbc.setState(0xd539, 0x1764, 0xa6e0, 0xab9e, 0x93ce, 0x242b, 0x0, 0x0);
        gbc.writeMem(0xd539, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x1764, gbc.sp());
        EXPECT(0xd53b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd539));
        EXPECT(0xbc, gbc.readMem(0xd53a));
        // CB BC 0111
        gbc.setState(0x9aae, 0xe4c8, 0xfe0, 0x3410, 0x2fcb, 0x1b29, 0x1, 0x1);
        gbc.writeMem(0x9aae, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xe4c8, gbc.sp());
        EXPECT(0x9ab0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9aae));
        EXPECT(0xbc, gbc.readMem(0x9aaf));
        // CB BC 0113
        gbc.setState(0x220f, 0x1538, 0xac40, 0x9248, 0x3b4a, 0x5814, 0x0, 0x0);
        gbc.writeMem(0x220f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x1538, gbc.sp());
        EXPECT(0x2211, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0114
        gbc.setState(0xb760, 0x2594, 0xbd40, 0x3923, 0xf18c, 0x27e7, 0x1, 0x1);
        gbc.writeMem(0xb760, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x2594, gbc.sp());
        EXPECT(0xb762, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb760));
        EXPECT(0xbc, gbc.readMem(0xb761));
        // CB BC 0115
        gbc.setState(0x9622, 0x96f5, 0x28f0, 0xb2c3, 0xc60d, 0x6d, 0x1, 0x1);
        gbc.writeMem(0x9622, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x96f5, gbc.sp());
        EXPECT(0x9624, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9622));
        EXPECT(0xbc, gbc.readMem(0x9623));
        // CB BC 0116
        gbc.setState(0x268e, 0x49da, 0xefb0, 0x44d5, 0x98c1, 0xaab1, 0x0, 0x0);
        gbc.writeMem(0x268e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x49da, gbc.sp());
        EXPECT(0x2690, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0117
        gbc.setState(0x9bf5, 0xc18b, 0xdfc0, 0xf395, 0x7639, 0x3adc, 0x1, 0x0);
        gbc.writeMem(0x9bf5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xc18b, gbc.sp());
        EXPECT(0x9bf7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bf5));
        EXPECT(0xbc, gbc.readMem(0x9bf6));
        // CB BC 0118
        gbc.setState(0x929e, 0x3570, 0xff80, 0x2aff, 0x38f4, 0x8aad, 0x0, 0x0);
        gbc.writeMem(0x929e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x3570, gbc.sp());
        EXPECT(0x92a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x929e));
        EXPECT(0xbc, gbc.readMem(0x929f));
        // CB BC 0119
        gbc.setState(0x38fd, 0x7da9, 0xae10, 0xb91b, 0x111, 0x2750, 0x0, 0x0);
        gbc.writeMem(0x38fd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x7da9, gbc.sp());
        EXPECT(0x38ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 011A
        gbc.setState(0x800f, 0xff95, 0x5820, 0x79ca, 0x5e4b, 0x790, 0x0, 0x0);
        gbc.writeMem(0x800f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xff95, gbc.sp());
        EXPECT(0x8011, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x800f));
        EXPECT(0xbc, gbc.readMem(0x8010));
        // CB BC 011C
        gbc.setState(0x4bed, 0x40dc, 0x8020, 0x4fac, 0xd841, 0xd1b4, 0x1, 0x0);
        gbc.writeMem(0x4bed, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x40dc, gbc.sp());
        EXPECT(0x4bef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 011D
        gbc.setState(0x7397, 0x78d4, 0x510, 0x49aa, 0x221, 0x5f40, 0x0, 0x1);
        gbc.writeMem(0x7397, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x78d4, gbc.sp());
        EXPECT(0x7399, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 011E
        gbc.setState(0xba11, 0xac01, 0xf820, 0xf952, 0x3b05, 0x565f, 0x0, 0x0);
        gbc.writeMem(0xba11, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xac01, gbc.sp());
        EXPECT(0xba13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba11));
        EXPECT(0xbc, gbc.readMem(0xba12));
        // CB BC 011F
        gbc.setState(0xd149, 0x2049, 0x3eb0, 0x66da, 0xd359, 0x6091, 0x0, 0x0);
        gbc.writeMem(0xd149, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x2049, gbc.sp());
        EXPECT(0xd14b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd149));
        EXPECT(0xbc, gbc.readMem(0xd14a));
        // CB BC 0120
        gbc.setState(0x3efe, 0xc94e, 0x20b0, 0x7374, 0xf150, 0xc8a1, 0x1, 0x0);
        gbc.writeMem(0x3efe, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xc94e, gbc.sp());
        EXPECT(0x3f00, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0121
        gbc.setState(0xe521, 0xeb6d, 0x8f00, 0x5fcc, 0xbf40, 0x1ac4, 0x1, 0x0);
        gbc.writeMem(0xe521, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xeb6d, gbc.sp());
        EXPECT(0xe523, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe521));
        EXPECT(0xbc, gbc.readMem(0xe522));
        // CB BC 0122
        gbc.setState(0xdaf8, 0x18b5, 0x8430, 0x5799, 0xae3f, 0x40fc, 0x0, 0x1);
        gbc.writeMem(0xdaf8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x18b5, gbc.sp());
        EXPECT(0xdafa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdaf8));
        EXPECT(0xbc, gbc.readMem(0xdaf9));
        // CB BC 0123
        gbc.setState(0x7adc, 0x9edc, 0x6800, 0xf051, 0x7899, 0x69fc, 0x0, 0x1);
        gbc.writeMem(0x7adc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x9edc, gbc.sp());
        EXPECT(0x7ade, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0124
        gbc.setState(0x8bb3, 0xf337, 0x15d0, 0x7be0, 0x4b86, 0xa0df, 0x0, 0x1);
        gbc.writeMem(0x8bb3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xf337, gbc.sp());
        EXPECT(0x8bb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bb3));
        EXPECT(0xbc, gbc.readMem(0x8bb4));
        // CB BC 0125
        gbc.setState(0xe8ce, 0xec3d, 0x40e0, 0x67cc, 0x1afa, 0x1390, 0x1, 0x1);
        gbc.writeMem(0xe8ce, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xec3d, gbc.sp());
        EXPECT(0xe8d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8ce));
        EXPECT(0xbc, gbc.readMem(0xe8cf));
        // CB BC 0126
        gbc.setState(0x8de, 0xca82, 0x6060, 0xe480, 0xc8ee, 0x7eb3, 0x1, 0x1);
        gbc.writeMem(0x8de, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xca82, gbc.sp());
        EXPECT(0x8e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0127
        gbc.setState(0xbbe0, 0x7c62, 0x6a50, 0x8d77, 0xf011, 0x96e7, 0x0, 0x1);
        gbc.writeMem(0xbbe0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x7c62, gbc.sp());
        EXPECT(0xbbe2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbe0));
        EXPECT(0xbc, gbc.readMem(0xbbe1));
        // CB BC 0128
        gbc.setState(0x2591, 0xff73, 0xcc50, 0xf773, 0xc63a, 0x9bb5, 0x0, 0x1);
        gbc.writeMem(0x2591, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xff73, gbc.sp());
        EXPECT(0x2593, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 012A
        gbc.setState(0x4b48, 0x4847, 0x44e0, 0xc28b, 0x6ad9, 0x7594, 0x0, 0x0);
        gbc.writeMem(0x4b48, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x4847, gbc.sp());
        EXPECT(0x4b4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 012B
        gbc.setState(0xa905, 0xa1d1, 0x6150, 0xeef2, 0xc0ce, 0x4671, 0x0, 0x0);
        gbc.writeMem(0xa905, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xa1d1, gbc.sp());
        EXPECT(0xa907, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa905));
        EXPECT(0xbc, gbc.readMem(0xa906));
        // CB BC 012C
        gbc.setState(0xd993, 0xa55c, 0x4be0, 0x1ad7, 0xf9e, 0x67eb, 0x0, 0x0);
        gbc.writeMem(0xd993, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xa55c, gbc.sp());
        EXPECT(0xd995, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd993));
        EXPECT(0xbc, gbc.readMem(0xd994));
        // CB BC 012D
        gbc.setState(0xe50a, 0xae2d, 0xa8a0, 0x467, 0xfb9a, 0x1e15, 0x0, 0x1);
        gbc.writeMem(0xe50a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xae2d, gbc.sp());
        EXPECT(0xe50c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe50a));
        EXPECT(0xbc, gbc.readMem(0xe50b));
        // CB BC 012E
        gbc.setState(0x75d5, 0x15ab, 0x30e0, 0xd184, 0x5207, 0x5d83, 0x0, 0x0);
        gbc.writeMem(0x75d5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x15ab, gbc.sp());
        EXPECT(0x75d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 012F
        gbc.setState(0xaab4, 0x390d, 0x38c0, 0x7996, 0x72c3, 0x2445, 0x1, 0x1);
        gbc.writeMem(0xaab4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x390d, gbc.sp());
        EXPECT(0xaab6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaab4));
        EXPECT(0xbc, gbc.readMem(0xaab5));
        // CB BC 0130
        gbc.setState(0x4dee, 0x1aec, 0x6510, 0x53fc, 0x5304, 0x7962, 0x0, 0x0);
        gbc.writeMem(0x4dee, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x1aec, gbc.sp());
        EXPECT(0x4df0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0131
        gbc.setState(0x26fd, 0x7764, 0xbc60, 0x2d66, 0xb365, 0x38b1, 0x1, 0x1);
        gbc.writeMem(0x26fd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x7764, gbc.sp());
        EXPECT(0x26ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0132
        gbc.setState(0xea97, 0x6d3, 0x4c70, 0x1329, 0x88de, 0x8dd4, 0x0, 0x0);
        gbc.writeMem(0xea97, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x6d3, gbc.sp());
        EXPECT(0xea99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea97));
        EXPECT(0xbc, gbc.readMem(0xea98));
        // CB BC 0133
        gbc.setState(0x15f, 0x7596, 0x1f20, 0xc938, 0x91ff, 0xb8ee, 0x0, 0x0);
        gbc.writeMem(0x15f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x7596, gbc.sp());
        EXPECT(0x161, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0134
        gbc.setState(0x41fd, 0x8a92, 0x1d80, 0x44c2, 0x9b0, 0x2f52, 0x0, 0x0);
        gbc.writeMem(0x41fd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x8a92, gbc.sp());
        EXPECT(0x41ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0135
        gbc.setState(0x9ef3, 0xd877, 0xacc0, 0x84d5, 0x72f8, 0xc788, 0x0, 0x0);
        gbc.writeMem(0x9ef3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xd877, gbc.sp());
        EXPECT(0x9ef5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ef3));
        EXPECT(0xbc, gbc.readMem(0x9ef4));
        // CB BC 0136
        gbc.setState(0x2fdb, 0xb80f, 0xeeb0, 0xffa4, 0x1039, 0xa180, 0x1, 0x1);
        gbc.writeMem(0x2fdb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xb80f, gbc.sp());
        EXPECT(0x2fdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0137
        gbc.setState(0xda9f, 0xc7d7, 0x28d0, 0xc1c2, 0xec7a, 0x5380, 0x1, 0x1);
        gbc.writeMem(0xda9f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xc7d7, gbc.sp());
        EXPECT(0xdaa1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda9f));
        EXPECT(0xbc, gbc.readMem(0xdaa0));
        // CB BC 0138
        gbc.setState(0xe429, 0x727b, 0xc990, 0x8745, 0xde32, 0xcb07, 0x1, 0x1);
        gbc.writeMem(0xe429, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x727b, gbc.sp());
        EXPECT(0xe42b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe429));
        EXPECT(0xbc, gbc.readMem(0xe42a));
        // CB BC 0139
        gbc.setState(0x8793, 0x6215, 0x50d0, 0x4b37, 0xfa8c, 0x70ef, 0x0, 0x0);
        gbc.writeMem(0x8793, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x6215, gbc.sp());
        EXPECT(0x8795, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8793));
        EXPECT(0xbc, gbc.readMem(0x8794));
        // CB BC 013A
        gbc.setState(0x979f, 0x4169, 0xb920, 0xe52, 0x5d43, 0xdd4e, 0x0, 0x1);
        gbc.writeMem(0x979f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x4169, gbc.sp());
        EXPECT(0x97a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x979f));
        EXPECT(0xbc, gbc.readMem(0x97a0));
        // CB BC 013B
        gbc.setState(0xcade, 0xe17b, 0x4410, 0xbb51, 0x96bc, 0xe61, 0x0, 0x0);
        gbc.writeMem(0xcade, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xe17b, gbc.sp());
        EXPECT(0xcae0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcade));
        EXPECT(0xbc, gbc.readMem(0xcadf));
        // CB BC 013C
        gbc.setState(0x8ac4, 0x838d, 0x8090, 0x833f, 0x2a12, 0x6424, 0x0, 0x1);
        gbc.writeMem(0x8ac4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x838d, gbc.sp());
        EXPECT(0x8ac6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ac4));
        EXPECT(0xbc, gbc.readMem(0x8ac5));
        // CB BC 013E
        gbc.setState(0xdb4e, 0x529f, 0x45e0, 0x9826, 0x9df7, 0x94d, 0x0, 0x0);
        gbc.writeMem(0xdb4e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x529f, gbc.sp());
        EXPECT(0xdb50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb4e));
        EXPECT(0xbc, gbc.readMem(0xdb4f));
        // CB BC 013F
        gbc.setState(0xd512, 0xa3bd, 0x9a70, 0x5096, 0x4c92, 0x1a5, 0x1, 0x0);
        gbc.writeMem(0xd512, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xa3bd, gbc.sp());
        EXPECT(0xd514, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd512));
        EXPECT(0xbc, gbc.readMem(0xd513));
        // CB BC 0140
        gbc.setState(0xff, 0xef74, 0x1480, 0x8ea8, 0x60a6, 0x6a19, 0x1, 0x0);
        gbc.writeMem(0xff, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xef74, gbc.sp());
        EXPECT(0x101, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0141
        gbc.setState(0x1b99, 0xc3ec, 0xe860, 0x8fdf, 0x70b8, 0xad9e, 0x0, 0x1);
        gbc.writeMem(0x1b99, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xc3ec, gbc.sp());
        EXPECT(0x1b9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0142
        gbc.setState(0xb18b, 0x1ac6, 0x9b90, 0xc15b, 0x596d, 0xa8d, 0x1, 0x1);
        gbc.writeMem(0xb18b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x1ac6, gbc.sp());
        EXPECT(0xb18d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb18b));
        EXPECT(0xbc, gbc.readMem(0xb18c));
        // CB BC 0143
        gbc.setState(0xe03c, 0x27d3, 0xc420, 0x5bd5, 0xa800, 0x8329, 0x0, 0x1);
        gbc.writeMem(0xe03c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x27d3, gbc.sp());
        EXPECT(0xe03e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe03c));
        EXPECT(0xbc, gbc.readMem(0xe03d));
        // CB BC 0144
        gbc.setState(0x987, 0xc7e, 0x7f0, 0x67e6, 0x894, 0x3e2, 0x1, 0x1);
        gbc.writeMem(0x987, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xc7e, gbc.sp());
        EXPECT(0x989, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0145
        gbc.setState(0x5ace, 0xda6e, 0x12b0, 0xf1f3, 0x3115, 0x5c67, 0x1, 0x1);
        gbc.writeMem(0x5ace, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xda6e, gbc.sp());
        EXPECT(0x5ad0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0146
        gbc.setState(0x9a27, 0x27ed, 0x4400, 0x5ced, 0x9dea, 0x1f2b, 0x1, 0x0);
        gbc.writeMem(0x9a27, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x27ed, gbc.sp());
        EXPECT(0x9a29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a27));
        EXPECT(0xbc, gbc.readMem(0x9a28));
        // CB BC 0147
        gbc.setState(0x6c6c, 0xb131, 0xa990, 0x74b5, 0x569f, 0xf02a, 0x1, 0x0);
        gbc.writeMem(0x6c6c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xb131, gbc.sp());
        EXPECT(0x6c6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0148
        gbc.setState(0xd56a, 0x868d, 0x80c0, 0xcc56, 0xcc4d, 0xbf7f, 0x1, 0x0);
        gbc.writeMem(0xd56a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x868d, gbc.sp());
        EXPECT(0xd56c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd56a));
        EXPECT(0xbc, gbc.readMem(0xd56b));
        // CB BC 0149
        gbc.setState(0x7d72, 0x7772, 0xb420, 0xbde2, 0xaa92, 0x41cc, 0x1, 0x0);
        gbc.writeMem(0x7d72, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x7772, gbc.sp());
        EXPECT(0x7d74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 014A
        gbc.setState(0x492a, 0xff6c, 0x510, 0x34dd, 0x6643, 0xa347, 0x1, 0x1);
        gbc.writeMem(0x492a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xff6c, gbc.sp());
        EXPECT(0x492c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 014B
        gbc.setState(0x5d7e, 0x45af, 0xc010, 0xc9d7, 0x8690, 0xffe9, 0x1, 0x1);
        gbc.writeMem(0x5d7e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x45af, gbc.sp());
        EXPECT(0x5d80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 014C
        gbc.setState(0x13a, 0x14b1, 0x3630, 0xd536, 0xa132, 0xbd9d, 0x0, 0x1);
        gbc.writeMem(0x13a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x14b1, gbc.sp());
        EXPECT(0x13c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 014D
        gbc.setState(0x7a7, 0x9485, 0x8490, 0xe019, 0xf8fe, 0x5f07, 0x1, 0x0);
        gbc.writeMem(0x7a7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x9485, gbc.sp());
        EXPECT(0x7a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 014E
        gbc.setState(0x35bc, 0x2aba, 0x3280, 0xc5d4, 0x5d6, 0x46bc, 0x1, 0x0);
        gbc.writeMem(0x35bc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x2aba, gbc.sp());
        EXPECT(0x35be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 014F
        gbc.setState(0xbaec, 0xcfec, 0xc820, 0x90fc, 0xca8d, 0x47e9, 0x0, 0x0);
        gbc.writeMem(0xbaec, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xcfec, gbc.sp());
        EXPECT(0xbaee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaec));
        EXPECT(0xbc, gbc.readMem(0xbaed));
        // CB BC 0150
        gbc.setState(0xef89, 0x3e22, 0x3d00, 0x17f7, 0x3a3a, 0xcaa0, 0x1, 0x1);
        gbc.writeMem(0xef89, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x3e22, gbc.sp());
        EXPECT(0xef8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef89));
        EXPECT(0xbc, gbc.readMem(0xef8a));
        // CB BC 0151
        gbc.setState(0x7c90, 0xd66a, 0x9f80, 0x5437, 0xeae8, 0xb225, 0x1, 0x0);
        gbc.writeMem(0x7c90, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xd66a, gbc.sp());
        EXPECT(0x7c92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0152
        gbc.setState(0x6158, 0xb496, 0x4790, 0xa95, 0x2921, 0x88c7, 0x1, 0x0);
        gbc.writeMem(0x6158, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xb496, gbc.sp());
        EXPECT(0x615a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0153
        gbc.setState(0xd08f, 0x84b5, 0x84a0, 0xd1a8, 0xb12a, 0x57a3, 0x0, 0x0);
        gbc.writeMem(0xd08f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x84b5, gbc.sp());
        EXPECT(0xd091, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd08f));
        EXPECT(0xbc, gbc.readMem(0xd090));
        // CB BC 0154
        gbc.setState(0xc05e, 0x6a37, 0xd6d0, 0xca25, 0x4af7, 0x2125, 0x0, 0x1);
        gbc.writeMem(0xc05e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x6a37, gbc.sp());
        EXPECT(0xc060, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc05e));
        EXPECT(0xbc, gbc.readMem(0xc05f));
        // CB BC 0155
        gbc.setState(0xb64, 0x8790, 0xb450, 0x2984, 0xe2ce, 0x973c, 0x0, 0x1);
        gbc.writeMem(0xb64, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x8790, gbc.sp());
        EXPECT(0xb66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0156
        gbc.setState(0x42ae, 0x4a87, 0x3400, 0x2ac1, 0xc45, 0x98fb, 0x0, 0x1);
        gbc.writeMem(0x42ae, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x4a87, gbc.sp());
        EXPECT(0x42b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0157
        gbc.setState(0xe44a, 0xa815, 0x2890, 0x576f, 0x4aad, 0x538a, 0x1, 0x0);
        gbc.writeMem(0xe44a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xa815, gbc.sp());
        EXPECT(0xe44c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe44a));
        EXPECT(0xbc, gbc.readMem(0xe44b));
        // CB BC 0158
        gbc.setState(0xe642, 0x4606, 0x7380, 0x9bba, 0x30ec, 0xe49e, 0x0, 0x0);
        gbc.writeMem(0xe642, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x4606, gbc.sp());
        EXPECT(0xe644, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe642));
        EXPECT(0xbc, gbc.readMem(0xe643));
        // CB BC 0159
        gbc.setState(0x91ec, 0xde43, 0xcaf0, 0x110, 0xf927, 0x1965, 0x1, 0x1);
        gbc.writeMem(0x91ec, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xde43, gbc.sp());
        EXPECT(0x91ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91ec));
        EXPECT(0xbc, gbc.readMem(0x91ed));
        // CB BC 015A
        gbc.setState(0x2bb5, 0x1d74, 0x4b90, 0x57a2, 0x33cd, 0x13db, 0x1, 0x0);
        gbc.writeMem(0x2bb5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x1d74, gbc.sp());
        EXPECT(0x2bb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 015B
        gbc.setState(0x5187, 0xb52d, 0x6990, 0xe54e, 0x2c7b, 0xd71d, 0x1, 0x0);
        gbc.writeMem(0x5187, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xb52d, gbc.sp());
        EXPECT(0x5189, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 015C
        gbc.setState(0x3d6c, 0xfb5c, 0x6220, 0xe1b2, 0x39f6, 0xf215, 0x1, 0x0);
        gbc.writeMem(0x3d6c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xfb5c, gbc.sp());
        EXPECT(0x3d6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 015D
        gbc.setState(0xdc9c, 0xf2e3, 0x11a0, 0x1b10, 0xf33c, 0xb05f, 0x0, 0x0);
        gbc.writeMem(0xdc9c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xf2e3, gbc.sp());
        EXPECT(0xdc9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc9c));
        EXPECT(0xbc, gbc.readMem(0xdc9d));
        // CB BC 015E
        gbc.setState(0xd77b, 0xe95d, 0xe5a0, 0x6b8d, 0xa6b1, 0x4d3, 0x1, 0x1);
        gbc.writeMem(0xd77b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xe95d, gbc.sp());
        EXPECT(0xd77d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd77b));
        EXPECT(0xbc, gbc.readMem(0xd77c));
        // CB BC 015F
        gbc.setState(0xc5a2, 0x945d, 0x69b0, 0x4343, 0xe4c9, 0xed92, 0x0, 0x1);
        gbc.writeMem(0xc5a2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x945d, gbc.sp());
        EXPECT(0xc5a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5a2));
        EXPECT(0xbc, gbc.readMem(0xc5a3));
        // CB BC 0160
        gbc.setState(0x88d4, 0x3008, 0x1cd0, 0xa7ee, 0x810c, 0xf162, 0x0, 0x0);
        gbc.writeMem(0x88d4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x3008, gbc.sp());
        EXPECT(0x88d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88d4));
        EXPECT(0xbc, gbc.readMem(0x88d5));
        // CB BC 0161
        gbc.setState(0x1cb7, 0x70f5, 0x99f0, 0xfa70, 0xc108, 0x4b62, 0x0, 0x0);
        gbc.writeMem(0x1cb7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x70f5, gbc.sp());
        EXPECT(0x1cb9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0162
        gbc.setState(0xe868, 0x351c, 0x60, 0x5867, 0x3e35, 0xa222, 0x1, 0x0);
        gbc.writeMem(0xe868, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x351c, gbc.sp());
        EXPECT(0xe86a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe868));
        EXPECT(0xbc, gbc.readMem(0xe869));
        // CB BC 0163
        gbc.setState(0x92fe, 0x9739, 0xaf80, 0x2336, 0xd57e, 0x7dd2, 0x0, 0x0);
        gbc.writeMem(0x92fe, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x9739, gbc.sp());
        EXPECT(0x9300, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92fe));
        EXPECT(0xbc, gbc.readMem(0x92ff));
        // CB BC 0164
        gbc.setState(0x57fb, 0xc86e, 0x69a0, 0x5eab, 0x7399, 0xc068, 0x0, 0x0);
        gbc.writeMem(0x57fb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xc86e, gbc.sp());
        EXPECT(0x57fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0165
        gbc.setState(0xbebd, 0x2db1, 0xb3a0, 0x69ab, 0xce43, 0x712e, 0x0, 0x1);
        gbc.writeMem(0xbebd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x2db1, gbc.sp());
        EXPECT(0xbebf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbebd));
        EXPECT(0xbc, gbc.readMem(0xbebe));
        // CB BC 0166
        gbc.setState(0xca03, 0xc6d6, 0xeba0, 0x8414, 0x2331, 0xd177, 0x0, 0x0);
        gbc.writeMem(0xca03, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xc6d6, gbc.sp());
        EXPECT(0xca05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca03));
        EXPECT(0xbc, gbc.readMem(0xca04));
        // CB BC 0167
        gbc.setState(0x1904, 0x6d90, 0x6600, 0xee2f, 0x3658, 0x5422, 0x0, 0x1);
        gbc.writeMem(0x1904, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x6d90, gbc.sp());
        EXPECT(0x1906, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0168
        gbc.setState(0xf2b, 0x6584, 0xfb70, 0xa90c, 0x7628, 0x9b9, 0x0, 0x1);
        gbc.writeMem(0xf2b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x6584, gbc.sp());
        EXPECT(0xf2d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0169
        gbc.setState(0x201a, 0x66c8, 0x97a0, 0x79e1, 0xa8db, 0xaca9, 0x1, 0x1);
        gbc.writeMem(0x201a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x66c8, gbc.sp());
        EXPECT(0x201c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 016A
        gbc.setState(0x3910, 0xf3ec, 0x2c50, 0xb82f, 0x6094, 0x5446, 0x1, 0x0);
        gbc.writeMem(0x3910, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xf3ec, gbc.sp());
        EXPECT(0x3912, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 016B
        gbc.setState(0x6615, 0xdc46, 0x1f40, 0x792e, 0xddab, 0x472f, 0x1, 0x0);
        gbc.writeMem(0x6615, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xdc46, gbc.sp());
        EXPECT(0x6617, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 016C
        gbc.setState(0xe64d, 0x965e, 0x9830, 0x83ca, 0x4d37, 0x3b40, 0x0, 0x1);
        gbc.writeMem(0xe64d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x965e, gbc.sp());
        EXPECT(0xe64f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe64d));
        EXPECT(0xbc, gbc.readMem(0xe64e));
        // CB BC 016D
        gbc.setState(0x7493, 0x8279, 0xd70, 0xb2dd, 0x2511, 0x4c50, 0x0, 0x1);
        gbc.writeMem(0x7493, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x8279, gbc.sp());
        EXPECT(0x7495, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 016E
        gbc.setState(0x746d, 0xdf2e, 0xb710, 0x41db, 0x2275, 0xdc68, 0x1, 0x0);
        gbc.writeMem(0x746d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xdf2e, gbc.sp());
        EXPECT(0x746f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 016F
        gbc.setState(0x198d, 0x3fcd, 0x97f0, 0x8e3a, 0xcac9, 0x3928, 0x0, 0x1);
        gbc.writeMem(0x198d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x3fcd, gbc.sp());
        EXPECT(0x198f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0170
        gbc.setState(0xe7e2, 0xb1b2, 0xef00, 0x78b6, 0x457d, 0x6f7c, 0x1, 0x0);
        gbc.writeMem(0xe7e2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xb1b2, gbc.sp());
        EXPECT(0xe7e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7e2));
        EXPECT(0xbc, gbc.readMem(0xe7e3));
        // CB BC 0171
        gbc.setState(0x4aa2, 0x5f54, 0x2e0, 0x276f, 0x3aa1, 0xdfcb, 0x1, 0x0);
        gbc.writeMem(0x4aa2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x5f54, gbc.sp());
        EXPECT(0x4aa4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0172
        gbc.setState(0x2e67, 0xdc07, 0xbae0, 0x687a, 0xbe98, 0xb875, 0x1, 0x1);
        gbc.writeMem(0x2e67, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xdc07, gbc.sp());
        EXPECT(0x2e69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0173
        gbc.setState(0x97a6, 0x550b, 0x4cb0, 0xe89d, 0xa5be, 0xfc20, 0x0, 0x0);
        gbc.writeMem(0x97a6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x550b, gbc.sp());
        EXPECT(0x97a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97a6));
        EXPECT(0xbc, gbc.readMem(0x97a7));
        // CB BC 0174
        gbc.setState(0x8f82, 0xefa0, 0xbff0, 0xf4ec, 0xacd8, 0x3cb9, 0x1, 0x1);
        gbc.writeMem(0x8f82, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xefa0, gbc.sp());
        EXPECT(0x8f84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f82));
        EXPECT(0xbc, gbc.readMem(0x8f83));
        // CB BC 0175
        gbc.setState(0xa31f, 0xdeab, 0x2860, 0x7bbc, 0xb854, 0x32b5, 0x0, 0x0);
        gbc.writeMem(0xa31f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xdeab, gbc.sp());
        EXPECT(0xa321, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa31f));
        EXPECT(0xbc, gbc.readMem(0xa320));
        // CB BC 0176
        gbc.setState(0xce73, 0x9023, 0x85f0, 0xebeb, 0xa9af, 0x94ca, 0x0, 0x1);
        gbc.writeMem(0xce73, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x9023, gbc.sp());
        EXPECT(0xce75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce73));
        EXPECT(0xbc, gbc.readMem(0xce74));
        // CB BC 0177
        gbc.setState(0x8d4b, 0xe18, 0x4fe0, 0x2ed9, 0x86d9, 0x16c9, 0x1, 0x1);
        gbc.writeMem(0x8d4b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xe18, gbc.sp());
        EXPECT(0x8d4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d4b));
        EXPECT(0xbc, gbc.readMem(0x8d4c));
        // CB BC 0178
        gbc.setState(0xb810, 0x4020, 0x5ee0, 0xc9ad, 0x4968, 0x21f5, 0x1, 0x0);
        gbc.writeMem(0xb810, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x4020, gbc.sp());
        EXPECT(0xb812, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb810));
        EXPECT(0xbc, gbc.readMem(0xb811));
        // CB BC 0179
        gbc.setState(0xf3, 0x2d62, 0x1660, 0xf7f6, 0xd826, 0xe5aa, 0x1, 0x0);
        gbc.writeMem(0xf3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x2d62, gbc.sp());
        EXPECT(0xf5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 017A
        gbc.setState(0xdbcf, 0xd92b, 0xcdd0, 0xccf0, 0xa9f0, 0x89f7, 0x1, 0x1);
        gbc.writeMem(0xdbcf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xd92b, gbc.sp());
        EXPECT(0xdbd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbcf));
        EXPECT(0xbc, gbc.readMem(0xdbd0));
        // CB BC 017B
        gbc.setState(0xd810, 0xe36a, 0xe910, 0x6601, 0xc728, 0x5eae, 0x1, 0x1);
        gbc.writeMem(0xd810, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xe36a, gbc.sp());
        EXPECT(0xd812, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd810));
        EXPECT(0xbc, gbc.readMem(0xd811));
        // CB BC 017C
        gbc.setState(0x9cb5, 0x63d4, 0x48b0, 0x37e6, 0xa7d8, 0x4642, 0x1, 0x1);
        gbc.writeMem(0x9cb5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x63d4, gbc.sp());
        EXPECT(0x9cb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cb5));
        EXPECT(0xbc, gbc.readMem(0x9cb6));
        // CB BC 017D
        gbc.setState(0xa032, 0x4489, 0x5d80, 0xf9ae, 0x4f81, 0x321f, 0x1, 0x0);
        gbc.writeMem(0xa032, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x4489, gbc.sp());
        EXPECT(0xa034, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa032));
        EXPECT(0xbc, gbc.readMem(0xa033));
        // CB BC 017E
        gbc.setState(0x32fd, 0xe926, 0x1860, 0x8d96, 0x3801, 0x76de, 0x1, 0x1);
        gbc.writeMem(0x32fd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xe926, gbc.sp());
        EXPECT(0x32ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 017F
        gbc.setState(0x8d42, 0x629b, 0xf430, 0x52e, 0x82db, 0x7cb1, 0x1, 0x1);
        gbc.writeMem(0x8d42, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x629b, gbc.sp());
        EXPECT(0x8d44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d42));
        EXPECT(0xbc, gbc.readMem(0x8d43));
        // CB BC 0181
        gbc.setState(0x5a10, 0xdf14, 0x64c0, 0xde2e, 0xf753, 0x5812, 0x1, 0x0);
        gbc.writeMem(0x5a10, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xdf14, gbc.sp());
        EXPECT(0x5a12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0182
        gbc.setState(0x680, 0x2b90, 0xd730, 0xb236, 0xebfd, 0x175e, 0x0, 0x0);
        gbc.writeMem(0x680, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x2b90, gbc.sp());
        EXPECT(0x682, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0183
        gbc.setState(0xdda2, 0xc3ac, 0xa4e0, 0xf0f3, 0xfbd4, 0xade9, 0x0, 0x1);
        gbc.writeMem(0xdda2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xc3ac, gbc.sp());
        EXPECT(0xdda4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdda2));
        EXPECT(0xbc, gbc.readMem(0xdda3));
        // CB BC 0184
        gbc.setState(0x70df, 0x66bf, 0xd3b0, 0xf657, 0x5143, 0xfa39, 0x0, 0x1);
        gbc.writeMem(0x70df, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x66bf, gbc.sp());
        EXPECT(0x70e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0185
        gbc.setState(0x9001, 0x986c, 0xf6f0, 0x5f8, 0x294c, 0x49ba, 0x1, 0x0);
        gbc.writeMem(0x9001, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x986c, gbc.sp());
        EXPECT(0x9003, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9001));
        EXPECT(0xbc, gbc.readMem(0x9002));
        // CB BC 0186
        gbc.setState(0x6a58, 0xeecf, 0x5b60, 0xb95, 0xcdfa, 0xc6c7, 0x0, 0x1);
        gbc.writeMem(0x6a58, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xeecf, gbc.sp());
        EXPECT(0x6a5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0187
        gbc.setState(0x75d2, 0x764, 0x93b0, 0xf04f, 0x44ec, 0xbc21, 0x1, 0x0);
        gbc.writeMem(0x75d2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x764, gbc.sp());
        EXPECT(0x75d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0188
        gbc.setState(0x74ff, 0x1cce, 0x44f0, 0x402, 0x1a49, 0x86a, 0x0, 0x0);
        gbc.writeMem(0x74ff, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x1cce, gbc.sp());
        EXPECT(0x7501, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0189
        gbc.setState(0x86a1, 0x7f22, 0x91c0, 0x7656, 0xe425, 0x2f6d, 0x1, 0x0);
        gbc.writeMem(0x86a1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x7f22, gbc.sp());
        EXPECT(0x86a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86a1));
        EXPECT(0xbc, gbc.readMem(0x86a2));
        // CB BC 018A
        gbc.setState(0x97da, 0x6742, 0x6c50, 0x250b, 0x3, 0xe04c, 0x0, 0x0);
        gbc.writeMem(0x97da, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x6742, gbc.sp());
        EXPECT(0x97dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97da));
        EXPECT(0xbc, gbc.readMem(0x97db));
        // CB BC 018B
        gbc.setState(0xea51, 0xf2e6, 0x9610, 0xc926, 0x302f, 0x15c, 0x0, 0x1);
        gbc.writeMem(0xea51, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xf2e6, gbc.sp());
        EXPECT(0xea53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea51));
        EXPECT(0xbc, gbc.readMem(0xea52));
        // CB BC 018C
        gbc.setState(0xcf23, 0x1574, 0xd520, 0x90d5, 0x62e4, 0x2263, 0x1, 0x1);
        gbc.writeMem(0xcf23, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x1574, gbc.sp());
        EXPECT(0xcf25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf23));
        EXPECT(0xbc, gbc.readMem(0xcf24));
        // CB BC 018D
        gbc.setState(0xab78, 0x9b29, 0x1e10, 0x960d, 0x4dce, 0xbd27, 0x1, 0x1);
        gbc.writeMem(0xab78, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x9b29, gbc.sp());
        EXPECT(0xab7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab78));
        EXPECT(0xbc, gbc.readMem(0xab79));
        // CB BC 018E
        gbc.setState(0x7a3, 0xf796, 0xee40, 0xdf22, 0x4299, 0xbdf0, 0x0, 0x0);
        gbc.writeMem(0x7a3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xf796, gbc.sp());
        EXPECT(0x7a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 018F
        gbc.setState(0xcf91, 0xf2a2, 0x1310, 0x940b, 0x4a86, 0x7b76, 0x1, 0x0);
        gbc.writeMem(0xcf91, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xf2a2, gbc.sp());
        EXPECT(0xcf93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf91));
        EXPECT(0xbc, gbc.readMem(0xcf92));
        // CB BC 0190
        gbc.setState(0x53b3, 0xc1fc, 0xd110, 0x77d1, 0x354b, 0xd73b, 0x1, 0x0);
        gbc.writeMem(0x53b3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xc1fc, gbc.sp());
        EXPECT(0x53b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0191
        gbc.setState(0xbeb4, 0x5bef, 0xb200, 0xef73, 0xc53f, 0x2e78, 0x1, 0x1);
        gbc.writeMem(0xbeb4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x5bef, gbc.sp());
        EXPECT(0xbeb6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbeb4));
        EXPECT(0xbc, gbc.readMem(0xbeb5));
        // CB BC 0192
        gbc.setState(0xe338, 0xee8d, 0xc7d0, 0x8856, 0x4e03, 0x4499, 0x0, 0x0);
        gbc.writeMem(0xe338, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xee8d, gbc.sp());
        EXPECT(0xe33a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe338));
        EXPECT(0xbc, gbc.readMem(0xe339));
        // CB BC 0193
        gbc.setState(0x1044, 0x81fd, 0x1790, 0xe573, 0x7b48, 0x9969, 0x1, 0x1);
        gbc.writeMem(0x1044, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x81fd, gbc.sp());
        EXPECT(0x1046, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0194
        gbc.setState(0xe1dd, 0xe64e, 0xf50, 0x7a4c, 0x9908, 0x3792, 0x0, 0x1);
        gbc.writeMem(0xe1dd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xe64e, gbc.sp());
        EXPECT(0xe1df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1dd));
        EXPECT(0xbc, gbc.readMem(0xe1de));
        // CB BC 0195
        gbc.setState(0xec83, 0x5e45, 0x70a0, 0xe0fe, 0xb0af, 0xb7ca, 0x0, 0x0);
        gbc.writeMem(0xec83, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x5e45, gbc.sp());
        EXPECT(0xec85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec83));
        EXPECT(0xbc, gbc.readMem(0xec84));
        // CB BC 0196
        gbc.setState(0xcea7, 0xaf5, 0xf220, 0xc460, 0xa78b, 0x4b7f, 0x0, 0x1);
        gbc.writeMem(0xcea7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xaf5, gbc.sp());
        EXPECT(0xcea9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcea7));
        EXPECT(0xbc, gbc.readMem(0xcea8));
        // CB BC 0197
        gbc.setState(0x99b7, 0xc757, 0x5630, 0xe2f3, 0x21b0, 0xe3bd, 0x0, 0x1);
        gbc.writeMem(0x99b7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xc757, gbc.sp());
        EXPECT(0x99b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99b7));
        EXPECT(0xbc, gbc.readMem(0x99b8));
        // CB BC 0198
        gbc.setState(0x4ee9, 0x13bb, 0x8200, 0xcb68, 0x73d5, 0xa1f8, 0x1, 0x1);
        gbc.writeMem(0x4ee9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x13bb, gbc.sp());
        EXPECT(0x4eeb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 019A
        gbc.setState(0x7d19, 0xd6d6, 0xb930, 0xff84, 0x5ad5, 0x7489, 0x0, 0x1);
        gbc.writeMem(0x7d19, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xd6d6, gbc.sp());
        EXPECT(0x7d1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 019B
        gbc.setState(0x38cc, 0x413b, 0x40, 0x5a5c, 0x3985, 0x3c02, 0x0, 0x1);
        gbc.writeMem(0x38cc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x413b, gbc.sp());
        EXPECT(0x38ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 019C
        gbc.setState(0x840b, 0xfcdf, 0xba00, 0xa69d, 0xb147, 0x7296, 0x1, 0x1);
        gbc.writeMem(0x840b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xfcdf, gbc.sp());
        EXPECT(0x840d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x840b));
        EXPECT(0xbc, gbc.readMem(0x840c));
        // CB BC 019D
        gbc.setState(0xa92b, 0xcacf, 0xa130, 0x8677, 0x52ed, 0xca8b, 0x0, 0x1);
        gbc.writeMem(0xa92b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xcacf, gbc.sp());
        EXPECT(0xa92d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa92b));
        EXPECT(0xbc, gbc.readMem(0xa92c));
        // CB BC 019E
        gbc.setState(0x8791, 0xcdf8, 0xc5e0, 0x69d5, 0x9bf, 0x3604, 0x0, 0x1);
        gbc.writeMem(0x8791, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xcdf8, gbc.sp());
        EXPECT(0x8793, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8791));
        EXPECT(0xbc, gbc.readMem(0x8792));
        // CB BC 019F
        gbc.setState(0x7928, 0x58cc, 0xf610, 0x4e96, 0x4f83, 0x6820, 0x0, 0x1);
        gbc.writeMem(0x7928, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x58cc, gbc.sp());
        EXPECT(0x792a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01A0
        gbc.setState(0x6487, 0x34e3, 0xf490, 0x1c7e, 0x68c0, 0xe564, 0x0, 0x1);
        gbc.writeMem(0x6487, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x34e3, gbc.sp());
        EXPECT(0x6489, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01A1
        gbc.setState(0x408b, 0x6576, 0x41b0, 0xdb8d, 0xeb4e, 0x12fa, 0x0, 0x1);
        gbc.writeMem(0x408b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x6576, gbc.sp());
        EXPECT(0x408d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01A2
        gbc.setState(0x26a3, 0x5044, 0xb140, 0x5bfb, 0x215a, 0x4b12, 0x0, 0x0);
        gbc.writeMem(0x26a3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x5044, gbc.sp());
        EXPECT(0x26a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01A3
        gbc.setState(0xc822, 0x5e79, 0x32d0, 0x336c, 0x5c5f, 0x7622, 0x1, 0x1);
        gbc.writeMem(0xc822, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x5e79, gbc.sp());
        EXPECT(0xc824, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc822));
        EXPECT(0xbc, gbc.readMem(0xc823));
        // CB BC 01A4
        gbc.setState(0xe614, 0x168b, 0xeb40, 0xc14c, 0x9676, 0xca03, 0x0, 0x0);
        gbc.writeMem(0xe614, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x168b, gbc.sp());
        EXPECT(0xe616, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe614));
        EXPECT(0xbc, gbc.readMem(0xe615));
        // CB BC 01A5
        gbc.setState(0x118d, 0x3026, 0xb2a0, 0x8476, 0x5463, 0x6cc7, 0x1, 0x1);
        gbc.writeMem(0x118d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x3026, gbc.sp());
        EXPECT(0x118f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01A6
        gbc.setState(0xc7c9, 0x21e, 0x7680, 0xe67, 0x485b, 0xf65, 0x1, 0x0);
        gbc.writeMem(0xc7c9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x21e, gbc.sp());
        EXPECT(0xc7cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7c9));
        EXPECT(0xbc, gbc.readMem(0xc7ca));
        // CB BC 01A7
        gbc.setState(0x47b8, 0x7cd6, 0x16d0, 0x4c0c, 0x69b2, 0x6757, 0x0, 0x1);
        gbc.writeMem(0x47b8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x7cd6, gbc.sp());
        EXPECT(0x47ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01A9
        gbc.setState(0x5315, 0xa30d, 0xd140, 0xffd2, 0x14ee, 0x488c, 0x1, 0x1);
        gbc.writeMem(0x5315, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xa30d, gbc.sp());
        EXPECT(0x5317, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01AA
        gbc.setState(0x9267, 0xad6a, 0x12e0, 0x776e, 0x6610, 0xd90f, 0x0, 0x1);
        gbc.writeMem(0x9267, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xad6a, gbc.sp());
        EXPECT(0x9269, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9267));
        EXPECT(0xbc, gbc.readMem(0x9268));
        // CB BC 01AB
        gbc.setState(0x3b22, 0x2b79, 0x1fa0, 0xb7cb, 0x3326, 0xaf2f, 0x0, 0x1);
        gbc.writeMem(0x3b22, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x2b79, gbc.sp());
        EXPECT(0x3b24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01AC
        gbc.setState(0x9f28, 0x2702, 0xfab0, 0x342e, 0x294, 0x3514, 0x0, 0x0);
        gbc.writeMem(0x9f28, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x2702, gbc.sp());
        EXPECT(0x9f2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f28));
        EXPECT(0xbc, gbc.readMem(0x9f29));
        // CB BC 01AD
        gbc.setState(0xbef2, 0x9bc3, 0xbc90, 0x1352, 0xa11d, 0x46f9, 0x1, 0x0);
        gbc.writeMem(0xbef2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x9bc3, gbc.sp());
        EXPECT(0xbef4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbef2));
        EXPECT(0xbc, gbc.readMem(0xbef3));
        // CB BC 01AE
        gbc.setState(0x6ba5, 0x1149, 0x87c0, 0x7ad, 0x325f, 0x7e32, 0x1, 0x0);
        gbc.writeMem(0x6ba5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x1149, gbc.sp());
        EXPECT(0x6ba7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01AF
        gbc.setState(0x7b2f, 0xaa55, 0x4bc0, 0x915f, 0x2fda, 0x67bf, 0x1, 0x1);
        gbc.writeMem(0x7b2f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xaa55, gbc.sp());
        EXPECT(0x7b31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01B0
        gbc.setState(0x5604, 0xdd9e, 0xb110, 0x892, 0x52af, 0xb544, 0x1, 0x1);
        gbc.writeMem(0x5604, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xdd9e, gbc.sp());
        EXPECT(0x5606, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01B1
        gbc.setState(0x5625, 0xf604, 0x5d20, 0x3f9a, 0x129e, 0xf321, 0x1, 0x0);
        gbc.writeMem(0x5625, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xf604, gbc.sp());
        EXPECT(0x5627, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01B2
        gbc.setState(0x9b40, 0x38a6, 0x4d20, 0x5ee8, 0x85b1, 0x64e2, 0x1, 0x1);
        gbc.writeMem(0x9b40, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x38a6, gbc.sp());
        EXPECT(0x9b42, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b40));
        EXPECT(0xbc, gbc.readMem(0x9b41));
        // CB BC 01B3
        gbc.setState(0x4138, 0xecbe, 0x1cf0, 0xe9e, 0x7cd, 0x399b, 0x1, 0x0);
        gbc.writeMem(0x4138, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xecbe, gbc.sp());
        EXPECT(0x413a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01B4
        gbc.setState(0xc1, 0x2a7, 0x8e70, 0x1fb9, 0x3971, 0xc0b, 0x1, 0x1);
        gbc.writeMem(0xc1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x2a7, gbc.sp());
        EXPECT(0xc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01B5
        gbc.setState(0x1039, 0x9baf, 0x4620, 0x8d2f, 0x8300, 0x937a, 0x0, 0x1);
        gbc.writeMem(0x1039, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x9baf, gbc.sp());
        EXPECT(0x103b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01B6
        gbc.setState(0xb444, 0x3108, 0x2a60, 0x4ba4, 0xab70, 0xdd27, 0x0, 0x1);
        gbc.writeMem(0xb444, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x3108, gbc.sp());
        EXPECT(0xb446, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb444));
        EXPECT(0xbc, gbc.readMem(0xb445));
        // CB BC 01B7
        gbc.setState(0x6d50, 0x1fc2, 0xfc10, 0x1b, 0xb444, 0xd78f, 0x0, 0x1);
        gbc.writeMem(0x6d50, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x1fc2, gbc.sp());
        EXPECT(0x6d52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01B8
        gbc.setState(0x22dd, 0xb826, 0x7840, 0x3168, 0xc02a, 0x399b, 0x1, 0x1);
        gbc.writeMem(0x22dd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xb826, gbc.sp());
        EXPECT(0x22df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01B9
        gbc.setState(0x5b33, 0x19ad, 0xfaf0, 0xe72b, 0xef2a, 0xe28f, 0x0, 0x0);
        gbc.writeMem(0x5b33, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x19ad, gbc.sp());
        EXPECT(0x5b35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01BA
        gbc.setState(0xaa39, 0x5c5b, 0x61b0, 0x809e, 0x5929, 0x4e42, 0x0, 0x0);
        gbc.writeMem(0xaa39, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x5c5b, gbc.sp());
        EXPECT(0xaa3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa39));
        EXPECT(0xbc, gbc.readMem(0xaa3a));
        // CB BC 01BB
        gbc.setState(0xea87, 0x8199, 0xa090, 0x6f1f, 0xec48, 0xed22, 0x0, 0x0);
        gbc.writeMem(0xea87, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x8199, gbc.sp());
        EXPECT(0xea89, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea87));
        EXPECT(0xbc, gbc.readMem(0xea88));
        // CB BC 01BC
        gbc.setState(0xaaa8, 0xec87, 0x8ff0, 0xcc41, 0x2c6b, 0x7f31, 0x1, 0x1);
        gbc.writeMem(0xaaa8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xec87, gbc.sp());
        EXPECT(0xaaaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaaa8));
        EXPECT(0xbc, gbc.readMem(0xaaa9));
        // CB BC 01BD
        gbc.setState(0x330e, 0x8972, 0x7530, 0x6985, 0xb5c4, 0x3b20, 0x0, 0x0);
        gbc.writeMem(0x330e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x8972, gbc.sp());
        EXPECT(0x3310, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01BE
        gbc.setState(0xaa27, 0x1e39, 0x59a0, 0x31c3, 0x9deb, 0xc601, 0x1, 0x0);
        gbc.writeMem(0xaa27, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x1e39, gbc.sp());
        EXPECT(0xaa29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa27));
        EXPECT(0xbc, gbc.readMem(0xaa28));
        // CB BC 01BF
        gbc.setState(0xdbcd, 0xf914, 0x1640, 0x9db1, 0x8e6a, 0xd13f, 0x0, 0x1);
        gbc.writeMem(0xdbcd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xf914, gbc.sp());
        EXPECT(0xdbcf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbcd));
        EXPECT(0xbc, gbc.readMem(0xdbce));
        // CB BC 01C0
        gbc.setState(0x20b4, 0x39ed, 0x1d90, 0x6715, 0x8a0a, 0x8f76, 0x1, 0x1);
        gbc.writeMem(0x20b4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x39ed, gbc.sp());
        EXPECT(0x20b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01C1
        gbc.setState(0xa4b7, 0x3a57, 0x4b20, 0x10da, 0xa129, 0xa34b, 0x1, 0x1);
        gbc.writeMem(0xa4b7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x3a57, gbc.sp());
        EXPECT(0xa4b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4b7));
        EXPECT(0xbc, gbc.readMem(0xa4b8));
        // CB BC 01C2
        gbc.setState(0x6e37, 0x9e40, 0xc9d0, 0x28c5, 0x556b, 0x3bca, 0x1, 0x0);
        gbc.writeMem(0x6e37, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x9e40, gbc.sp());
        EXPECT(0x6e39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01C3
        gbc.setState(0x358e, 0x85ef, 0xb050, 0x9522, 0x1f38, 0x865f, 0x1, 0x0);
        gbc.writeMem(0x358e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x85ef, gbc.sp());
        EXPECT(0x3590, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01C4
        gbc.setState(0x3d05, 0xf3a1, 0x5530, 0xbc8a, 0x4ec1, 0x2e49, 0x0, 0x0);
        gbc.writeMem(0x3d05, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xf3a1, gbc.sp());
        EXPECT(0x3d07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01C5
        gbc.setState(0x93db, 0xd5ca, 0xeb80, 0x8392, 0xbb7f, 0xf6a0, 0x0, 0x0);
        gbc.writeMem(0x93db, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xd5ca, gbc.sp());
        EXPECT(0x93dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93db));
        EXPECT(0xbc, gbc.readMem(0x93dc));
        // CB BC 01C6
        gbc.setState(0xaefc, 0x86b, 0x9b90, 0xd2bc, 0x556d, 0x14ab, 0x1, 0x0);
        gbc.writeMem(0xaefc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x86b, gbc.sp());
        EXPECT(0xaefe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaefc));
        EXPECT(0xbc, gbc.readMem(0xaefd));
        // CB BC 01C7
        gbc.setState(0x2c2c, 0x9de3, 0xc9b0, 0xc028, 0xe84f, 0x456b, 0x1, 0x1);
        gbc.writeMem(0x2c2c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x9de3, gbc.sp());
        EXPECT(0x2c2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01C8
        gbc.setState(0x6a86, 0xf9fc, 0x5920, 0xfdae, 0xaeb1, 0x67a1, 0x1, 0x1);
        gbc.writeMem(0x6a86, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xf9fc, gbc.sp());
        EXPECT(0x6a88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01C9
        gbc.setState(0x97b5, 0xa9e1, 0xc3f0, 0xa739, 0xe0c1, 0xbe06, 0x1, 0x0);
        gbc.writeMem(0x97b5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xa9e1, gbc.sp());
        EXPECT(0x97b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97b5));
        EXPECT(0xbc, gbc.readMem(0x97b6));
        // CB BC 01CA
        gbc.setState(0x80c7, 0x3800, 0x7120, 0xaf80, 0x8bd8, 0xe522, 0x0, 0x1);
        gbc.writeMem(0x80c7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x3800, gbc.sp());
        EXPECT(0x80c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80c7));
        EXPECT(0xbc, gbc.readMem(0x80c8));
        // CB BC 01CC
        gbc.setState(0x5cfd, 0x44cb, 0x2710, 0xd51d, 0x43ea, 0x30f1, 0x1, 0x0);
        gbc.writeMem(0x5cfd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x44cb, gbc.sp());
        EXPECT(0x5cff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01CD
        gbc.setState(0x95ad, 0x8e92, 0x79b0, 0xe25b, 0x3621, 0x2fd6, 0x1, 0x0);
        gbc.writeMem(0x95ad, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x8e92, gbc.sp());
        EXPECT(0x95af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95ad));
        EXPECT(0xbc, gbc.readMem(0x95ae));
        // CB BC 01CE
        gbc.setState(0x6e5c, 0x4254, 0xf40, 0x4db0, 0x492d, 0x5668, 0x1, 0x0);
        gbc.writeMem(0x6e5c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x4254, gbc.sp());
        EXPECT(0x6e5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01CF
        gbc.setState(0x87e5, 0x98f4, 0xbcd0, 0x1a3c, 0x6962, 0x89a0, 0x0, 0x1);
        gbc.writeMem(0x87e5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x98f4, gbc.sp());
        EXPECT(0x87e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87e5));
        EXPECT(0xbc, gbc.readMem(0x87e6));
        // CB BC 01D0
        gbc.setState(0xaa20, 0xd66e, 0x1ab0, 0xc6a5, 0x7e5e, 0x5577, 0x1, 0x1);
        gbc.writeMem(0xaa20, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xd66e, gbc.sp());
        EXPECT(0xaa22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa20));
        EXPECT(0xbc, gbc.readMem(0xaa21));
        // CB BC 01D2
        gbc.setState(0xb11, 0x4292, 0x7f00, 0x373a, 0x8971, 0x1084, 0x0, 0x0);
        gbc.writeMem(0xb11, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x4292, gbc.sp());
        EXPECT(0xb13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01D3
        gbc.setState(0x31f, 0x16fb, 0x7d60, 0xef1c, 0x835, 0x8281, 0x0, 0x0);
        gbc.writeMem(0x31f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x16fb, gbc.sp());
        EXPECT(0x321, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01D5
        gbc.setState(0x7fed, 0xf0b3, 0x190, 0x6bad, 0xca48, 0xc9d4, 0x0, 0x0);
        gbc.writeMem(0x7fed, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xf0b3, gbc.sp());
        EXPECT(0x7fef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01D6
        gbc.setState(0x5c6f, 0xed91, 0x6770, 0xb47a, 0x1e5e, 0xfc8f, 0x1, 0x1);
        gbc.writeMem(0x5c6f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xed91, gbc.sp());
        EXPECT(0x5c71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01D7
        gbc.setState(0x753b, 0x4725, 0x3870, 0xfa8d, 0x7286, 0xc53c, 0x0, 0x0);
        gbc.writeMem(0x753b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x4725, gbc.sp());
        EXPECT(0x753d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01D8
        gbc.setState(0x49c6, 0xc04a, 0x2620, 0xa924, 0xdca8, 0xe60b, 0x0, 0x0);
        gbc.writeMem(0x49c6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xc04a, gbc.sp());
        EXPECT(0x49c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01D9
        gbc.setState(0x95cd, 0x59c9, 0x7c90, 0x7b1, 0x412d, 0xecaa, 0x1, 0x1);
        gbc.writeMem(0x95cd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x59c9, gbc.sp());
        EXPECT(0x95cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95cd));
        EXPECT(0xbc, gbc.readMem(0x95ce));
        // CB BC 01DA
        gbc.setState(0x82c, 0xd78f, 0x6590, 0x857d, 0x185f, 0x9018, 0x0, 0x0);
        gbc.writeMem(0x82c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xd78f, gbc.sp());
        EXPECT(0x82e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01DC
        gbc.setState(0xdf93, 0xec22, 0x69c0, 0x27, 0x4ef7, 0x6bcd, 0x1, 0x1);
        gbc.writeMem(0xdf93, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xec22, gbc.sp());
        EXPECT(0xdf95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf93));
        EXPECT(0xbc, gbc.readMem(0xdf94));
        // CB BC 01DD
        gbc.setState(0xc951, 0x2723, 0x8540, 0xb05f, 0x7f2a, 0x2611, 0x0, 0x1);
        gbc.writeMem(0xc951, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x2723, gbc.sp());
        EXPECT(0xc953, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc951));
        EXPECT(0xbc, gbc.readMem(0xc952));
        // CB BC 01DE
        gbc.setState(0x7a8, 0xe1f5, 0xdfb0, 0xd16a, 0x7619, 0x48a7, 0x0, 0x0);
        gbc.writeMem(0x7a8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xe1f5, gbc.sp());
        EXPECT(0x7aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01DF
        gbc.setState(0x32be, 0xc99, 0x9e0, 0xf92e, 0x8d6, 0xfef4, 0x1, 0x1);
        gbc.writeMem(0x32be, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xc99, gbc.sp());
        EXPECT(0x32c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01E0
        gbc.setState(0x4f80, 0x9a80, 0xf000, 0x2d0, 0xed37, 0x4c5d, 0x0, 0x1);
        gbc.writeMem(0x4f80, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x9a80, gbc.sp());
        EXPECT(0x4f82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01E1
        gbc.setState(0x88, 0x4037, 0x8380, 0x9266, 0x3866, 0xf0a4, 0x1, 0x0);
        gbc.writeMem(0x88, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x4037, gbc.sp());
        EXPECT(0x8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01E2
        gbc.setState(0xc201, 0x5cc1, 0x23c0, 0xf273, 0xab2c, 0x4cf2, 0x1, 0x1);
        gbc.writeMem(0xc201, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x5cc1, gbc.sp());
        EXPECT(0xc203, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc201));
        EXPECT(0xbc, gbc.readMem(0xc202));
        // CB BC 01E4
        gbc.setState(0x31e5, 0x1ef6, 0xf140, 0x9669, 0x925e, 0x6c37, 0x0, 0x1);
        gbc.writeMem(0x31e5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x1ef6, gbc.sp());
        EXPECT(0x31e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01E5
        gbc.setState(0xb06c, 0x3a0d, 0xcde0, 0x5135, 0xea6, 0x2f39, 0x0, 0x0);
        gbc.writeMem(0xb06c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x3a0d, gbc.sp());
        EXPECT(0xb06e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb06c));
        EXPECT(0xbc, gbc.readMem(0xb06d));
        // CB BC 01E6
        gbc.setState(0xeb8e, 0x76e5, 0x8c40, 0x9f67, 0x2de3, 0xc80b, 0x0, 0x1);
        gbc.writeMem(0xeb8e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x76e5, gbc.sp());
        EXPECT(0xeb90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb8e));
        EXPECT(0xbc, gbc.readMem(0xeb8f));
        // CB BC 01E8
        gbc.setState(0xefd4, 0xedbf, 0x8090, 0x503b, 0xe42c, 0xcd6b, 0x0, 0x1);
        gbc.writeMem(0xefd4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xedbf, gbc.sp());
        EXPECT(0xefd6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefd4));
        EXPECT(0xbc, gbc.readMem(0xefd5));
        // CB BC 01E9
        gbc.setState(0x1c7c, 0x75ab, 0xff60, 0x1fb4, 0xf917, 0x568f, 0x1, 0x0);
        gbc.writeMem(0x1c7c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x75ab, gbc.sp());
        EXPECT(0x1c7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01EA
        gbc.setState(0xba26, 0xbe9b, 0x2a80, 0x4384, 0x3a1d, 0x76e9, 0x1, 0x1);
        gbc.writeMem(0xba26, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xbe9b, gbc.sp());
        EXPECT(0xba28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba26));
        EXPECT(0xbc, gbc.readMem(0xba27));
        // CB BC 01EB
        gbc.setState(0xa4ad, 0x6458, 0x8d50, 0xb81b, 0x64a7, 0x7789, 0x1, 0x1);
        gbc.writeMem(0xa4ad, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x6458, gbc.sp());
        EXPECT(0xa4af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4ad));
        EXPECT(0xbc, gbc.readMem(0xa4ae));
        // CB BC 01EC
        gbc.setState(0x3bf4, 0xf109, 0xe780, 0x550b, 0x645d, 0x6664, 0x0, 0x1);
        gbc.writeMem(0x3bf4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xf109, gbc.sp());
        EXPECT(0x3bf6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01ED
        gbc.setState(0xcc8d, 0x3c48, 0xe880, 0x3f0f, 0xd65f, 0x7a7e, 0x1, 0x1);
        gbc.writeMem(0xcc8d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x3c48, gbc.sp());
        EXPECT(0xcc8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc8d));
        EXPECT(0xbc, gbc.readMem(0xcc8e));
        // CB BC 01EE
        gbc.setState(0x5938, 0xc5b1, 0x22a0, 0x8931, 0x8f97, 0x546, 0x0, 0x1);
        gbc.writeMem(0x5938, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xc5b1, gbc.sp());
        EXPECT(0x593a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01EF
        gbc.setState(0x1f50, 0x985d, 0x2c50, 0x18f, 0xcf03, 0xd602, 0x0, 0x1);
        gbc.writeMem(0x1f50, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x985d, gbc.sp());
        EXPECT(0x1f52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01F0
        gbc.setState(0x75fb, 0x33f4, 0x5c70, 0xa817, 0x72e7, 0x783b, 0x0, 0x0);
        gbc.writeMem(0x75fb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x33f4, gbc.sp());
        EXPECT(0x75fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01F1
        gbc.setState(0xec9c, 0x9295, 0x2b10, 0x2eb5, 0x5e57, 0x648a, 0x1, 0x0);
        gbc.writeMem(0xec9c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x9295, gbc.sp());
        EXPECT(0xec9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec9c));
        EXPECT(0xbc, gbc.readMem(0xec9d));
        // CB BC 01F2
        gbc.setState(0x4e3c, 0xc98e, 0x7d30, 0xa886, 0x1213, 0x5300, 0x1, 0x1);
        gbc.writeMem(0x4e3c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xc98e, gbc.sp());
        EXPECT(0x4e3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01F3
        gbc.setState(0x4a0b, 0x15d6, 0x8670, 0x297c, 0x2f19, 0x499e, 0x0, 0x1);
        gbc.writeMem(0x4a0b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x15d6, gbc.sp());
        EXPECT(0x4a0d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01F4
        gbc.setState(0x229e, 0xe451, 0x6e40, 0x4da1, 0xa001, 0x6378, 0x1, 0x1);
        gbc.writeMem(0x229e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xe451, gbc.sp());
        EXPECT(0x22a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01F5
        gbc.setState(0x542, 0xa11c, 0x2c90, 0xa4cc, 0xdd6, 0xda3f, 0x1, 0x1);
        gbc.writeMem(0x542, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xa11c, gbc.sp());
        EXPECT(0x544, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01F6
        gbc.setState(0xdc5a, 0xfdb2, 0x19a0, 0xbd76, 0x5eaa, 0x901a, 0x1, 0x0);
        gbc.writeMem(0xdc5a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xfdb2, gbc.sp());
        EXPECT(0xdc5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc5a));
        EXPECT(0xbc, gbc.readMem(0xdc5b));
        // CB BC 01F7
        gbc.setState(0x83f, 0x3958, 0xf3d0, 0xc61d, 0x9d74, 0x47cd, 0x1, 0x0);
        gbc.writeMem(0x83f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x3958, gbc.sp());
        EXPECT(0x841, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01F9
        gbc.setState(0x2df5, 0x659f, 0x7a40, 0x317d, 0x28bd, 0xf98e, 0x1, 0x1);
        gbc.writeMem(0x2df5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x659f, gbc.sp());
        EXPECT(0x2df7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01FA
        gbc.setState(0xcec0, 0x107b, 0x27e0, 0xb424, 0x38d7, 0xa5f8, 0x0, 0x0);
        gbc.writeMem(0xcec0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x107b, gbc.sp());
        EXPECT(0xcec2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcec0));
        EXPECT(0xbc, gbc.readMem(0xcec1));
        // CB BC 01FB
        gbc.setState(0x5023, 0xf7ab, 0xdc50, 0xc86, 0x359a, 0xc418, 0x0, 0x1);
        gbc.writeMem(0x5023, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xf7ab, gbc.sp());
        EXPECT(0x5025, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 01FC
        gbc.setState(0xc4cb, 0xe35b, 0xc5e0, 0x489e, 0x703e, 0x22a5, 0x0, 0x0);
        gbc.writeMem(0xc4cb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xe35b, gbc.sp());
        EXPECT(0xc4cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4cb));
        EXPECT(0xbc, gbc.readMem(0xc4cc));
        // CB BC 01FD
        gbc.setState(0x8889, 0x3356, 0x5780, 0x338d, 0x295, 0x403a, 0x1, 0x0);
        gbc.writeMem(0x8889, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x3356, gbc.sp());
        EXPECT(0x888b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8889));
        EXPECT(0xbc, gbc.readMem(0x888a));
        // CB BC 01FE
        gbc.setState(0x428d, 0x3e81, 0xace0, 0x8467, 0x2de4, 0x3a79, 0x1, 0x0);
        gbc.writeMem(0x428d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x3e81, gbc.sp());
        EXPECT(0x428f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 01FF
        gbc.setState(0xc347, 0x8d5f, 0x1a00, 0x614e, 0xd366, 0xc78b, 0x0, 0x1);
        gbc.writeMem(0xc347, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x8d5f, gbc.sp());
        EXPECT(0xc349, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc347));
        EXPECT(0xbc, gbc.readMem(0xc348));
        // CB BC 0200
        gbc.setState(0x2b04, 0x7d83, 0x82b0, 0x9c02, 0xb62c, 0xebcf, 0x1, 0x1);
        gbc.writeMem(0x2b04, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x7d83, gbc.sp());
        EXPECT(0x2b06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0201
        gbc.setState(0x135, 0x20c0, 0x52e0, 0x6b01, 0x5e52, 0xf0fa, 0x0, 0x1);
        gbc.writeMem(0x135, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x20c0, gbc.sp());
        EXPECT(0x137, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0202
        gbc.setState(0xbb4a, 0xb843, 0xaf30, 0x35f5, 0x9f41, 0xaebb, 0x0, 0x0);
        gbc.writeMem(0xbb4a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xb843, gbc.sp());
        EXPECT(0xbb4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb4a));
        EXPECT(0xbc, gbc.readMem(0xbb4b));
        // CB BC 0203
        gbc.setState(0xbfa0, 0xcfc, 0x7540, 0xd8f8, 0xc460, 0xe6b, 0x0, 0x0);
        gbc.writeMem(0xbfa0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xcfc, gbc.sp());
        EXPECT(0xbfa2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfa0));
        EXPECT(0xbc, gbc.readMem(0xbfa1));
        // CB BC 0204
        gbc.setState(0xaa3, 0xa51c, 0x7f90, 0x8c63, 0x9840, 0xa3cf, 0x0, 0x1);
        gbc.writeMem(0xaa3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xa51c, gbc.sp());
        EXPECT(0xaa5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0205
        gbc.setState(0xe9d1, 0xd74d, 0x7240, 0x9ec8, 0x50a1, 0x6ee8, 0x0, 0x0);
        gbc.writeMem(0xe9d1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xd74d, gbc.sp());
        EXPECT(0xe9d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9d1));
        EXPECT(0xbc, gbc.readMem(0xe9d2));
        // CB BC 0206
        gbc.setState(0x2e71, 0xdd29, 0x89a0, 0xfe18, 0xc842, 0xf181, 0x0, 0x0);
        gbc.writeMem(0x2e71, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xdd29, gbc.sp());
        EXPECT(0x2e73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0207
        gbc.setState(0xaa3c, 0xe1e0, 0xa2e0, 0xbc05, 0x2213, 0x82bc, 0x1, 0x0);
        gbc.writeMem(0xaa3c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xe1e0, gbc.sp());
        EXPECT(0xaa3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa3c));
        EXPECT(0xbc, gbc.readMem(0xaa3d));
        // CB BC 0208
        gbc.setState(0x3ccc, 0xd474, 0x8fe0, 0xfdfc, 0xe053, 0x313a, 0x0, 0x1);
        gbc.writeMem(0x3ccc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xd474, gbc.sp());
        EXPECT(0x3cce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0209
        gbc.setState(0x6a09, 0xe4ff, 0xed80, 0xa741, 0x85a9, 0x2551, 0x0, 0x1);
        gbc.writeMem(0x6a09, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xe4ff, gbc.sp());
        EXPECT(0x6a0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 020A
        gbc.setState(0xcd06, 0x74f9, 0x1910, 0x62cb, 0x4ac8, 0xfe6b, 0x1, 0x0);
        gbc.writeMem(0xcd06, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x74f9, gbc.sp());
        EXPECT(0xcd08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd06));
        EXPECT(0xbc, gbc.readMem(0xcd07));
        // CB BC 020B
        gbc.setState(0xb882, 0xec90, 0x3b70, 0xc6ea, 0x4810, 0x57c3, 0x0, 0x0);
        gbc.writeMem(0xb882, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xec90, gbc.sp());
        EXPECT(0xb884, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb882));
        EXPECT(0xbc, gbc.readMem(0xb883));
        // CB BC 020C
        gbc.setState(0x9f68, 0xa502, 0x3720, 0x2e65, 0x3584, 0x702f, 0x0, 0x0);
        gbc.writeMem(0x9f68, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xa502, gbc.sp());
        EXPECT(0x9f6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f68));
        EXPECT(0xbc, gbc.readMem(0x9f69));
        // CB BC 020D
        gbc.setState(0x33, 0xab68, 0x5c30, 0x8a83, 0x7e33, 0x9833, 0x1, 0x1);
        gbc.writeMem(0x33, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xab68, gbc.sp());
        EXPECT(0x35, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 020E
        gbc.setState(0x3c77, 0xae3, 0x6420, 0x2210, 0xebae, 0x3f58, 0x0, 0x1);
        gbc.writeMem(0x3c77, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xae3, gbc.sp());
        EXPECT(0x3c79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 020F
        gbc.setState(0x2a30, 0xde1b, 0x9e20, 0x177f, 0xe963, 0xc2a, 0x1, 0x0);
        gbc.writeMem(0x2a30, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xde1b, gbc.sp());
        EXPECT(0x2a32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0210
        gbc.setState(0x2daf, 0x72cb, 0xafe0, 0x6a6b, 0x1f45, 0x6091, 0x0, 0x1);
        gbc.writeMem(0x2daf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x72cb, gbc.sp());
        EXPECT(0x2db1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0211
        gbc.setState(0x88b2, 0x1995, 0xa0f0, 0xb81d, 0x972f, 0x71a4, 0x0, 0x0);
        gbc.writeMem(0x88b2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x1995, gbc.sp());
        EXPECT(0x88b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88b2));
        EXPECT(0xbc, gbc.readMem(0x88b3));
        // CB BC 0213
        gbc.setState(0x4c2, 0xa13e, 0x8d40, 0xfad3, 0x904b, 0xd011, 0x0, 0x0);
        gbc.writeMem(0x4c2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xa13e, gbc.sp());
        EXPECT(0x4c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0214
        gbc.setState(0x1fa2, 0xbf9, 0x72b0, 0xe146, 0xd453, 0xc767, 0x0, 0x0);
        gbc.writeMem(0x1fa2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xbf9, gbc.sp());
        EXPECT(0x1fa4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0215
        gbc.setState(0x4f75, 0x3327, 0x2b70, 0xf002, 0x8d1a, 0xacb1, 0x1, 0x1);
        gbc.writeMem(0x4f75, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x3327, gbc.sp());
        EXPECT(0x4f77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0217
        gbc.setState(0xa003, 0x77df, 0x13d0, 0x7049, 0x7a8, 0x8750, 0x1, 0x0);
        gbc.writeMem(0xa003, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x77df, gbc.sp());
        EXPECT(0xa005, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa003));
        EXPECT(0xbc, gbc.readMem(0xa004));
        // CB BC 0218
        gbc.setState(0xcae6, 0xf949, 0xad90, 0x8e46, 0x242b, 0xa7e3, 0x0, 0x0);
        gbc.writeMem(0xcae6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xf949, gbc.sp());
        EXPECT(0xcae8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcae6));
        EXPECT(0xbc, gbc.readMem(0xcae7));
        // CB BC 0219
        gbc.setState(0x151, 0x76cb, 0x1030, 0xd680, 0x26d9, 0xade2, 0x0, 0x0);
        gbc.writeMem(0x151, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x76cb, gbc.sp());
        EXPECT(0x153, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 021A
        gbc.setState(0x138c, 0x9106, 0x2070, 0xba40, 0x69f2, 0x2a0b, 0x1, 0x0);
        gbc.writeMem(0x138c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x9106, gbc.sp());
        EXPECT(0x138e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 021B
        gbc.setState(0x7c68, 0x9ed7, 0xec90, 0x5f1, 0xd1cf, 0xb8b8, 0x1, 0x0);
        gbc.writeMem(0x7c68, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x9ed7, gbc.sp());
        EXPECT(0x7c6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 021C
        gbc.setState(0x3f34, 0x7549, 0x8010, 0x5030, 0xc891, 0x154b, 0x0, 0x1);
        gbc.writeMem(0x3f34, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x7549, gbc.sp());
        EXPECT(0x3f36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 021E
        gbc.setState(0x2156, 0xeffa, 0xa980, 0xa9d7, 0x8296, 0xed0, 0x0, 0x1);
        gbc.writeMem(0x2156, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xeffa, gbc.sp());
        EXPECT(0x2158, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 021F
        gbc.setState(0xe2a9, 0x932f, 0xb420, 0x239d, 0x7245, 0x881a, 0x0, 0x0);
        gbc.writeMem(0xe2a9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x932f, gbc.sp());
        EXPECT(0xe2ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2a9));
        EXPECT(0xbc, gbc.readMem(0xe2aa));
        // CB BC 0220
        gbc.setState(0xdcb5, 0xc290, 0xa840, 0x4067, 0x596c, 0xade3, 0x1, 0x0);
        gbc.writeMem(0xdcb5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xc290, gbc.sp());
        EXPECT(0xdcb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcb5));
        EXPECT(0xbc, gbc.readMem(0xdcb6));
        // CB BC 0221
        gbc.setState(0x9caf, 0xc7bb, 0xcc20, 0xb9d4, 0xf7d, 0x44a1, 0x1, 0x1);
        gbc.writeMem(0x9caf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xc7bb, gbc.sp());
        EXPECT(0x9cb1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9caf));
        EXPECT(0xbc, gbc.readMem(0x9cb0));
        // CB BC 0222
        gbc.setState(0x582e, 0x5f3f, 0x6480, 0x30e1, 0xac3b, 0x430c, 0x0, 0x0);
        gbc.writeMem(0x582e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x5f3f, gbc.sp());
        EXPECT(0x5830, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0223
        gbc.setState(0x9838, 0x524f, 0x2560, 0xf7f7, 0x295, 0x9270, 0x0, 0x0);
        gbc.writeMem(0x9838, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x524f, gbc.sp());
        EXPECT(0x983a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9838));
        EXPECT(0xbc, gbc.readMem(0x9839));
        // CB BC 0224
        gbc.setState(0xd4d6, 0x74d8, 0x7c10, 0xcbd, 0xccd8, 0xb7f7, 0x1, 0x1);
        gbc.writeMem(0xd4d6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x74d8, gbc.sp());
        EXPECT(0xd4d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4d6));
        EXPECT(0xbc, gbc.readMem(0xd4d7));
        // CB BC 0225
        gbc.setState(0xee96, 0xf83a, 0x4ed0, 0x22cc, 0x55ed, 0x4396, 0x1, 0x0);
        gbc.writeMem(0xee96, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xf83a, gbc.sp());
        EXPECT(0xee98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee96));
        EXPECT(0xbc, gbc.readMem(0xee97));
        // CB BC 0226
        gbc.setState(0x1ff9, 0xd7ac, 0xf4c0, 0x926e, 0x43ae, 0xeef5, 0x0, 0x0);
        gbc.writeMem(0x1ff9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xd7ac, gbc.sp());
        EXPECT(0x1ffb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0227
        gbc.setState(0x8cbe, 0x9e9, 0x1330, 0x6d68, 0xb839, 0x40fd, 0x0, 0x1);
        gbc.writeMem(0x8cbe, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x9e9, gbc.sp());
        EXPECT(0x8cc0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cbe));
        EXPECT(0xbc, gbc.readMem(0x8cbf));
        // CB BC 0228
        gbc.setState(0xe30f, 0xb7cd, 0x7b60, 0xc77, 0x442e, 0x617, 0x1, 0x0);
        gbc.writeMem(0xe30f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xb7cd, gbc.sp());
        EXPECT(0xe311, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe30f));
        EXPECT(0xbc, gbc.readMem(0xe310));
        // CB BC 0229
        gbc.setState(0x7846, 0xc69f, 0x31f0, 0x60a1, 0x87f8, 0x21f4, 0x1, 0x0);
        gbc.writeMem(0x7846, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xc69f, gbc.sp());
        EXPECT(0x7848, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 022A
        gbc.setState(0x340b, 0xfda8, 0x1d0, 0xa01a, 0xe247, 0xcee0, 0x1, 0x0);
        gbc.writeMem(0x340b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xfda8, gbc.sp());
        EXPECT(0x340d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 022B
        gbc.setState(0x9682, 0x4691, 0xff60, 0x7928, 0xb53d, 0xf721, 0x0, 0x1);
        gbc.writeMem(0x9682, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x4691, gbc.sp());
        EXPECT(0x9684, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9682));
        EXPECT(0xbc, gbc.readMem(0x9683));
        // CB BC 022C
        gbc.setState(0x1226, 0x492b, 0x4830, 0x182d, 0xb356, 0x1b8c, 0x1, 0x0);
        gbc.writeMem(0x1226, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x492b, gbc.sp());
        EXPECT(0x1228, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 022D
        gbc.setState(0xcc97, 0x9558, 0xcc30, 0x861f, 0xe534, 0xa16, 0x0, 0x1);
        gbc.writeMem(0xcc97, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x9558, gbc.sp());
        EXPECT(0xcc99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc97));
        EXPECT(0xbc, gbc.readMem(0xcc98));
        // CB BC 022F
        gbc.setState(0xde8e, 0xfe8b, 0xec30, 0xa959, 0x25b1, 0x694f, 0x0, 0x1);
        gbc.writeMem(0xde8e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xfe8b, gbc.sp());
        EXPECT(0xde90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde8e));
        EXPECT(0xbc, gbc.readMem(0xde8f));
        // CB BC 0231
        gbc.setState(0x1c7d, 0xfa04, 0x1380, 0x6ac7, 0x2371, 0x52cb, 0x1, 0x0);
        gbc.writeMem(0x1c7d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xfa04, gbc.sp());
        EXPECT(0x1c7f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0232
        gbc.setState(0xef83, 0x49d2, 0xe660, 0xb773, 0x165c, 0x4912, 0x1, 0x1);
        gbc.writeMem(0xef83, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x49d2, gbc.sp());
        EXPECT(0xef85, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef83));
        EXPECT(0xbc, gbc.readMem(0xef84));
        // CB BC 0233
        gbc.setState(0xc125, 0xa31a, 0x7960, 0xde4b, 0x1836, 0x8ff, 0x1, 0x0);
        gbc.writeMem(0xc125, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xa31a, gbc.sp());
        EXPECT(0xc127, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc125));
        EXPECT(0xbc, gbc.readMem(0xc126));
        // CB BC 0234
        gbc.setState(0x5034, 0x7016, 0xd90, 0x5a9f, 0x26b9, 0xd62a, 0x1, 0x1);
        gbc.writeMem(0x5034, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x7016, gbc.sp());
        EXPECT(0x5036, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0235
        gbc.setState(0xbb80, 0x467a, 0x31b0, 0xaa0f, 0xc971, 0x7cc5, 0x1, 0x0);
        gbc.writeMem(0xbb80, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x467a, gbc.sp());
        EXPECT(0xbb82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb80));
        EXPECT(0xbc, gbc.readMem(0xbb81));
        // CB BC 0236
        gbc.setState(0x9915, 0xb665, 0xcc60, 0x2eb3, 0x771, 0x7a92, 0x1, 0x1);
        gbc.writeMem(0x9915, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xb665, gbc.sp());
        EXPECT(0x9917, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9915));
        EXPECT(0xbc, gbc.readMem(0x9916));
        // CB BC 0237
        gbc.setState(0x9d48, 0x5249, 0xd4e0, 0xaa92, 0xadcd, 0xaa96, 0x1, 0x1);
        gbc.writeMem(0x9d48, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x5249, gbc.sp());
        EXPECT(0x9d4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d48));
        EXPECT(0xbc, gbc.readMem(0x9d49));
        // CB BC 0238
        gbc.setState(0x4e9c, 0x598b, 0x4980, 0xccb7, 0xa155, 0xd10e, 0x1, 0x0);
        gbc.writeMem(0x4e9c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x598b, gbc.sp());
        EXPECT(0x4e9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0239
        gbc.setState(0xa61a, 0x7c35, 0x1c30, 0xedbf, 0xee5a, 0x12e3, 0x1, 0x1);
        gbc.writeMem(0xa61a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x7c35, gbc.sp());
        EXPECT(0xa61c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa61a));
        EXPECT(0xbc, gbc.readMem(0xa61b));
        // CB BC 023A
        gbc.setState(0xa03e, 0xcf8b, 0xee30, 0xfb3d, 0xbaff, 0x4776, 0x1, 0x0);
        gbc.writeMem(0xa03e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xcf8b, gbc.sp());
        EXPECT(0xa040, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa03e));
        EXPECT(0xbc, gbc.readMem(0xa03f));
        // CB BC 023B
        gbc.setState(0x40d9, 0xf5d2, 0xbc0, 0x9a82, 0x738c, 0xa6c7, 0x1, 0x0);
        gbc.writeMem(0x40d9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xf5d2, gbc.sp());
        EXPECT(0x40db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 023C
        gbc.setState(0x4d8a, 0xe03d, 0x2490, 0x86aa, 0x5e75, 0x8ac5, 0x0, 0x1);
        gbc.writeMem(0x4d8a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xe03d, gbc.sp());
        EXPECT(0x4d8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 023D
        gbc.setState(0xa97f, 0xcdc5, 0xe820, 0x6c85, 0xf34c, 0xf185, 0x1, 0x1);
        gbc.writeMem(0xa97f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xcdc5, gbc.sp());
        EXPECT(0xa981, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa97f));
        EXPECT(0xbc, gbc.readMem(0xa980));
        // CB BC 023E
        gbc.setState(0x506e, 0x355e, 0x2a10, 0x650c, 0x9efd, 0x83b, 0x1, 0x0);
        gbc.writeMem(0x506e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x355e, gbc.sp());
        EXPECT(0x5070, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 023F
        gbc.setState(0xea72, 0x2a40, 0x25d0, 0x2748, 0x350a, 0x55b5, 0x1, 0x1);
        gbc.writeMem(0xea72, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x2a40, gbc.sp());
        EXPECT(0xea74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea72));
        EXPECT(0xbc, gbc.readMem(0xea73));
        // CB BC 0240
        gbc.setState(0x1a8b, 0x258d, 0x1950, 0xb32b, 0xfb0, 0x6b0d, 0x1, 0x0);
        gbc.writeMem(0x1a8b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x258d, gbc.sp());
        EXPECT(0x1a8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0241
        gbc.setState(0x9b69, 0x5672, 0xf1f0, 0x81e0, 0x8093, 0x197a, 0x0, 0x1);
        gbc.writeMem(0x9b69, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x5672, gbc.sp());
        EXPECT(0x9b6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b69));
        EXPECT(0xbc, gbc.readMem(0x9b6a));
        // CB BC 0242
        gbc.setState(0x8d74, 0x657f, 0xa3e0, 0xe46f, 0x29cd, 0x265e, 0x0, 0x0);
        gbc.writeMem(0x8d74, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x657f, gbc.sp());
        EXPECT(0x8d76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d74));
        EXPECT(0xbc, gbc.readMem(0x8d75));
        // CB BC 0243
        gbc.setState(0xdd2a, 0xa590, 0xb500, 0x2eaf, 0x6498, 0xe979, 0x1, 0x0);
        gbc.writeMem(0xdd2a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xa590, gbc.sp());
        EXPECT(0xdd2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd2a));
        EXPECT(0xbc, gbc.readMem(0xdd2b));
        // CB BC 0244
        gbc.setState(0xed73, 0xf854, 0xa3a0, 0x46c3, 0xa1f6, 0x3fa6, 0x0, 0x0);
        gbc.writeMem(0xed73, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xf854, gbc.sp());
        EXPECT(0xed75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed73));
        EXPECT(0xbc, gbc.readMem(0xed74));
        // CB BC 0245
        gbc.setState(0xe2ea, 0xef2c, 0x8930, 0x79c3, 0x91ea, 0xc5d6, 0x0, 0x1);
        gbc.writeMem(0xe2ea, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xef2c, gbc.sp());
        EXPECT(0xe2ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2ea));
        EXPECT(0xbc, gbc.readMem(0xe2eb));
        // CB BC 0246
        gbc.setState(0x8d51, 0xc90b, 0x9ed0, 0x2a04, 0xc78c, 0xd56, 0x0, 0x1);
        gbc.writeMem(0x8d51, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xc90b, gbc.sp());
        EXPECT(0x8d53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d51));
        EXPECT(0xbc, gbc.readMem(0x8d52));
        // CB BC 0247
        gbc.setState(0xb786, 0xd756, 0x4f50, 0xf21, 0xc84c, 0x5f77, 0x0, 0x1);
        gbc.writeMem(0xb786, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xd756, gbc.sp());
        EXPECT(0xb788, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb786));
        EXPECT(0xbc, gbc.readMem(0xb787));
        // CB BC 0248
        gbc.setState(0x909a, 0xb4aa, 0x80e0, 0xc8a5, 0x9295, 0x1c87, 0x1, 0x1);
        gbc.writeMem(0x909a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xb4aa, gbc.sp());
        EXPECT(0x909c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x909a));
        EXPECT(0xbc, gbc.readMem(0x909b));
        // CB BC 0249
        gbc.setState(0xe58a, 0xc593, 0xc8e0, 0xcd60, 0x945a, 0xed73, 0x0, 0x0);
        gbc.writeMem(0xe58a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xc593, gbc.sp());
        EXPECT(0xe58c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe58a));
        EXPECT(0xbc, gbc.readMem(0xe58b));
        // CB BC 024B
        gbc.setState(0x9e61, 0x2295, 0x1c70, 0x9b2f, 0xd88b, 0xa046, 0x0, 0x1);
        gbc.writeMem(0x9e61, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x2295, gbc.sp());
        EXPECT(0x9e63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e61));
        EXPECT(0xbc, gbc.readMem(0x9e62));
        // CB BC 024C
        gbc.setState(0xdbfc, 0xc0e5, 0xd4d0, 0xbf45, 0xbb28, 0xb748, 0x0, 0x1);
        gbc.writeMem(0xdbfc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xc0e5, gbc.sp());
        EXPECT(0xdbfe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbfc));
        EXPECT(0xbc, gbc.readMem(0xdbfd));
        // CB BC 024D
        gbc.setState(0xbdbd, 0x9db5, 0xc600, 0xc77f, 0x8d56, 0xef74, 0x1, 0x0);
        gbc.writeMem(0xbdbd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x9db5, gbc.sp());
        EXPECT(0xbdbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdbd));
        EXPECT(0xbc, gbc.readMem(0xbdbe));
        // CB BC 024E
        gbc.setState(0x12df, 0x2988, 0x83c0, 0x53df, 0x3178, 0xfc8d, 0x1, 0x0);
        gbc.writeMem(0x12df, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x2988, gbc.sp());
        EXPECT(0x12e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 024F
        gbc.setState(0x9be6, 0x9c5f, 0xc320, 0xa19, 0x2ba8, 0x217c, 0x1, 0x0);
        gbc.writeMem(0x9be6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x9c5f, gbc.sp());
        EXPECT(0x9be8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9be6));
        EXPECT(0xbc, gbc.readMem(0x9be7));
        // CB BC 0250
        gbc.setState(0x2fe4, 0x83b7, 0xbaf0, 0x2a27, 0x1e51, 0x9e81, 0x1, 0x0);
        gbc.writeMem(0x2fe4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x83b7, gbc.sp());
        EXPECT(0x2fe6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0251
        gbc.setState(0xc2c2, 0x68e8, 0xfc20, 0xedcd, 0xf7f0, 0x5386, 0x1, 0x1);
        gbc.writeMem(0xc2c2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x68e8, gbc.sp());
        EXPECT(0xc2c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2c2));
        EXPECT(0xbc, gbc.readMem(0xc2c3));
        // CB BC 0252
        gbc.setState(0xfcb, 0x72ef, 0xc090, 0xd91e, 0xcf60, 0x7bf2, 0x0, 0x0);
        gbc.writeMem(0xfcb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x72ef, gbc.sp());
        EXPECT(0xfcd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0253
        gbc.setState(0x3165, 0x9f79, 0x31f0, 0x2642, 0x89f5, 0xce02, 0x1, 0x1);
        gbc.writeMem(0x3165, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x9f79, gbc.sp());
        EXPECT(0x3167, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0255
        gbc.setState(0x13fa, 0xe088, 0x13a0, 0x3aad, 0x32a3, 0xa207, 0x0, 0x0);
        gbc.writeMem(0x13fa, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xe088, gbc.sp());
        EXPECT(0x13fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0256
        gbc.setState(0xa366, 0x9bfd, 0x1130, 0x4916, 0x4661, 0xa68f, 0x0, 0x0);
        gbc.writeMem(0xa366, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x9bfd, gbc.sp());
        EXPECT(0xa368, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa366));
        EXPECT(0xbc, gbc.readMem(0xa367));
        // CB BC 0257
        gbc.setState(0x1ae8, 0x5fb3, 0x22c0, 0xca24, 0xdf81, 0x2152, 0x1, 0x0);
        gbc.writeMem(0x1ae8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x5fb3, gbc.sp());
        EXPECT(0x1aea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0258
        gbc.setState(0x570d, 0xc1e4, 0xdd0, 0xa74e, 0x7414, 0x2a90, 0x0, 0x0);
        gbc.writeMem(0x570d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xc1e4, gbc.sp());
        EXPECT(0x570f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0259
        gbc.setState(0x337f, 0xc0b8, 0x9b40, 0xe711, 0xa0e4, 0x17bc, 0x0, 0x1);
        gbc.writeMem(0x337f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xc0b8, gbc.sp());
        EXPECT(0x3381, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 025A
        gbc.setState(0xe9f5, 0x1d8, 0x7970, 0x324e, 0x2673, 0x87f7, 0x1, 0x1);
        gbc.writeMem(0xe9f5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x1d8, gbc.sp());
        EXPECT(0xe9f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9f5));
        EXPECT(0xbc, gbc.readMem(0xe9f6));
        // CB BC 025B
        gbc.setState(0xd8bc, 0x6a7b, 0x2580, 0x993, 0x6647, 0x8870, 0x0, 0x0);
        gbc.writeMem(0xd8bc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x6a7b, gbc.sp());
        EXPECT(0xd8be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8bc));
        EXPECT(0xbc, gbc.readMem(0xd8bd));
        // CB BC 025C
        gbc.setState(0x7d0a, 0xf392, 0x4890, 0x4c1e, 0xe65d, 0xca88, 0x1, 0x1);
        gbc.writeMem(0x7d0a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xf392, gbc.sp());
        EXPECT(0x7d0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 025E
        gbc.setState(0x88cb, 0xdc42, 0x6b60, 0x8ee9, 0x7926, 0xe7de, 0x1, 0x0);
        gbc.writeMem(0x88cb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xdc42, gbc.sp());
        EXPECT(0x88cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88cb));
        EXPECT(0xbc, gbc.readMem(0x88cc));
        // CB BC 025F
        gbc.setState(0x3dc0, 0x1922, 0x1070, 0x40f3, 0x13f9, 0x1919, 0x1, 0x1);
        gbc.writeMem(0x3dc0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x1922, gbc.sp());
        EXPECT(0x3dc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0260
        gbc.setState(0xb3c4, 0x7044, 0x8860, 0xa1ca, 0xe778, 0xf0b7, 0x0, 0x0);
        gbc.writeMem(0xb3c4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x7044, gbc.sp());
        EXPECT(0xb3c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3c4));
        EXPECT(0xbc, gbc.readMem(0xb3c5));
        // CB BC 0261
        gbc.setState(0xb8a5, 0xa230, 0x52d0, 0xc9c8, 0x1d91, 0x6766, 0x0, 0x0);
        gbc.writeMem(0xb8a5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xa230, gbc.sp());
        EXPECT(0xb8a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8a5));
        EXPECT(0xbc, gbc.readMem(0xb8a6));
        // CB BC 0262
        gbc.setState(0x9e04, 0x7808, 0x5910, 0x50, 0xbc5d, 0x9af6, 0x1, 0x1);
        gbc.writeMem(0x9e04, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x7808, gbc.sp());
        EXPECT(0x9e06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e04));
        EXPECT(0xbc, gbc.readMem(0x9e05));
        // CB BC 0263
        gbc.setState(0x60fc, 0x1e4f, 0xfc70, 0x9434, 0x2846, 0x95f6, 0x0, 0x1);
        gbc.writeMem(0x60fc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x1e4f, gbc.sp());
        EXPECT(0x60fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0264
        gbc.setState(0xa19e, 0xc139, 0x4fa0, 0x39bb, 0x6dbe, 0x69c7, 0x1, 0x0);
        gbc.writeMem(0xa19e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xc139, gbc.sp());
        EXPECT(0xa1a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa19e));
        EXPECT(0xbc, gbc.readMem(0xa19f));
        // CB BC 0265
        gbc.setState(0x824, 0xdf83, 0xd690, 0xb6b1, 0x388d, 0xfd7c, 0x0, 0x0);
        gbc.writeMem(0x824, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xdf83, gbc.sp());
        EXPECT(0x826, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0266
        gbc.setState(0x6c74, 0xbeb8, 0xc810, 0x399f, 0xb7dc, 0xa666, 0x1, 0x0);
        gbc.writeMem(0x6c74, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xbeb8, gbc.sp());
        EXPECT(0x6c76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0267
        gbc.setState(0xa6a5, 0x58a3, 0x83c0, 0xbb22, 0xc51, 0x9cf0, 0x1, 0x0);
        gbc.writeMem(0xa6a5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x58a3, gbc.sp());
        EXPECT(0xa6a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6a5));
        EXPECT(0xbc, gbc.readMem(0xa6a6));
        // CB BC 0268
        gbc.setState(0xaee0, 0xc89e, 0x780, 0x98e9, 0xea, 0xf57f, 0x1, 0x0);
        gbc.writeMem(0xaee0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xc89e, gbc.sp());
        EXPECT(0xaee2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaee0));
        EXPECT(0xbc, gbc.readMem(0xaee1));
        // CB BC 0269
        gbc.setState(0xb84d, 0x4b06, 0xfc90, 0x6234, 0x5c6, 0x2048, 0x0, 0x1);
        gbc.writeMem(0xb84d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x4b06, gbc.sp());
        EXPECT(0xb84f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb84d));
        EXPECT(0xbc, gbc.readMem(0xb84e));
        // CB BC 026A
        gbc.setState(0x65b2, 0x5155, 0x7060, 0x3cb9, 0xde4b, 0x77cd, 0x1, 0x0);
        gbc.writeMem(0x65b2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x5155, gbc.sp());
        EXPECT(0x65b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 026B
        gbc.setState(0x7a72, 0x406e, 0xdf20, 0xafda, 0x165d, 0xd124, 0x0, 0x1);
        gbc.writeMem(0x7a72, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x406e, gbc.sp());
        EXPECT(0x7a74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 026C
        gbc.setState(0x6082, 0xbea7, 0xcec0, 0xe07c, 0xfc76, 0xe2e7, 0x0, 0x0);
        gbc.writeMem(0x6082, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xbea7, gbc.sp());
        EXPECT(0x6084, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 026D
        gbc.setState(0x6f6f, 0x7739, 0x510, 0x4045, 0x2055, 0x5887, 0x1, 0x0);
        gbc.writeMem(0x6f6f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x7739, gbc.sp());
        EXPECT(0x6f71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 026E
        gbc.setState(0xc44, 0x548a, 0x21a0, 0x8ca8, 0xff8e, 0xd22f, 0x1, 0x1);
        gbc.writeMem(0xc44, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x548a, gbc.sp());
        EXPECT(0xc46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 026F
        gbc.setState(0xd3bd, 0x150a, 0x900, 0x8a4e, 0xfc5a, 0x8f1b, 0x0, 0x1);
        gbc.writeMem(0xd3bd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x150a, gbc.sp());
        EXPECT(0xd3bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3bd));
        EXPECT(0xbc, gbc.readMem(0xd3be));
        // CB BC 0270
        gbc.setState(0x9190, 0x1293, 0xe250, 0x8447, 0x6db3, 0x43a5, 0x1, 0x1);
        gbc.writeMem(0x9190, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x1293, gbc.sp());
        EXPECT(0x9192, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9190));
        EXPECT(0xbc, gbc.readMem(0x9191));
        // CB BC 0271
        gbc.setState(0xc4c2, 0x3b74, 0xb070, 0xdec7, 0x388e, 0x7fb1, 0x0, 0x0);
        gbc.writeMem(0xc4c2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x3b74, gbc.sp());
        EXPECT(0xc4c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4c2));
        EXPECT(0xbc, gbc.readMem(0xc4c3));
        // CB BC 0272
        gbc.setState(0x259f, 0x4e8b, 0x3a10, 0xe5a8, 0x648b, 0x7cb4, 0x1, 0x0);
        gbc.writeMem(0x259f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x4e8b, gbc.sp());
        EXPECT(0x25a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0273
        gbc.setState(0xb3a5, 0xf2b8, 0x820, 0xcdf0, 0x8c28, 0x84b0, 0x0, 0x1);
        gbc.writeMem(0xb3a5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xf2b8, gbc.sp());
        EXPECT(0xb3a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3a5));
        EXPECT(0xbc, gbc.readMem(0xb3a6));
        // CB BC 0275
        gbc.setState(0x5863, 0x8135, 0x8820, 0xac50, 0x381f, 0x2786, 0x1, 0x0);
        gbc.writeMem(0x5863, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x8135, gbc.sp());
        EXPECT(0x5865, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0276
        gbc.setState(0xc06c, 0xdf3d, 0x5560, 0xd96f, 0xde29, 0xd47e, 0x0, 0x0);
        gbc.writeMem(0xc06c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xdf3d, gbc.sp());
        EXPECT(0xc06e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc06c));
        EXPECT(0xbc, gbc.readMem(0xc06d));
        // CB BC 0277
        gbc.setState(0xc240, 0x18ff, 0xd80, 0x3f43, 0xf86, 0x795c, 0x1, 0x1);
        gbc.writeMem(0xc240, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x18ff, gbc.sp());
        EXPECT(0xc242, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc240));
        EXPECT(0xbc, gbc.readMem(0xc241));
        // CB BC 0278
        gbc.setState(0x631, 0xdf5b, 0x2500, 0x93d9, 0x5dd5, 0xdab4, 0x1, 0x0);
        gbc.writeMem(0x631, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xdf5b, gbc.sp());
        EXPECT(0x633, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0279
        gbc.setState(0xceda, 0xdf80, 0xc470, 0x4ad2, 0x8ccb, 0xfc77, 0x0, 0x1);
        gbc.writeMem(0xceda, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xdf80, gbc.sp());
        EXPECT(0xcedc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xceda));
        EXPECT(0xbc, gbc.readMem(0xcedb));
        // CB BC 027A
        gbc.setState(0x4224, 0xc566, 0x2b30, 0x5721, 0x8707, 0x9d1f, 0x1, 0x1);
        gbc.writeMem(0x4224, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xc566, gbc.sp());
        EXPECT(0x4226, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 027B
        gbc.setState(0x9f95, 0xd7e8, 0x1530, 0x4951, 0xf9b1, 0xd7cf, 0x1, 0x0);
        gbc.writeMem(0x9f95, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xd7e8, gbc.sp());
        EXPECT(0x9f97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f95));
        EXPECT(0xbc, gbc.readMem(0x9f96));
        // CB BC 027C
        gbc.setState(0xd3c9, 0xf2a3, 0xd800, 0x7836, 0x3c1b, 0xe52d, 0x1, 0x0);
        gbc.writeMem(0xd3c9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xf2a3, gbc.sp());
        EXPECT(0xd3cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3c9));
        EXPECT(0xbc, gbc.readMem(0xd3ca));
        // CB BC 027D
        gbc.setState(0x9ffb, 0x2ca3, 0x7630, 0x6dfd, 0xa7d9, 0x364, 0x0, 0x1);
        gbc.writeMem(0x9ffb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x2ca3, gbc.sp());
        EXPECT(0x9ffd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ffb));
        EXPECT(0xbc, gbc.readMem(0x9ffc));
        // CB BC 027E
        gbc.setState(0x2dd, 0x5eac, 0x47a0, 0xb2de, 0x13ce, 0xebbc, 0x0, 0x0);
        gbc.writeMem(0x2dd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x5eac, gbc.sp());
        EXPECT(0x2df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 027F
        gbc.setState(0xea02, 0xfd5d, 0x3ce0, 0x6f92, 0x9e5, 0x1f67, 0x0, 0x1);
        gbc.writeMem(0xea02, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xfd5d, gbc.sp());
        EXPECT(0xea04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea02));
        EXPECT(0xbc, gbc.readMem(0xea03));
        // CB BC 0280
        gbc.setState(0xce64, 0x16c, 0xd5a0, 0x4a76, 0x8d9, 0x9b08, 0x1, 0x1);
        gbc.writeMem(0xce64, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x16c, gbc.sp());
        EXPECT(0xce66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce64));
        EXPECT(0xbc, gbc.readMem(0xce65));
        // CB BC 0281
        gbc.setState(0xb299, 0xbb3c, 0xda90, 0xc8ca, 0x23b2, 0x8c22, 0x0, 0x0);
        gbc.writeMem(0xb299, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xbb3c, gbc.sp());
        EXPECT(0xb29b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb299));
        EXPECT(0xbc, gbc.readMem(0xb29a));
        // CB BC 0282
        gbc.setState(0x81fd, 0x418f, 0x92f0, 0x5aac, 0x6784, 0x7885, 0x1, 0x1);
        gbc.writeMem(0x81fd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x418f, gbc.sp());
        EXPECT(0x81ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81fd));
        EXPECT(0xbc, gbc.readMem(0x81fe));
        // CB BC 0283
        gbc.setState(0xb861, 0xcc01, 0x7f50, 0x6b54, 0xcfb5, 0x2d04, 0x0, 0x1);
        gbc.writeMem(0xb861, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xcc01, gbc.sp());
        EXPECT(0xb863, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb861));
        EXPECT(0xbc, gbc.readMem(0xb862));
        // CB BC 0284
        gbc.setState(0x49ac, 0xad78, 0xe90, 0x6e74, 0xf90c, 0x4d62, 0x0, 0x0);
        gbc.writeMem(0x49ac, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xad78, gbc.sp());
        EXPECT(0x49ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0285
        gbc.setState(0xb1f3, 0x51d5, 0xbc70, 0xd605, 0x4547, 0xb546, 0x0, 0x0);
        gbc.writeMem(0xb1f3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x51d5, gbc.sp());
        EXPECT(0xb1f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1f3));
        EXPECT(0xbc, gbc.readMem(0xb1f4));
        // CB BC 0286
        gbc.setState(0x8776, 0x5511, 0x3b30, 0x2781, 0x5caf, 0x6d34, 0x0, 0x0);
        gbc.writeMem(0x8776, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x5511, gbc.sp());
        EXPECT(0x8778, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8776));
        EXPECT(0xbc, gbc.readMem(0x8777));
        // CB BC 0287
        gbc.setState(0xc97c, 0x33c5, 0xf10, 0x350f, 0xa420, 0x8c06, 0x0, 0x1);
        gbc.writeMem(0xc97c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x33c5, gbc.sp());
        EXPECT(0xc97e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc97c));
        EXPECT(0xbc, gbc.readMem(0xc97d));
        // CB BC 0288
        gbc.setState(0x421f, 0x63ef, 0xa520, 0x877c, 0xd14, 0xfbc5, 0x0, 0x0);
        gbc.writeMem(0x421f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x63ef, gbc.sp());
        EXPECT(0x4221, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0289
        gbc.setState(0x1d1d, 0x7335, 0x88e0, 0xc830, 0x78e, 0x8c68, 0x1, 0x0);
        gbc.writeMem(0x1d1d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x7335, gbc.sp());
        EXPECT(0x1d1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 028A
        gbc.setState(0x5e5, 0xbe1a, 0x1fa0, 0x4e65, 0xdf13, 0xae31, 0x1, 0x0);
        gbc.writeMem(0x5e5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xbe1a, gbc.sp());
        EXPECT(0x5e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 028B
        gbc.setState(0x8240, 0xae22, 0xa180, 0x6822, 0xae6f, 0xcc9b, 0x1, 0x1);
        gbc.writeMem(0x8240, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xae22, gbc.sp());
        EXPECT(0x8242, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8240));
        EXPECT(0xbc, gbc.readMem(0x8241));
        // CB BC 028C
        gbc.setState(0x9c91, 0xbbbf, 0xaec0, 0xfa9a, 0x29f6, 0xc334, 0x0, 0x0);
        gbc.writeMem(0x9c91, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xbbbf, gbc.sp());
        EXPECT(0x9c93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c91));
        EXPECT(0xbc, gbc.readMem(0x9c92));
        // CB BC 028D
        gbc.setState(0x6275, 0x1d7e, 0xe220, 0x6ed, 0xa15b, 0x1c26, 0x1, 0x0);
        gbc.writeMem(0x6275, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x1d7e, gbc.sp());
        EXPECT(0x6277, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 028E
        gbc.setState(0xe1fc, 0xd197, 0xa150, 0x9756, 0xa43a, 0x98ea, 0x1, 0x1);
        gbc.writeMem(0xe1fc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xd197, gbc.sp());
        EXPECT(0xe1fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1fc));
        EXPECT(0xbc, gbc.readMem(0xe1fd));
        // CB BC 028F
        gbc.setState(0xd42d, 0xbb39, 0x4460, 0x10be, 0xb572, 0xa6aa, 0x0, 0x1);
        gbc.writeMem(0xd42d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xbb39, gbc.sp());
        EXPECT(0xd42f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd42d));
        EXPECT(0xbc, gbc.readMem(0xd42e));
        // CB BC 0290
        gbc.setState(0x6298, 0x3c93, 0x1d40, 0xb31d, 0x8845, 0x7d2f, 0x0, 0x0);
        gbc.writeMem(0x6298, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x3c93, gbc.sp());
        EXPECT(0x629a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0291
        gbc.setState(0x6e10, 0xa5bc, 0x1b40, 0x8de4, 0x1642, 0x2e81, 0x0, 0x1);
        gbc.writeMem(0x6e10, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xa5bc, gbc.sp());
        EXPECT(0x6e12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0292
        gbc.setState(0x4c60, 0x7e4c, 0xa480, 0x9c1c, 0x319c, 0xa7ce, 0x1, 0x0);
        gbc.writeMem(0x4c60, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x7e4c, gbc.sp());
        EXPECT(0x4c62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0293
        gbc.setState(0x69f7, 0xbfe1, 0xe2c0, 0xba94, 0x13c3, 0x6fad, 0x1, 0x1);
        gbc.writeMem(0x69f7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xbfe1, gbc.sp());
        EXPECT(0x69f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0294
        gbc.setState(0xf9d, 0xcb17, 0x97d0, 0x8646, 0x2d7a, 0xd821, 0x1, 0x0);
        gbc.writeMem(0xf9d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xcb17, gbc.sp());
        EXPECT(0xf9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0295
        gbc.setState(0x67b, 0xf6f2, 0xc5a0, 0x2696, 0x8195, 0x7f4e, 0x0, 0x1);
        gbc.writeMem(0x67b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xf6f2, gbc.sp());
        EXPECT(0x67d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0296
        gbc.setState(0xcca7, 0x90c6, 0x4080, 0x5f5b, 0x98d4, 0xb8b5, 0x1, 0x0);
        gbc.writeMem(0xcca7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x90c6, gbc.sp());
        EXPECT(0xcca9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcca7));
        EXPECT(0xbc, gbc.readMem(0xcca8));
        // CB BC 0297
        gbc.setState(0x4558, 0x9310, 0x4bb0, 0xf97f, 0xa5ec, 0x689c, 0x1, 0x1);
        gbc.writeMem(0x4558, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x9310, gbc.sp());
        EXPECT(0x455a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0298
        gbc.setState(0xc818, 0xf681, 0x3f30, 0xf0f3, 0xe1d4, 0xb380, 0x0, 0x0);
        gbc.writeMem(0xc818, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xf681, gbc.sp());
        EXPECT(0xc81a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc818));
        EXPECT(0xbc, gbc.readMem(0xc819));
        // CB BC 0299
        gbc.setState(0x8ec5, 0xf7ad, 0x7ac0, 0xc6d9, 0xa85d, 0x5574, 0x0, 0x0);
        gbc.writeMem(0x8ec5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xf7ad, gbc.sp());
        EXPECT(0x8ec7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ec5));
        EXPECT(0xbc, gbc.readMem(0x8ec6));
        // CB BC 029A
        gbc.setState(0xac6f, 0x268e, 0xb4e0, 0x5eb7, 0x1897, 0xaf7c, 0x1, 0x0);
        gbc.writeMem(0xac6f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x268e, gbc.sp());
        EXPECT(0xac71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac6f));
        EXPECT(0xbc, gbc.readMem(0xac70));
        // CB BC 029B
        gbc.setState(0x75df, 0xe64c, 0xffb0, 0xb707, 0xc6cf, 0xe8f6, 0x0, 0x0);
        gbc.writeMem(0x75df, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xe64c, gbc.sp());
        EXPECT(0x75e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 029C
        gbc.setState(0x962a, 0xfd9a, 0xf990, 0xac93, 0xd528, 0xb509, 0x1, 0x1);
        gbc.writeMem(0x962a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xfd9a, gbc.sp());
        EXPECT(0x962c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x962a));
        EXPECT(0xbc, gbc.readMem(0x962b));
        // CB BC 029D
        gbc.setState(0x6fdb, 0xa8e5, 0x4940, 0x42d7, 0x25e7, 0xdaca, 0x0, 0x1);
        gbc.writeMem(0x6fdb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xa8e5, gbc.sp());
        EXPECT(0x6fdd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 029E
        gbc.setState(0xca7b, 0x58bd, 0x4b0, 0xcf0f, 0xa0be, 0xf29, 0x1, 0x0);
        gbc.writeMem(0xca7b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x58bd, gbc.sp());
        EXPECT(0xca7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca7b));
        EXPECT(0xbc, gbc.readMem(0xca7c));
        // CB BC 029F
        gbc.setState(0xca4e, 0xb890, 0x2b0, 0xd75d, 0x6d19, 0x9e6a, 0x0, 0x1);
        gbc.writeMem(0xca4e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xb890, gbc.sp());
        EXPECT(0xca50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca4e));
        EXPECT(0xbc, gbc.readMem(0xca4f));
        // CB BC 02A0
        gbc.setState(0x8757, 0x4ba2, 0x9420, 0x1209, 0xc0ea, 0x3e7e, 0x0, 0x1);
        gbc.writeMem(0x8757, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x4ba2, gbc.sp());
        EXPECT(0x8759, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8757));
        EXPECT(0xbc, gbc.readMem(0x8758));
        // CB BC 02A1
        gbc.setState(0x1175, 0x78cd, 0x5af0, 0x5ce7, 0xf5ae, 0xe738, 0x1, 0x1);
        gbc.writeMem(0x1175, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x78cd, gbc.sp());
        EXPECT(0x1177, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02A2
        gbc.setState(0xb80f, 0x4b06, 0xc3c0, 0x2be9, 0xd734, 0xf4bc, 0x0, 0x1);
        gbc.writeMem(0xb80f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x4b06, gbc.sp());
        EXPECT(0xb811, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb80f));
        EXPECT(0xbc, gbc.readMem(0xb810));
        // CB BC 02A3
        gbc.setState(0x7d01, 0x10b0, 0xb990, 0x62f4, 0xd339, 0x98d5, 0x0, 0x0);
        gbc.writeMem(0x7d01, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x10b0, gbc.sp());
        EXPECT(0x7d03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02A4
        gbc.setState(0xe639, 0x5fc7, 0x13b0, 0x1c4b, 0x60c2, 0x6990, 0x0, 0x0);
        gbc.writeMem(0xe639, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x5fc7, gbc.sp());
        EXPECT(0xe63b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe639));
        EXPECT(0xbc, gbc.readMem(0xe63a));
        // CB BC 02A5
        gbc.setState(0xa67a, 0xc440, 0xe4f0, 0x58d4, 0xfa95, 0x99b4, 0x1, 0x0);
        gbc.writeMem(0xa67a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xc440, gbc.sp());
        EXPECT(0xa67c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa67a));
        EXPECT(0xbc, gbc.readMem(0xa67b));
        // CB BC 02A6
        gbc.setState(0x1376, 0x291f, 0x6ff0, 0x7e8b, 0x8966, 0x589, 0x1, 0x0);
        gbc.writeMem(0x1376, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x291f, gbc.sp());
        EXPECT(0x1378, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02A9
        gbc.setState(0xc0a9, 0xd48a, 0xe490, 0x6ef1, 0x5f37, 0xb243, 0x0, 0x0);
        gbc.writeMem(0xc0a9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xd48a, gbc.sp());
        EXPECT(0xc0ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0a9));
        EXPECT(0xbc, gbc.readMem(0xc0aa));
        // CB BC 02AA
        gbc.setState(0xafe7, 0xe21f, 0xda20, 0x1258, 0xd40, 0x443f, 0x0, 0x1);
        gbc.writeMem(0xafe7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xe21f, gbc.sp());
        EXPECT(0xafe9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafe7));
        EXPECT(0xbc, gbc.readMem(0xafe8));
        // CB BC 02AB
        gbc.setState(0xa604, 0xab9e, 0x7f00, 0x700e, 0x17b4, 0xc7ee, 0x1, 0x1);
        gbc.writeMem(0xa604, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xab9e, gbc.sp());
        EXPECT(0xa606, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa604));
        EXPECT(0xbc, gbc.readMem(0xa605));
        // CB BC 02AC
        gbc.setState(0xd491, 0xd6f1, 0xb340, 0xe026, 0xef40, 0xf669, 0x0, 0x0);
        gbc.writeMem(0xd491, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xd6f1, gbc.sp());
        EXPECT(0xd493, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd491));
        EXPECT(0xbc, gbc.readMem(0xd492));
        // CB BC 02AD
        gbc.setState(0xbe03, 0x752d, 0x5260, 0x5215, 0xd8cd, 0x7172, 0x0, 0x0);
        gbc.writeMem(0xbe03, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x752d, gbc.sp());
        EXPECT(0xbe05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe03));
        EXPECT(0xbc, gbc.readMem(0xbe04));
        // CB BC 02AE
        gbc.setState(0x56e5, 0x925, 0x3810, 0x82a2, 0x525b, 0xfa98, 0x0, 0x0);
        gbc.writeMem(0x56e5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x925, gbc.sp());
        EXPECT(0x56e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02B0
        gbc.setState(0x476d, 0xdd98, 0x3d90, 0xc9be, 0x4166, 0x4cbe, 0x0, 0x0);
        gbc.writeMem(0x476d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xdd98, gbc.sp());
        EXPECT(0x476f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02B1
        gbc.setState(0xa2da, 0x5f77, 0xe850, 0xccef, 0xd03a, 0x659b, 0x0, 0x1);
        gbc.writeMem(0xa2da, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x5f77, gbc.sp());
        EXPECT(0xa2dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2da));
        EXPECT(0xbc, gbc.readMem(0xa2db));
        // CB BC 02B3
        gbc.setState(0xa82b, 0xe936, 0x2020, 0x516, 0xf6fa, 0x4d5e, 0x0, 0x0);
        gbc.writeMem(0xa82b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xe936, gbc.sp());
        EXPECT(0xa82d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa82b));
        EXPECT(0xbc, gbc.readMem(0xa82c));
        // CB BC 02B4
        gbc.setState(0x922b, 0x621a, 0x7e40, 0xafb9, 0x6327, 0x64b0, 0x0, 0x0);
        gbc.writeMem(0x922b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x621a, gbc.sp());
        EXPECT(0x922d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x922b));
        EXPECT(0xbc, gbc.readMem(0x922c));
        // CB BC 02B5
        gbc.setState(0x7cb, 0x6420, 0x7430, 0xa0c2, 0x8240, 0x4baa, 0x1, 0x0);
        gbc.writeMem(0x7cb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x6420, gbc.sp());
        EXPECT(0x7cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02B6
        gbc.setState(0x9461, 0xf5bb, 0x4100, 0xcd6c, 0xb99c, 0xdca3, 0x1, 0x0);
        gbc.writeMem(0x9461, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xf5bb, gbc.sp());
        EXPECT(0x9463, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9461));
        EXPECT(0xbc, gbc.readMem(0x9462));
        // CB BC 02B7
        gbc.setState(0x1690, 0xc762, 0xe7c0, 0x444f, 0x1e1, 0xa45d, 0x1, 0x0);
        gbc.writeMem(0x1690, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xc762, gbc.sp());
        EXPECT(0x1692, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02B8
        gbc.setState(0x2107, 0x1681, 0x8600, 0x9e3b, 0x3c2b, 0x24cc, 0x1, 0x0);
        gbc.writeMem(0x2107, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x1681, gbc.sp());
        EXPECT(0x2109, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02B9
        gbc.setState(0x6a31, 0xb981, 0xa5e0, 0x5ad1, 0xdba1, 0x3050, 0x1, 0x1);
        gbc.writeMem(0x6a31, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xb981, gbc.sp());
        EXPECT(0x6a33, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02BA
        gbc.setState(0x3075, 0x31b8, 0xdf90, 0x9ee5, 0x4319, 0xc7b9, 0x1, 0x1);
        gbc.writeMem(0x3075, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x31b8, gbc.sp());
        EXPECT(0x3077, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02BB
        gbc.setState(0xb34a, 0x18ba, 0xb900, 0xf3e6, 0x5ae5, 0x1ba0, 0x0, 0x0);
        gbc.writeMem(0xb34a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x18ba, gbc.sp());
        EXPECT(0xb34c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb34a));
        EXPECT(0xbc, gbc.readMem(0xb34b));
        // CB BC 02BC
        gbc.setState(0xec6f, 0xa7c3, 0x5240, 0x1cc4, 0xadbf, 0xa4f6, 0x0, 0x1);
        gbc.writeMem(0xec6f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xa7c3, gbc.sp());
        EXPECT(0xec71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec6f));
        EXPECT(0xbc, gbc.readMem(0xec70));
        // CB BC 02BD
        gbc.setState(0xcae1, 0x4795, 0x8a20, 0xea7f, 0x42b9, 0xe537, 0x0, 0x1);
        gbc.writeMem(0xcae1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x4795, gbc.sp());
        EXPECT(0xcae3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcae1));
        EXPECT(0xbc, gbc.readMem(0xcae2));
        // CB BC 02BE
        gbc.setState(0x7c7c, 0x991c, 0xa8c0, 0x3670, 0x9fdf, 0xfad6, 0x1, 0x1);
        gbc.writeMem(0x7c7c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x991c, gbc.sp());
        EXPECT(0x7c7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02BF
        gbc.setState(0xc2ee, 0x4ff1, 0x1700, 0xdda1, 0x1ddc, 0x3831, 0x1, 0x1);
        gbc.writeMem(0xc2ee, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x4ff1, gbc.sp());
        EXPECT(0xc2f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2ee));
        EXPECT(0xbc, gbc.readMem(0xc2ef));
        // CB BC 02C0
        gbc.setState(0x51c9, 0xe73a, 0x3c70, 0x1a47, 0x7e45, 0xb094, 0x1, 0x0);
        gbc.writeMem(0x51c9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xe73a, gbc.sp());
        EXPECT(0x51cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02C1
        gbc.setState(0xaf13, 0xdb00, 0xeba0, 0xee2d, 0xcad2, 0x7b41, 0x1, 0x1);
        gbc.writeMem(0xaf13, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xdb00, gbc.sp());
        EXPECT(0xaf15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf13));
        EXPECT(0xbc, gbc.readMem(0xaf14));
        // CB BC 02C2
        gbc.setState(0x2820, 0x66b8, 0xfec0, 0xa05b, 0x6e1f, 0x6d48, 0x0, 0x1);
        gbc.writeMem(0x2820, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x66b8, gbc.sp());
        EXPECT(0x2822, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02C3
        gbc.setState(0x8c8d, 0x766, 0x2b00, 0xce95, 0x7690, 0x582b, 0x1, 0x1);
        gbc.writeMem(0x8c8d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x766, gbc.sp());
        EXPECT(0x8c8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c8d));
        EXPECT(0xbc, gbc.readMem(0x8c8e));
        // CB BC 02C4
        gbc.setState(0xaa73, 0xe5e2, 0x7a70, 0xb97f, 0xdab6, 0xa4b9, 0x0, 0x0);
        gbc.writeMem(0xaa73, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xe5e2, gbc.sp());
        EXPECT(0xaa75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa73));
        EXPECT(0xbc, gbc.readMem(0xaa74));
        // CB BC 02C5
        gbc.setState(0x7f5b, 0xae32, 0x4810, 0xe84d, 0xa8cb, 0x3ada, 0x1, 0x0);
        gbc.writeMem(0x7f5b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xae32, gbc.sp());
        EXPECT(0x7f5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02C6
        gbc.setState(0x8226, 0x91fb, 0x7860, 0x8102, 0xdfe7, 0x2443, 0x0, 0x1);
        gbc.writeMem(0x8226, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x91fb, gbc.sp());
        EXPECT(0x8228, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8226));
        EXPECT(0xbc, gbc.readMem(0x8227));
        // CB BC 02C7
        gbc.setState(0x5eb0, 0x8505, 0x3b30, 0x6821, 0xe2ab, 0x6ea1, 0x0, 0x0);
        gbc.writeMem(0x5eb0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x8505, gbc.sp());
        EXPECT(0x5eb2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02C8
        gbc.setState(0xe33, 0x3c71, 0xd570, 0xfd77, 0x2c19, 0x2ee8, 0x0, 0x1);
        gbc.writeMem(0xe33, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x3c71, gbc.sp());
        EXPECT(0xe35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02C9
        gbc.setState(0x7735, 0x4228, 0x4ba0, 0x69db, 0xd871, 0x1829, 0x0, 0x1);
        gbc.writeMem(0x7735, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x4228, gbc.sp());
        EXPECT(0x7737, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02CA
        gbc.setState(0xea6f, 0x10d8, 0x9c40, 0xf1f6, 0x2346, 0x29af, 0x1, 0x0);
        gbc.writeMem(0xea6f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x10d8, gbc.sp());
        EXPECT(0xea71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea6f));
        EXPECT(0xbc, gbc.readMem(0xea70));
        // CB BC 02CB
        gbc.setState(0x88f9, 0x7432, 0x57c0, 0xa7ad, 0xed51, 0x9dc, 0x0, 0x1);
        gbc.writeMem(0x88f9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x7432, gbc.sp());
        EXPECT(0x88fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88f9));
        EXPECT(0xbc, gbc.readMem(0x88fa));
        // CB BC 02CC
        gbc.setState(0x5b9b, 0x3e4c, 0xbc40, 0xc177, 0x4e4c, 0x7118, 0x0, 0x0);
        gbc.writeMem(0x5b9b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x3e4c, gbc.sp());
        EXPECT(0x5b9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02CD
        gbc.setState(0xbced, 0x1787, 0xe920, 0x84a8, 0xa7bc, 0x829a, 0x0, 0x1);
        gbc.writeMem(0xbced, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x1787, gbc.sp());
        EXPECT(0xbcef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbced));
        EXPECT(0xbc, gbc.readMem(0xbcee));
        // CB BC 02CE
        gbc.setState(0x40f5, 0x8aee, 0xf790, 0x55e9, 0xcfef, 0x2a6a, 0x0, 0x1);
        gbc.writeMem(0x40f5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x8aee, gbc.sp());
        EXPECT(0x40f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02CF
        gbc.setState(0xd833, 0x3b4b, 0x1440, 0xc94f, 0xeb11, 0x2253, 0x1, 0x1);
        gbc.writeMem(0xd833, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x3b4b, gbc.sp());
        EXPECT(0xd835, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd833));
        EXPECT(0xbc, gbc.readMem(0xd834));
        // CB BC 02D0
        gbc.setState(0xbf70, 0x2309, 0x9a30, 0xe8f8, 0x934a, 0x6c07, 0x1, 0x0);
        gbc.writeMem(0xbf70, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x2309, gbc.sp());
        EXPECT(0xbf72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf70));
        EXPECT(0xbc, gbc.readMem(0xbf71));
        // CB BC 02D1
        gbc.setState(0x7b6a, 0x90e5, 0xb530, 0x23be, 0x8f8, 0xfd08, 0x0, 0x0);
        gbc.writeMem(0x7b6a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x90e5, gbc.sp());
        EXPECT(0x7b6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02D2
        gbc.setState(0x6ef1, 0xc40a, 0x5820, 0x21b0, 0x80dc, 0xf79, 0x1, 0x0);
        gbc.writeMem(0x6ef1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xc40a, gbc.sp());
        EXPECT(0x6ef3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02D3
        gbc.setState(0x3e3d, 0x4626, 0x4490, 0xdfa7, 0x11a1, 0xc93d, 0x0, 0x1);
        gbc.writeMem(0x3e3d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x4626, gbc.sp());
        EXPECT(0x3e3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02D4
        gbc.setState(0x25d4, 0x269e, 0x89e0, 0x547b, 0xe9d8, 0x1d9f, 0x0, 0x1);
        gbc.writeMem(0x25d4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x269e, gbc.sp());
        EXPECT(0x25d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02D5
        gbc.setState(0x8862, 0xad94, 0x1b80, 0x20a5, 0xca1d, 0xda71, 0x0, 0x0);
        gbc.writeMem(0x8862, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xad94, gbc.sp());
        EXPECT(0x8864, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8862));
        EXPECT(0xbc, gbc.readMem(0x8863));
        // CB BC 02D6
        gbc.setState(0x2b5, 0x2e0b, 0x9370, 0x2438, 0xfe28, 0x774d, 0x0, 0x0);
        gbc.writeMem(0x2b5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x2e0b, gbc.sp());
        EXPECT(0x2b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02D7
        gbc.setState(0x363, 0xf4ad, 0xe350, 0x590e, 0xffe0, 0x86ca, 0x1, 0x1);
        gbc.writeMem(0x363, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xf4ad, gbc.sp());
        EXPECT(0x365, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02D8
        gbc.setState(0xf63, 0x6756, 0x51a0, 0xec44, 0x6f47, 0x434e, 0x0, 0x1);
        gbc.writeMem(0xf63, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x6756, gbc.sp());
        EXPECT(0xf65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02D9
        gbc.setState(0x7f2a, 0x664b, 0x41c0, 0x7f76, 0x4a4, 0x2e2f, 0x0, 0x1);
        gbc.writeMem(0x7f2a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x664b, gbc.sp());
        EXPECT(0x7f2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02DA
        gbc.setState(0x4411, 0x10d4, 0xeff0, 0xf3a4, 0x8615, 0x1aa5, 0x1, 0x0);
        gbc.writeMem(0x4411, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x10d4, gbc.sp());
        EXPECT(0x4413, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02DB
        gbc.setState(0xdb99, 0xe9f, 0xefe0, 0x69b6, 0xbf38, 0x3505, 0x1, 0x0);
        gbc.writeMem(0xdb99, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xe9f, gbc.sp());
        EXPECT(0xdb9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb99));
        EXPECT(0xbc, gbc.readMem(0xdb9a));
        // CB BC 02DC
        gbc.setState(0xa1bf, 0x809c, 0x41a0, 0x2c40, 0xd076, 0x9dbf, 0x1, 0x1);
        gbc.writeMem(0xa1bf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x809c, gbc.sp());
        EXPECT(0xa1c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1bf));
        EXPECT(0xbc, gbc.readMem(0xa1c0));
        // CB BC 02DD
        gbc.setState(0x515f, 0x64b8, 0x5c30, 0x30bb, 0x34ee, 0x9eaf, 0x0, 0x1);
        gbc.writeMem(0x515f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x64b8, gbc.sp());
        EXPECT(0x5161, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02DE
        gbc.setState(0xd6e6, 0x4734, 0xf770, 0xc43b, 0xa895, 0x77a2, 0x1, 0x1);
        gbc.writeMem(0xd6e6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x4734, gbc.sp());
        EXPECT(0xd6e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6e6));
        EXPECT(0xbc, gbc.readMem(0xd6e7));
        // CB BC 02DF
        gbc.setState(0x2b3f, 0x5484, 0x140, 0x861c, 0x6a74, 0x94f6, 0x0, 0x1);
        gbc.writeMem(0x2b3f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x5484, gbc.sp());
        EXPECT(0x2b41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02E0
        gbc.setState(0x72ce, 0x9224, 0x97d0, 0x81b8, 0xe8b2, 0xa0ac, 0x0, 0x0);
        gbc.writeMem(0x72ce, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x9224, gbc.sp());
        EXPECT(0x72d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02E1
        gbc.setState(0xcfff, 0xc04f, 0x6cb0, 0x86b8, 0xee52, 0xe3c3, 0x0, 0x0);
        gbc.writeMem(0xcfff, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xc04f, gbc.sp());
        EXPECT(0xd001, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfff));
        EXPECT(0xbc, gbc.readMem(0xd000));
        // CB BC 02E2
        gbc.setState(0x99be, 0x454d, 0x4270, 0x6928, 0x1297, 0x9e08, 0x1, 0x1);
        gbc.writeMem(0x99be, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x454d, gbc.sp());
        EXPECT(0x99c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99be));
        EXPECT(0xbc, gbc.readMem(0x99bf));
        // CB BC 02E3
        gbc.setState(0x4f86, 0x7b34, 0xe640, 0xbc9f, 0x4956, 0x2ac1, 0x1, 0x1);
        gbc.writeMem(0x4f86, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x7b34, gbc.sp());
        EXPECT(0x4f88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02E4
        gbc.setState(0x8f9c, 0xb6b7, 0x2a50, 0xfe8b, 0x488, 0x212, 0x0, 0x1);
        gbc.writeMem(0x8f9c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xb6b7, gbc.sp());
        EXPECT(0x8f9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f9c));
        EXPECT(0xbc, gbc.readMem(0x8f9d));
        // CB BC 02E5
        gbc.setState(0x552e, 0xe3cc, 0xd610, 0x8a80, 0xedf, 0x372a, 0x1, 0x0);
        gbc.writeMem(0x552e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xe3cc, gbc.sp());
        EXPECT(0x5530, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02E6
        gbc.setState(0x2e51, 0x4fbf, 0x63c0, 0xb607, 0xa965, 0x41f7, 0x0, 0x1);
        gbc.writeMem(0x2e51, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x4fbf, gbc.sp());
        EXPECT(0x2e53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02E7
        gbc.setState(0x21a9, 0x568, 0x28f0, 0xa8c0, 0x9b51, 0x97cb, 0x1, 0x1);
        gbc.writeMem(0x21a9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x568, gbc.sp());
        EXPECT(0x21ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02E8
        gbc.setState(0x9f6c, 0x5454, 0x1030, 0x1523, 0x92e, 0xfb24, 0x0, 0x0);
        gbc.writeMem(0x9f6c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x5454, gbc.sp());
        EXPECT(0x9f6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f6c));
        EXPECT(0xbc, gbc.readMem(0x9f6d));
        // CB BC 02E9
        gbc.setState(0xe589, 0x78b4, 0xe080, 0x13e7, 0x1766, 0x5999, 0x0, 0x0);
        gbc.writeMem(0xe589, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x78b4, gbc.sp());
        EXPECT(0xe58b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe589));
        EXPECT(0xbc, gbc.readMem(0xe58a));
        // CB BC 02EA
        gbc.setState(0x63e9, 0x7002, 0x7000, 0x7eca, 0x9643, 0x9914, 0x1, 0x1);
        gbc.writeMem(0x63e9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x7002, gbc.sp());
        EXPECT(0x63eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02EB
        gbc.setState(0x4c91, 0x3951, 0xe450, 0x269f, 0x56fa, 0x233b, 0x0, 0x1);
        gbc.writeMem(0x4c91, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x3951, gbc.sp());
        EXPECT(0x4c93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02ED
        gbc.setState(0x90d4, 0x6970, 0x3640, 0x14e5, 0xc9f5, 0x17f0, 0x1, 0x1);
        gbc.writeMem(0x90d4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x6970, gbc.sp());
        EXPECT(0x90d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90d4));
        EXPECT(0xbc, gbc.readMem(0x90d5));
        // CB BC 02EE
        gbc.setState(0xe885, 0x7d08, 0x4a0, 0x92, 0xce4c, 0xd861, 0x0, 0x1);
        gbc.writeMem(0xe885, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x7d08, gbc.sp());
        EXPECT(0xe887, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe885));
        EXPECT(0xbc, gbc.readMem(0xe886));
        // CB BC 02EF
        gbc.setState(0x33e7, 0xb253, 0x7910, 0xd91f, 0x2724, 0x12ed, 0x0, 0x0);
        gbc.writeMem(0x33e7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xb253, gbc.sp());
        EXPECT(0x33e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02F0
        gbc.setState(0x9479, 0x43e, 0x96f0, 0xe338, 0x4a3, 0x501a, 0x1, 0x0);
        gbc.writeMem(0x9479, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x43e, gbc.sp());
        EXPECT(0x947b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9479));
        EXPECT(0xbc, gbc.readMem(0x947a));
        // CB BC 02F2
        gbc.setState(0x6180, 0x245d, 0xdaf0, 0xf7bf, 0xe72a, 0x1806, 0x1, 0x1);
        gbc.writeMem(0x6180, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x245d, gbc.sp());
        EXPECT(0x6182, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02F3
        gbc.setState(0xa2e6, 0x16cc, 0xf390, 0x8b78, 0xc00b, 0xb599, 0x1, 0x0);
        gbc.writeMem(0xa2e6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x16cc, gbc.sp());
        EXPECT(0xa2e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2e6));
        EXPECT(0xbc, gbc.readMem(0xa2e7));
        // CB BC 02F4
        gbc.setState(0x3fea, 0x5884, 0xa3d0, 0x4ecd, 0x2bdc, 0x4db7, 0x1, 0x1);
        gbc.writeMem(0x3fea, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x5884, gbc.sp());
        EXPECT(0x3fec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02F5
        gbc.setState(0xad93, 0xe264, 0x1210, 0x2dda, 0xdb8f, 0x7b53, 0x1, 0x0);
        gbc.writeMem(0xad93, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xe264, gbc.sp());
        EXPECT(0xad95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad93));
        EXPECT(0xbc, gbc.readMem(0xad94));
        // CB BC 02F6
        gbc.setState(0x2536, 0x598a, 0xd260, 0x734c, 0xaa6a, 0xe71c, 0x1, 0x1);
        gbc.writeMem(0x2536, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x598a, gbc.sp());
        EXPECT(0x2538, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02F7
        gbc.setState(0x940e, 0xfb5a, 0xeb40, 0xb710, 0x5867, 0xc3cf, 0x0, 0x1);
        gbc.writeMem(0x940e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xfb5a, gbc.sp());
        EXPECT(0x9410, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x940e));
        EXPECT(0xbc, gbc.readMem(0x940f));
        // CB BC 02F8
        gbc.setState(0x9a8a, 0xcbc3, 0xb4c0, 0x8eda, 0x8cf8, 0x8c33, 0x1, 0x0);
        gbc.writeMem(0x9a8a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xcbc3, gbc.sp());
        EXPECT(0x9a8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a8a));
        EXPECT(0xbc, gbc.readMem(0x9a8b));
        // CB BC 02F9
        gbc.setState(0x5534, 0x8a1, 0x8e80, 0xb2a7, 0x2f9c, 0x1bb3, 0x0, 0x1);
        gbc.writeMem(0x5534, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x8a1, gbc.sp());
        EXPECT(0x5536, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 02FA
        gbc.setState(0x7c4e, 0x21d4, 0x3390, 0x7361, 0x7404, 0x9695, 0x1, 0x1);
        gbc.writeMem(0x7c4e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x21d4, gbc.sp());
        EXPECT(0x7c50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02FB
        gbc.setState(0xbc7c, 0x62e3, 0x64a0, 0xb2fe, 0x9f11, 0xd44f, 0x0, 0x1);
        gbc.writeMem(0xbc7c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x62e3, gbc.sp());
        EXPECT(0xbc7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc7c));
        EXPECT(0xbc, gbc.readMem(0xbc7d));
        // CB BC 02FC
        gbc.setState(0x37c1, 0x6118, 0x6870, 0x1c63, 0x26e, 0x1582, 0x0, 0x0);
        gbc.writeMem(0x37c1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x6118, gbc.sp());
        EXPECT(0x37c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02FD
        gbc.setState(0x2eac, 0x25a0, 0xf170, 0x2fdb, 0xab3, 0x6a91, 0x1, 0x1);
        gbc.writeMem(0x2eac, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x25a0, gbc.sp());
        EXPECT(0x2eae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 02FE
        gbc.setState(0xb7ef, 0x7579, 0x7580, 0xa694, 0xfbf1, 0x75d5, 0x1, 0x1);
        gbc.writeMem(0xb7ef, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x7579, gbc.sp());
        EXPECT(0xb7f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7ef));
        EXPECT(0xbc, gbc.readMem(0xb7f0));
        // CB BC 0300
        gbc.setState(0xd5ee, 0xbdea, 0x2f00, 0x13ed, 0x6250, 0xbb63, 0x0, 0x1);
        gbc.writeMem(0xd5ee, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xbdea, gbc.sp());
        EXPECT(0xd5f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5ee));
        EXPECT(0xbc, gbc.readMem(0xd5ef));
        // CB BC 0301
        gbc.setState(0x3d28, 0xb648, 0x55a0, 0x93c5, 0x46af, 0xc172, 0x0, 0x0);
        gbc.writeMem(0x3d28, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xb648, gbc.sp());
        EXPECT(0x3d2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0303
        gbc.setState(0x8258, 0x2165, 0xb670, 0x3a64, 0x3a6e, 0x45e2, 0x1, 0x1);
        gbc.writeMem(0x8258, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x2165, gbc.sp());
        EXPECT(0x825a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8258));
        EXPECT(0xbc, gbc.readMem(0x8259));
        // CB BC 0304
        gbc.setState(0x785a, 0xe5c0, 0x7ed0, 0xce6a, 0x894e, 0xa466, 0x0, 0x0);
        gbc.writeMem(0x785a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xe5c0, gbc.sp());
        EXPECT(0x785c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0305
        gbc.setState(0xbc66, 0x572c, 0x57c0, 0x4108, 0xb2a2, 0xbe9c, 0x0, 0x0);
        gbc.writeMem(0xbc66, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x572c, gbc.sp());
        EXPECT(0xbc68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc66));
        EXPECT(0xbc, gbc.readMem(0xbc67));
        // CB BC 0306
        gbc.setState(0x41ac, 0x4c0b, 0xdda0, 0xdb35, 0x42ca, 0x4bf9, 0x1, 0x0);
        gbc.writeMem(0x41ac, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x4c0b, gbc.sp());
        EXPECT(0x41ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0307
        gbc.setState(0xc6a7, 0x9ffd, 0x3770, 0x873d, 0x710, 0x4ed1, 0x0, 0x1);
        gbc.writeMem(0xc6a7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x9ffd, gbc.sp());
        EXPECT(0xc6a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6a7));
        EXPECT(0xbc, gbc.readMem(0xc6a8));
        // CB BC 0308
        gbc.setState(0x986, 0xbeab, 0xe350, 0xa7fb, 0x7982, 0x5938, 0x0, 0x0);
        gbc.writeMem(0x986, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xbeab, gbc.sp());
        EXPECT(0x988, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0309
        gbc.setState(0xcb60, 0xc8ea, 0xf9e0, 0x4404, 0x49f, 0x5f2a, 0x0, 0x0);
        gbc.writeMem(0xcb60, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xc8ea, gbc.sp());
        EXPECT(0xcb62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb60));
        EXPECT(0xbc, gbc.readMem(0xcb61));
        // CB BC 030A
        gbc.setState(0x5cf0, 0xa35d, 0xec50, 0xe3e6, 0x8072, 0x92b4, 0x0, 0x0);
        gbc.writeMem(0x5cf0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xa35d, gbc.sp());
        EXPECT(0x5cf2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 030B
        gbc.setState(0xd7b7, 0x18a2, 0x9b60, 0x6544, 0xe886, 0x3e1d, 0x1, 0x1);
        gbc.writeMem(0xd7b7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x18a2, gbc.sp());
        EXPECT(0xd7b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7b7));
        EXPECT(0xbc, gbc.readMem(0xd7b8));
        // CB BC 030C
        gbc.setState(0xd43e, 0x23d5, 0xe770, 0x1f97, 0xbeab, 0x8a30, 0x1, 0x0);
        gbc.writeMem(0xd43e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x23d5, gbc.sp());
        EXPECT(0xd440, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd43e));
        EXPECT(0xbc, gbc.readMem(0xd43f));
        // CB BC 030D
        gbc.setState(0x31de, 0xbecc, 0xe680, 0xa987, 0x9766, 0x8758, 0x1, 0x1);
        gbc.writeMem(0x31de, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xbecc, gbc.sp());
        EXPECT(0x31e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 030E
        gbc.setState(0x9c16, 0xd80d, 0x87a0, 0x5543, 0xc4a4, 0xce6e, 0x0, 0x0);
        gbc.writeMem(0x9c16, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xd80d, gbc.sp());
        EXPECT(0x9c18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c16));
        EXPECT(0xbc, gbc.readMem(0x9c17));
        // CB BC 030F
        gbc.setState(0xefd4, 0x5b17, 0xea90, 0xff27, 0x752d, 0xda6d, 0x1, 0x1);
        gbc.writeMem(0xefd4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x5b17, gbc.sp());
        EXPECT(0xefd6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefd4));
        EXPECT(0xbc, gbc.readMem(0xefd5));
        // CB BC 0310
        gbc.setState(0x14e8, 0xbe5d, 0x37c0, 0x326e, 0x84e9, 0xb094, 0x1, 0x1);
        gbc.writeMem(0x14e8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xbe5d, gbc.sp());
        EXPECT(0x14ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0311
        gbc.setState(0x4bca, 0x33f1, 0x1f90, 0x5356, 0xff1b, 0x1aab, 0x1, 0x1);
        gbc.writeMem(0x4bca, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x33f1, gbc.sp());
        EXPECT(0x4bcc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0312
        gbc.setState(0x3bf4, 0xabf, 0x3900, 0xf7bb, 0x5ae2, 0xb4cd, 0x0, 0x1);
        gbc.writeMem(0x3bf4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xabf, gbc.sp());
        EXPECT(0x3bf6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0313
        gbc.setState(0xbf21, 0xc382, 0xff50, 0xa341, 0x60e, 0xb03c, 0x1, 0x1);
        gbc.writeMem(0xbf21, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xc382, gbc.sp());
        EXPECT(0xbf23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf21));
        EXPECT(0xbc, gbc.readMem(0xbf22));
        // CB BC 0314
        gbc.setState(0x4f92, 0xecc3, 0xd910, 0x6601, 0xf131, 0x9155, 0x1, 0x0);
        gbc.writeMem(0x4f92, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xecc3, gbc.sp());
        EXPECT(0x4f94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0315
        gbc.setState(0x7436, 0x5044, 0xda0, 0x8c1a, 0x7c25, 0xfd7d, 0x1, 0x0);
        gbc.writeMem(0x7436, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x5044, gbc.sp());
        EXPECT(0x7438, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0316
        gbc.setState(0x403d, 0xf95d, 0x2150, 0x6042, 0xeb6, 0xe4ac, 0x1, 0x1);
        gbc.writeMem(0x403d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xf95d, gbc.sp());
        EXPECT(0x403f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0318
        gbc.setState(0xcbfb, 0x8a64, 0xd3e0, 0xb5ee, 0x6d9c, 0x2649, 0x1, 0x0);
        gbc.writeMem(0xcbfb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x8a64, gbc.sp());
        EXPECT(0xcbfd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbfb));
        EXPECT(0xbc, gbc.readMem(0xcbfc));
        // CB BC 0319
        gbc.setState(0x35f9, 0x972b, 0x60f0, 0x2407, 0xb985, 0xcf99, 0x0, 0x0);
        gbc.writeMem(0x35f9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x972b, gbc.sp());
        EXPECT(0x35fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 031A
        gbc.setState(0x7698, 0x3dae, 0x5050, 0x455c, 0xd021, 0xbdc9, 0x0, 0x0);
        gbc.writeMem(0x7698, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x3dae, gbc.sp());
        EXPECT(0x769a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 031C
        gbc.setState(0x209f, 0x8192, 0x680, 0x7c2b, 0xa970, 0x3aa2, 0x1, 0x1);
        gbc.writeMem(0x209f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x8192, gbc.sp());
        EXPECT(0x20a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 031D
        gbc.setState(0x74f3, 0x8288, 0xcd90, 0x8806, 0x5db3, 0xa69c, 0x1, 0x0);
        gbc.writeMem(0x74f3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x8288, gbc.sp());
        EXPECT(0x74f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 031E
        gbc.setState(0x4194, 0x2d3e, 0xd190, 0xb4b3, 0x4882, 0x3bf8, 0x1, 0x0);
        gbc.writeMem(0x4194, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x2d3e, gbc.sp());
        EXPECT(0x4196, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0320
        gbc.setState(0xe888, 0x48b6, 0xec70, 0x7ca5, 0x34a2, 0x311d, 0x1, 0x0);
        gbc.writeMem(0xe888, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x48b6, gbc.sp());
        EXPECT(0xe88a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe888));
        EXPECT(0xbc, gbc.readMem(0xe889));
        // CB BC 0321
        gbc.setState(0xd6a, 0x711f, 0xf590, 0x6dab, 0xf8eb, 0x2eeb, 0x0, 0x0);
        gbc.writeMem(0xd6a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x711f, gbc.sp());
        EXPECT(0xd6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0322
        gbc.setState(0x5630, 0x165f, 0xd860, 0x79db, 0x4a98, 0x7181, 0x1, 0x0);
        gbc.writeMem(0x5630, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x165f, gbc.sp());
        EXPECT(0x5632, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0323
        gbc.setState(0x588f, 0x9454, 0x1990, 0xab3b, 0x33, 0x1b26, 0x1, 0x1);
        gbc.writeMem(0x588f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x9454, gbc.sp());
        EXPECT(0x5891, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0324
        gbc.setState(0xc410, 0x98b0, 0xd1a0, 0x24ac, 0x6c2f, 0xfe44, 0x1, 0x1);
        gbc.writeMem(0xc410, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x98b0, gbc.sp());
        EXPECT(0xc412, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc410));
        EXPECT(0xbc, gbc.readMem(0xc411));
        // CB BC 0326
        gbc.setState(0x3a25, 0x192a, 0xef40, 0xd146, 0x4b90, 0x91e6, 0x1, 0x1);
        gbc.writeMem(0x3a25, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x192a, gbc.sp());
        EXPECT(0x3a27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0327
        gbc.setState(0x65a5, 0xd85f, 0xb120, 0x2f05, 0x1c2e, 0xfb3e, 0x1, 0x0);
        gbc.writeMem(0x65a5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xd85f, gbc.sp());
        EXPECT(0x65a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0328
        gbc.setState(0x758f, 0xe16e, 0x8b30, 0x8d2f, 0xebb1, 0xe1b3, 0x1, 0x0);
        gbc.writeMem(0x758f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xe16e, gbc.sp());
        EXPECT(0x7591, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0329
        gbc.setState(0x7225, 0x179b, 0x1d30, 0x9931, 0x11b9, 0x590c, 0x0, 0x0);
        gbc.writeMem(0x7225, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x179b, gbc.sp());
        EXPECT(0x7227, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 032A
        gbc.setState(0x939b, 0x53c6, 0x9e60, 0xf29c, 0xfaa5, 0xd0c7, 0x0, 0x1);
        gbc.writeMem(0x939b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x53c6, gbc.sp());
        EXPECT(0x939d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x939b));
        EXPECT(0xbc, gbc.readMem(0x939c));
        // CB BC 032B
        gbc.setState(0x40ed, 0x647f, 0x4b90, 0xab82, 0xfc03, 0xd957, 0x1, 0x0);
        gbc.writeMem(0x40ed, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x647f, gbc.sp());
        EXPECT(0x40ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 032C
        gbc.setState(0x844c, 0x3d6b, 0x5160, 0xc6cb, 0x475c, 0x376b, 0x0, 0x1);
        gbc.writeMem(0x844c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x3d6b, gbc.sp());
        EXPECT(0x844e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x844c));
        EXPECT(0xbc, gbc.readMem(0x844d));
        // CB BC 032D
        gbc.setState(0x99dd, 0xaab5, 0x74d0, 0xff74, 0x1083, 0x9969, 0x0, 0x0);
        gbc.writeMem(0x99dd, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xaab5, gbc.sp());
        EXPECT(0x99df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99dd));
        EXPECT(0xbc, gbc.readMem(0x99de));
        // CB BC 032E
        gbc.setState(0x1ef0, 0xdea4, 0xd460, 0x8265, 0x81bb, 0xee87, 0x0, 0x0);
        gbc.writeMem(0x1ef0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xdea4, gbc.sp());
        EXPECT(0x1ef2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 032F
        gbc.setState(0x8058, 0x2e98, 0xe340, 0xf91a, 0xdec4, 0x8848, 0x1, 0x0);
        gbc.writeMem(0x8058, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x2e98, gbc.sp());
        EXPECT(0x805a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8058));
        EXPECT(0xbc, gbc.readMem(0x8059));
        // CB BC 0330
        gbc.setState(0xefe6, 0x7ac2, 0x2e50, 0xfa57, 0xe7e9, 0x9285, 0x1, 0x0);
        gbc.writeMem(0xefe6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x7ac2, gbc.sp());
        EXPECT(0xefe8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefe6));
        EXPECT(0xbc, gbc.readMem(0xefe7));
        // CB BC 0331
        gbc.setState(0xb72d, 0xfbe3, 0x19b0, 0x8902, 0x63cc, 0x2f33, 0x1, 0x1);
        gbc.writeMem(0xb72d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xfbe3, gbc.sp());
        EXPECT(0xb72f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb72d));
        EXPECT(0xbc, gbc.readMem(0xb72e));
        // CB BC 0332
        gbc.setState(0x5542, 0x2fee, 0x53b0, 0xf8db, 0xb815, 0xef14, 0x1, 0x0);
        gbc.writeMem(0x5542, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x2fee, gbc.sp());
        EXPECT(0x5544, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0333
        gbc.setState(0x7bdc, 0xe9b3, 0x1e50, 0x2fc9, 0x39d0, 0x3d57, 0x0, 0x0);
        gbc.writeMem(0x7bdc, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xe9b3, gbc.sp());
        EXPECT(0x7bde, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0334
        gbc.setState(0x59f2, 0x6c2e, 0x3080, 0x76de, 0x42d8, 0x51e, 0x1, 0x1);
        gbc.writeMem(0x59f2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x6c2e, gbc.sp());
        EXPECT(0x59f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0335
        gbc.setState(0xd8d2, 0x879d, 0x9a10, 0xa034, 0x3c31, 0x5f28, 0x1, 0x1);
        gbc.writeMem(0xd8d2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x879d, gbc.sp());
        EXPECT(0xd8d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8d2));
        EXPECT(0xbc, gbc.readMem(0xd8d3));
        // CB BC 0336
        gbc.setState(0x2f04, 0x6432, 0xbe00, 0x15c8, 0x1a1b, 0x69f3, 0x0, 0x1);
        gbc.writeMem(0x2f04, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x6432, gbc.sp());
        EXPECT(0x2f06, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0337
        gbc.setState(0x7f75, 0xd6dd, 0x20c0, 0x4456, 0xdb83, 0x813, 0x1, 0x0);
        gbc.writeMem(0x7f75, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xd6dd, gbc.sp());
        EXPECT(0x7f77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0338
        gbc.setState(0x3260, 0x4cca, 0xbc20, 0x6296, 0x38d5, 0x591c, 0x1, 0x0);
        gbc.writeMem(0x3260, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x4cca, gbc.sp());
        EXPECT(0x3262, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0339
        gbc.setState(0x58aa, 0x5faf, 0xc270, 0xf708, 0x29fe, 0x9c70, 0x0, 0x1);
        gbc.writeMem(0x58aa, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x5faf, gbc.sp());
        EXPECT(0x58ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 033A
        gbc.setState(0x2028, 0xdf6c, 0x4950, 0x80d1, 0x488f, 0xd9c4, 0x1, 0x0);
        gbc.writeMem(0x2028, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xdf6c, gbc.sp());
        EXPECT(0x202a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 033C
        gbc.setState(0x5bdf, 0x4895, 0x9d70, 0x60b5, 0x2e7e, 0x71de, 0x0, 0x1);
        gbc.writeMem(0x5bdf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x4895, gbc.sp());
        EXPECT(0x5be1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 033D
        gbc.setState(0xb5d7, 0x141, 0x3910, 0x486a, 0x8319, 0xe5f2, 0x0, 0x0);
        gbc.writeMem(0xb5d7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x141, gbc.sp());
        EXPECT(0xb5d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5d7));
        EXPECT(0xbc, gbc.readMem(0xb5d8));
        // CB BC 033E
        gbc.setState(0x1a39, 0xf695, 0xc4f0, 0xdcc7, 0x4c5a, 0x5d47, 0x0, 0x1);
        gbc.writeMem(0x1a39, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xf695, gbc.sp());
        EXPECT(0x1a3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 033F
        gbc.setState(0xee92, 0x514b, 0xec70, 0x1d41, 0x9f9d, 0x9610, 0x1, 0x0);
        gbc.writeMem(0xee92, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x514b, gbc.sp());
        EXPECT(0xee94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee92));
        EXPECT(0xbc, gbc.readMem(0xee93));
        // CB BC 0340
        gbc.setState(0x1965, 0xd331, 0x1a0, 0xd21f, 0xbbd5, 0x7b87, 0x0, 0x1);
        gbc.writeMem(0x1965, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xd331, gbc.sp());
        EXPECT(0x1967, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0341
        gbc.setState(0x63c6, 0xad3c, 0xbde0, 0xeacb, 0x5d4, 0xfb8a, 0x1, 0x0);
        gbc.writeMem(0x63c6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xad3c, gbc.sp());
        EXPECT(0x63c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0342
        gbc.setState(0xa7aa, 0x24da, 0xe980, 0xb2ab, 0xe53f, 0x1a62, 0x0, 0x0);
        gbc.writeMem(0xa7aa, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x24da, gbc.sp());
        EXPECT(0xa7ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7aa));
        EXPECT(0xbc, gbc.readMem(0xa7ab));
        // CB BC 0343
        gbc.setState(0x7a67, 0xc35f, 0x90b0, 0xb673, 0x966e, 0x8dd5, 0x1, 0x0);
        gbc.writeMem(0x7a67, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xc35f, gbc.sp());
        EXPECT(0x7a69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0344
        gbc.setState(0xac5a, 0x7655, 0x4540, 0x4fd, 0x9bd0, 0x46ac, 0x0, 0x0);
        gbc.writeMem(0xac5a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x7655, gbc.sp());
        EXPECT(0xac5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac5a));
        EXPECT(0xbc, gbc.readMem(0xac5b));
        // CB BC 0346
        gbc.setState(0x6bee, 0x3ace, 0x44e0, 0xc58d, 0xb6d7, 0xf96, 0x0, 0x0);
        gbc.writeMem(0x6bee, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x3ace, gbc.sp());
        EXPECT(0x6bf0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0347
        gbc.setState(0xb580, 0xf79f, 0x8560, 0xe963, 0x83b0, 0xfa89, 0x0, 0x1);
        gbc.writeMem(0xb580, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xf79f, gbc.sp());
        EXPECT(0xb582, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb580));
        EXPECT(0xbc, gbc.readMem(0xb581));
        // CB BC 0348
        gbc.setState(0xa02d, 0x4d16, 0xcfd0, 0xbe7c, 0xb2f9, 0x8189, 0x1, 0x1);
        gbc.writeMem(0xa02d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x4d16, gbc.sp());
        EXPECT(0xa02f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa02d));
        EXPECT(0xbc, gbc.readMem(0xa02e));
        // CB BC 0349
        gbc.setState(0x7dc0, 0xf6cf, 0xc3e0, 0x2497, 0x22b1, 0xb642, 0x1, 0x1);
        gbc.writeMem(0x7dc0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xf6cf, gbc.sp());
        EXPECT(0x7dc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 034A
        gbc.setState(0x1950, 0xfff4, 0x2210, 0x1aed, 0x8ece, 0xb002, 0x0, 0x0);
        gbc.writeMem(0x1950, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xfff4, gbc.sp());
        EXPECT(0x1952, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 034B
        gbc.setState(0xed50, 0x7b3c, 0x1610, 0xcdfc, 0x9e4f, 0x42c1, 0x0, 0x0);
        gbc.writeMem(0xed50, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x7b3c, gbc.sp());
        EXPECT(0xed52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed50));
        EXPECT(0xbc, gbc.readMem(0xed51));
        // CB BC 034C
        gbc.setState(0x82e9, 0x57ed, 0xf90, 0x5e27, 0x73f6, 0x8524, 0x0, 0x0);
        gbc.writeMem(0x82e9, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x57ed, gbc.sp());
        EXPECT(0x82eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82e9));
        EXPECT(0xbc, gbc.readMem(0x82ea));
        // CB BC 034D
        gbc.setState(0x5c94, 0xebe0, 0xf080, 0xc8c8, 0xd15d, 0x4b86, 0x1, 0x1);
        gbc.writeMem(0x5c94, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xebe0, gbc.sp());
        EXPECT(0x5c96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 034E
        gbc.setState(0x7ad5, 0xfcd8, 0x1090, 0xe7ef, 0x48e1, 0x3e79, 0x0, 0x0);
        gbc.writeMem(0x7ad5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xfcd8, gbc.sp());
        EXPECT(0x7ad7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 034F
        gbc.setState(0xc841, 0xe78b, 0xe220, 0xd245, 0xeddd, 0x7e2, 0x1, 0x1);
        gbc.writeMem(0xc841, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xe78b, gbc.sp());
        EXPECT(0xc843, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc841));
        EXPECT(0xbc, gbc.readMem(0xc842));
        // CB BC 0350
        gbc.setState(0xd174, 0x68cb, 0x9040, 0x232, 0x1b81, 0x3ceb, 0x1, 0x0);
        gbc.writeMem(0xd174, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x68cb, gbc.sp());
        EXPECT(0xd176, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd174));
        EXPECT(0xbc, gbc.readMem(0xd175));
        // CB BC 0352
        gbc.setState(0xc315, 0xd36f, 0x88f0, 0xfbb9, 0x99b0, 0x4c68, 0x0, 0x1);
        gbc.writeMem(0xc315, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xd36f, gbc.sp());
        EXPECT(0xc317, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc315));
        EXPECT(0xbc, gbc.readMem(0xc316));
        // CB BC 0353
        gbc.setState(0xce5, 0xf862, 0x4e0, 0xc03d, 0xc652, 0x2e9f, 0x1, 0x1);
        gbc.writeMem(0xce5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xf862, gbc.sp());
        EXPECT(0xce7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0354
        gbc.setState(0x6887, 0x4d34, 0x1090, 0x6f44, 0xc98d, 0x7812, 0x0, 0x1);
        gbc.writeMem(0x6887, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x4d34, gbc.sp());
        EXPECT(0x6889, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0355
        gbc.setState(0x221f, 0x1d11, 0x6e80, 0x2be3, 0x7b2c, 0xa901, 0x0, 0x0);
        gbc.writeMem(0x221f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x1d11, gbc.sp());
        EXPECT(0x2221, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0356
        gbc.setState(0x58c6, 0x3a7a, 0xa920, 0x834b, 0xcb49, 0x30ec, 0x0, 0x0);
        gbc.writeMem(0x58c6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x3a7a, gbc.sp());
        EXPECT(0x58c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0357
        gbc.setState(0xa377, 0xbde2, 0x5940, 0x1b4c, 0x6ac1, 0xfd0c, 0x0, 0x0);
        gbc.writeMem(0xa377, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xbde2, gbc.sp());
        EXPECT(0xa379, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa377));
        EXPECT(0xbc, gbc.readMem(0xa378));
        // CB BC 0358
        gbc.setState(0x8554, 0x4ffe, 0x8ba0, 0x9a8f, 0xe953, 0xbc2c, 0x0, 0x1);
        gbc.writeMem(0x8554, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x4ffe, gbc.sp());
        EXPECT(0x8556, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8554));
        EXPECT(0xbc, gbc.readMem(0x8555));
        // CB BC 0359
        gbc.setState(0x4ece, 0xeb37, 0x6090, 0x6a4f, 0x3, 0xd1b9, 0x1, 0x0);
        gbc.writeMem(0x4ece, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xeb37, gbc.sp());
        EXPECT(0x4ed0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 035A
        gbc.setState(0x1352, 0xef2a, 0x6db0, 0x1b70, 0x37a6, 0x6da1, 0x0, 0x1);
        gbc.writeMem(0x1352, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xef2a, gbc.sp());
        EXPECT(0x1354, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 035B
        gbc.setState(0x4ed4, 0xd178, 0x5f70, 0xfdde, 0xae07, 0xac42, 0x0, 0x0);
        gbc.writeMem(0x4ed4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xd178, gbc.sp());
        EXPECT(0x4ed6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 035C
        gbc.setState(0xd59f, 0x9dd3, 0x1a20, 0x79ff, 0x942a, 0x5c2, 0x0, 0x0);
        gbc.writeMem(0xd59f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x9dd3, gbc.sp());
        EXPECT(0xd5a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd59f));
        EXPECT(0xbc, gbc.readMem(0xd5a0));
        // CB BC 035D
        gbc.setState(0xed6c, 0x63cc, 0x70c0, 0x76b2, 0x50f0, 0x332e, 0x1, 0x0);
        gbc.writeMem(0xed6c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x63cc, gbc.sp());
        EXPECT(0xed6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed6c));
        EXPECT(0xbc, gbc.readMem(0xed6d));
        // CB BC 035E
        gbc.setState(0xa310, 0x34b0, 0xee50, 0x36cc, 0xe0c8, 0xc9f1, 0x0, 0x1);
        gbc.writeMem(0xa310, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x34b0, gbc.sp());
        EXPECT(0xa312, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa310));
        EXPECT(0xbc, gbc.readMem(0xa311));
        // CB BC 0360
        gbc.setState(0xd1ee, 0xafb0, 0x2bb0, 0xd1ca, 0xfe76, 0x6964, 0x1, 0x1);
        gbc.writeMem(0xd1ee, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xafb0, gbc.sp());
        EXPECT(0xd1f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1ee));
        EXPECT(0xbc, gbc.readMem(0xd1ef));
        // CB BC 0361
        gbc.setState(0x3b26, 0xba19, 0xebc0, 0xe512, 0xd495, 0x9d9b, 0x1, 0x1);
        gbc.writeMem(0x3b26, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xba19, gbc.sp());
        EXPECT(0x3b28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0362
        gbc.setState(0x1362, 0xa6a9, 0x9e70, 0x9bbb, 0x8194, 0x8b66, 0x0, 0x0);
        gbc.writeMem(0x1362, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xa6a9, gbc.sp());
        EXPECT(0x1364, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0363
        gbc.setState(0xadbf, 0x5c68, 0x70b0, 0xaaaa, 0xb982, 0x5c82, 0x1, 0x0);
        gbc.writeMem(0xadbf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x5c68, gbc.sp());
        EXPECT(0xadc1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadbf));
        EXPECT(0xbc, gbc.readMem(0xadc0));
        // CB BC 0364
        gbc.setState(0x4bd8, 0x2653, 0x2d60, 0xa82b, 0x93a0, 0xdbdb, 0x1, 0x1);
        gbc.writeMem(0x4bd8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x2653, gbc.sp());
        EXPECT(0x4bda, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0365
        gbc.setState(0x6d99, 0xf4ff, 0xcc0, 0xa707, 0xbbac, 0xec9a, 0x1, 0x0);
        gbc.writeMem(0x6d99, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xf4ff, gbc.sp());
        EXPECT(0x6d9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0366
        gbc.setState(0xcf8d, 0x2583, 0xc90, 0x8cf4, 0xab6, 0xaa54, 0x1, 0x1);
        gbc.writeMem(0xcf8d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x2583, gbc.sp());
        EXPECT(0xcf8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf8d));
        EXPECT(0xbc, gbc.readMem(0xcf8e));
        // CB BC 0367
        gbc.setState(0x1e08, 0xaf9d, 0xb660, 0x343e, 0xbb8b, 0xda43, 0x0, 0x0);
        gbc.writeMem(0x1e08, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xaf9d, gbc.sp());
        EXPECT(0x1e0a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0368
        gbc.setState(0x9e5d, 0x2a2f, 0x3600, 0x8290, 0x44ee, 0x90ea, 0x0, 0x0);
        gbc.writeMem(0x9e5d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x2a2f, gbc.sp());
        EXPECT(0x9e5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e5d));
        EXPECT(0xbc, gbc.readMem(0x9e5e));
        // CB BC 0369
        gbc.setState(0x1031, 0xc4, 0x8d10, 0x6c19, 0x5b1a, 0x4115, 0x1, 0x0);
        gbc.writeMem(0x1031, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xc4, gbc.sp());
        EXPECT(0x1033, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 036A
        gbc.setState(0xbddf, 0x6333, 0x7de0, 0x4dfd, 0x9de1, 0xf61e, 0x1, 0x0);
        gbc.writeMem(0xbddf, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x6333, gbc.sp());
        EXPECT(0xbde1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbddf));
        EXPECT(0xbc, gbc.readMem(0xbde0));
        // CB BC 036B
        gbc.setState(0x7cff, 0x8a11, 0xe6e0, 0xf4a7, 0xdc1e, 0xdf45, 0x0, 0x0);
        gbc.writeMem(0x7cff, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x8a11, gbc.sp());
        EXPECT(0x7d01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 036C
        gbc.setState(0x2293, 0x56ac, 0xa0, 0x17b3, 0x70cc, 0xb906, 0x0, 0x0);
        gbc.writeMem(0x2293, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x56ac, gbc.sp());
        EXPECT(0x2295, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 036D
        gbc.setState(0x8d90, 0xa9b3, 0x9de0, 0xf443, 0xe499, 0xffcf, 0x1, 0x0);
        gbc.writeMem(0x8d90, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xa9b3, gbc.sp());
        EXPECT(0x8d92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d90));
        EXPECT(0xbc, gbc.readMem(0x8d91));
        // CB BC 036E
        gbc.setState(0x9a42, 0xb648, 0x61e0, 0xfc8f, 0x6e31, 0x847f, 0x1, 0x1);
        gbc.writeMem(0x9a42, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xb648, gbc.sp());
        EXPECT(0x9a44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a42));
        EXPECT(0xbc, gbc.readMem(0x9a43));
        // CB BC 036F
        gbc.setState(0x2dd7, 0xe2e8, 0xdbf0, 0x429d, 0xdb2c, 0x3271, 0x1, 0x1);
        gbc.writeMem(0x2dd7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xe2e8, gbc.sp());
        EXPECT(0x2dd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0370
        gbc.setState(0x9898, 0xe695, 0xdd80, 0x7262, 0x55e1, 0x85a9, 0x1, 0x0);
        gbc.writeMem(0x9898, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xe695, gbc.sp());
        EXPECT(0x989a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9898));
        EXPECT(0xbc, gbc.readMem(0x9899));
        // CB BC 0371
        gbc.setState(0x1aad, 0x7932, 0x1790, 0x5e3e, 0x17db, 0x2de4, 0x1, 0x1);
        gbc.writeMem(0x1aad, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x7932, gbc.sp());
        EXPECT(0x1aaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0372
        gbc.setState(0x2944, 0x3684, 0x7140, 0xcedb, 0x6a75, 0x3849, 0x1, 0x0);
        gbc.writeMem(0x2944, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x3684, gbc.sp());
        EXPECT(0x2946, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0373
        gbc.setState(0xb16c, 0x36de, 0x8820, 0xf679, 0xf38d, 0xcc7b, 0x1, 0x1);
        gbc.writeMem(0xb16c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x36de, gbc.sp());
        EXPECT(0xb16e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb16c));
        EXPECT(0xbc, gbc.readMem(0xb16d));
        // CB BC 0374
        gbc.setState(0xaa53, 0x7b58, 0xb690, 0xb306, 0x3e8e, 0x33a4, 0x0, 0x1);
        gbc.writeMem(0xaa53, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x7b58, gbc.sp());
        EXPECT(0xaa55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa53));
        EXPECT(0xbc, gbc.readMem(0xaa54));
        // CB BC 0375
        gbc.setState(0x208b, 0xe12a, 0xa6c0, 0xc028, 0x5fad, 0x5288, 0x0, 0x1);
        gbc.writeMem(0x208b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xe12a, gbc.sp());
        EXPECT(0x208d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0378
        gbc.setState(0xd5e0, 0x4a33, 0x5cf0, 0x6915, 0x74e4, 0x82b1, 0x0, 0x0);
        gbc.writeMem(0xd5e0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x4a33, gbc.sp());
        EXPECT(0xd5e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5e0));
        EXPECT(0xbc, gbc.readMem(0xd5e1));
        // CB BC 0379
        gbc.setState(0x75fa, 0x4ca8, 0xfca0, 0xf35a, 0x5ea6, 0x9e1f, 0x1, 0x0);
        gbc.writeMem(0x75fa, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x4ca8, gbc.sp());
        EXPECT(0x75fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 037A
        gbc.setState(0x8c67, 0x7098, 0xd940, 0xf72, 0x1f83, 0x9111, 0x1, 0x0);
        gbc.writeMem(0x8c67, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x7098, gbc.sp());
        EXPECT(0x8c69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c67));
        EXPECT(0xbc, gbc.readMem(0x8c68));
        // CB BC 037B
        gbc.setState(0xce2a, 0xc5d, 0x65c0, 0x876e, 0xfea2, 0xe3ee, 0x0, 0x1);
        gbc.writeMem(0xce2a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xc5d, gbc.sp());
        EXPECT(0xce2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce2a));
        EXPECT(0xbc, gbc.readMem(0xce2b));
        // CB BC 037C
        gbc.setState(0xad35, 0x7bb, 0x90b0, 0x94a6, 0x4236, 0x94ee, 0x0, 0x1);
        gbc.writeMem(0xad35, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x7bb, gbc.sp());
        EXPECT(0xad37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad35));
        EXPECT(0xbc, gbc.readMem(0xad36));
        // CB BC 037D
        gbc.setState(0x91c0, 0x5ad2, 0x2710, 0x3916, 0xbbcd, 0x73c7, 0x0, 0x0);
        gbc.writeMem(0x91c0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x5ad2, gbc.sp());
        EXPECT(0x91c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91c0));
        EXPECT(0xbc, gbc.readMem(0x91c1));
        // CB BC 037F
        gbc.setState(0x8a90, 0xd29a, 0xff0, 0x7e61, 0x65b4, 0x5e0, 0x0, 0x1);
        gbc.writeMem(0x8a90, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xd29a, gbc.sp());
        EXPECT(0x8a92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a90));
        EXPECT(0xbc, gbc.readMem(0x8a91));
        // CB BC 0380
        gbc.setState(0xbe9c, 0x5607, 0xc80, 0x6a42, 0x632a, 0x9dfe, 0x0, 0x1);
        gbc.writeMem(0xbe9c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x5607, gbc.sp());
        EXPECT(0xbe9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe9c));
        EXPECT(0xbc, gbc.readMem(0xbe9d));
        // CB BC 0381
        gbc.setState(0xe187, 0x8351, 0x4420, 0x9409, 0x3e78, 0xafe8, 0x1, 0x0);
        gbc.writeMem(0xe187, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x8351, gbc.sp());
        EXPECT(0xe189, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe187));
        EXPECT(0xbc, gbc.readMem(0xe188));
        // CB BC 0382
        gbc.setState(0x5b94, 0xea03, 0x82e0, 0x5a6e, 0x1875, 0x260, 0x1, 0x0);
        gbc.writeMem(0x5b94, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xea03, gbc.sp());
        EXPECT(0x5b96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0383
        gbc.setState(0xb612, 0x765f, 0xfb0, 0xe834, 0xe8b7, 0x821b, 0x0, 0x0);
        gbc.writeMem(0xb612, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x765f, gbc.sp());
        EXPECT(0xb614, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb612));
        EXPECT(0xbc, gbc.readMem(0xb613));
        // CB BC 0384
        gbc.setState(0x9905, 0x6177, 0x8340, 0x6865, 0xafe5, 0xbb41, 0x1, 0x1);
        gbc.writeMem(0x9905, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x6177, gbc.sp());
        EXPECT(0x9907, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9905));
        EXPECT(0xbc, gbc.readMem(0x9906));
        // CB BC 0385
        gbc.setState(0x40c8, 0x4b1c, 0xf7e0, 0x8d2e, 0xb952, 0xa746, 0x1, 0x0);
        gbc.writeMem(0x40c8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x4b1c, gbc.sp());
        EXPECT(0x40ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0386
        gbc.setState(0x1bd0, 0x8783, 0x4090, 0xa72b, 0x4baa, 0xdbdd, 0x0, 0x1);
        gbc.writeMem(0x1bd0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x8783, gbc.sp());
        EXPECT(0x1bd2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0387
        gbc.setState(0x68b1, 0xeadf, 0x8da0, 0xcbb1, 0x94c6, 0xc22a, 0x0, 0x1);
        gbc.writeMem(0x68b1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xeadf, gbc.sp());
        EXPECT(0x68b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0388
        gbc.setState(0xb674, 0xd833, 0x6010, 0xcdde, 0x1801, 0x590c, 0x1, 0x1);
        gbc.writeMem(0xb674, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xd833, gbc.sp());
        EXPECT(0xb676, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb674));
        EXPECT(0xbc, gbc.readMem(0xb675));
        // CB BC 0389
        gbc.setState(0x80ca, 0x52c2, 0x3330, 0xddb3, 0xa2, 0xacc5, 0x1, 0x0);
        gbc.writeMem(0x80ca, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x52c2, gbc.sp());
        EXPECT(0x80cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80ca));
        EXPECT(0xbc, gbc.readMem(0x80cb));
        // CB BC 038A
        gbc.setState(0x800d, 0x5875, 0xd5c0, 0x1db3, 0x6756, 0x92e7, 0x0, 0x0);
        gbc.writeMem(0x800d, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x5875, gbc.sp());
        EXPECT(0x800f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x800d));
        EXPECT(0xbc, gbc.readMem(0x800e));
        // CB BC 038B
        gbc.setState(0x2a64, 0xe694, 0xcac0, 0x49fb, 0x854c, 0x1f72, 0x1, 0x1);
        gbc.writeMem(0x2a64, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xe694, gbc.sp());
        EXPECT(0x2a66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 038C
        gbc.setState(0x44ba, 0x658b, 0x6da0, 0xfa59, 0xde78, 0xc25d, 0x1, 0x0);
        gbc.writeMem(0x44ba, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x658b, gbc.sp());
        EXPECT(0x44bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 038D
        gbc.setState(0xd17, 0x68cb, 0xe9b0, 0x2c17, 0xbc3e, 0xfdd6, 0x1, 0x0);
        gbc.writeMem(0xd17, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x68cb, gbc.sp());
        EXPECT(0xd19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 038E
        gbc.setState(0x4046, 0x496d, 0x9a00, 0x1865, 0xf8a2, 0xc5ec, 0x0, 0x0);
        gbc.writeMem(0x4046, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x496d, gbc.sp());
        EXPECT(0x4048, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 038F
        gbc.setState(0x657c, 0xd5d, 0xd950, 0x67cf, 0x23e5, 0xbfca, 0x1, 0x0);
        gbc.writeMem(0x657c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xd5d, gbc.sp());
        EXPECT(0x657e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0390
        gbc.setState(0xdb9c, 0xe070, 0x93d0, 0x68b6, 0x87ac, 0x418c, 0x0, 0x1);
        gbc.writeMem(0xdb9c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xe070, gbc.sp());
        EXPECT(0xdb9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb9c));
        EXPECT(0xbc, gbc.readMem(0xdb9d));
        // CB BC 0391
        gbc.setState(0x42a3, 0x57ad, 0x4a90, 0x807f, 0x48dc, 0x4d22, 0x0, 0x0);
        gbc.writeMem(0x42a3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x57ad, gbc.sp());
        EXPECT(0x42a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0392
        gbc.setState(0xdcce, 0x198, 0xb240, 0xd1f1, 0x229f, 0x2592, 0x1, 0x0);
        gbc.writeMem(0xdcce, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x198, gbc.sp());
        EXPECT(0xdcd0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcce));
        EXPECT(0xbc, gbc.readMem(0xdccf));
        // CB BC 0393
        gbc.setState(0xb984, 0x18cc, 0x5d90, 0xadd6, 0x9f7a, 0x6d75, 0x1, 0x0);
        gbc.writeMem(0xb984, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x18cc, gbc.sp());
        EXPECT(0xb986, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb984));
        EXPECT(0xbc, gbc.readMem(0xb985));
        // CB BC 0394
        gbc.setState(0xb9f4, 0x967e, 0x5090, 0x10cc, 0x6121, 0x71e0, 0x0, 0x1);
        gbc.writeMem(0xb9f4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x967e, gbc.sp());
        EXPECT(0xb9f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9f4));
        EXPECT(0xbc, gbc.readMem(0xb9f5));
        // CB BC 0395
        gbc.setState(0x76f5, 0x50f5, 0x74d0, 0xe8e3, 0x222c, 0x98c7, 0x0, 0x1);
        gbc.writeMem(0x76f5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x50f5, gbc.sp());
        EXPECT(0x76f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 0396
        gbc.setState(0x2cd7, 0x8a3b, 0x3ec0, 0x2b2d, 0x390e, 0x1fa3, 0x0, 0x1);
        gbc.writeMem(0x2cd7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x8a3b, gbc.sp());
        EXPECT(0x2cd9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0397
        gbc.setState(0xc0d7, 0xd5d8, 0x7d70, 0x64e5, 0xba1b, 0xf2aa, 0x1, 0x0);
        gbc.writeMem(0xc0d7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xd5d8, gbc.sp());
        EXPECT(0xc0d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0d7));
        EXPECT(0xbc, gbc.readMem(0xc0d8));
        // CB BC 0398
        gbc.setState(0x636f, 0xc368, 0xcee0, 0xa750, 0x2deb, 0x12fe, 0x0, 0x0);
        gbc.writeMem(0x636f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xc368, gbc.sp());
        EXPECT(0x6371, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 0399
        gbc.setState(0x45b3, 0x16c9, 0xc540, 0xc5e, 0xf226, 0xb97b, 0x1, 0x1);
        gbc.writeMem(0x45b3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x16c9, gbc.sp());
        EXPECT(0x45b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 039A
        gbc.setState(0xc137, 0x40ee, 0x46d0, 0x3f93, 0xa662, 0xa3cf, 0x1, 0x1);
        gbc.writeMem(0xc137, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x40ee, gbc.sp());
        EXPECT(0xc139, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc137));
        EXPECT(0xbc, gbc.readMem(0xc138));
        // CB BC 039C
        gbc.setState(0xbe90, 0xf1f7, 0xe530, 0x5dba, 0x2802, 0xb213, 0x1, 0x1);
        gbc.writeMem(0xbe90, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xf1f7, gbc.sp());
        EXPECT(0xbe92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe90));
        EXPECT(0xbc, gbc.readMem(0xbe91));
        // CB BC 039E
        gbc.setState(0x5a26, 0x68e9, 0xa170, 0x512e, 0x85b2, 0xbec4, 0x0, 0x1);
        gbc.writeMem(0x5a26, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x68e9, gbc.sp());
        EXPECT(0x5a28, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 039F
        gbc.setState(0x765b, 0x2e2d, 0x2de0, 0xa639, 0x510e, 0xc3d9, 0x0, 0x1);
        gbc.writeMem(0x765b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x2e2d, gbc.sp());
        EXPECT(0x765d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03A0
        gbc.setState(0x2aff, 0x82a0, 0x3210, 0x5225, 0x96b6, 0xb3b8, 0x0, 0x1);
        gbc.writeMem(0x2aff, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x82a0, gbc.sp());
        EXPECT(0x2b01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03A1
        gbc.setState(0x2771, 0xca7c, 0x3550, 0x1741, 0x8146, 0x13b6, 0x0, 0x0);
        gbc.writeMem(0x2771, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xca7c, gbc.sp());
        EXPECT(0x2773, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03A2
        gbc.setState(0xae3a, 0x49e0, 0xa200, 0xfb87, 0xb6a1, 0x3793, 0x1, 0x0);
        gbc.writeMem(0xae3a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x49e0, gbc.sp());
        EXPECT(0xae3c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae3a));
        EXPECT(0xbc, gbc.readMem(0xae3b));
        // CB BC 03A4
        gbc.setState(0x6506, 0xf1e, 0xe50, 0xf4a5, 0xf5b3, 0x75a5, 0x1, 0x1);
        gbc.writeMem(0x6506, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xf1e, gbc.sp());
        EXPECT(0x6508, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03A5
        gbc.setState(0x703b, 0xde55, 0x41b0, 0x77d6, 0x6caa, 0xce5d, 0x0, 0x0);
        gbc.writeMem(0x703b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xde55, gbc.sp());
        EXPECT(0x703d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03A6
        gbc.setState(0x3209, 0xa560, 0x3b0, 0x1fac, 0xb37c, 0x4aa9, 0x1, 0x1);
        gbc.writeMem(0x3209, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xa560, gbc.sp());
        EXPECT(0x320b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03A7
        gbc.setState(0x3510, 0xe2c0, 0x5ad0, 0x176b, 0xa63f, 0xe984, 0x0, 0x0);
        gbc.writeMem(0x3510, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xe2c0, gbc.sp());
        EXPECT(0x3512, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03A8
        gbc.setState(0x6221, 0xcb99, 0xef10, 0x495c, 0x8b01, 0x2f0c, 0x1, 0x0);
        gbc.writeMem(0x6221, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xcb99, gbc.sp());
        EXPECT(0x6223, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03A9
        gbc.setState(0xa959, 0xa37a, 0xd1e0, 0x2cb1, 0x53d5, 0x4e31, 0x1, 0x1);
        gbc.writeMem(0xa959, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xa37a, gbc.sp());
        EXPECT(0xa95b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa959));
        EXPECT(0xbc, gbc.readMem(0xa95a));
        // CB BC 03AA
        gbc.setState(0x7b9f, 0xa85e, 0x7240, 0x14cd, 0x2288, 0xa936, 0x1, 0x1);
        gbc.writeMem(0x7b9f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xa85e, gbc.sp());
        EXPECT(0x7ba1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03AB
        gbc.setState(0x439f, 0x9226, 0x6a00, 0x1807, 0x7711, 0x7ca5, 0x1, 0x0);
        gbc.writeMem(0x439f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x9226, gbc.sp());
        EXPECT(0x43a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03AC
        gbc.setState(0xdce2, 0x22c, 0xcfd0, 0x9def, 0xa3e5, 0xae00, 0x1, 0x1);
        gbc.writeMem(0xdce2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x22c, gbc.sp());
        EXPECT(0xdce4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdce2));
        EXPECT(0xbc, gbc.readMem(0xdce3));
        // CB BC 03AD
        gbc.setState(0x66d8, 0x30ad, 0xc2d0, 0x9227, 0x5a42, 0x8520, 0x1, 0x0);
        gbc.writeMem(0x66d8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x30ad, gbc.sp());
        EXPECT(0x66da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03AE
        gbc.setState(0x4924, 0x7071, 0x2d80, 0x646, 0x8b09, 0x242b, 0x1, 0x0);
        gbc.writeMem(0x4924, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x7071, gbc.sp());
        EXPECT(0x4926, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03AF
        gbc.setState(0xecef, 0x4a10, 0x1450, 0xc2c9, 0xcf9a, 0xf40, 0x1, 0x0);
        gbc.writeMem(0xecef, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x4a10, gbc.sp());
        EXPECT(0xecf1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecef));
        EXPECT(0xbc, gbc.readMem(0xecf0));
        // CB BC 03B0
        gbc.setState(0xb0e6, 0x7145, 0xa0d0, 0xc1d9, 0x2f76, 0xaa43, 0x1, 0x1);
        gbc.writeMem(0xb0e6, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x7145, gbc.sp());
        EXPECT(0xb0e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0e6));
        EXPECT(0xbc, gbc.readMem(0xb0e7));
        // CB BC 03B1
        gbc.setState(0x9715, 0xfeeb, 0x8590, 0xcd79, 0xe194, 0xef53, 0x1, 0x1);
        gbc.writeMem(0x9715, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xfeeb, gbc.sp());
        EXPECT(0x9717, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9715));
        EXPECT(0xbc, gbc.readMem(0x9716));
        // CB BC 03B2
        gbc.setState(0x529f, 0x96c5, 0xb490, 0x5e4, 0x623b, 0xbf68, 0x0, 0x1);
        gbc.writeMem(0x529f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x96c5, gbc.sp());
        EXPECT(0x52a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03B3
        gbc.setState(0x60e4, 0xe400, 0x5170, 0x31ab, 0x9f83, 0x9e0f, 0x0, 0x1);
        gbc.writeMem(0x60e4, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xe400, gbc.sp());
        EXPECT(0x60e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03B4
        gbc.setState(0xd137, 0xa25f, 0x5490, 0x4795, 0xb836, 0x10e8, 0x0, 0x1);
        gbc.writeMem(0xd137, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xa25f, gbc.sp());
        EXPECT(0xd139, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd137));
        EXPECT(0xbc, gbc.readMem(0xd138));
        // CB BC 03B5
        gbc.setState(0xc9f7, 0xf63e, 0x15c0, 0x6903, 0xfefe, 0xd5ee, 0x0, 0x0);
        gbc.writeMem(0xc9f7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xf63e, gbc.sp());
        EXPECT(0xc9f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9f7));
        EXPECT(0xbc, gbc.readMem(0xc9f8));
        // CB BC 03B6
        gbc.setState(0x6bf7, 0xe358, 0x5480, 0x4fcb, 0x8536, 0xb966, 0x0, 0x1);
        gbc.writeMem(0x6bf7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xe358, gbc.sp());
        EXPECT(0x6bf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03B7
        gbc.setState(0xa7c0, 0xe974, 0x4740, 0x5a07, 0x4300, 0x6c56, 0x0, 0x0);
        gbc.writeMem(0xa7c0, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xe974, gbc.sp());
        EXPECT(0xa7c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7c0));
        EXPECT(0xbc, gbc.readMem(0xa7c1));
        // CB BC 03B8
        gbc.setState(0x206f, 0xc78d, 0x9b90, 0x2731, 0x8ae8, 0x2652, 0x1, 0x1);
        gbc.writeMem(0x206f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xc78d, gbc.sp());
        EXPECT(0x2071, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03BA
        gbc.setState(0x1d2f, 0xad4d, 0xd980, 0xd585, 0x3e20, 0x7d36, 0x0, 0x1);
        gbc.writeMem(0x1d2f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xad4d, gbc.sp());
        EXPECT(0x1d31, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03BC
        gbc.setState(0x4ad1, 0xf09a, 0x1590, 0x4d76, 0x6619, 0xc6a9, 0x1, 0x1);
        gbc.writeMem(0x4ad1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xf09a, gbc.sp());
        EXPECT(0x4ad3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03BD
        gbc.setState(0x6445, 0x5b10, 0x2fd0, 0xaaab, 0x7049, 0xb65e, 0x0, 0x0);
        gbc.writeMem(0x6445, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x5b10, gbc.sp());
        EXPECT(0x6447, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03BE
        gbc.setState(0x6e49, 0x6cec, 0x1a0, 0xf758, 0xf673, 0xb3aa, 0x1, 0x1);
        gbc.writeMem(0x6e49, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x6cec, gbc.sp());
        EXPECT(0x6e4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03BF
        gbc.setState(0x5331, 0xeb2c, 0x1a0, 0x1121, 0x5313, 0xc6a9, 0x1, 0x0);
        gbc.writeMem(0x5331, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xeb2c, gbc.sp());
        EXPECT(0x5333, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03C1
        gbc.setState(0x1523, 0x880d, 0xe530, 0x7754, 0x6769, 0x2c05, 0x0, 0x0);
        gbc.writeMem(0x1523, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x880d, gbc.sp());
        EXPECT(0x1525, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03C2
        gbc.setState(0xee3f, 0xddd0, 0x1f60, 0x45d9, 0x2d63, 0x5288, 0x1, 0x1);
        gbc.writeMem(0xee3f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xddd0, gbc.sp());
        EXPECT(0xee41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee3f));
        EXPECT(0xbc, gbc.readMem(0xee40));
        // CB BC 03C3
        gbc.setState(0x9083, 0x6aa9, 0x3160, 0xcdc, 0xf314, 0x6d3b, 0x0, 0x1);
        gbc.writeMem(0x9083, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x6aa9, gbc.sp());
        EXPECT(0x9085, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9083));
        EXPECT(0xbc, gbc.readMem(0x9084));
        // CB BC 03C4
        gbc.setState(0xcaba, 0xeb70, 0xec40, 0xf337, 0x7544, 0x7177, 0x0, 0x1);
        gbc.writeMem(0xcaba, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xeb70, gbc.sp());
        EXPECT(0xcabc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaba));
        EXPECT(0xbc, gbc.readMem(0xcabb));
        // CB BC 03C5
        gbc.setState(0xbcbb, 0x1aff, 0x83b0, 0xc6d3, 0x117d, 0x6f, 0x1, 0x1);
        gbc.writeMem(0xbcbb, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x1aff, gbc.sp());
        EXPECT(0xbcbd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcbb));
        EXPECT(0xbc, gbc.readMem(0xbcbc));
        // CB BC 03C6
        gbc.setState(0xb9a, 0xd84a, 0xf5e0, 0x2154, 0xa752, 0xd75a, 0x0, 0x1);
        gbc.writeMem(0xb9a, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xd84a, gbc.sp());
        EXPECT(0xb9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03C7
        gbc.setState(0x3d3, 0x7926, 0xc410, 0x54d8, 0x9160, 0x1ebe, 0x0, 0x1);
        gbc.writeMem(0x3d3, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x7926, gbc.sp());
        EXPECT(0x3d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03C8
        gbc.setState(0x5552, 0xc50d, 0x6a80, 0x3fa, 0x50d6, 0x20b9, 0x0, 0x0);
        gbc.writeMem(0x5552, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xc50d, gbc.sp());
        EXPECT(0x5554, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03C9
        gbc.setState(0x5305, 0x67cc, 0xa0a0, 0xe709, 0x4b5d, 0x8e2c, 0x0, 0x0);
        gbc.writeMem(0x5305, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x67cc, gbc.sp());
        EXPECT(0x5307, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03CA
        gbc.setState(0x18f8, 0x5230, 0xf310, 0x7cd8, 0x38dc, 0x1ec8, 0x0, 0x0);
        gbc.writeMem(0x18f8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x5230, gbc.sp());
        EXPECT(0x18fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03CB
        gbc.setState(0x490e, 0x64b3, 0x7a80, 0xaff5, 0xcb30, 0x1210, 0x1, 0x1);
        gbc.writeMem(0x490e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x64b3, gbc.sp());
        EXPECT(0x4910, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03CC
        gbc.setState(0x79de, 0xbcbc, 0x9fd0, 0x2368, 0xd556, 0x7b1c, 0x0, 0x0);
        gbc.writeMem(0x79de, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xbcbc, gbc.sp());
        EXPECT(0x79e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03CD
        gbc.setState(0xc3f7, 0x1002, 0x1b50, 0xa757, 0xc23d, 0xc07a, 0x0, 0x1);
        gbc.writeMem(0xc3f7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x1002, gbc.sp());
        EXPECT(0xc3f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3f7));
        EXPECT(0xbc, gbc.readMem(0xc3f8));
        // CB BC 03CE
        gbc.setState(0xe45e, 0x7d66, 0x4e70, 0x1e2, 0x1dd1, 0x5e47, 0x0, 0x1);
        gbc.writeMem(0xe45e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x7d66, gbc.sp());
        EXPECT(0xe460, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe45e));
        EXPECT(0xbc, gbc.readMem(0xe45f));
        // CB BC 03CF
        gbc.setState(0x3af2, 0xe3e4, 0xe4b0, 0x2a38, 0x99a6, 0x4e07, 0x1, 0x0);
        gbc.writeMem(0x3af2, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xe3e4, gbc.sp());
        EXPECT(0x3af4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03D0
        gbc.setState(0xd776, 0x397f, 0xa260, 0xb49a, 0x6911, 0xe759, 0x0, 0x1);
        gbc.writeMem(0xd776, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x397f, gbc.sp());
        EXPECT(0xd778, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd776));
        EXPECT(0xbc, gbc.readMem(0xd777));
        // CB BC 03D2
        gbc.setState(0xaca1, 0x2fcd, 0x6850, 0x59bf, 0x4e59, 0x5b6b, 0x0, 0x1);
        gbc.writeMem(0xaca1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x2fcd, gbc.sp());
        EXPECT(0xaca3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaca1));
        EXPECT(0xbc, gbc.readMem(0xaca2));
        // CB BC 03D3
        gbc.setState(0xd0c5, 0x504a, 0x5bd0, 0xa514, 0x3856, 0x34b0, 0x1, 0x1);
        gbc.writeMem(0xd0c5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x504a, gbc.sp());
        EXPECT(0xd0c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0c5));
        EXPECT(0xbc, gbc.readMem(0xd0c6));
        // CB BC 03D4
        gbc.setState(0x286, 0xec3f, 0x3d70, 0xbf1a, 0x6dfd, 0x614c, 0x0, 0x0);
        gbc.writeMem(0x286, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xec3f, gbc.sp());
        EXPECT(0x288, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03D5
        gbc.setState(0x691c, 0x3642, 0xa220, 0xdbdc, 0xb738, 0x815a, 0x0, 0x1);
        gbc.writeMem(0x691c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x3642, gbc.sp());
        EXPECT(0x691e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03D6
        gbc.setState(0x3d05, 0x27fd, 0x5e10, 0xccc0, 0xa94, 0x74b2, 0x0, 0x0);
        gbc.writeMem(0x3d05, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x27fd, gbc.sp());
        EXPECT(0x3d07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03D7
        gbc.setState(0x7a84, 0x9fa, 0x9ea0, 0x5932, 0xc77d, 0x53e1, 0x1, 0x1);
        gbc.writeMem(0x7a84, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x9fa, gbc.sp());
        EXPECT(0x7a86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03D8
        gbc.setState(0xb666, 0x3553, 0xe030, 0xd095, 0x6a67, 0x63fb, 0x1, 0x1);
        gbc.writeMem(0xb666, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x3553, gbc.sp());
        EXPECT(0xb668, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb666));
        EXPECT(0xbc, gbc.readMem(0xb667));
        // CB BC 03D9
        gbc.setState(0x7cee, 0x6e51, 0x7d90, 0xbf20, 0x16e, 0xa8d9, 0x0, 0x0);
        gbc.writeMem(0x7cee, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x6e51, gbc.sp());
        EXPECT(0x7cf0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03DA
        gbc.setState(0x8dc7, 0x8bb0, 0x36f0, 0x3219, 0x5706, 0x3e9c, 0x1, 0x1);
        gbc.writeMem(0x8dc7, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x8bb0, gbc.sp());
        EXPECT(0x8dc9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dc7));
        EXPECT(0xbc, gbc.readMem(0x8dc8));
        // CB BC 03DB
        gbc.setState(0x9f5c, 0x58ed, 0xf7d0, 0x37af, 0xb729, 0xa590, 0x1, 0x0);
        gbc.writeMem(0x9f5c, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x58ed, gbc.sp());
        EXPECT(0x9f5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f5c));
        EXPECT(0xbc, gbc.readMem(0x9f5d));
        // CB BC 03DC
        gbc.setState(0xa0ed, 0xcc6d, 0x3040, 0x888e, 0x6506, 0x66db, 0x0, 0x1);
        gbc.writeMem(0xa0ed, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xcc6d, gbc.sp());
        EXPECT(0xa0ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0ed));
        EXPECT(0xbc, gbc.readMem(0xa0ee));
        // CB BC 03DD
        gbc.setState(0x4678, 0xb04a, 0xb590, 0x61bf, 0x2d39, 0xcbf8, 0x1, 0x0);
        gbc.writeMem(0x4678, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xb04a, gbc.sp());
        EXPECT(0x467a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03DE
        gbc.setState(0x12f, 0xc5d2, 0xe1c0, 0x14a0, 0xa780, 0xb88a, 0x1, 0x1);
        gbc.writeMem(0x12f, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xc5d2, gbc.sp());
        EXPECT(0x131, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03DF
        gbc.setState(0x6b21, 0x56de, 0xbdc0, 0xef2c, 0x5760, 0x9765, 0x1, 0x1);
        gbc.writeMem(0x6b21, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x56de, gbc.sp());
        EXPECT(0x6b23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03E0
        gbc.setState(0x5356, 0x5bf0, 0x1ed0, 0xadfa, 0x4034, 0x6b0e, 0x0, 0x0);
        gbc.writeMem(0x5356, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x5bf0, gbc.sp());
        EXPECT(0x5358, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03E1
        gbc.setState(0xb87e, 0x819e, 0x770, 0xa36, 0xc8c4, 0xb3d5, 0x0, 0x1);
        gbc.writeMem(0xb87e, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x819e, gbc.sp());
        EXPECT(0xb880, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb87e));
        EXPECT(0xbc, gbc.readMem(0xb87f));
        // CB BC 03E2
        gbc.setState(0x3a1, 0x3568, 0xaa50, 0x90b9, 0x7427, 0xcc77, 0x1, 0x0);
        gbc.writeMem(0x3a1, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x3568, gbc.sp());
        EXPECT(0x3a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03E3
        gbc.setState(0x29e8, 0xa3a8, 0x4320, 0xfafc, 0x4104, 0x6350, 0x0, 0x0);
        gbc.writeMem(0x29e8, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xa3a8, gbc.sp());
        EXPECT(0x29ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB BC 03E4
        gbc.setState(0xdbb5, 0xf87c, 0xb110, 0x5736, 0x24a8, 0xd919, 0x1, 0x0);
        gbc.writeMem(0xdbb5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xf87c, gbc.sp());
        EXPECT(0xdbb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbb5));
        EXPECT(0xbc, gbc.readMem(0xdbb6));
        // CB BC 03E5
        gbc.setState(0x6fb5, 0xc990, 0x9a90, 0xa91a, 0x818d, 0xe6fa, 0x1, 0x1);
        gbc.writeMem(0x6fb5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xc990, gbc.sp());
        EXPECT(0x6fb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB BC 03E6
        gbc.setState(0x980b, 0xc38f, 0xe200, 0xe96f, 0xeda9, 0x1bf3, 0x1, 0x1);
        gbc.writeMem(0x980b, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xc38f, gbc.sp());
        EXPECT(0x980d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x980b));
        EXPECT(0xbc, gbc.readMem(0x980c));
        // CB BC 03E7
        gbc.setState(0xb6f5, 0xfc10, 0x1be0, 0xf39f, 0xee8b, 0x3fd2, 0x1, 0x0);
        gbc.writeMem(0xb6f5, { 0xcb, 0xbc });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xfc10, gbc.sp());
        EXPECT(0xb6f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6f5));
        EXPECT(0xbc, gbc.readMem(0xb6f6));
    }
