    TEST(gbcemu, opcode_cb_75) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 75 0000
        gbc.setState(0x644a, 0xe64c, 0xa2c0, 0x2a0a, 0x977a, 0x4311, 0x0, 0x1);
        gbc.writeMem(0x644a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xe64c, gbc.sp());
        EXPECT(0x644c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0001
        gbc.setState(0x65e6, 0x7b08, 0xc3b0, 0x9bad, 0xecd8, 0x1a63, 0x1, 0x0);
        gbc.writeMem(0x65e6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x7b08, gbc.sp());
        EXPECT(0x65e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0002
        gbc.setState(0xad9, 0x947, 0xebb0, 0x7712, 0xc98d, 0xc838, 0x0, 0x0);
        gbc.writeMem(0xad9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x947, gbc.sp());
        EXPECT(0xadb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0003
        gbc.setState(0xed59, 0x64c9, 0xe7c0, 0x49c2, 0xf6d4, 0xdd9e, 0x1, 0x1);
        gbc.writeMem(0xed59, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x64c9, gbc.sp());
        EXPECT(0xed5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed59));
        EXPECT(0x75, gbc.readMem(0xed5a));
        // CB 75 0004
        gbc.setState(0xc329, 0x4e3b, 0xe5b0, 0x3d2b, 0x47a2, 0x22ae, 0x0, 0x1);
        gbc.writeMem(0xc329, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x4e3b, gbc.sp());
        EXPECT(0xc32b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc329));
        EXPECT(0x75, gbc.readMem(0xc32a));
        // CB 75 0005
        gbc.setState(0x9b06, 0x76f3, 0x7650, 0x1d5f, 0xb3a1, 0x42ef, 0x0, 0x1);
        gbc.writeMem(0x9b06, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x76f3, gbc.sp());
        EXPECT(0x9b08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b06));
        EXPECT(0x75, gbc.readMem(0x9b07));
        // CB 75 0006
        gbc.setState(0xe68e, 0xc782, 0x3250, 0x322d, 0xe537, 0x7e45, 0x1, 0x1);
        gbc.writeMem(0xe68e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xc782, gbc.sp());
        EXPECT(0xe690, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe68e));
        EXPECT(0x75, gbc.readMem(0xe68f));
        // CB 75 0007
        gbc.setState(0xd5dc, 0x7ef7, 0xdbb0, 0xd2d5, 0x1da4, 0xa596, 0x0, 0x1);
        gbc.writeMem(0xd5dc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x7ef7, gbc.sp());
        EXPECT(0xd5de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5dc));
        EXPECT(0x75, gbc.readMem(0xd5dd));
        // CB 75 0008
        gbc.setState(0x4b67, 0x4e87, 0x7bf0, 0xdae0, 0x7678, 0x16d4, 0x0, 0x0);
        gbc.writeMem(0x4b67, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x4e87, gbc.sp());
        EXPECT(0x4b69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0009
        gbc.setState(0xeff, 0x9da1, 0x97c0, 0x89b3, 0xbd66, 0xa2a3, 0x1, 0x0);
        gbc.writeMem(0xeff, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x9da1, gbc.sp());
        EXPECT(0xf01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 000A
        gbc.setState(0x6276, 0x43d2, 0xbf80, 0xf9a6, 0x5d79, 0xd64e, 0x0, 0x1);
        gbc.writeMem(0x6276, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x43d2, gbc.sp());
        EXPECT(0x6278, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 000B
        gbc.setState(0x225, 0xa48f, 0xd9c0, 0x4cdc, 0xd9d6, 0x531e, 0x0, 0x0);
        gbc.writeMem(0x225, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xa48f, gbc.sp());
        EXPECT(0x227, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 000C
        gbc.setState(0xca89, 0x64d9, 0x3ef0, 0x5ed9, 0x6a32, 0x9d82, 0x1, 0x1);
        gbc.writeMem(0xca89, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x64d9, gbc.sp());
        EXPECT(0xca8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca89));
        EXPECT(0x75, gbc.readMem(0xca8a));
        // CB 75 000D
        gbc.setState(0xc7e5, 0x9f0f, 0x2d20, 0x8ebb, 0x766a, 0xd59f, 0x1, 0x1);
        gbc.writeMem(0xc7e5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x9f0f, gbc.sp());
        EXPECT(0xc7e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7e5));
        EXPECT(0x75, gbc.readMem(0xc7e6));
        // CB 75 000E
        gbc.setState(0xa2fa, 0xa450, 0x51f0, 0xfcf3, 0xf1e1, 0x8094, 0x1, 0x0);
        gbc.writeMem(0xa2fa, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xa450, gbc.sp());
        EXPECT(0xa2fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2fa));
        EXPECT(0x75, gbc.readMem(0xa2fb));
        // CB 75 000F
        gbc.setState(0x7693, 0xbc77, 0xf800, 0xa881, 0x5684, 0x14b8, 0x0, 0x1);
        gbc.writeMem(0x7693, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xbc77, gbc.sp());
        EXPECT(0x7695, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0010
        gbc.setState(0x7dbd, 0x4658, 0xf730, 0xe583, 0x91ba, 0x9ec9, 0x1, 0x1);
        gbc.writeMem(0x7dbd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x4658, gbc.sp());
        EXPECT(0x7dbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0011
        gbc.setState(0x38fc, 0x684a, 0xe330, 0x7d8f, 0x3ba9, 0xb047, 0x0, 0x1);
        gbc.writeMem(0x38fc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x684a, gbc.sp());
        EXPECT(0x38fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0012
        gbc.setState(0x78a0, 0x1e2a, 0xb390, 0xdf88, 0xb1a1, 0xa4e9, 0x0, 0x0);
        gbc.writeMem(0x78a0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x1e2a, gbc.sp());
        EXPECT(0x78a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0013
        gbc.setState(0x8843, 0x8965, 0x8380, 0x763c, 0xb353, 0x3f70, 0x1, 0x1);
        gbc.writeMem(0x8843, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x8965, gbc.sp());
        EXPECT(0x8845, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8843));
        EXPECT(0x75, gbc.readMem(0x8844));
        // CB 75 0014
        gbc.setState(0x5d6c, 0x2a89, 0x95b0, 0xd39c, 0x96de, 0xb713, 0x1, 0x1);
        gbc.writeMem(0x5d6c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x2a89, gbc.sp());
        EXPECT(0x5d6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0015
        gbc.setState(0xe78d, 0xefc8, 0x3950, 0xf935, 0xbd96, 0x1e47, 0x1, 0x0);
        gbc.writeMem(0xe78d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xefc8, gbc.sp());
        EXPECT(0xe78f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe78d));
        EXPECT(0x75, gbc.readMem(0xe78e));
        // CB 75 0017
        gbc.setState(0xa0e9, 0x570f, 0x1460, 0x3ef5, 0x3d25, 0x3867, 0x0, 0x0);
        gbc.writeMem(0xa0e9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x570f, gbc.sp());
        EXPECT(0xa0eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0e9));
        EXPECT(0x75, gbc.readMem(0xa0ea));
        // CB 75 0018
        gbc.setState(0x9c9e, 0x6260, 0xd400, 0x8832, 0x8a77, 0x29ad, 0x0, 0x0);
        gbc.writeMem(0x9c9e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x6260, gbc.sp());
        EXPECT(0x9ca0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c9e));
        EXPECT(0x75, gbc.readMem(0x9c9f));
        // CB 75 0019
        gbc.setState(0x24ad, 0x276f, 0xec00, 0x3d92, 0xab5f, 0x9275, 0x1, 0x0);
        gbc.writeMem(0x24ad, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x276f, gbc.sp());
        EXPECT(0x24af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 001A
        gbc.setState(0xef1e, 0xc7f7, 0x85a0, 0x6838, 0xef, 0xf2c8, 0x0, 0x0);
        gbc.writeMem(0xef1e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xc7f7, gbc.sp());
        EXPECT(0xef20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef1e));
        EXPECT(0x75, gbc.readMem(0xef1f));
        // CB 75 001B
        gbc.setState(0x7934, 0xaa65, 0x4990, 0x77f, 0xeec4, 0x4418, 0x0, 0x0);
        gbc.writeMem(0x7934, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xaa65, gbc.sp());
        EXPECT(0x7936, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 001C
        gbc.setState(0x1cbd, 0xb7b1, 0xdb80, 0x6bb5, 0xf54b, 0x16fc, 0x0, 0x0);
        gbc.writeMem(0x1cbd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xb7b1, gbc.sp());
        EXPECT(0x1cbf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 001D
        gbc.setState(0x1d6f, 0x9e0f, 0x1c20, 0x1274, 0xf00, 0x3d89, 0x1, 0x0);
        gbc.writeMem(0x1d6f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x9e0f, gbc.sp());
        EXPECT(0x1d71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 001E
        gbc.setState(0x842d, 0x39b5, 0x5860, 0xd2d6, 0x59a6, 0x3f46, 0x0, 0x1);
        gbc.writeMem(0x842d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x39b5, gbc.sp());
        EXPECT(0x842f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x842d));
        EXPECT(0x75, gbc.readMem(0x842e));
        // CB 75 001F
        gbc.setState(0x674e, 0xd741, 0x22e0, 0x658b, 0xd086, 0x792e, 0x1, 0x0);
        gbc.writeMem(0x674e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xd741, gbc.sp());
        EXPECT(0x6750, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0020
        gbc.setState(0x7182, 0x8478, 0x58d0, 0xf6eb, 0x78b1, 0x6a97, 0x1, 0x0);
        gbc.writeMem(0x7182, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x8478, gbc.sp());
        EXPECT(0x7184, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0021
        gbc.setState(0x2097, 0x18fa, 0x34e0, 0x4031, 0xa095, 0x3849, 0x0, 0x1);
        gbc.writeMem(0x2097, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x18fa, gbc.sp());
        EXPECT(0x2099, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0022
        gbc.setState(0x7a61, 0x71a, 0x6310, 0x91e3, 0xb790, 0x787c, 0x1, 0x1);
        gbc.writeMem(0x7a61, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x71a, gbc.sp());
        EXPECT(0x7a63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0023
        gbc.setState(0x257c, 0x2a96, 0xcfb0, 0x4445, 0x7700, 0x9e3f, 0x1, 0x1);
        gbc.writeMem(0x257c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x2a96, gbc.sp());
        EXPECT(0x257e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0024
        gbc.setState(0x761a, 0x1b43, 0x440, 0xff3e, 0xb090, 0xbe4c, 0x1, 0x0);
        gbc.writeMem(0x761a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x1b43, gbc.sp());
        EXPECT(0x761c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0025
        gbc.setState(0x1c5f, 0x5c80, 0xdda0, 0x61ae, 0xb57b, 0x5562, 0x0, 0x0);
        gbc.writeMem(0x1c5f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x5c80, gbc.sp());
        EXPECT(0x1c61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0026
        gbc.setState(0xb0d5, 0xeaf6, 0x5610, 0x3361, 0x80ee, 0x215f, 0x1, 0x1);
        gbc.writeMem(0xb0d5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xeaf6, gbc.sp());
        EXPECT(0xb0d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0d5));
        EXPECT(0x75, gbc.readMem(0xb0d6));
        // CB 75 0027
        gbc.setState(0x7d79, 0xb06c, 0x1a0, 0xc163, 0xf376, 0x6f5a, 0x0, 0x0);
        gbc.writeMem(0x7d79, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xb06c, gbc.sp());
        EXPECT(0x7d7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0028
        gbc.setState(0xd462, 0xe571, 0xa950, 0x3a88, 0xf49f, 0x1886, 0x1, 0x1);
        gbc.writeMem(0xd462, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xe571, gbc.sp());
        EXPECT(0xd464, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd462));
        EXPECT(0x75, gbc.readMem(0xd463));
        // CB 75 0029
        gbc.setState(0x6334, 0x4b70, 0x5f50, 0x7cfe, 0x5824, 0xc845, 0x1, 0x0);
        gbc.writeMem(0x6334, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x4b70, gbc.sp());
        EXPECT(0x6336, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 002A
        gbc.setState(0xbe89, 0xde1e, 0x4fb0, 0x9586, 0x93e4, 0x7a43, 0x1, 0x0);
        gbc.writeMem(0xbe89, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xde1e, gbc.sp());
        EXPECT(0xbe8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe89));
        EXPECT(0x75, gbc.readMem(0xbe8a));
        // CB 75 002B
        gbc.setState(0x2b36, 0xac92, 0x8300, 0x6fc6, 0x9623, 0x7a3b, 0x1, 0x1);
        gbc.writeMem(0x2b36, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xac92, gbc.sp());
        EXPECT(0x2b38, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 002C
        gbc.setState(0x11d6, 0x38c6, 0xbdf0, 0xf16f, 0x30e8, 0x4aea, 0x0, 0x0);
        gbc.writeMem(0x11d6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x38c6, gbc.sp());
        EXPECT(0x11d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 002D
        gbc.setState(0x35db, 0xfb98, 0x8b90, 0xb74a, 0xc554, 0x7dbb, 0x1, 0x0);
        gbc.writeMem(0x35db, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xfb98, gbc.sp());
        EXPECT(0x35dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 002F
        gbc.setState(0xcfe4, 0xda88, 0x5630, 0x29c3, 0x8311, 0xff3b, 0x1, 0x1);
        gbc.writeMem(0xcfe4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xda88, gbc.sp());
        EXPECT(0xcfe6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfe4));
        EXPECT(0x75, gbc.readMem(0xcfe5));
        // CB 75 0030
        gbc.setState(0xca81, 0x56b1, 0xfd90, 0x7a93, 0xe7cc, 0x3018, 0x0, 0x0);
        gbc.writeMem(0xca81, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x56b1, gbc.sp());
        EXPECT(0xca83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca81));
        EXPECT(0x75, gbc.readMem(0xca82));
        // CB 75 0031
        gbc.setState(0x4983, 0xcc1, 0xd570, 0xd003, 0x5860, 0x2682, 0x0, 0x1);
        gbc.writeMem(0x4983, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xcc1, gbc.sp());
        EXPECT(0x4985, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0032
        gbc.setState(0x819, 0x2c36, 0x7eb0, 0x8f78, 0xefea, 0x12ab, 0x1, 0x1);
        gbc.writeMem(0x819, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x2c36, gbc.sp());
        EXPECT(0x81b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0033
        gbc.setState(0xac61, 0xcd74, 0x3e20, 0xca88, 0x9da1, 0xd3f1, 0x1, 0x0);
        gbc.writeMem(0xac61, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xcd74, gbc.sp());
        EXPECT(0xac63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac61));
        EXPECT(0x75, gbc.readMem(0xac62));
        // CB 75 0034
        gbc.setState(0xd214, 0x8d90, 0xc960, 0xf3d6, 0xad2, 0x5d19, 0x1, 0x0);
        gbc.writeMem(0xd214, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x8d90, gbc.sp());
        EXPECT(0xd216, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd214));
        EXPECT(0x75, gbc.readMem(0xd215));
        // CB 75 0035
        gbc.setState(0x59d7, 0xcd4f, 0xe070, 0x6b3, 0xcd0c, 0x99f3, 0x0, 0x1);
        gbc.writeMem(0x59d7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xcd4f, gbc.sp());
        EXPECT(0x59d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0036
        gbc.setState(0xe1ce, 0x258e, 0x85e0, 0xdb0b, 0x5960, 0xd35c, 0x0, 0x0);
        gbc.writeMem(0xe1ce, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x258e, gbc.sp());
        EXPECT(0xe1d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1ce));
        EXPECT(0x75, gbc.readMem(0xe1cf));
        // CB 75 0037
        gbc.setState(0x297c, 0x7672, 0x55a0, 0x4d10, 0x5e58, 0x5b85, 0x0, 0x1);
        gbc.writeMem(0x297c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x7672, gbc.sp());
        EXPECT(0x297e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0038
        gbc.setState(0x28bd, 0x1e1e, 0x89d0, 0x20ec, 0x84b4, 0x94df, 0x0, 0x0);
        gbc.writeMem(0x28bd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x1e1e, gbc.sp());
        EXPECT(0x28bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 003A
        gbc.setState(0x58e1, 0x84f, 0x81b0, 0x3740, 0x71af, 0xf304, 0x0, 0x0);
        gbc.writeMem(0x58e1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x84f, gbc.sp());
        EXPECT(0x58e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 003B
        gbc.setState(0xb8dd, 0x362a, 0x9480, 0xbe93, 0x726c, 0x7109, 0x1, 0x0);
        gbc.writeMem(0xb8dd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x362a, gbc.sp());
        EXPECT(0xb8df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8dd));
        EXPECT(0x75, gbc.readMem(0xb8de));
        // CB 75 003C
        gbc.setState(0xebac, 0x8ae, 0x59a0, 0x7595, 0x9547, 0xba7c, 0x0, 0x0);
        gbc.writeMem(0xebac, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x8ae, gbc.sp());
        EXPECT(0xebae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebac));
        EXPECT(0x75, gbc.readMem(0xebad));
        // CB 75 003D
        gbc.setState(0xc307, 0x35fd, 0x5c80, 0x5844, 0xe514, 0x4e97, 0x0, 0x1);
        gbc.writeMem(0xc307, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x35fd, gbc.sp());
        EXPECT(0xc309, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc307));
        EXPECT(0x75, gbc.readMem(0xc308));
        // CB 75 003E
        gbc.setState(0x33f, 0xb39e, 0xb0, 0xe992, 0xa17e, 0x8efd, 0x0, 0x0);
        gbc.writeMem(0x33f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xb39e, gbc.sp());
        EXPECT(0x341, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 003F
        gbc.setState(0x85c7, 0x6c9a, 0xf060, 0x68f7, 0x3cf7, 0xf118, 0x1, 0x1);
        gbc.writeMem(0x85c7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x6c9a, gbc.sp());
        EXPECT(0x85c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85c7));
        EXPECT(0x75, gbc.readMem(0x85c8));
        // CB 75 0040
        gbc.setState(0xa2ff, 0x5453, 0x8b50, 0x140e, 0x840, 0xc3e1, 0x0, 0x0);
        gbc.writeMem(0xa2ff, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x5453, gbc.sp());
        EXPECT(0xa301, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2ff));
        EXPECT(0x75, gbc.readMem(0xa300));
        // CB 75 0041
        gbc.setState(0x5c5d, 0x6411, 0xceb0, 0x9d88, 0x7814, 0xc783, 0x1, 0x0);
        gbc.writeMem(0x5c5d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x6411, gbc.sp());
        EXPECT(0x5c5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0042
        gbc.setState(0x26af, 0xd5c4, 0x65e0, 0xd072, 0x86fe, 0xe9b5, 0x0, 0x0);
        gbc.writeMem(0x26af, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xd5c4, gbc.sp());
        EXPECT(0x26b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0043
        gbc.setState(0xb96c, 0x5a77, 0x8010, 0x84d7, 0x40b8, 0xc31f, 0x0, 0x1);
        gbc.writeMem(0xb96c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x5a77, gbc.sp());
        EXPECT(0xb96e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb96c));
        EXPECT(0x75, gbc.readMem(0xb96d));
        // CB 75 0044
        gbc.setState(0xbe71, 0x6f76, 0x2aa0, 0xa459, 0x4708, 0x692e, 0x0, 0x0);
        gbc.writeMem(0xbe71, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x6f76, gbc.sp());
        EXPECT(0xbe73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe71));
        EXPECT(0x75, gbc.readMem(0xbe72));
        // CB 75 0045
        gbc.setState(0xadec, 0xb698, 0xf980, 0xf2, 0xb001, 0x8051, 0x1, 0x1);
        gbc.writeMem(0xadec, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xb698, gbc.sp());
        EXPECT(0xadee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadec));
        EXPECT(0x75, gbc.readMem(0xaded));
        // CB 75 0046
        gbc.setState(0x32e, 0x473, 0xffe0, 0xdc01, 0x9359, 0x9168, 0x1, 0x1);
        gbc.writeMem(0x32e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x473, gbc.sp());
        EXPECT(0x330, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0047
        gbc.setState(0x8a20, 0x9300, 0x440, 0xaec1, 0xe6a6, 0x740a, 0x0, 0x0);
        gbc.writeMem(0x8a20, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x9300, gbc.sp());
        EXPECT(0x8a22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a20));
        EXPECT(0x75, gbc.readMem(0x8a21));
        // CB 75 0048
        gbc.setState(0xd0f1, 0xdcde, 0xdd10, 0xfd2b, 0x8eb4, 0x9de6, 0x1, 0x0);
        gbc.writeMem(0xd0f1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xdcde, gbc.sp());
        EXPECT(0xd0f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0f1));
        EXPECT(0x75, gbc.readMem(0xd0f2));
        // CB 75 0049
        gbc.setState(0x7ae5, 0x3d67, 0xe580, 0x6994, 0x9487, 0x92a4, 0x0, 0x0);
        gbc.writeMem(0x7ae5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x3d67, gbc.sp());
        EXPECT(0x7ae7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 004A
        gbc.setState(0x2f3a, 0x18f8, 0xea90, 0xeb96, 0xb543, 0x5a48, 0x0, 0x1);
        gbc.writeMem(0x2f3a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x18f8, gbc.sp());
        EXPECT(0x2f3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 004B
        gbc.setState(0xb123, 0xc3a, 0x7ec0, 0xed12, 0xc34f, 0x5bea, 0x0, 0x0);
        gbc.writeMem(0xb123, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xc3a, gbc.sp());
        EXPECT(0xb125, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb123));
        EXPECT(0x75, gbc.readMem(0xb124));
        // CB 75 004C
        gbc.setState(0xaf37, 0xc995, 0x9a50, 0x3f04, 0xf9bf, 0xebad, 0x1, 0x1);
        gbc.writeMem(0xaf37, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xc995, gbc.sp());
        EXPECT(0xaf39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf37));
        EXPECT(0x75, gbc.readMem(0xaf38));
        // CB 75 004E
        gbc.setState(0x1e15, 0x4bf6, 0xf350, 0x3e52, 0xacb0, 0x5265, 0x0, 0x1);
        gbc.writeMem(0x1e15, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x4bf6, gbc.sp());
        EXPECT(0x1e17, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 004F
        gbc.setState(0x31e2, 0x754b, 0xb0e0, 0x5927, 0x38f1, 0xee18, 0x0, 0x1);
        gbc.writeMem(0x31e2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x754b, gbc.sp());
        EXPECT(0x31e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0050
        gbc.setState(0x58d5, 0xa8a5, 0xe000, 0x80fe, 0x96a5, 0x332, 0x1, 0x0);
        gbc.writeMem(0x58d5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xa8a5, gbc.sp());
        EXPECT(0x58d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0051
        gbc.setState(0x7954, 0x611c, 0x1d60, 0x174d, 0x3a9, 0x1b5f, 0x1, 0x0);
        gbc.writeMem(0x7954, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x611c, gbc.sp());
        EXPECT(0x7956, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0052
        gbc.setState(0xe232, 0x7e77, 0xe040, 0x919f, 0x1ade, 0x757d, 0x0, 0x1);
        gbc.writeMem(0xe232, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x7e77, gbc.sp());
        EXPECT(0xe234, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe232));
        EXPECT(0x75, gbc.readMem(0xe233));
        // CB 75 0053
        gbc.setState(0x5706, 0xd1eb, 0xc070, 0xa6a9, 0xb781, 0x21b8, 0x1, 0x1);
        gbc.writeMem(0x5706, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xd1eb, gbc.sp());
        EXPECT(0x5708, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0054
        gbc.setState(0xd7cd, 0x315d, 0x1c90, 0x7d86, 0x716d, 0xcd44, 0x0, 0x0);
        gbc.writeMem(0xd7cd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x315d, gbc.sp());
        EXPECT(0xd7cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7cd));
        EXPECT(0x75, gbc.readMem(0xd7ce));
        // CB 75 0055
        gbc.setState(0x6c28, 0x6df, 0x9380, 0x7040, 0xd2c0, 0x393b, 0x1, 0x0);
        gbc.writeMem(0x6c28, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x6df, gbc.sp());
        EXPECT(0x6c2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0056
        gbc.setState(0xe0d5, 0x844d, 0x5800, 0x69bd, 0x885f, 0x611, 0x0, 0x0);
        gbc.writeMem(0xe0d5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x844d, gbc.sp());
        EXPECT(0xe0d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0d5));
        EXPECT(0x75, gbc.readMem(0xe0d6));
        // CB 75 0057
        gbc.setState(0x1b83, 0x2b11, 0x1980, 0x402c, 0xa0f6, 0xfe2c, 0x0, 0x0);
        gbc.writeMem(0x1b83, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x2b11, gbc.sp());
        EXPECT(0x1b85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0058
        gbc.setState(0xa11e, 0xfed8, 0x7de0, 0x300f, 0x5e0, 0x2349, 0x1, 0x1);
        gbc.writeMem(0xa11e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xfed8, gbc.sp());
        EXPECT(0xa120, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa11e));
        EXPECT(0x75, gbc.readMem(0xa11f));
        // CB 75 0059
        gbc.setState(0x9e55, 0x976d, 0x7860, 0x3ec4, 0xd4f7, 0x9210, 0x0, 0x0);
        gbc.writeMem(0x9e55, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x976d, gbc.sp());
        EXPECT(0x9e57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e55));
        EXPECT(0x75, gbc.readMem(0x9e56));
        // CB 75 005A
        gbc.setState(0xe73f, 0x7546, 0xe9f0, 0x2707, 0x23eb, 0xf1b6, 0x1, 0x1);
        gbc.writeMem(0xe73f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x7546, gbc.sp());
        EXPECT(0xe741, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe73f));
        EXPECT(0x75, gbc.readMem(0xe740));
        // CB 75 005B
        gbc.setState(0x31e, 0x20b7, 0xca30, 0xee34, 0x8cc7, 0xc384, 0x1, 0x0);
        gbc.writeMem(0x31e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x20b7, gbc.sp());
        EXPECT(0x320, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 005C
        gbc.setState(0x2a99, 0xd5e0, 0x70e0, 0x50a9, 0xb459, 0xb7ab, 0x0, 0x0);
        gbc.writeMem(0x2a99, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xd5e0, gbc.sp());
        EXPECT(0x2a9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 005D
        gbc.setState(0x8fed, 0x1a5a, 0x4b80, 0x7bb6, 0x8e7d, 0xedf3, 0x0, 0x0);
        gbc.writeMem(0x8fed, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x1a5a, gbc.sp());
        EXPECT(0x8fef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fed));
        EXPECT(0x75, gbc.readMem(0x8fee));
        // CB 75 005E
        gbc.setState(0xb17, 0xca31, 0xfff0, 0xc32d, 0x1f06, 0x4a23, 0x1, 0x1);
        gbc.writeMem(0xb17, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xca31, gbc.sp());
        EXPECT(0xb19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 005F
        gbc.setState(0xa91d, 0x8bf9, 0x7240, 0x7e2f, 0x987b, 0xb3dd, 0x0, 0x0);
        gbc.writeMem(0xa91d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x8bf9, gbc.sp());
        EXPECT(0xa91f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa91d));
        EXPECT(0x75, gbc.readMem(0xa91e));
        // CB 75 0060
        gbc.setState(0xe154, 0x5bbb, 0x270, 0x3bc0, 0x34e7, 0x36a7, 0x1, 0x1);
        gbc.writeMem(0xe154, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x5bbb, gbc.sp());
        EXPECT(0xe156, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe154));
        EXPECT(0x75, gbc.readMem(0xe155));
        // CB 75 0061
        gbc.setState(0x101c, 0xfffd, 0x3fc0, 0x4098, 0x610d, 0x7298, 0x1, 0x0);
        gbc.writeMem(0x101c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xfffd, gbc.sp());
        EXPECT(0x101e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0062
        gbc.setState(0xc79a, 0x154e, 0x3c20, 0x996d, 0xf0cf, 0x78ac, 0x1, 0x0);
        gbc.writeMem(0xc79a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x154e, gbc.sp());
        EXPECT(0xc79c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc79a));
        EXPECT(0x75, gbc.readMem(0xc79b));
        // CB 75 0063
        gbc.setState(0xcdf1, 0xdbc4, 0xac40, 0x254c, 0x6f81, 0xeaf, 0x0, 0x1);
        gbc.writeMem(0xcdf1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xdbc4, gbc.sp());
        EXPECT(0xcdf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdf1));
        EXPECT(0x75, gbc.readMem(0xcdf2));
        // CB 75 0064
        gbc.setState(0xcb0b, 0x68ad, 0x7240, 0x1bfc, 0x7477, 0xf333, 0x1, 0x1);
        gbc.writeMem(0xcb0b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x68ad, gbc.sp());
        EXPECT(0xcb0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb0b));
        EXPECT(0x75, gbc.readMem(0xcb0c));
        // CB 75 0065
        gbc.setState(0xa154, 0xc061, 0x7bd0, 0x8388, 0xcae2, 0xa5c3, 0x0, 0x0);
        gbc.writeMem(0xa154, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xc061, gbc.sp());
        EXPECT(0xa156, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa154));
        EXPECT(0x75, gbc.readMem(0xa155));
        // CB 75 0066
        gbc.setState(0x658d, 0x6aef, 0x880, 0x7129, 0xeb46, 0xcc42, 0x0, 0x0);
        gbc.writeMem(0x658d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x6aef, gbc.sp());
        EXPECT(0x658f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0067
        gbc.setState(0x4003, 0xf04a, 0xdf0, 0x86a2, 0xf665, 0xc9da, 0x0, 0x0);
        gbc.writeMem(0x4003, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xf04a, gbc.sp());
        EXPECT(0x4005, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0068
        gbc.setState(0xa2ec, 0x96ae, 0x3510, 0xdece, 0xefe, 0x8683, 0x1, 0x1);
        gbc.writeMem(0xa2ec, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x96ae, gbc.sp());
        EXPECT(0xa2ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2ec));
        EXPECT(0x75, gbc.readMem(0xa2ed));
        // CB 75 0069
        gbc.setState(0x87e5, 0xb1c7, 0xa7c0, 0x6d40, 0x639a, 0x217d, 0x0, 0x1);
        gbc.writeMem(0x87e5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xb1c7, gbc.sp());
        EXPECT(0x87e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87e5));
        EXPECT(0x75, gbc.readMem(0x87e6));
        // CB 75 006A
        gbc.setState(0x4664, 0x3d5f, 0x26c0, 0x6175, 0xa689, 0x7b2c, 0x1, 0x1);
        gbc.writeMem(0x4664, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x3d5f, gbc.sp());
        EXPECT(0x4666, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 006B
        gbc.setState(0xd7a2, 0xc66b, 0x1b50, 0x8192, 0xc911, 0x7f3b, 0x1, 0x1);
        gbc.writeMem(0xd7a2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xc66b, gbc.sp());
        EXPECT(0xd7a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7a2));
        EXPECT(0x75, gbc.readMem(0xd7a3));
        // CB 75 006C
        gbc.setState(0x9f3, 0x6bcb, 0xfff0, 0xab10, 0xa415, 0xce71, 0x0, 0x1);
        gbc.writeMem(0x9f3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x6bcb, gbc.sp());
        EXPECT(0x9f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 006D
        gbc.setState(0x7433, 0x1060, 0x6c70, 0xc3e5, 0xace7, 0x685a, 0x1, 0x1);
        gbc.writeMem(0x7433, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x1060, gbc.sp());
        EXPECT(0x7435, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 006E
        gbc.setState(0x204c, 0xca01, 0x5550, 0xbe4c, 0x75fa, 0xe5e7, 0x1, 0x1);
        gbc.writeMem(0x204c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xca01, gbc.sp());
        EXPECT(0x204e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 006F
        gbc.setState(0xde5f, 0x3539, 0x6990, 0x6696, 0x4c82, 0xa893, 0x0, 0x1);
        gbc.writeMem(0xde5f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x3539, gbc.sp());
        EXPECT(0xde61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde5f));
        EXPECT(0x75, gbc.readMem(0xde60));
        // CB 75 0070
        gbc.setState(0x71c1, 0xd29, 0xdcf0, 0xc13, 0x6c33, 0x8393, 0x0, 0x1);
        gbc.writeMem(0x71c1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xd29, gbc.sp());
        EXPECT(0x71c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0071
        gbc.setState(0xc762, 0x42c5, 0x14c0, 0x2a6a, 0x12a, 0xf80d, 0x1, 0x0);
        gbc.writeMem(0xc762, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x42c5, gbc.sp());
        EXPECT(0xc764, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc762));
        EXPECT(0x75, gbc.readMem(0xc763));
        // CB 75 0072
        gbc.setState(0xeb40, 0xc064, 0xff60, 0xa594, 0xcd2a, 0x3332, 0x0, 0x0);
        gbc.writeMem(0xeb40, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xc064, gbc.sp());
        EXPECT(0xeb42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb40));
        EXPECT(0x75, gbc.readMem(0xeb41));
        // CB 75 0073
        gbc.setState(0x3a37, 0xdd87, 0xed90, 0x8520, 0x8915, 0x7b33, 0x0, 0x0);
        gbc.writeMem(0x3a37, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xdd87, gbc.sp());
        EXPECT(0x3a39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0074
        gbc.setState(0x688b, 0xaab3, 0xb50, 0xba95, 0xeeef, 0xcd1f, 0x1, 0x0);
        gbc.writeMem(0x688b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xaab3, gbc.sp());
        EXPECT(0x688d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0075
        gbc.setState(0x5de0, 0xd577, 0x12d0, 0xdee6, 0xc7c9, 0xc2b6, 0x1, 0x1);
        gbc.writeMem(0x5de0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xd577, gbc.sp());
        EXPECT(0x5de2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0076
        gbc.setState(0x6aad, 0xe5a, 0x9c60, 0xda4c, 0x4033, 0xb397, 0x0, 0x0);
        gbc.writeMem(0x6aad, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xe5a, gbc.sp());
        EXPECT(0x6aaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0077
        gbc.setState(0x37ea, 0xa04a, 0x27b0, 0x937a, 0x7e60, 0x59b7, 0x0, 0x1);
        gbc.writeMem(0x37ea, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xa04a, gbc.sp());
        EXPECT(0x37ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0078
        gbc.setState(0x124d, 0xfa4d, 0x5790, 0x974e, 0x1bb1, 0x904d, 0x1, 0x1);
        gbc.writeMem(0x124d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xfa4d, gbc.sp());
        EXPECT(0x124f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0079
        gbc.setState(0xc6bb, 0xfb04, 0xc60, 0xb856, 0x54fe, 0xcaa, 0x1, 0x1);
        gbc.writeMem(0xc6bb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xfb04, gbc.sp());
        EXPECT(0xc6bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6bb));
        EXPECT(0x75, gbc.readMem(0xc6bc));
        // CB 75 007A
        gbc.setState(0x7db8, 0x3fe7, 0x6a10, 0xcd60, 0x6dfb, 0x89d, 0x0, 0x1);
        gbc.writeMem(0x7db8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x3fe7, gbc.sp());
        EXPECT(0x7dba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 007B
        gbc.setState(0x9c85, 0x86f4, 0xd7e0, 0x3ab5, 0x4057, 0x4d80, 0x0, 0x0);
        gbc.writeMem(0x9c85, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x86f4, gbc.sp());
        EXPECT(0x9c87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c85));
        EXPECT(0x75, gbc.readMem(0x9c86));
        // CB 75 007C
        gbc.setState(0x5344, 0xa283, 0x8250, 0x92a, 0xa519, 0xc49d, 0x0, 0x0);
        gbc.writeMem(0x5344, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xa283, gbc.sp());
        EXPECT(0x5346, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 007D
        gbc.setState(0x68f1, 0xa54d, 0xe490, 0xabb0, 0x6fd, 0xd35, 0x1, 0x1);
        gbc.writeMem(0x68f1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xa54d, gbc.sp());
        EXPECT(0x68f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 007E
        gbc.setState(0x55b5, 0x4cbf, 0xf050, 0xbce4, 0xf6b4, 0x30a2, 0x1, 0x1);
        gbc.writeMem(0x55b5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x4cbf, gbc.sp());
        EXPECT(0x55b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 007F
        gbc.setState(0x1f6f, 0x78c2, 0x6350, 0x5cf4, 0x39ed, 0xbe69, 0x1, 0x0);
        gbc.writeMem(0x1f6f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x78c2, gbc.sp());
        EXPECT(0x1f71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0080
        gbc.setState(0xb553, 0x86a8, 0xb4c0, 0x5531, 0x9856, 0xba46, 0x1, 0x0);
        gbc.writeMem(0xb553, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x86a8, gbc.sp());
        EXPECT(0xb555, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb553));
        EXPECT(0x75, gbc.readMem(0xb554));
        // CB 75 0081
        gbc.setState(0xa08e, 0xd21f, 0xaa0, 0xb292, 0x4795, 0x9b0b, 0x1, 0x1);
        gbc.writeMem(0xa08e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xd21f, gbc.sp());
        EXPECT(0xa090, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa08e));
        EXPECT(0x75, gbc.readMem(0xa08f));
        // CB 75 0083
        gbc.setState(0x1317, 0xb65f, 0xb9b0, 0xf86b, 0x5ea3, 0x109f, 0x0, 0x1);
        gbc.writeMem(0x1317, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xb65f, gbc.sp());
        EXPECT(0x1319, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0084
        gbc.setState(0xd722, 0x24ae, 0x6ac0, 0xfb3c, 0x2d30, 0x83db, 0x1, 0x0);
        gbc.writeMem(0xd722, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x24ae, gbc.sp());
        EXPECT(0xd724, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd722));
        EXPECT(0x75, gbc.readMem(0xd723));
        // CB 75 0085
        gbc.setState(0x3ee3, 0xcae1, 0x7f90, 0xe61f, 0xb930, 0xd9e3, 0x0, 0x0);
        gbc.writeMem(0x3ee3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xcae1, gbc.sp());
        EXPECT(0x3ee5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0086
        gbc.setState(0xee69, 0xe575, 0x40, 0x5840, 0xfd51, 0xa808, 0x0, 0x1);
        gbc.writeMem(0xee69, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xe575, gbc.sp());
        EXPECT(0xee6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee69));
        EXPECT(0x75, gbc.readMem(0xee6a));
        // CB 75 0088
        gbc.setState(0x7edf, 0xbc42, 0x2d90, 0x4b00, 0xd6b3, 0xa1b, 0x0, 0x0);
        gbc.writeMem(0x7edf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xbc42, gbc.sp());
        EXPECT(0x7ee1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 008A
        gbc.setState(0x12d, 0x78c7, 0x65f0, 0x12a2, 0xf06d, 0xbfc5, 0x1, 0x1);
        gbc.writeMem(0x12d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x78c7, gbc.sp());
        EXPECT(0x12f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 008B
        gbc.setState(0x7aa2, 0x7e7d, 0x6bd0, 0xb35d, 0x187c, 0xfb4f, 0x0, 0x0);
        gbc.writeMem(0x7aa2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x7e7d, gbc.sp());
        EXPECT(0x7aa4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 008C
        gbc.setState(0x5535, 0x2b4f, 0x2aa0, 0x1bd7, 0x363f, 0xf3af, 0x0, 0x1);
        gbc.writeMem(0x5535, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x2b4f, gbc.sp());
        EXPECT(0x5537, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 008D
        gbc.setState(0x48c8, 0x3c47, 0xe630, 0xfaa7, 0x72bb, 0xc3be, 0x0, 0x1);
        gbc.writeMem(0x48c8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x3c47, gbc.sp());
        EXPECT(0x48ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 008E
        gbc.setState(0x6d9b, 0xc868, 0x120, 0xbe18, 0x9746, 0x290a, 0x1, 0x0);
        gbc.writeMem(0x6d9b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xc868, gbc.sp());
        EXPECT(0x6d9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 008F
        gbc.setState(0x441e, 0x472c, 0xf2c0, 0xde78, 0xb3ee, 0x13fb, 0x0, 0x0);
        gbc.writeMem(0x441e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x472c, gbc.sp());
        EXPECT(0x4420, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0090
        gbc.setState(0x19b1, 0x9c65, 0xc6e0, 0xa963, 0x63c5, 0x5d62, 0x1, 0x0);
        gbc.writeMem(0x19b1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x9c65, gbc.sp());
        EXPECT(0x19b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0091
        gbc.setState(0x47a1, 0x4ca3, 0x9250, 0xc901, 0xe4da, 0x224f, 0x1, 0x1);
        gbc.writeMem(0x47a1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x4ca3, gbc.sp());
        EXPECT(0x47a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0092
        gbc.setState(0xa7e, 0x4fa8, 0x23a0, 0x4fe6, 0xd0d8, 0x3d7c, 0x1, 0x0);
        gbc.writeMem(0xa7e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x4fa8, gbc.sp());
        EXPECT(0xa80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0093
        gbc.setState(0x5510, 0xdc71, 0xdf80, 0xd3a5, 0x8a35, 0x4902, 0x0, 0x0);
        gbc.writeMem(0x5510, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xdc71, gbc.sp());
        EXPECT(0x5512, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0094
        gbc.setState(0x5be7, 0xff06, 0x7910, 0x8fa, 0xf015, 0x8fea, 0x1, 0x0);
        gbc.writeMem(0x5be7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xff06, gbc.sp());
        EXPECT(0x5be9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0095
        gbc.setState(0x658e, 0xbdf5, 0x1050, 0x4969, 0x1e2a, 0x1e0a, 0x0, 0x1);
        gbc.writeMem(0x658e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xbdf5, gbc.sp());
        EXPECT(0x6590, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0096
        gbc.setState(0x2ef1, 0xc96c, 0x9460, 0x90e4, 0x8140, 0xecf2, 0x0, 0x0);
        gbc.writeMem(0x2ef1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xc96c, gbc.sp());
        EXPECT(0x2ef3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0097
        gbc.setState(0xc5f0, 0x302, 0xfc90, 0x64bb, 0x5016, 0xc305, 0x0, 0x0);
        gbc.writeMem(0xc5f0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x302, gbc.sp());
        EXPECT(0xc5f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5f0));
        EXPECT(0x75, gbc.readMem(0xc5f1));
        // CB 75 0098
        gbc.setState(0xd45e, 0x5c05, 0xd8a0, 0xe8d3, 0xe2ac, 0xb2d4, 0x0, 0x0);
        gbc.writeMem(0xd45e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x5c05, gbc.sp());
        EXPECT(0xd460, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd45e));
        EXPECT(0x75, gbc.readMem(0xd45f));
        // CB 75 0099
        gbc.setState(0x5381, 0x6497, 0xb900, 0x59dd, 0xa31, 0x6182, 0x1, 0x0);
        gbc.writeMem(0x5381, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x6497, gbc.sp());
        EXPECT(0x5383, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 009A
        gbc.setState(0x92c4, 0xf8d7, 0x9090, 0x92fd, 0xd0b3, 0x1051, 0x1, 0x0);
        gbc.writeMem(0x92c4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xf8d7, gbc.sp());
        EXPECT(0x92c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92c4));
        EXPECT(0x75, gbc.readMem(0x92c5));
        // CB 75 009B
        gbc.setState(0x4e4f, 0x434f, 0xdee0, 0x592b, 0xbea9, 0x999b, 0x1, 0x0);
        gbc.writeMem(0x4e4f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x434f, gbc.sp());
        EXPECT(0x4e51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 009C
        gbc.setState(0xbbc2, 0x9f49, 0xdd90, 0xcf94, 0x74d, 0xef81, 0x0, 0x1);
        gbc.writeMem(0xbbc2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x9f49, gbc.sp());
        EXPECT(0xbbc4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbc2));
        EXPECT(0x75, gbc.readMem(0xbbc3));
        // CB 75 009D
        gbc.setState(0x72b5, 0x8c56, 0x46a0, 0x2715, 0xde01, 0x8ac2, 0x1, 0x1);
        gbc.writeMem(0x72b5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x8c56, gbc.sp());
        EXPECT(0x72b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 009E
        gbc.setState(0x1ceb, 0x8225, 0x9630, 0xbf18, 0xe6f2, 0x1fdf, 0x1, 0x0);
        gbc.writeMem(0x1ceb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x8225, gbc.sp());
        EXPECT(0x1ced, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 009F
        gbc.setState(0x3ba8, 0xdb5b, 0x41f0, 0x3d2, 0x84ba, 0x5f76, 0x1, 0x1);
        gbc.writeMem(0x3ba8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xdb5b, gbc.sp());
        EXPECT(0x3baa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00A0
        gbc.setState(0xddda, 0x7802, 0x3b60, 0x9fc5, 0x3f05, 0x7673, 0x1, 0x1);
        gbc.writeMem(0xddda, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x7802, gbc.sp());
        EXPECT(0xdddc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddda));
        EXPECT(0x75, gbc.readMem(0xdddb));
        // CB 75 00A1
        gbc.setState(0x6001, 0xaf10, 0x8d50, 0xc8be, 0xa2b0, 0xe39e, 0x1, 0x1);
        gbc.writeMem(0x6001, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xaf10, gbc.sp());
        EXPECT(0x6003, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00A2
        gbc.setState(0x5be6, 0xf43, 0x77c0, 0x2dba, 0xb468, 0x2313, 0x1, 0x0);
        gbc.writeMem(0x5be6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xf43, gbc.sp());
        EXPECT(0x5be8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00A3
        gbc.setState(0xc180, 0x64d7, 0x94c0, 0xaae0, 0xf1e2, 0xa64e, 0x1, 0x1);
        gbc.writeMem(0xc180, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x64d7, gbc.sp());
        EXPECT(0xc182, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc180));
        EXPECT(0x75, gbc.readMem(0xc181));
        // CB 75 00A4
        gbc.setState(0xe8c3, 0x346a, 0xef10, 0x7c4e, 0x398c, 0x10e1, 0x0, 0x0);
        gbc.writeMem(0xe8c3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x346a, gbc.sp());
        EXPECT(0xe8c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8c3));
        EXPECT(0x75, gbc.readMem(0xe8c4));
        // CB 75 00A5
        gbc.setState(0x392b, 0x3ffd, 0xd170, 0xf3f0, 0xed19, 0xec1a, 0x0, 0x0);
        gbc.writeMem(0x392b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x3ffd, gbc.sp());
        EXPECT(0x392d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00A6
        gbc.setState(0xb304, 0x56e4, 0xb320, 0x3617, 0xfe6f, 0x2b1b, 0x0, 0x1);
        gbc.writeMem(0xb304, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x56e4, gbc.sp());
        EXPECT(0xb306, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb304));
        EXPECT(0x75, gbc.readMem(0xb305));
        // CB 75 00A7
        gbc.setState(0x2bce, 0x857a, 0xa80, 0x88ae, 0x2abf, 0x80ca, 0x0, 0x0);
        gbc.writeMem(0x2bce, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x857a, gbc.sp());
        EXPECT(0x2bd0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00A8
        gbc.setState(0x8851, 0xa6cd, 0x6010, 0x1e90, 0x591d, 0x7537, 0x1, 0x0);
        gbc.writeMem(0x8851, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xa6cd, gbc.sp());
        EXPECT(0x8853, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8851));
        EXPECT(0x75, gbc.readMem(0x8852));
        // CB 75 00A9
        gbc.setState(0x5008, 0xc06d, 0xc460, 0xd167, 0xbb4f, 0x7819, 0x0, 0x0);
        gbc.writeMem(0x5008, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xc06d, gbc.sp());
        EXPECT(0x500a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00AA
        gbc.setState(0xa72, 0xd8b3, 0x9870, 0x7157, 0x682d, 0x4832, 0x0, 0x1);
        gbc.writeMem(0xa72, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xd8b3, gbc.sp());
        EXPECT(0xa74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00AB
        gbc.setState(0xca44, 0xb83a, 0x960, 0xabf4, 0x3c5d, 0x581a, 0x0, 0x1);
        gbc.writeMem(0xca44, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xb83a, gbc.sp());
        EXPECT(0xca46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca44));
        EXPECT(0x75, gbc.readMem(0xca45));
        // CB 75 00AC
        gbc.setState(0x6e93, 0xf5e0, 0xe000, 0x6932, 0xd627, 0x7f61, 0x1, 0x1);
        gbc.writeMem(0x6e93, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xf5e0, gbc.sp());
        EXPECT(0x6e95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00AD
        gbc.setState(0x2cf1, 0x1433, 0xb7a0, 0xd438, 0xd423, 0xc2e3, 0x0, 0x1);
        gbc.writeMem(0x2cf1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x1433, gbc.sp());
        EXPECT(0x2cf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00AE
        gbc.setState(0x6854, 0x1ca9, 0x5b20, 0x5266, 0x6e1, 0x8460, 0x1, 0x1);
        gbc.writeMem(0x6854, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x1ca9, gbc.sp());
        EXPECT(0x6856, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00AF
        gbc.setState(0xb1f7, 0xc9ca, 0xb210, 0xe68c, 0x390c, 0xf6e6, 0x1, 0x1);
        gbc.writeMem(0xb1f7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xc9ca, gbc.sp());
        EXPECT(0xb1f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1f7));
        EXPECT(0x75, gbc.readMem(0xb1f8));
        // CB 75 00B0
        gbc.setState(0xbac4, 0x9c6e, 0x9560, 0x96e2, 0xf1c3, 0x502c, 0x0, 0x1);
        gbc.writeMem(0xbac4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x9c6e, gbc.sp());
        EXPECT(0xbac6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbac4));
        EXPECT(0x75, gbc.readMem(0xbac5));
        // CB 75 00B1
        gbc.setState(0x8adb, 0x4e7a, 0x13e0, 0x4ea5, 0xf9fc, 0x37b6, 0x0, 0x0);
        gbc.writeMem(0x8adb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x4e7a, gbc.sp());
        EXPECT(0x8add, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8adb));
        EXPECT(0x75, gbc.readMem(0x8adc));
        // CB 75 00B2
        gbc.setState(0xbeca, 0x5e45, 0xcd90, 0x7739, 0x5e57, 0xa08c, 0x0, 0x1);
        gbc.writeMem(0xbeca, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x5e45, gbc.sp());
        EXPECT(0xbecc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbeca));
        EXPECT(0x75, gbc.readMem(0xbecb));
        // CB 75 00B3
        gbc.setState(0xd172, 0x78f6, 0x7020, 0x9557, 0xdb8f, 0xad2f, 0x1, 0x0);
        gbc.writeMem(0xd172, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x78f6, gbc.sp());
        EXPECT(0xd174, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd172));
        EXPECT(0x75, gbc.readMem(0xd173));
        // CB 75 00B4
        gbc.setState(0x64f, 0x2ebb, 0xa200, 0xb71a, 0x8512, 0x7d43, 0x0, 0x0);
        gbc.writeMem(0x64f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x2ebb, gbc.sp());
        EXPECT(0x651, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00B5
        gbc.setState(0x2a48, 0x5cd4, 0xa6e0, 0x88d8, 0xabb0, 0x9cba, 0x1, 0x1);
        gbc.writeMem(0x2a48, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x5cd4, gbc.sp());
        EXPECT(0x2a4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00B6
        gbc.setState(0x9aa7, 0x783, 0x2580, 0x7a14, 0x8364, 0xd969, 0x1, 0x0);
        gbc.writeMem(0x9aa7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x783, gbc.sp());
        EXPECT(0x9aa9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9aa7));
        EXPECT(0x75, gbc.readMem(0x9aa8));
        // CB 75 00B8
        gbc.setState(0x2db9, 0xafc8, 0xcaa0, 0x59fb, 0x640f, 0xb9fb, 0x1, 0x1);
        gbc.writeMem(0x2db9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xafc8, gbc.sp());
        EXPECT(0x2dbb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00B9
        gbc.setState(0x2283, 0x48f, 0x7be0, 0x4935, 0xf5de, 0x6b85, 0x1, 0x1);
        gbc.writeMem(0x2283, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x48f, gbc.sp());
        EXPECT(0x2285, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00BA
        gbc.setState(0xac51, 0x2a3e, 0x5580, 0x63bf, 0x47e9, 0x28cc, 0x0, 0x0);
        gbc.writeMem(0xac51, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x2a3e, gbc.sp());
        EXPECT(0xac53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac51));
        EXPECT(0x75, gbc.readMem(0xac52));
        // CB 75 00BB
        gbc.setState(0x54f9, 0x1f1d, 0xb400, 0xb598, 0xa27, 0xeea5, 0x1, 0x1);
        gbc.writeMem(0x54f9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x1f1d, gbc.sp());
        EXPECT(0x54fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00BC
        gbc.setState(0xee7, 0x958b, 0xa3f0, 0x12ed, 0xe22f, 0x6b2b, 0x0, 0x1);
        gbc.writeMem(0xee7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x958b, gbc.sp());
        EXPECT(0xee9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00BD
        gbc.setState(0xc24c, 0xadf6, 0xf370, 0x7100, 0xa92c, 0xed14, 0x0, 0x0);
        gbc.writeMem(0xc24c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xadf6, gbc.sp());
        EXPECT(0xc24e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc24c));
        EXPECT(0x75, gbc.readMem(0xc24d));
        // CB 75 00BE
        gbc.setState(0x62a8, 0xee72, 0xfa40, 0x5c69, 0xe9e9, 0x41f5, 0x0, 0x0);
        gbc.writeMem(0x62a8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xee72, gbc.sp());
        EXPECT(0x62aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00BF
        gbc.setState(0x39b6, 0x65c9, 0x33d0, 0x3506, 0x9c9f, 0x8475, 0x1, 0x1);
        gbc.writeMem(0x39b6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x65c9, gbc.sp());
        EXPECT(0x39b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00C0
        gbc.setState(0x9624, 0x99e, 0x5140, 0xcdb7, 0x7991, 0xda07, 0x1, 0x0);
        gbc.writeMem(0x9624, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x99e, gbc.sp());
        EXPECT(0x9626, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9624));
        EXPECT(0x75, gbc.readMem(0x9625));
        // CB 75 00C1
        gbc.setState(0xb4c, 0x20e6, 0x1fb0, 0x8781, 0x31c5, 0x3348, 0x0, 0x1);
        gbc.writeMem(0xb4c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x20e6, gbc.sp());
        EXPECT(0xb4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00C2
        gbc.setState(0x58ab, 0x6d29, 0x7110, 0x781b, 0xf96a, 0xc122, 0x1, 0x1);
        gbc.writeMem(0x58ab, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x6d29, gbc.sp());
        EXPECT(0x58ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00C3
        gbc.setState(0x70fc, 0x7fae, 0xa540, 0x5cce, 0xd3d2, 0xb771, 0x0, 0x0);
        gbc.writeMem(0x70fc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x7fae, gbc.sp());
        EXPECT(0x70fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00C4
        gbc.setState(0x3fa6, 0x798f, 0xff0, 0xc1c1, 0x91cd, 0xc642, 0x1, 0x0);
        gbc.writeMem(0x3fa6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x798f, gbc.sp());
        EXPECT(0x3fa8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00C5
        gbc.setState(0xce4, 0x4256, 0xdbf0, 0x4452, 0xeaee, 0x82, 0x0, 0x1);
        gbc.writeMem(0xce4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x4256, gbc.sp());
        EXPECT(0xce6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00C6
        gbc.setState(0xbc32, 0x8c39, 0xa0f0, 0x33f1, 0x68f6, 0x69b3, 0x0, 0x1);
        gbc.writeMem(0xbc32, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x8c39, gbc.sp());
        EXPECT(0xbc34, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc32));
        EXPECT(0x75, gbc.readMem(0xbc33));
        // CB 75 00C8
        gbc.setState(0x311b, 0x6d76, 0xbbb0, 0x971, 0xcc4b, 0xec41, 0x1, 0x0);
        gbc.writeMem(0x311b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x6d76, gbc.sp());
        EXPECT(0x311d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00C9
        gbc.setState(0x7682, 0x9ecf, 0x64f0, 0x9be2, 0x3393, 0x17dd, 0x0, 0x1);
        gbc.writeMem(0x7682, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x9ecf, gbc.sp());
        EXPECT(0x7684, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00CA
        gbc.setState(0xcbf4, 0xbbf6, 0x2070, 0x7257, 0x771b, 0xe2df, 0x0, 0x1);
        gbc.writeMem(0xcbf4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xbbf6, gbc.sp());
        EXPECT(0xcbf6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbf4));
        EXPECT(0x75, gbc.readMem(0xcbf5));
        // CB 75 00CB
        gbc.setState(0x2411, 0xc1e0, 0xa1f0, 0x9d95, 0x7e44, 0x625a, 0x0, 0x1);
        gbc.writeMem(0x2411, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xc1e0, gbc.sp());
        EXPECT(0x2413, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00CC
        gbc.setState(0xe320, 0xab8c, 0x3880, 0x2d6e, 0x4bf0, 0xd9bb, 0x1, 0x1);
        gbc.writeMem(0xe320, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xab8c, gbc.sp());
        EXPECT(0xe322, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe320));
        EXPECT(0x75, gbc.readMem(0xe321));
        // CB 75 00CD
        gbc.setState(0x89cd, 0x952b, 0x5440, 0xdec2, 0xcbb6, 0x8bbc, 0x1, 0x0);
        gbc.writeMem(0x89cd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x952b, gbc.sp());
        EXPECT(0x89cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89cd));
        EXPECT(0x75, gbc.readMem(0x89ce));
        // CB 75 00CE
        gbc.setState(0x13fa, 0x50e4, 0x5b40, 0xe4a6, 0x1a77, 0xa24f, 0x0, 0x1);
        gbc.writeMem(0x13fa, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x50e4, gbc.sp());
        EXPECT(0x13fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00CF
        gbc.setState(0xd241, 0x400f, 0xd540, 0xdbe2, 0xca46, 0xd7a0, 0x0, 0x0);
        gbc.writeMem(0xd241, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x400f, gbc.sp());
        EXPECT(0xd243, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd241));
        EXPECT(0x75, gbc.readMem(0xd242));
        // CB 75 00D0
        gbc.setState(0xbf31, 0x3586, 0x8880, 0x67f, 0xb369, 0xdc1c, 0x0, 0x1);
        gbc.writeMem(0xbf31, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x3586, gbc.sp());
        EXPECT(0xbf33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf31));
        EXPECT(0x75, gbc.readMem(0xbf32));
        // CB 75 00D1
        gbc.setState(0xaad, 0x7acc, 0x560, 0xbaa9, 0x8bde, 0xbcf9, 0x1, 0x0);
        gbc.writeMem(0xaad, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x7acc, gbc.sp());
        EXPECT(0xaaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00D2
        gbc.setState(0xd073, 0xbbe5, 0x15b0, 0xff4d, 0xe2d9, 0x398f, 0x1, 0x0);
        gbc.writeMem(0xd073, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xbbe5, gbc.sp());
        EXPECT(0xd075, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd073));
        EXPECT(0x75, gbc.readMem(0xd074));
        // CB 75 00D3
        gbc.setState(0xb772, 0x9a17, 0xc240, 0x3778, 0xa723, 0xaecd, 0x0, 0x1);
        gbc.writeMem(0xb772, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x9a17, gbc.sp());
        EXPECT(0xb774, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb772));
        EXPECT(0x75, gbc.readMem(0xb773));
        // CB 75 00D4
        gbc.setState(0xcc3e, 0x2be, 0xb970, 0x2f41, 0x554b, 0xa66, 0x0, 0x0);
        gbc.writeMem(0xcc3e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x2be, gbc.sp());
        EXPECT(0xcc40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc3e));
        EXPECT(0x75, gbc.readMem(0xcc3f));
        // CB 75 00D5
        gbc.setState(0x881a, 0xdcd, 0x7170, 0xdcad, 0x5366, 0x6598, 0x0, 0x1);
        gbc.writeMem(0x881a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xdcd, gbc.sp());
        EXPECT(0x881c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x881a));
        EXPECT(0x75, gbc.readMem(0x881b));
        // CB 75 00D6
        gbc.setState(0x82a3, 0xcc7c, 0xc5c0, 0xb436, 0xa0be, 0x4d38, 0x0, 0x0);
        gbc.writeMem(0x82a3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xcc7c, gbc.sp());
        EXPECT(0x82a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82a3));
        EXPECT(0x75, gbc.readMem(0x82a4));
        // CB 75 00D7
        gbc.setState(0x4dff, 0xcf46, 0xbe50, 0x46e6, 0x8021, 0x1993, 0x0, 0x1);
        gbc.writeMem(0x4dff, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xcf46, gbc.sp());
        EXPECT(0x4e01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00D9
        gbc.setState(0xe852, 0x68b4, 0xa780, 0x7a47, 0x19fc, 0x7ca7, 0x0, 0x1);
        gbc.writeMem(0xe852, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x68b4, gbc.sp());
        EXPECT(0xe854, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe852));
        EXPECT(0x75, gbc.readMem(0xe853));
        // CB 75 00DA
        gbc.setState(0xe51, 0x7b39, 0x3ea0, 0x7ae3, 0x18c, 0x1887, 0x1, 0x0);
        gbc.writeMem(0xe51, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x7b39, gbc.sp());
        EXPECT(0xe53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00DB
        gbc.setState(0xb6e9, 0x1b9f, 0x27d0, 0xa95b, 0x1184, 0xca9e, 0x1, 0x0);
        gbc.writeMem(0xb6e9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x1b9f, gbc.sp());
        EXPECT(0xb6eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6e9));
        EXPECT(0x75, gbc.readMem(0xb6ea));
        // CB 75 00DC
        gbc.setState(0x78be, 0x931c, 0x5650, 0x243f, 0xdc9d, 0xf114, 0x1, 0x1);
        gbc.writeMem(0x78be, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x931c, gbc.sp());
        EXPECT(0x78c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00DD
        gbc.setState(0x30d0, 0xf634, 0x530, 0x3ad1, 0x1e9c, 0x382f, 0x1, 0x0);
        gbc.writeMem(0x30d0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xf634, gbc.sp());
        EXPECT(0x30d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00DE
        gbc.setState(0x32f6, 0x283a, 0x4ff0, 0x36b7, 0x5240, 0x562a, 0x0, 0x1);
        gbc.writeMem(0x32f6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x283a, gbc.sp());
        EXPECT(0x32f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00DF
        gbc.setState(0xa107, 0x6c1e, 0x6b80, 0x984, 0x6187, 0x242f, 0x0, 0x1);
        gbc.writeMem(0xa107, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x6c1e, gbc.sp());
        EXPECT(0xa109, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa107));
        EXPECT(0x75, gbc.readMem(0xa108));
        // CB 75 00E0
        gbc.setState(0xcab1, 0x56f3, 0xb2b0, 0x7478, 0x7067, 0xefb5, 0x1, 0x0);
        gbc.writeMem(0xcab1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x56f3, gbc.sp());
        EXPECT(0xcab3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcab1));
        EXPECT(0x75, gbc.readMem(0xcab2));
        // CB 75 00E1
        gbc.setState(0xa90b, 0x6773, 0xa40, 0xd176, 0x8283, 0x6d98, 0x1, 0x1);
        gbc.writeMem(0xa90b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x6773, gbc.sp());
        EXPECT(0xa90d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa90b));
        EXPECT(0x75, gbc.readMem(0xa90c));
        // CB 75 00E2
        gbc.setState(0xbc31, 0xc7aa, 0xf980, 0xcca3, 0x918c, 0x1c54, 0x1, 0x0);
        gbc.writeMem(0xbc31, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xc7aa, gbc.sp());
        EXPECT(0xbc33, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc31));
        EXPECT(0x75, gbc.readMem(0xbc32));
        // CB 75 00E4
        gbc.setState(0x570d, 0x3e8f, 0xcc70, 0x974f, 0x972d, 0x740f, 0x0, 0x0);
        gbc.writeMem(0x570d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x3e8f, gbc.sp());
        EXPECT(0x570f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00E5
        gbc.setState(0x80bc, 0x79f4, 0x5ba0, 0x5d4, 0xa796, 0xecdd, 0x0, 0x0);
        gbc.writeMem(0x80bc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x79f4, gbc.sp());
        EXPECT(0x80be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80bc));
        EXPECT(0x75, gbc.readMem(0x80bd));
        // CB 75 00E7
        gbc.setState(0x3a9b, 0xe7ff, 0x40c0, 0xcf5a, 0x7889, 0xe84, 0x0, 0x1);
        gbc.writeMem(0x3a9b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xe7ff, gbc.sp());
        EXPECT(0x3a9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00E8
        gbc.setState(0xbda9, 0x6bb5, 0xdc10, 0x38d0, 0xde90, 0xaaa1, 0x1, 0x0);
        gbc.writeMem(0xbda9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x6bb5, gbc.sp());
        EXPECT(0xbdab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbda9));
        EXPECT(0x75, gbc.readMem(0xbdaa));
        // CB 75 00E9
        gbc.setState(0x8cdb, 0x2696, 0xa940, 0xf95e, 0x860f, 0x15a2, 0x0, 0x1);
        gbc.writeMem(0x8cdb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x2696, gbc.sp());
        EXPECT(0x8cdd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cdb));
        EXPECT(0x75, gbc.readMem(0x8cdc));
        // CB 75 00EA
        gbc.setState(0x2c7e, 0xf01d, 0x3f0, 0xb1d2, 0xb64c, 0xe9fd, 0x0, 0x1);
        gbc.writeMem(0x2c7e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xf01d, gbc.sp());
        EXPECT(0x2c80, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00EB
        gbc.setState(0xb99a, 0x57e1, 0xf00, 0x6d1d, 0x5cf1, 0x7a75, 0x1, 0x1);
        gbc.writeMem(0xb99a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x57e1, gbc.sp());
        EXPECT(0xb99c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb99a));
        EXPECT(0x75, gbc.readMem(0xb99b));
        // CB 75 00EC
        gbc.setState(0xdc37, 0x1173, 0xedf0, 0x3048, 0x89bc, 0x777f, 0x0, 0x1);
        gbc.writeMem(0xdc37, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x1173, gbc.sp());
        EXPECT(0xdc39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc37));
        EXPECT(0x75, gbc.readMem(0xdc38));
        // CB 75 00ED
        gbc.setState(0x3f54, 0x7ed9, 0xb8f0, 0x59fb, 0x1cee, 0x434b, 0x0, 0x0);
        gbc.writeMem(0x3f54, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x7ed9, gbc.sp());
        EXPECT(0x3f56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00EE
        gbc.setState(0x2bea, 0xabcd, 0x4ac0, 0x590, 0xe03b, 0xc603, 0x1, 0x0);
        gbc.writeMem(0x2bea, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xabcd, gbc.sp());
        EXPECT(0x2bec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00EF
        gbc.setState(0xd8f9, 0x7fd3, 0x9990, 0xa9e7, 0xb345, 0xa9a4, 0x0, 0x0);
        gbc.writeMem(0xd8f9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x7fd3, gbc.sp());
        EXPECT(0xd8fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8f9));
        EXPECT(0x75, gbc.readMem(0xd8fa));
        // CB 75 00F0
        gbc.setState(0x788a, 0x4966, 0x4110, 0x3fb8, 0x16a8, 0x2ec9, 0x0, 0x0);
        gbc.writeMem(0x788a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x4966, gbc.sp());
        EXPECT(0x788c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00F1
        gbc.setState(0x236b, 0x656d, 0x1910, 0xf54b, 0x8133, 0x5819, 0x0, 0x0);
        gbc.writeMem(0x236b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x656d, gbc.sp());
        EXPECT(0x236d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00F2
        gbc.setState(0x372, 0x4691, 0x8280, 0xe311, 0x21be, 0xc2ba, 0x0, 0x1);
        gbc.writeMem(0x372, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x4691, gbc.sp());
        EXPECT(0x374, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00F3
        gbc.setState(0x6e93, 0xf38c, 0x59c0, 0xdc81, 0x91fe, 0x423c, 0x1, 0x1);
        gbc.writeMem(0x6e93, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xf38c, gbc.sp());
        EXPECT(0x6e95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00F4
        gbc.setState(0x8ed7, 0x52b, 0xdab0, 0x464b, 0x956, 0xaa52, 0x0, 0x1);
        gbc.writeMem(0x8ed7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x52b, gbc.sp());
        EXPECT(0x8ed9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ed7));
        EXPECT(0x75, gbc.readMem(0x8ed8));
        // CB 75 00F5
        gbc.setState(0x6738, 0x2c8a, 0x9eb0, 0x2418, 0xd199, 0x7d6e, 0x0, 0x0);
        gbc.writeMem(0x6738, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x2c8a, gbc.sp());
        EXPECT(0x673a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00F6
        gbc.setState(0x23c0, 0x6e20, 0x3de0, 0x5776, 0xb3aa, 0xc0ef, 0x1, 0x1);
        gbc.writeMem(0x23c0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x6e20, gbc.sp());
        EXPECT(0x23c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 00F7
        gbc.setState(0xd85f, 0xf808, 0x8a50, 0x6f, 0x502, 0xc29b, 0x1, 0x1);
        gbc.writeMem(0xd85f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xf808, gbc.sp());
        EXPECT(0xd861, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd85f));
        EXPECT(0x75, gbc.readMem(0xd860));
        // CB 75 00F8
        gbc.setState(0x716a, 0xe6a0, 0x74b0, 0xe9b4, 0xb8aa, 0x9d3f, 0x1, 0x0);
        gbc.writeMem(0x716a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xe6a0, gbc.sp());
        EXPECT(0x716c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00F9
        gbc.setState(0x8511, 0xe45c, 0x8330, 0xbbbd, 0x9e93, 0xbf43, 0x0, 0x0);
        gbc.writeMem(0x8511, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xe45c, gbc.sp());
        EXPECT(0x8513, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8511));
        EXPECT(0x75, gbc.readMem(0x8512));
        // CB 75 00FA
        gbc.setState(0x41db, 0xd0b7, 0x57f0, 0xdbc, 0xb416, 0x3123, 0x0, 0x1);
        gbc.writeMem(0x41db, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xd0b7, gbc.sp());
        EXPECT(0x41dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00FB
        gbc.setState(0x9cd2, 0x8259, 0x3b0, 0xd96e, 0xa798, 0xe280, 0x0, 0x1);
        gbc.writeMem(0x9cd2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x8259, gbc.sp());
        EXPECT(0x9cd4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cd2));
        EXPECT(0x75, gbc.readMem(0x9cd3));
        // CB 75 00FC
        gbc.setState(0x347b, 0x67c1, 0xcfb0, 0x9c2, 0xad53, 0x80ef, 0x0, 0x0);
        gbc.writeMem(0x347b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x67c1, gbc.sp());
        EXPECT(0x347d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 00FD
        gbc.setState(0x96ed, 0x5120, 0x4b80, 0xac93, 0x7943, 0x3a92, 0x1, 0x0);
        gbc.writeMem(0x96ed, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x5120, gbc.sp());
        EXPECT(0x96ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96ed));
        EXPECT(0x75, gbc.readMem(0x96ee));
        // CB 75 00FE
        gbc.setState(0xd631, 0x417a, 0xfcc0, 0xa38d, 0x7549, 0x575a, 0x0, 0x1);
        gbc.writeMem(0xd631, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x417a, gbc.sp());
        EXPECT(0xd633, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd631));
        EXPECT(0x75, gbc.readMem(0xd632));
        // CB 75 0100
        gbc.setState(0xa802, 0x1c32, 0x3930, 0xb8e5, 0x55f3, 0x5c00, 0x0, 0x0);
        gbc.writeMem(0xa802, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x1c32, gbc.sp());
        EXPECT(0xa804, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa802));
        EXPECT(0x75, gbc.readMem(0xa803));
        // CB 75 0101
        gbc.setState(0x523d, 0xdbc, 0x24d0, 0x58b8, 0x8c9, 0x7882, 0x1, 0x0);
        gbc.writeMem(0x523d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xdbc, gbc.sp());
        EXPECT(0x523f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0102
        gbc.setState(0x11ce, 0xf9de, 0xb10, 0x8802, 0x2700, 0xe1ac, 0x1, 0x1);
        gbc.writeMem(0x11ce, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xf9de, gbc.sp());
        EXPECT(0x11d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0104
        gbc.setState(0xe8b2, 0xf7cb, 0x1330, 0x61fa, 0xe8f1, 0xd2f5, 0x1, 0x1);
        gbc.writeMem(0xe8b2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xf7cb, gbc.sp());
        EXPECT(0xe8b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8b2));
        EXPECT(0x75, gbc.readMem(0xe8b3));
        // CB 75 0106
        gbc.setState(0xfbb, 0x11c2, 0x5d70, 0xf2e4, 0x2d78, 0x3554, 0x1, 0x1);
        gbc.writeMem(0xfbb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x11c2, gbc.sp());
        EXPECT(0xfbd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0107
        gbc.setState(0xd0b4, 0xc730, 0xbb70, 0x50fd, 0x76a6, 0xf005, 0x0, 0x0);
        gbc.writeMem(0xd0b4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xc730, gbc.sp());
        EXPECT(0xd0b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0b4));
        EXPECT(0x75, gbc.readMem(0xd0b5));
        // CB 75 0108
        gbc.setState(0xa73e, 0x13c9, 0xf0b0, 0x7952, 0xff30, 0xf423, 0x1, 0x1);
        gbc.writeMem(0xa73e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x13c9, gbc.sp());
        EXPECT(0xa740, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa73e));
        EXPECT(0x75, gbc.readMem(0xa73f));
        // CB 75 0109
        gbc.setState(0x19cb, 0xcb48, 0x3850, 0xfabd, 0xe7de, 0x2442, 0x0, 0x0);
        gbc.writeMem(0x19cb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xcb48, gbc.sp());
        EXPECT(0x19cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 010A
        gbc.setState(0x62b6, 0x5057, 0xcf60, 0x1696, 0x4f68, 0x98e3, 0x1, 0x1);
        gbc.writeMem(0x62b6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x5057, gbc.sp());
        EXPECT(0x62b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 010C
        gbc.setState(0xacc1, 0x19e7, 0x8510, 0x2b46, 0x9dcc, 0x35c0, 0x0, 0x0);
        gbc.writeMem(0xacc1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x19e7, gbc.sp());
        EXPECT(0xacc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacc1));
        EXPECT(0x75, gbc.readMem(0xacc2));
        // CB 75 010D
        gbc.setState(0xe1, 0x1b6a, 0xfc40, 0x39d8, 0xe6c1, 0xaade, 0x0, 0x0);
        gbc.writeMem(0xe1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x1b6a, gbc.sp());
        EXPECT(0xe3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 010E
        gbc.setState(0x1b6a, 0xcb56, 0x2420, 0x4d7, 0x45ee, 0x8425, 0x0, 0x1);
        gbc.writeMem(0x1b6a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xcb56, gbc.sp());
        EXPECT(0x1b6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 010F
        gbc.setState(0x1754, 0xae11, 0x5550, 0x1fad, 0x285a, 0x812c, 0x0, 0x1);
        gbc.writeMem(0x1754, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xae11, gbc.sp());
        EXPECT(0x1756, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0110
        gbc.setState(0xb3a2, 0xc512, 0x9040, 0x179e, 0x99af, 0xa875, 0x1, 0x0);
        gbc.writeMem(0xb3a2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xc512, gbc.sp());
        EXPECT(0xb3a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3a2));
        EXPECT(0x75, gbc.readMem(0xb3a3));
        // CB 75 0111
        gbc.setState(0x615f, 0xb653, 0x5e80, 0xceae, 0xa785, 0x98d5, 0x1, 0x0);
        gbc.writeMem(0x615f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xb653, gbc.sp());
        EXPECT(0x6161, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0112
        gbc.setState(0xbf0a, 0x77a6, 0x5230, 0x9c3e, 0x78e7, 0xfe00, 0x1, 0x1);
        gbc.writeMem(0xbf0a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x77a6, gbc.sp());
        EXPECT(0xbf0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf0a));
        EXPECT(0x75, gbc.readMem(0xbf0b));
        // CB 75 0113
        gbc.setState(0xd5ea, 0x8fe0, 0x4ff0, 0x961c, 0x233d, 0x1bb4, 0x0, 0x1);
        gbc.writeMem(0xd5ea, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x8fe0, gbc.sp());
        EXPECT(0xd5ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5ea));
        EXPECT(0x75, gbc.readMem(0xd5eb));
        // CB 75 0114
        gbc.setState(0xec8a, 0xf92f, 0xa0d0, 0xad79, 0x9620, 0x419b, 0x0, 0x0);
        gbc.writeMem(0xec8a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xf92f, gbc.sp());
        EXPECT(0xec8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec8a));
        EXPECT(0x75, gbc.readMem(0xec8b));
        // CB 75 0115
        gbc.setState(0xe5b, 0xbf41, 0xd6f0, 0x409c, 0xffd5, 0xb472, 0x1, 0x0);
        gbc.writeMem(0xe5b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xbf41, gbc.sp());
        EXPECT(0xe5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0116
        gbc.setState(0x8a2a, 0x8e18, 0x6d40, 0x9c8, 0xedce, 0xf308, 0x0, 0x0);
        gbc.writeMem(0x8a2a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x8e18, gbc.sp());
        EXPECT(0x8a2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a2a));
        EXPECT(0x75, gbc.readMem(0x8a2b));
        // CB 75 0117
        gbc.setState(0xa899, 0x5039, 0xa740, 0x4abe, 0x6016, 0xd873, 0x1, 0x0);
        gbc.writeMem(0xa899, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x5039, gbc.sp());
        EXPECT(0xa89b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa899));
        EXPECT(0x75, gbc.readMem(0xa89a));
        // CB 75 0119
        gbc.setState(0xdaa4, 0xf6df, 0xfc0, 0x547d, 0x5fc5, 0x1e61, 0x1, 0x1);
        gbc.writeMem(0xdaa4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xf6df, gbc.sp());
        EXPECT(0xdaa6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdaa4));
        EXPECT(0x75, gbc.readMem(0xdaa5));
        // CB 75 011A
        gbc.setState(0xa7c1, 0xc196, 0x6c10, 0xc937, 0xdae6, 0x47e2, 0x1, 0x1);
        gbc.writeMem(0xa7c1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xc196, gbc.sp());
        EXPECT(0xa7c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7c1));
        EXPECT(0x75, gbc.readMem(0xa7c2));
        // CB 75 011B
        gbc.setState(0x9107, 0x36f, 0x7730, 0x7c8f, 0xdff9, 0x6c43, 0x0, 0x0);
        gbc.writeMem(0x9107, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x36f, gbc.sp());
        EXPECT(0x9109, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9107));
        EXPECT(0x75, gbc.readMem(0x9108));
        // CB 75 011C
        gbc.setState(0x6a45, 0xa7aa, 0xad50, 0x70e8, 0x53b1, 0x9b5c, 0x0, 0x1);
        gbc.writeMem(0x6a45, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xa7aa, gbc.sp());
        EXPECT(0x6a47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 011D
        gbc.setState(0x6818, 0xe1b7, 0x5740, 0xe662, 0xe9a7, 0xc7c, 0x1, 0x1);
        gbc.writeMem(0x6818, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xe1b7, gbc.sp());
        EXPECT(0x681a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 011E
        gbc.setState(0xb6bb, 0x43c5, 0x7f90, 0xabb1, 0xee07, 0x46d7, 0x0, 0x0);
        gbc.writeMem(0xb6bb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x43c5, gbc.sp());
        EXPECT(0xb6bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6bb));
        EXPECT(0x75, gbc.readMem(0xb6bc));
        // CB 75 011F
        gbc.setState(0x4875, 0x6286, 0x7480, 0x8780, 0xf44, 0xff46, 0x1, 0x0);
        gbc.writeMem(0x4875, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x6286, gbc.sp());
        EXPECT(0x4877, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0120
        gbc.setState(0x243a, 0x621f, 0x7be0, 0xb1d8, 0xef08, 0xfce9, 0x0, 0x1);
        gbc.writeMem(0x243a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x621f, gbc.sp());
        EXPECT(0x243c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0121
        gbc.setState(0xd881, 0x8a69, 0x5850, 0x5b5f, 0x7f7a, 0xfa63, 0x1, 0x0);
        gbc.writeMem(0xd881, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x8a69, gbc.sp());
        EXPECT(0xd883, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd881));
        EXPECT(0x75, gbc.readMem(0xd882));
        // CB 75 0122
        gbc.setState(0x5d40, 0xdc13, 0xf490, 0xb5fc, 0xaff0, 0xbda4, 0x0, 0x0);
        gbc.writeMem(0x5d40, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xdc13, gbc.sp());
        EXPECT(0x5d42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0123
        gbc.setState(0x57cf, 0xdefb, 0x59a0, 0x8772, 0x37bf, 0x155e, 0x0, 0x0);
        gbc.writeMem(0x57cf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xdefb, gbc.sp());
        EXPECT(0x57d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0124
        gbc.setState(0xd817, 0x9ead, 0x8b80, 0x4b6b, 0xc4f3, 0x83cf, 0x0, 0x1);
        gbc.writeMem(0xd817, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x9ead, gbc.sp());
        EXPECT(0xd819, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd817));
        EXPECT(0x75, gbc.readMem(0xd818));
        // CB 75 0126
        gbc.setState(0x132a, 0xd7b4, 0x9120, 0xf6dc, 0xc5fa, 0x9d1, 0x1, 0x0);
        gbc.writeMem(0x132a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xd7b4, gbc.sp());
        EXPECT(0x132c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0127
        gbc.setState(0x8dbc, 0x8573, 0x9a50, 0xb98c, 0x259, 0xd88f, 0x1, 0x1);
        gbc.writeMem(0x8dbc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x8573, gbc.sp());
        EXPECT(0x8dbe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dbc));
        EXPECT(0x75, gbc.readMem(0x8dbd));
        // CB 75 0128
        gbc.setState(0x72d7, 0x7f6d, 0x1d50, 0x4a82, 0x9e88, 0xd560, 0x1, 0x0);
        gbc.writeMem(0x72d7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x7f6d, gbc.sp());
        EXPECT(0x72d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0129
        gbc.setState(0xd086, 0x5553, 0x4040, 0xb90, 0xb4c5, 0xdc0d, 0x1, 0x1);
        gbc.writeMem(0xd086, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x5553, gbc.sp());
        EXPECT(0xd088, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd086));
        EXPECT(0x75, gbc.readMem(0xd087));
        // CB 75 012A
        gbc.setState(0x3f67, 0x79b8, 0xf660, 0x71ae, 0x1aeb, 0xb619, 0x0, 0x1);
        gbc.writeMem(0x3f67, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x79b8, gbc.sp());
        EXPECT(0x3f69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 012B
        gbc.setState(0x16ed, 0xaf4, 0x6670, 0xefa2, 0xa17f, 0xa65b, 0x0, 0x0);
        gbc.writeMem(0x16ed, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xaf4, gbc.sp());
        EXPECT(0x16ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 012C
        gbc.setState(0x1b54, 0xc64d, 0xada0, 0x760d, 0x49f2, 0x33d6, 0x1, 0x1);
        gbc.writeMem(0x1b54, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xc64d, gbc.sp());
        EXPECT(0x1b56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 012D
        gbc.setState(0xd65, 0x6765, 0x51c0, 0xeafc, 0x6e26, 0x253a, 0x1, 0x1);
        gbc.writeMem(0xd65, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x6765, gbc.sp());
        EXPECT(0xd67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 012E
        gbc.setState(0xe0ad, 0x2013, 0xd440, 0xecf8, 0x89fb, 0xe975, 0x1, 0x1);
        gbc.writeMem(0xe0ad, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x2013, gbc.sp());
        EXPECT(0xe0af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0ad));
        EXPECT(0x75, gbc.readMem(0xe0ae));
        // CB 75 012F
        gbc.setState(0xd7bd, 0xc4c4, 0x510, 0x234d, 0x1111, 0x3df2, 0x0, 0x1);
        gbc.writeMem(0xd7bd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xc4c4, gbc.sp());
        EXPECT(0xd7bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7bd));
        EXPECT(0x75, gbc.readMem(0xd7be));
        // CB 75 0130
        gbc.setState(0x7896, 0x5b78, 0x1010, 0x1d92, 0xa2bf, 0x2168, 0x1, 0x0);
        gbc.writeMem(0x7896, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x5b78, gbc.sp());
        EXPECT(0x7898, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0131
        gbc.setState(0x17a0, 0x3b6f, 0x9b20, 0x5348, 0xedf7, 0xf7e3, 0x1, 0x0);
        gbc.writeMem(0x17a0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x3b6f, gbc.sp());
        EXPECT(0x17a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0132
        gbc.setState(0xe777, 0x9f9c, 0x2c80, 0x10d3, 0x4fd, 0x970, 0x1, 0x0);
        gbc.writeMem(0xe777, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x9f9c, gbc.sp());
        EXPECT(0xe779, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe777));
        EXPECT(0x75, gbc.readMem(0xe778));
        // CB 75 0133
        gbc.setState(0x682d, 0x9d22, 0xd300, 0xab5e, 0x6d8e, 0x7d9d, 0x0, 0x0);
        gbc.writeMem(0x682d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x9d22, gbc.sp());
        EXPECT(0x682f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0134
        gbc.setState(0x1809, 0x82a0, 0x4fa0, 0x70d9, 0xebb4, 0x6d9, 0x1, 0x1);
        gbc.writeMem(0x1809, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x82a0, gbc.sp());
        EXPECT(0x180b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0135
        gbc.setState(0xc6cc, 0xcbec, 0xbe00, 0xa13d, 0x6538, 0x792b, 0x1, 0x0);
        gbc.writeMem(0xc6cc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xcbec, gbc.sp());
        EXPECT(0xc6ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6cc));
        EXPECT(0x75, gbc.readMem(0xc6cd));
        // CB 75 0136
        gbc.setState(0x9d39, 0x59ae, 0xca20, 0xa6ba, 0xe20c, 0x57fa, 0x0, 0x0);
        gbc.writeMem(0x9d39, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x59ae, gbc.sp());
        EXPECT(0x9d3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d39));
        EXPECT(0x75, gbc.readMem(0x9d3a));
        // CB 75 0137
        gbc.setState(0xb1ad, 0x60a, 0xa670, 0x5810, 0x9436, 0x67d1, 0x0, 0x1);
        gbc.writeMem(0xb1ad, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x60a, gbc.sp());
        EXPECT(0xb1af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1ad));
        EXPECT(0x75, gbc.readMem(0xb1ae));
        // CB 75 0138
        gbc.setState(0xf6b, 0x3491, 0x8de0, 0xceb7, 0x380, 0x636b, 0x0, 0x0);
        gbc.writeMem(0xf6b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x3491, gbc.sp());
        EXPECT(0xf6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0139
        gbc.setState(0x1b17, 0xaae1, 0x7c10, 0x92d3, 0xe0e6, 0x94d6, 0x1, 0x1);
        gbc.writeMem(0x1b17, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xaae1, gbc.sp());
        EXPECT(0x1b19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 013A
        gbc.setState(0xcc1, 0x740c, 0xdd30, 0x6955, 0xa65b, 0x315, 0x1, 0x0);
        gbc.writeMem(0xcc1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x740c, gbc.sp());
        EXPECT(0xcc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 013B
        gbc.setState(0xde80, 0x8945, 0xbab0, 0xd28d, 0x1fd3, 0x7c73, 0x1, 0x0);
        gbc.writeMem(0xde80, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x8945, gbc.sp());
        EXPECT(0xde82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde80));
        EXPECT(0x75, gbc.readMem(0xde81));
        // CB 75 013C
        gbc.setState(0x4e0e, 0x8712, 0x69c0, 0x8665, 0x2c85, 0x1b22, 0x1, 0x1);
        gbc.writeMem(0x4e0e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x8712, gbc.sp());
        EXPECT(0x4e10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 013D
        gbc.setState(0x2d65, 0x2521, 0x5490, 0xe13b, 0x5a53, 0xcfa5, 0x1, 0x1);
        gbc.writeMem(0x2d65, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x2521, gbc.sp());
        EXPECT(0x2d67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 013E
        gbc.setState(0x50c9, 0x1f8, 0x4d00, 0xfa61, 0x40d8, 0x5380, 0x1, 0x1);
        gbc.writeMem(0x50c9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x1f8, gbc.sp());
        EXPECT(0x50cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 013F
        gbc.setState(0x44c2, 0x6f50, 0xf4f0, 0x8448, 0x6777, 0x7b37, 0x0, 0x1);
        gbc.writeMem(0x44c2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x6f50, gbc.sp());
        EXPECT(0x44c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0140
        gbc.setState(0x3cb4, 0x21a, 0x7640, 0x33a, 0xc821, 0xa65, 0x0, 0x0);
        gbc.writeMem(0x3cb4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x21a, gbc.sp());
        EXPECT(0x3cb6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0141
        gbc.setState(0x3ecf, 0x4b6b, 0xa190, 0x296e, 0x11c4, 0x1e20, 0x1, 0x1);
        gbc.writeMem(0x3ecf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x4b6b, gbc.sp());
        EXPECT(0x3ed1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0142
        gbc.setState(0x98d2, 0x153d, 0x21e0, 0xae62, 0x2b72, 0xae45, 0x1, 0x0);
        gbc.writeMem(0x98d2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x153d, gbc.sp());
        EXPECT(0x98d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98d2));
        EXPECT(0x75, gbc.readMem(0x98d3));
        // CB 75 0143
        gbc.setState(0xe07e, 0xde89, 0x2dd0, 0x7c04, 0xf579, 0x6a6e, 0x1, 0x0);
        gbc.writeMem(0xe07e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xde89, gbc.sp());
        EXPECT(0xe080, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe07e));
        EXPECT(0x75, gbc.readMem(0xe07f));
        // CB 75 0144
        gbc.setState(0x7c1d, 0x116c, 0xcf40, 0x9d4b, 0xdb31, 0xc640, 0x1, 0x1);
        gbc.writeMem(0x7c1d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x116c, gbc.sp());
        EXPECT(0x7c1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0148
        gbc.setState(0x1f5c, 0x9ab5, 0xa030, 0xdc9e, 0xf534, 0xd470, 0x1, 0x0);
        gbc.writeMem(0x1f5c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x9ab5, gbc.sp());
        EXPECT(0x1f5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0149
        gbc.setState(0x3b94, 0x919, 0x3ff0, 0xe75b, 0x4fdf, 0x1a4, 0x1, 0x0);
        gbc.writeMem(0x3b94, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x919, gbc.sp());
        EXPECT(0x3b96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 014A
        gbc.setState(0x2dec, 0x185f, 0x46a0, 0x44a5, 0x45c2, 0xaf46, 0x1, 0x1);
        gbc.writeMem(0x2dec, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x185f, gbc.sp());
        EXPECT(0x2dee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 014B
        gbc.setState(0x1117, 0x8211, 0x89e0, 0x4695, 0xd456, 0xb187, 0x0, 0x1);
        gbc.writeMem(0x1117, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x8211, gbc.sp());
        EXPECT(0x1119, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 014C
        gbc.setState(0xe8bb, 0x212d, 0x2d40, 0x156, 0x65ec, 0xa6b4, 0x0, 0x0);
        gbc.writeMem(0xe8bb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x212d, gbc.sp());
        EXPECT(0xe8bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8bb));
        EXPECT(0x75, gbc.readMem(0xe8bc));
        // CB 75 014D
        gbc.setState(0xafd1, 0xe7ee, 0xc7a0, 0xf333, 0xf3ce, 0xd796, 0x0, 0x0);
        gbc.writeMem(0xafd1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xe7ee, gbc.sp());
        EXPECT(0xafd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafd1));
        EXPECT(0x75, gbc.readMem(0xafd2));
        // CB 75 014E
        gbc.setState(0x3d9f, 0xd128, 0x78a0, 0x47bc, 0xc2b0, 0xc8bb, 0x1, 0x1);
        gbc.writeMem(0x3d9f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xd128, gbc.sp());
        EXPECT(0x3da1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 014F
        gbc.setState(0x7bfb, 0x6002, 0xb350, 0xfc8b, 0xb7f9, 0xa2de, 0x0, 0x1);
        gbc.writeMem(0x7bfb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x6002, gbc.sp());
        EXPECT(0x7bfd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0150
        gbc.setState(0xe901, 0xfbe0, 0x8870, 0x8611, 0xdd83, 0x428c, 0x0, 0x1);
        gbc.writeMem(0xe901, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xfbe0, gbc.sp());
        EXPECT(0xe903, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe901));
        EXPECT(0x75, gbc.readMem(0xe902));
        // CB 75 0151
        gbc.setState(0x970d, 0xde2c, 0x40b0, 0xd64b, 0x8ad1, 0xe09f, 0x1, 0x1);
        gbc.writeMem(0x970d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xde2c, gbc.sp());
        EXPECT(0x970f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x970d));
        EXPECT(0x75, gbc.readMem(0x970e));
        // CB 75 0152
        gbc.setState(0x9a1, 0x4114, 0xa2a0, 0xcd07, 0x6a77, 0x22e9, 0x1, 0x1);
        gbc.writeMem(0x9a1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x4114, gbc.sp());
        EXPECT(0x9a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0153
        gbc.setState(0x9f90, 0xc8bc, 0xc3f0, 0xe9ed, 0x41c0, 0xfbbc, 0x1, 0x1);
        gbc.writeMem(0x9f90, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xc8bc, gbc.sp());
        EXPECT(0x9f92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f90));
        EXPECT(0x75, gbc.readMem(0x9f91));
        // CB 75 0154
        gbc.setState(0x5d62, 0xf5f4, 0x1100, 0xf12a, 0xd9b, 0x9796, 0x1, 0x0);
        gbc.writeMem(0x5d62, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xf5f4, gbc.sp());
        EXPECT(0x5d64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0155
        gbc.setState(0x410c, 0x9a94, 0xce50, 0xc40a, 0x132c, 0xd5de, 0x1, 0x0);
        gbc.writeMem(0x410c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x9a94, gbc.sp());
        EXPECT(0x410e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0156
        gbc.setState(0xe5a1, 0xacd2, 0x1350, 0xbfd5, 0x37d1, 0x4da4, 0x0, 0x0);
        gbc.writeMem(0xe5a1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xacd2, gbc.sp());
        EXPECT(0xe5a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5a1));
        EXPECT(0x75, gbc.readMem(0xe5a2));
        // CB 75 0157
        gbc.setState(0x7637, 0xa8, 0xa010, 0xff6d, 0x1095, 0x91fe, 0x1, 0x1);
        gbc.writeMem(0x7637, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xa8, gbc.sp());
        EXPECT(0x7639, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0158
        gbc.setState(0x3009, 0x254e, 0xa0, 0xbdc6, 0x92c8, 0x689d, 0x1, 0x1);
        gbc.writeMem(0x3009, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x254e, gbc.sp());
        EXPECT(0x300b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0159
        gbc.setState(0xdb5a, 0xb599, 0xe8f0, 0xd271, 0xd86d, 0xd8e5, 0x1, 0x1);
        gbc.writeMem(0xdb5a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xb599, gbc.sp());
        EXPECT(0xdb5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb5a));
        EXPECT(0x75, gbc.readMem(0xdb5b));
        // CB 75 015A
        gbc.setState(0x35a2, 0xf829, 0x5e20, 0x2f57, 0x1345, 0x7203, 0x0, 0x1);
        gbc.writeMem(0x35a2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xf829, gbc.sp());
        EXPECT(0x35a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 015B
        gbc.setState(0x51a7, 0x7807, 0xa9b0, 0x4bd4, 0x723f, 0x1b83, 0x0, 0x1);
        gbc.writeMem(0x51a7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x7807, gbc.sp());
        EXPECT(0x51a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 015C
        gbc.setState(0xa62f, 0x96c5, 0x64f0, 0x92d3, 0xb7d0, 0x9925, 0x1, 0x0);
        gbc.writeMem(0xa62f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x96c5, gbc.sp());
        EXPECT(0xa631, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa62f));
        EXPECT(0x75, gbc.readMem(0xa630));
        // CB 75 015D
        gbc.setState(0x602a, 0x3e42, 0x1480, 0x7d28, 0xb4ea, 0x6023, 0x1, 0x1);
        gbc.writeMem(0x602a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x3e42, gbc.sp());
        EXPECT(0x602c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 015E
        gbc.setState(0x440a, 0x9441, 0xc1f0, 0x5926, 0x92c4, 0xdc65, 0x1, 0x1);
        gbc.writeMem(0x440a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x9441, gbc.sp());
        EXPECT(0x440c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 015F
        gbc.setState(0x5988, 0x4343, 0x2770, 0xdcfc, 0x8ad2, 0xeca0, 0x1, 0x1);
        gbc.writeMem(0x5988, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x4343, gbc.sp());
        EXPECT(0x598a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0160
        gbc.setState(0xe4db, 0xc8e, 0xf990, 0x7f68, 0xb9c0, 0x9f6e, 0x1, 0x0);
        gbc.writeMem(0xe4db, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xc8e, gbc.sp());
        EXPECT(0xe4dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4db));
        EXPECT(0x75, gbc.readMem(0xe4dc));
        // CB 75 0161
        gbc.setState(0x64c5, 0x3dd7, 0xfd40, 0x2569, 0x6e1a, 0xfe4a, 0x1, 0x1);
        gbc.writeMem(0x64c5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x3dd7, gbc.sp());
        EXPECT(0x64c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0162
        gbc.setState(0xbd4b, 0x73b4, 0xe960, 0xc483, 0x3e1e, 0xf949, 0x0, 0x1);
        gbc.writeMem(0xbd4b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x73b4, gbc.sp());
        EXPECT(0xbd4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd4b));
        EXPECT(0x75, gbc.readMem(0xbd4c));
        // CB 75 0163
        gbc.setState(0xaa90, 0xa97e, 0x7020, 0xb53c, 0xd74e, 0x6d55, 0x1, 0x0);
        gbc.writeMem(0xaa90, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xa97e, gbc.sp());
        EXPECT(0xaa92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa90));
        EXPECT(0x75, gbc.readMem(0xaa91));
        // CB 75 0164
        gbc.setState(0xe3a8, 0x42b0, 0xc800, 0x8aea, 0xec7b, 0xe9bd, 0x1, 0x1);
        gbc.writeMem(0xe3a8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x42b0, gbc.sp());
        EXPECT(0xe3aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3a8));
        EXPECT(0x75, gbc.readMem(0xe3a9));
        // CB 75 0165
        gbc.setState(0xf6a, 0xf81b, 0x3570, 0xbeee, 0xf614, 0xdb3f, 0x0, 0x0);
        gbc.writeMem(0xf6a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xf81b, gbc.sp());
        EXPECT(0xf6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0166
        gbc.setState(0x5b10, 0x3bee, 0x47e0, 0x58d0, 0x48ad, 0xcb33, 0x0, 0x1);
        gbc.writeMem(0x5b10, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x3bee, gbc.sp());
        EXPECT(0x5b12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0167
        gbc.setState(0x5235, 0x37b5, 0xb2a0, 0x2203, 0x2aca, 0xad76, 0x0, 0x1);
        gbc.writeMem(0x5235, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x37b5, gbc.sp());
        EXPECT(0x5237, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0168
        gbc.setState(0x4c5f, 0x376, 0x8120, 0x781, 0x389f, 0x57, 0x1, 0x0);
        gbc.writeMem(0x4c5f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x376, gbc.sp());
        EXPECT(0x4c61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0169
        gbc.setState(0x9a42, 0x3f0b, 0x3b90, 0xc5bf, 0x138, 0xd907, 0x1, 0x1);
        gbc.writeMem(0x9a42, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x3f0b, gbc.sp());
        EXPECT(0x9a44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a42));
        EXPECT(0x75, gbc.readMem(0x9a43));
        // CB 75 016A
        gbc.setState(0xea3c, 0x667a, 0xde30, 0x937c, 0x5656, 0x9cd7, 0x1, 0x1);
        gbc.writeMem(0xea3c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x667a, gbc.sp());
        EXPECT(0xea3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea3c));
        EXPECT(0x75, gbc.readMem(0xea3d));
        // CB 75 016B
        gbc.setState(0x38f0, 0x2518, 0x79d0, 0xaa53, 0xac58, 0xf502, 0x0, 0x0);
        gbc.writeMem(0x38f0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x2518, gbc.sp());
        EXPECT(0x38f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 016C
        gbc.setState(0x3843, 0x5a87, 0xebd0, 0xeb4e, 0x58f6, 0x3bd0, 0x1, 0x1);
        gbc.writeMem(0x3843, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x5a87, gbc.sp());
        EXPECT(0x3845, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 016D
        gbc.setState(0x302f, 0x31ef, 0xcf40, 0xfaea, 0xce40, 0x9406, 0x0, 0x1);
        gbc.writeMem(0x302f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x31ef, gbc.sp());
        EXPECT(0x3031, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 016E
        gbc.setState(0x6798, 0x56c0, 0xf510, 0x1764, 0x582a, 0x8630, 0x1, 0x1);
        gbc.writeMem(0x6798, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x56c0, gbc.sp());
        EXPECT(0x679a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 016F
        gbc.setState(0x6c9, 0x1595, 0x2710, 0xd0ef, 0x6316, 0xf916, 0x0, 0x1);
        gbc.writeMem(0x6c9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x1595, gbc.sp());
        EXPECT(0x6cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0170
        gbc.setState(0xcbe0, 0x4cfb, 0xe850, 0x4ff6, 0x7231, 0x15ca, 0x1, 0x0);
        gbc.writeMem(0xcbe0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x4cfb, gbc.sp());
        EXPECT(0xcbe2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbe0));
        EXPECT(0x75, gbc.readMem(0xcbe1));
        // CB 75 0171
        gbc.setState(0xdf55, 0x72f9, 0xae70, 0xcfba, 0x776e, 0x10a8, 0x1, 0x1);
        gbc.writeMem(0xdf55, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x72f9, gbc.sp());
        EXPECT(0xdf57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf55));
        EXPECT(0x75, gbc.readMem(0xdf56));
        // CB 75 0172
        gbc.setState(0x3d72, 0xd241, 0x48d0, 0xc80c, 0x6fc9, 0x21d7, 0x0, 0x0);
        gbc.writeMem(0x3d72, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xd241, gbc.sp());
        EXPECT(0x3d74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0174
        gbc.setState(0x64c3, 0x9c, 0x4df0, 0xf005, 0xa7de, 0xadc4, 0x1, 0x0);
        gbc.writeMem(0x64c3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x9c, gbc.sp());
        EXPECT(0x64c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0175
        gbc.setState(0xa717, 0x26da, 0x8d10, 0x17a5, 0x6ea6, 0x6f53, 0x0, 0x1);
        gbc.writeMem(0xa717, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x26da, gbc.sp());
        EXPECT(0xa719, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa717));
        EXPECT(0x75, gbc.readMem(0xa718));
        // CB 75 0176
        gbc.setState(0xea14, 0xf370, 0x7be0, 0x153d, 0x7d39, 0xf489, 0x0, 0x1);
        gbc.writeMem(0xea14, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xf370, gbc.sp());
        EXPECT(0xea16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea14));
        EXPECT(0x75, gbc.readMem(0xea15));
        // CB 75 0178
        gbc.setState(0x888, 0xfe7d, 0xe900, 0x87fc, 0x474f, 0x91e, 0x1, 0x0);
        gbc.writeMem(0x888, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xfe7d, gbc.sp());
        EXPECT(0x88a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0179
        gbc.setState(0x8281, 0xad5d, 0x2f30, 0xb86c, 0xfcd9, 0x7e58, 0x0, 0x1);
        gbc.writeMem(0x8281, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xad5d, gbc.sp());
        EXPECT(0x8283, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8281));
        EXPECT(0x75, gbc.readMem(0x8282));
        // CB 75 017C
        gbc.setState(0xb15, 0xf373, 0xcda0, 0x4bde, 0xbd90, 0x8778, 0x0, 0x1);
        gbc.writeMem(0xb15, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xf373, gbc.sp());
        EXPECT(0xb17, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 017D
        gbc.setState(0x8379, 0xa92b, 0x8eb0, 0x6673, 0x785e, 0x1592, 0x1, 0x0);
        gbc.writeMem(0x8379, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xa92b, gbc.sp());
        EXPECT(0x837b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8379));
        EXPECT(0x75, gbc.readMem(0x837a));
        // CB 75 017E
        gbc.setState(0xcdc8, 0x61bf, 0xd780, 0xcc3d, 0xb436, 0x237f, 0x0, 0x1);
        gbc.writeMem(0xcdc8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x61bf, gbc.sp());
        EXPECT(0xcdca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdc8));
        EXPECT(0x75, gbc.readMem(0xcdc9));
        // CB 75 017F
        gbc.setState(0xbbf, 0xff16, 0x17d0, 0x3408, 0xe5a0, 0xba29, 0x1, 0x1);
        gbc.writeMem(0xbbf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xff16, gbc.sp());
        EXPECT(0xbc1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0180
        gbc.setState(0x5eac, 0x8546, 0xed70, 0x97d3, 0xf002, 0xcff9, 0x1, 0x1);
        gbc.writeMem(0x5eac, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x8546, gbc.sp());
        EXPECT(0x5eae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0182
        gbc.setState(0x564c, 0xe31b, 0x11f0, 0xefcb, 0xe412, 0xa588, 0x0, 0x1);
        gbc.writeMem(0x564c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xe31b, gbc.sp());
        EXPECT(0x564e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0183
        gbc.setState(0xbef1, 0xfa8c, 0x5310, 0xc6d8, 0x7b4e, 0xfb8a, 0x0, 0x1);
        gbc.writeMem(0xbef1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xfa8c, gbc.sp());
        EXPECT(0xbef3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbef1));
        EXPECT(0x75, gbc.readMem(0xbef2));
        // CB 75 0184
        gbc.setState(0x57a8, 0x3d86, 0xf8c0, 0xd5e1, 0x55c8, 0xe754, 0x0, 0x1);
        gbc.writeMem(0x57a8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x3d86, gbc.sp());
        EXPECT(0x57aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0185
        gbc.setState(0x1678, 0x5dac, 0xfad0, 0xbc53, 0xab6a, 0xa524, 0x0, 0x1);
        gbc.writeMem(0x1678, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x5dac, gbc.sp());
        EXPECT(0x167a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0186
        gbc.setState(0xa14b, 0xd6d, 0x14a0, 0x9f62, 0x5e48, 0xfb0d, 0x0, 0x0);
        gbc.writeMem(0xa14b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xd6d, gbc.sp());
        EXPECT(0xa14d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa14b));
        EXPECT(0x75, gbc.readMem(0xa14c));
        // CB 75 0187
        gbc.setState(0xd43a, 0xcde, 0xc2b0, 0x42ef, 0x19a, 0xe0cf, 0x0, 0x0);
        gbc.writeMem(0xd43a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xcde, gbc.sp());
        EXPECT(0xd43c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd43a));
        EXPECT(0x75, gbc.readMem(0xd43b));
        // CB 75 0188
        gbc.setState(0x8783, 0xd8b5, 0xe310, 0xdd84, 0xfd8e, 0x59f, 0x1, 0x1);
        gbc.writeMem(0x8783, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xd8b5, gbc.sp());
        EXPECT(0x8785, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8783));
        EXPECT(0x75, gbc.readMem(0x8784));
        // CB 75 0189
        gbc.setState(0x3362, 0x8d36, 0x9aa0, 0xffde, 0x6d48, 0xfeef, 0x0, 0x0);
        gbc.writeMem(0x3362, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x8d36, gbc.sp());
        EXPECT(0x3364, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 018A
        gbc.setState(0x806, 0xfff1, 0x5850, 0x68f4, 0xd0be, 0x6e9b, 0x1, 0x1);
        gbc.writeMem(0x806, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xfff1, gbc.sp());
        EXPECT(0x808, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 018B
        gbc.setState(0x8255, 0xc797, 0x5fd0, 0xa81d, 0xfc8f, 0xdfa1, 0x1, 0x0);
        gbc.writeMem(0x8255, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xc797, gbc.sp());
        EXPECT(0x8257, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8255));
        EXPECT(0x75, gbc.readMem(0x8256));
        // CB 75 018C
        gbc.setState(0xc8ee, 0x67f, 0xc970, 0xcc46, 0xfbc6, 0x3ac, 0x1, 0x0);
        gbc.writeMem(0xc8ee, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x67f, gbc.sp());
        EXPECT(0xc8f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8ee));
        EXPECT(0x75, gbc.readMem(0xc8ef));
        // CB 75 018D
        gbc.setState(0x9cd0, 0x838e, 0xc390, 0xc6c6, 0x5086, 0x5e90, 0x1, 0x0);
        gbc.writeMem(0x9cd0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x838e, gbc.sp());
        EXPECT(0x9cd2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cd0));
        EXPECT(0x75, gbc.readMem(0x9cd1));
        // CB 75 018E
        gbc.setState(0xebba, 0x9194, 0xd4e0, 0xdfa6, 0x88ff, 0xe4bb, 0x1, 0x1);
        gbc.writeMem(0xebba, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x9194, gbc.sp());
        EXPECT(0xebbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebba));
        EXPECT(0x75, gbc.readMem(0xebbb));
        // CB 75 018F
        gbc.setState(0xb1c6, 0x15fa, 0x20, 0x4dc5, 0x87cb, 0x1e7f, 0x1, 0x1);
        gbc.writeMem(0xb1c6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x15fa, gbc.sp());
        EXPECT(0xb1c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1c6));
        EXPECT(0x75, gbc.readMem(0xb1c7));
        // CB 75 0190
        gbc.setState(0x2df3, 0x1ff9, 0x9380, 0xe939, 0xb0b8, 0x39c9, 0x0, 0x0);
        gbc.writeMem(0x2df3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x1ff9, gbc.sp());
        EXPECT(0x2df5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0191
        gbc.setState(0x2cce, 0x62c7, 0x40c0, 0xc09c, 0x3dd, 0x19c8, 0x1, 0x0);
        gbc.writeMem(0x2cce, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x62c7, gbc.sp());
        EXPECT(0x2cd0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0192
        gbc.setState(0x841c, 0x6f09, 0x32b0, 0xcefa, 0x3270, 0x58f, 0x1, 0x0);
        gbc.writeMem(0x841c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x6f09, gbc.sp());
        EXPECT(0x841e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x841c));
        EXPECT(0x75, gbc.readMem(0x841d));
        // CB 75 0193
        gbc.setState(0x7f54, 0x29e6, 0x5410, 0x27e7, 0x1fbe, 0x6114, 0x0, 0x0);
        gbc.writeMem(0x7f54, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x29e6, gbc.sp());
        EXPECT(0x7f56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0194
        gbc.setState(0x5a99, 0x7a6e, 0x4630, 0xdfd4, 0xe5b0, 0xaca2, 0x1, 0x1);
        gbc.writeMem(0x5a99, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x7a6e, gbc.sp());
        EXPECT(0x5a9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0195
        gbc.setState(0x7645, 0xf7f0, 0xb6f0, 0xf88b, 0xf7cc, 0xf978, 0x1, 0x1);
        gbc.writeMem(0x7645, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xf7f0, gbc.sp());
        EXPECT(0x7647, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0196
        gbc.setState(0x4927, 0x52e5, 0x9480, 0x3a26, 0x9138, 0x270c, 0x1, 0x1);
        gbc.writeMem(0x4927, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x52e5, gbc.sp());
        EXPECT(0x4929, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0197
        gbc.setState(0x8b2a, 0x7e5d, 0xc200, 0x30d9, 0x81ff, 0x8e85, 0x1, 0x0);
        gbc.writeMem(0x8b2a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x7e5d, gbc.sp());
        EXPECT(0x8b2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b2a));
        EXPECT(0x75, gbc.readMem(0x8b2b));
        // CB 75 0198
        gbc.setState(0x12f3, 0x56ea, 0x7d60, 0xb260, 0x5af9, 0x5e2a, 0x1, 0x1);
        gbc.writeMem(0x12f3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x56ea, gbc.sp());
        EXPECT(0x12f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0199
        gbc.setState(0x2d3b, 0xd5, 0x5590, 0xe757, 0x4bd6, 0x333d, 0x0, 0x0);
        gbc.writeMem(0x2d3b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xd5, gbc.sp());
        EXPECT(0x2d3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 019A
        gbc.setState(0xbbfb, 0xd39f, 0x7a50, 0x1335, 0x7d0c, 0x6f0d, 0x0, 0x0);
        gbc.writeMem(0xbbfb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xd39f, gbc.sp());
        EXPECT(0xbbfd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbfb));
        EXPECT(0x75, gbc.readMem(0xbbfc));
        // CB 75 019B
        gbc.setState(0xbc4b, 0xe2fa, 0x5240, 0xdf3a, 0x5986, 0xd19e, 0x0, 0x0);
        gbc.writeMem(0xbc4b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xe2fa, gbc.sp());
        EXPECT(0xbc4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc4b));
        EXPECT(0x75, gbc.readMem(0xbc4c));
        // CB 75 019C
        gbc.setState(0xda5a, 0xc79b, 0xcb00, 0x515b, 0xef4c, 0x98e8, 0x0, 0x0);
        gbc.writeMem(0xda5a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xc79b, gbc.sp());
        EXPECT(0xda5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda5a));
        EXPECT(0x75, gbc.readMem(0xda5b));
        // CB 75 019D
        gbc.setState(0xe4ed, 0xd0c4, 0x1e10, 0x9ad0, 0xb517, 0x3991, 0x0, 0x0);
        gbc.writeMem(0xe4ed, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xd0c4, gbc.sp());
        EXPECT(0xe4ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4ed));
        EXPECT(0x75, gbc.readMem(0xe4ee));
        // CB 75 019E
        gbc.setState(0x502, 0x87a7, 0xd1a0, 0x5076, 0x1206, 0x73bc, 0x1, 0x1);
        gbc.writeMem(0x502, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x87a7, gbc.sp());
        EXPECT(0x504, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 019F
        gbc.setState(0xef96, 0x532b, 0x5310, 0x73be, 0x4613, 0x6337, 0x1, 0x0);
        gbc.writeMem(0xef96, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x532b, gbc.sp());
        EXPECT(0xef98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef96));
        EXPECT(0x75, gbc.readMem(0xef97));
        // CB 75 01A0
        gbc.setState(0xb655, 0x20bf, 0x610, 0xea96, 0x4fdd, 0xbf5a, 0x0, 0x0);
        gbc.writeMem(0xb655, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x20bf, gbc.sp());
        EXPECT(0xb657, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb655));
        EXPECT(0x75, gbc.readMem(0xb656));
        // CB 75 01A1
        gbc.setState(0x3dc9, 0x2fbb, 0x3ef0, 0xc06d, 0x783f, 0xaacb, 0x0, 0x1);
        gbc.writeMem(0x3dc9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x2fbb, gbc.sp());
        EXPECT(0x3dcb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01A3
        gbc.setState(0x1f6d, 0xceaa, 0x1f60, 0xcbe7, 0x6314, 0xa425, 0x0, 0x0);
        gbc.writeMem(0x1f6d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xceaa, gbc.sp());
        EXPECT(0x1f6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01A4
        gbc.setState(0x6a8d, 0x664d, 0xef50, 0x598b, 0x97d0, 0xed58, 0x1, 0x1);
        gbc.writeMem(0x6a8d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x664d, gbc.sp());
        EXPECT(0x6a8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01A5
        gbc.setState(0xc6d9, 0x8a58, 0xb8a0, 0xf21a, 0x30c6, 0x714a, 0x0, 0x0);
        gbc.writeMem(0xc6d9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x8a58, gbc.sp());
        EXPECT(0xc6db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6d9));
        EXPECT(0x75, gbc.readMem(0xc6da));
        // CB 75 01A6
        gbc.setState(0xcd55, 0x25ec, 0xc8c0, 0x6998, 0x1c2b, 0x4c94, 0x1, 0x0);
        gbc.writeMem(0xcd55, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x25ec, gbc.sp());
        EXPECT(0xcd57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd55));
        EXPECT(0x75, gbc.readMem(0xcd56));
        // CB 75 01A7
        gbc.setState(0x1d83, 0xdb4f, 0x4a00, 0x3ed8, 0xb55c, 0x5849, 0x0, 0x0);
        gbc.writeMem(0x1d83, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xdb4f, gbc.sp());
        EXPECT(0x1d85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01A8
        gbc.setState(0xbd3e, 0xe96c, 0xcf60, 0xaf75, 0x435e, 0xa88b, 0x1, 0x1);
        gbc.writeMem(0xbd3e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xe96c, gbc.sp());
        EXPECT(0xbd40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd3e));
        EXPECT(0x75, gbc.readMem(0xbd3f));
        // CB 75 01A9
        gbc.setState(0x1b1d, 0x6c0d, 0xaac0, 0x35e1, 0xeec8, 0xcf28, 0x0, 0x0);
        gbc.writeMem(0x1b1d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x6c0d, gbc.sp());
        EXPECT(0x1b1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01AA
        gbc.setState(0x8d32, 0x7bdb, 0xfaa0, 0xdf1b, 0x39a6, 0xf064, 0x1, 0x1);
        gbc.writeMem(0x8d32, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x7bdb, gbc.sp());
        EXPECT(0x8d34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d32));
        EXPECT(0x75, gbc.readMem(0x8d33));
        // CB 75 01AB
        gbc.setState(0x6510, 0x49e5, 0x1660, 0xbc4a, 0x1730, 0x7b13, 0x1, 0x0);
        gbc.writeMem(0x6510, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x49e5, gbc.sp());
        EXPECT(0x6512, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01AC
        gbc.setState(0x9010, 0x2a33, 0xf040, 0x77be, 0xc8e8, 0xf8ff, 0x1, 0x0);
        gbc.writeMem(0x9010, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x2a33, gbc.sp());
        EXPECT(0x9012, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9010));
        EXPECT(0x75, gbc.readMem(0x9011));
        // CB 75 01AD
        gbc.setState(0x15fb, 0xbbde, 0x5260, 0xe56b, 0x5d53, 0x88b6, 0x0, 0x0);
        gbc.writeMem(0x15fb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xbbde, gbc.sp());
        EXPECT(0x15fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01AE
        gbc.setState(0x7ea7, 0xbe3a, 0x4010, 0xf30, 0x86f5, 0xf5ca, 0x0, 0x1);
        gbc.writeMem(0x7ea7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xbe3a, gbc.sp());
        EXPECT(0x7ea9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01AF
        gbc.setState(0x9eb9, 0x965c, 0x6c40, 0xacfa, 0x5ca9, 0xb9f5, 0x0, 0x0);
        gbc.writeMem(0x9eb9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x965c, gbc.sp());
        EXPECT(0x9ebb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9eb9));
        EXPECT(0x75, gbc.readMem(0x9eba));
        // CB 75 01B0
        gbc.setState(0x7082, 0xa158, 0x5540, 0x3fd4, 0x90ef, 0x196, 0x1, 0x1);
        gbc.writeMem(0x7082, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xa158, gbc.sp());
        EXPECT(0x7084, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01B2
        gbc.setState(0x74a8, 0xda38, 0x5400, 0x67db, 0xa432, 0xa8a9, 0x1, 0x0);
        gbc.writeMem(0x74a8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xda38, gbc.sp());
        EXPECT(0x74aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01B3
        gbc.setState(0x227c, 0x6d38, 0x47e0, 0xc31d, 0x69e5, 0x8cc4, 0x1, 0x0);
        gbc.writeMem(0x227c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x6d38, gbc.sp());
        EXPECT(0x227e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01B4
        gbc.setState(0x79bb, 0x892b, 0x9f80, 0x8dcd, 0x6b15, 0x23bc, 0x1, 0x1);
        gbc.writeMem(0x79bb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x892b, gbc.sp());
        EXPECT(0x79bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01B5
        gbc.setState(0xde1e, 0x1451, 0x6c00, 0xec1d, 0x5b2d, 0x5a7e, 0x1, 0x1);
        gbc.writeMem(0xde1e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x1451, gbc.sp());
        EXPECT(0xde20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde1e));
        EXPECT(0x75, gbc.readMem(0xde1f));
        // CB 75 01B6
        gbc.setState(0x5441, 0xb421, 0xdf80, 0x475b, 0xf9e0, 0x40af, 0x0, 0x0);
        gbc.writeMem(0x5441, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xb421, gbc.sp());
        EXPECT(0x5443, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01B7
        gbc.setState(0xcd73, 0xa2d, 0x3140, 0x2147, 0xdeab, 0xb84, 0x0, 0x1);
        gbc.writeMem(0xcd73, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xa2d, gbc.sp());
        EXPECT(0xcd75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd73));
        EXPECT(0x75, gbc.readMem(0xcd74));
        // CB 75 01B8
        gbc.setState(0x38cf, 0x9d47, 0x8890, 0x51b3, 0x844b, 0x32a9, 0x0, 0x0);
        gbc.writeMem(0x38cf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x9d47, gbc.sp());
        EXPECT(0x38d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01B9
        gbc.setState(0x13cd, 0xbc59, 0xf50, 0x4b99, 0x14c3, 0x18aa, 0x1, 0x0);
        gbc.writeMem(0x13cd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xbc59, gbc.sp());
        EXPECT(0x13cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01BA
        gbc.setState(0xc3f7, 0x4518, 0xf450, 0x1058, 0x6484, 0x8133, 0x0, 0x1);
        gbc.writeMem(0xc3f7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x4518, gbc.sp());
        EXPECT(0xc3f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3f7));
        EXPECT(0x75, gbc.readMem(0xc3f8));
        // CB 75 01BC
        gbc.setState(0x33be, 0x360e, 0x4ff0, 0xeb70, 0x1cf6, 0xcfe4, 0x0, 0x1);
        gbc.writeMem(0x33be, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x360e, gbc.sp());
        EXPECT(0x33c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01BD
        gbc.setState(0x663e, 0x9d48, 0xc490, 0xf081, 0xb359, 0x158b, 0x0, 0x0);
        gbc.writeMem(0x663e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x9d48, gbc.sp());
        EXPECT(0x6640, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01BE
        gbc.setState(0xbf0e, 0x6fc5, 0x1ca0, 0xfc8f, 0x28d, 0x78a, 0x0, 0x1);
        gbc.writeMem(0xbf0e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x6fc5, gbc.sp());
        EXPECT(0xbf10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf0e));
        EXPECT(0x75, gbc.readMem(0xbf0f));
        // CB 75 01BF
        gbc.setState(0x7fd0, 0xec78, 0x2160, 0x673, 0xe737, 0xec50, 0x0, 0x0);
        gbc.writeMem(0x7fd0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xec78, gbc.sp());
        EXPECT(0x7fd2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01C0
        gbc.setState(0x6510, 0x6d84, 0xeef0, 0x7147, 0x9864, 0x7188, 0x1, 0x1);
        gbc.writeMem(0x6510, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x6d84, gbc.sp());
        EXPECT(0x6512, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01C1
        gbc.setState(0x5bc, 0x728b, 0x37c0, 0x27d8, 0x987e, 0xc035, 0x0, 0x0);
        gbc.writeMem(0x5bc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x728b, gbc.sp());
        EXPECT(0x5be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01C2
        gbc.setState(0xe398, 0x8420, 0x6840, 0x4a28, 0x812f, 0x484e, 0x0, 0x1);
        gbc.writeMem(0xe398, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x8420, gbc.sp());
        EXPECT(0xe39a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe398));
        EXPECT(0x75, gbc.readMem(0xe399));
        // CB 75 01C3
        gbc.setState(0xc60b, 0x85e1, 0x1200, 0xef3, 0x7555, 0xd545, 0x1, 0x1);
        gbc.writeMem(0xc60b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x85e1, gbc.sp());
        EXPECT(0xc60d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc60b));
        EXPECT(0x75, gbc.readMem(0xc60c));
        // CB 75 01C4
        gbc.setState(0x671, 0x50cf, 0x7a10, 0x7ecf, 0x87c4, 0x5010, 0x0, 0x1);
        gbc.writeMem(0x671, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x50cf, gbc.sp());
        EXPECT(0x673, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01C5
        gbc.setState(0x3742, 0xc5ce, 0x35e0, 0x6b9d, 0x9a4d, 0x998a, 0x0, 0x1);
        gbc.writeMem(0x3742, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xc5ce, gbc.sp());
        EXPECT(0x3744, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01C6
        gbc.setState(0x9a1, 0xf55d, 0xc3b0, 0xce0c, 0x9139, 0x6057, 0x1, 0x1);
        gbc.writeMem(0x9a1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xf55d, gbc.sp());
        EXPECT(0x9a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01C7
        gbc.setState(0xacd, 0xaa9a, 0x5c70, 0x66bd, 0x5424, 0xf38d, 0x0, 0x0);
        gbc.writeMem(0xacd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xaa9a, gbc.sp());
        EXPECT(0xacf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01C8
        gbc.setState(0xa967, 0x2f6b, 0xe1c0, 0xcd34, 0x32cd, 0x20d2, 0x1, 0x0);
        gbc.writeMem(0xa967, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x2f6b, gbc.sp());
        EXPECT(0xa969, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa967));
        EXPECT(0x75, gbc.readMem(0xa968));
        // CB 75 01C9
        gbc.setState(0xa977, 0x509f, 0xd460, 0xfe6b, 0xc697, 0x9104, 0x1, 0x1);
        gbc.writeMem(0xa977, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x509f, gbc.sp());
        EXPECT(0xa979, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa977));
        EXPECT(0x75, gbc.readMem(0xa978));
        // CB 75 01CA
        gbc.setState(0x4922, 0x44e7, 0x31d0, 0xbb42, 0x4a58, 0xec6b, 0x1, 0x0);
        gbc.writeMem(0x4922, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x44e7, gbc.sp());
        EXPECT(0x4924, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01CC
        gbc.setState(0x8465, 0x1e4, 0x4e50, 0x97e1, 0x68a, 0x399f, 0x1, 0x0);
        gbc.writeMem(0x8465, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x1e4, gbc.sp());
        EXPECT(0x8467, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8465));
        EXPECT(0x75, gbc.readMem(0x8466));
        // CB 75 01CD
        gbc.setState(0x9e8c, 0x63fd, 0xfb40, 0x3413, 0x3ffc, 0xeacb, 0x1, 0x0);
        gbc.writeMem(0x9e8c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x63fd, gbc.sp());
        EXPECT(0x9e8e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e8c));
        EXPECT(0x75, gbc.readMem(0x9e8d));
        // CB 75 01CE
        gbc.setState(0xe2a4, 0x44f0, 0xd000, 0x6a57, 0x3f8d, 0xcecb, 0x0, 0x0);
        gbc.writeMem(0xe2a4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x44f0, gbc.sp());
        EXPECT(0xe2a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2a4));
        EXPECT(0x75, gbc.readMem(0xe2a5));
        // CB 75 01CF
        gbc.setState(0x8bf8, 0x364d, 0xf810, 0xedc9, 0x9633, 0x5545, 0x1, 0x1);
        gbc.writeMem(0x8bf8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x364d, gbc.sp());
        EXPECT(0x8bfa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bf8));
        EXPECT(0x75, gbc.readMem(0x8bf9));
        // CB 75 01D0
        gbc.setState(0xed54, 0xfc41, 0xa870, 0x8ed6, 0xbb83, 0x3845, 0x0, 0x0);
        gbc.writeMem(0xed54, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xfc41, gbc.sp());
        EXPECT(0xed56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed54));
        EXPECT(0x75, gbc.readMem(0xed55));
        // CB 75 01D1
        gbc.setState(0x5ce7, 0x10af, 0x41c0, 0x3121, 0x7aea, 0x9d5f, 0x1, 0x0);
        gbc.writeMem(0x5ce7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x10af, gbc.sp());
        EXPECT(0x5ce9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01D2
        gbc.setState(0x7d7a, 0xfe48, 0x99e0, 0x5882, 0xf435, 0xfe14, 0x0, 0x1);
        gbc.writeMem(0x7d7a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xfe48, gbc.sp());
        EXPECT(0x7d7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01D3
        gbc.setState(0xc68, 0x9dff, 0x9b50, 0x9173, 0x262b, 0xf64f, 0x1, 0x1);
        gbc.writeMem(0xc68, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x9dff, gbc.sp());
        EXPECT(0xc6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01D4
        gbc.setState(0xd9ee, 0xea65, 0x3de0, 0x5acc, 0x580a, 0xf9fe, 0x1, 0x0);
        gbc.writeMem(0xd9ee, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xea65, gbc.sp());
        EXPECT(0xd9f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9ee));
        EXPECT(0x75, gbc.readMem(0xd9ef));
        // CB 75 01D5
        gbc.setState(0x6b5b, 0xb785, 0xbed0, 0x690e, 0xdd5e, 0x73a0, 0x1, 0x1);
        gbc.writeMem(0x6b5b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xb785, gbc.sp());
        EXPECT(0x6b5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01D6
        gbc.setState(0x88eb, 0x91b3, 0x9950, 0x395c, 0x9a9d, 0xf638, 0x1, 0x0);
        gbc.writeMem(0x88eb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x91b3, gbc.sp());
        EXPECT(0x88ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88eb));
        EXPECT(0x75, gbc.readMem(0x88ec));
        // CB 75 01D7
        gbc.setState(0x6547, 0xe010, 0x6e10, 0xc521, 0x29fe, 0xb8e1, 0x1, 0x0);
        gbc.writeMem(0x6547, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xe010, gbc.sp());
        EXPECT(0x6549, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01D8
        gbc.setState(0x42b, 0xb1c0, 0xf5e0, 0x230d, 0x28a1, 0x2e61, 0x0, 0x0);
        gbc.writeMem(0x42b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xb1c0, gbc.sp());
        EXPECT(0x42d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01D9
        gbc.setState(0x8e38, 0x2c1e, 0x3b10, 0x9099, 0x374b, 0x31bd, 0x1, 0x1);
        gbc.writeMem(0x8e38, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x2c1e, gbc.sp());
        EXPECT(0x8e3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e38));
        EXPECT(0x75, gbc.readMem(0x8e39));
        // CB 75 01DA
        gbc.setState(0xaa68, 0x257e, 0x6820, 0x58f9, 0x4bec, 0xed3b, 0x1, 0x0);
        gbc.writeMem(0xaa68, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x257e, gbc.sp());
        EXPECT(0xaa6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa68));
        EXPECT(0x75, gbc.readMem(0xaa69));
        // CB 75 01DB
        gbc.setState(0x6a99, 0xe7fd, 0xeba0, 0xbe04, 0xe5bf, 0x2de7, 0x0, 0x0);
        gbc.writeMem(0x6a99, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xe7fd, gbc.sp());
        EXPECT(0x6a9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01DC
        gbc.setState(0x4cb6, 0x30a5, 0xa310, 0x719d, 0x5933, 0x5a85, 0x0, 0x1);
        gbc.writeMem(0x4cb6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x30a5, gbc.sp());
        EXPECT(0x4cb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01DD
        gbc.setState(0x76d, 0x5745, 0x2b00, 0x3f04, 0x14da, 0x3402, 0x0, 0x0);
        gbc.writeMem(0x76d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x5745, gbc.sp());
        EXPECT(0x76f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01DE
        gbc.setState(0x4355, 0xb657, 0x86f0, 0xa190, 0x1ac2, 0x6c14, 0x1, 0x0);
        gbc.writeMem(0x4355, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xb657, gbc.sp());
        EXPECT(0x4357, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01DF
        gbc.setState(0x7536, 0xf533, 0x720, 0x512e, 0xa27a, 0x5f30, 0x1, 0x0);
        gbc.writeMem(0x7536, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xf533, gbc.sp());
        EXPECT(0x7538, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01E0
        gbc.setState(0x9420, 0xa749, 0xe4a0, 0xc7bb, 0x29ee, 0x10b4, 0x0, 0x0);
        gbc.writeMem(0x9420, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xa749, gbc.sp());
        EXPECT(0x9422, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9420));
        EXPECT(0x75, gbc.readMem(0x9421));
        // CB 75 01E1
        gbc.setState(0x3bcf, 0xd3c, 0x5fc0, 0xde34, 0xfbdb, 0x26f0, 0x0, 0x0);
        gbc.writeMem(0x3bcf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xd3c, gbc.sp());
        EXPECT(0x3bd1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01E2
        gbc.setState(0x1b35, 0x8a8f, 0x7590, 0x2dbf, 0xb5c0, 0xbcb5, 0x0, 0x1);
        gbc.writeMem(0x1b35, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x8a8f, gbc.sp());
        EXPECT(0x1b37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01E3
        gbc.setState(0x7960, 0xc0b6, 0xbce0, 0x6633, 0x695b, 0xabb4, 0x1, 0x1);
        gbc.writeMem(0x7960, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xc0b6, gbc.sp());
        EXPECT(0x7962, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01E4
        gbc.setState(0xb6e7, 0x7c8b, 0xc480, 0x3e7a, 0xaee2, 0xbf4f, 0x0, 0x0);
        gbc.writeMem(0xb6e7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x7c8b, gbc.sp());
        EXPECT(0xb6e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6e7));
        EXPECT(0x75, gbc.readMem(0xb6e8));
        // CB 75 01E5
        gbc.setState(0x3212, 0x9dca, 0x7ea0, 0xa463, 0xb8dd, 0xd562, 0x1, 0x0);
        gbc.writeMem(0x3212, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x9dca, gbc.sp());
        EXPECT(0x3214, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01E6
        gbc.setState(0xc50, 0x8c5b, 0x79e0, 0x99b0, 0x27aa, 0x505a, 0x1, 0x1);
        gbc.writeMem(0xc50, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x8c5b, gbc.sp());
        EXPECT(0xc52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01E7
        gbc.setState(0xdb58, 0x59c3, 0x2740, 0x8e69, 0xdbdb, 0x677d, 0x1, 0x1);
        gbc.writeMem(0xdb58, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x59c3, gbc.sp());
        EXPECT(0xdb5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb58));
        EXPECT(0x75, gbc.readMem(0xdb59));
        // CB 75 01E8
        gbc.setState(0x9d3c, 0xc05b, 0xd2c0, 0x2a15, 0xd2f5, 0xd37b, 0x0, 0x0);
        gbc.writeMem(0x9d3c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xc05b, gbc.sp());
        EXPECT(0x9d3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d3c));
        EXPECT(0x75, gbc.readMem(0x9d3d));
        // CB 75 01E9
        gbc.setState(0x3d97, 0xc6a5, 0x7810, 0xa7ba, 0xa8a9, 0xaf4d, 0x0, 0x0);
        gbc.writeMem(0x3d97, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xc6a5, gbc.sp());
        EXPECT(0x3d99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01EA
        gbc.setState(0xe8a, 0xfb4e, 0xe0b0, 0x9192, 0x9c92, 0x4cb2, 0x1, 0x0);
        gbc.writeMem(0xe8a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xfb4e, gbc.sp());
        EXPECT(0xe8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01EB
        gbc.setState(0x4d07, 0xfd5, 0xeee0, 0xc3bb, 0xb100, 0x9789, 0x0, 0x0);
        gbc.writeMem(0x4d07, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xfd5, gbc.sp());
        EXPECT(0x4d09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01EC
        gbc.setState(0x125e, 0xadc8, 0xaaf0, 0x4862, 0xb085, 0xfc95, 0x1, 0x0);
        gbc.writeMem(0x125e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xadc8, gbc.sp());
        EXPECT(0x1260, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01ED
        gbc.setState(0x5f98, 0xe260, 0x9410, 0x3cdf, 0x67e5, 0x1efe, 0x0, 0x1);
        gbc.writeMem(0x5f98, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xe260, gbc.sp());
        EXPECT(0x5f9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01EE
        gbc.setState(0xc2cb, 0x98df, 0xf2a0, 0x9321, 0x9e32, 0xc70a, 0x0, 0x1);
        gbc.writeMem(0xc2cb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x98df, gbc.sp());
        EXPECT(0xc2cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2cb));
        EXPECT(0x75, gbc.readMem(0xc2cc));
        // CB 75 01EF
        gbc.setState(0x23b7, 0x3d33, 0x3770, 0x6840, 0xaff8, 0xc487, 0x1, 0x1);
        gbc.writeMem(0x23b7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x3d33, gbc.sp());
        EXPECT(0x23b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01F0
        gbc.setState(0x8998, 0x5a28, 0x1840, 0x2c3d, 0xe20f, 0xefd, 0x0, 0x0);
        gbc.writeMem(0x8998, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x5a28, gbc.sp());
        EXPECT(0x899a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8998));
        EXPECT(0x75, gbc.readMem(0x8999));
        // CB 75 01F1
        gbc.setState(0xe1d1, 0xbe0f, 0x8df0, 0x722a, 0x4a34, 0xc4ea, 0x1, 0x1);
        gbc.writeMem(0xe1d1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xbe0f, gbc.sp());
        EXPECT(0xe1d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1d1));
        EXPECT(0x75, gbc.readMem(0xe1d2));
        // CB 75 01F2
        gbc.setState(0x188b, 0x80c1, 0xdd0, 0xcc20, 0xd333, 0x61ad, 0x0, 0x0);
        gbc.writeMem(0x188b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x80c1, gbc.sp());
        EXPECT(0x188d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01F3
        gbc.setState(0x4eaa, 0x5274, 0x9f70, 0x3469, 0x9703, 0x1485, 0x1, 0x0);
        gbc.writeMem(0x4eaa, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x5274, gbc.sp());
        EXPECT(0x4eac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01F4
        gbc.setState(0x27f5, 0x79f3, 0x2a70, 0x65c9, 0x5be7, 0x1b52, 0x1, 0x0);
        gbc.writeMem(0x27f5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x79f3, gbc.sp());
        EXPECT(0x27f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01F5
        gbc.setState(0xd4af, 0xd4d1, 0xa5f0, 0x91be, 0x99b6, 0xbab4, 0x1, 0x1);
        gbc.writeMem(0xd4af, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xd4d1, gbc.sp());
        EXPECT(0xd4b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4af));
        EXPECT(0x75, gbc.readMem(0xd4b0));
        // CB 75 01F6
        gbc.setState(0x602c, 0xb1d1, 0xb1e0, 0xe9a1, 0xfe93, 0x685a, 0x0, 0x1);
        gbc.writeMem(0x602c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xb1d1, gbc.sp());
        EXPECT(0x602e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01F7
        gbc.setState(0x88d5, 0xc151, 0x4f20, 0x7b71, 0xe6c0, 0x642a, 0x1, 0x0);
        gbc.writeMem(0x88d5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xc151, gbc.sp());
        EXPECT(0x88d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88d5));
        EXPECT(0x75, gbc.readMem(0x88d6));
        // CB 75 01F8
        gbc.setState(0x3089, 0x152f, 0xf00, 0x65bc, 0x1ddc, 0xf2cb, 0x1, 0x1);
        gbc.writeMem(0x3089, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x152f, gbc.sp());
        EXPECT(0x308b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01F9
        gbc.setState(0x6b3b, 0x77f6, 0x790, 0x47e3, 0xbc2a, 0xe1da, 0x1, 0x1);
        gbc.writeMem(0x6b3b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x77f6, gbc.sp());
        EXPECT(0x6b3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01FA
        gbc.setState(0xca36, 0x45a2, 0x3180, 0x6acf, 0xfc20, 0xad43, 0x1, 0x0);
        gbc.writeMem(0xca36, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x45a2, gbc.sp());
        EXPECT(0xca38, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca36));
        EXPECT(0x75, gbc.readMem(0xca37));
        // CB 75 01FB
        gbc.setState(0x9735, 0xf46f, 0x7d10, 0xf082, 0xda21, 0x3876, 0x1, 0x1);
        gbc.writeMem(0x9735, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xf46f, gbc.sp());
        EXPECT(0x9737, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9735));
        EXPECT(0x75, gbc.readMem(0x9736));
        // CB 75 01FC
        gbc.setState(0x56f9, 0x8aef, 0xb0f0, 0x874a, 0xf193, 0x717d, 0x1, 0x0);
        gbc.writeMem(0x56f9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x8aef, gbc.sp());
        EXPECT(0x56fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01FD
        gbc.setState(0x4cb2, 0x29b0, 0x58c0, 0x6895, 0xb0a6, 0x6793, 0x0, 0x0);
        gbc.writeMem(0x4cb2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x29b0, gbc.sp());
        EXPECT(0x4cb4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 01FE
        gbc.setState(0x1572, 0xd1d5, 0x3610, 0x5c68, 0x27eb, 0x7576, 0x0, 0x0);
        gbc.writeMem(0x1572, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xd1d5, gbc.sp());
        EXPECT(0x1574, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 01FF
        gbc.setState(0x16be, 0xfaf7, 0x5f20, 0x5efe, 0xf507, 0x28b4, 0x0, 0x0);
        gbc.writeMem(0x16be, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xfaf7, gbc.sp());
        EXPECT(0x16c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0200
        gbc.setState(0x8f6a, 0xb372, 0xf7e0, 0x76fb, 0x91db, 0x1c8a, 0x0, 0x0);
        gbc.writeMem(0x8f6a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xb372, gbc.sp());
        EXPECT(0x8f6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f6a));
        EXPECT(0x75, gbc.readMem(0x8f6b));
        // CB 75 0201
        gbc.setState(0xe294, 0x9f68, 0xb6d0, 0x5cc8, 0xb782, 0x5e5c, 0x0, 0x1);
        gbc.writeMem(0xe294, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x9f68, gbc.sp());
        EXPECT(0xe296, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe294));
        EXPECT(0x75, gbc.readMem(0xe295));
        // CB 75 0202
        gbc.setState(0x6832, 0x206c, 0xa910, 0x820d, 0xca23, 0xdf9c, 0x1, 0x0);
        gbc.writeMem(0x6832, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x206c, gbc.sp());
        EXPECT(0x6834, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0203
        gbc.setState(0x5988, 0x559c, 0x35c0, 0xd7b4, 0x3805, 0xf344, 0x1, 0x0);
        gbc.writeMem(0x5988, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x559c, gbc.sp());
        EXPECT(0x598a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0204
        gbc.setState(0xc0eb, 0x7421, 0x7180, 0xa24, 0xf312, 0x2f94, 0x1, 0x1);
        gbc.writeMem(0xc0eb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x7421, gbc.sp());
        EXPECT(0xc0ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0eb));
        EXPECT(0x75, gbc.readMem(0xc0ec));
        // CB 75 0205
        gbc.setState(0xc423, 0x5d31, 0xe080, 0x37fd, 0x946, 0xadb8, 0x1, 0x0);
        gbc.writeMem(0xc423, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x5d31, gbc.sp());
        EXPECT(0xc425, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc423));
        EXPECT(0x75, gbc.readMem(0xc424));
        // CB 75 0206
        gbc.setState(0xb95b, 0x1a69, 0xb850, 0x839d, 0x32ed, 0xc1ce, 0x0, 0x1);
        gbc.writeMem(0xb95b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x1a69, gbc.sp());
        EXPECT(0xb95d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb95b));
        EXPECT(0x75, gbc.readMem(0xb95c));
        // CB 75 0207
        gbc.setState(0x8456, 0xf14a, 0xa450, 0xa855, 0x4d27, 0x36d9, 0x1, 0x0);
        gbc.writeMem(0x8456, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xf14a, gbc.sp());
        EXPECT(0x8458, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8456));
        EXPECT(0x75, gbc.readMem(0x8457));
        // CB 75 0208
        gbc.setState(0x2702, 0x2201, 0xb330, 0x3d55, 0xbc74, 0xb37c, 0x0, 0x0);
        gbc.writeMem(0x2702, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x2201, gbc.sp());
        EXPECT(0x2704, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0209
        gbc.setState(0x4342, 0xf92c, 0x3ce0, 0x6ae0, 0x12c4, 0x34db, 0x1, 0x1);
        gbc.writeMem(0x4342, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xf92c, gbc.sp());
        EXPECT(0x4344, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 020A
        gbc.setState(0x129e, 0x23eb, 0x3980, 0x82c1, 0x53be, 0x2549, 0x0, 0x1);
        gbc.writeMem(0x129e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x23eb, gbc.sp());
        EXPECT(0x12a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 020B
        gbc.setState(0x5854, 0xb80f, 0x5000, 0x6f17, 0x2d55, 0xc056, 0x0, 0x1);
        gbc.writeMem(0x5854, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xb80f, gbc.sp());
        EXPECT(0x5856, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 020C
        gbc.setState(0xc82a, 0xbdd2, 0xacf0, 0x7de3, 0xe3bf, 0xcd83, 0x0, 0x1);
        gbc.writeMem(0xc82a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xbdd2, gbc.sp());
        EXPECT(0xc82c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc82a));
        EXPECT(0x75, gbc.readMem(0xc82b));
        // CB 75 020D
        gbc.setState(0x16ec, 0xec4f, 0x5cf0, 0xa6a6, 0x1d41, 0xf201, 0x1, 0x1);
        gbc.writeMem(0x16ec, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xec4f, gbc.sp());
        EXPECT(0x16ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 020E
        gbc.setState(0x3f76, 0x5c60, 0x7f90, 0x6019, 0x8f5e, 0xf525, 0x1, 0x1);
        gbc.writeMem(0x3f76, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x5c60, gbc.sp());
        EXPECT(0x3f78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 020F
        gbc.setState(0x671a, 0x96fc, 0x78b0, 0x2b06, 0x540c, 0xab9a, 0x1, 0x1);
        gbc.writeMem(0x671a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x96fc, gbc.sp());
        EXPECT(0x671c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0210
        gbc.setState(0x4b50, 0x811, 0x18e0, 0x8238, 0xf88e, 0x7b94, 0x0, 0x1);
        gbc.writeMem(0x4b50, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x811, gbc.sp());
        EXPECT(0x4b52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0211
        gbc.setState(0x303d, 0x70a9, 0xc6e0, 0x4707, 0x231c, 0x5ca4, 0x1, 0x1);
        gbc.writeMem(0x303d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x70a9, gbc.sp());
        EXPECT(0x303f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0212
        gbc.setState(0x7146, 0xe5f3, 0x3eb0, 0xa0c6, 0xeb9f, 0x4526, 0x0, 0x0);
        gbc.writeMem(0x7146, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xe5f3, gbc.sp());
        EXPECT(0x7148, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0213
        gbc.setState(0x4628, 0xd136, 0xd290, 0xa955, 0x5395, 0xfe08, 0x1, 0x0);
        gbc.writeMem(0x4628, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xd136, gbc.sp());
        EXPECT(0x462a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0214
        gbc.setState(0x78f1, 0x2e0, 0x1000, 0x132e, 0xfcb8, 0x6950, 0x1, 0x1);
        gbc.writeMem(0x78f1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x2e0, gbc.sp());
        EXPECT(0x78f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0215
        gbc.setState(0x1e4c, 0x599e, 0x620, 0xec57, 0x4fb1, 0x3c34, 0x0, 0x0);
        gbc.writeMem(0x1e4c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x599e, gbc.sp());
        EXPECT(0x1e4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0216
        gbc.setState(0xbb0d, 0x7402, 0x5010, 0x9ccd, 0x24fd, 0x3e68, 0x0, 0x0);
        gbc.writeMem(0xbb0d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x7402, gbc.sp());
        EXPECT(0xbb0f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb0d));
        EXPECT(0x75, gbc.readMem(0xbb0e));
        // CB 75 0217
        gbc.setState(0x4824, 0x2a47, 0xf320, 0x6cdc, 0xc4eb, 0x4ce1, 0x0, 0x0);
        gbc.writeMem(0x4824, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x2a47, gbc.sp());
        EXPECT(0x4826, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0219
        gbc.setState(0xc275, 0x280d, 0x46c0, 0x164b, 0x8cc0, 0x5dbb, 0x1, 0x0);
        gbc.writeMem(0xc275, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x280d, gbc.sp());
        EXPECT(0xc277, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc275));
        EXPECT(0x75, gbc.readMem(0xc276));
        // CB 75 021A
        gbc.setState(0xc03b, 0x1975, 0x7940, 0xa6a8, 0x3776, 0xe20d, 0x0, 0x0);
        gbc.writeMem(0xc03b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x1975, gbc.sp());
        EXPECT(0xc03d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc03b));
        EXPECT(0x75, gbc.readMem(0xc03c));
        // CB 75 021B
        gbc.setState(0xaed6, 0x2435, 0xff30, 0xcb38, 0xdb84, 0x8ca1, 0x0, 0x1);
        gbc.writeMem(0xaed6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x2435, gbc.sp());
        EXPECT(0xaed8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaed6));
        EXPECT(0x75, gbc.readMem(0xaed7));
        // CB 75 021C
        gbc.setState(0x236a, 0x8dae, 0x9f30, 0x9c11, 0x9f68, 0x35a6, 0x1, 0x1);
        gbc.writeMem(0x236a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x8dae, gbc.sp());
        EXPECT(0x236c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 021D
        gbc.setState(0xc6cc, 0xbc4e, 0x9620, 0x9c81, 0x739f, 0xf869, 0x1, 0x0);
        gbc.writeMem(0xc6cc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xbc4e, gbc.sp());
        EXPECT(0xc6ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6cc));
        EXPECT(0x75, gbc.readMem(0xc6cd));
        // CB 75 021E
        gbc.setState(0xbead, 0x5b45, 0x9590, 0x82f9, 0xb2b5, 0xfeeb, 0x1, 0x0);
        gbc.writeMem(0xbead, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x5b45, gbc.sp());
        EXPECT(0xbeaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbead));
        EXPECT(0x75, gbc.readMem(0xbeae));
        // CB 75 021F
        gbc.setState(0x77e0, 0xb711, 0x8f10, 0x498a, 0xbfe7, 0xda7a, 0x0, 0x0);
        gbc.writeMem(0x77e0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xb711, gbc.sp());
        EXPECT(0x77e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0220
        gbc.setState(0x34b4, 0x2b2e, 0x4500, 0x1de4, 0xb77e, 0x1daf, 0x0, 0x1);
        gbc.writeMem(0x34b4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x2b2e, gbc.sp());
        EXPECT(0x34b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0221
        gbc.setState(0x873f, 0xddb3, 0x61c0, 0xce07, 0xf47a, 0xf867, 0x0, 0x0);
        gbc.writeMem(0x873f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xddb3, gbc.sp());
        EXPECT(0x8741, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x873f));
        EXPECT(0x75, gbc.readMem(0x8740));
        // CB 75 0222
        gbc.setState(0x1825, 0x661b, 0x8e0, 0x5712, 0xff1c, 0xe661, 0x1, 0x0);
        gbc.writeMem(0x1825, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x661b, gbc.sp());
        EXPECT(0x1827, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0223
        gbc.setState(0xd21e, 0xe0c5, 0x9910, 0xf7fa, 0x1b54, 0xea9d, 0x0, 0x0);
        gbc.writeMem(0xd21e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xe0c5, gbc.sp());
        EXPECT(0xd220, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd21e));
        EXPECT(0x75, gbc.readMem(0xd21f));
        // CB 75 0224
        gbc.setState(0x55f, 0x5c95, 0xba40, 0xe40c, 0x18b2, 0xbbec, 0x0, 0x1);
        gbc.writeMem(0x55f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x5c95, gbc.sp());
        EXPECT(0x561, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0225
        gbc.setState(0x7a86, 0xcc15, 0x1cb0, 0xc28, 0x1a57, 0xa718, 0x0, 0x0);
        gbc.writeMem(0x7a86, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xcc15, gbc.sp());
        EXPECT(0x7a88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0226
        gbc.setState(0xca4a, 0xf2b2, 0xcdd0, 0x25d1, 0x7f28, 0xfde, 0x1, 0x1);
        gbc.writeMem(0xca4a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xf2b2, gbc.sp());
        EXPECT(0xca4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca4a));
        EXPECT(0x75, gbc.readMem(0xca4b));
        // CB 75 0227
        gbc.setState(0x6ca1, 0x7a4c, 0xd430, 0x9cc5, 0xae2c, 0x6a6d, 0x0, 0x1);
        gbc.writeMem(0x6ca1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x7a4c, gbc.sp());
        EXPECT(0x6ca3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0228
        gbc.setState(0x1dd4, 0xf52, 0x1f60, 0x9cd0, 0xc531, 0x8945, 0x0, 0x0);
        gbc.writeMem(0x1dd4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xf52, gbc.sp());
        EXPECT(0x1dd6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0229
        gbc.setState(0x8c21, 0x244a, 0xbeb0, 0x2431, 0xe2da, 0x3140, 0x1, 0x0);
        gbc.writeMem(0x8c21, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x244a, gbc.sp());
        EXPECT(0x8c23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c21));
        EXPECT(0x75, gbc.readMem(0x8c22));
        // CB 75 022A
        gbc.setState(0xc437, 0x75b8, 0xc6f0, 0xc1a9, 0xa84d, 0xe49c, 0x0, 0x0);
        gbc.writeMem(0xc437, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x75b8, gbc.sp());
        EXPECT(0xc439, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc437));
        EXPECT(0x75, gbc.readMem(0xc438));
        // CB 75 022B
        gbc.setState(0xc3a8, 0x237d, 0xe80, 0xd0a7, 0x2b84, 0x7bd4, 0x0, 0x1);
        gbc.writeMem(0xc3a8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x237d, gbc.sp());
        EXPECT(0xc3aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3a8));
        EXPECT(0x75, gbc.readMem(0xc3a9));
        // CB 75 022C
        gbc.setState(0x828a, 0xa4fc, 0xcec0, 0x4273, 0x6a39, 0x8ce1, 0x1, 0x1);
        gbc.writeMem(0x828a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xa4fc, gbc.sp());
        EXPECT(0x828c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x828a));
        EXPECT(0x75, gbc.readMem(0x828b));
        // CB 75 022D
        gbc.setState(0xacef, 0x6fa2, 0xb390, 0x9cbf, 0x48a1, 0xbdc, 0x0, 0x0);
        gbc.writeMem(0xacef, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x6fa2, gbc.sp());
        EXPECT(0xacf1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacef));
        EXPECT(0x75, gbc.readMem(0xacf0));
        // CB 75 022E
        gbc.setState(0x6d7f, 0x68c9, 0xeb60, 0x9e5, 0xff90, 0x419a, 0x1, 0x0);
        gbc.writeMem(0x6d7f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x68c9, gbc.sp());
        EXPECT(0x6d81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 022F
        gbc.setState(0xac5e, 0xefd3, 0xdb00, 0xd510, 0x3648, 0xea5b, 0x1, 0x1);
        gbc.writeMem(0xac5e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xefd3, gbc.sp());
        EXPECT(0xac60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac5e));
        EXPECT(0x75, gbc.readMem(0xac5f));
        // CB 75 0230
        gbc.setState(0x97f2, 0x1b18, 0xe3f0, 0xa795, 0x2955, 0x5af1, 0x1, 0x1);
        gbc.writeMem(0x97f2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x1b18, gbc.sp());
        EXPECT(0x97f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97f2));
        EXPECT(0x75, gbc.readMem(0x97f3));
        // CB 75 0231
        gbc.setState(0xeddd, 0x260f, 0x12b0, 0x643a, 0xf90c, 0xf91a, 0x0, 0x1);
        gbc.writeMem(0xeddd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x260f, gbc.sp());
        EXPECT(0xeddf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeddd));
        EXPECT(0x75, gbc.readMem(0xedde));
        // CB 75 0232
        gbc.setState(0x7176, 0x6db5, 0xcc60, 0x4d5, 0xc998, 0xabc1, 0x0, 0x0);
        gbc.writeMem(0x7176, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x6db5, gbc.sp());
        EXPECT(0x7178, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0233
        gbc.setState(0xc2fe, 0xa351, 0x6380, 0xbcc9, 0x3906, 0xe2c5, 0x1, 0x1);
        gbc.writeMem(0xc2fe, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xa351, gbc.sp());
        EXPECT(0xc300, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2fe));
        EXPECT(0x75, gbc.readMem(0xc2ff));
        // CB 75 0234
        gbc.setState(0x5b57, 0xea7f, 0xb860, 0x984, 0x7d02, 0x8498, 0x0, 0x0);
        gbc.writeMem(0x5b57, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xea7f, gbc.sp());
        EXPECT(0x5b59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0235
        gbc.setState(0x84f1, 0xf459, 0x7820, 0x2a96, 0x4db0, 0x825, 0x0, 0x1);
        gbc.writeMem(0x84f1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xf459, gbc.sp());
        EXPECT(0x84f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84f1));
        EXPECT(0x75, gbc.readMem(0x84f2));
        // CB 75 0236
        gbc.setState(0x4680, 0xc8e5, 0xace0, 0xfac3, 0x48ad, 0xe5c8, 0x0, 0x0);
        gbc.writeMem(0x4680, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xc8e5, gbc.sp());
        EXPECT(0x4682, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0237
        gbc.setState(0xf4d, 0x5bf2, 0x690, 0x435a, 0x1aa2, 0x432f, 0x1, 0x0);
        gbc.writeMem(0xf4d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x5bf2, gbc.sp());
        EXPECT(0xf4f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0238
        gbc.setState(0xc5c6, 0x1e7f, 0x39b0, 0x426, 0xf58f, 0x5a65, 0x0, 0x0);
        gbc.writeMem(0xc5c6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x1e7f, gbc.sp());
        EXPECT(0xc5c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5c6));
        EXPECT(0x75, gbc.readMem(0xc5c7));
        // CB 75 0239
        gbc.setState(0x39ed, 0x12af, 0xef80, 0x7ef2, 0xd493, 0x6fd2, 0x0, 0x0);
        gbc.writeMem(0x39ed, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x12af, gbc.sp());
        EXPECT(0x39ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 023A
        gbc.setState(0xea70, 0x609f, 0x28c0, 0xe053, 0x8b79, 0x64be, 0x1, 0x1);
        gbc.writeMem(0xea70, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x609f, gbc.sp());
        EXPECT(0xea72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea70));
        EXPECT(0x75, gbc.readMem(0xea71));
        // CB 75 023B
        gbc.setState(0x669d, 0xfb8b, 0x8710, 0x638a, 0xc39a, 0xce3c, 0x0, 0x0);
        gbc.writeMem(0x669d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xfb8b, gbc.sp());
        EXPECT(0x669f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 023C
        gbc.setState(0xdd6e, 0xbf4, 0x7d90, 0x5160, 0x9a3, 0xcdf4, 0x1, 0x1);
        gbc.writeMem(0xdd6e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xbf4, gbc.sp());
        EXPECT(0xdd70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd6e));
        EXPECT(0x75, gbc.readMem(0xdd6f));
        // CB 75 023D
        gbc.setState(0x5c3e, 0x9877, 0x2990, 0x1e28, 0x4acf, 0x5253, 0x1, 0x0);
        gbc.writeMem(0x5c3e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x9877, gbc.sp());
        EXPECT(0x5c40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 023E
        gbc.setState(0x809d, 0xc356, 0x3280, 0x7bed, 0x3698, 0x78ec, 0x0, 0x1);
        gbc.writeMem(0x809d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xc356, gbc.sp());
        EXPECT(0x809f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x809d));
        EXPECT(0x75, gbc.readMem(0x809e));
        // CB 75 023F
        gbc.setState(0xdf24, 0x9794, 0x67b0, 0x1cc, 0x1f78, 0x7183, 0x1, 0x0);
        gbc.writeMem(0xdf24, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x9794, gbc.sp());
        EXPECT(0xdf26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf24));
        EXPECT(0x75, gbc.readMem(0xdf25));
        // CB 75 0240
        gbc.setState(0x3687, 0x503c, 0xe060, 0xa3dc, 0x516b, 0x54ce, 0x1, 0x1);
        gbc.writeMem(0x3687, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x503c, gbc.sp());
        EXPECT(0x3689, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0241
        gbc.setState(0xddac, 0xcfb3, 0x6b20, 0xfa57, 0x7844, 0x1692, 0x1, 0x1);
        gbc.writeMem(0xddac, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xcfb3, gbc.sp());
        EXPECT(0xddae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddac));
        EXPECT(0x75, gbc.readMem(0xddad));
        // CB 75 0242
        gbc.setState(0xa9f2, 0xb1a4, 0x6ec0, 0xba54, 0xc70f, 0x1747, 0x0, 0x0);
        gbc.writeMem(0xa9f2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xb1a4, gbc.sp());
        EXPECT(0xa9f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9f2));
        EXPECT(0x75, gbc.readMem(0xa9f3));
        // CB 75 0243
        gbc.setState(0x5b9c, 0xf546, 0x6aa0, 0x2968, 0x6ff3, 0xcc76, 0x1, 0x0);
        gbc.writeMem(0x5b9c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xf546, gbc.sp());
        EXPECT(0x5b9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0244
        gbc.setState(0x90a3, 0x1c5a, 0xa0e0, 0x69f9, 0x4e17, 0xb192, 0x1, 0x1);
        gbc.writeMem(0x90a3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x1c5a, gbc.sp());
        EXPECT(0x90a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90a3));
        EXPECT(0x75, gbc.readMem(0x90a4));
        // CB 75 0245
        gbc.setState(0x6ab6, 0xf0f7, 0x1fe0, 0x4e73, 0x321f, 0x8f86, 0x0, 0x1);
        gbc.writeMem(0x6ab6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xf0f7, gbc.sp());
        EXPECT(0x6ab8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0246
        gbc.setState(0x4847, 0x2adf, 0xa7f0, 0x8140, 0xc576, 0x3886, 0x1, 0x0);
        gbc.writeMem(0x4847, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x2adf, gbc.sp());
        EXPECT(0x4849, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0247
        gbc.setState(0x7c1b, 0xe71b, 0x3470, 0xc342, 0x155e, 0xc5e2, 0x1, 0x1);
        gbc.writeMem(0x7c1b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xe71b, gbc.sp());
        EXPECT(0x7c1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0248
        gbc.setState(0xd5ec, 0x5bb7, 0x8d40, 0x31cb, 0xbe17, 0x5386, 0x0, 0x0);
        gbc.writeMem(0xd5ec, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x5bb7, gbc.sp());
        EXPECT(0xd5ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5ec));
        EXPECT(0x75, gbc.readMem(0xd5ed));
        // CB 75 0249
        gbc.setState(0xac7e, 0xe0fe, 0x740, 0xd665, 0xadbc, 0xf5c1, 0x1, 0x0);
        gbc.writeMem(0xac7e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xe0fe, gbc.sp());
        EXPECT(0xac80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac7e));
        EXPECT(0x75, gbc.readMem(0xac7f));
        // CB 75 024A
        gbc.setState(0xd0e3, 0x329d, 0x8460, 0x2031, 0x649e, 0x13da, 0x1, 0x0);
        gbc.writeMem(0xd0e3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x329d, gbc.sp());
        EXPECT(0xd0e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0e3));
        EXPECT(0x75, gbc.readMem(0xd0e4));
        // CB 75 024B
        gbc.setState(0x92d2, 0x26d7, 0xb100, 0xc8c6, 0xa1e8, 0x24f8, 0x1, 0x0);
        gbc.writeMem(0x92d2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x26d7, gbc.sp());
        EXPECT(0x92d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92d2));
        EXPECT(0x75, gbc.readMem(0x92d3));
        // CB 75 024C
        gbc.setState(0xc2c3, 0x9be0, 0x9be0, 0x6ee0, 0x4f1, 0x8190, 0x0, 0x1);
        gbc.writeMem(0xc2c3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x9be0, gbc.sp());
        EXPECT(0xc2c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2c3));
        EXPECT(0x75, gbc.readMem(0xc2c4));
        // CB 75 024E
        gbc.setState(0x3e5b, 0x1000, 0xb750, 0x852f, 0xd90d, 0x9965, 0x0, 0x0);
        gbc.writeMem(0x3e5b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x1000, gbc.sp());
        EXPECT(0x3e5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 024F
        gbc.setState(0xe082, 0x993b, 0xd790, 0x68b7, 0x2b4d, 0x5ecf, 0x0, 0x1);
        gbc.writeMem(0xe082, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x993b, gbc.sp());
        EXPECT(0xe084, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe082));
        EXPECT(0x75, gbc.readMem(0xe083));
        // CB 75 0250
        gbc.setState(0xed49, 0x2153, 0xad80, 0xf74c, 0xda84, 0x7bca, 0x1, 0x0);
        gbc.writeMem(0xed49, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x2153, gbc.sp());
        EXPECT(0xed4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed49));
        EXPECT(0x75, gbc.readMem(0xed4a));
        // CB 75 0251
        gbc.setState(0x64f5, 0x1290, 0xa610, 0x4759, 0x25fe, 0xd9d2, 0x1, 0x1);
        gbc.writeMem(0x64f5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x1290, gbc.sp());
        EXPECT(0x64f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0252
        gbc.setState(0x901b, 0x958c, 0x98d0, 0xd2f1, 0x8e8, 0x1666, 0x0, 0x1);
        gbc.writeMem(0x901b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x958c, gbc.sp());
        EXPECT(0x901d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x901b));
        EXPECT(0x75, gbc.readMem(0x901c));
        // CB 75 0253
        gbc.setState(0x4e41, 0xaa62, 0x3310, 0xbb48, 0xee7b, 0x51df, 0x1, 0x0);
        gbc.writeMem(0x4e41, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xaa62, gbc.sp());
        EXPECT(0x4e43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0254
        gbc.setState(0x3eb, 0x5c9c, 0x35f0, 0x56e3, 0x765b, 0x13c, 0x1, 0x0);
        gbc.writeMem(0x3eb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x5c9c, gbc.sp());
        EXPECT(0x3ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0255
        gbc.setState(0x7736, 0xbda9, 0x1320, 0xf2e8, 0x7e38, 0xe1bc, 0x1, 0x1);
        gbc.writeMem(0x7736, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xbda9, gbc.sp());
        EXPECT(0x7738, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0256
        gbc.setState(0x80d7, 0x601b, 0x4980, 0x20b7, 0x88ae, 0x7d4f, 0x1, 0x1);
        gbc.writeMem(0x80d7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x601b, gbc.sp());
        EXPECT(0x80d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80d7));
        EXPECT(0x75, gbc.readMem(0x80d8));
        // CB 75 0257
        gbc.setState(0x636f, 0x1011, 0x9b80, 0x4090, 0x591b, 0xb134, 0x1, 0x0);
        gbc.writeMem(0x636f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x1011, gbc.sp());
        EXPECT(0x6371, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0258
        gbc.setState(0x2eac, 0xa876, 0xf150, 0x68c7, 0xbfec, 0xbd18, 0x0, 0x1);
        gbc.writeMem(0x2eac, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xa876, gbc.sp());
        EXPECT(0x2eae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0259
        gbc.setState(0x7bda, 0xae42, 0xfff0, 0x43ad, 0x2bbc, 0x6b61, 0x0, 0x1);
        gbc.writeMem(0x7bda, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xae42, gbc.sp());
        EXPECT(0x7bdc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 025B
        gbc.setState(0x387e, 0x11ed, 0x82c0, 0x9729, 0x7104, 0x54d7, 0x1, 0x1);
        gbc.writeMem(0x387e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x11ed, gbc.sp());
        EXPECT(0x3880, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 025C
        gbc.setState(0x4417, 0x900a, 0xdc0, 0x5bbc, 0xa255, 0x8c21, 0x0, 0x1);
        gbc.writeMem(0x4417, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x900a, gbc.sp());
        EXPECT(0x4419, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 025E
        gbc.setState(0xc201, 0x54be, 0x46b0, 0x25c5, 0x91f3, 0xc8f6, 0x0, 0x1);
        gbc.writeMem(0xc201, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x54be, gbc.sp());
        EXPECT(0xc203, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc201));
        EXPECT(0x75, gbc.readMem(0xc202));
        // CB 75 025F
        gbc.setState(0x57bd, 0x1bf8, 0x3970, 0x6bff, 0xd65e, 0x7c76, 0x0, 0x0);
        gbc.writeMem(0x57bd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x1bf8, gbc.sp());
        EXPECT(0x57bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0260
        gbc.setState(0x4360, 0x5cfa, 0xa9b0, 0x3b9a, 0xae91, 0xdc8b, 0x1, 0x1);
        gbc.writeMem(0x4360, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x5cfa, gbc.sp());
        EXPECT(0x4362, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0261
        gbc.setState(0xaa8f, 0x6c00, 0x93d0, 0xc10b, 0xf344, 0xd1b5, 0x1, 0x1);
        gbc.writeMem(0xaa8f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x6c00, gbc.sp());
        EXPECT(0xaa91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa8f));
        EXPECT(0x75, gbc.readMem(0xaa90));
        // CB 75 0262
        gbc.setState(0xd5e7, 0x259b, 0xc7c0, 0xf1bc, 0xcf34, 0xa129, 0x0, 0x1);
        gbc.writeMem(0xd5e7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x259b, gbc.sp());
        EXPECT(0xd5e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5e7));
        EXPECT(0x75, gbc.readMem(0xd5e8));
        // CB 75 0263
        gbc.setState(0x9331, 0x6263, 0x7ac0, 0xcab4, 0x7ca9, 0x2c61, 0x1, 0x0);
        gbc.writeMem(0x9331, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x6263, gbc.sp());
        EXPECT(0x9333, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9331));
        EXPECT(0x75, gbc.readMem(0x9332));
        // CB 75 0264
        gbc.setState(0xb581, 0xe687, 0xb990, 0xd906, 0x5cc, 0xec57, 0x1, 0x0);
        gbc.writeMem(0xb581, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xe687, gbc.sp());
        EXPECT(0xb583, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb581));
        EXPECT(0x75, gbc.readMem(0xb582));
        // CB 75 0265
        gbc.setState(0x60d3, 0xa153, 0x8c10, 0x5ac6, 0x863f, 0xdb99, 0x0, 0x0);
        gbc.writeMem(0x60d3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xa153, gbc.sp());
        EXPECT(0x60d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0266
        gbc.setState(0x6d28, 0x5a39, 0xf4f0, 0x8260, 0x7a6b, 0x4cc5, 0x1, 0x1);
        gbc.writeMem(0x6d28, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x5a39, gbc.sp());
        EXPECT(0x6d2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0267
        gbc.setState(0x7cb6, 0x27d2, 0x5c20, 0xb710, 0x4e93, 0x221f, 0x1, 0x0);
        gbc.writeMem(0x7cb6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x27d2, gbc.sp());
        EXPECT(0x7cb8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0268
        gbc.setState(0x23c6, 0xbdc5, 0x86d0, 0x2ab7, 0xbdc5, 0x9b92, 0x1, 0x0);
        gbc.writeMem(0x23c6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xbdc5, gbc.sp());
        EXPECT(0x23c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0269
        gbc.setState(0x269, 0x408d, 0x7f0, 0x93a8, 0x570b, 0x1aaf, 0x0, 0x0);
        gbc.writeMem(0x269, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x408d, gbc.sp());
        EXPECT(0x26b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 026A
        gbc.setState(0xd36e, 0xfc31, 0xff30, 0xe168, 0xd1b0, 0x5a6c, 0x0, 0x0);
        gbc.writeMem(0xd36e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xfc31, gbc.sp());
        EXPECT(0xd370, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd36e));
        EXPECT(0x75, gbc.readMem(0xd36f));
        // CB 75 026B
        gbc.setState(0x850a, 0xfc3c, 0x7e0, 0xbbab, 0xa692, 0xc4ee, 0x1, 0x0);
        gbc.writeMem(0x850a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xfc3c, gbc.sp());
        EXPECT(0x850c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x850a));
        EXPECT(0x75, gbc.readMem(0x850b));
        // CB 75 026D
        gbc.setState(0x531d, 0x4dde, 0x1be0, 0xfb46, 0x20b0, 0xdb03, 0x1, 0x1);
        gbc.writeMem(0x531d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x4dde, gbc.sp());
        EXPECT(0x531f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 026E
        gbc.setState(0x16e3, 0x115f, 0xb8e0, 0xaaaf, 0xd002, 0xa658, 0x1, 0x1);
        gbc.writeMem(0x16e3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x115f, gbc.sp());
        EXPECT(0x16e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 026F
        gbc.setState(0x7183, 0xbfbf, 0x17e0, 0x3989, 0x576f, 0x1fb1, 0x0, 0x1);
        gbc.writeMem(0x7183, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xbfbf, gbc.sp());
        EXPECT(0x7185, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0270
        gbc.setState(0x42d8, 0xe0b8, 0x7d80, 0xd803, 0x58a4, 0xeca6, 0x0, 0x0);
        gbc.writeMem(0x42d8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xe0b8, gbc.sp());
        EXPECT(0x42da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0271
        gbc.setState(0x3dc7, 0x7190, 0x3e0, 0x865, 0xecb7, 0xcf14, 0x1, 0x0);
        gbc.writeMem(0x3dc7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x7190, gbc.sp());
        EXPECT(0x3dc9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0272
        gbc.setState(0x8c86, 0x2d8, 0xd890, 0x2052, 0xb036, 0x82c2, 0x0, 0x0);
        gbc.writeMem(0x8c86, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x2d8, gbc.sp());
        EXPECT(0x8c88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c86));
        EXPECT(0x75, gbc.readMem(0x8c87));
        // CB 75 0273
        gbc.setState(0xc2ab, 0x77f, 0x7ce0, 0xada0, 0xda11, 0x2ae9, 0x1, 0x1);
        gbc.writeMem(0xc2ab, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x77f, gbc.sp());
        EXPECT(0xc2ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2ab));
        EXPECT(0x75, gbc.readMem(0xc2ac));
        // CB 75 0274
        gbc.setState(0x5fa0, 0xad02, 0x5650, 0x98ab, 0xfee1, 0xc26d, 0x1, 0x0);
        gbc.writeMem(0x5fa0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xad02, gbc.sp());
        EXPECT(0x5fa2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0275
        gbc.setState(0x328f, 0x82f9, 0x4f60, 0xd8f3, 0x7300, 0x5343, 0x1, 0x1);
        gbc.writeMem(0x328f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x82f9, gbc.sp());
        EXPECT(0x3291, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0276
        gbc.setState(0xca29, 0xaf21, 0x620, 0x6e9a, 0xc657, 0x3221, 0x1, 0x0);
        gbc.writeMem(0xca29, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xaf21, gbc.sp());
        EXPECT(0xca2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca29));
        EXPECT(0x75, gbc.readMem(0xca2a));
        // CB 75 0277
        gbc.setState(0x1e1a, 0x19ca, 0xce00, 0xdbe0, 0x6678, 0x2f5, 0x0, 0x1);
        gbc.writeMem(0x1e1a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x19ca, gbc.sp());
        EXPECT(0x1e1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0278
        gbc.setState(0x5363, 0xbd77, 0x70c0, 0x39c1, 0x33db, 0x8931, 0x0, 0x1);
        gbc.writeMem(0x5363, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xbd77, gbc.sp());
        EXPECT(0x5365, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0279
        gbc.setState(0x1433, 0x5ea, 0x1ae0, 0x9a1c, 0x2625, 0x79d2, 0x0, 0x1);
        gbc.writeMem(0x1433, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x5ea, gbc.sp());
        EXPECT(0x1435, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 027A
        gbc.setState(0x3b1e, 0x98da, 0xe3e0, 0x9d2b, 0x76f7, 0x5b16, 0x0, 0x0);
        gbc.writeMem(0x3b1e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x98da, gbc.sp());
        EXPECT(0x3b20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 027B
        gbc.setState(0x5fe6, 0x9cfc, 0xe060, 0x924d, 0x99e3, 0xa21d, 0x0, 0x0);
        gbc.writeMem(0x5fe6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x9cfc, gbc.sp());
        EXPECT(0x5fe8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 027C
        gbc.setState(0xcdce, 0x4be, 0x9130, 0xfc7, 0x7049, 0x7a25, 0x1, 0x0);
        gbc.writeMem(0xcdce, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x4be, gbc.sp());
        EXPECT(0xcdd0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdce));
        EXPECT(0x75, gbc.readMem(0xcdcf));
        // CB 75 027D
        gbc.setState(0xb8ce, 0x3e10, 0xba70, 0x74b7, 0xfd0b, 0x59a2, 0x0, 0x0);
        gbc.writeMem(0xb8ce, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x3e10, gbc.sp());
        EXPECT(0xb8d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8ce));
        EXPECT(0x75, gbc.readMem(0xb8cf));
        // CB 75 027E
        gbc.setState(0x7678, 0x86f, 0x24b0, 0xbfe9, 0xd959, 0x9ef8, 0x0, 0x1);
        gbc.writeMem(0x7678, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x86f, gbc.sp());
        EXPECT(0x767a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 027F
        gbc.setState(0x16bd, 0xd676, 0xa400, 0x8ac0, 0x370f, 0x4c28, 0x1, 0x1);
        gbc.writeMem(0x16bd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xd676, gbc.sp());
        EXPECT(0x16bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0280
        gbc.setState(0x612d, 0x266d, 0x3610, 0xba17, 0xe7dd, 0xe946, 0x0, 0x1);
        gbc.writeMem(0x612d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x266d, gbc.sp());
        EXPECT(0x612f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0281
        gbc.setState(0xb457, 0x53e2, 0xc3c0, 0x42a, 0x9a30, 0xe906, 0x0, 0x1);
        gbc.writeMem(0xb457, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x53e2, gbc.sp());
        EXPECT(0xb459, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb457));
        EXPECT(0x75, gbc.readMem(0xb458));
        // CB 75 0282
        gbc.setState(0x1784, 0x373f, 0x8bf0, 0xa5f1, 0xd604, 0xb977, 0x0, 0x1);
        gbc.writeMem(0x1784, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x373f, gbc.sp());
        EXPECT(0x1786, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0283
        gbc.setState(0xed3, 0x78fe, 0x7d80, 0x3445, 0x667f, 0x2fa0, 0x0, 0x1);
        gbc.writeMem(0xed3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x78fe, gbc.sp());
        EXPECT(0xed5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0284
        gbc.setState(0xe1ca, 0xd1e4, 0x4fb0, 0x90c, 0x3ea9, 0xf884, 0x0, 0x1);
        gbc.writeMem(0xe1ca, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xd1e4, gbc.sp());
        EXPECT(0xe1cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1ca));
        EXPECT(0x75, gbc.readMem(0xe1cb));
        // CB 75 0285
        gbc.setState(0x2ea9, 0xbdf1, 0x2610, 0xff27, 0xdd8d, 0x591c, 0x0, 0x0);
        gbc.writeMem(0x2ea9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xbdf1, gbc.sp());
        EXPECT(0x2eab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0286
        gbc.setState(0x88f2, 0x6ac9, 0x6570, 0xbf23, 0x5e5a, 0x967e, 0x0, 0x1);
        gbc.writeMem(0x88f2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x6ac9, gbc.sp());
        EXPECT(0x88f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88f2));
        EXPECT(0x75, gbc.readMem(0x88f3));
        // CB 75 0287
        gbc.setState(0x5542, 0x65a4, 0x3830, 0xa816, 0x2f33, 0x66a2, 0x0, 0x0);
        gbc.writeMem(0x5542, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x65a4, gbc.sp());
        EXPECT(0x5544, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0288
        gbc.setState(0x2272, 0xd664, 0xe9f0, 0xf623, 0x82cd, 0x4f18, 0x1, 0x1);
        gbc.writeMem(0x2272, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xd664, gbc.sp());
        EXPECT(0x2274, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0289
        gbc.setState(0x58c0, 0x5ed8, 0x38b0, 0x3ed9, 0xaf5e, 0x160d, 0x1, 0x0);
        gbc.writeMem(0x58c0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x5ed8, gbc.sp());
        EXPECT(0x58c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 028A
        gbc.setState(0xc2ff, 0x87cb, 0xad90, 0x4c26, 0x1b66, 0xcaa5, 0x1, 0x1);
        gbc.writeMem(0xc2ff, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x87cb, gbc.sp());
        EXPECT(0xc301, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2ff));
        EXPECT(0x75, gbc.readMem(0xc300));
        // CB 75 028B
        gbc.setState(0xc8e, 0x14be, 0x1d10, 0xc76d, 0x40d0, 0x7f62, 0x0, 0x0);
        gbc.writeMem(0xc8e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x14be, gbc.sp());
        EXPECT(0xc90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 028C
        gbc.setState(0x85c6, 0xabe4, 0x6a80, 0xdcb6, 0xb4ae, 0x848, 0x0, 0x1);
        gbc.writeMem(0x85c6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xabe4, gbc.sp());
        EXPECT(0x85c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85c6));
        EXPECT(0x75, gbc.readMem(0x85c7));
        // CB 75 028D
        gbc.setState(0x551f, 0xbe7f, 0x1710, 0xb283, 0xbc6c, 0x3892, 0x1, 0x1);
        gbc.writeMem(0x551f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xbe7f, gbc.sp());
        EXPECT(0x5521, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 028F
        gbc.setState(0x2ff3, 0x285c, 0xb500, 0x9b91, 0x2b73, 0xcdf2, 0x1, 0x0);
        gbc.writeMem(0x2ff3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x285c, gbc.sp());
        EXPECT(0x2ff5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0290
        gbc.setState(0x8a0b, 0x7c77, 0xf520, 0x625c, 0x1efd, 0xb3b9, 0x0, 0x0);
        gbc.writeMem(0x8a0b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x7c77, gbc.sp());
        EXPECT(0x8a0d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a0b));
        EXPECT(0x75, gbc.readMem(0x8a0c));
        // CB 75 0291
        gbc.setState(0xd645, 0xd13e, 0xc3d0, 0xa9a6, 0xcbf4, 0x68ce, 0x0, 0x0);
        gbc.writeMem(0xd645, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xd13e, gbc.sp());
        EXPECT(0xd647, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd645));
        EXPECT(0x75, gbc.readMem(0xd646));
        // CB 75 0292
        gbc.setState(0xeb32, 0x7fcd, 0xc400, 0x783, 0xec65, 0x4ba0, 0x1, 0x0);
        gbc.writeMem(0xeb32, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x7fcd, gbc.sp());
        EXPECT(0xeb34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb32));
        EXPECT(0x75, gbc.readMem(0xeb33));
        // CB 75 0293
        gbc.setState(0xc4bb, 0x3fe3, 0x4c90, 0x25b3, 0xd14f, 0x1c7, 0x0, 0x0);
        gbc.writeMem(0xc4bb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x3fe3, gbc.sp());
        EXPECT(0xc4bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4bb));
        EXPECT(0x75, gbc.readMem(0xc4bc));
        // CB 75 0294
        gbc.setState(0x4160, 0xc678, 0x5720, 0x4c17, 0x5708, 0x5306, 0x0, 0x0);
        gbc.writeMem(0x4160, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xc678, gbc.sp());
        EXPECT(0x4162, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0295
        gbc.setState(0x8c4d, 0xc2a2, 0xbbe0, 0xae0b, 0xd872, 0xd122, 0x1, 0x0);
        gbc.writeMem(0x8c4d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xc2a2, gbc.sp());
        EXPECT(0x8c4f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c4d));
        EXPECT(0x75, gbc.readMem(0x8c4e));
        // CB 75 0296
        gbc.setState(0x1d36, 0x6d3f, 0xea20, 0x7f64, 0xdc9f, 0x280a, 0x0, 0x0);
        gbc.writeMem(0x1d36, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x6d3f, gbc.sp());
        EXPECT(0x1d38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0297
        gbc.setState(0x5c8b, 0xe78d, 0x9610, 0x5749, 0x6522, 0x721e, 0x1, 0x0);
        gbc.writeMem(0x5c8b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xe78d, gbc.sp());
        EXPECT(0x5c8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0298
        gbc.setState(0x6f7f, 0x3e44, 0xade0, 0x9824, 0xfdd7, 0x26af, 0x0, 0x1);
        gbc.writeMem(0x6f7f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x3e44, gbc.sp());
        EXPECT(0x6f81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0299
        gbc.setState(0xe5b8, 0xa2c4, 0xeb00, 0x82e7, 0x60bb, 0x1fa3, 0x0, 0x1);
        gbc.writeMem(0xe5b8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xa2c4, gbc.sp());
        EXPECT(0xe5ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5b8));
        EXPECT(0x75, gbc.readMem(0xe5b9));
        // CB 75 029A
        gbc.setState(0xa575, 0xa190, 0xd6a0, 0x4122, 0xcc10, 0xdbc0, 0x1, 0x0);
        gbc.writeMem(0xa575, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xa190, gbc.sp());
        EXPECT(0xa577, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa575));
        EXPECT(0x75, gbc.readMem(0xa576));
        // CB 75 029B
        gbc.setState(0xcc34, 0xbe20, 0xd6c0, 0x38be, 0x56d3, 0x6055, 0x0, 0x0);
        gbc.writeMem(0xcc34, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xbe20, gbc.sp());
        EXPECT(0xcc36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc34));
        EXPECT(0x75, gbc.readMem(0xcc35));
        // CB 75 029C
        gbc.setState(0x8aeb, 0x6890, 0xc0, 0x9a33, 0x2b32, 0xfa26, 0x0, 0x1);
        gbc.writeMem(0x8aeb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x6890, gbc.sp());
        EXPECT(0x8aed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8aeb));
        EXPECT(0x75, gbc.readMem(0x8aec));
        // CB 75 029D
        gbc.setState(0x3444, 0xb777, 0x9f60, 0x8516, 0x36c1, 0xbc23, 0x0, 0x1);
        gbc.writeMem(0x3444, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xb777, gbc.sp());
        EXPECT(0x3446, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 029E
        gbc.setState(0x63bf, 0xd576, 0xd180, 0x6d00, 0xf8cd, 0x73ee, 0x1, 0x0);
        gbc.writeMem(0x63bf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xd576, gbc.sp());
        EXPECT(0x63c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02A1
        gbc.setState(0x138, 0x1405, 0xbd70, 0xa940, 0xf085, 0x994c, 0x0, 0x1);
        gbc.writeMem(0x138, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x1405, gbc.sp());
        EXPECT(0x13a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02A3
        gbc.setState(0xac46, 0x2073, 0x2a50, 0x5e56, 0x238a, 0x4012, 0x1, 0x0);
        gbc.writeMem(0xac46, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x2073, gbc.sp());
        EXPECT(0xac48, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac46));
        EXPECT(0x75, gbc.readMem(0xac47));
        // CB 75 02A4
        gbc.setState(0xbdc5, 0x78ba, 0x6670, 0x9e75, 0x19fc, 0x274, 0x0, 0x1);
        gbc.writeMem(0xbdc5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x78ba, gbc.sp());
        EXPECT(0xbdc7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdc5));
        EXPECT(0x75, gbc.readMem(0xbdc6));
        // CB 75 02A5
        gbc.setState(0xa03a, 0x85cf, 0x8fd0, 0x89e8, 0x8ac3, 0xd136, 0x0, 0x0);
        gbc.writeMem(0xa03a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x85cf, gbc.sp());
        EXPECT(0xa03c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa03a));
        EXPECT(0x75, gbc.readMem(0xa03b));
        // CB 75 02A6
        gbc.setState(0x69ae, 0x70f0, 0xe20, 0xa8b1, 0x6d40, 0x770c, 0x1, 0x1);
        gbc.writeMem(0x69ae, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x70f0, gbc.sp());
        EXPECT(0x69b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02A7
        gbc.setState(0xc42, 0x8f0e, 0x2de0, 0x24d, 0x9283, 0x3331, 0x0, 0x1);
        gbc.writeMem(0xc42, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x8f0e, gbc.sp());
        EXPECT(0xc44, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02A8
        gbc.setState(0xec71, 0x595d, 0x1d80, 0xd69a, 0xb74, 0x6cea, 0x1, 0x0);
        gbc.writeMem(0xec71, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x595d, gbc.sp());
        EXPECT(0xec73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec71));
        EXPECT(0x75, gbc.readMem(0xec72));
        // CB 75 02A9
        gbc.setState(0x1018, 0x943d, 0xf10, 0xa9d, 0xad4d, 0x3006, 0x1, 0x0);
        gbc.writeMem(0x1018, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x943d, gbc.sp());
        EXPECT(0x101a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02AB
        gbc.setState(0x868e, 0x3b23, 0x9510, 0x9c76, 0x87a9, 0xe205, 0x0, 0x1);
        gbc.writeMem(0x868e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x3b23, gbc.sp());
        EXPECT(0x8690, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x868e));
        EXPECT(0x75, gbc.readMem(0x868f));
        // CB 75 02AC
        gbc.setState(0xbff9, 0x12e9, 0xef70, 0xda81, 0x23ba, 0x983f, 0x1, 0x1);
        gbc.writeMem(0xbff9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x12e9, gbc.sp());
        EXPECT(0xbffb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbff9));
        EXPECT(0x75, gbc.readMem(0xbffa));
        // CB 75 02AD
        gbc.setState(0xdfa9, 0xe34b, 0x5df0, 0xa5e6, 0xc9f9, 0xec89, 0x1, 0x1);
        gbc.writeMem(0xdfa9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xe34b, gbc.sp());
        EXPECT(0xdfab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfa9));
        EXPECT(0x75, gbc.readMem(0xdfaa));
        // CB 75 02AE
        gbc.setState(0x3532, 0x52fd, 0x3880, 0x67bf, 0xf094, 0x2ba5, 0x0, 0x1);
        gbc.writeMem(0x3532, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x52fd, gbc.sp());
        EXPECT(0x3534, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02AF
        gbc.setState(0x3f29, 0x83e3, 0x9d70, 0xb922, 0x632, 0xf311, 0x1, 0x0);
        gbc.writeMem(0x3f29, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x83e3, gbc.sp());
        EXPECT(0x3f2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02B0
        gbc.setState(0x9327, 0xd68, 0x1ae0, 0xbf76, 0x7850, 0x2086, 0x1, 0x0);
        gbc.writeMem(0x9327, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xd68, gbc.sp());
        EXPECT(0x9329, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9327));
        EXPECT(0x75, gbc.readMem(0x9328));
        // CB 75 02B1
        gbc.setState(0x9fc0, 0xa08f, 0xd6b0, 0x889b, 0xcede, 0xaad7, 0x0, 0x0);
        gbc.writeMem(0x9fc0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xa08f, gbc.sp());
        EXPECT(0x9fc2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fc0));
        EXPECT(0x75, gbc.readMem(0x9fc1));
        // CB 75 02B2
        gbc.setState(0x4756, 0x2ad9, 0xc250, 0x3d44, 0xbd0f, 0x76d7, 0x0, 0x1);
        gbc.writeMem(0x4756, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x2ad9, gbc.sp());
        EXPECT(0x4758, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02B3
        gbc.setState(0x5041, 0x1ba6, 0x3680, 0xa431, 0x3e83, 0x1e23, 0x0, 0x0);
        gbc.writeMem(0x5041, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x1ba6, gbc.sp());
        EXPECT(0x5043, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02B4
        gbc.setState(0xefb, 0xf749, 0x4160, 0x4752, 0x8cb0, 0xed3c, 0x1, 0x1);
        gbc.writeMem(0xefb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xf749, gbc.sp());
        EXPECT(0xefd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02B5
        gbc.setState(0x11f8, 0xda2c, 0x8060, 0x39ad, 0xca0e, 0xe3e7, 0x1, 0x0);
        gbc.writeMem(0x11f8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xda2c, gbc.sp());
        EXPECT(0x11fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02B6
        gbc.setState(0x94f, 0x6c16, 0x520, 0x7ac5, 0x2fc6, 0xdf6, 0x0, 0x1);
        gbc.writeMem(0x94f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x6c16, gbc.sp());
        EXPECT(0x951, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02B7
        gbc.setState(0xc3a6, 0x36be, 0x7580, 0x28f8, 0x568f, 0x8b10, 0x1, 0x0);
        gbc.writeMem(0xc3a6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x36be, gbc.sp());
        EXPECT(0xc3a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3a6));
        EXPECT(0x75, gbc.readMem(0xc3a7));
        // CB 75 02B8
        gbc.setState(0x568d, 0x9388, 0x7bf0, 0x51e9, 0x3aa7, 0x5968, 0x0, 0x0);
        gbc.writeMem(0x568d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x9388, gbc.sp());
        EXPECT(0x568f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02B9
        gbc.setState(0xa146, 0xb098, 0x2ef0, 0xab47, 0x7a15, 0x6b45, 0x0, 0x1);
        gbc.writeMem(0xa146, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xb098, gbc.sp());
        EXPECT(0xa148, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa146));
        EXPECT(0x75, gbc.readMem(0xa147));
        // CB 75 02BB
        gbc.setState(0x7e34, 0xd782, 0xd080, 0xb1dd, 0x5db7, 0x56dd, 0x1, 0x0);
        gbc.writeMem(0x7e34, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xd782, gbc.sp());
        EXPECT(0x7e36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02BC
        gbc.setState(0xe2f0, 0x582e, 0x3b20, 0xeaa8, 0x909, 0xd9c8, 0x0, 0x1);
        gbc.writeMem(0xe2f0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x582e, gbc.sp());
        EXPECT(0xe2f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2f0));
        EXPECT(0x75, gbc.readMem(0xe2f1));
        // CB 75 02BD
        gbc.setState(0x8206, 0xb05d, 0x7130, 0x2136, 0x4d7f, 0xc16f, 0x0, 0x0);
        gbc.writeMem(0x8206, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xb05d, gbc.sp());
        EXPECT(0x8208, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8206));
        EXPECT(0x75, gbc.readMem(0x8207));
        // CB 75 02BE
        gbc.setState(0xc6d2, 0x83a0, 0xf9d0, 0x15e3, 0x8b9c, 0x675f, 0x0, 0x0);
        gbc.writeMem(0xc6d2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x83a0, gbc.sp());
        EXPECT(0xc6d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6d2));
        EXPECT(0x75, gbc.readMem(0xc6d3));
        // CB 75 02BF
        gbc.setState(0x19e8, 0x2837, 0x8850, 0x418a, 0x9e03, 0xa92, 0x0, 0x1);
        gbc.writeMem(0x19e8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x2837, gbc.sp());
        EXPECT(0x19ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02C0
        gbc.setState(0x31a7, 0x479c, 0x5270, 0xc61c, 0x37a2, 0x114a, 0x0, 0x1);
        gbc.writeMem(0x31a7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x479c, gbc.sp());
        EXPECT(0x31a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02C1
        gbc.setState(0x58e0, 0x94ad, 0xf910, 0x8dd1, 0x4ece, 0x3cad, 0x0, 0x1);
        gbc.writeMem(0x58e0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x94ad, gbc.sp());
        EXPECT(0x58e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02C2
        gbc.setState(0x9920, 0x827c, 0xd710, 0xb270, 0x76fe, 0xa6f2, 0x1, 0x0);
        gbc.writeMem(0x9920, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x827c, gbc.sp());
        EXPECT(0x9922, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9920));
        EXPECT(0x75, gbc.readMem(0x9921));
        // CB 75 02C3
        gbc.setState(0x6ee0, 0x2b88, 0x8d00, 0x8f7e, 0x2a8c, 0x9121, 0x0, 0x1);
        gbc.writeMem(0x6ee0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x2b88, gbc.sp());
        EXPECT(0x6ee2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02C4
        gbc.setState(0x6308, 0x1f2f, 0x4eb0, 0xd972, 0x24dc, 0xa8d3, 0x0, 0x0);
        gbc.writeMem(0x6308, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x1f2f, gbc.sp());
        EXPECT(0x630a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02C5
        gbc.setState(0x6811, 0xc453, 0x16e0, 0x33cd, 0x7b13, 0x1673, 0x1, 0x0);
        gbc.writeMem(0x6811, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xc453, gbc.sp());
        EXPECT(0x6813, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02C6
        gbc.setState(0xa837, 0x819f, 0xc420, 0x1018, 0x4a52, 0xdc0a, 0x0, 0x0);
        gbc.writeMem(0xa837, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x819f, gbc.sp());
        EXPECT(0xa839, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa837));
        EXPECT(0x75, gbc.readMem(0xa838));
        // CB 75 02CA
        gbc.setState(0xe618, 0xbebb, 0xe640, 0x463b, 0xef2d, 0x584e, 0x0, 0x1);
        gbc.writeMem(0xe618, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xbebb, gbc.sp());
        EXPECT(0xe61a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe618));
        EXPECT(0x75, gbc.readMem(0xe619));
        // CB 75 02CB
        gbc.setState(0xebed, 0xf6f1, 0x6f60, 0xb69a, 0x7c4, 0xf70a, 0x1, 0x0);
        gbc.writeMem(0xebed, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xf6f1, gbc.sp());
        EXPECT(0xebef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebed));
        EXPECT(0x75, gbc.readMem(0xebee));
        // CB 75 02CC
        gbc.setState(0x7cfa, 0x670a, 0x4880, 0x87c8, 0x3b31, 0x444a, 0x1, 0x1);
        gbc.writeMem(0x7cfa, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x670a, gbc.sp());
        EXPECT(0x7cfc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02CD
        gbc.setState(0xcac1, 0x7af1, 0x8640, 0x6f78, 0xbba6, 0xbdb2, 0x0, 0x0);
        gbc.writeMem(0xcac1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x7af1, gbc.sp());
        EXPECT(0xcac3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcac1));
        EXPECT(0x75, gbc.readMem(0xcac2));
        // CB 75 02CE
        gbc.setState(0x163a, 0xcbba, 0x9020, 0xd907, 0x43db, 0x9c8c, 0x1, 0x0);
        gbc.writeMem(0x163a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xcbba, gbc.sp());
        EXPECT(0x163c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02CF
        gbc.setState(0xc250, 0x643d, 0xa0e0, 0xe34e, 0x10e7, 0xb449, 0x1, 0x0);
        gbc.writeMem(0xc250, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x643d, gbc.sp());
        EXPECT(0xc252, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc250));
        EXPECT(0x75, gbc.readMem(0xc251));
        // CB 75 02D0
        gbc.setState(0x83ab, 0x4509, 0xb660, 0x70ec, 0x17e2, 0xa18c, 0x1, 0x1);
        gbc.writeMem(0x83ab, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x4509, gbc.sp());
        EXPECT(0x83ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83ab));
        EXPECT(0x75, gbc.readMem(0x83ac));
        // CB 75 02D1
        gbc.setState(0x420a, 0x3184, 0x5820, 0x9578, 0xa146, 0xe981, 0x1, 0x0);
        gbc.writeMem(0x420a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x3184, gbc.sp());
        EXPECT(0x420c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02D2
        gbc.setState(0x5070, 0x6646, 0x3010, 0x8e94, 0x5a52, 0x2491, 0x0, 0x0);
        gbc.writeMem(0x5070, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x6646, gbc.sp());
        EXPECT(0x5072, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02D4
        gbc.setState(0x444b, 0xd9b1, 0x72b0, 0xc6b5, 0xb920, 0x88e1, 0x0, 0x1);
        gbc.writeMem(0x444b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xd9b1, gbc.sp());
        EXPECT(0x444d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02D5
        gbc.setState(0xd28f, 0x7525, 0xabb0, 0x5030, 0x5b7e, 0x5b58, 0x1, 0x0);
        gbc.writeMem(0xd28f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x7525, gbc.sp());
        EXPECT(0xd291, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd28f));
        EXPECT(0x75, gbc.readMem(0xd290));
        // CB 75 02D6
        gbc.setState(0x2efc, 0xf05f, 0xe090, 0x771e, 0x61c9, 0x6762, 0x1, 0x1);
        gbc.writeMem(0x2efc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xf05f, gbc.sp());
        EXPECT(0x2efe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02D7
        gbc.setState(0x408a, 0xfc72, 0x7ff0, 0xd5dd, 0x462c, 0x10c4, 0x0, 0x1);
        gbc.writeMem(0x408a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xfc72, gbc.sp());
        EXPECT(0x408c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02D8
        gbc.setState(0x2cbd, 0xdd28, 0x6bc0, 0x89b3, 0x41c7, 0xd968, 0x1, 0x0);
        gbc.writeMem(0x2cbd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xdd28, gbc.sp());
        EXPECT(0x2cbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02D9
        gbc.setState(0x1180, 0xc509, 0xd720, 0x1f22, 0xd723, 0x3663, 0x1, 0x1);
        gbc.writeMem(0x1180, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xc509, gbc.sp());
        EXPECT(0x1182, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02DA
        gbc.setState(0xb992, 0x6938, 0xbcd0, 0x1bd, 0x7a36, 0x28d, 0x0, 0x0);
        gbc.writeMem(0xb992, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x6938, gbc.sp());
        EXPECT(0xb994, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb992));
        EXPECT(0x75, gbc.readMem(0xb993));
        // CB 75 02DC
        gbc.setState(0x57ea, 0x103f, 0x1c70, 0xd9ce, 0x7900, 0x99cb, 0x1, 0x1);
        gbc.writeMem(0x57ea, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x103f, gbc.sp());
        EXPECT(0x57ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02DD
        gbc.setState(0x44a3, 0xb28b, 0xcbe0, 0x65c2, 0xa713, 0x18f, 0x0, 0x1);
        gbc.writeMem(0x44a3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xb28b, gbc.sp());
        EXPECT(0x44a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02DE
        gbc.setState(0xe5f2, 0xf5ed, 0xa9f0, 0xab82, 0x306a, 0x6167, 0x0, 0x0);
        gbc.writeMem(0xe5f2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xf5ed, gbc.sp());
        EXPECT(0xe5f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5f2));
        EXPECT(0x75, gbc.readMem(0xe5f3));
        // CB 75 02DF
        gbc.setState(0x1cd, 0x7dff, 0xea0, 0x97ff, 0x1bed, 0x79f, 0x0, 0x1);
        gbc.writeMem(0x1cd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x7dff, gbc.sp());
        EXPECT(0x1cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02E0
        gbc.setState(0xc671, 0x190b, 0xa3c0, 0x19cc, 0x3ef0, 0x8a68, 0x1, 0x1);
        gbc.writeMem(0xc671, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x190b, gbc.sp());
        EXPECT(0xc673, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc671));
        EXPECT(0x75, gbc.readMem(0xc672));
        // CB 75 02E1
        gbc.setState(0x9de2, 0x44d7, 0x6ed0, 0xb1c, 0xd153, 0x9d84, 0x0, 0x1);
        gbc.writeMem(0x9de2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x44d7, gbc.sp());
        EXPECT(0x9de4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9de2));
        EXPECT(0x75, gbc.readMem(0x9de3));
        // CB 75 02E2
        gbc.setState(0x597c, 0xb774, 0xeb20, 0xd485, 0x3ec3, 0x5494, 0x0, 0x1);
        gbc.writeMem(0x597c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xb774, gbc.sp());
        EXPECT(0x597e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02E3
        gbc.setState(0xad86, 0x69cb, 0x1c10, 0xacc6, 0x3dcd, 0x4941, 0x0, 0x1);
        gbc.writeMem(0xad86, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x69cb, gbc.sp());
        EXPECT(0xad88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad86));
        EXPECT(0x75, gbc.readMem(0xad87));
        // CB 75 02E4
        gbc.setState(0x82cb, 0xe18e, 0x86f0, 0x1a9b, 0xfbd7, 0xc0fd, 0x0, 0x1);
        gbc.writeMem(0x82cb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xe18e, gbc.sp());
        EXPECT(0x82cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82cb));
        EXPECT(0x75, gbc.readMem(0x82cc));
        // CB 75 02E5
        gbc.setState(0xe7f5, 0xd923, 0x3000, 0x3974, 0xf16, 0x6c06, 0x1, 0x0);
        gbc.writeMem(0xe7f5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xd923, gbc.sp());
        EXPECT(0xe7f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7f5));
        EXPECT(0x75, gbc.readMem(0xe7f6));
        // CB 75 02E6
        gbc.setState(0x5f98, 0x8f0, 0x9ad0, 0x47d, 0x5577, 0x6a3f, 0x1, 0x1);
        gbc.writeMem(0x5f98, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x8f0, gbc.sp());
        EXPECT(0x5f9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02E7
        gbc.setState(0xaaac, 0x2fc, 0xe7f0, 0x1af9, 0x959e, 0xf15a, 0x1, 0x1);
        gbc.writeMem(0xaaac, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x2fc, gbc.sp());
        EXPECT(0xaaae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaaac));
        EXPECT(0x75, gbc.readMem(0xaaad));
        // CB 75 02E8
        gbc.setState(0x613c, 0x5a61, 0x3ea0, 0x6c9c, 0xe199, 0x666, 0x1, 0x0);
        gbc.writeMem(0x613c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x5a61, gbc.sp());
        EXPECT(0x613e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02E9
        gbc.setState(0x6aa8, 0xbf8e, 0x9430, 0x74ba, 0xdeac, 0xc238, 0x0, 0x0);
        gbc.writeMem(0x6aa8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xbf8e, gbc.sp());
        EXPECT(0x6aaa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02EA
        gbc.setState(0xe6b3, 0x69d8, 0x45f0, 0xadca, 0xaeae, 0xcee9, 0x1, 0x0);
        gbc.writeMem(0xe6b3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x69d8, gbc.sp());
        EXPECT(0xe6b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6b3));
        EXPECT(0x75, gbc.readMem(0xe6b4));
        // CB 75 02EC
        gbc.setState(0xe431, 0x459f, 0x33e0, 0xb212, 0x282e, 0x1e39, 0x0, 0x0);
        gbc.writeMem(0xe431, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x459f, gbc.sp());
        EXPECT(0xe433, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe431));
        EXPECT(0x75, gbc.readMem(0xe432));
        // CB 75 02ED
        gbc.setState(0x9cb6, 0xa93e, 0x1150, 0x13c2, 0xa5c9, 0x8103, 0x0, 0x0);
        gbc.writeMem(0x9cb6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xa93e, gbc.sp());
        EXPECT(0x9cb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cb6));
        EXPECT(0x75, gbc.readMem(0x9cb7));
        // CB 75 02EE
        gbc.setState(0x6e83, 0x55e6, 0x27b0, 0xc9d5, 0xde53, 0x557a, 0x0, 0x0);
        gbc.writeMem(0x6e83, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x55e6, gbc.sp());
        EXPECT(0x6e85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02EF
        gbc.setState(0x299c, 0xa3da, 0xcad0, 0x866f, 0xc4f4, 0xb07a, 0x0, 0x1);
        gbc.writeMem(0x299c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xa3da, gbc.sp());
        EXPECT(0x299e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02F0
        gbc.setState(0xc7f7, 0xee35, 0x2d10, 0x5478, 0xb157, 0xc4c5, 0x1, 0x0);
        gbc.writeMem(0xc7f7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xee35, gbc.sp());
        EXPECT(0xc7f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7f7));
        EXPECT(0x75, gbc.readMem(0xc7f8));
        // CB 75 02F1
        gbc.setState(0x7440, 0xab8d, 0xdf10, 0x71df, 0x6fef, 0xeb6d, 0x1, 0x1);
        gbc.writeMem(0x7440, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xab8d, gbc.sp());
        EXPECT(0x7442, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02F2
        gbc.setState(0x71f, 0xfb9c, 0x56e0, 0x43d6, 0xa18a, 0xc63a, 0x0, 0x0);
        gbc.writeMem(0x71f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xfb9c, gbc.sp());
        EXPECT(0x721, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02F3
        gbc.setState(0xc333, 0x7ec0, 0xb60, 0x9a3c, 0x7255, 0x7272, 0x1, 0x0);
        gbc.writeMem(0xc333, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x7ec0, gbc.sp());
        EXPECT(0xc335, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc333));
        EXPECT(0x75, gbc.readMem(0xc334));
        // CB 75 02F4
        gbc.setState(0x6287, 0x20fa, 0xbd90, 0xc7b5, 0xbad5, 0x4020, 0x1, 0x0);
        gbc.writeMem(0x6287, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x20fa, gbc.sp());
        EXPECT(0x6289, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02F5
        gbc.setState(0xae70, 0x6f52, 0xf680, 0x3c53, 0x8cb9, 0xa547, 0x0, 0x0);
        gbc.writeMem(0xae70, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x6f52, gbc.sp());
        EXPECT(0xae72, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae70));
        EXPECT(0x75, gbc.readMem(0xae71));
        // CB 75 02F7
        gbc.setState(0x1271, 0x2485, 0xe630, 0xbe94, 0xca31, 0x42d2, 0x0, 0x0);
        gbc.writeMem(0x1271, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x2485, gbc.sp());
        EXPECT(0x1273, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02F8
        gbc.setState(0xc170, 0xef82, 0x8580, 0xf363, 0xaf2c, 0x30a6, 0x0, 0x0);
        gbc.writeMem(0xc170, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xef82, gbc.sp());
        EXPECT(0xc172, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc170));
        EXPECT(0x75, gbc.readMem(0xc171));
        // CB 75 02F9
        gbc.setState(0x4e0b, 0xfc3a, 0xcbb0, 0x41e0, 0x3df6, 0xde14, 0x1, 0x1);
        gbc.writeMem(0x4e0b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xfc3a, gbc.sp());
        EXPECT(0x4e0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02FA
        gbc.setState(0x148e, 0x36e6, 0x3790, 0x6dbf, 0x6e2, 0x4b79, 0x1, 0x0);
        gbc.writeMem(0x148e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x36e6, gbc.sp());
        EXPECT(0x1490, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 02FB
        gbc.setState(0x29d3, 0xd572, 0x2500, 0x15f, 0xa094, 0x3859, 0x0, 0x1);
        gbc.writeMem(0x29d3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xd572, gbc.sp());
        EXPECT(0x29d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 02FC
        gbc.setState(0x9815, 0x9a33, 0xf7d0, 0x4930, 0x571b, 0xacea, 0x0, 0x1);
        gbc.writeMem(0x9815, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x9a33, gbc.sp());
        EXPECT(0x9817, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9815));
        EXPECT(0x75, gbc.readMem(0x9816));
        // CB 75 02FD
        gbc.setState(0xb123, 0x41e3, 0x6c20, 0x3cb2, 0x14d0, 0xbfb0, 0x1, 0x1);
        gbc.writeMem(0xb123, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x41e3, gbc.sp());
        EXPECT(0xb125, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb123));
        EXPECT(0x75, gbc.readMem(0xb124));
        // CB 75 02FE
        gbc.setState(0xa1b1, 0xf7f, 0xc390, 0xe961, 0xb13c, 0xabff, 0x0, 0x1);
        gbc.writeMem(0xa1b1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xf7f, gbc.sp());
        EXPECT(0xa1b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1b1));
        EXPECT(0x75, gbc.readMem(0xa1b2));
        // CB 75 02FF
        gbc.setState(0x2b9, 0x37ae, 0xd7a0, 0xad24, 0x2309, 0x30a7, 0x1, 0x0);
        gbc.writeMem(0x2b9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x37ae, gbc.sp());
        EXPECT(0x2bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0300
        gbc.setState(0x7016, 0x8c2e, 0x52f0, 0xf66, 0x6cd9, 0x2ead, 0x1, 0x0);
        gbc.writeMem(0x7016, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x8c2e, gbc.sp());
        EXPECT(0x7018, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0301
        gbc.setState(0x242a, 0xa71a, 0x6f20, 0x9251, 0x341b, 0xe214, 0x0, 0x0);
        gbc.writeMem(0x242a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xa71a, gbc.sp());
        EXPECT(0x242c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0302
        gbc.setState(0xeb7c, 0x38c2, 0x4d20, 0xa084, 0xf34, 0xd40e, 0x1, 0x0);
        gbc.writeMem(0xeb7c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x38c2, gbc.sp());
        EXPECT(0xeb7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb7c));
        EXPECT(0x75, gbc.readMem(0xeb7d));
        // CB 75 0303
        gbc.setState(0x93cc, 0xf128, 0xfc0, 0x2946, 0x98b9, 0x1980, 0x1, 0x0);
        gbc.writeMem(0x93cc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xf128, gbc.sp());
        EXPECT(0x93ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93cc));
        EXPECT(0x75, gbc.readMem(0x93cd));
        // CB 75 0304
        gbc.setState(0x5cad, 0x4673, 0xb3b0, 0x92b0, 0x3321, 0x272d, 0x0, 0x0);
        gbc.writeMem(0x5cad, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x4673, gbc.sp());
        EXPECT(0x5caf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0305
        gbc.setState(0xc97e, 0x685d, 0x2ad0, 0x8284, 0x3b5c, 0x48e9, 0x1, 0x0);
        gbc.writeMem(0xc97e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x685d, gbc.sp());
        EXPECT(0xc980, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc97e));
        EXPECT(0x75, gbc.readMem(0xc97f));
        // CB 75 0306
        gbc.setState(0xdecd, 0x17ab, 0xdcf0, 0x2952, 0xecea, 0x2645, 0x0, 0x1);
        gbc.writeMem(0xdecd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x17ab, gbc.sp());
        EXPECT(0xdecf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdecd));
        EXPECT(0x75, gbc.readMem(0xdece));
        // CB 75 0307
        gbc.setState(0x39ec, 0x9007, 0x96f0, 0xd0fd, 0xa1e3, 0x6251, 0x1, 0x0);
        gbc.writeMem(0x39ec, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x9007, gbc.sp());
        EXPECT(0x39ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0308
        gbc.setState(0xa289, 0x909f, 0x6db0, 0xc947, 0x43a3, 0xf580, 0x1, 0x1);
        gbc.writeMem(0xa289, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x909f, gbc.sp());
        EXPECT(0xa28b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa289));
        EXPECT(0x75, gbc.readMem(0xa28a));
        // CB 75 0309
        gbc.setState(0xba58, 0x9260, 0x4e30, 0xaaf0, 0x9d9f, 0x149e, 0x0, 0x1);
        gbc.writeMem(0xba58, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x9260, gbc.sp());
        EXPECT(0xba5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba58));
        EXPECT(0x75, gbc.readMem(0xba59));
        // CB 75 030A
        gbc.setState(0x8f20, 0x7b57, 0x96a0, 0xe7d6, 0xf9cc, 0x90bb, 0x0, 0x0);
        gbc.writeMem(0x8f20, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x7b57, gbc.sp());
        EXPECT(0x8f22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f20));
        EXPECT(0x75, gbc.readMem(0x8f21));
        // CB 75 030B
        gbc.setState(0x99c7, 0x2dec, 0x5650, 0x5bba, 0x4cda, 0xade6, 0x1, 0x0);
        gbc.writeMem(0x99c7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x2dec, gbc.sp());
        EXPECT(0x99c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99c7));
        EXPECT(0x75, gbc.readMem(0x99c8));
        // CB 75 030D
        gbc.setState(0x744a, 0x3699, 0xc7f0, 0x9600, 0xbd2, 0xe033, 0x1, 0x0);
        gbc.writeMem(0x744a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x3699, gbc.sp());
        EXPECT(0x744c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 030E
        gbc.setState(0xd62e, 0x7254, 0x7030, 0xd927, 0x8dd7, 0xf21d, 0x0, 0x0);
        gbc.writeMem(0xd62e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x7254, gbc.sp());
        EXPECT(0xd630, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd62e));
        EXPECT(0x75, gbc.readMem(0xd62f));
        // CB 75 030F
        gbc.setState(0x365d, 0xea9a, 0x6340, 0x3931, 0xb5a5, 0x97c1, 0x1, 0x1);
        gbc.writeMem(0x365d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xea9a, gbc.sp());
        EXPECT(0x365f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0310
        gbc.setState(0xada1, 0xf1, 0x1e30, 0x542a, 0x8a16, 0xe5f1, 0x0, 0x0);
        gbc.writeMem(0xada1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xf1, gbc.sp());
        EXPECT(0xada3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xada1));
        EXPECT(0x75, gbc.readMem(0xada2));
        // CB 75 0311
        gbc.setState(0x1817, 0x4468, 0xe6e0, 0x5a45, 0x727d, 0xfd80, 0x1, 0x1);
        gbc.writeMem(0x1817, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x4468, gbc.sp());
        EXPECT(0x1819, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0312
        gbc.setState(0xd57, 0xd236, 0x85d0, 0x8c0b, 0x82a7, 0x5831, 0x1, 0x1);
        gbc.writeMem(0xd57, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xd236, gbc.sp());
        EXPECT(0xd59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0313
        gbc.setState(0x14fc, 0x22f5, 0x7e90, 0xf239, 0xb23, 0xfe8e, 0x0, 0x1);
        gbc.writeMem(0x14fc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x22f5, gbc.sp());
        EXPECT(0x14fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0314
        gbc.setState(0x4339, 0xd0d8, 0x3880, 0x18e8, 0xaee6, 0x7aed, 0x0, 0x0);
        gbc.writeMem(0x4339, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xd0d8, gbc.sp());
        EXPECT(0x433b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0315
        gbc.setState(0x6b32, 0x50c1, 0x9cf0, 0x61bb, 0x4386, 0xa190, 0x0, 0x0);
        gbc.writeMem(0x6b32, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x50c1, gbc.sp());
        EXPECT(0x6b34, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0316
        gbc.setState(0xa512, 0xb23d, 0x6620, 0x4d1a, 0xa937, 0x68ab, 0x0, 0x0);
        gbc.writeMem(0xa512, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xb23d, gbc.sp());
        EXPECT(0xa514, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa512));
        EXPECT(0x75, gbc.readMem(0xa513));
        // CB 75 0317
        gbc.setState(0xe224, 0x2590, 0xd1e0, 0x5bd3, 0x98c4, 0xc830, 0x0, 0x0);
        gbc.writeMem(0xe224, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x2590, gbc.sp());
        EXPECT(0xe226, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe224));
        EXPECT(0x75, gbc.readMem(0xe225));
        // CB 75 0318
        gbc.setState(0x2668, 0x467, 0xf040, 0xe2c3, 0x8283, 0xcd29, 0x1, 0x0);
        gbc.writeMem(0x2668, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x467, gbc.sp());
        EXPECT(0x266a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0319
        gbc.setState(0x91a1, 0x881f, 0xb510, 0xcf35, 0xea2c, 0x5450, 0x1, 0x0);
        gbc.writeMem(0x91a1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x881f, gbc.sp());
        EXPECT(0x91a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91a1));
        EXPECT(0x75, gbc.readMem(0x91a2));
        // CB 75 031A
        gbc.setState(0x9572, 0xf8cd, 0x2e90, 0xadf3, 0xd4b4, 0xae3d, 0x1, 0x0);
        gbc.writeMem(0x9572, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xf8cd, gbc.sp());
        EXPECT(0x9574, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9572));
        EXPECT(0x75, gbc.readMem(0x9573));
        // CB 75 031B
        gbc.setState(0xdd6c, 0x626d, 0x8ca0, 0x82fa, 0x8a3d, 0x9ef2, 0x0, 0x1);
        gbc.writeMem(0xdd6c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x626d, gbc.sp());
        EXPECT(0xdd6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd6c));
        EXPECT(0x75, gbc.readMem(0xdd6d));
        // CB 75 031C
        gbc.setState(0x989e, 0xc42d, 0xc9e0, 0xf0c4, 0xd421, 0x606b, 0x0, 0x0);
        gbc.writeMem(0x989e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xc42d, gbc.sp());
        EXPECT(0x98a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x989e));
        EXPECT(0x75, gbc.readMem(0x989f));
        // CB 75 031D
        gbc.setState(0x51c2, 0x6168, 0x9130, 0xbb9f, 0x7447, 0x2ddf, 0x1, 0x0);
        gbc.writeMem(0x51c2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x6168, gbc.sp());
        EXPECT(0x51c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 031E
        gbc.setState(0x4cba, 0x7c2a, 0xac00, 0x5c0d, 0xf31a, 0x880c, 0x0, 0x1);
        gbc.writeMem(0x4cba, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x7c2a, gbc.sp());
        EXPECT(0x4cbc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 031F
        gbc.setState(0x6ed1, 0x3a52, 0x8d10, 0x14c7, 0xe3ea, 0xe9f7, 0x0, 0x0);
        gbc.writeMem(0x6ed1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x3a52, gbc.sp());
        EXPECT(0x6ed3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0320
        gbc.setState(0x7c0a, 0xe95d, 0x6a0, 0xe282, 0x9057, 0xb81c, 0x1, 0x1);
        gbc.writeMem(0x7c0a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xe95d, gbc.sp());
        EXPECT(0x7c0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0321
        gbc.setState(0xbda9, 0x8c58, 0x7d20, 0xce4a, 0x560d, 0x4660, 0x0, 0x0);
        gbc.writeMem(0xbda9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x8c58, gbc.sp());
        EXPECT(0xbdab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbda9));
        EXPECT(0x75, gbc.readMem(0xbdaa));
        // CB 75 0323
        gbc.setState(0x86c4, 0xe6a1, 0xfca0, 0x68ef, 0xccd9, 0x5cb3, 0x1, 0x1);
        gbc.writeMem(0x86c4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xe6a1, gbc.sp());
        EXPECT(0x86c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86c4));
        EXPECT(0x75, gbc.readMem(0x86c5));
        // CB 75 0325
        gbc.setState(0x4ce, 0xa8c7, 0xbc50, 0x79b9, 0x6d2a, 0x49da, 0x0, 0x1);
        gbc.writeMem(0x4ce, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xa8c7, gbc.sp());
        EXPECT(0x4d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0326
        gbc.setState(0x4ad0, 0x7057, 0x8a60, 0x95f5, 0x5bc2, 0x7da6, 0x0, 0x0);
        gbc.writeMem(0x4ad0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x7057, gbc.sp());
        EXPECT(0x4ad2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0327
        gbc.setState(0xc27e, 0x3cb3, 0x50f0, 0x6556, 0xc916, 0x3e30, 0x0, 0x0);
        gbc.writeMem(0xc27e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x3cb3, gbc.sp());
        EXPECT(0xc280, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc27e));
        EXPECT(0x75, gbc.readMem(0xc27f));
        // CB 75 0328
        gbc.setState(0xe5ef, 0xb27e, 0xba40, 0x5869, 0xc27b, 0x25ab, 0x1, 0x1);
        gbc.writeMem(0xe5ef, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xb27e, gbc.sp());
        EXPECT(0xe5f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5ef));
        EXPECT(0x75, gbc.readMem(0xe5f0));
        // CB 75 0329
        gbc.setState(0xd180, 0xc8f3, 0x92c0, 0xa6fc, 0x6d6d, 0x5d7d, 0x1, 0x0);
        gbc.writeMem(0xd180, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xc8f3, gbc.sp());
        EXPECT(0xd182, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd180));
        EXPECT(0x75, gbc.readMem(0xd181));
        // CB 75 032A
        gbc.setState(0x8536, 0x720a, 0xe580, 0x237c, 0x37e1, 0x4301, 0x0, 0x0);
        gbc.writeMem(0x8536, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x720a, gbc.sp());
        EXPECT(0x8538, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8536));
        EXPECT(0x75, gbc.readMem(0x8537));
        // CB 75 032B
        gbc.setState(0xe890, 0xbbc7, 0x77f0, 0x2b00, 0xf0c2, 0x3703, 0x1, 0x1);
        gbc.writeMem(0xe890, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xbbc7, gbc.sp());
        EXPECT(0xe892, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe890));
        EXPECT(0x75, gbc.readMem(0xe891));
        // CB 75 032C
        gbc.setState(0x2e80, 0x1d6d, 0x8220, 0xaeaf, 0xfd6c, 0x8808, 0x0, 0x0);
        gbc.writeMem(0x2e80, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x1d6d, gbc.sp());
        EXPECT(0x2e82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 032D
        gbc.setState(0xb92d, 0x443e, 0xfef0, 0x454, 0x6c33, 0xb223, 0x0, 0x1);
        gbc.writeMem(0xb92d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x443e, gbc.sp());
        EXPECT(0xb92f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb92d));
        EXPECT(0x75, gbc.readMem(0xb92e));
        // CB 75 032F
        gbc.setState(0x1c5c, 0x7769, 0xff60, 0xf3e6, 0xc3cb, 0x6ad3, 0x0, 0x0);
        gbc.writeMem(0x1c5c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x7769, gbc.sp());
        EXPECT(0x1c5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0330
        gbc.setState(0x5797, 0x2638, 0xbb20, 0xa40e, 0xd3ca, 0xf65f, 0x0, 0x0);
        gbc.writeMem(0x5797, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x2638, gbc.sp());
        EXPECT(0x5799, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0331
        gbc.setState(0x275a, 0xa377, 0xf8e0, 0x5cf2, 0x64c7, 0x1a7, 0x0, 0x1);
        gbc.writeMem(0x275a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xa377, gbc.sp());
        EXPECT(0x275c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0332
        gbc.setState(0x91d4, 0xed5, 0x8570, 0xc9c2, 0x2416, 0xc60d, 0x1, 0x0);
        gbc.writeMem(0x91d4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xed5, gbc.sp());
        EXPECT(0x91d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91d4));
        EXPECT(0x75, gbc.readMem(0x91d5));
        // CB 75 0333
        gbc.setState(0xe532, 0x1c14, 0xbcd0, 0x9d01, 0xbdac, 0x8e24, 0x1, 0x0);
        gbc.writeMem(0xe532, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x1c14, gbc.sp());
        EXPECT(0xe534, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe532));
        EXPECT(0x75, gbc.readMem(0xe533));
        // CB 75 0334
        gbc.setState(0x5c5a, 0xed5f, 0xab90, 0x6f15, 0x51f3, 0xbf6c, 0x0, 0x0);
        gbc.writeMem(0x5c5a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xed5f, gbc.sp());
        EXPECT(0x5c5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0336
        gbc.setState(0x3368, 0x9360, 0xf2e0, 0x1a99, 0xf32c, 0x1f52, 0x0, 0x0);
        gbc.writeMem(0x3368, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x9360, gbc.sp());
        EXPECT(0x336a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0337
        gbc.setState(0xece0, 0x61f2, 0xc000, 0xd0bb, 0x7b4d, 0x5a04, 0x1, 0x1);
        gbc.writeMem(0xece0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x61f2, gbc.sp());
        EXPECT(0xece2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xece0));
        EXPECT(0x75, gbc.readMem(0xece1));
        // CB 75 0338
        gbc.setState(0xd0dd, 0xd02d, 0xd140, 0xeb5d, 0x5650, 0x7624, 0x1, 0x1);
        gbc.writeMem(0xd0dd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xd02d, gbc.sp());
        EXPECT(0xd0df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0dd));
        EXPECT(0x75, gbc.readMem(0xd0de));
        // CB 75 0339
        gbc.setState(0x2296, 0x62e8, 0xb7c0, 0xd512, 0x9286, 0xde1b, 0x1, 0x0);
        gbc.writeMem(0x2296, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x62e8, gbc.sp());
        EXPECT(0x2298, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 033A
        gbc.setState(0xec6a, 0xaac9, 0xc350, 0x83f3, 0x92bb, 0xea65, 0x0, 0x1);
        gbc.writeMem(0xec6a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xaac9, gbc.sp());
        EXPECT(0xec6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec6a));
        EXPECT(0x75, gbc.readMem(0xec6b));
        // CB 75 033B
        gbc.setState(0x7ea5, 0x38eb, 0xe9e0, 0x72e7, 0x279e, 0x8428, 0x0, 0x1);
        gbc.writeMem(0x7ea5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x38eb, gbc.sp());
        EXPECT(0x7ea7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 033C
        gbc.setState(0xd9dd, 0xce2f, 0xf4b0, 0xdb45, 0xe558, 0x6713, 0x1, 0x0);
        gbc.writeMem(0xd9dd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xce2f, gbc.sp());
        EXPECT(0xd9df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9dd));
        EXPECT(0x75, gbc.readMem(0xd9de));
        // CB 75 033D
        gbc.setState(0x3842, 0xa4f4, 0x9420, 0x6f68, 0x27ac, 0xabc3, 0x0, 0x0);
        gbc.writeMem(0x3842, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xa4f4, gbc.sp());
        EXPECT(0x3844, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 033F
        gbc.setState(0xa8f1, 0x73c5, 0x8160, 0x9e2d, 0x6751, 0xb1ed, 0x1, 0x0);
        gbc.writeMem(0xa8f1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x73c5, gbc.sp());
        EXPECT(0xa8f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8f1));
        EXPECT(0x75, gbc.readMem(0xa8f2));
        // CB 75 0340
        gbc.setState(0xff0, 0xdea3, 0x6e50, 0x3d60, 0x5b99, 0x8459, 0x1, 0x1);
        gbc.writeMem(0xff0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xdea3, gbc.sp());
        EXPECT(0xff2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0341
        gbc.setState(0xe754, 0x3329, 0x3120, 0x1437, 0xfd9e, 0x5cf2, 0x1, 0x1);
        gbc.writeMem(0xe754, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x3329, gbc.sp());
        EXPECT(0xe756, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe754));
        EXPECT(0x75, gbc.readMem(0xe755));
        // CB 75 0342
        gbc.setState(0x3c47, 0xe8f8, 0x6d00, 0x7cef, 0x13f0, 0x9e32, 0x1, 0x0);
        gbc.writeMem(0x3c47, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xe8f8, gbc.sp());
        EXPECT(0x3c49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0343
        gbc.setState(0x4e62, 0x38ea, 0x2c60, 0xbca6, 0xd189, 0x7375, 0x0, 0x1);
        gbc.writeMem(0x4e62, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x38ea, gbc.sp());
        EXPECT(0x4e64, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0344
        gbc.setState(0x2fef, 0x822d, 0xbe40, 0x712e, 0xd873, 0x150d, 0x0, 0x0);
        gbc.writeMem(0x2fef, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x822d, gbc.sp());
        EXPECT(0x2ff1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0345
        gbc.setState(0x61f2, 0x2192, 0xd470, 0x4615, 0xd9f1, 0x95c7, 0x0, 0x0);
        gbc.writeMem(0x61f2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x2192, gbc.sp());
        EXPECT(0x61f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0346
        gbc.setState(0xcdb5, 0xd3a8, 0x77f0, 0x997c, 0x1401, 0xbba7, 0x0, 0x0);
        gbc.writeMem(0xcdb5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xd3a8, gbc.sp());
        EXPECT(0xcdb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdb5));
        EXPECT(0x75, gbc.readMem(0xcdb6));
        // CB 75 0348
        gbc.setState(0x94cf, 0x7b3d, 0x30d0, 0xaccb, 0xd4c0, 0x2537, 0x0, 0x0);
        gbc.writeMem(0x94cf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x7b3d, gbc.sp());
        EXPECT(0x94d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94cf));
        EXPECT(0x75, gbc.readMem(0x94d0));
        // CB 75 034A
        gbc.setState(0x6fa2, 0x456e, 0xce90, 0x16ca, 0x65e3, 0x4b3a, 0x1, 0x1);
        gbc.writeMem(0x6fa2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x456e, gbc.sp());
        EXPECT(0x6fa4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 034B
        gbc.setState(0x1a66, 0x1a08, 0xfe0, 0x14bb, 0x13c7, 0xded6, 0x1, 0x0);
        gbc.writeMem(0x1a66, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x1a08, gbc.sp());
        EXPECT(0x1a68, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 034C
        gbc.setState(0x33bc, 0x69f0, 0x76a0, 0xe4f9, 0x3ec4, 0x13a3, 0x0, 0x0);
        gbc.writeMem(0x33bc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x69f0, gbc.sp());
        EXPECT(0x33be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 034D
        gbc.setState(0x6583, 0x5cf4, 0x5f60, 0x2528, 0xee78, 0x42a9, 0x0, 0x1);
        gbc.writeMem(0x6583, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x5cf4, gbc.sp());
        EXPECT(0x6585, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 034E
        gbc.setState(0xd61b, 0x12b4, 0x740, 0x6d34, 0x32e4, 0xa574, 0x1, 0x0);
        gbc.writeMem(0xd61b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x12b4, gbc.sp());
        EXPECT(0xd61d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd61b));
        EXPECT(0x75, gbc.readMem(0xd61c));
        // CB 75 0350
        gbc.setState(0x2151, 0x38fb, 0x81b0, 0x1fe4, 0xc3c7, 0x307b, 0x0, 0x1);
        gbc.writeMem(0x2151, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x38fb, gbc.sp());
        EXPECT(0x2153, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0351
        gbc.setState(0x7a54, 0xfeb5, 0xce30, 0x887e, 0x60f3, 0xa9d8, 0x0, 0x1);
        gbc.writeMem(0x7a54, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xfeb5, gbc.sp());
        EXPECT(0x7a56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0352
        gbc.setState(0x3399, 0xbfb6, 0xb440, 0x77a0, 0x9eaa, 0x85fa, 0x1, 0x1);
        gbc.writeMem(0x3399, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xbfb6, gbc.sp());
        EXPECT(0x339b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0353
        gbc.setState(0x338, 0xfabb, 0x7e90, 0xd0ef, 0xe2a5, 0xc24e, 0x0, 0x0);
        gbc.writeMem(0x338, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xfabb, gbc.sp());
        EXPECT(0x33a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0354
        gbc.setState(0xe407, 0x17be, 0xf190, 0xd996, 0xeb14, 0xe074, 0x1, 0x1);
        gbc.writeMem(0xe407, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x17be, gbc.sp());
        EXPECT(0xe409, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe407));
        EXPECT(0x75, gbc.readMem(0xe408));
        // CB 75 0355
        gbc.setState(0xe282, 0x6846, 0x82b0, 0x32ee, 0x1357, 0x1415, 0x1, 0x1);
        gbc.writeMem(0xe282, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x6846, gbc.sp());
        EXPECT(0xe284, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe282));
        EXPECT(0x75, gbc.readMem(0xe283));
        // CB 75 0356
        gbc.setState(0x11cf, 0x2df9, 0xe490, 0x64a8, 0xda34, 0xba66, 0x0, 0x0);
        gbc.writeMem(0x11cf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x2df9, gbc.sp());
        EXPECT(0x11d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0357
        gbc.setState(0x4eb3, 0x15ff, 0x2a20, 0x9d2a, 0x1029, 0xd788, 0x1, 0x1);
        gbc.writeMem(0x4eb3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x15ff, gbc.sp());
        EXPECT(0x4eb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0358
        gbc.setState(0xd5cf, 0x9555, 0x3df0, 0x564a, 0x8208, 0x7783, 0x1, 0x0);
        gbc.writeMem(0xd5cf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x9555, gbc.sp());
        EXPECT(0xd5d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5cf));
        EXPECT(0x75, gbc.readMem(0xd5d0));
        // CB 75 0359
        gbc.setState(0x23b0, 0x1eed, 0x8de0, 0x5b2b, 0xdf92, 0x7c2e, 0x1, 0x0);
        gbc.writeMem(0x23b0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x1eed, gbc.sp());
        EXPECT(0x23b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 035A
        gbc.setState(0xa742, 0xc6c9, 0x1170, 0xc2e7, 0x8565, 0x4eae, 0x1, 0x0);
        gbc.writeMem(0xa742, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xc6c9, gbc.sp());
        EXPECT(0xa744, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa742));
        EXPECT(0x75, gbc.readMem(0xa743));
        // CB 75 035B
        gbc.setState(0xb1de, 0xfc84, 0x85b0, 0x794d, 0x7a3e, 0x6d3, 0x0, 0x1);
        gbc.writeMem(0xb1de, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xfc84, gbc.sp());
        EXPECT(0xb1e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1de));
        EXPECT(0x75, gbc.readMem(0xb1df));
        // CB 75 035C
        gbc.setState(0x31ce, 0x5a20, 0x28f0, 0xa493, 0xa76d, 0x7118, 0x1, 0x0);
        gbc.writeMem(0x31ce, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x5a20, gbc.sp());
        EXPECT(0x31d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 035D
        gbc.setState(0x5a3, 0x7588, 0x4780, 0x84aa, 0x43f4, 0x4895, 0x0, 0x1);
        gbc.writeMem(0x5a3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x7588, gbc.sp());
        EXPECT(0x5a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 035E
        gbc.setState(0x3eda, 0x26c3, 0x9c50, 0xefba, 0x7713, 0xdaa7, 0x0, 0x0);
        gbc.writeMem(0x3eda, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x26c3, gbc.sp());
        EXPECT(0x3edc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 035F
        gbc.setState(0xb3b3, 0x21c8, 0x9970, 0xc5b1, 0x1292, 0x8ada, 0x0, 0x0);
        gbc.writeMem(0xb3b3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x21c8, gbc.sp());
        EXPECT(0xb3b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3b3));
        EXPECT(0x75, gbc.readMem(0xb3b4));
        // CB 75 0360
        gbc.setState(0x54ef, 0xe6a9, 0xab30, 0xf67b, 0x9b7e, 0x80c1, 0x0, 0x1);
        gbc.writeMem(0x54ef, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xe6a9, gbc.sp());
        EXPECT(0x54f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0361
        gbc.setState(0xcb0b, 0x8c58, 0xcef0, 0xa845, 0x5d3b, 0xfb8e, 0x1, 0x0);
        gbc.writeMem(0xcb0b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x8c58, gbc.sp());
        EXPECT(0xcb0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb0b));
        EXPECT(0x75, gbc.readMem(0xcb0c));
        // CB 75 0362
        gbc.setState(0xa683, 0x225a, 0x3dd0, 0x3953, 0xd5ae, 0xf908, 0x1, 0x0);
        gbc.writeMem(0xa683, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x225a, gbc.sp());
        EXPECT(0xa685, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa683));
        EXPECT(0x75, gbc.readMem(0xa684));
        // CB 75 0363
        gbc.setState(0xbe00, 0xfdf2, 0xfa90, 0x6704, 0x4b27, 0x40fe, 0x1, 0x0);
        gbc.writeMem(0xbe00, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xfdf2, gbc.sp());
        EXPECT(0xbe02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe00));
        EXPECT(0x75, gbc.readMem(0xbe01));
        // CB 75 0364
        gbc.setState(0x1732, 0xf991, 0xa1c0, 0xe8d3, 0x9c28, 0x65cb, 0x1, 0x0);
        gbc.writeMem(0x1732, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xf991, gbc.sp());
        EXPECT(0x1734, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0365
        gbc.setState(0x9d85, 0xd8ae, 0x64d0, 0xb201, 0x3edd, 0xa883, 0x0, 0x1);
        gbc.writeMem(0x9d85, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xd8ae, gbc.sp());
        EXPECT(0x9d87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d85));
        EXPECT(0x75, gbc.readMem(0x9d86));
        // CB 75 0366
        gbc.setState(0x33cc, 0xe651, 0xeb40, 0x894b, 0xbf32, 0xf3d2, 0x0, 0x1);
        gbc.writeMem(0x33cc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xe651, gbc.sp());
        EXPECT(0x33ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0367
        gbc.setState(0x1d2a, 0x3287, 0xa860, 0x40fc, 0x2290, 0x9bd1, 0x0, 0x0);
        gbc.writeMem(0x1d2a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x3287, gbc.sp());
        EXPECT(0x1d2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0368
        gbc.setState(0xc8c3, 0xd96b, 0xbce0, 0xb595, 0xb690, 0x8415, 0x1, 0x1);
        gbc.writeMem(0xc8c3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xd96b, gbc.sp());
        EXPECT(0xc8c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8c3));
        EXPECT(0x75, gbc.readMem(0xc8c4));
        // CB 75 0369
        gbc.setState(0x99f7, 0x392c, 0x1570, 0xaefd, 0xde0c, 0x862b, 0x1, 0x0);
        gbc.writeMem(0x99f7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x392c, gbc.sp());
        EXPECT(0x99f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99f7));
        EXPECT(0x75, gbc.readMem(0x99f8));
        // CB 75 036A
        gbc.setState(0x5bad, 0xac7, 0x97b0, 0xb3d1, 0xaad8, 0xcc0a, 0x1, 0x1);
        gbc.writeMem(0x5bad, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xac7, gbc.sp());
        EXPECT(0x5baf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 036B
        gbc.setState(0x817c, 0x2a8b, 0x560, 0x8366, 0xa44, 0x2f47, 0x0, 0x1);
        gbc.writeMem(0x817c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x2a8b, gbc.sp());
        EXPECT(0x817e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x817c));
        EXPECT(0x75, gbc.readMem(0x817d));
        // CB 75 036C
        gbc.setState(0x101a, 0x9e1c, 0xe900, 0x538a, 0x45e3, 0x90a1, 0x1, 0x1);
        gbc.writeMem(0x101a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x9e1c, gbc.sp());
        EXPECT(0x101c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 036D
        gbc.setState(0xd185, 0xa0da, 0xcbd0, 0x89b9, 0xea8b, 0xfb60, 0x0, 0x1);
        gbc.writeMem(0xd185, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xa0da, gbc.sp());
        EXPECT(0xd187, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd185));
        EXPECT(0x75, gbc.readMem(0xd186));
        // CB 75 036E
        gbc.setState(0xa023, 0x31b3, 0x6170, 0xfceb, 0x6b4e, 0xefa5, 0x1, 0x0);
        gbc.writeMem(0xa023, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x31b3, gbc.sp());
        EXPECT(0xa025, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa023));
        EXPECT(0x75, gbc.readMem(0xa024));
        // CB 75 036F
        gbc.setState(0xd100, 0x3916, 0x6a80, 0xf960, 0x84d6, 0x64ea, 0x1, 0x0);
        gbc.writeMem(0xd100, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x3916, gbc.sp());
        EXPECT(0xd102, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd100));
        EXPECT(0x75, gbc.readMem(0xd101));
        // CB 75 0370
        gbc.setState(0x9d6, 0xa898, 0x5ff0, 0xe28f, 0x9aba, 0xccc4, 0x0, 0x1);
        gbc.writeMem(0x9d6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xa898, gbc.sp());
        EXPECT(0x9d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0371
        gbc.setState(0xde3b, 0x8d83, 0xf660, 0xb793, 0x3a42, 0x973f, 0x1, 0x1);
        gbc.writeMem(0xde3b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x8d83, gbc.sp());
        EXPECT(0xde3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde3b));
        EXPECT(0x75, gbc.readMem(0xde3c));
        // CB 75 0372
        gbc.setState(0x9a7c, 0x1111, 0x6b90, 0x56c2, 0x5963, 0xe2e5, 0x1, 0x0);
        gbc.writeMem(0x9a7c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x1111, gbc.sp());
        EXPECT(0x9a7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a7c));
        EXPECT(0x75, gbc.readMem(0x9a7d));
        // CB 75 0375
        gbc.setState(0x3016, 0x214c, 0x3d0, 0xbd6d, 0x3d47, 0x8fdc, 0x0, 0x1);
        gbc.writeMem(0x3016, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x214c, gbc.sp());
        EXPECT(0x3018, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0376
        gbc.setState(0x3f1e, 0x3a36, 0xa740, 0xb6f6, 0x5e89, 0xfc6b, 0x1, 0x1);
        gbc.writeMem(0x3f1e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x3a36, gbc.sp());
        EXPECT(0x3f20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0377
        gbc.setState(0xcda5, 0x819, 0x7460, 0x586e, 0x197a, 0x155, 0x0, 0x1);
        gbc.writeMem(0xcda5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x819, gbc.sp());
        EXPECT(0xcda7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcda5));
        EXPECT(0x75, gbc.readMem(0xcda6));
        // CB 75 0378
        gbc.setState(0x2275, 0xb82d, 0xbe20, 0x152a, 0xff90, 0xe534, 0x1, 0x1);
        gbc.writeMem(0x2275, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xb82d, gbc.sp());
        EXPECT(0x2277, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0379
        gbc.setState(0x2d95, 0xc5c8, 0x46b0, 0x80ee, 0x5e4d, 0x91f0, 0x0, 0x1);
        gbc.writeMem(0x2d95, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xc5c8, gbc.sp());
        EXPECT(0x2d97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 037A
        gbc.setState(0xd1f4, 0x3020, 0xd70, 0x6cb8, 0x87d4, 0xb1c7, 0x1, 0x1);
        gbc.writeMem(0xd1f4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x3020, gbc.sp());
        EXPECT(0xd1f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1f4));
        EXPECT(0x75, gbc.readMem(0xd1f5));
        // CB 75 037B
        gbc.setState(0x3774, 0xe95d, 0x6800, 0xbe6a, 0x8fa1, 0x669c, 0x1, 0x1);
        gbc.writeMem(0x3774, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xe95d, gbc.sp());
        EXPECT(0x3776, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 037C
        gbc.setState(0x4bfa, 0xc600, 0xda20, 0xbe18, 0xd249, 0x4b1c, 0x1, 0x0);
        gbc.writeMem(0x4bfa, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xc600, gbc.sp());
        EXPECT(0x4bfc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 037D
        gbc.setState(0xe73c, 0x99a1, 0xc120, 0x4d89, 0xf662, 0xec4, 0x0, 0x1);
        gbc.writeMem(0xe73c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x99a1, gbc.sp());
        EXPECT(0xe73e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe73c));
        EXPECT(0x75, gbc.readMem(0xe73d));
        // CB 75 037E
        gbc.setState(0xdc50, 0xcf90, 0xe010, 0x5555, 0xb5fd, 0x488c, 0x0, 0x1);
        gbc.writeMem(0xdc50, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xcf90, gbc.sp());
        EXPECT(0xdc52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc50));
        EXPECT(0x75, gbc.readMem(0xdc51));
        // CB 75 037F
        gbc.setState(0x4101, 0xa7b7, 0x4a00, 0xeddb, 0xc731, 0xc4a9, 0x0, 0x1);
        gbc.writeMem(0x4101, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xa7b7, gbc.sp());
        EXPECT(0x4103, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0380
        gbc.setState(0x60c4, 0x73f, 0x6e80, 0xd637, 0xa962, 0xa2b, 0x0, 0x1);
        gbc.writeMem(0x60c4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x73f, gbc.sp());
        EXPECT(0x60c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0381
        gbc.setState(0x909c, 0xf006, 0x6420, 0x5330, 0x8a42, 0x2317, 0x0, 0x0);
        gbc.writeMem(0x909c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xf006, gbc.sp());
        EXPECT(0x909e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x909c));
        EXPECT(0x75, gbc.readMem(0x909d));
        // CB 75 0382
        gbc.setState(0x9e49, 0x275a, 0xb0a0, 0xf2fb, 0x1de9, 0x745, 0x1, 0x1);
        gbc.writeMem(0x9e49, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x275a, gbc.sp());
        EXPECT(0x9e4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e49));
        EXPECT(0x75, gbc.readMem(0x9e4a));
        // CB 75 0383
        gbc.setState(0x4664, 0xbd72, 0xf9a0, 0xd9c1, 0x72bd, 0xfe56, 0x0, 0x1);
        gbc.writeMem(0x4664, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xbd72, gbc.sp());
        EXPECT(0x4666, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0384
        gbc.setState(0xa004, 0x6dde, 0xf650, 0x57c3, 0xf190, 0xc91d, 0x1, 0x0);
        gbc.writeMem(0xa004, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x6dde, gbc.sp());
        EXPECT(0xa006, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa004));
        EXPECT(0x75, gbc.readMem(0xa005));
        // CB 75 0385
        gbc.setState(0x95bb, 0x981a, 0xd780, 0xb4bb, 0x1d44, 0x74df, 0x0, 0x1);
        gbc.writeMem(0x95bb, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x981a, gbc.sp());
        EXPECT(0x95bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95bb));
        EXPECT(0x75, gbc.readMem(0x95bc));
        // CB 75 0386
        gbc.setState(0x111d, 0x96c1, 0x7e80, 0x2e43, 0x245d, 0x3e4c, 0x1, 0x0);
        gbc.writeMem(0x111d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x96c1, gbc.sp());
        EXPECT(0x111f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0387
        gbc.setState(0x61b3, 0x2108, 0xced0, 0x48a, 0x8f77, 0x5131, 0x1, 0x0);
        gbc.writeMem(0x61b3, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x2108, gbc.sp());
        EXPECT(0x61b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0388
        gbc.setState(0x278d, 0x2ce3, 0xf7b0, 0xdedc, 0x5152, 0x126b, 0x0, 0x1);
        gbc.writeMem(0x278d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x2ce3, gbc.sp());
        EXPECT(0x278f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0389
        gbc.setState(0x14ef, 0x92ac, 0xcad0, 0x9739, 0x1e63, 0x23dd, 0x1, 0x1);
        gbc.writeMem(0x14ef, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x92ac, gbc.sp());
        EXPECT(0x14f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 038A
        gbc.setState(0x60ed, 0x851b, 0xa700, 0x1028, 0xe197, 0x5140, 0x1, 0x1);
        gbc.writeMem(0x60ed, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x851b, gbc.sp());
        EXPECT(0x60ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 038C
        gbc.setState(0xeacf, 0x6543, 0x42e0, 0x1ca, 0x8e8e, 0xb083, 0x0, 0x1);
        gbc.writeMem(0xeacf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x6543, gbc.sp());
        EXPECT(0xead1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeacf));
        EXPECT(0x75, gbc.readMem(0xead0));
        // CB 75 038D
        gbc.setState(0xa63f, 0x3dc1, 0x91f0, 0x5755, 0xd4b3, 0x96c8, 0x0, 0x0);
        gbc.writeMem(0xa63f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x3dc1, gbc.sp());
        EXPECT(0xa641, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa63f));
        EXPECT(0x75, gbc.readMem(0xa640));
        // CB 75 038E
        gbc.setState(0xed44, 0x8dd1, 0x3c10, 0xc7c, 0xfe84, 0x31a, 0x1, 0x0);
        gbc.writeMem(0xed44, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x8dd1, gbc.sp());
        EXPECT(0xed46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed44));
        EXPECT(0x75, gbc.readMem(0xed45));
        // CB 75 038F
        gbc.setState(0xe3f2, 0xe66e, 0x2040, 0x7a7d, 0x9a62, 0x5b7a, 0x1, 0x0);
        gbc.writeMem(0xe3f2, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xe66e, gbc.sp());
        EXPECT(0xe3f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3f2));
        EXPECT(0x75, gbc.readMem(0xe3f3));
        // CB 75 0390
        gbc.setState(0xdbc, 0x662b, 0x6f40, 0x94f2, 0x2257, 0x352, 0x0, 0x1);
        gbc.writeMem(0xdbc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x662b, gbc.sp());
        EXPECT(0xdbe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0391
        gbc.setState(0x8ae0, 0xf7eb, 0x6750, 0x67e4, 0xafef, 0x108c, 0x1, 0x1);
        gbc.writeMem(0x8ae0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xf7eb, gbc.sp());
        EXPECT(0x8ae2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ae0));
        EXPECT(0x75, gbc.readMem(0x8ae1));
        // CB 75 0392
        gbc.setState(0xa3d8, 0xe8be, 0x3be0, 0x2dc5, 0xb363, 0x4f14, 0x1, 0x1);
        gbc.writeMem(0xa3d8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xe8be, gbc.sp());
        EXPECT(0xa3da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3d8));
        EXPECT(0x75, gbc.readMem(0xa3d9));
        // CB 75 0393
        gbc.setState(0x50de, 0x87fd, 0xe6c0, 0xe97c, 0x40ff, 0x868c, 0x1, 0x1);
        gbc.writeMem(0x50de, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x87fd, gbc.sp());
        EXPECT(0x50e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0394
        gbc.setState(0x3d47, 0x2a6a, 0xfd10, 0xc270, 0xcad1, 0x86fc, 0x0, 0x1);
        gbc.writeMem(0x3d47, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x2a6a, gbc.sp());
        EXPECT(0x3d49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 0395
        gbc.setState(0x668d, 0x1ad4, 0x6280, 0x845b, 0xa188, 0xefd3, 0x0, 0x0);
        gbc.writeMem(0x668d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x1ad4, gbc.sp());
        EXPECT(0x668f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0396
        gbc.setState(0x6e97, 0xb887, 0xa740, 0x602c, 0xc40, 0xb08, 0x1, 0x1);
        gbc.writeMem(0x6e97, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xb887, gbc.sp());
        EXPECT(0x6e99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0397
        gbc.setState(0x2834, 0x9b59, 0xb00, 0xac16, 0x233d, 0x5429, 0x1, 0x0);
        gbc.writeMem(0x2834, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x9b59, gbc.sp());
        EXPECT(0x2836, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 0398
        gbc.setState(0xbbaf, 0x21b6, 0x2320, 0x2f79, 0xbef9, 0x8eee, 0x0, 0x1);
        gbc.writeMem(0xbbaf, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x21b6, gbc.sp());
        EXPECT(0xbbb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbaf));
        EXPECT(0x75, gbc.readMem(0xbbb0));
        // CB 75 0399
        gbc.setState(0x60f, 0xc0ec, 0xe3b0, 0xf699, 0x34c2, 0x112c, 0x1, 0x1);
        gbc.writeMem(0x60f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xc0ec, gbc.sp());
        EXPECT(0x611, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 039A
        gbc.setState(0x26fd, 0xbcdb, 0xbdc0, 0x1900, 0x6d46, 0x7f11, 0x0, 0x0);
        gbc.writeMem(0x26fd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xbcdb, gbc.sp());
        EXPECT(0x26ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 039B
        gbc.setState(0xb7f9, 0x5aea, 0xa790, 0x18d6, 0x665b, 0x5a72, 0x1, 0x1);
        gbc.writeMem(0xb7f9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x5aea, gbc.sp());
        EXPECT(0xb7fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7f9));
        EXPECT(0x75, gbc.readMem(0xb7fa));
        // CB 75 039C
        gbc.setState(0x100e, 0x7d9b, 0xe8b0, 0xda7a, 0x4d57, 0xc658, 0x0, 0x0);
        gbc.writeMem(0x100e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x7d9b, gbc.sp());
        EXPECT(0x1010, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 039D
        gbc.setState(0x5ce6, 0xc57c, 0xbba0, 0x3cd, 0xd4d9, 0x90ab, 0x0, 0x1);
        gbc.writeMem(0x5ce6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xc57c, gbc.sp());
        EXPECT(0x5ce8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 039E
        gbc.setState(0xb872, 0x9d67, 0xa6c0, 0xfd8e, 0x1a27, 0x3ff3, 0x1, 0x0);
        gbc.writeMem(0xb872, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x9d67, gbc.sp());
        EXPECT(0xb874, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb872));
        EXPECT(0x75, gbc.readMem(0xb873));
        // CB 75 039F
        gbc.setState(0xc45d, 0xa12, 0x7950, 0x8337, 0xcefe, 0xf16d, 0x0, 0x1);
        gbc.writeMem(0xc45d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xa12, gbc.sp());
        EXPECT(0xc45f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc45d));
        EXPECT(0x75, gbc.readMem(0xc45e));
        // CB 75 03A0
        gbc.setState(0x220f, 0x1d0d, 0xac80, 0x69c1, 0xe151, 0xe7ac, 0x1, 0x0);
        gbc.writeMem(0x220f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x1d0d, gbc.sp());
        EXPECT(0x2211, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03A1
        gbc.setState(0x24c8, 0x33cc, 0xbee0, 0x7706, 0xa3b3, 0x46b1, 0x0, 0x0);
        gbc.writeMem(0x24c8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x33cc, gbc.sp());
        EXPECT(0x24ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03A2
        gbc.setState(0xd8bc, 0x4d0, 0x12f0, 0x25e5, 0x3f11, 0xd0a7, 0x1, 0x1);
        gbc.writeMem(0xd8bc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x4d0, gbc.sp());
        EXPECT(0xd8be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8bc));
        EXPECT(0x75, gbc.readMem(0xd8bd));
        // CB 75 03A3
        gbc.setState(0x147b, 0xb5fb, 0xfe80, 0x8c51, 0x425c, 0x989e, 0x0, 0x1);
        gbc.writeMem(0x147b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xb5fb, gbc.sp());
        EXPECT(0x147d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03A4
        gbc.setState(0x4ae9, 0xa73f, 0xe750, 0xc0ed, 0x8858, 0x82fa, 0x1, 0x1);
        gbc.writeMem(0x4ae9, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xa73f, gbc.sp());
        EXPECT(0x4aeb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03A5
        gbc.setState(0xad6b, 0xa6c7, 0x8c60, 0xd1ef, 0x96d9, 0x9182, 0x1, 0x1);
        gbc.writeMem(0xad6b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xa6c7, gbc.sp());
        EXPECT(0xad6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad6b));
        EXPECT(0x75, gbc.readMem(0xad6c));
        // CB 75 03A6
        gbc.setState(0x9198, 0x6fb5, 0x4390, 0xe1ed, 0x5ee, 0x6c26, 0x1, 0x1);
        gbc.writeMem(0x9198, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x6fb5, gbc.sp());
        EXPECT(0x919a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9198));
        EXPECT(0x75, gbc.readMem(0x9199));
        // CB 75 03A7
        gbc.setState(0xac9d, 0xed4c, 0x64a0, 0x873d, 0xd7ab, 0x3927, 0x0, 0x1);
        gbc.writeMem(0xac9d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xed4c, gbc.sp());
        EXPECT(0xac9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac9d));
        EXPECT(0x75, gbc.readMem(0xac9e));
        // CB 75 03A8
        gbc.setState(0xe9d1, 0x17c7, 0xf140, 0x8e17, 0xab2a, 0x95e5, 0x1, 0x1);
        gbc.writeMem(0xe9d1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x17c7, gbc.sp());
        EXPECT(0xe9d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9d1));
        EXPECT(0x75, gbc.readMem(0xe9d2));
        // CB 75 03A9
        gbc.setState(0xc1e6, 0x8af1, 0xb660, 0xe5e7, 0xd7db, 0x3d, 0x0, 0x1);
        gbc.writeMem(0xc1e6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x8af1, gbc.sp());
        EXPECT(0xc1e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1e6));
        EXPECT(0x75, gbc.readMem(0xc1e7));
        // CB 75 03AA
        gbc.setState(0xa9b, 0xc4b, 0x2440, 0xb4c3, 0xb7ae, 0xb505, 0x0, 0x1);
        gbc.writeMem(0xa9b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xc4b, gbc.sp());
        EXPECT(0xa9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03AB
        gbc.setState(0x308c, 0x8c87, 0x5120, 0xe404, 0xb384, 0x8653, 0x0, 0x1);
        gbc.writeMem(0x308c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x8c87, gbc.sp());
        EXPECT(0x308e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03AC
        gbc.setState(0xae7a, 0xd9a7, 0x9c20, 0x85d1, 0x3724, 0xbe8d, 0x1, 0x1);
        gbc.writeMem(0xae7a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xd9a7, gbc.sp());
        EXPECT(0xae7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae7a));
        EXPECT(0x75, gbc.readMem(0xae7b));
        // CB 75 03AD
        gbc.setState(0x383f, 0x38cf, 0xd9d0, 0xd600, 0x945f, 0xffe, 0x1, 0x0);
        gbc.writeMem(0x383f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x38cf, gbc.sp());
        EXPECT(0x3841, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03AE
        gbc.setState(0xdb5, 0x116c, 0xaa10, 0x4173, 0xaaea, 0x6956, 0x1, 0x0);
        gbc.writeMem(0xdb5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x116c, gbc.sp());
        EXPECT(0xdb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03AF
        gbc.setState(0x602c, 0x8081, 0xa680, 0x2b34, 0x3bcd, 0x8420, 0x1, 0x1);
        gbc.writeMem(0x602c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x8081, gbc.sp());
        EXPECT(0x602e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03B0
        gbc.setState(0x6cbd, 0x8559, 0xf830, 0x2496, 0xc5a5, 0x3f4e, 0x0, 0x0);
        gbc.writeMem(0x6cbd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x8559, gbc.sp());
        EXPECT(0x6cbf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03B1
        gbc.setState(0x3d74, 0xa3dc, 0x12e0, 0x3c28, 0xc33b, 0x4595, 0x1, 0x1);
        gbc.writeMem(0x3d74, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xa3dc, gbc.sp());
        EXPECT(0x3d76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03B3
        gbc.setState(0xeb22, 0xb393, 0xdcd0, 0xa4d4, 0xcc32, 0x46f6, 0x1, 0x0);
        gbc.writeMem(0xeb22, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xb393, gbc.sp());
        EXPECT(0xeb24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb22));
        EXPECT(0x75, gbc.readMem(0xeb23));
        // CB 75 03B4
        gbc.setState(0xceaa, 0x8953, 0x1e50, 0xb1bd, 0xa87d, 0x7eac, 0x0, 0x1);
        gbc.writeMem(0xceaa, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x8953, gbc.sp());
        EXPECT(0xceac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xceaa));
        EXPECT(0x75, gbc.readMem(0xceab));
        // CB 75 03B5
        gbc.setState(0x748d, 0xbd5b, 0xd160, 0xfde2, 0x6c68, 0x99ed, 0x1, 0x0);
        gbc.writeMem(0x748d, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xbd5b, gbc.sp());
        EXPECT(0x748f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03B6
        gbc.setState(0xe258, 0xdb2f, 0xefa0, 0xcfcc, 0x2381, 0xd51a, 0x0, 0x0);
        gbc.writeMem(0xe258, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xdb2f, gbc.sp());
        EXPECT(0xe25a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe258));
        EXPECT(0x75, gbc.readMem(0xe259));
        // CB 75 03B7
        gbc.setState(0x1c2c, 0x6a1, 0x8790, 0xd189, 0x4994, 0xef95, 0x0, 0x0);
        gbc.writeMem(0x1c2c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x6a1, gbc.sp());
        EXPECT(0x1c2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03B8
        gbc.setState(0xd630, 0x7221, 0x9ec0, 0xe713, 0x1f9e, 0x7007, 0x0, 0x0);
        gbc.writeMem(0xd630, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x7221, gbc.sp());
        EXPECT(0xd632, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd630));
        EXPECT(0x75, gbc.readMem(0xd631));
        // CB 75 03B9
        gbc.setState(0xafc6, 0x253d, 0x1540, 0x3a0b, 0xeeb6, 0x1bb7, 0x1, 0x0);
        gbc.writeMem(0xafc6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x253d, gbc.sp());
        EXPECT(0xafc8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafc6));
        EXPECT(0x75, gbc.readMem(0xafc7));
        // CB 75 03BB
        gbc.setState(0xa14b, 0xca2e, 0xb0c0, 0x1d22, 0xec49, 0x616f, 0x1, 0x1);
        gbc.writeMem(0xa14b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xca2e, gbc.sp());
        EXPECT(0xa14d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa14b));
        EXPECT(0x75, gbc.readMem(0xa14c));
        // CB 75 03BC
        gbc.setState(0x7019, 0xe2f8, 0x1090, 0x166f, 0xda6a, 0xea8a, 0x0, 0x1);
        gbc.writeMem(0x7019, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xe2f8, gbc.sp());
        EXPECT(0x701b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03BD
        gbc.setState(0x9193, 0x6648, 0x25d0, 0x6dc3, 0xa9e3, 0x2a03, 0x1, 0x0);
        gbc.writeMem(0x9193, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x6648, gbc.sp());
        EXPECT(0x9195, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9193));
        EXPECT(0x75, gbc.readMem(0x9194));
        // CB 75 03BE
        gbc.setState(0xd2ed, 0x9e3f, 0xea0, 0x84e7, 0xec1b, 0xdd96, 0x1, 0x0);
        gbc.writeMem(0xd2ed, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x9e3f, gbc.sp());
        EXPECT(0xd2ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2ed));
        EXPECT(0x75, gbc.readMem(0xd2ee));
        // CB 75 03BF
        gbc.setState(0x938b, 0x5419, 0x6010, 0x458a, 0x4933, 0x5057, 0x0, 0x1);
        gbc.writeMem(0x938b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x5419, gbc.sp());
        EXPECT(0x938d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x938b));
        EXPECT(0x75, gbc.readMem(0x938c));
        // CB 75 03C0
        gbc.setState(0x7c8, 0x197a, 0x6410, 0xcf3f, 0xe7f, 0xf6d1, 0x1, 0x1);
        gbc.writeMem(0x7c8, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x197a, gbc.sp());
        EXPECT(0x7ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03C1
        gbc.setState(0xa162, 0xef00, 0x1880, 0xf057, 0xc8f6, 0x4c2, 0x0, 0x1);
        gbc.writeMem(0xa162, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xef00, gbc.sp());
        EXPECT(0xa164, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa162));
        EXPECT(0x75, gbc.readMem(0xa163));
        // CB 75 03C2
        gbc.setState(0xe422, 0x4f70, 0xb7a0, 0xe384, 0xd6a7, 0x54f6, 0x0, 0x1);
        gbc.writeMem(0xe422, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x4f70, gbc.sp());
        EXPECT(0xe424, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe422));
        EXPECT(0x75, gbc.readMem(0xe423));
        // CB 75 03C3
        gbc.setState(0x5d0c, 0x754b, 0x3230, 0x9c53, 0xe61f, 0x653e, 0x0, 0x1);
        gbc.writeMem(0x5d0c, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x754b, gbc.sp());
        EXPECT(0x5d0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03C4
        gbc.setState(0x3bd, 0xd7ca, 0xf7d0, 0x2715, 0x42b9, 0xc668, 0x1, 0x0);
        gbc.writeMem(0x3bd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xd7ca, gbc.sp());
        EXPECT(0x3bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03C5
        gbc.setState(0x714e, 0x315, 0xb0d0, 0x9a0f, 0xdc51, 0x69b, 0x0, 0x1);
        gbc.writeMem(0x714e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x315, gbc.sp());
        EXPECT(0x7150, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03C6
        gbc.setState(0x30c1, 0x8668, 0xa350, 0x5bbc, 0x51b2, 0x2d22, 0x0, 0x0);
        gbc.writeMem(0x30c1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x8668, gbc.sp());
        EXPECT(0x30c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03C7
        gbc.setState(0xa93f, 0x16f0, 0xd780, 0x4c11, 0x746e, 0x86fe, 0x1, 0x1);
        gbc.writeMem(0xa93f, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x16f0, gbc.sp());
        EXPECT(0xa941, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa93f));
        EXPECT(0x75, gbc.readMem(0xa940));
        // CB 75 03C8
        gbc.setState(0xa0f7, 0x684, 0x540, 0x83b9, 0x3f6e, 0x4c03, 0x1, 0x0);
        gbc.writeMem(0xa0f7, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x684, gbc.sp());
        EXPECT(0xa0f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0f7));
        EXPECT(0x75, gbc.readMem(0xa0f8));
        // CB 75 03C9
        gbc.setState(0xd425, 0x65a0, 0x5ec0, 0x563b, 0x2517, 0xced5, 0x0, 0x1);
        gbc.writeMem(0xd425, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x65a0, gbc.sp());
        EXPECT(0xd427, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd425));
        EXPECT(0x75, gbc.readMem(0xd426));
        // CB 75 03CA
        gbc.setState(0xae9b, 0xd194, 0x7d80, 0x3b38, 0xecd3, 0xe1d3, 0x0, 0x1);
        gbc.writeMem(0xae9b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xd194, gbc.sp());
        EXPECT(0xae9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae9b));
        EXPECT(0x75, gbc.readMem(0xae9c));
        // CB 75 03CB
        gbc.setState(0x862, 0xdeb7, 0xf850, 0xccad, 0x1274, 0x6a44, 0x1, 0x1);
        gbc.writeMem(0x862, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xdeb7, gbc.sp());
        EXPECT(0x864, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03CC
        gbc.setState(0x1ba6, 0x1f66, 0x2580, 0x7b15, 0x53ee, 0x31e5, 0x1, 0x0);
        gbc.writeMem(0x1ba6, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x1f66, gbc.sp());
        EXPECT(0x1ba8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03CD
        gbc.setState(0x218e, 0xd2a4, 0xefd0, 0x90bf, 0x5107, 0x4562, 0x1, 0x1);
        gbc.writeMem(0x218e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xd2a4, gbc.sp());
        EXPECT(0x2190, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03CE
        gbc.setState(0xa219, 0x64c9, 0x5df0, 0x354a, 0x28b8, 0xf247, 0x0, 0x1);
        gbc.writeMem(0xa219, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x64c9, gbc.sp());
        EXPECT(0xa21b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa219));
        EXPECT(0x75, gbc.readMem(0xa21a));
        // CB 75 03CF
        gbc.setState(0x4c1a, 0xf309, 0xb860, 0xf700, 0xb87f, 0xe1d0, 0x1, 0x0);
        gbc.writeMem(0x4c1a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xf309, gbc.sp());
        EXPECT(0x4c1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03D0
        gbc.setState(0x155b, 0xb74b, 0x0, 0xa208, 0x9c11, 0xaa44, 0x0, 0x1);
        gbc.writeMem(0x155b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xb74b, gbc.sp());
        EXPECT(0x155d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03D1
        gbc.setState(0xaa81, 0x30c5, 0xafc0, 0x9677, 0x7a56, 0xe85e, 0x1, 0x1);
        gbc.writeMem(0xaa81, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x30c5, gbc.sp());
        EXPECT(0xaa83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa81));
        EXPECT(0x75, gbc.readMem(0xaa82));
        // CB 75 03D2
        gbc.setState(0xd189, 0xe6a5, 0xc8b0, 0x5bf7, 0x23d5, 0x3b09, 0x1, 0x0);
        gbc.writeMem(0xd189, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xe6a5, gbc.sp());
        EXPECT(0xd18b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd189));
        EXPECT(0x75, gbc.readMem(0xd18a));
        // CB 75 03D3
        gbc.setState(0x82ab, 0xb7a1, 0x3b80, 0x3ead, 0xf748, 0x10ea, 0x1, 0x0);
        gbc.writeMem(0x82ab, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xb7a1, gbc.sp());
        EXPECT(0x82ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82ab));
        EXPECT(0x75, gbc.readMem(0x82ac));
        // CB 75 03D4
        gbc.setState(0xacbd, 0x301d, 0x2d80, 0xcce8, 0x684f, 0xc5e6, 0x1, 0x0);
        gbc.writeMem(0xacbd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x301d, gbc.sp());
        EXPECT(0xacbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacbd));
        EXPECT(0x75, gbc.readMem(0xacbe));
        // CB 75 03D5
        gbc.setState(0xaf28, 0x2013, 0xe160, 0xc7b5, 0x24fd, 0xff95, 0x1, 0x1);
        gbc.writeMem(0xaf28, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x2013, gbc.sp());
        EXPECT(0xaf2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf28));
        EXPECT(0x75, gbc.readMem(0xaf29));
        // CB 75 03D6
        gbc.setState(0x7dd4, 0x74f4, 0x2160, 0x2abb, 0x8698, 0x4bed, 0x1, 0x1);
        gbc.writeMem(0x7dd4, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x74f4, gbc.sp());
        EXPECT(0x7dd6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03D7
        gbc.setState(0xc2de, 0x7eb2, 0xe0b0, 0x6ae0, 0xb89e, 0x2480, 0x1, 0x0);
        gbc.writeMem(0xc2de, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x7eb2, gbc.sp());
        EXPECT(0xc2e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2de));
        EXPECT(0x75, gbc.readMem(0xc2df));
        // CB 75 03D8
        gbc.setState(0x139e, 0x78d9, 0xf880, 0x382e, 0xf102, 0x191a, 0x0, 0x0);
        gbc.writeMem(0x139e, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x78d9, gbc.sp());
        EXPECT(0x13a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03D9
        gbc.setState(0xe03a, 0x5895, 0x3d20, 0x15ae, 0x30be, 0x59a4, 0x0, 0x0);
        gbc.writeMem(0xe03a, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x5895, gbc.sp());
        EXPECT(0xe03c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe03a));
        EXPECT(0x75, gbc.readMem(0xe03b));
        // CB 75 03DA
        gbc.setState(0x5ad1, 0x6085, 0x4a80, 0xe703, 0x6890, 0x50e1, 0x1, 0x0);
        gbc.writeMem(0x5ad1, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x6085, gbc.sp());
        EXPECT(0x5ad3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03DB
        gbc.setState(0x36b5, 0x134, 0xa2e0, 0x5420, 0xa773, 0x3437, 0x0, 0x1);
        gbc.writeMem(0x36b5, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x134, gbc.sp());
        EXPECT(0x36b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03DC
        gbc.setState(0x8720, 0x54f, 0x2a40, 0xa85b, 0xd362, 0x5202, 0x0, 0x0);
        gbc.writeMem(0x8720, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x54f, gbc.sp());
        EXPECT(0x8722, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8720));
        EXPECT(0x75, gbc.readMem(0x8721));
        // CB 75 03DD
        gbc.setState(0x52fd, 0xbb15, 0xa3a0, 0xbcf1, 0x93db, 0xec4f, 0x0, 0x0);
        gbc.writeMem(0x52fd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xbb15, gbc.sp());
        EXPECT(0x52ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03DE
        gbc.setState(0x7918, 0xd01, 0x2710, 0x110d, 0x49a, 0x82ba, 0x0, 0x0);
        gbc.writeMem(0x7918, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xd01, gbc.sp());
        EXPECT(0x791a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03DF
        gbc.setState(0x4ebc, 0x5078, 0xb3e0, 0x8a4e, 0xecb4, 0x3295, 0x0, 0x1);
        gbc.writeMem(0x4ebc, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x5078, gbc.sp());
        EXPECT(0x4ebe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03E0
        gbc.setState(0x52dd, 0x3716, 0xd270, 0xfd08, 0xbeb, 0xb2c5, 0x0, 0x1);
        gbc.writeMem(0x52dd, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x3716, gbc.sp());
        EXPECT(0x52df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 75 03E1
        gbc.setState(0x1bea, 0x1016, 0xe660, 0xb130, 0xc7d9, 0x3abd, 0x1, 0x1);
        gbc.writeMem(0x1bea, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x1016, gbc.sp());
        EXPECT(0x1bec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03E2
        gbc.setState(0xd376, 0xbeba, 0x9bb0, 0x8249, 0x5143, 0x33a1, 0x1, 0x0);
        gbc.writeMem(0xd376, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xbeba, gbc.sp());
        EXPECT(0xd378, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd376));
        EXPECT(0x75, gbc.readMem(0xd377));
        // CB 75 03E3
        gbc.setState(0x4853, 0x933c, 0xbae0, 0x27a6, 0x6f02, 0x3112, 0x0, 0x0);
        gbc.writeMem(0x4853, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x933c, gbc.sp());
        EXPECT(0x4855, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03E5
        gbc.setState(0x846, 0x2e0c, 0x5f60, 0x6e55, 0xc385, 0x1d2f, 0x1, 0x1);
        gbc.writeMem(0x846, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x2e0c, gbc.sp());
        EXPECT(0x848, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 75 03E6
        gbc.setState(0xe7a0, 0x1568, 0xc320, 0xd4b4, 0xfedb, 0x2eef, 0x0, 0x1);
        gbc.writeMem(0xe7a0, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x1568, gbc.sp());
        EXPECT(0xe7a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7a0));
        EXPECT(0x75, gbc.readMem(0xe7a1));
        // CB 75 03E7
        gbc.setState(0x9b6b, 0xd7ad, 0x8330, 0xfc96, 0x2a03, 0xfe9e, 0x0, 0x0);
        gbc.writeMem(0x9b6b, { 0xcb, 0x75 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xd7ad, gbc.sp());
        EXPECT(0x9b6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b6b));
        EXPECT(0x75, gbc.readMem(0x9b6c));
    }
