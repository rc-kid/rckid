    TEST(gbcemu, opcode_cb_25) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 25 0000
        gbc.setState(0xa783, 0x37d3, 0x2770, 0xb57, 0x3351, 0x5b1e, 0x0, 0x1);
        gbc.writeMem(0xa783, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x37d3, gbc.sp());
        EXPECT(0xa785, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa783));
        EXPECT(0x25, gbc.readMem(0xa784));
        // CB 25 0001
        gbc.setState(0xe5df, 0x5d25, 0x4780, 0x99d3, 0xed23, 0x1f07, 0x1, 0x1);
        gbc.writeMem(0xe5df, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x5d25, gbc.sp());
        EXPECT(0xe5e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5df));
        EXPECT(0x25, gbc.readMem(0xe5e0));
        // CB 25 0002
        gbc.setState(0x78a1, 0x8d6e, 0x43a0, 0xe410, 0x69a2, 0xf2d8, 0x1, 0x1);
        gbc.writeMem(0x78a1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x8d6e, gbc.sp());
        EXPECT(0x78a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0003
        gbc.setState(0x9fe5, 0xa01e, 0x140, 0xba4a, 0x7f63, 0xb8df, 0x1, 0x0);
        gbc.writeMem(0x9fe5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xa01e, gbc.sp());
        EXPECT(0x9fe7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fe5));
        EXPECT(0x25, gbc.readMem(0x9fe6));
        // CB 25 0004
        gbc.setState(0xc3f8, 0x370f, 0x7f10, 0x2ef, 0x388c, 0x13a3, 0x0, 0x1);
        gbc.writeMem(0xc3f8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x370f, gbc.sp());
        EXPECT(0xc3fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3f8));
        EXPECT(0x25, gbc.readMem(0xc3f9));
        // CB 25 0005
        gbc.setState(0x8600, 0x63bb, 0x57a0, 0xf4e1, 0xd53d, 0x4630, 0x0, 0x0);
        gbc.writeMem(0x8600, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x63bb, gbc.sp());
        EXPECT(0x8602, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8600));
        EXPECT(0x25, gbc.readMem(0x8601));
        // CB 25 0006
        gbc.setState(0x4c86, 0x11cf, 0x7f0, 0xf866, 0xf817, 0xe61c, 0x1, 0x1);
        gbc.writeMem(0x4c86, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x11cf, gbc.sp());
        EXPECT(0x4c88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0007
        gbc.setState(0x9dad, 0x3570, 0x4350, 0x367d, 0x8e96, 0x8ba, 0x0, 0x1);
        gbc.writeMem(0x9dad, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x3570, gbc.sp());
        EXPECT(0x9daf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9dad));
        EXPECT(0x25, gbc.readMem(0x9dae));
        // CB 25 0008
        gbc.setState(0xe31a, 0x154, 0xdc40, 0xea18, 0xa714, 0x4a88, 0x1, 0x0);
        gbc.writeMem(0xe31a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x154, gbc.sp());
        EXPECT(0xe31c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe31a));
        EXPECT(0x25, gbc.readMem(0xe31b));
        // CB 25 0009
        gbc.setState(0x61bd, 0x188, 0xe70, 0x5d7b, 0x89a0, 0x7a18, 0x1, 0x0);
        gbc.writeMem(0x61bd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x188, gbc.sp());
        EXPECT(0x61bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 000B
        gbc.setState(0x8a75, 0x5d65, 0x20d0, 0x95af, 0xe241, 0x2f27, 0x0, 0x0);
        gbc.writeMem(0x8a75, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x5d65, gbc.sp());
        EXPECT(0x8a77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a75));
        EXPECT(0x25, gbc.readMem(0x8a76));
        // CB 25 000C
        gbc.setState(0x6c01, 0xa3e8, 0x7ab0, 0xa0cf, 0x2e2, 0xcb51, 0x1, 0x0);
        gbc.writeMem(0x6c01, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xa3e8, gbc.sp());
        EXPECT(0x6c03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 000D
        gbc.setState(0x7199, 0x5d97, 0xaa00, 0x7d4e, 0x3863, 0xfdf8, 0x0, 0x1);
        gbc.writeMem(0x7199, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x5d97, gbc.sp());
        EXPECT(0x719b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 000E
        gbc.setState(0xe406, 0x2c46, 0x46b0, 0x6141, 0x97fd, 0x637, 0x1, 0x0);
        gbc.writeMem(0xe406, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x2c46, gbc.sp());
        EXPECT(0xe408, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe406));
        EXPECT(0x25, gbc.readMem(0xe407));
        // CB 25 000F
        gbc.setState(0xc396, 0xd081, 0x11d0, 0xc6e5, 0x7b68, 0xe820, 0x1, 0x1);
        gbc.writeMem(0xc396, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xd081, gbc.sp());
        EXPECT(0xc398, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc396));
        EXPECT(0x25, gbc.readMem(0xc397));
        // CB 25 0010
        gbc.setState(0x741, 0x9cf2, 0xc430, 0xa98, 0xc54, 0xa58f, 0x0, 0x1);
        gbc.writeMem(0x741, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x9cf2, gbc.sp());
        EXPECT(0x743, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0011
        gbc.setState(0x755e, 0xb9ae, 0xf2d0, 0x8472, 0x78b0, 0xfa6e, 0x1, 0x1);
        gbc.writeMem(0x755e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xb9ae, gbc.sp());
        EXPECT(0x7560, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0012
        gbc.setState(0xe783, 0xc669, 0xaac0, 0xf3d0, 0xa5a4, 0xf5c1, 0x1, 0x1);
        gbc.writeMem(0xe783, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xc669, gbc.sp());
        EXPECT(0xe785, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe783));
        EXPECT(0x25, gbc.readMem(0xe784));
        // CB 25 0013
        gbc.setState(0x4436, 0x929d, 0x9dd0, 0x85ff, 0x6e1e, 0x7230, 0x0, 0x0);
        gbc.writeMem(0x4436, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x929d, gbc.sp());
        EXPECT(0x4438, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0015
        gbc.setState(0x63fc, 0x3467, 0xd9f0, 0x2895, 0x18aa, 0x3b6e, 0x0, 0x0);
        gbc.writeMem(0x63fc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x3467, gbc.sp());
        EXPECT(0x63fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0016
        gbc.setState(0x6a15, 0x7006, 0xd5a0, 0xae00, 0x46da, 0x2c90, 0x0, 0x0);
        gbc.writeMem(0x6a15, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x7006, gbc.sp());
        EXPECT(0x6a17, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0017
        gbc.setState(0xcbe7, 0x5c90, 0x23c0, 0x5eba, 0x5d5c, 0xc2b6, 0x0, 0x0);
        gbc.writeMem(0xcbe7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x5c90, gbc.sp());
        EXPECT(0xcbe9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbe7));
        EXPECT(0x25, gbc.readMem(0xcbe8));
        // CB 25 0018
        gbc.setState(0xd6e5, 0x6893, 0x35a0, 0xddce, 0x93a2, 0xb66f, 0x0, 0x1);
        gbc.writeMem(0xd6e5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x6893, gbc.sp());
        EXPECT(0xd6e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6e5));
        EXPECT(0x25, gbc.readMem(0xd6e6));
        // CB 25 0019
        gbc.setState(0xd34b, 0x933a, 0xe730, 0x9fd6, 0x6faa, 0xad88, 0x0, 0x1);
        gbc.writeMem(0xd34b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x933a, gbc.sp());
        EXPECT(0xd34d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd34b));
        EXPECT(0x25, gbc.readMem(0xd34c));
        // CB 25 001A
        gbc.setState(0xdf5, 0x1184, 0x1900, 0xdd88, 0xe68e, 0xbeea, 0x1, 0x1);
        gbc.writeMem(0xdf5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x1184, gbc.sp());
        EXPECT(0xdf7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 001B
        gbc.setState(0xd5b7, 0x938a, 0xd960, 0x652, 0x9678, 0xe4cc, 0x0, 0x1);
        gbc.writeMem(0xd5b7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x938a, gbc.sp());
        EXPECT(0xd5b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5b7));
        EXPECT(0x25, gbc.readMem(0xd5b8));
        // CB 25 001C
        gbc.setState(0x8031, 0x7d70, 0x280, 0x6a33, 0xa48e, 0x8c03, 0x0, 0x1);
        gbc.writeMem(0x8031, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x7d70, gbc.sp());
        EXPECT(0x8033, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8031));
        EXPECT(0x25, gbc.readMem(0x8032));
        // CB 25 001D
        gbc.setState(0x79dc, 0x8a7f, 0xf700, 0x761b, 0xc55, 0x7479, 0x1, 0x1);
        gbc.writeMem(0x79dc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x8a7f, gbc.sp());
        EXPECT(0x79de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 001E
        gbc.setState(0xba60, 0x58b2, 0x4420, 0x87c2, 0x774b, 0x1a3, 0x0, 0x1);
        gbc.writeMem(0xba60, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x58b2, gbc.sp());
        EXPECT(0xba62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba60));
        EXPECT(0x25, gbc.readMem(0xba61));
        // CB 25 001F
        gbc.setState(0x1f4a, 0x74e9, 0x51a0, 0xa8ca, 0xa8f3, 0x6ae9, 0x0, 0x1);
        gbc.writeMem(0x1f4a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x74e9, gbc.sp());
        EXPECT(0x1f4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0020
        gbc.setState(0x30d4, 0x13bc, 0x4a20, 0x7483, 0xc34d, 0x3942, 0x0, 0x0);
        gbc.writeMem(0x30d4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x13bc, gbc.sp());
        EXPECT(0x30d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0021
        gbc.setState(0x5d42, 0x93b1, 0x4910, 0xeee6, 0x826d, 0x50f9, 0x1, 0x1);
        gbc.writeMem(0x5d42, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x93b1, gbc.sp());
        EXPECT(0x5d44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0022
        gbc.setState(0x8108, 0x1b64, 0xbbb0, 0x380b, 0x8479, 0x54c0, 0x1, 0x1);
        gbc.writeMem(0x8108, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x1b64, gbc.sp());
        EXPECT(0x810a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8108));
        EXPECT(0x25, gbc.readMem(0x8109));
        // CB 25 0023
        gbc.setState(0x537d, 0x1f1a, 0xc290, 0xd213, 0x8a40, 0x1c61, 0x0, 0x1);
        gbc.writeMem(0x537d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x1f1a, gbc.sp());
        EXPECT(0x537f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0024
        gbc.setState(0x6de6, 0x2e19, 0x5810, 0xd69c, 0xbac8, 0x61a6, 0x0, 0x0);
        gbc.writeMem(0x6de6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x2e19, gbc.sp());
        EXPECT(0x6de8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0025
        gbc.setState(0xe495, 0xe7c0, 0x8800, 0xbc, 0xa05, 0x417d, 0x1, 0x0);
        gbc.writeMem(0xe495, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xe7c0, gbc.sp());
        EXPECT(0xe497, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe495));
        EXPECT(0x25, gbc.readMem(0xe496));
        // CB 25 0026
        gbc.setState(0xec5c, 0x2ff7, 0x6810, 0x9437, 0xb471, 0xa23, 0x1, 0x0);
        gbc.writeMem(0xec5c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x2ff7, gbc.sp());
        EXPECT(0xec5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec5c));
        EXPECT(0x25, gbc.readMem(0xec5d));
        // CB 25 0027
        gbc.setState(0x95c5, 0x4e75, 0xe790, 0x2c03, 0x7287, 0xa5d0, 0x1, 0x0);
        gbc.writeMem(0x95c5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x4e75, gbc.sp());
        EXPECT(0x95c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95c5));
        EXPECT(0x25, gbc.readMem(0x95c6));
        // CB 25 0028
        gbc.setState(0x97e8, 0x6ee0, 0x6240, 0xe6e2, 0xd73b, 0x8538, 0x0, 0x0);
        gbc.writeMem(0x97e8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x6ee0, gbc.sp());
        EXPECT(0x97ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97e8));
        EXPECT(0x25, gbc.readMem(0x97e9));
        // CB 25 0029
        gbc.setState(0x9652, 0x5543, 0x9130, 0xcdfe, 0x9a78, 0x5c7, 0x1, 0x1);
        gbc.writeMem(0x9652, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x5543, gbc.sp());
        EXPECT(0x9654, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9652));
        EXPECT(0x25, gbc.readMem(0x9653));
        // CB 25 002A
        gbc.setState(0xe510, 0xb54c, 0x19e0, 0x7b91, 0xbc0b, 0xd743, 0x0, 0x0);
        gbc.writeMem(0xe510, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xb54c, gbc.sp());
        EXPECT(0xe512, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe510));
        EXPECT(0x25, gbc.readMem(0xe511));
        // CB 25 002B
        gbc.setState(0x6f3d, 0xb2fe, 0x7a30, 0xb96f, 0x6e4b, 0x8f09, 0x0, 0x0);
        gbc.writeMem(0x6f3d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xb2fe, gbc.sp());
        EXPECT(0x6f3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 002C
        gbc.setState(0xef1e, 0xd1a4, 0x1660, 0xde02, 0xe95a, 0xdc8e, 0x1, 0x0);
        gbc.writeMem(0xef1e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xd1a4, gbc.sp());
        EXPECT(0xef20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef1e));
        EXPECT(0x25, gbc.readMem(0xef1f));
        // CB 25 002D
        gbc.setState(0x814f, 0xd3c8, 0x6840, 0x1c10, 0x6452, 0x5dfe, 0x1, 0x1);
        gbc.writeMem(0x814f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xd3c8, gbc.sp());
        EXPECT(0x8151, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x814f));
        EXPECT(0x25, gbc.readMem(0x8150));
        // CB 25 002F
        gbc.setState(0x3c88, 0x45a0, 0x66c0, 0x119b, 0xff28, 0xf191, 0x0, 0x1);
        gbc.writeMem(0x3c88, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x45a0, gbc.sp());
        EXPECT(0x3c8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0030
        gbc.setState(0x193d, 0x55dc, 0x1440, 0x4030, 0x6eb6, 0x40ab, 0x1, 0x1);
        gbc.writeMem(0x193d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x55dc, gbc.sp());
        EXPECT(0x193f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0031
        gbc.setState(0xb4cd, 0x7b05, 0x2290, 0x73bf, 0x14a7, 0x300e, 0x0, 0x0);
        gbc.writeMem(0xb4cd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x7b05, gbc.sp());
        EXPECT(0xb4cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4cd));
        EXPECT(0x25, gbc.readMem(0xb4ce));
        // CB 25 0032
        gbc.setState(0x9c45, 0x45a6, 0xbff0, 0xfad5, 0x9cf2, 0xec63, 0x1, 0x0);
        gbc.writeMem(0x9c45, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x45a6, gbc.sp());
        EXPECT(0x9c47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c45));
        EXPECT(0x25, gbc.readMem(0x9c46));
        // CB 25 0033
        gbc.setState(0x6132, 0x9139, 0xf960, 0x96ca, 0x3f3b, 0x77aa, 0x1, 0x0);
        gbc.writeMem(0x6132, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x9139, gbc.sp());
        EXPECT(0x6134, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0034
        gbc.setState(0xa2c2, 0xc06, 0x78b0, 0xc577, 0x6cad, 0xe07, 0x1, 0x0);
        gbc.writeMem(0xa2c2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xc06, gbc.sp());
        EXPECT(0xa2c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2c2));
        EXPECT(0x25, gbc.readMem(0xa2c3));
        // CB 25 0035
        gbc.setState(0xe71e, 0x860a, 0x6780, 0xcea7, 0xf155, 0x98c6, 0x0, 0x1);
        gbc.writeMem(0xe71e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x860a, gbc.sp());
        EXPECT(0xe720, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe71e));
        EXPECT(0x25, gbc.readMem(0xe71f));
        // CB 25 0036
        gbc.setState(0xe81f, 0xad2, 0x7a60, 0x295d, 0x35dc, 0xcb33, 0x1, 0x0);
        gbc.writeMem(0xe81f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xad2, gbc.sp());
        EXPECT(0xe821, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe81f));
        EXPECT(0x25, gbc.readMem(0xe820));
        // CB 25 0037
        gbc.setState(0xd4f2, 0xf76b, 0x2b60, 0xed98, 0xa023, 0xb966, 0x1, 0x1);
        gbc.writeMem(0xd4f2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xf76b, gbc.sp());
        EXPECT(0xd4f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4f2));
        EXPECT(0x25, gbc.readMem(0xd4f3));
        // CB 25 0038
        gbc.setState(0x3f53, 0x4cfb, 0x6080, 0x9b09, 0xd536, 0xc337, 0x1, 0x0);
        gbc.writeMem(0x3f53, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x4cfb, gbc.sp());
        EXPECT(0x3f55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0039
        gbc.setState(0xae3b, 0x6c0e, 0xe6b0, 0x5e8a, 0xafe7, 0xab88, 0x1, 0x0);
        gbc.writeMem(0xae3b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x6c0e, gbc.sp());
        EXPECT(0xae3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae3b));
        EXPECT(0x25, gbc.readMem(0xae3c));
        // CB 25 003A
        gbc.setState(0x239c, 0x5908, 0x1040, 0x55c3, 0xdf4f, 0x34a3, 0x1, 0x0);
        gbc.writeMem(0x239c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x5908, gbc.sp());
        EXPECT(0x239e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 003B
        gbc.setState(0x8a8d, 0xdcbf, 0xda0, 0xe92a, 0x743e, 0x5d0, 0x0, 0x1);
        gbc.writeMem(0x8a8d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xdcbf, gbc.sp());
        EXPECT(0x8a8f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a8d));
        EXPECT(0x25, gbc.readMem(0x8a8e));
        // CB 25 003C
        gbc.setState(0xa59, 0x7e20, 0xe420, 0xaa79, 0xee9e, 0xf4ff, 0x0, 0x0);
        gbc.writeMem(0xa59, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x7e20, gbc.sp());
        EXPECT(0xa5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 003D
        gbc.setState(0x9fd1, 0xe922, 0x6a50, 0xb40b, 0x54df, 0xd7a3, 0x0, 0x0);
        gbc.writeMem(0x9fd1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xe922, gbc.sp());
        EXPECT(0x9fd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fd1));
        EXPECT(0x25, gbc.readMem(0x9fd2));
        // CB 25 003E
        gbc.setState(0x310d, 0xa808, 0xc190, 0xde09, 0xba9c, 0x557c, 0x1, 0x1);
        gbc.writeMem(0x310d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xa808, gbc.sp());
        EXPECT(0x310f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 003F
        gbc.setState(0x6138, 0x901c, 0x5150, 0x65d1, 0x5e00, 0xc8bc, 0x1, 0x1);
        gbc.writeMem(0x6138, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x901c, gbc.sp());
        EXPECT(0x613a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0040
        gbc.setState(0x9e73, 0x7809, 0xc380, 0x97e0, 0xf246, 0x5ad6, 0x0, 0x1);
        gbc.writeMem(0x9e73, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x7809, gbc.sp());
        EXPECT(0x9e75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e73));
        EXPECT(0x25, gbc.readMem(0x9e74));
        // CB 25 0041
        gbc.setState(0xc42c, 0x5c91, 0x790, 0x600c, 0xa959, 0x1126, 0x1, 0x0);
        gbc.writeMem(0xc42c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x5c91, gbc.sp());
        EXPECT(0xc42e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc42c));
        EXPECT(0x25, gbc.readMem(0xc42d));
        // CB 25 0043
        gbc.setState(0x5653, 0x5109, 0xeff0, 0x174a, 0x54f4, 0x699f, 0x1, 0x1);
        gbc.writeMem(0x5653, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x5109, gbc.sp());
        EXPECT(0x5655, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0044
        gbc.setState(0x9434, 0x55ae, 0xd560, 0x167, 0xda9e, 0x35d6, 0x0, 0x0);
        gbc.writeMem(0x9434, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x55ae, gbc.sp());
        EXPECT(0x9436, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9434));
        EXPECT(0x25, gbc.readMem(0x9435));
        // CB 25 0045
        gbc.setState(0x9d88, 0x41ea, 0x24b0, 0x7f34, 0xbe6, 0xd6cd, 0x0, 0x0);
        gbc.writeMem(0x9d88, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x41ea, gbc.sp());
        EXPECT(0x9d8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d88));
        EXPECT(0x25, gbc.readMem(0x9d89));
        // CB 25 0046
        gbc.setState(0x6104, 0x3aba, 0xbcd0, 0x8e7a, 0x7e70, 0x6ebd, 0x1, 0x0);
        gbc.writeMem(0x6104, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x3aba, gbc.sp());
        EXPECT(0x6106, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0047
        gbc.setState(0x70f2, 0x3bc5, 0xb880, 0xe2b8, 0x1d27, 0x4845, 0x0, 0x0);
        gbc.writeMem(0x70f2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x3bc5, gbc.sp());
        EXPECT(0x70f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0048
        gbc.setState(0x71d9, 0xfdc9, 0xebd0, 0x17b0, 0xb542, 0xaa2b, 0x1, 0x1);
        gbc.writeMem(0x71d9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xfdc9, gbc.sp());
        EXPECT(0x71db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0049
        gbc.setState(0x521c, 0xa1bc, 0x8c90, 0xb715, 0x3a1c, 0xfbc, 0x0, 0x0);
        gbc.writeMem(0x521c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xa1bc, gbc.sp());
        EXPECT(0x521e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 004A
        gbc.setState(0x6388, 0x3d2a, 0xb5e0, 0xed1b, 0x20c9, 0x18b6, 0x0, 0x0);
        gbc.writeMem(0x6388, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x3d2a, gbc.sp());
        EXPECT(0x638a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 004B
        gbc.setState(0x24ce, 0x5fec, 0x8190, 0xb5e9, 0x721, 0xe5bd, 0x1, 0x0);
        gbc.writeMem(0x24ce, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x5fec, gbc.sp());
        EXPECT(0x24d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 004C
        gbc.setState(0xc070, 0x2945, 0x18b0, 0x7c3, 0x6e3d, 0xd965, 0x0, 0x1);
        gbc.writeMem(0xc070, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x2945, gbc.sp());
        EXPECT(0xc072, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc070));
        EXPECT(0x25, gbc.readMem(0xc071));
        // CB 25 004D
        gbc.setState(0xecf6, 0xd12, 0x3270, 0x40b6, 0xd431, 0x88fd, 0x1, 0x1);
        gbc.writeMem(0xecf6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xd12, gbc.sp());
        EXPECT(0xecf8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecf6));
        EXPECT(0x25, gbc.readMem(0xecf7));
        // CB 25 004E
        gbc.setState(0x94ae, 0x4755, 0x4260, 0xfb8e, 0xb9a, 0xb896, 0x0, 0x1);
        gbc.writeMem(0x94ae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x4755, gbc.sp());
        EXPECT(0x94b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94ae));
        EXPECT(0x25, gbc.readMem(0x94af));
        // CB 25 004F
        gbc.setState(0x5394, 0xa9fe, 0x9740, 0x24e5, 0x84c, 0x44fc, 0x0, 0x1);
        gbc.writeMem(0x5394, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xa9fe, gbc.sp());
        EXPECT(0x5396, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0050
        gbc.setState(0x5562, 0x151b, 0xa570, 0x423f, 0xfd14, 0xba78, 0x1, 0x0);
        gbc.writeMem(0x5562, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x151b, gbc.sp());
        EXPECT(0x5564, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0051
        gbc.setState(0x8013, 0xf3b0, 0xbf90, 0xcb1f, 0xc714, 0x630c, 0x0, 0x1);
        gbc.writeMem(0x8013, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xf3b0, gbc.sp());
        EXPECT(0x8015, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8013));
        EXPECT(0x25, gbc.readMem(0x8014));
        // CB 25 0052
        gbc.setState(0x26b1, 0x4bba, 0x2940, 0xf615, 0x4a4a, 0xc78f, 0x0, 0x0);
        gbc.writeMem(0x26b1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x4bba, gbc.sp());
        EXPECT(0x26b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0053
        gbc.setState(0xb549, 0xa617, 0xdee0, 0x66e1, 0x75da, 0xd5e0, 0x1, 0x0);
        gbc.writeMem(0xb549, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xa617, gbc.sp());
        EXPECT(0xb54b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb549));
        EXPECT(0x25, gbc.readMem(0xb54a));
        // CB 25 0054
        gbc.setState(0x8304, 0xb0b6, 0xb1c0, 0xafed, 0xe2dc, 0x4711, 0x1, 0x0);
        gbc.writeMem(0x8304, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xb0b6, gbc.sp());
        EXPECT(0x8306, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8304));
        EXPECT(0x25, gbc.readMem(0x8305));
        // CB 25 0055
        gbc.setState(0x6317, 0x7156, 0xb6a0, 0x8059, 0xf123, 0x8283, 0x0, 0x1);
        gbc.writeMem(0x6317, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x7156, gbc.sp());
        EXPECT(0x6319, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0057
        gbc.setState(0x4336, 0xb022, 0x9c00, 0xd168, 0x5e2, 0xf960, 0x1, 0x1);
        gbc.writeMem(0x4336, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xb022, gbc.sp());
        EXPECT(0x4338, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0058
        gbc.setState(0xacb1, 0x4248, 0x79d0, 0xd6d3, 0x63fd, 0x1241, 0x1, 0x0);
        gbc.writeMem(0xacb1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x4248, gbc.sp());
        EXPECT(0xacb3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacb1));
        EXPECT(0x25, gbc.readMem(0xacb2));
        // CB 25 0059
        gbc.setState(0x688, 0x9fa8, 0xbc20, 0x92f2, 0x4a9b, 0x3c5e, 0x0, 0x1);
        gbc.writeMem(0x688, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x9fa8, gbc.sp());
        EXPECT(0x68a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 005B
        gbc.setState(0x6e9, 0xbfb7, 0x5fb0, 0xbc66, 0x9f92, 0x9e47, 0x1, 0x1);
        gbc.writeMem(0x6e9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xbfb7, gbc.sp());
        EXPECT(0x6eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 005C
        gbc.setState(0x2352, 0xb3d3, 0x2280, 0x8546, 0xa7c9, 0x7a99, 0x0, 0x0);
        gbc.writeMem(0x2352, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xb3d3, gbc.sp());
        EXPECT(0x2354, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 005D
        gbc.setState(0xab16, 0x502d, 0x92e0, 0xe6db, 0x195b, 0x385c, 0x0, 0x0);
        gbc.writeMem(0xab16, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x502d, gbc.sp());
        EXPECT(0xab18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab16));
        EXPECT(0x25, gbc.readMem(0xab17));
        // CB 25 005F
        gbc.setState(0xe1a6, 0x8c93, 0x81d0, 0x5222, 0x8b55, 0xa9ea, 0x1, 0x0);
        gbc.writeMem(0xe1a6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x8c93, gbc.sp());
        EXPECT(0xe1a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1a6));
        EXPECT(0x25, gbc.readMem(0xe1a7));
        // CB 25 0060
        gbc.setState(0xb2dc, 0x9fcf, 0x9630, 0x6a1e, 0xc662, 0x9104, 0x1, 0x1);
        gbc.writeMem(0xb2dc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x9fcf, gbc.sp());
        EXPECT(0xb2de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2dc));
        EXPECT(0x25, gbc.readMem(0xb2dd));
        // CB 25 0061
        gbc.setState(0xaf46, 0x4d6e, 0x670, 0x8032, 0xffe3, 0xd47c, 0x0, 0x1);
        gbc.writeMem(0xaf46, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x4d6e, gbc.sp());
        EXPECT(0xaf48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf46));
        EXPECT(0x25, gbc.readMem(0xaf47));
        // CB 25 0062
        gbc.setState(0x7eab, 0xa56b, 0x35b0, 0xefbf, 0xfc97, 0xdadb, 0x1, 0x1);
        gbc.writeMem(0x7eab, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xa56b, gbc.sp());
        EXPECT(0x7ead, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0063
        gbc.setState(0xe44e, 0xc57b, 0xa00, 0x56e5, 0x8a4e, 0xa3b6, 0x1, 0x0);
        gbc.writeMem(0xe44e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xc57b, gbc.sp());
        EXPECT(0xe450, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe44e));
        EXPECT(0x25, gbc.readMem(0xe44f));
        // CB 25 0064
        gbc.setState(0x70c1, 0x4bfb, 0x1600, 0x92c0, 0xb812, 0x34ab, 0x1, 0x1);
        gbc.writeMem(0x70c1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x4bfb, gbc.sp());
        EXPECT(0x70c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0065
        gbc.setState(0x7d91, 0xd086, 0xbcd0, 0x1384, 0xcecf, 0x630, 0x1, 0x0);
        gbc.writeMem(0x7d91, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xd086, gbc.sp());
        EXPECT(0x7d93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0066
        gbc.setState(0xe103, 0xe456, 0xbb40, 0x6fd7, 0x3d, 0x4e0f, 0x0, 0x1);
        gbc.writeMem(0xe103, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xe456, gbc.sp());
        EXPECT(0xe105, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe103));
        EXPECT(0x25, gbc.readMem(0xe104));
        // CB 25 0067
        gbc.setState(0x5a81, 0x7aa6, 0x2960, 0x5e44, 0x9757, 0xdf1, 0x1, 0x1);
        gbc.writeMem(0x5a81, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x7aa6, gbc.sp());
        EXPECT(0x5a83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0068
        gbc.setState(0x9804, 0xe186, 0xaa10, 0x417a, 0x2633, 0x7063, 0x0, 0x0);
        gbc.writeMem(0x9804, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xe186, gbc.sp());
        EXPECT(0x9806, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9804));
        EXPECT(0x25, gbc.readMem(0x9805));
        // CB 25 0069
        gbc.setState(0x1386, 0xf216, 0x5b10, 0x8851, 0x8679, 0x7ce5, 0x1, 0x1);
        gbc.writeMem(0x1386, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xf216, gbc.sp());
        EXPECT(0x1388, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 006A
        gbc.setState(0xd52b, 0x491, 0x8c50, 0x31ee, 0xf55, 0x95a9, 0x0, 0x0);
        gbc.writeMem(0xd52b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x491, gbc.sp());
        EXPECT(0xd52d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd52b));
        EXPECT(0x25, gbc.readMem(0xd52c));
        // CB 25 006C
        gbc.setState(0x2d3c, 0xa08b, 0xf180, 0xd693, 0x974d, 0xa454, 0x0, 0x0);
        gbc.writeMem(0x2d3c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xa08b, gbc.sp());
        EXPECT(0x2d3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 006D
        gbc.setState(0xbab3, 0xe345, 0x2df0, 0xb7b6, 0xc67f, 0xacc6, 0x0, 0x0);
        gbc.writeMem(0xbab3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xe345, gbc.sp());
        EXPECT(0xbab5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbab3));
        EXPECT(0x25, gbc.readMem(0xbab4));
        // CB 25 006E
        gbc.setState(0x4310, 0x8a54, 0x2ca0, 0xaa30, 0xfe8b, 0x5508, 0x1, 0x1);
        gbc.writeMem(0x4310, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x8a54, gbc.sp());
        EXPECT(0x4312, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 006F
        gbc.setState(0x3a26, 0xf531, 0x4140, 0xc029, 0x8497, 0x76a6, 0x1, 0x0);
        gbc.writeMem(0x3a26, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xf531, gbc.sp());
        EXPECT(0x3a28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0070
        gbc.setState(0x319d, 0x30ad, 0xebd0, 0xfccb, 0x780a, 0xbab6, 0x1, 0x1);
        gbc.writeMem(0x319d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x30ad, gbc.sp());
        EXPECT(0x319f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0071
        gbc.setState(0x1842, 0x42a6, 0xa8a0, 0x1886, 0x15e7, 0x81a2, 0x0, 0x1);
        gbc.writeMem(0x1842, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x42a6, gbc.sp());
        EXPECT(0x1844, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0072
        gbc.setState(0x3b06, 0xef68, 0x8790, 0x11a1, 0xc7ec, 0xa473, 0x1, 0x0);
        gbc.writeMem(0x3b06, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xef68, gbc.sp());
        EXPECT(0x3b08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0073
        gbc.setState(0xd5ca, 0x2306, 0x7b50, 0x9b5b, 0xdce1, 0xdeff, 0x1, 0x1);
        gbc.writeMem(0xd5ca, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x2306, gbc.sp());
        EXPECT(0xd5cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5ca));
        EXPECT(0x25, gbc.readMem(0xd5cb));
        // CB 25 0074
        gbc.setState(0xece1, 0xe30e, 0x5260, 0xce27, 0xdf9d, 0x2e1d, 0x1, 0x0);
        gbc.writeMem(0xece1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xe30e, gbc.sp());
        EXPECT(0xece3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xece1));
        EXPECT(0x25, gbc.readMem(0xece2));
        // CB 25 0075
        gbc.setState(0x2656, 0xa066, 0xcd00, 0xce16, 0xecfa, 0xf166, 0x0, 0x0);
        gbc.writeMem(0x2656, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xa066, gbc.sp());
        EXPECT(0x2658, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0076
        gbc.setState(0x28ea, 0xd9d4, 0xa920, 0x742c, 0x83e5, 0x539, 0x0, 0x0);
        gbc.writeMem(0x28ea, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xd9d4, gbc.sp());
        EXPECT(0x28ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0077
        gbc.setState(0x9523, 0x5d11, 0x7740, 0x716d, 0x6262, 0x6b8c, 0x0, 0x0);
        gbc.writeMem(0x9523, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x5d11, gbc.sp());
        EXPECT(0x9525, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9523));
        EXPECT(0x25, gbc.readMem(0x9524));
        // CB 25 0078
        gbc.setState(0xbd69, 0x1902, 0x59f0, 0xd28a, 0x3b93, 0xdeb4, 0x1, 0x1);
        gbc.writeMem(0xbd69, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x1902, gbc.sp());
        EXPECT(0xbd6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd69));
        EXPECT(0x25, gbc.readMem(0xbd6a));
        // CB 25 007A
        gbc.setState(0xaa89, 0x521d, 0x9d30, 0x4e74, 0x627c, 0xbdfe, 0x1, 0x1);
        gbc.writeMem(0xaa89, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x521d, gbc.sp());
        EXPECT(0xaa8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa89));
        EXPECT(0x25, gbc.readMem(0xaa8a));
        // CB 25 007B
        gbc.setState(0xd0b8, 0x8f18, 0x8a70, 0x6df1, 0xa339, 0x6769, 0x1, 0x0);
        gbc.writeMem(0xd0b8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x8f18, gbc.sp());
        EXPECT(0xd0ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0b8));
        EXPECT(0x25, gbc.readMem(0xd0b9));
        // CB 25 007C
        gbc.setState(0xded1, 0xff77, 0xb80, 0xf1e3, 0xdbc6, 0x9ddc, 0x1, 0x0);
        gbc.writeMem(0xded1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xff77, gbc.sp());
        EXPECT(0xded3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xded1));
        EXPECT(0x25, gbc.readMem(0xded2));
        // CB 25 007D
        gbc.setState(0xef93, 0xec67, 0xdb60, 0xa5be, 0xdf20, 0x4971, 0x0, 0x0);
        gbc.writeMem(0xef93, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xec67, gbc.sp());
        EXPECT(0xef95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef93));
        EXPECT(0x25, gbc.readMem(0xef94));
        // CB 25 007E
        gbc.setState(0xd81e, 0x6a4c, 0x3e90, 0x3b60, 0xf878, 0x62c0, 0x1, 0x1);
        gbc.writeMem(0xd81e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x6a4c, gbc.sp());
        EXPECT(0xd820, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd81e));
        EXPECT(0x25, gbc.readMem(0xd81f));
        // CB 25 007F
        gbc.setState(0x6d76, 0xb99c, 0x140, 0x5c6e, 0x14d4, 0x348a, 0x0, 0x0);
        gbc.writeMem(0x6d76, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xb99c, gbc.sp());
        EXPECT(0x6d78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0080
        gbc.setState(0x8a07, 0x7cab, 0x72f0, 0x499b, 0xddbd, 0x984e, 0x1, 0x0);
        gbc.writeMem(0x8a07, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x7cab, gbc.sp());
        EXPECT(0x8a09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a07));
        EXPECT(0x25, gbc.readMem(0x8a08));
        // CB 25 0081
        gbc.setState(0x45b, 0x523d, 0xdb0, 0xff2f, 0x18fe, 0xb764, 0x1, 0x0);
        gbc.writeMem(0x45b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x523d, gbc.sp());
        EXPECT(0x45d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0082
        gbc.setState(0x52b9, 0x95a2, 0x2560, 0x3cea, 0xabbf, 0xe1f8, 0x0, 0x0);
        gbc.writeMem(0x52b9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x95a2, gbc.sp());
        EXPECT(0x52bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0083
        gbc.setState(0x7f4a, 0x8ab3, 0x5880, 0xae0a, 0x74ae, 0x4198, 0x1, 0x1);
        gbc.writeMem(0x7f4a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x8ab3, gbc.sp());
        EXPECT(0x7f4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0084
        gbc.setState(0xcb9e, 0x712f, 0x4aa0, 0xa078, 0x533d, 0x392e, 0x0, 0x1);
        gbc.writeMem(0xcb9e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x712f, gbc.sp());
        EXPECT(0xcba0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb9e));
        EXPECT(0x25, gbc.readMem(0xcb9f));
        // CB 25 0085
        gbc.setState(0x56ed, 0x2082, 0x6320, 0xca34, 0x45e7, 0x33cc, 0x0, 0x0);
        gbc.writeMem(0x56ed, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x2082, gbc.sp());
        EXPECT(0x56ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0086
        gbc.setState(0xaeb0, 0x804a, 0x1810, 0xe661, 0x2e79, 0x7b65, 0x1, 0x1);
        gbc.writeMem(0xaeb0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x804a, gbc.sp());
        EXPECT(0xaeb2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaeb0));
        EXPECT(0x25, gbc.readMem(0xaeb1));
        // CB 25 0087
        gbc.setState(0xe1ac, 0xe2bf, 0xf180, 0xd6cc, 0x386c, 0xec5, 0x0, 0x1);
        gbc.writeMem(0xe1ac, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xe2bf, gbc.sp());
        EXPECT(0xe1ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1ac));
        EXPECT(0x25, gbc.readMem(0xe1ad));
        // CB 25 0088
        gbc.setState(0xca3, 0x14e0, 0x8c90, 0x78b2, 0x331c, 0x86b3, 0x1, 0x1);
        gbc.writeMem(0xca3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x14e0, gbc.sp());
        EXPECT(0xca5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0089
        gbc.setState(0x248b, 0x4a33, 0xea00, 0xc61b, 0x139d, 0xb50f, 0x0, 0x1);
        gbc.writeMem(0x248b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x4a33, gbc.sp());
        EXPECT(0x248d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 008A
        gbc.setState(0xd931, 0xb173, 0x2100, 0x9433, 0x6d94, 0x56fa, 0x1, 0x0);
        gbc.writeMem(0xd931, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xb173, gbc.sp());
        EXPECT(0xd933, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd931));
        EXPECT(0x25, gbc.readMem(0xd932));
        // CB 25 008B
        gbc.setState(0x40cf, 0x426c, 0xaac0, 0xb54b, 0x123f, 0x1104, 0x1, 0x0);
        gbc.writeMem(0x40cf, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x426c, gbc.sp());
        EXPECT(0x40d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 008C
        gbc.setState(0x43d0, 0xe4be, 0x40c0, 0x2111, 0x1731, 0x2b5f, 0x0, 0x1);
        gbc.writeMem(0x43d0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xe4be, gbc.sp());
        EXPECT(0x43d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 008D
        gbc.setState(0x5bd0, 0xef3e, 0x3900, 0x6bd2, 0x4261, 0x7a5b, 0x0, 0x1);
        gbc.writeMem(0x5bd0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xef3e, gbc.sp());
        EXPECT(0x5bd2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 008E
        gbc.setState(0xac79, 0x48b6, 0x6320, 0x3fcd, 0xf06, 0x7c99, 0x1, 0x0);
        gbc.writeMem(0xac79, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x48b6, gbc.sp());
        EXPECT(0xac7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac79));
        EXPECT(0x25, gbc.readMem(0xac7a));
        // CB 25 008F
        gbc.setState(0x516f, 0x7c10, 0x8e00, 0x57f2, 0x84b9, 0xf846, 0x1, 0x0);
        gbc.writeMem(0x516f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x7c10, gbc.sp());
        EXPECT(0x5171, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0090
        gbc.setState(0xee4a, 0x89e7, 0x330, 0x8b1d, 0xd29d, 0xa968, 0x0, 0x0);
        gbc.writeMem(0xee4a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x89e7, gbc.sp());
        EXPECT(0xee4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee4a));
        EXPECT(0x25, gbc.readMem(0xee4b));
        // CB 25 0092
        gbc.setState(0x9174, 0xf4bb, 0x4ee0, 0x6f42, 0x5b69, 0x9b75, 0x0, 0x1);
        gbc.writeMem(0x9174, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xf4bb, gbc.sp());
        EXPECT(0x9176, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9174));
        EXPECT(0x25, gbc.readMem(0x9175));
        // CB 25 0093
        gbc.setState(0xa9c4, 0x84b6, 0x8440, 0xe78a, 0x36a7, 0xdc7, 0x1, 0x1);
        gbc.writeMem(0xa9c4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x84b6, gbc.sp());
        EXPECT(0xa9c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9c4));
        EXPECT(0x25, gbc.readMem(0xa9c5));
        // CB 25 0094
        gbc.setState(0xa9c2, 0x3f05, 0x8a70, 0x2fea, 0xd068, 0xfeb4, 0x1, 0x0);
        gbc.writeMem(0xa9c2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x3f05, gbc.sp());
        EXPECT(0xa9c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9c2));
        EXPECT(0x25, gbc.readMem(0xa9c3));
        // CB 25 0095
        gbc.setState(0x39d0, 0x9ead, 0x6c40, 0x7b8b, 0x7d4, 0xb4e0, 0x1, 0x0);
        gbc.writeMem(0x39d0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x9ead, gbc.sp());
        EXPECT(0x39d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0096
        gbc.setState(0x2333, 0x629c, 0x6bf0, 0xd891, 0x9446, 0x8e95, 0x1, 0x1);
        gbc.writeMem(0x2333, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x629c, gbc.sp());
        EXPECT(0x2335, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0097
        gbc.setState(0xc88c, 0x7d8f, 0x8260, 0x3631, 0x6c58, 0x9c, 0x1, 0x0);
        gbc.writeMem(0xc88c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x7d8f, gbc.sp());
        EXPECT(0xc88e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc88c));
        EXPECT(0x25, gbc.readMem(0xc88d));
        // CB 25 0098
        gbc.setState(0xb802, 0x777a, 0xbe50, 0x3bd4, 0xb1a7, 0xfe3d, 0x1, 0x0);
        gbc.writeMem(0xb802, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x777a, gbc.sp());
        EXPECT(0xb804, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb802));
        EXPECT(0x25, gbc.readMem(0xb803));
        // CB 25 0099
        gbc.setState(0x175d, 0x662e, 0x870, 0xecf5, 0xb7b5, 0xa1c, 0x0, 0x1);
        gbc.writeMem(0x175d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x662e, gbc.sp());
        EXPECT(0x175f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 009A
        gbc.setState(0x9a71, 0xa9df, 0xb480, 0xf102, 0x8e0d, 0x22fa, 0x1, 0x0);
        gbc.writeMem(0x9a71, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xa9df, gbc.sp());
        EXPECT(0x9a73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a71));
        EXPECT(0x25, gbc.readMem(0x9a72));
        // CB 25 009B
        gbc.setState(0xf63, 0x3208, 0xc220, 0xe292, 0x77af, 0xdd8c, 0x0, 0x0);
        gbc.writeMem(0xf63, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x3208, gbc.sp());
        EXPECT(0xf65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 009C
        gbc.setState(0x8312, 0x717d, 0x2280, 0x1ecb, 0xef9b, 0x3e66, 0x1, 0x1);
        gbc.writeMem(0x8312, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x717d, gbc.sp());
        EXPECT(0x8314, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8312));
        EXPECT(0x25, gbc.readMem(0x8313));
        // CB 25 009D
        gbc.setState(0x252b, 0x7602, 0xe550, 0xe030, 0x4025, 0x19b2, 0x1, 0x0);
        gbc.writeMem(0x252b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x7602, gbc.sp());
        EXPECT(0x252d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 009E
        gbc.setState(0xe804, 0x7db, 0x88c0, 0x7e06, 0x65b4, 0x9a37, 0x0, 0x0);
        gbc.writeMem(0xe804, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x7db, gbc.sp());
        EXPECT(0xe806, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe804));
        EXPECT(0x25, gbc.readMem(0xe805));
        // CB 25 009F
        gbc.setState(0x6043, 0xfb09, 0xde50, 0x84f7, 0x8491, 0xd5f3, 0x1, 0x1);
        gbc.writeMem(0x6043, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xfb09, gbc.sp());
        EXPECT(0x6045, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00A0
        gbc.setState(0xa0d2, 0xfb1d, 0xff0, 0x7d5a, 0xf087, 0x3fd, 0x0, 0x1);
        gbc.writeMem(0xa0d2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xfb1d, gbc.sp());
        EXPECT(0xa0d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0d2));
        EXPECT(0x25, gbc.readMem(0xa0d3));
        // CB 25 00A1
        gbc.setState(0xbd1a, 0x7f98, 0xebc0, 0x2062, 0x55cd, 0x9798, 0x1, 0x1);
        gbc.writeMem(0xbd1a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x7f98, gbc.sp());
        EXPECT(0xbd1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd1a));
        EXPECT(0x25, gbc.readMem(0xbd1b));
        // CB 25 00A2
        gbc.setState(0xe59a, 0x6921, 0x47a0, 0x295c, 0x849c, 0xe883, 0x0, 0x0);
        gbc.writeMem(0xe59a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x6921, gbc.sp());
        EXPECT(0xe59c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe59a));
        EXPECT(0x25, gbc.readMem(0xe59b));
        // CB 25 00A3
        gbc.setState(0x2897, 0xe9b2, 0x2fc0, 0x6cdd, 0x550c, 0x9c20, 0x1, 0x0);
        gbc.writeMem(0x2897, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xe9b2, gbc.sp());
        EXPECT(0x2899, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00A4
        gbc.setState(0x5089, 0x8022, 0xbab0, 0xc2c3, 0x3f3a, 0x4da8, 0x1, 0x0);
        gbc.writeMem(0x5089, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x8022, gbc.sp());
        EXPECT(0x508b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00A5
        gbc.setState(0x5176, 0xd1e0, 0x3650, 0xf4ac, 0x8e56, 0xef92, 0x1, 0x1);
        gbc.writeMem(0x5176, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xd1e0, gbc.sp());
        EXPECT(0x5178, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00A6
        gbc.setState(0xb892, 0x7a99, 0xec00, 0x4275, 0x7961, 0x8c9c, 0x0, 0x0);
        gbc.writeMem(0xb892, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x7a99, gbc.sp());
        EXPECT(0xb894, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb892));
        EXPECT(0x25, gbc.readMem(0xb893));
        // CB 25 00A7
        gbc.setState(0x906e, 0x27b0, 0x54f0, 0x9c8f, 0x4db0, 0xe2e4, 0x0, 0x0);
        gbc.writeMem(0x906e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x27b0, gbc.sp());
        EXPECT(0x9070, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x906e));
        EXPECT(0x25, gbc.readMem(0x906f));
        // CB 25 00A8
        gbc.setState(0xd072, 0xeec5, 0x8f30, 0x91dc, 0x17d1, 0x2568, 0x0, 0x0);
        gbc.writeMem(0xd072, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xeec5, gbc.sp());
        EXPECT(0xd074, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd072));
        EXPECT(0x25, gbc.readMem(0xd073));
        // CB 25 00A9
        gbc.setState(0x7175, 0x3b0, 0x1ab0, 0x7403, 0xa39, 0xb090, 0x0, 0x1);
        gbc.writeMem(0x7175, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x3b0, gbc.sp());
        EXPECT(0x7177, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00AA
        gbc.setState(0x1abc, 0x3d55, 0xda00, 0xb32e, 0x85d6, 0x91b7, 0x0, 0x1);
        gbc.writeMem(0x1abc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x3d55, gbc.sp());
        EXPECT(0x1abe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00AB
        gbc.setState(0xcf24, 0x9662, 0x1460, 0x5d30, 0xbda1, 0xfa26, 0x1, 0x1);
        gbc.writeMem(0xcf24, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x9662, gbc.sp());
        EXPECT(0xcf26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf24));
        EXPECT(0x25, gbc.readMem(0xcf25));
        // CB 25 00AC
        gbc.setState(0xc84, 0xfcaa, 0x7ed0, 0x187a, 0x2a17, 0xfaeb, 0x1, 0x0);
        gbc.writeMem(0xc84, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xfcaa, gbc.sp());
        EXPECT(0xc86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00AD
        gbc.setState(0x5e24, 0x420c, 0xa170, 0x44e6, 0x9c08, 0x8ce0, 0x0, 0x1);
        gbc.writeMem(0x5e24, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x420c, gbc.sp());
        EXPECT(0x5e26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00AE
        gbc.setState(0x9b51, 0xc176, 0x7a00, 0x9c8c, 0xb4c8, 0x20a6, 0x0, 0x1);
        gbc.writeMem(0x9b51, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xc176, gbc.sp());
        EXPECT(0x9b53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b51));
        EXPECT(0x25, gbc.readMem(0x9b52));
        // CB 25 00AF
        gbc.setState(0xd071, 0x9248, 0x4720, 0x6e75, 0x7779, 0xb3c8, 0x1, 0x0);
        gbc.writeMem(0xd071, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x9248, gbc.sp());
        EXPECT(0xd073, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd071));
        EXPECT(0x25, gbc.readMem(0xd072));
        // CB 25 00B0
        gbc.setState(0xe497, 0x204, 0xd10, 0xe878, 0xc4ea, 0x457, 0x0, 0x0);
        gbc.writeMem(0xe497, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x204, gbc.sp());
        EXPECT(0xe499, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe497));
        EXPECT(0x25, gbc.readMem(0xe498));
        // CB 25 00B1
        gbc.setState(0x8091, 0x75d7, 0xbe90, 0xfce, 0x6f4b, 0x3a13, 0x0, 0x1);
        gbc.writeMem(0x8091, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x75d7, gbc.sp());
        EXPECT(0x8093, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8091));
        EXPECT(0x25, gbc.readMem(0x8092));
        // CB 25 00B2
        gbc.setState(0x4d6b, 0xf8d6, 0xaf90, 0x909d, 0x8833, 0xf3c6, 0x1, 0x1);
        gbc.writeMem(0x4d6b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xf8d6, gbc.sp());
        EXPECT(0x4d6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00B3
        gbc.setState(0xb40b, 0x9553, 0x2950, 0x8456, 0x4030, 0x8464, 0x1, 0x0);
        gbc.writeMem(0xb40b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x9553, gbc.sp());
        EXPECT(0xb40d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb40b));
        EXPECT(0x25, gbc.readMem(0xb40c));
        // CB 25 00B4
        gbc.setState(0x9bfc, 0xa259, 0x3410, 0x25bd, 0xbe38, 0x2165, 0x0, 0x1);
        gbc.writeMem(0x9bfc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xa259, gbc.sp());
        EXPECT(0x9bfe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bfc));
        EXPECT(0x25, gbc.readMem(0x9bfd));
        // CB 25 00B5
        gbc.setState(0x30d2, 0xa773, 0x60e0, 0xdd87, 0xc26f, 0xd079, 0x1, 0x1);
        gbc.writeMem(0x30d2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xa773, gbc.sp());
        EXPECT(0x30d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00B6
        gbc.setState(0x5e16, 0xf397, 0x7b10, 0x9d2a, 0x493e, 0xb9a1, 0x1, 0x1);
        gbc.writeMem(0x5e16, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xf397, gbc.sp());
        EXPECT(0x5e18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00B7
        gbc.setState(0x2212, 0x389a, 0x7f00, 0xd3e6, 0xf2a9, 0x2d86, 0x1, 0x1);
        gbc.writeMem(0x2212, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x389a, gbc.sp());
        EXPECT(0x2214, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00B8
        gbc.setState(0xd667, 0x9228, 0xbb00, 0x1785, 0xd8c7, 0xd74e, 0x1, 0x1);
        gbc.writeMem(0xd667, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x9228, gbc.sp());
        EXPECT(0xd669, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd667));
        EXPECT(0x25, gbc.readMem(0xd668));
        // CB 25 00B9
        gbc.setState(0x161, 0x4cb9, 0x3100, 0x87ee, 0x8229, 0x4c92, 0x1, 0x0);
        gbc.writeMem(0x161, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x4cb9, gbc.sp());
        EXPECT(0x163, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00BA
        gbc.setState(0x603c, 0x958e, 0xbfe0, 0xa5cd, 0xd6fd, 0x6027, 0x1, 0x0);
        gbc.writeMem(0x603c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x958e, gbc.sp());
        EXPECT(0x603e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00BB
        gbc.setState(0xa04c, 0x8035, 0xb340, 0xc1f9, 0xece1, 0x1fd2, 0x0, 0x1);
        gbc.writeMem(0xa04c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x8035, gbc.sp());
        EXPECT(0xa04e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa04c));
        EXPECT(0x25, gbc.readMem(0xa04d));
        // CB 25 00BC
        gbc.setState(0x5d9c, 0x8798, 0x80e0, 0x9955, 0x2229, 0x2186, 0x1, 0x1);
        gbc.writeMem(0x5d9c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x8798, gbc.sp());
        EXPECT(0x5d9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00BD
        gbc.setState(0xb6b2, 0x43c5, 0x25e0, 0x1c06, 0x16c2, 0xd941, 0x1, 0x0);
        gbc.writeMem(0xb6b2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x43c5, gbc.sp());
        EXPECT(0xb6b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6b2));
        EXPECT(0x25, gbc.readMem(0xb6b3));
        // CB 25 00BF
        gbc.setState(0xc703, 0x7b21, 0x1a60, 0x6ecb, 0x7576, 0x98ed, 0x1, 0x1);
        gbc.writeMem(0xc703, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x7b21, gbc.sp());
        EXPECT(0xc705, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc703));
        EXPECT(0x25, gbc.readMem(0xc704));
        // CB 25 00C0
        gbc.setState(0x8b73, 0xe249, 0xa050, 0x94de, 0x1782, 0x9380, 0x1, 0x0);
        gbc.writeMem(0x8b73, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xe249, gbc.sp());
        EXPECT(0x8b75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b73));
        EXPECT(0x25, gbc.readMem(0x8b74));
        // CB 25 00C1
        gbc.setState(0x52ec, 0xd0ac, 0xc130, 0x398a, 0xe819, 0x9f8d, 0x1, 0x0);
        gbc.writeMem(0x52ec, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xd0ac, gbc.sp());
        EXPECT(0x52ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00C2
        gbc.setState(0xdf03, 0xbc06, 0x2e50, 0xe800, 0xe311, 0xc5fc, 0x0, 0x0);
        gbc.writeMem(0xdf03, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xbc06, gbc.sp());
        EXPECT(0xdf05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf03));
        EXPECT(0x25, gbc.readMem(0xdf04));
        // CB 25 00C3
        gbc.setState(0xc011, 0xa8f8, 0x49c0, 0x862d, 0x5533, 0xb92d, 0x1, 0x1);
        gbc.writeMem(0xc011, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xa8f8, gbc.sp());
        EXPECT(0xc013, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc011));
        EXPECT(0x25, gbc.readMem(0xc012));
        // CB 25 00C4
        gbc.setState(0x1412, 0x9e40, 0x2e30, 0xe53f, 0xf7ed, 0x18a7, 0x1, 0x0);
        gbc.writeMem(0x1412, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x9e40, gbc.sp());
        EXPECT(0x1414, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00C5
        gbc.setState(0x6f4d, 0x4d58, 0x5a0, 0x8bc4, 0x6596, 0xce56, 0x0, 0x0);
        gbc.writeMem(0x6f4d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x4d58, gbc.sp());
        EXPECT(0x6f4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00C6
        gbc.setState(0x74be, 0xbe13, 0xdfa0, 0xa33e, 0x918d, 0x536, 0x1, 0x1);
        gbc.writeMem(0x74be, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xbe13, gbc.sp());
        EXPECT(0x74c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00C7
        gbc.setState(0x37a2, 0xe5b5, 0x83a0, 0xb9b1, 0x1533, 0x5f75, 0x1, 0x0);
        gbc.writeMem(0x37a2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xe5b5, gbc.sp());
        EXPECT(0x37a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00C8
        gbc.setState(0xa76f, 0xaebc, 0x4150, 0xe9cd, 0x4e0d, 0x1a66, 0x1, 0x1);
        gbc.writeMem(0xa76f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xaebc, gbc.sp());
        EXPECT(0xa771, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa76f));
        EXPECT(0x25, gbc.readMem(0xa770));
        // CB 25 00C9
        gbc.setState(0xcd7c, 0x4cd5, 0xb7c0, 0xe12, 0x6b30, 0x2826, 0x0, 0x0);
        gbc.writeMem(0xcd7c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x4cd5, gbc.sp());
        EXPECT(0xcd7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd7c));
        EXPECT(0x25, gbc.readMem(0xcd7d));
        // CB 25 00CA
        gbc.setState(0x440f, 0x136f, 0x2ec0, 0x89ed, 0x8f26, 0xbee9, 0x0, 0x0);
        gbc.writeMem(0x440f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x136f, gbc.sp());
        EXPECT(0x4411, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00CB
        gbc.setState(0x9c0f, 0x2858, 0x48a0, 0x57b8, 0x69e5, 0x28, 0x1, 0x0);
        gbc.writeMem(0x9c0f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x2858, gbc.sp());
        EXPECT(0x9c11, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c0f));
        EXPECT(0x25, gbc.readMem(0x9c10));
        // CB 25 00CC
        gbc.setState(0xc51f, 0x578e, 0xf190, 0x495d, 0x4b2f, 0x19cd, 0x0, 0x0);
        gbc.writeMem(0xc51f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x578e, gbc.sp());
        EXPECT(0xc521, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc51f));
        EXPECT(0x25, gbc.readMem(0xc520));
        // CB 25 00CD
        gbc.setState(0xc09d, 0xa113, 0xf430, 0x167c, 0x9347, 0xfcb, 0x1, 0x0);
        gbc.writeMem(0xc09d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xa113, gbc.sp());
        EXPECT(0xc09f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc09d));
        EXPECT(0x25, gbc.readMem(0xc09e));
        // CB 25 00CE
        gbc.setState(0x7aee, 0x9c72, 0xf670, 0x94f9, 0x35ba, 0xf248, 0x0, 0x0);
        gbc.writeMem(0x7aee, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x9c72, gbc.sp());
        EXPECT(0x7af0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00CF
        gbc.setState(0xd646, 0xa8d2, 0x9d80, 0x2d6a, 0xfb87, 0xc9c2, 0x1, 0x1);
        gbc.writeMem(0xd646, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xa8d2, gbc.sp());
        EXPECT(0xd648, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd646));
        EXPECT(0x25, gbc.readMem(0xd647));
        // CB 25 00D0
        gbc.setState(0xaa93, 0x3d2f, 0x7510, 0xed93, 0x7d28, 0x1e2b, 0x0, 0x0);
        gbc.writeMem(0xaa93, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x3d2f, gbc.sp());
        EXPECT(0xaa95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa93));
        EXPECT(0x25, gbc.readMem(0xaa94));
        // CB 25 00D1
        gbc.setState(0x904, 0x2f24, 0x5f90, 0x2f55, 0x728c, 0x64ad, 0x1, 0x0);
        gbc.writeMem(0x904, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x2f24, gbc.sp());
        EXPECT(0x906, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00D2
        gbc.setState(0xaaed, 0xeb7c, 0x1250, 0x8673, 0xa4d3, 0xc97f, 0x0, 0x1);
        gbc.writeMem(0xaaed, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xeb7c, gbc.sp());
        EXPECT(0xaaef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaaed));
        EXPECT(0x25, gbc.readMem(0xaaee));
        // CB 25 00D3
        gbc.setState(0x13ad, 0xc709, 0x8750, 0xebbd, 0x1975, 0x7522, 0x0, 0x0);
        gbc.writeMem(0x13ad, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xc709, gbc.sp());
        EXPECT(0x13af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00D4
        gbc.setState(0x7690, 0xf0ab, 0xbee0, 0xe83d, 0x4182, 0x93ef, 0x1, 0x0);
        gbc.writeMem(0x7690, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xf0ab, gbc.sp());
        EXPECT(0x7692, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00D5
        gbc.setState(0x9527, 0xc5da, 0xc100, 0x66b9, 0xf08f, 0xbe36, 0x0, 0x1);
        gbc.writeMem(0x9527, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xc5da, gbc.sp());
        EXPECT(0x9529, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9527));
        EXPECT(0x25, gbc.readMem(0x9528));
        // CB 25 00D6
        gbc.setState(0xc0d1, 0xca65, 0xce90, 0x1328, 0xfa6e, 0x4f1, 0x0, 0x1);
        gbc.writeMem(0xc0d1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xca65, gbc.sp());
        EXPECT(0xc0d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0d1));
        EXPECT(0x25, gbc.readMem(0xc0d2));
        // CB 25 00D7
        gbc.setState(0x2db, 0x1e94, 0x1a00, 0xf7b4, 0x4f67, 0xcfce, 0x1, 0x1);
        gbc.writeMem(0x2db, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x1e94, gbc.sp());
        EXPECT(0x2dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00D8
        gbc.setState(0x4f64, 0x9b76, 0x6a40, 0xd56, 0x40b0, 0x87c6, 0x1, 0x1);
        gbc.writeMem(0x4f64, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x9b76, gbc.sp());
        EXPECT(0x4f66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00D9
        gbc.setState(0xb0d4, 0x9cea, 0x2720, 0x930f, 0xcb68, 0xb82a, 0x1, 0x0);
        gbc.writeMem(0xb0d4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x9cea, gbc.sp());
        EXPECT(0xb0d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0d4));
        EXPECT(0x25, gbc.readMem(0xb0d5));
        // CB 25 00DA
        gbc.setState(0x8143, 0x9626, 0x61a0, 0x8855, 0x4cbf, 0xfb00, 0x1, 0x1);
        gbc.writeMem(0x8143, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x9626, gbc.sp());
        EXPECT(0x8145, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8143));
        EXPECT(0x25, gbc.readMem(0x8144));
        // CB 25 00DB
        gbc.setState(0x35d9, 0x64c3, 0x6930, 0x41ec, 0xae8b, 0x152e, 0x0, 0x1);
        gbc.writeMem(0x35d9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x64c3, gbc.sp());
        EXPECT(0x35db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00DC
        gbc.setState(0x1e2e, 0xf8f3, 0x280, 0xa9e8, 0x45be, 0x934c, 0x1, 0x1);
        gbc.writeMem(0x1e2e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xf8f3, gbc.sp());
        EXPECT(0x1e30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00DD
        gbc.setState(0x2bfd, 0xe001, 0xbdb0, 0x6ad9, 0x8ef6, 0x4b84, 0x0, 0x0);
        gbc.writeMem(0x2bfd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xe001, gbc.sp());
        EXPECT(0x2bff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00DE
        gbc.setState(0x71b6, 0x8547, 0xb20, 0x927d, 0x82d2, 0x7b2e, 0x0, 0x0);
        gbc.writeMem(0x71b6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x8547, gbc.sp());
        EXPECT(0x71b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00DF
        gbc.setState(0x1172, 0xa5e5, 0x270, 0x71d8, 0x1da5, 0xc87c, 0x1, 0x1);
        gbc.writeMem(0x1172, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xa5e5, gbc.sp());
        EXPECT(0x1174, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00E0
        gbc.setState(0x9d0c, 0x76d8, 0x15d0, 0x9648, 0x6ecc, 0x9ec8, 0x1, 0x0);
        gbc.writeMem(0x9d0c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x76d8, gbc.sp());
        EXPECT(0x9d0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d0c));
        EXPECT(0x25, gbc.readMem(0x9d0d));
        // CB 25 00E2
        gbc.setState(0xc064, 0x3ce1, 0x3f70, 0xcfd3, 0xe127, 0x8838, 0x0, 0x0);
        gbc.writeMem(0xc064, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x3ce1, gbc.sp());
        EXPECT(0xc066, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc064));
        EXPECT(0x25, gbc.readMem(0xc065));
        // CB 25 00E3
        gbc.setState(0xc774, 0x4376, 0xa4d0, 0x937e, 0xe682, 0x3ef6, 0x0, 0x1);
        gbc.writeMem(0xc774, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x4376, gbc.sp());
        EXPECT(0xc776, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc774));
        EXPECT(0x25, gbc.readMem(0xc775));
        // CB 25 00E4
        gbc.setState(0xc921, 0x8532, 0x8af0, 0x814d, 0x1f9, 0x2695, 0x1, 0x0);
        gbc.writeMem(0xc921, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x8532, gbc.sp());
        EXPECT(0xc923, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc921));
        EXPECT(0x25, gbc.readMem(0xc922));
        // CB 25 00E5
        gbc.setState(0x1a82, 0xd03d, 0x2040, 0x5922, 0xf337, 0x65c1, 0x1, 0x1);
        gbc.writeMem(0x1a82, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xd03d, gbc.sp());
        EXPECT(0x1a84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00E6
        gbc.setState(0x8377, 0x6949, 0x7e30, 0x53d0, 0xb93a, 0xfc57, 0x1, 0x0);
        gbc.writeMem(0x8377, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x6949, gbc.sp());
        EXPECT(0x8379, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8377));
        EXPECT(0x25, gbc.readMem(0x8378));
        // CB 25 00E7
        gbc.setState(0x5cc7, 0xf5fb, 0x62d0, 0xc2c1, 0x7365, 0x97cd, 0x0, 0x0);
        gbc.writeMem(0x5cc7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xf5fb, gbc.sp());
        EXPECT(0x5cc9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00E8
        gbc.setState(0x4dcb, 0x9dd4, 0x7420, 0x6b01, 0xbc51, 0x8432, 0x0, 0x1);
        gbc.writeMem(0x4dcb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x9dd4, gbc.sp());
        EXPECT(0x4dcd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00E9
        gbc.setState(0xccb0, 0xa869, 0x6e10, 0x2298, 0x9c6c, 0x3af9, 0x1, 0x0);
        gbc.writeMem(0xccb0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xa869, gbc.sp());
        EXPECT(0xccb2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccb0));
        EXPECT(0x25, gbc.readMem(0xccb1));
        // CB 25 00EA
        gbc.setState(0x8388, 0xb731, 0x70c0, 0x219b, 0xd0ec, 0x43a, 0x0, 0x0);
        gbc.writeMem(0x8388, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xb731, gbc.sp());
        EXPECT(0x838a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8388));
        EXPECT(0x25, gbc.readMem(0x8389));
        // CB 25 00EB
        gbc.setState(0x2cb8, 0x25bf, 0x4aa0, 0xa410, 0x5d4f, 0xdf43, 0x0, 0x0);
        gbc.writeMem(0x2cb8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x25bf, gbc.sp());
        EXPECT(0x2cba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00EC
        gbc.setState(0x1902, 0x8dc1, 0x22c0, 0x64c0, 0xe22d, 0x3c36, 0x1, 0x1);
        gbc.writeMem(0x1902, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x8dc1, gbc.sp());
        EXPECT(0x1904, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00ED
        gbc.setState(0xc0b, 0x7fd, 0x5510, 0x1bc2, 0x7628, 0x2050, 0x1, 0x1);
        gbc.writeMem(0xc0b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x7fd, gbc.sp());
        EXPECT(0xc0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00EE
        gbc.setState(0xcdc5, 0xf7d7, 0x1cf0, 0x3e4e, 0xb7b2, 0x591f, 0x1, 0x1);
        gbc.writeMem(0xcdc5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xf7d7, gbc.sp());
        EXPECT(0xcdc7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdc5));
        EXPECT(0x25, gbc.readMem(0xcdc6));
        // CB 25 00EF
        gbc.setState(0xc4a9, 0x153, 0x26b0, 0x153c, 0x3899, 0xc5f5, 0x1, 0x0);
        gbc.writeMem(0xc4a9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x153, gbc.sp());
        EXPECT(0xc4ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4a9));
        EXPECT(0x25, gbc.readMem(0xc4aa));
        // CB 25 00F0
        gbc.setState(0x2d88, 0x1b6b, 0x4020, 0x90fb, 0x576a, 0xfa06, 0x0, 0x1);
        gbc.writeMem(0x2d88, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x1b6b, gbc.sp());
        EXPECT(0x2d8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00F1
        gbc.setState(0x384f, 0x11ff, 0xb250, 0x44c1, 0x7b77, 0x12ac, 0x1, 0x0);
        gbc.writeMem(0x384f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x11ff, gbc.sp());
        EXPECT(0x3851, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00F2
        gbc.setState(0x6d70, 0x52e3, 0x7f50, 0x651b, 0xa905, 0x30ad, 0x1, 0x1);
        gbc.writeMem(0x6d70, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x52e3, gbc.sp());
        EXPECT(0x6d72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00F3
        gbc.setState(0x95f1, 0x390f, 0xfa70, 0xfa65, 0xff4, 0x74f1, 0x0, 0x1);
        gbc.writeMem(0x95f1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x390f, gbc.sp());
        EXPECT(0x95f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95f1));
        EXPECT(0x25, gbc.readMem(0x95f2));
        // CB 25 00F4
        gbc.setState(0x26fc, 0xd869, 0x96a0, 0x3267, 0x2d51, 0xe59d, 0x0, 0x1);
        gbc.writeMem(0x26fc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xd869, gbc.sp());
        EXPECT(0x26fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00F5
        gbc.setState(0xc5ae, 0x28e6, 0x93b0, 0xc58b, 0x9896, 0xa194, 0x0, 0x1);
        gbc.writeMem(0xc5ae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x28e6, gbc.sp());
        EXPECT(0xc5b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5ae));
        EXPECT(0x25, gbc.readMem(0xc5af));
        // CB 25 00F6
        gbc.setState(0x35d4, 0x3778, 0x630, 0x2f3b, 0x9070, 0x1ec3, 0x0, 0x1);
        gbc.writeMem(0x35d4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x3778, gbc.sp());
        EXPECT(0x35d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00F7
        gbc.setState(0x2dc, 0x9255, 0xb30, 0x9abd, 0x28fe, 0xcd2c, 0x0, 0x0);
        gbc.writeMem(0x2dc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x9255, gbc.sp());
        EXPECT(0x2de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00F8
        gbc.setState(0x7566, 0x66ba, 0xb5c0, 0xfd83, 0xfcac, 0xd1b8, 0x1, 0x1);
        gbc.writeMem(0x7566, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x66ba, gbc.sp());
        EXPECT(0x7568, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00F9
        gbc.setState(0x3389, 0x8c8e, 0x2aa0, 0x47b0, 0x6691, 0xb236, 0x1, 0x1);
        gbc.writeMem(0x3389, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x8c8e, gbc.sp());
        EXPECT(0x338b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00FA
        gbc.setState(0xb8c8, 0xde56, 0x49d0, 0x3788, 0xef20, 0x6361, 0x0, 0x0);
        gbc.writeMem(0xb8c8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xde56, gbc.sp());
        EXPECT(0xb8ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8c8));
        EXPECT(0x25, gbc.readMem(0xb8c9));
        // CB 25 00FB
        gbc.setState(0x39aa, 0xb77e, 0xc2d0, 0x67ff, 0xa21f, 0x116f, 0x1, 0x0);
        gbc.writeMem(0x39aa, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xb77e, gbc.sp());
        EXPECT(0x39ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 00FC
        gbc.setState(0x4e10, 0xac4e, 0x76d0, 0xff58, 0x8400, 0xa5ec, 0x1, 0x0);
        gbc.writeMem(0x4e10, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xac4e, gbc.sp());
        EXPECT(0x4e12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00FD
        gbc.setState(0xc12c, 0xb7e1, 0xd2f0, 0xad1c, 0x7de6, 0x99ce, 0x1, 0x1);
        gbc.writeMem(0xc12c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xb7e1, gbc.sp());
        EXPECT(0xc12e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc12c));
        EXPECT(0x25, gbc.readMem(0xc12d));
        // CB 25 00FE
        gbc.setState(0x426e, 0x7c39, 0x61e0, 0x1c0f, 0xd4c4, 0xabe0, 0x0, 0x1);
        gbc.writeMem(0x426e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x7c39, gbc.sp());
        EXPECT(0x4270, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 00FF
        gbc.setState(0xe9b8, 0x22f6, 0x4e30, 0x375b, 0x8be5, 0xa530, 0x1, 0x0);
        gbc.writeMem(0xe9b8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x22f6, gbc.sp());
        EXPECT(0xe9ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9b8));
        EXPECT(0x25, gbc.readMem(0xe9b9));
        // CB 25 0100
        gbc.setState(0xdeff, 0x701, 0x86e0, 0xed20, 0xb92, 0xa837, 0x1, 0x0);
        gbc.writeMem(0xdeff, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x701, gbc.sp());
        EXPECT(0xdf01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdeff));
        EXPECT(0x25, gbc.readMem(0xdf00));
        // CB 25 0101
        gbc.setState(0xade4, 0x7b11, 0xc510, 0xf8ce, 0x19d1, 0x27b0, 0x0, 0x0);
        gbc.writeMem(0xade4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x7b11, gbc.sp());
        EXPECT(0xade6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xade4));
        EXPECT(0x25, gbc.readMem(0xade5));
        // CB 25 0102
        gbc.setState(0xb213, 0xef13, 0xce50, 0xc4f7, 0xcd15, 0x154b, 0x0, 0x0);
        gbc.writeMem(0xb213, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xef13, gbc.sp());
        EXPECT(0xb215, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb213));
        EXPECT(0x25, gbc.readMem(0xb214));
        // CB 25 0103
        gbc.setState(0x8384, 0xe7e7, 0xcd60, 0x826, 0x9e13, 0x8b41, 0x1, 0x1);
        gbc.writeMem(0x8384, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xe7e7, gbc.sp());
        EXPECT(0x8386, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8384));
        EXPECT(0x25, gbc.readMem(0x8385));
        // CB 25 0104
        gbc.setState(0xefb8, 0x7a5, 0x1e50, 0xc302, 0xdbd0, 0xe5ed, 0x0, 0x0);
        gbc.writeMem(0xefb8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x7a5, gbc.sp());
        EXPECT(0xefba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefb8));
        EXPECT(0x25, gbc.readMem(0xefb9));
        // CB 25 0105
        gbc.setState(0x54d5, 0xf488, 0x2240, 0x499b, 0x7ba7, 0xf3f1, 0x1, 0x0);
        gbc.writeMem(0x54d5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xf488, gbc.sp());
        EXPECT(0x54d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0106
        gbc.setState(0xa31e, 0xf947, 0x9fa0, 0xe83a, 0x659e, 0xe497, 0x0, 0x0);
        gbc.writeMem(0xa31e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xf947, gbc.sp());
        EXPECT(0xa320, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa31e));
        EXPECT(0x25, gbc.readMem(0xa31f));
        // CB 25 0107
        gbc.setState(0xa55b, 0xbac9, 0x3e60, 0x272, 0xf3cc, 0xa42f, 0x1, 0x1);
        gbc.writeMem(0xa55b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xbac9, gbc.sp());
        EXPECT(0xa55d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa55b));
        EXPECT(0x25, gbc.readMem(0xa55c));
        // CB 25 0108
        gbc.setState(0xc040, 0x1f9d, 0x9070, 0x168b, 0xc570, 0x42f, 0x1, 0x1);
        gbc.writeMem(0xc040, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x1f9d, gbc.sp());
        EXPECT(0xc042, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc040));
        EXPECT(0x25, gbc.readMem(0xc041));
        // CB 25 0109
        gbc.setState(0xcff3, 0x5c26, 0x70a0, 0xcdaa, 0x8752, 0xaf72, 0x1, 0x1);
        gbc.writeMem(0xcff3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x5c26, gbc.sp());
        EXPECT(0xcff5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcff3));
        EXPECT(0x25, gbc.readMem(0xcff4));
        // CB 25 010A
        gbc.setState(0x4e92, 0x2dea, 0x50a0, 0xf71a, 0x8394, 0x5819, 0x0, 0x0);
        gbc.writeMem(0x4e92, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x2dea, gbc.sp());
        EXPECT(0x4e94, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 010B
        gbc.setState(0x4721, 0xb4fe, 0x4920, 0x14e3, 0xe43a, 0xfce6, 0x0, 0x0);
        gbc.writeMem(0x4721, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xb4fe, gbc.sp());
        EXPECT(0x4723, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 010C
        gbc.setState(0xe566, 0xf771, 0xf6b0, 0xa757, 0x2647, 0xa035, 0x1, 0x1);
        gbc.writeMem(0xe566, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xf771, gbc.sp());
        EXPECT(0xe568, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe566));
        EXPECT(0x25, gbc.readMem(0xe567));
        // CB 25 010D
        gbc.setState(0x28a4, 0x5cd7, 0xe570, 0x86c3, 0x2f98, 0x871, 0x0, 0x1);
        gbc.writeMem(0x28a4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x5cd7, gbc.sp());
        EXPECT(0x28a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 010E
        gbc.setState(0x4d75, 0xeee8, 0x9f90, 0x7529, 0x745, 0x98fd, 0x0, 0x0);
        gbc.writeMem(0x4d75, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xeee8, gbc.sp());
        EXPECT(0x4d77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 010F
        gbc.setState(0x4809, 0xe579, 0x6ef0, 0xe820, 0xdff3, 0xf756, 0x1, 0x0);
        gbc.writeMem(0x4809, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xe579, gbc.sp());
        EXPECT(0x480b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0110
        gbc.setState(0x1de1, 0x5881, 0x5a20, 0x749b, 0x810e, 0xe3de, 0x1, 0x1);
        gbc.writeMem(0x1de1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x5881, gbc.sp());
        EXPECT(0x1de3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0111
        gbc.setState(0xeb87, 0x52e4, 0xa3b0, 0x2214, 0x34e2, 0xb9cd, 0x0, 0x0);
        gbc.writeMem(0xeb87, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x52e4, gbc.sp());
        EXPECT(0xeb89, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb87));
        EXPECT(0x25, gbc.readMem(0xeb88));
        // CB 25 0112
        gbc.setState(0x6165, 0x22fa, 0x6440, 0xe729, 0xc2b8, 0xd150, 0x0, 0x1);
        gbc.writeMem(0x6165, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x22fa, gbc.sp());
        EXPECT(0x6167, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0113
        gbc.setState(0x85d7, 0x1119, 0x3a60, 0xab19, 0xb16b, 0x149b, 0x0, 0x0);
        gbc.writeMem(0x85d7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x1119, gbc.sp());
        EXPECT(0x85d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85d7));
        EXPECT(0x25, gbc.readMem(0x85d8));
        // CB 25 0114
        gbc.setState(0x69f, 0x4687, 0x7c90, 0x541c, 0xed9d, 0x1bb9, 0x0, 0x0);
        gbc.writeMem(0x69f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x4687, gbc.sp());
        EXPECT(0x6a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0115
        gbc.setState(0x991a, 0xcb01, 0x8010, 0x1a43, 0xe44a, 0x43b1, 0x1, 0x1);
        gbc.writeMem(0x991a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xcb01, gbc.sp());
        EXPECT(0x991c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x991a));
        EXPECT(0x25, gbc.readMem(0x991b));
        // CB 25 0116
        gbc.setState(0x9942, 0xc7d, 0x3b10, 0x3a1d, 0xf119, 0xf5a7, 0x0, 0x0);
        gbc.writeMem(0x9942, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xc7d, gbc.sp());
        EXPECT(0x9944, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9942));
        EXPECT(0x25, gbc.readMem(0x9943));
        // CB 25 0117
        gbc.setState(0x9afd, 0xf0cc, 0x2da0, 0x442a, 0xa92d, 0x1a87, 0x0, 0x0);
        gbc.writeMem(0x9afd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xf0cc, gbc.sp());
        EXPECT(0x9aff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9afd));
        EXPECT(0x25, gbc.readMem(0x9afe));
        // CB 25 0118
        gbc.setState(0x1d76, 0x7183, 0xc4d0, 0xd867, 0x1dc, 0x7561, 0x0, 0x1);
        gbc.writeMem(0x1d76, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x7183, gbc.sp());
        EXPECT(0x1d78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0119
        gbc.setState(0xa442, 0x7764, 0xf9f0, 0xdd54, 0x7858, 0xa075, 0x0, 0x0);
        gbc.writeMem(0xa442, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x7764, gbc.sp());
        EXPECT(0xa444, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa442));
        EXPECT(0x25, gbc.readMem(0xa443));
        // CB 25 011A
        gbc.setState(0xd9b8, 0x1f90, 0x9510, 0xd78, 0x8e90, 0x19fc, 0x1, 0x0);
        gbc.writeMem(0xd9b8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x1f90, gbc.sp());
        EXPECT(0xd9ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9b8));
        EXPECT(0x25, gbc.readMem(0xd9b9));
        // CB 25 011B
        gbc.setState(0x6c49, 0x7534, 0x4320, 0x2e3a, 0x6bce, 0x7803, 0x1, 0x0);
        gbc.writeMem(0x6c49, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x7534, gbc.sp());
        EXPECT(0x6c4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 011C
        gbc.setState(0xd5d9, 0xec3d, 0x79d0, 0x2681, 0xd472, 0xe0d0, 0x0, 0x1);
        gbc.writeMem(0xd5d9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xec3d, gbc.sp());
        EXPECT(0xd5db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5d9));
        EXPECT(0x25, gbc.readMem(0xd5da));
        // CB 25 011D
        gbc.setState(0xa3ae, 0xa0ea, 0x8170, 0x2f8b, 0x202f, 0x5bf0, 0x1, 0x0);
        gbc.writeMem(0xa3ae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xa0ea, gbc.sp());
        EXPECT(0xa3b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3ae));
        EXPECT(0x25, gbc.readMem(0xa3af));
        // CB 25 011E
        gbc.setState(0x104a, 0x7165, 0xbe20, 0xa526, 0x3ce0, 0xc2bb, 0x0, 0x1);
        gbc.writeMem(0x104a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x7165, gbc.sp());
        EXPECT(0x104c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 011F
        gbc.setState(0xa3f9, 0xa71a, 0x7360, 0xffb8, 0xab4e, 0x10b4, 0x1, 0x0);
        gbc.writeMem(0xa3f9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xa71a, gbc.sp());
        EXPECT(0xa3fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3f9));
        EXPECT(0x25, gbc.readMem(0xa3fa));
        // CB 25 0120
        gbc.setState(0x22e4, 0x222, 0xa750, 0xfc46, 0xbe48, 0xd582, 0x1, 0x1);
        gbc.writeMem(0x22e4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x222, gbc.sp());
        EXPECT(0x22e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0121
        gbc.setState(0xd8d1, 0xf7e3, 0xb8e0, 0x2aa8, 0xe51d, 0x8c5f, 0x1, 0x0);
        gbc.writeMem(0xd8d1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xf7e3, gbc.sp());
        EXPECT(0xd8d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8d1));
        EXPECT(0x25, gbc.readMem(0xd8d2));
        // CB 25 0122
        gbc.setState(0xc801, 0x628e, 0xc350, 0xd497, 0xf657, 0x4677, 0x1, 0x1);
        gbc.writeMem(0xc801, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x628e, gbc.sp());
        EXPECT(0xc803, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc801));
        EXPECT(0x25, gbc.readMem(0xc802));
        // CB 25 0123
        gbc.setState(0x218f, 0x4edd, 0x4300, 0xf41a, 0x843b, 0x7388, 0x0, 0x0);
        gbc.writeMem(0x218f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x4edd, gbc.sp());
        EXPECT(0x2191, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0125
        gbc.setState(0x1946, 0x1734, 0xfd90, 0xd70b, 0x399e, 0x694, 0x1, 0x0);
        gbc.writeMem(0x1946, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x1734, gbc.sp());
        EXPECT(0x1948, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0126
        gbc.setState(0xad96, 0xfd97, 0x4f0, 0xe750, 0x585f, 0x92eb, 0x1, 0x1);
        gbc.writeMem(0xad96, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xfd97, gbc.sp());
        EXPECT(0xad98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad96));
        EXPECT(0x25, gbc.readMem(0xad97));
        // CB 25 0127
        gbc.setState(0x319f, 0xf436, 0xb0b0, 0x878c, 0xd9f9, 0xfcea, 0x1, 0x1);
        gbc.writeMem(0x319f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xf436, gbc.sp());
        EXPECT(0x31a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0128
        gbc.setState(0xa81b, 0xdfe4, 0xf300, 0x470a, 0x7112, 0x72e1, 0x0, 0x0);
        gbc.writeMem(0xa81b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xdfe4, gbc.sp());
        EXPECT(0xa81d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa81b));
        EXPECT(0x25, gbc.readMem(0xa81c));
        // CB 25 0129
        gbc.setState(0xe824, 0x79f5, 0xd900, 0xa901, 0xa869, 0x55e3, 0x1, 0x1);
        gbc.writeMem(0xe824, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x79f5, gbc.sp());
        EXPECT(0xe826, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe824));
        EXPECT(0x25, gbc.readMem(0xe825));
        // CB 25 012A
        gbc.setState(0xc60c, 0x82dc, 0x80e0, 0xab4b, 0xe5c0, 0xb4dc, 0x0, 0x0);
        gbc.writeMem(0xc60c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x82dc, gbc.sp());
        EXPECT(0xc60e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc60c));
        EXPECT(0x25, gbc.readMem(0xc60d));
        // CB 25 012B
        gbc.setState(0xdb66, 0xad2c, 0xfaa0, 0x9592, 0xead9, 0x3c06, 0x1, 0x1);
        gbc.writeMem(0xdb66, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xad2c, gbc.sp());
        EXPECT(0xdb68, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb66));
        EXPECT(0x25, gbc.readMem(0xdb67));
        // CB 25 012C
        gbc.setState(0x6de2, 0x8ddb, 0xfa20, 0x9536, 0xb51e, 0xa3e4, 0x1, 0x1);
        gbc.writeMem(0x6de2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x8ddb, gbc.sp());
        EXPECT(0x6de4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 012D
        gbc.setState(0xb034, 0x5f1a, 0xa00, 0x4d54, 0x5e59, 0x2f45, 0x1, 0x1);
        gbc.writeMem(0xb034, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x5f1a, gbc.sp());
        EXPECT(0xb036, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb034));
        EXPECT(0x25, gbc.readMem(0xb035));
        // CB 25 012E
        gbc.setState(0x3a72, 0x8f14, 0x7e70, 0xc184, 0xfc09, 0x47ab, 0x0, 0x0);
        gbc.writeMem(0x3a72, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x8f14, gbc.sp());
        EXPECT(0x3a74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 012F
        gbc.setState(0x30d5, 0xab6e, 0x6c0, 0x65e3, 0xfd26, 0x81a0, 0x1, 0x1);
        gbc.writeMem(0x30d5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xab6e, gbc.sp());
        EXPECT(0x30d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0130
        gbc.setState(0xd1ac, 0x1fbf, 0x4840, 0x613, 0xd7a5, 0x1686, 0x1, 0x0);
        gbc.writeMem(0xd1ac, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x1fbf, gbc.sp());
        EXPECT(0xd1ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1ac));
        EXPECT(0x25, gbc.readMem(0xd1ad));
        // CB 25 0131
        gbc.setState(0x54d7, 0xb599, 0x4710, 0x6c2d, 0xa3c5, 0xe084, 0x1, 0x0);
        gbc.writeMem(0x54d7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xb599, gbc.sp());
        EXPECT(0x54d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0132
        gbc.setState(0x620c, 0x699d, 0x8e90, 0xf8d8, 0x45ae, 0xa18e, 0x1, 0x1);
        gbc.writeMem(0x620c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x699d, gbc.sp());
        EXPECT(0x620e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0133
        gbc.setState(0x4cef, 0xa36b, 0x9b80, 0x3da1, 0x1bdc, 0xac19, 0x1, 0x1);
        gbc.writeMem(0x4cef, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xa36b, gbc.sp());
        EXPECT(0x4cf1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0134
        gbc.setState(0x8fcd, 0xfdab, 0xca0, 0xef0c, 0xbb16, 0x5f08, 0x1, 0x0);
        gbc.writeMem(0x8fcd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xfdab, gbc.sp());
        EXPECT(0x8fcf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fcd));
        EXPECT(0x25, gbc.readMem(0x8fce));
        // CB 25 0135
        gbc.setState(0x8802, 0x3b64, 0x2d40, 0x4e92, 0x4121, 0x2cbb, 0x1, 0x1);
        gbc.writeMem(0x8802, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x3b64, gbc.sp());
        EXPECT(0x8804, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8802));
        EXPECT(0x25, gbc.readMem(0x8803));
        // CB 25 0136
        gbc.setState(0x34e5, 0x9337, 0x7f30, 0x6bf8, 0x4e4e, 0x1a5d, 0x1, 0x0);
        gbc.writeMem(0x34e5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x9337, gbc.sp());
        EXPECT(0x34e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0137
        gbc.setState(0x771b, 0x4d45, 0xd900, 0xb3bc, 0x329e, 0xf655, 0x0, 0x0);
        gbc.writeMem(0x771b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x4d45, gbc.sp());
        EXPECT(0x771d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0138
        gbc.setState(0x7cae, 0x6687, 0x60a0, 0x41dc, 0x8ff5, 0x6b2f, 0x1, 0x0);
        gbc.writeMem(0x7cae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x6687, gbc.sp());
        EXPECT(0x7cb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0139
        gbc.setState(0x94c9, 0x1fe5, 0x4d90, 0x5b6a, 0x6777, 0x20f3, 0x1, 0x1);
        gbc.writeMem(0x94c9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x1fe5, gbc.sp());
        EXPECT(0x94cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94c9));
        EXPECT(0x25, gbc.readMem(0x94ca));
        // CB 25 013A
        gbc.setState(0x6e7c, 0xec81, 0x18e0, 0xf889, 0x9ab3, 0x1982, 0x1, 0x0);
        gbc.writeMem(0x6e7c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xec81, gbc.sp());
        EXPECT(0x6e7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 013B
        gbc.setState(0x35db, 0xf91b, 0x58f0, 0x1f0d, 0xc4b4, 0x9b8f, 0x1, 0x1);
        gbc.writeMem(0x35db, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xf91b, gbc.sp());
        EXPECT(0x35dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 013D
        gbc.setState(0xde06, 0x32ca, 0x6c10, 0x62d3, 0xf69c, 0xe20f, 0x0, 0x0);
        gbc.writeMem(0xde06, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x32ca, gbc.sp());
        EXPECT(0xde08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde06));
        EXPECT(0x25, gbc.readMem(0xde07));
        // CB 25 013E
        gbc.setState(0x8f81, 0x65c, 0x37f0, 0x4e23, 0x2982, 0xfa81, 0x0, 0x0);
        gbc.writeMem(0x8f81, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x65c, gbc.sp());
        EXPECT(0x8f83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f81));
        EXPECT(0x25, gbc.readMem(0x8f82));
        // CB 25 013F
        gbc.setState(0xd6c1, 0xa230, 0x6390, 0xe272, 0x904e, 0xd193, 0x0, 0x0);
        gbc.writeMem(0xd6c1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xa230, gbc.sp());
        EXPECT(0xd6c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6c1));
        EXPECT(0x25, gbc.readMem(0xd6c2));
        // CB 25 0140
        gbc.setState(0x1b8b, 0x8597, 0xcb90, 0x74fe, 0x8219, 0xe632, 0x0, 0x0);
        gbc.writeMem(0x1b8b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x8597, gbc.sp());
        EXPECT(0x1b8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0141
        gbc.setState(0xeef7, 0x6804, 0x5160, 0x8838, 0x3a99, 0xdad7, 0x1, 0x1);
        gbc.writeMem(0xeef7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x6804, gbc.sp());
        EXPECT(0xeef9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeef7));
        EXPECT(0x25, gbc.readMem(0xeef8));
        // CB 25 0142
        gbc.setState(0xb46a, 0x37d1, 0x8260, 0x1a3, 0x239, 0xc0b8, 0x0, 0x1);
        gbc.writeMem(0xb46a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x37d1, gbc.sp());
        EXPECT(0xb46c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb46a));
        EXPECT(0x25, gbc.readMem(0xb46b));
        // CB 25 0143
        gbc.setState(0xbdb2, 0xbea6, 0x4bf0, 0x2f6f, 0xad2b, 0x6ed1, 0x1, 0x0);
        gbc.writeMem(0xbdb2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xbea6, gbc.sp());
        EXPECT(0xbdb4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdb2));
        EXPECT(0x25, gbc.readMem(0xbdb3));
        // CB 25 0144
        gbc.setState(0xe0fa, 0x19e, 0xe270, 0x10f, 0x92cd, 0x47ed, 0x0, 0x1);
        gbc.writeMem(0xe0fa, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x19e, gbc.sp());
        EXPECT(0xe0fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0fa));
        EXPECT(0x25, gbc.readMem(0xe0fb));
        // CB 25 0145
        gbc.setState(0xccac, 0x6c8c, 0x73b0, 0x6110, 0x8f01, 0x5aed, 0x0, 0x1);
        gbc.writeMem(0xccac, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x6c8c, gbc.sp());
        EXPECT(0xccae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccac));
        EXPECT(0x25, gbc.readMem(0xccad));
        // CB 25 0146
        gbc.setState(0x6533, 0x9e93, 0xedd0, 0x3ec9, 0x8d94, 0x1242, 0x1, 0x1);
        gbc.writeMem(0x6533, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x9e93, gbc.sp());
        EXPECT(0x6535, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0147
        gbc.setState(0x8a22, 0xb797, 0xd0a0, 0x958b, 0x1ec1, 0x30f5, 0x1, 0x0);
        gbc.writeMem(0x8a22, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xb797, gbc.sp());
        EXPECT(0x8a24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a22));
        EXPECT(0x25, gbc.readMem(0x8a23));
        // CB 25 0148
        gbc.setState(0xc912, 0x7c07, 0xd480, 0x9621, 0x9f21, 0xd225, 0x0, 0x1);
        gbc.writeMem(0xc912, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x7c07, gbc.sp());
        EXPECT(0xc914, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc912));
        EXPECT(0x25, gbc.readMem(0xc913));
        // CB 25 0149
        gbc.setState(0xbf84, 0xe3f0, 0x4870, 0x31f8, 0x8376, 0x7daf, 0x1, 0x0);
        gbc.writeMem(0xbf84, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xe3f0, gbc.sp());
        EXPECT(0xbf86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf84));
        EXPECT(0x25, gbc.readMem(0xbf85));
        // CB 25 014A
        gbc.setState(0x58b4, 0x4d0f, 0xe840, 0xd0f, 0xde2e, 0xb5a8, 0x0, 0x1);
        gbc.writeMem(0x58b4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x4d0f, gbc.sp());
        EXPECT(0x58b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 014C
        gbc.setState(0x5919, 0x236b, 0xc750, 0xc87b, 0x2b26, 0xa2ee, 0x0, 0x1);
        gbc.writeMem(0x5919, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x236b, gbc.sp());
        EXPECT(0x591b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 014D
        gbc.setState(0x9f11, 0x5f3d, 0x5130, 0x71b1, 0x3a1b, 0x90a0, 0x0, 0x0);
        gbc.writeMem(0x9f11, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x5f3d, gbc.sp());
        EXPECT(0x9f13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f11));
        EXPECT(0x25, gbc.readMem(0x9f12));
        // CB 25 014E
        gbc.setState(0x77b8, 0xdcbd, 0x3a10, 0x2ca6, 0xc935, 0xdeb8, 0x1, 0x0);
        gbc.writeMem(0x77b8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xdcbd, gbc.sp());
        EXPECT(0x77ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 014F
        gbc.setState(0x9945, 0x96ab, 0x5050, 0x9159, 0x4b36, 0x3f1b, 0x1, 0x0);
        gbc.writeMem(0x9945, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x96ab, gbc.sp());
        EXPECT(0x9947, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9945));
        EXPECT(0x25, gbc.readMem(0x9946));
        // CB 25 0150
        gbc.setState(0xa85a, 0xb350, 0xc470, 0x3cc2, 0x9cd3, 0x25d0, 0x1, 0x0);
        gbc.writeMem(0xa85a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xb350, gbc.sp());
        EXPECT(0xa85c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa85a));
        EXPECT(0x25, gbc.readMem(0xa85b));
        // CB 25 0151
        gbc.setState(0x3e65, 0x3d6c, 0x320, 0x9236, 0x7d05, 0xeb74, 0x0, 0x0);
        gbc.writeMem(0x3e65, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x3d6c, gbc.sp());
        EXPECT(0x3e67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0152
        gbc.setState(0x2405, 0x8a74, 0x9240, 0xdbff, 0x2e81, 0x1dee, 0x1, 0x1);
        gbc.writeMem(0x2405, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x8a74, gbc.sp());
        EXPECT(0x2407, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0153
        gbc.setState(0xebbd, 0x8c88, 0xe3e0, 0x4285, 0xb31a, 0x10ef, 0x0, 0x1);
        gbc.writeMem(0xebbd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x8c88, gbc.sp());
        EXPECT(0xebbf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebbd));
        EXPECT(0x25, gbc.readMem(0xebbe));
        // CB 25 0154
        gbc.setState(0x4248, 0xb2c5, 0xc7f0, 0x3b43, 0xedb7, 0x540e, 0x0, 0x0);
        gbc.writeMem(0x4248, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xb2c5, gbc.sp());
        EXPECT(0x424a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0155
        gbc.setState(0x7c65, 0xb62b, 0x9d0, 0x2ba1, 0x484f, 0x75ef, 0x1, 0x0);
        gbc.writeMem(0x7c65, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xb62b, gbc.sp());
        EXPECT(0x7c67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0156
        gbc.setState(0x8de8, 0x5698, 0x7bc0, 0xa30d, 0xea0a, 0x862f, 0x1, 0x1);
        gbc.writeMem(0x8de8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x5698, gbc.sp());
        EXPECT(0x8dea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8de8));
        EXPECT(0x25, gbc.readMem(0x8de9));
        // CB 25 0157
        gbc.setState(0xc3db, 0xbc7a, 0x1d0, 0x1704, 0x70dc, 0x1758, 0x1, 0x0);
        gbc.writeMem(0xc3db, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xbc7a, gbc.sp());
        EXPECT(0xc3dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3db));
        EXPECT(0x25, gbc.readMem(0xc3dc));
        // CB 25 0158
        gbc.setState(0x3687, 0xb26, 0x5370, 0x3927, 0x611d, 0x3e44, 0x1, 0x0);
        gbc.writeMem(0x3687, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xb26, gbc.sp());
        EXPECT(0x3689, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0159
        gbc.setState(0x9c3e, 0x4c18, 0x6220, 0x6ab4, 0x7a78, 0x3849, 0x1, 0x0);
        gbc.writeMem(0x9c3e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x4c18, gbc.sp());
        EXPECT(0x9c40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c3e));
        EXPECT(0x25, gbc.readMem(0x9c3f));
        // CB 25 015A
        gbc.setState(0x7d74, 0xdd6f, 0x9f30, 0xdbda, 0xd12f, 0x5976, 0x1, 0x1);
        gbc.writeMem(0x7d74, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xdd6f, gbc.sp());
        EXPECT(0x7d76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 015B
        gbc.setState(0x8301, 0xd054, 0x60, 0xce9f, 0xd33c, 0x5ec1, 0x0, 0x0);
        gbc.writeMem(0x8301, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xd054, gbc.sp());
        EXPECT(0x8303, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8301));
        EXPECT(0x25, gbc.readMem(0x8302));
        // CB 25 015C
        gbc.setState(0xeb18, 0x9513, 0x98c0, 0x7392, 0x5501, 0x6901, 0x1, 0x1);
        gbc.writeMem(0xeb18, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x9513, gbc.sp());
        EXPECT(0xeb1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb18));
        EXPECT(0x25, gbc.readMem(0xeb19));
        // CB 25 015D
        gbc.setState(0xe37d, 0x94b0, 0x2400, 0x7b9d, 0x100, 0xf62a, 0x0, 0x0);
        gbc.writeMem(0xe37d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x94b0, gbc.sp());
        EXPECT(0xe37f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe37d));
        EXPECT(0x25, gbc.readMem(0xe37e));
        // CB 25 015E
        gbc.setState(0x64d6, 0x8a66, 0x8a00, 0xe28b, 0x4888, 0x7840, 0x1, 0x0);
        gbc.writeMem(0x64d6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x8a66, gbc.sp());
        EXPECT(0x64d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 015F
        gbc.setState(0x3a81, 0x8038, 0xad80, 0x75c2, 0x5588, 0x3dac, 0x1, 0x0);
        gbc.writeMem(0x3a81, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x8038, gbc.sp());
        EXPECT(0x3a83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0160
        gbc.setState(0x3a45, 0xeffb, 0xf8f0, 0x4a2d, 0x9981, 0x61bd, 0x1, 0x1);
        gbc.writeMem(0x3a45, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xeffb, gbc.sp());
        EXPECT(0x3a47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0161
        gbc.setState(0xe08e, 0xd9a9, 0x7850, 0xe5cf, 0xa179, 0x24c9, 0x1, 0x1);
        gbc.writeMem(0xe08e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xd9a9, gbc.sp());
        EXPECT(0xe090, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe08e));
        EXPECT(0x25, gbc.readMem(0xe08f));
        // CB 25 0163
        gbc.setState(0xefe8, 0x2684, 0x9b80, 0xc4eb, 0x6d8e, 0x999d, 0x1, 0x0);
        gbc.writeMem(0xefe8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x2684, gbc.sp());
        EXPECT(0xefea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefe8));
        EXPECT(0x25, gbc.readMem(0xefe9));
        // CB 25 0164
        gbc.setState(0xeb1a, 0x95ad, 0x8e60, 0x6c14, 0x17d9, 0x1f0d, 0x1, 0x1);
        gbc.writeMem(0xeb1a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x95ad, gbc.sp());
        EXPECT(0xeb1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb1a));
        EXPECT(0x25, gbc.readMem(0xeb1b));
        // CB 25 0165
        gbc.setState(0x5128, 0x8b01, 0x8ec0, 0xd668, 0xed18, 0x951d, 0x0, 0x1);
        gbc.writeMem(0x5128, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x8b01, gbc.sp());
        EXPECT(0x512a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0166
        gbc.setState(0x77ee, 0xf314, 0xef40, 0x5a4, 0xf615, 0x968a, 0x0, 0x1);
        gbc.writeMem(0x77ee, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xf314, gbc.sp());
        EXPECT(0x77f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0167
        gbc.setState(0x2afb, 0xbc08, 0x7600, 0xb43, 0x4de6, 0x9a3b, 0x1, 0x1);
        gbc.writeMem(0x2afb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xbc08, gbc.sp());
        EXPECT(0x2afd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0168
        gbc.setState(0xe05a, 0x2c54, 0x1e60, 0x2550, 0xab7d, 0xea2c, 0x1, 0x1);
        gbc.writeMem(0xe05a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x2c54, gbc.sp());
        EXPECT(0xe05c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe05a));
        EXPECT(0x25, gbc.readMem(0xe05b));
        // CB 25 0169
        gbc.setState(0x443d, 0xedb7, 0x90f0, 0xccca, 0xaaf5, 0x1bca, 0x1, 0x1);
        gbc.writeMem(0x443d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xedb7, gbc.sp());
        EXPECT(0x443f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 016A
        gbc.setState(0x69b3, 0xc907, 0x6fd0, 0xa334, 0x7441, 0x5a87, 0x1, 0x1);
        gbc.writeMem(0x69b3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xc907, gbc.sp());
        EXPECT(0x69b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 016B
        gbc.setState(0x1987, 0x4cb1, 0xb320, 0x19b2, 0x8a69, 0xc2f2, 0x0, 0x1);
        gbc.writeMem(0x1987, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x4cb1, gbc.sp());
        EXPECT(0x1989, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 016C
        gbc.setState(0x6334, 0x33c2, 0x52b0, 0x7abd, 0x23bd, 0xb930, 0x0, 0x0);
        gbc.writeMem(0x6334, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x33c2, gbc.sp());
        EXPECT(0x6336, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 016D
        gbc.setState(0x1f16, 0xe572, 0x73f0, 0xfa8b, 0xd155, 0xc2e2, 0x0, 0x1);
        gbc.writeMem(0x1f16, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xe572, gbc.sp());
        EXPECT(0x1f18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 016E
        gbc.setState(0xb46a, 0xbcc7, 0x9a40, 0xea81, 0x2b2c, 0xb096, 0x1, 0x1);
        gbc.writeMem(0xb46a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xbcc7, gbc.sp());
        EXPECT(0xb46c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb46a));
        EXPECT(0x25, gbc.readMem(0xb46b));
        // CB 25 016F
        gbc.setState(0xbd58, 0x2ef0, 0x37b0, 0xcfcb, 0xfa05, 0xbd06, 0x0, 0x0);
        gbc.writeMem(0xbd58, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x2ef0, gbc.sp());
        EXPECT(0xbd5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd58));
        EXPECT(0x25, gbc.readMem(0xbd59));
        // CB 25 0170
        gbc.setState(0xe8df, 0x787d, 0xb790, 0x43f1, 0xbc47, 0x8205, 0x1, 0x0);
        gbc.writeMem(0xe8df, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x787d, gbc.sp());
        EXPECT(0xe8e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8df));
        EXPECT(0x25, gbc.readMem(0xe8e0));
        // CB 25 0171
        gbc.setState(0x3df1, 0x1e56, 0xab40, 0xf4f7, 0x125a, 0x822a, 0x1, 0x0);
        gbc.writeMem(0x3df1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x1e56, gbc.sp());
        EXPECT(0x3df3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0172
        gbc.setState(0xb5a9, 0x4e5c, 0x8730, 0x1e17, 0xb2c9, 0x60c, 0x0, 0x0);
        gbc.writeMem(0xb5a9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x4e5c, gbc.sp());
        EXPECT(0xb5ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5a9));
        EXPECT(0x25, gbc.readMem(0xb5aa));
        // CB 25 0173
        gbc.setState(0x4ea6, 0x75fc, 0x3210, 0x8c9d, 0x6bfb, 0x5db7, 0x0, 0x0);
        gbc.writeMem(0x4ea6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x75fc, gbc.sp());
        EXPECT(0x4ea8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0174
        gbc.setState(0x8702, 0x8f0, 0x6f30, 0xbbeb, 0x5ed4, 0x422e, 0x1, 0x1);
        gbc.writeMem(0x8702, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x8f0, gbc.sp());
        EXPECT(0x8704, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8702));
        EXPECT(0x25, gbc.readMem(0x8703));
        // CB 25 0175
        gbc.setState(0xa454, 0xf521, 0xc390, 0x9848, 0x1a8e, 0xde92, 0x1, 0x0);
        gbc.writeMem(0xa454, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xf521, gbc.sp());
        EXPECT(0xa456, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa454));
        EXPECT(0x25, gbc.readMem(0xa455));
        // CB 25 0176
        gbc.setState(0x66ac, 0x35fa, 0xe940, 0x85c8, 0xd119, 0xc8c0, 0x0, 0x0);
        gbc.writeMem(0x66ac, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x35fa, gbc.sp());
        EXPECT(0x66ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0177
        gbc.setState(0x50e0, 0x3513, 0x3b70, 0xd119, 0xc946, 0xca75, 0x0, 0x1);
        gbc.writeMem(0x50e0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x3513, gbc.sp());
        EXPECT(0x50e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0179
        gbc.setState(0x758f, 0xb85d, 0x5d10, 0xe6fc, 0x386e, 0x5b08, 0x1, 0x0);
        gbc.writeMem(0x758f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xb85d, gbc.sp());
        EXPECT(0x7591, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 017A
        gbc.setState(0x96de, 0xd9c9, 0xdf90, 0x2062, 0xed96, 0x23ee, 0x1, 0x0);
        gbc.writeMem(0x96de, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xd9c9, gbc.sp());
        EXPECT(0x96e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96de));
        EXPECT(0x25, gbc.readMem(0x96df));
        // CB 25 017C
        gbc.setState(0xa550, 0x7deb, 0xe390, 0xe300, 0x80d9, 0x5348, 0x0, 0x1);
        gbc.writeMem(0xa550, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x7deb, gbc.sp());
        EXPECT(0xa552, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa550));
        EXPECT(0x25, gbc.readMem(0xa551));
        // CB 25 017E
        gbc.setState(0xc0c9, 0xd48c, 0xfae0, 0x9de, 0x6b49, 0xc2ca, 0x1, 0x1);
        gbc.writeMem(0xc0c9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xd48c, gbc.sp());
        EXPECT(0xc0cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0c9));
        EXPECT(0x25, gbc.readMem(0xc0ca));
        // CB 25 017F
        gbc.setState(0x1792, 0x9122, 0xd780, 0x3cd4, 0x9289, 0xfc6c, 0x1, 0x1);
        gbc.writeMem(0x1792, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x9122, gbc.sp());
        EXPECT(0x1794, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0180
        gbc.setState(0x2151, 0x2a32, 0x9b50, 0x69, 0x9362, 0xcb05, 0x0, 0x0);
        gbc.writeMem(0x2151, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x2a32, gbc.sp());
        EXPECT(0x2153, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0181
        gbc.setState(0x90b0, 0xe267, 0x3210, 0x35f8, 0xd936, 0x8644, 0x0, 0x0);
        gbc.writeMem(0x90b0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xe267, gbc.sp());
        EXPECT(0x90b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90b0));
        EXPECT(0x25, gbc.readMem(0x90b1));
        // CB 25 0183
        gbc.setState(0xd595, 0x3acf, 0xb00, 0xa09c, 0x2334, 0x5a1c, 0x0, 0x0);
        gbc.writeMem(0xd595, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x3acf, gbc.sp());
        EXPECT(0xd597, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd595));
        EXPECT(0x25, gbc.readMem(0xd596));
        // CB 25 0184
        gbc.setState(0x9619, 0x2ce9, 0x1d30, 0xdab8, 0x7936, 0xdfd7, 0x1, 0x0);
        gbc.writeMem(0x9619, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x2ce9, gbc.sp());
        EXPECT(0x961b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9619));
        EXPECT(0x25, gbc.readMem(0x961a));
        // CB 25 0185
        gbc.setState(0xa503, 0x7029, 0x80e0, 0x6392, 0xde95, 0x5fd, 0x1, 0x1);
        gbc.writeMem(0xa503, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x7029, gbc.sp());
        EXPECT(0xa505, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa503));
        EXPECT(0x25, gbc.readMem(0xa504));
        // CB 25 0186
        gbc.setState(0x77e1, 0x346, 0xa2b0, 0xba38, 0xdfbd, 0xaef3, 0x0, 0x1);
        gbc.writeMem(0x77e1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x346, gbc.sp());
        EXPECT(0x77e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0188
        gbc.setState(0x5c54, 0x262, 0x9a60, 0xcee4, 0xfc74, 0x6126, 0x0, 0x0);
        gbc.writeMem(0x5c54, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x262, gbc.sp());
        EXPECT(0x5c56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0189
        gbc.setState(0x879c, 0xb61b, 0xadd0, 0xaf3c, 0x9a1a, 0xac2c, 0x0, 0x1);
        gbc.writeMem(0x879c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xb61b, gbc.sp());
        EXPECT(0x879e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x879c));
        EXPECT(0x25, gbc.readMem(0x879d));
        // CB 25 018A
        gbc.setState(0xadfe, 0xa8f, 0x2860, 0x240b, 0xda8e, 0x3b49, 0x0, 0x1);
        gbc.writeMem(0xadfe, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xa8f, gbc.sp());
        EXPECT(0xae00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadfe));
        EXPECT(0x25, gbc.readMem(0xadff));
        // CB 25 018B
        gbc.setState(0xb771, 0x579d, 0x7b50, 0xeb37, 0xa6bc, 0xb48d, 0x1, 0x0);
        gbc.writeMem(0xb771, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x579d, gbc.sp());
        EXPECT(0xb773, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb771));
        EXPECT(0x25, gbc.readMem(0xb772));
        // CB 25 018C
        gbc.setState(0x6f06, 0xd64, 0xead0, 0x95f4, 0x32f8, 0x349f, 0x1, 0x1);
        gbc.writeMem(0x6f06, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xd64, gbc.sp());
        EXPECT(0x6f08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 018E
        gbc.setState(0x952, 0x7c4b, 0x8c00, 0xdad2, 0xcbdc, 0xfa4b, 0x0, 0x1);
        gbc.writeMem(0x952, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x7c4b, gbc.sp());
        EXPECT(0x954, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 018F
        gbc.setState(0x3d7a, 0x90ac, 0x8db0, 0x8a35, 0x5dc4, 0xa260, 0x1, 0x0);
        gbc.writeMem(0x3d7a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x90ac, gbc.sp());
        EXPECT(0x3d7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0190
        gbc.setState(0xb966, 0x6775, 0x980, 0x8700, 0x8842, 0xcda6, 0x1, 0x0);
        gbc.writeMem(0xb966, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x6775, gbc.sp());
        EXPECT(0xb968, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb966));
        EXPECT(0x25, gbc.readMem(0xb967));
        // CB 25 0191
        gbc.setState(0x381, 0x66f0, 0xf600, 0x16d4, 0xe4b0, 0xb77d, 0x0, 0x1);
        gbc.writeMem(0x381, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x66f0, gbc.sp());
        EXPECT(0x383, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0192
        gbc.setState(0xdafb, 0x7dac, 0x3d50, 0x6c7c, 0xb6db, 0x9ebd, 0x1, 0x1);
        gbc.writeMem(0xdafb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x7dac, gbc.sp());
        EXPECT(0xdafd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdafb));
        EXPECT(0x25, gbc.readMem(0xdafc));
        // CB 25 0193
        gbc.setState(0x72f2, 0xc4bc, 0x30, 0x8da6, 0x7f4b, 0xfc06, 0x0, 0x0);
        gbc.writeMem(0x72f2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xc4bc, gbc.sp());
        EXPECT(0x72f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0194
        gbc.setState(0xab1e, 0xd99a, 0x9d70, 0x60a8, 0xe337, 0x4632, 0x0, 0x1);
        gbc.writeMem(0xab1e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xd99a, gbc.sp());
        EXPECT(0xab20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab1e));
        EXPECT(0x25, gbc.readMem(0xab1f));
        // CB 25 0195
        gbc.setState(0x6535, 0x8b55, 0x9d60, 0x967c, 0x40c4, 0xff10, 0x1, 0x0);
        gbc.writeMem(0x6535, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x8b55, gbc.sp());
        EXPECT(0x6537, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0196
        gbc.setState(0x7e01, 0xffa6, 0xac80, 0x6502, 0xa092, 0x198e, 0x1, 0x0);
        gbc.writeMem(0x7e01, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xffa6, gbc.sp());
        EXPECT(0x7e03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0197
        gbc.setState(0xe4d5, 0x4943, 0x80, 0x3caf, 0xf77c, 0x7b2c, 0x0, 0x1);
        gbc.writeMem(0xe4d5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x4943, gbc.sp());
        EXPECT(0xe4d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4d5));
        EXPECT(0x25, gbc.readMem(0xe4d6));
        // CB 25 0199
        gbc.setState(0xc0c2, 0xb092, 0x5080, 0x9160, 0x891d, 0x4667, 0x0, 0x1);
        gbc.writeMem(0xc0c2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xb092, gbc.sp());
        EXPECT(0xc0c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0c2));
        EXPECT(0x25, gbc.readMem(0xc0c3));
        // CB 25 019A
        gbc.setState(0x80b2, 0xc2ab, 0x2820, 0xc520, 0xe896, 0xe237, 0x0, 0x1);
        gbc.writeMem(0x80b2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xc2ab, gbc.sp());
        EXPECT(0x80b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80b2));
        EXPECT(0x25, gbc.readMem(0x80b3));
        // CB 25 019B
        gbc.setState(0x3472, 0x856b, 0xe790, 0xd37, 0x7ba2, 0xbdff, 0x1, 0x0);
        gbc.writeMem(0x3472, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x856b, gbc.sp());
        EXPECT(0x3474, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 019D
        gbc.setState(0xed39, 0x30a, 0xf070, 0x2e2, 0x5864, 0x94e5, 0x1, 0x0);
        gbc.writeMem(0xed39, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x30a, gbc.sp());
        EXPECT(0xed3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed39));
        EXPECT(0x25, gbc.readMem(0xed3a));
        // CB 25 019E
        gbc.setState(0x1abb, 0x2704, 0xf860, 0x585f, 0x1530, 0xe3c7, 0x0, 0x0);
        gbc.writeMem(0x1abb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x2704, gbc.sp());
        EXPECT(0x1abd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 019F
        gbc.setState(0x6032, 0x435, 0x5d0, 0x9886, 0x9347, 0x654a, 0x0, 0x1);
        gbc.writeMem(0x6032, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x435, gbc.sp());
        EXPECT(0x6034, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01A0
        gbc.setState(0x69d1, 0x7249, 0xa50, 0x53fe, 0x2998, 0x6748, 0x0, 0x0);
        gbc.writeMem(0x69d1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x7249, gbc.sp());
        EXPECT(0x69d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01A1
        gbc.setState(0x7c58, 0xb853, 0x49f0, 0xc1a, 0x13ea, 0x4d7a, 0x0, 0x1);
        gbc.writeMem(0x7c58, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xb853, gbc.sp());
        EXPECT(0x7c5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01A2
        gbc.setState(0x701a, 0xe1ed, 0xef40, 0xe36d, 0x9450, 0xf117, 0x1, 0x1);
        gbc.writeMem(0x701a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xe1ed, gbc.sp());
        EXPECT(0x701c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01A3
        gbc.setState(0xb14a, 0xee0b, 0xff0, 0xf76e, 0x19bb, 0x2f9c, 0x1, 0x0);
        gbc.writeMem(0xb14a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xee0b, gbc.sp());
        EXPECT(0xb14c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb14a));
        EXPECT(0x25, gbc.readMem(0xb14b));
        // CB 25 01A4
        gbc.setState(0xbec2, 0x651, 0xc820, 0x4f65, 0xfcf1, 0x64a5, 0x0, 0x1);
        gbc.writeMem(0xbec2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x651, gbc.sp());
        EXPECT(0xbec4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbec2));
        EXPECT(0x25, gbc.readMem(0xbec3));
        // CB 25 01A5
        gbc.setState(0x71eb, 0x615a, 0xba50, 0xc7a6, 0x4a52, 0xae7e, 0x1, 0x0);
        gbc.writeMem(0x71eb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x615a, gbc.sp());
        EXPECT(0x71ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01A6
        gbc.setState(0xee1b, 0x4b9e, 0xe660, 0x5b0f, 0x9, 0x5135, 0x0, 0x1);
        gbc.writeMem(0xee1b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x4b9e, gbc.sp());
        EXPECT(0xee1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee1b));
        EXPECT(0x25, gbc.readMem(0xee1c));
        // CB 25 01A7
        gbc.setState(0xeab7, 0xc969, 0x15a0, 0x2f64, 0x7d08, 0x23bf, 0x0, 0x0);
        gbc.writeMem(0xeab7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xc969, gbc.sp());
        EXPECT(0xeab9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeab7));
        EXPECT(0x25, gbc.readMem(0xeab8));
        // CB 25 01A8
        gbc.setState(0x891f, 0xbf5a, 0xa8c0, 0x6a7c, 0x59f1, 0xbe0c, 0x0, 0x1);
        gbc.writeMem(0x891f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xbf5a, gbc.sp());
        EXPECT(0x8921, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x891f));
        EXPECT(0x25, gbc.readMem(0x8920));
        // CB 25 01A9
        gbc.setState(0xe619, 0xdfbd, 0x5390, 0xae0f, 0xb2da, 0xb994, 0x1, 0x1);
        gbc.writeMem(0xe619, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xdfbd, gbc.sp());
        EXPECT(0xe61b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe619));
        EXPECT(0x25, gbc.readMem(0xe61a));
        // CB 25 01AA
        gbc.setState(0xc4bd, 0x16e0, 0x1410, 0x6eeb, 0x33e6, 0x7c01, 0x1, 0x1);
        gbc.writeMem(0xc4bd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x16e0, gbc.sp());
        EXPECT(0xc4bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4bd));
        EXPECT(0x25, gbc.readMem(0xc4be));
        // CB 25 01AB
        gbc.setState(0x1c83, 0x4d86, 0xeb0, 0x1d04, 0x65a4, 0x3ba8, 0x1, 0x1);
        gbc.writeMem(0x1c83, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x4d86, gbc.sp());
        EXPECT(0x1c85, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01AC
        gbc.setState(0x92a2, 0xd1d8, 0xd960, 0x7fb4, 0x96fb, 0xab92, 0x1, 0x0);
        gbc.writeMem(0x92a2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xd1d8, gbc.sp());
        EXPECT(0x92a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92a2));
        EXPECT(0x25, gbc.readMem(0x92a3));
        // CB 25 01AD
        gbc.setState(0xec7e, 0x4fe4, 0x9720, 0x14e6, 0xd700, 0x8d98, 0x1, 0x1);
        gbc.writeMem(0xec7e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x4fe4, gbc.sp());
        EXPECT(0xec80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec7e));
        EXPECT(0x25, gbc.readMem(0xec7f));
        // CB 25 01AE
        gbc.setState(0xbd8b, 0xd64d, 0xb70, 0x62b7, 0x27b5, 0x5983, 0x1, 0x0);
        gbc.writeMem(0xbd8b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xd64d, gbc.sp());
        EXPECT(0xbd8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd8b));
        EXPECT(0x25, gbc.readMem(0xbd8c));
        // CB 25 01AF
        gbc.setState(0x54ce, 0x6a01, 0x3740, 0xed12, 0x9c27, 0xacfc, 0x0, 0x0);
        gbc.writeMem(0x54ce, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x6a01, gbc.sp());
        EXPECT(0x54d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01B0
        gbc.setState(0x8c95, 0xb10b, 0xcb00, 0xc22b, 0x603, 0x7dd, 0x1, 0x1);
        gbc.writeMem(0x8c95, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xb10b, gbc.sp());
        EXPECT(0x8c97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c95));
        EXPECT(0x25, gbc.readMem(0x8c96));
        // CB 25 01B1
        gbc.setState(0x1045, 0x729f, 0x69f0, 0xf76f, 0x6831, 0xff76, 0x1, 0x1);
        gbc.writeMem(0x1045, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x729f, gbc.sp());
        EXPECT(0x1047, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01B2
        gbc.setState(0x6f0d, 0x2725, 0xad30, 0x6188, 0x2c93, 0xfb9, 0x1, 0x0);
        gbc.writeMem(0x6f0d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x2725, gbc.sp());
        EXPECT(0x6f0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01B3
        gbc.setState(0x8da8, 0x1d, 0x64a0, 0x542a, 0xb4ac, 0x2444, 0x0, 0x0);
        gbc.writeMem(0x8da8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x1d, gbc.sp());
        EXPECT(0x8daa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8da8));
        EXPECT(0x25, gbc.readMem(0x8da9));
        // CB 25 01B4
        gbc.setState(0x1e33, 0xb3db, 0xa630, 0xe2e, 0xdf94, 0x8d69, 0x0, 0x1);
        gbc.writeMem(0x1e33, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xb3db, gbc.sp());
        EXPECT(0x1e35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01B5
        gbc.setState(0x18e, 0x4ae9, 0xdbc0, 0x11d, 0xa740, 0x5d6b, 0x1, 0x1);
        gbc.writeMem(0x18e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x4ae9, gbc.sp());
        EXPECT(0x190, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01B6
        gbc.setState(0x85d3, 0x446d, 0xe320, 0xc182, 0xb734, 0xc3c8, 0x0, 0x1);
        gbc.writeMem(0x85d3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x446d, gbc.sp());
        EXPECT(0x85d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85d3));
        EXPECT(0x25, gbc.readMem(0x85d4));
        // CB 25 01B7
        gbc.setState(0x9c5d, 0xaa8, 0x5b10, 0xcd79, 0x9f63, 0x9750, 0x0, 0x1);
        gbc.writeMem(0x9c5d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xaa8, gbc.sp());
        EXPECT(0x9c5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c5d));
        EXPECT(0x25, gbc.readMem(0x9c5e));
        // CB 25 01B8
        gbc.setState(0xb29e, 0xb5be, 0x4060, 0xd1a7, 0xffc1, 0xcb70, 0x1, 0x0);
        gbc.writeMem(0xb29e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xb5be, gbc.sp());
        EXPECT(0xb2a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb29e));
        EXPECT(0x25, gbc.readMem(0xb29f));
        // CB 25 01B9
        gbc.setState(0x45a1, 0xd4c5, 0xcd90, 0x446d, 0x5165, 0xedcf, 0x0, 0x1);
        gbc.writeMem(0x45a1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xd4c5, gbc.sp());
        EXPECT(0x45a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01BA
        gbc.setState(0x8f79, 0x7db1, 0x2730, 0xe0a3, 0xc46b, 0x7051, 0x1, 0x1);
        gbc.writeMem(0x8f79, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x7db1, gbc.sp());
        EXPECT(0x8f7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f79));
        EXPECT(0x25, gbc.readMem(0x8f7a));
        // CB 25 01BB
        gbc.setState(0x70ce, 0x8573, 0x8ca0, 0x754, 0xe8e4, 0x6253, 0x1, 0x0);
        gbc.writeMem(0x70ce, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x8573, gbc.sp());
        EXPECT(0x70d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01BC
        gbc.setState(0x5504, 0x92a6, 0xdce0, 0xe9c0, 0x68ac, 0xa57f, 0x0, 0x1);
        gbc.writeMem(0x5504, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x92a6, gbc.sp());
        EXPECT(0x5506, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01BD
        gbc.setState(0x9f64, 0x5de, 0xbbb0, 0x255f, 0x3dbd, 0xa5af, 0x1, 0x1);
        gbc.writeMem(0x9f64, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x5de, gbc.sp());
        EXPECT(0x9f66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f64));
        EXPECT(0x25, gbc.readMem(0x9f65));
        // CB 25 01BE
        gbc.setState(0xea2b, 0xf7f5, 0xd730, 0x16a2, 0x6ed7, 0x2fdb, 0x0, 0x0);
        gbc.writeMem(0xea2b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xf7f5, gbc.sp());
        EXPECT(0xea2d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea2b));
        EXPECT(0x25, gbc.readMem(0xea2c));
        // CB 25 01BF
        gbc.setState(0x9b43, 0x5313, 0x5970, 0xd113, 0x906f, 0xea41, 0x0, 0x0);
        gbc.writeMem(0x9b43, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x5313, gbc.sp());
        EXPECT(0x9b45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b43));
        EXPECT(0x25, gbc.readMem(0x9b44));
        // CB 25 01C0
        gbc.setState(0x2ef, 0x5b37, 0xeec0, 0x908c, 0x86c0, 0xeb30, 0x1, 0x1);
        gbc.writeMem(0x2ef, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x5b37, gbc.sp());
        EXPECT(0x2f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01C1
        gbc.setState(0xbb32, 0x929a, 0x2db0, 0x12a3, 0x3f9d, 0xf21d, 0x1, 0x1);
        gbc.writeMem(0xbb32, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x929a, gbc.sp());
        EXPECT(0xbb34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb32));
        EXPECT(0x25, gbc.readMem(0xbb33));
        // CB 25 01C2
        gbc.setState(0x3c7, 0x5c2b, 0xc1f0, 0x11cc, 0xc88f, 0xffc4, 0x0, 0x0);
        gbc.writeMem(0x3c7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x5c2b, gbc.sp());
        EXPECT(0x3c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01C3
        gbc.setState(0x61ae, 0xf9cf, 0x9700, 0xc56e, 0xf746, 0xe502, 0x0, 0x0);
        gbc.writeMem(0x61ae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xf9cf, gbc.sp());
        EXPECT(0x61b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01C4
        gbc.setState(0x45fe, 0x1dcc, 0x4bd0, 0xbd37, 0x4e24, 0x8288, 0x0, 0x0);
        gbc.writeMem(0x45fe, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x1dcc, gbc.sp());
        EXPECT(0x4600, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01C5
        gbc.setState(0xca9d, 0x907d, 0x2350, 0x9c2, 0xc555, 0x3ee8, 0x1, 0x1);
        gbc.writeMem(0xca9d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x907d, gbc.sp());
        EXPECT(0xca9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca9d));
        EXPECT(0x25, gbc.readMem(0xca9e));
        // CB 25 01C6
        gbc.setState(0x3d16, 0x7118, 0x5f70, 0x9d74, 0xfa83, 0x3c15, 0x0, 0x0);
        gbc.writeMem(0x3d16, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x7118, gbc.sp());
        EXPECT(0x3d18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01C7
        gbc.setState(0x9599, 0xe40f, 0x87b0, 0x6bf6, 0x8753, 0x57e, 0x1, 0x0);
        gbc.writeMem(0x9599, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xe40f, gbc.sp());
        EXPECT(0x959b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9599));
        EXPECT(0x25, gbc.readMem(0x959a));
        // CB 25 01C8
        gbc.setState(0x94dc, 0x7b03, 0x16d0, 0x5286, 0x7238, 0x7dd3, 0x1, 0x0);
        gbc.writeMem(0x94dc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x7b03, gbc.sp());
        EXPECT(0x94de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94dc));
        EXPECT(0x25, gbc.readMem(0x94dd));
        // CB 25 01C9
        gbc.setState(0xda62, 0x7702, 0x6b0, 0x7e37, 0xbdd, 0xcbaf, 0x0, 0x1);
        gbc.writeMem(0xda62, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x7702, gbc.sp());
        EXPECT(0xda64, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda62));
        EXPECT(0x25, gbc.readMem(0xda63));
        // CB 25 01CA
        gbc.setState(0x9c7f, 0x50ec, 0x7600, 0x47be, 0xc819, 0x9b6b, 0x1, 0x0);
        gbc.writeMem(0x9c7f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x50ec, gbc.sp());
        EXPECT(0x9c81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c7f));
        EXPECT(0x25, gbc.readMem(0x9c80));
        // CB 25 01CB
        gbc.setState(0xc6cf, 0x297c, 0xb780, 0x62e, 0x3b6c, 0xd994, 0x0, 0x0);
        gbc.writeMem(0xc6cf, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x297c, gbc.sp());
        EXPECT(0xc6d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6cf));
        EXPECT(0x25, gbc.readMem(0xc6d0));
        // CB 25 01CC
        gbc.setState(0x5d37, 0x2953, 0x6c40, 0x9c75, 0x2707, 0xb0d9, 0x1, 0x0);
        gbc.writeMem(0x5d37, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x2953, gbc.sp());
        EXPECT(0x5d39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01CD
        gbc.setState(0x68c5, 0xb51c, 0xab00, 0x6f5e, 0xabad, 0x6b0b, 0x1, 0x0);
        gbc.writeMem(0x68c5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xb51c, gbc.sp());
        EXPECT(0x68c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01CE
        gbc.setState(0xc8b2, 0xc18e, 0x66a0, 0x8927, 0x9878, 0xbb87, 0x0, 0x0);
        gbc.writeMem(0xc8b2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xc18e, gbc.sp());
        EXPECT(0xc8b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8b2));
        EXPECT(0x25, gbc.readMem(0xc8b3));
        // CB 25 01CF
        gbc.setState(0x3ee0, 0x5e14, 0xd9f0, 0x6cf, 0xbda4, 0x99f, 0x0, 0x0);
        gbc.writeMem(0x3ee0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x5e14, gbc.sp());
        EXPECT(0x3ee2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01D0
        gbc.setState(0xcecf, 0xee34, 0x6b00, 0xed91, 0x4db3, 0x19d9, 0x1, 0x0);
        gbc.writeMem(0xcecf, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xee34, gbc.sp());
        EXPECT(0xced1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcecf));
        EXPECT(0x25, gbc.readMem(0xced0));
        // CB 25 01D1
        gbc.setState(0x68f4, 0x9dd, 0x290, 0x9e5e, 0x2033, 0x133f, 0x0, 0x0);
        gbc.writeMem(0x68f4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x9dd, gbc.sp());
        EXPECT(0x68f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01D2
        gbc.setState(0x435e, 0x6772, 0x9db0, 0xb5e6, 0x470c, 0xb2d2, 0x1, 0x1);
        gbc.writeMem(0x435e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x6772, gbc.sp());
        EXPECT(0x4360, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01D3
        gbc.setState(0xbf5, 0xc1e3, 0xe9e0, 0x6dd3, 0x1d4e, 0x77d0, 0x1, 0x1);
        gbc.writeMem(0xbf5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xc1e3, gbc.sp());
        EXPECT(0xbf7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01D4
        gbc.setState(0xec72, 0xccf0, 0xef90, 0x623, 0x3c89, 0xb014, 0x0, 0x0);
        gbc.writeMem(0xec72, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xccf0, gbc.sp());
        EXPECT(0xec74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec72));
        EXPECT(0x25, gbc.readMem(0xec73));
        // CB 25 01D5
        gbc.setState(0x927d, 0xaa67, 0xe9b0, 0xf032, 0x452, 0xde48, 0x0, 0x0);
        gbc.writeMem(0x927d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xaa67, gbc.sp());
        EXPECT(0x927f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x927d));
        EXPECT(0x25, gbc.readMem(0x927e));
        // CB 25 01D6
        gbc.setState(0x18c6, 0x3999, 0x9830, 0x856e, 0xca97, 0x8c5d, 0x1, 0x0);
        gbc.writeMem(0x18c6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x3999, gbc.sp());
        EXPECT(0x18c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01D8
        gbc.setState(0x3d50, 0x3f3a, 0x7210, 0xff60, 0x7458, 0x5696, 0x0, 0x0);
        gbc.writeMem(0x3d50, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x3f3a, gbc.sp());
        EXPECT(0x3d52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01D9
        gbc.setState(0x6991, 0xd72b, 0x1530, 0x7afe, 0xf7a, 0x73da, 0x1, 0x1);
        gbc.writeMem(0x6991, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xd72b, gbc.sp());
        EXPECT(0x6993, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01DA
        gbc.setState(0x340c, 0x8b49, 0x68e0, 0x87c8, 0xd6aa, 0x530b, 0x0, 0x1);
        gbc.writeMem(0x340c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x8b49, gbc.sp());
        EXPECT(0x340e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01DB
        gbc.setState(0xd97c, 0x8e92, 0x3500, 0x4238, 0x468e, 0xe696, 0x0, 0x0);
        gbc.writeMem(0xd97c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x8e92, gbc.sp());
        EXPECT(0xd97e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd97c));
        EXPECT(0x25, gbc.readMem(0xd97d));
        // CB 25 01DC
        gbc.setState(0x2cd1, 0xed, 0xb120, 0x2e0e, 0x8ed5, 0x349a, 0x0, 0x1);
        gbc.writeMem(0x2cd1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xed, gbc.sp());
        EXPECT(0x2cd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01DD
        gbc.setState(0x19ae, 0xce07, 0x6590, 0x7a18, 0x51b7, 0xd7c0, 0x0, 0x1);
        gbc.writeMem(0x19ae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xce07, gbc.sp());
        EXPECT(0x19b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01DE
        gbc.setState(0x4a9, 0x4ab9, 0x30d0, 0xf549, 0xba49, 0x1e33, 0x0, 0x1);
        gbc.writeMem(0x4a9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x4ab9, gbc.sp());
        EXPECT(0x4ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01E0
        gbc.setState(0x875d, 0xff89, 0xb1b0, 0x1dd6, 0x1876, 0x11b5, 0x0, 0x0);
        gbc.writeMem(0x875d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xff89, gbc.sp());
        EXPECT(0x875f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x875d));
        EXPECT(0x25, gbc.readMem(0x875e));
        // CB 25 01E1
        gbc.setState(0x6916, 0xb4b, 0xc180, 0x8432, 0x8087, 0x27e1, 0x1, 0x0);
        gbc.writeMem(0x6916, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xb4b, gbc.sp());
        EXPECT(0x6918, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01E2
        gbc.setState(0x397e, 0x4375, 0xd120, 0x3e7d, 0xf86f, 0x81be, 0x1, 0x0);
        gbc.writeMem(0x397e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x4375, gbc.sp());
        EXPECT(0x3980, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01E3
        gbc.setState(0xfd6, 0xac5, 0x6a50, 0x99b2, 0x1c67, 0xe3ea, 0x0, 0x0);
        gbc.writeMem(0xfd6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xac5, gbc.sp());
        EXPECT(0xfd8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01E4
        gbc.setState(0xc3cc, 0x1309, 0x170, 0x19ab, 0xd87d, 0xbe64, 0x1, 0x0);
        gbc.writeMem(0xc3cc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x1309, gbc.sp());
        EXPECT(0xc3ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3cc));
        EXPECT(0x25, gbc.readMem(0xc3cd));
        // CB 25 01E6
        gbc.setState(0xcdc5, 0x61da, 0x3060, 0x6084, 0x5cf, 0x7e34, 0x1, 0x1);
        gbc.writeMem(0xcdc5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x61da, gbc.sp());
        EXPECT(0xcdc7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdc5));
        EXPECT(0x25, gbc.readMem(0xcdc6));
        // CB 25 01E7
        gbc.setState(0xc8f6, 0xbe19, 0xd180, 0xa07b, 0x241d, 0x8028, 0x1, 0x0);
        gbc.writeMem(0xc8f6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xbe19, gbc.sp());
        EXPECT(0xc8f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8f6));
        EXPECT(0x25, gbc.readMem(0xc8f7));
        // CB 25 01E8
        gbc.setState(0x199f, 0x2a7d, 0xd260, 0x4121, 0x378b, 0xbefc, 0x1, 0x0);
        gbc.writeMem(0x199f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x2a7d, gbc.sp());
        EXPECT(0x19a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01EA
        gbc.setState(0x560d, 0xb53c, 0x1e90, 0xbd2b, 0xbe3e, 0xbd64, 0x1, 0x0);
        gbc.writeMem(0x560d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xb53c, gbc.sp());
        EXPECT(0x560f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01EB
        gbc.setState(0x3e74, 0x2cc3, 0x2a30, 0xa757, 0x7ad7, 0x9504, 0x1, 0x0);
        gbc.writeMem(0x3e74, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x2cc3, gbc.sp());
        EXPECT(0x3e76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01EC
        gbc.setState(0xb13e, 0xfa92, 0xd020, 0xcb30, 0x3b1a, 0xefde, 0x0, 0x1);
        gbc.writeMem(0xb13e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xfa92, gbc.sp());
        EXPECT(0xb140, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb13e));
        EXPECT(0x25, gbc.readMem(0xb13f));
        // CB 25 01ED
        gbc.setState(0x5066, 0x98c2, 0x9710, 0x3cd7, 0xe98d, 0xadbb, 0x1, 0x0);
        gbc.writeMem(0x5066, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x98c2, gbc.sp());
        EXPECT(0x5068, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01EF
        gbc.setState(0xdbb4, 0x39a9, 0x1b10, 0x6b3d, 0x4483, 0xe7ef, 0x1, 0x0);
        gbc.writeMem(0xdbb4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x39a9, gbc.sp());
        EXPECT(0xdbb6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbb4));
        EXPECT(0x25, gbc.readMem(0xdbb5));
        // CB 25 01F1
        gbc.setState(0x2cbd, 0x106e, 0xb890, 0x9e1f, 0x3c71, 0x8552, 0x0, 0x0);
        gbc.writeMem(0x2cbd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x106e, gbc.sp());
        EXPECT(0x2cbf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01F2
        gbc.setState(0x1cad, 0x89e3, 0x3bc0, 0x1b52, 0x84f0, 0xf9d7, 0x1, 0x1);
        gbc.writeMem(0x1cad, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x89e3, gbc.sp());
        EXPECT(0x1caf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01F3
        gbc.setState(0x61fc, 0x1733, 0x9060, 0xb51c, 0xb2d3, 0x766c, 0x0, 0x0);
        gbc.writeMem(0x61fc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x1733, gbc.sp());
        EXPECT(0x61fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01F4
        gbc.setState(0x48f, 0x8d9, 0xd050, 0x9dbe, 0x5f47, 0x2316, 0x1, 0x0);
        gbc.writeMem(0x48f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x8d9, gbc.sp());
        EXPECT(0x491, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01F5
        gbc.setState(0x74d3, 0x5940, 0xf1c0, 0x7dc9, 0x40a7, 0xdc94, 0x1, 0x0);
        gbc.writeMem(0x74d3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x5940, gbc.sp());
        EXPECT(0x74d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01F8
        gbc.setState(0x38de, 0x6467, 0x7560, 0xa171, 0x4d79, 0x7cd5, 0x0, 0x0);
        gbc.writeMem(0x38de, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x6467, gbc.sp());
        EXPECT(0x38e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 01F9
        gbc.setState(0x8191, 0xe26d, 0xed10, 0x977a, 0x75f3, 0xc205, 0x0, 0x0);
        gbc.writeMem(0x8191, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xe26d, gbc.sp());
        EXPECT(0x8193, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8191));
        EXPECT(0x25, gbc.readMem(0x8192));
        // CB 25 01FA
        gbc.setState(0x214d, 0x849a, 0x96d0, 0x29ef, 0x4833, 0x46a, 0x1, 0x0);
        gbc.writeMem(0x214d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x849a, gbc.sp());
        EXPECT(0x214f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01FB
        gbc.setState(0xbf7b, 0xb336, 0x8cd0, 0x39a7, 0xbc21, 0x8fbc, 0x1, 0x0);
        gbc.writeMem(0xbf7b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xb336, gbc.sp());
        EXPECT(0xbf7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf7b));
        EXPECT(0x25, gbc.readMem(0xbf7c));
        // CB 25 01FD
        gbc.setState(0x37d, 0x8c52, 0x1c30, 0x67ae, 0x4b34, 0x104a, 0x1, 0x0);
        gbc.writeMem(0x37d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x8c52, gbc.sp());
        EXPECT(0x37f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 01FE
        gbc.setState(0xd885, 0x8d1a, 0x5e10, 0x5175, 0xc99d, 0xe986, 0x1, 0x0);
        gbc.writeMem(0xd885, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x8d1a, gbc.sp());
        EXPECT(0xd887, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd885));
        EXPECT(0x25, gbc.readMem(0xd886));
        // CB 25 01FF
        gbc.setState(0xc391, 0xc357, 0x3d50, 0x16e8, 0x1d49, 0xae3, 0x1, 0x0);
        gbc.writeMem(0xc391, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xc357, gbc.sp());
        EXPECT(0xc393, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc391));
        EXPECT(0x25, gbc.readMem(0xc392));
        // CB 25 0201
        gbc.setState(0xe8fb, 0x7cef, 0xdda0, 0x322f, 0x6831, 0x53a4, 0x0, 0x0);
        gbc.writeMem(0xe8fb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x7cef, gbc.sp());
        EXPECT(0xe8fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8fb));
        EXPECT(0x25, gbc.readMem(0xe8fc));
        // CB 25 0202
        gbc.setState(0x3b1, 0xc816, 0x4450, 0xa92e, 0x326d, 0x5c9b, 0x1, 0x0);
        gbc.writeMem(0x3b1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xc816, gbc.sp());
        EXPECT(0x3b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0203
        gbc.setState(0x838c, 0x78c6, 0xf320, 0x2bb4, 0x3d45, 0x305f, 0x0, 0x0);
        gbc.writeMem(0x838c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x78c6, gbc.sp());
        EXPECT(0x838e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x838c));
        EXPECT(0x25, gbc.readMem(0x838d));
        // CB 25 0204
        gbc.setState(0x3b5b, 0x98eb, 0x5eb0, 0xdb6b, 0xf38b, 0x9b5b, 0x0, 0x0);
        gbc.writeMem(0x3b5b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x98eb, gbc.sp());
        EXPECT(0x3b5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0205
        gbc.setState(0xfa7, 0xa32d, 0xb410, 0xa84d, 0xf78d, 0x7515, 0x1, 0x0);
        gbc.writeMem(0xfa7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xa32d, gbc.sp());
        EXPECT(0xfa9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0206
        gbc.setState(0x81fb, 0xc43, 0x57d0, 0x1af0, 0xfa9c, 0x60bf, 0x1, 0x0);
        gbc.writeMem(0x81fb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xc43, gbc.sp());
        EXPECT(0x81fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81fb));
        EXPECT(0x25, gbc.readMem(0x81fc));
        // CB 25 0207
        gbc.setState(0x28a1, 0xa13c, 0x9da0, 0x60b5, 0xff6e, 0x4ad8, 0x1, 0x1);
        gbc.writeMem(0x28a1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xa13c, gbc.sp());
        EXPECT(0x28a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0208
        gbc.setState(0x6174, 0x6469, 0x1ca0, 0x7367, 0x56be, 0x568f, 0x0, 0x0);
        gbc.writeMem(0x6174, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x6469, gbc.sp());
        EXPECT(0x6176, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0209
        gbc.setState(0xc478, 0x2251, 0x69d0, 0xae, 0x47d3, 0x6c5, 0x0, 0x0);
        gbc.writeMem(0xc478, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x2251, gbc.sp());
        EXPECT(0xc47a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc478));
        EXPECT(0x25, gbc.readMem(0xc479));
        // CB 25 020A
        gbc.setState(0xa953, 0x9e28, 0xa890, 0x9d4b, 0x8592, 0xd56, 0x0, 0x1);
        gbc.writeMem(0xa953, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x9e28, gbc.sp());
        EXPECT(0xa955, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa953));
        EXPECT(0x25, gbc.readMem(0xa954));
        // CB 25 020B
        gbc.setState(0x6c49, 0x73ca, 0xca30, 0x6bf8, 0xbd58, 0x82fc, 0x0, 0x0);
        gbc.writeMem(0x6c49, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x73ca, gbc.sp());
        EXPECT(0x6c4b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 020C
        gbc.setState(0x151d, 0x8232, 0xd7c0, 0x9e0e, 0x20da, 0x919b, 0x0, 0x1);
        gbc.writeMem(0x151d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x8232, gbc.sp());
        EXPECT(0x151f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 020D
        gbc.setState(0xdcf2, 0x5801, 0xd6a0, 0x8525, 0xc3f, 0x95aa, 0x1, 0x0);
        gbc.writeMem(0xdcf2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x5801, gbc.sp());
        EXPECT(0xdcf4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcf2));
        EXPECT(0x25, gbc.readMem(0xdcf3));
        // CB 25 020E
        gbc.setState(0xb237, 0x6d12, 0xcc60, 0x1147, 0x255a, 0x2ecc, 0x0, 0x1);
        gbc.writeMem(0xb237, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x6d12, gbc.sp());
        EXPECT(0xb239, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb237));
        EXPECT(0x25, gbc.readMem(0xb238));
        // CB 25 020F
        gbc.setState(0x69ea, 0x8b1d, 0x4c70, 0xa3b6, 0xebe7, 0x9cbf, 0x0, 0x0);
        gbc.writeMem(0x69ea, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x8b1d, gbc.sp());
        EXPECT(0x69ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0210
        gbc.setState(0xb243, 0xc11, 0xdc40, 0x3547, 0x299d, 0xca5d, 0x0, 0x0);
        gbc.writeMem(0xb243, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xc11, gbc.sp());
        EXPECT(0xb245, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb243));
        EXPECT(0x25, gbc.readMem(0xb244));
        // CB 25 0211
        gbc.setState(0x8d41, 0x5dd3, 0x47c0, 0x7325, 0x3513, 0xc6d4, 0x0, 0x0);
        gbc.writeMem(0x8d41, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x5dd3, gbc.sp());
        EXPECT(0x8d43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d41));
        EXPECT(0x25, gbc.readMem(0x8d42));
        // CB 25 0212
        gbc.setState(0xc608, 0xdd6e, 0x3640, 0x4ed8, 0x3352, 0x73b4, 0x1, 0x1);
        gbc.writeMem(0xc608, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xdd6e, gbc.sp());
        EXPECT(0xc60a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc608));
        EXPECT(0x25, gbc.readMem(0xc609));
        // CB 25 0213
        gbc.setState(0xa055, 0x4656, 0x6900, 0xd5fb, 0xd44f, 0x3872, 0x1, 0x0);
        gbc.writeMem(0xa055, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x4656, gbc.sp());
        EXPECT(0xa057, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa055));
        EXPECT(0x25, gbc.readMem(0xa056));
        // CB 25 0214
        gbc.setState(0xadaa, 0x3845, 0xa00, 0x73c3, 0x9938, 0xf02, 0x1, 0x1);
        gbc.writeMem(0xadaa, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x3845, gbc.sp());
        EXPECT(0xadac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadaa));
        EXPECT(0x25, gbc.readMem(0xadab));
        // CB 25 0215
        gbc.setState(0x8c3c, 0xbdd5, 0x8de0, 0x2e26, 0xf86, 0x77b6, 0x1, 0x0);
        gbc.writeMem(0x8c3c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xbdd5, gbc.sp());
        EXPECT(0x8c3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c3c));
        EXPECT(0x25, gbc.readMem(0x8c3d));
        // CB 25 0216
        gbc.setState(0xc3b5, 0xebdd, 0xae50, 0x2b9, 0x1bae, 0xb310, 0x1, 0x0);
        gbc.writeMem(0xc3b5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xebdd, gbc.sp());
        EXPECT(0xc3b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3b5));
        EXPECT(0x25, gbc.readMem(0xc3b6));
        // CB 25 0217
        gbc.setState(0x94a9, 0x4d60, 0x6780, 0x7ee6, 0x6caa, 0xf261, 0x1, 0x1);
        gbc.writeMem(0x94a9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x4d60, gbc.sp());
        EXPECT(0x94ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94a9));
        EXPECT(0x25, gbc.readMem(0x94aa));
        // CB 25 021A
        gbc.setState(0xaf7c, 0x88d6, 0x8170, 0x6d9d, 0xae88, 0x10b7, 0x1, 0x0);
        gbc.writeMem(0xaf7c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x88d6, gbc.sp());
        EXPECT(0xaf7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf7c));
        EXPECT(0x25, gbc.readMem(0xaf7d));
        // CB 25 021B
        gbc.setState(0xc988, 0x8d49, 0x2ad0, 0xdccc, 0xc2d0, 0x36d9, 0x1, 0x0);
        gbc.writeMem(0xc988, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x8d49, gbc.sp());
        EXPECT(0xc98a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc988));
        EXPECT(0x25, gbc.readMem(0xc989));
        // CB 25 021C
        gbc.setState(0x50d9, 0x9e6e, 0x3c60, 0x26e4, 0x27f6, 0x5b43, 0x0, 0x0);
        gbc.writeMem(0x50d9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x9e6e, gbc.sp());
        EXPECT(0x50db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 021D
        gbc.setState(0x61a2, 0xe5c8, 0x810, 0xa8f5, 0x527, 0x99a2, 0x0, 0x0);
        gbc.writeMem(0x61a2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xe5c8, gbc.sp());
        EXPECT(0x61a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 021E
        gbc.setState(0xa1f2, 0x69f4, 0x5c80, 0x39be, 0xc3ae, 0xd404, 0x1, 0x1);
        gbc.writeMem(0xa1f2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x69f4, gbc.sp());
        EXPECT(0xa1f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1f2));
        EXPECT(0x25, gbc.readMem(0xa1f3));
        // CB 25 021F
        gbc.setState(0x2812, 0x3a76, 0xe240, 0x15c4, 0x9444, 0x7a30, 0x0, 0x0);
        gbc.writeMem(0x2812, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x3a76, gbc.sp());
        EXPECT(0x2814, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0220
        gbc.setState(0xd88b, 0xcab1, 0x1d10, 0x8530, 0xd83e, 0x7cde, 0x1, 0x0);
        gbc.writeMem(0xd88b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xcab1, gbc.sp());
        EXPECT(0xd88d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd88b));
        EXPECT(0x25, gbc.readMem(0xd88c));
        // CB 25 0221
        gbc.setState(0x4458, 0x69e7, 0xe190, 0x61f4, 0x1810, 0xf137, 0x1, 0x0);
        gbc.writeMem(0x4458, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x69e7, gbc.sp());
        EXPECT(0x445a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0223
        gbc.setState(0xecb, 0x84ad, 0x73c0, 0x791, 0x9298, 0x888e, 0x0, 0x0);
        gbc.writeMem(0xecb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x84ad, gbc.sp());
        EXPECT(0xecd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0224
        gbc.setState(0x70dd, 0x2444, 0xdaf0, 0x581b, 0xbf73, 0x7384, 0x1, 0x0);
        gbc.writeMem(0x70dd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x2444, gbc.sp());
        EXPECT(0x70df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0225
        gbc.setState(0x1a7f, 0x9e5, 0x72a0, 0xc9aa, 0x52ca, 0xf183, 0x1, 0x0);
        gbc.writeMem(0x1a7f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x9e5, gbc.sp());
        EXPECT(0x1a81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0226
        gbc.setState(0x8f1f, 0x42d8, 0x6c40, 0xbc9f, 0x210d, 0xedd2, 0x1, 0x1);
        gbc.writeMem(0x8f1f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x42d8, gbc.sp());
        EXPECT(0x8f21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f1f));
        EXPECT(0x25, gbc.readMem(0x8f20));
        // CB 25 0227
        gbc.setState(0xbf01, 0x5d92, 0x4410, 0x3ad4, 0xbe27, 0xbf1c, 0x0, 0x0);
        gbc.writeMem(0xbf01, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x5d92, gbc.sp());
        EXPECT(0xbf03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf01));
        EXPECT(0x25, gbc.readMem(0xbf02));
        // CB 25 0229
        gbc.setState(0xc5df, 0x9135, 0x4900, 0xdea4, 0xfd83, 0xfa01, 0x0, 0x0);
        gbc.writeMem(0xc5df, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x9135, gbc.sp());
        EXPECT(0xc5e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5df));
        EXPECT(0x25, gbc.readMem(0xc5e0));
        // CB 25 022A
        gbc.setState(0x7d37, 0x5b1f, 0x14b0, 0xcbca, 0xc1b0, 0xd947, 0x1, 0x0);
        gbc.writeMem(0x7d37, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x5b1f, gbc.sp());
        EXPECT(0x7d39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 022B
        gbc.setState(0x9656, 0x86b4, 0xca90, 0xced3, 0x5407, 0x824f, 0x1, 0x0);
        gbc.writeMem(0x9656, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x86b4, gbc.sp());
        EXPECT(0x9658, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9656));
        EXPECT(0x25, gbc.readMem(0x9657));
        // CB 25 022C
        gbc.setState(0x9e67, 0x6855, 0x31c0, 0x112, 0x61b0, 0xbd8e, 0x1, 0x1);
        gbc.writeMem(0x9e67, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x6855, gbc.sp());
        EXPECT(0x9e69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e67));
        EXPECT(0x25, gbc.readMem(0x9e68));
        // CB 25 022D
        gbc.setState(0x29be, 0x6eec, 0xbda0, 0x5e52, 0x3be3, 0x2947, 0x1, 0x1);
        gbc.writeMem(0x29be, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x6eec, gbc.sp());
        EXPECT(0x29c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 022E
        gbc.setState(0x674e, 0x6385, 0x9180, 0xe53, 0x676c, 0x5f88, 0x1, 0x1);
        gbc.writeMem(0x674e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x6385, gbc.sp());
        EXPECT(0x6750, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 022F
        gbc.setState(0xe5dd, 0x606e, 0xb6e0, 0x4ca7, 0x67e9, 0xda83, 0x0, 0x0);
        gbc.writeMem(0xe5dd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x606e, gbc.sp());
        EXPECT(0xe5df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5dd));
        EXPECT(0x25, gbc.readMem(0xe5de));
        // CB 25 0230
        gbc.setState(0x5d97, 0xe1c4, 0x4150, 0x8c55, 0x79eb, 0x5ce6, 0x1, 0x0);
        gbc.writeMem(0x5d97, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xe1c4, gbc.sp());
        EXPECT(0x5d99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0231
        gbc.setState(0x1339, 0x93c1, 0x7850, 0x8bc5, 0xee1c, 0xe73d, 0x0, 0x1);
        gbc.writeMem(0x1339, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x93c1, gbc.sp());
        EXPECT(0x133b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0232
        gbc.setState(0x3f0d, 0x9ae6, 0xdc00, 0xcfd0, 0xd091, 0xa33a, 0x1, 0x0);
        gbc.writeMem(0x3f0d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x9ae6, gbc.sp());
        EXPECT(0x3f0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0233
        gbc.setState(0xb7e2, 0x86f8, 0xe450, 0xbcfd, 0x47cd, 0x7ae1, 0x1, 0x1);
        gbc.writeMem(0xb7e2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x86f8, gbc.sp());
        EXPECT(0xb7e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7e2));
        EXPECT(0x25, gbc.readMem(0xb7e3));
        // CB 25 0234
        gbc.setState(0x49bd, 0x3d65, 0x75d0, 0x56f7, 0x6d45, 0x4dac, 0x0, 0x0);
        gbc.writeMem(0x49bd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x3d65, gbc.sp());
        EXPECT(0x49bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0235
        gbc.setState(0xeb59, 0x2ae9, 0x4630, 0x9e7a, 0x3346, 0x3df2, 0x1, 0x0);
        gbc.writeMem(0xeb59, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x2ae9, gbc.sp());
        EXPECT(0xeb5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb59));
        EXPECT(0x25, gbc.readMem(0xeb5a));
        // CB 25 0236
        gbc.setState(0x58b, 0xc0d3, 0x4a30, 0xd863, 0xbd5c, 0x79af, 0x1, 0x1);
        gbc.writeMem(0x58b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xc0d3, gbc.sp());
        EXPECT(0x58d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0237
        gbc.setState(0xa8c4, 0xda88, 0x3a90, 0x8a89, 0x4458, 0xc434, 0x0, 0x0);
        gbc.writeMem(0xa8c4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xda88, gbc.sp());
        EXPECT(0xa8c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8c4));
        EXPECT(0x25, gbc.readMem(0xa8c5));
        // CB 25 0238
        gbc.setState(0x7b71, 0xdc6d, 0x84b0, 0xdfbb, 0xbce7, 0x1f29, 0x0, 0x1);
        gbc.writeMem(0x7b71, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xdc6d, gbc.sp());
        EXPECT(0x7b73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0239
        gbc.setState(0x30f5, 0xbf3a, 0xea00, 0x1237, 0x4eb, 0xb130, 0x1, 0x1);
        gbc.writeMem(0x30f5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xbf3a, gbc.sp());
        EXPECT(0x30f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 023A
        gbc.setState(0xab54, 0x1a17, 0xa400, 0x4c0d, 0x536a, 0x6664, 0x1, 0x0);
        gbc.writeMem(0xab54, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x1a17, gbc.sp());
        EXPECT(0xab56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab54));
        EXPECT(0x25, gbc.readMem(0xab55));
        // CB 25 023B
        gbc.setState(0x4e6e, 0xe1a6, 0x8920, 0xc2ff, 0x42d2, 0xba1e, 0x0, 0x1);
        gbc.writeMem(0x4e6e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xe1a6, gbc.sp());
        EXPECT(0x4e70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 023C
        gbc.setState(0x1082, 0x4b86, 0xcf70, 0xd1f, 0xfab6, 0x1359, 0x0, 0x1);
        gbc.writeMem(0x1082, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x4b86, gbc.sp());
        EXPECT(0x1084, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 023D
        gbc.setState(0x5901, 0x5053, 0x1bc0, 0x203b, 0xb7c9, 0x59f7, 0x0, 0x1);
        gbc.writeMem(0x5901, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x5053, gbc.sp());
        EXPECT(0x5903, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 023E
        gbc.setState(0x740, 0x9809, 0xc9b0, 0x8b9a, 0xd036, 0xf181, 0x0, 0x1);
        gbc.writeMem(0x740, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x9809, gbc.sp());
        EXPECT(0x742, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 023F
        gbc.setState(0x3e2f, 0xbde2, 0x5330, 0x2bd8, 0x4f41, 0xc574, 0x1, 0x0);
        gbc.writeMem(0x3e2f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xbde2, gbc.sp());
        EXPECT(0x3e31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0240
        gbc.setState(0x4a2b, 0x66a0, 0x3690, 0x1be1, 0x9912, 0xcd96, 0x1, 0x0);
        gbc.writeMem(0x4a2b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x66a0, gbc.sp());
        EXPECT(0x4a2d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0241
        gbc.setState(0xe540, 0xa06e, 0xd4d0, 0xa273, 0x8130, 0x2ac9, 0x1, 0x0);
        gbc.writeMem(0xe540, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xa06e, gbc.sp());
        EXPECT(0xe542, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe540));
        EXPECT(0x25, gbc.readMem(0xe541));
        // CB 25 0242
        gbc.setState(0x7aae, 0x234, 0x7910, 0x4884, 0x8bcb, 0x876a, 0x1, 0x0);
        gbc.writeMem(0x7aae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x234, gbc.sp());
        EXPECT(0x7ab0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0243
        gbc.setState(0xfab, 0x1611, 0xdd20, 0xf0fb, 0x8799, 0x73bf, 0x0, 0x0);
        gbc.writeMem(0xfab, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x1611, gbc.sp());
        EXPECT(0xfad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0244
        gbc.setState(0x31e8, 0xb9f6, 0x55e0, 0x945c, 0x2538, 0x4344, 0x0, 0x1);
        gbc.writeMem(0x31e8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xb9f6, gbc.sp());
        EXPECT(0x31ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0245
        gbc.setState(0xd296, 0xeece, 0x6dc0, 0x82f7, 0xa709, 0x9e00, 0x1, 0x1);
        gbc.writeMem(0xd296, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xeece, gbc.sp());
        EXPECT(0xd298, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd296));
        EXPECT(0x25, gbc.readMem(0xd297));
        // CB 25 0246
        gbc.setState(0x8cbd, 0x950, 0x2b90, 0x55f1, 0x5248, 0x9a26, 0x0, 0x1);
        gbc.writeMem(0x8cbd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x950, gbc.sp());
        EXPECT(0x8cbf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cbd));
        EXPECT(0x25, gbc.readMem(0x8cbe));
        // CB 25 0247
        gbc.setState(0xecd7, 0x64ad, 0xbd70, 0x35af, 0xdc50, 0xa0d0, 0x1, 0x1);
        gbc.writeMem(0xecd7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x64ad, gbc.sp());
        EXPECT(0xecd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecd7));
        EXPECT(0x25, gbc.readMem(0xecd8));
        // CB 25 0249
        gbc.setState(0x2e36, 0xd0df, 0x2c80, 0x764b, 0xd43f, 0x814e, 0x0, 0x0);
        gbc.writeMem(0x2e36, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xd0df, gbc.sp());
        EXPECT(0x2e38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 024A
        gbc.setState(0xcfca, 0xc511, 0x9020, 0xc6b1, 0x43a3, 0xabd9, 0x0, 0x1);
        gbc.writeMem(0xcfca, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xc511, gbc.sp());
        EXPECT(0xcfcc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfca));
        EXPECT(0x25, gbc.readMem(0xcfcb));
        // CB 25 024B
        gbc.setState(0xbdea, 0x11ff, 0x2ab0, 0x9c2a, 0x3388, 0xf3a7, 0x0, 0x1);
        gbc.writeMem(0xbdea, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x11ff, gbc.sp());
        EXPECT(0xbdec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdea));
        EXPECT(0x25, gbc.readMem(0xbdeb));
        // CB 25 024C
        gbc.setState(0xbdd1, 0x8de3, 0xf930, 0x3ad4, 0x1406, 0xf313, 0x0, 0x0);
        gbc.writeMem(0xbdd1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x8de3, gbc.sp());
        EXPECT(0xbdd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdd1));
        EXPECT(0x25, gbc.readMem(0xbdd2));
        // CB 25 024D
        gbc.setState(0x2dee, 0x6bd, 0x37f0, 0xa19, 0xd249, 0xeb91, 0x1, 0x0);
        gbc.writeMem(0x2dee, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x6bd, gbc.sp());
        EXPECT(0x2df0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 024E
        gbc.setState(0xa6a8, 0x75ce, 0x84c0, 0x8b70, 0x9934, 0xfe8c, 0x0, 0x1);
        gbc.writeMem(0xa6a8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x75ce, gbc.sp());
        EXPECT(0xa6aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6a8));
        EXPECT(0x25, gbc.readMem(0xa6a9));
        // CB 25 024F
        gbc.setState(0x30ec, 0x3f11, 0x20f0, 0x3844, 0x8afa, 0x984b, 0x0, 0x0);
        gbc.writeMem(0x30ec, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x3f11, gbc.sp());
        EXPECT(0x30ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0250
        gbc.setState(0x4c6a, 0xdadb, 0x2740, 0x3555, 0x9fed, 0xf463, 0x0, 0x1);
        gbc.writeMem(0x4c6a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xdadb, gbc.sp());
        EXPECT(0x4c6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0251
        gbc.setState(0xb83a, 0x95cb, 0x5960, 0x4662, 0xc7b3, 0xf148, 0x1, 0x1);
        gbc.writeMem(0xb83a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x95cb, gbc.sp());
        EXPECT(0xb83c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb83a));
        EXPECT(0x25, gbc.readMem(0xb83b));
        // CB 25 0252
        gbc.setState(0x6dca, 0x7a38, 0xb710, 0x94a4, 0x61bf, 0xbd31, 0x1, 0x0);
        gbc.writeMem(0x6dca, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x7a38, gbc.sp());
        EXPECT(0x6dcc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0253
        gbc.setState(0x7931, 0x3cfb, 0x3c60, 0xf6de, 0x2dd8, 0xc19d, 0x0, 0x0);
        gbc.writeMem(0x7931, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x3cfb, gbc.sp());
        EXPECT(0x7933, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0254
        gbc.setState(0xaa6a, 0x6815, 0xc8f0, 0x9711, 0xce78, 0x483e, 0x0, 0x1);
        gbc.writeMem(0xaa6a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x6815, gbc.sp());
        EXPECT(0xaa6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa6a));
        EXPECT(0x25, gbc.readMem(0xaa6b));
        // CB 25 0255
        gbc.setState(0x5efb, 0x4625, 0x3710, 0xc7f4, 0xffa5, 0xe9d3, 0x0, 0x1);
        gbc.writeMem(0x5efb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x4625, gbc.sp());
        EXPECT(0x5efd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0256
        gbc.setState(0x3b2c, 0x9a34, 0x1da0, 0x60a4, 0xb957, 0x719, 0x0, 0x1);
        gbc.writeMem(0x3b2c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x9a34, gbc.sp());
        EXPECT(0x3b2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0257
        gbc.setState(0x2ab5, 0x6cb5, 0x6c50, 0x5a2e, 0xf7d, 0x8896, 0x1, 0x0);
        gbc.writeMem(0x2ab5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x6cb5, gbc.sp());
        EXPECT(0x2ab7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0258
        gbc.setState(0x21cd, 0x8442, 0x1c10, 0xd53a, 0xe47, 0xbeba, 0x0, 0x0);
        gbc.writeMem(0x21cd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x8442, gbc.sp());
        EXPECT(0x21cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0259
        gbc.setState(0x1591, 0xde5e, 0x4100, 0x589b, 0xa96f, 0x430e, 0x0, 0x0);
        gbc.writeMem(0x1591, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xde5e, gbc.sp());
        EXPECT(0x1593, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 025A
        gbc.setState(0x65ec, 0x36d1, 0x78b0, 0xa064, 0x8237, 0x5c9d, 0x0, 0x0);
        gbc.writeMem(0x65ec, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x36d1, gbc.sp());
        EXPECT(0x65ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 025B
        gbc.setState(0x68c2, 0x7d09, 0x7c90, 0xe494, 0x5403, 0x2e3c, 0x0, 0x0);
        gbc.writeMem(0x68c2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x7d09, gbc.sp());
        EXPECT(0x68c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 025C
        gbc.setState(0xb5bb, 0x8cbd, 0x2a30, 0x4941, 0x4df1, 0xd265, 0x0, 0x0);
        gbc.writeMem(0xb5bb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x8cbd, gbc.sp());
        EXPECT(0xb5bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5bb));
        EXPECT(0x25, gbc.readMem(0xb5bc));
        // CB 25 025D
        gbc.setState(0x4709, 0x208b, 0x8540, 0xa64d, 0xce47, 0x6457, 0x0, 0x1);
        gbc.writeMem(0x4709, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x208b, gbc.sp());
        EXPECT(0x470b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 025E
        gbc.setState(0x96d4, 0xa6cc, 0x8600, 0x5725, 0xd3fa, 0xbf16, 0x1, 0x0);
        gbc.writeMem(0x96d4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xa6cc, gbc.sp());
        EXPECT(0x96d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96d4));
        EXPECT(0x25, gbc.readMem(0x96d5));
        // CB 25 025F
        gbc.setState(0xbe75, 0x2e4c, 0x6bc0, 0x886f, 0xe631, 0x8459, 0x0, 0x0);
        gbc.writeMem(0xbe75, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x2e4c, gbc.sp());
        EXPECT(0xbe77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe75));
        EXPECT(0x25, gbc.readMem(0xbe76));
        // CB 25 0260
        gbc.setState(0x2eba, 0xd7b3, 0x8be0, 0xbc95, 0x380, 0xebbd, 0x0, 0x0);
        gbc.writeMem(0x2eba, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xd7b3, gbc.sp());
        EXPECT(0x2ebc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0261
        gbc.setState(0xef0d, 0x1c1c, 0xf10, 0xcd89, 0x4d7d, 0x13cd, 0x1, 0x1);
        gbc.writeMem(0xef0d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x1c1c, gbc.sp());
        EXPECT(0xef0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef0d));
        EXPECT(0x25, gbc.readMem(0xef0e));
        // CB 25 0262
        gbc.setState(0xb0e6, 0xb5e9, 0x19b0, 0x96be, 0xf57d, 0xcf6c, 0x0, 0x1);
        gbc.writeMem(0xb0e6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xb5e9, gbc.sp());
        EXPECT(0xb0e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0e6));
        EXPECT(0x25, gbc.readMem(0xb0e7));
        // CB 25 0263
        gbc.setState(0xacae, 0x6004, 0x2e10, 0xc5d7, 0x5a41, 0xe289, 0x0, 0x0);
        gbc.writeMem(0xacae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x6004, gbc.sp());
        EXPECT(0xacb0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacae));
        EXPECT(0x25, gbc.readMem(0xacaf));
        // CB 25 0264
        gbc.setState(0xb4d7, 0xd8e6, 0x6390, 0xbcb8, 0x6a6b, 0xd9ab, 0x0, 0x0);
        gbc.writeMem(0xb4d7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xd8e6, gbc.sp());
        EXPECT(0xb4d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4d7));
        EXPECT(0x25, gbc.readMem(0xb4d8));
        // CB 25 0265
        gbc.setState(0xc9ae, 0xbc2d, 0x61d0, 0x4522, 0x50c5, 0x8664, 0x1, 0x0);
        gbc.writeMem(0xc9ae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xbc2d, gbc.sp());
        EXPECT(0xc9b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9ae));
        EXPECT(0x25, gbc.readMem(0xc9af));
        // CB 25 0266
        gbc.setState(0x769c, 0x912a, 0x8120, 0x3908, 0x6c5b, 0xb531, 0x0, 0x0);
        gbc.writeMem(0x769c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x912a, gbc.sp());
        EXPECT(0x769e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0267
        gbc.setState(0x6a51, 0x968a, 0xfc10, 0x9b68, 0x62b2, 0xff37, 0x0, 0x0);
        gbc.writeMem(0x6a51, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x968a, gbc.sp());
        EXPECT(0x6a53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0268
        gbc.setState(0x86b1, 0xb6cb, 0x1c60, 0xe127, 0x3304, 0x3886, 0x0, 0x0);
        gbc.writeMem(0x86b1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xb6cb, gbc.sp());
        EXPECT(0x86b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86b1));
        EXPECT(0x25, gbc.readMem(0x86b2));
        // CB 25 0269
        gbc.setState(0xe2a3, 0x39ea, 0xc170, 0x2f44, 0x94b4, 0xb6e7, 0x0, 0x0);
        gbc.writeMem(0xe2a3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x39ea, gbc.sp());
        EXPECT(0xe2a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2a3));
        EXPECT(0x25, gbc.readMem(0xe2a4));
        // CB 25 026A
        gbc.setState(0xd3fb, 0xb275, 0x64f0, 0xb998, 0xa043, 0xbf9a, 0x1, 0x1);
        gbc.writeMem(0xd3fb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xb275, gbc.sp());
        EXPECT(0xd3fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3fb));
        EXPECT(0x25, gbc.readMem(0xd3fc));
        // CB 25 026B
        gbc.setState(0xabd8, 0x913b, 0xe370, 0x942e, 0x258e, 0xdfd4, 0x0, 0x0);
        gbc.writeMem(0xabd8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x913b, gbc.sp());
        EXPECT(0xabda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabd8));
        EXPECT(0x25, gbc.readMem(0xabd9));
        // CB 25 026C
        gbc.setState(0xb76f, 0xe43b, 0xd750, 0x658c, 0xf6b2, 0x70ba, 0x0, 0x0);
        gbc.writeMem(0xb76f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xe43b, gbc.sp());
        EXPECT(0xb771, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb76f));
        EXPECT(0x25, gbc.readMem(0xb770));
        // CB 25 026D
        gbc.setState(0xa844, 0x5691, 0x1e60, 0x5b10, 0x7eb4, 0xae41, 0x0, 0x0);
        gbc.writeMem(0xa844, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x5691, gbc.sp());
        EXPECT(0xa846, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa844));
        EXPECT(0x25, gbc.readMem(0xa845));
        // CB 25 026E
        gbc.setState(0xe865, 0xabc2, 0x3010, 0xa431, 0xd881, 0x6609, 0x1, 0x0);
        gbc.writeMem(0xe865, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xabc2, gbc.sp());
        EXPECT(0xe867, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe865));
        EXPECT(0x25, gbc.readMem(0xe866));
        // CB 25 026F
        gbc.setState(0x5fe8, 0x697c, 0xa670, 0xe213, 0x3fd8, 0x7107, 0x0, 0x0);
        gbc.writeMem(0x5fe8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x697c, gbc.sp());
        EXPECT(0x5fea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0270
        gbc.setState(0x2fd5, 0x8154, 0x4920, 0xad26, 0x5a55, 0x29b1, 0x0, 0x0);
        gbc.writeMem(0x2fd5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x8154, gbc.sp());
        EXPECT(0x2fd7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0271
        gbc.setState(0x81a4, 0x7d40, 0x1f00, 0xf5fe, 0xe593, 0x4d71, 0x0, 0x0);
        gbc.writeMem(0x81a4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x7d40, gbc.sp());
        EXPECT(0x81a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81a4));
        EXPECT(0x25, gbc.readMem(0x81a5));
        // CB 25 0272
        gbc.setState(0x6262, 0xc9fd, 0x47c0, 0xf08a, 0xd65c, 0x9df1, 0x0, 0x1);
        gbc.writeMem(0x6262, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xc9fd, gbc.sp());
        EXPECT(0x6264, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0273
        gbc.setState(0x9bcf, 0xa297, 0x1bb0, 0xea37, 0x3758, 0x494b, 0x0, 0x1);
        gbc.writeMem(0x9bcf, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xa297, gbc.sp());
        EXPECT(0x9bd1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bcf));
        EXPECT(0x25, gbc.readMem(0x9bd0));
        // CB 25 0274
        gbc.setState(0x4999, 0x6c0b, 0x7640, 0xc84d, 0xe7e2, 0x22ee, 0x0, 0x1);
        gbc.writeMem(0x4999, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x6c0b, gbc.sp());
        EXPECT(0x499b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0275
        gbc.setState(0x31fd, 0x62d9, 0x3580, 0x9223, 0x17ae, 0x44dc, 0x1, 0x1);
        gbc.writeMem(0x31fd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x62d9, gbc.sp());
        EXPECT(0x31ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0276
        gbc.setState(0xed96, 0x59a9, 0xa920, 0x51f3, 0x3d10, 0x8825, 0x1, 0x0);
        gbc.writeMem(0xed96, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x59a9, gbc.sp());
        EXPECT(0xed98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed96));
        EXPECT(0x25, gbc.readMem(0xed97));
        // CB 25 0277
        gbc.setState(0x8210, 0x4e6, 0xaed0, 0x4fb1, 0xaca, 0x5db, 0x1, 0x1);
        gbc.writeMem(0x8210, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x4e6, gbc.sp());
        EXPECT(0x8212, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8210));
        EXPECT(0x25, gbc.readMem(0x8211));
        // CB 25 0278
        gbc.setState(0xe408, 0xba0e, 0x50c0, 0x138f, 0x8f78, 0x545e, 0x0, 0x1);
        gbc.writeMem(0xe408, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xba0e, gbc.sp());
        EXPECT(0xe40a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe408));
        EXPECT(0x25, gbc.readMem(0xe409));
        // CB 25 0279
        gbc.setState(0xe01c, 0x1d1, 0x1bc0, 0xb816, 0x4d6f, 0xbe41, 0x0, 0x1);
        gbc.writeMem(0xe01c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x1d1, gbc.sp());
        EXPECT(0xe01e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe01c));
        EXPECT(0x25, gbc.readMem(0xe01d));
        // CB 25 027A
        gbc.setState(0xb7bd, 0xbb7a, 0x84a0, 0xd705, 0x514, 0x9e37, 0x1, 0x0);
        gbc.writeMem(0xb7bd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xbb7a, gbc.sp());
        EXPECT(0xb7bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7bd));
        EXPECT(0x25, gbc.readMem(0xb7be));
        // CB 25 027B
        gbc.setState(0xef4b, 0x970c, 0x2e40, 0x1c5c, 0x4cc5, 0x8d33, 0x1, 0x0);
        gbc.writeMem(0xef4b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x970c, gbc.sp());
        EXPECT(0xef4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef4b));
        EXPECT(0x25, gbc.readMem(0xef4c));
        // CB 25 027C
        gbc.setState(0x72a, 0x7a0c, 0x8e00, 0x9e9c, 0xcdee, 0xcc63, 0x1, 0x0);
        gbc.writeMem(0x72a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x7a0c, gbc.sp());
        EXPECT(0x72c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 027D
        gbc.setState(0x93db, 0xc267, 0xa660, 0x8b4e, 0x1921, 0x3c92, 0x1, 0x1);
        gbc.writeMem(0x93db, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xc267, gbc.sp());
        EXPECT(0x93dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93db));
        EXPECT(0x25, gbc.readMem(0x93dc));
        // CB 25 027E
        gbc.setState(0xafc4, 0x9520, 0x7090, 0x1b40, 0x7ce2, 0xe6d4, 0x0, 0x1);
        gbc.writeMem(0xafc4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x9520, gbc.sp());
        EXPECT(0xafc6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafc4));
        EXPECT(0x25, gbc.readMem(0xafc5));
        // CB 25 027F
        gbc.setState(0xd0df, 0xac8, 0xaa10, 0xce56, 0x13fe, 0x60be, 0x0, 0x0);
        gbc.writeMem(0xd0df, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xac8, gbc.sp());
        EXPECT(0xd0e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0df));
        EXPECT(0x25, gbc.readMem(0xd0e0));
        // CB 25 0280
        gbc.setState(0x6a6e, 0xae10, 0xc760, 0x5ef2, 0x514c, 0x6582, 0x1, 0x1);
        gbc.writeMem(0x6a6e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xae10, gbc.sp());
        EXPECT(0x6a70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0281
        gbc.setState(0x9467, 0xcd04, 0x5590, 0xd51c, 0x22ae, 0x5776, 0x0, 0x0);
        gbc.writeMem(0x9467, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xcd04, gbc.sp());
        EXPECT(0x9469, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9467));
        EXPECT(0x25, gbc.readMem(0x9468));
        // CB 25 0282
        gbc.setState(0x9d48, 0x17e6, 0x4220, 0x3b43, 0xa931, 0xf417, 0x1, 0x1);
        gbc.writeMem(0x9d48, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x17e6, gbc.sp());
        EXPECT(0x9d4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d48));
        EXPECT(0x25, gbc.readMem(0x9d49));
        // CB 25 0283
        gbc.setState(0x568c, 0xb8f5, 0xdbf0, 0xe7ff, 0x9a51, 0xb0e9, 0x1, 0x1);
        gbc.writeMem(0x568c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xb8f5, gbc.sp());
        EXPECT(0x568e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0284
        gbc.setState(0xab4, 0xd9dc, 0x51b0, 0xf2e7, 0x8d05, 0xe4c6, 0x0, 0x0);
        gbc.writeMem(0xab4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xd9dc, gbc.sp());
        EXPECT(0xab6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0285
        gbc.setState(0x9d90, 0x7462, 0x3310, 0xedfe, 0xae00, 0xc88, 0x0, 0x0);
        gbc.writeMem(0x9d90, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x7462, gbc.sp());
        EXPECT(0x9d92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d90));
        EXPECT(0x25, gbc.readMem(0x9d91));
        // CB 25 0286
        gbc.setState(0x8451, 0xd55, 0x6320, 0xb24a, 0xc81a, 0x49af, 0x0, 0x0);
        gbc.writeMem(0x8451, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xd55, gbc.sp());
        EXPECT(0x8453, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8451));
        EXPECT(0x25, gbc.readMem(0x8452));
        // CB 25 0287
        gbc.setState(0x6d4f, 0xa7ec, 0xee80, 0x59c7, 0x9fc1, 0xa681, 0x1, 0x0);
        gbc.writeMem(0x6d4f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xa7ec, gbc.sp());
        EXPECT(0x6d51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0288
        gbc.setState(0xba4f, 0xec4a, 0x3a00, 0x94c1, 0x4b5c, 0x172d, 0x1, 0x0);
        gbc.writeMem(0xba4f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xec4a, gbc.sp());
        EXPECT(0xba51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba4f));
        EXPECT(0x25, gbc.readMem(0xba50));
        // CB 25 0289
        gbc.setState(0xb8d3, 0xd28e, 0xc680, 0xa11a, 0x4c72, 0x6923, 0x0, 0x1);
        gbc.writeMem(0xb8d3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xd28e, gbc.sp());
        EXPECT(0xb8d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8d3));
        EXPECT(0x25, gbc.readMem(0xb8d4));
        // CB 25 028A
        gbc.setState(0x7b39, 0x89fa, 0x6d90, 0x9dea, 0xf84e, 0x3ae1, 0x1, 0x0);
        gbc.writeMem(0x7b39, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x89fa, gbc.sp());
        EXPECT(0x7b3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 028B
        gbc.setState(0x3c94, 0xf8ae, 0x6e70, 0x53fb, 0x477c, 0x4d02, 0x0, 0x1);
        gbc.writeMem(0x3c94, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xf8ae, gbc.sp());
        EXPECT(0x3c96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 028C
        gbc.setState(0x7197, 0x91f9, 0x77e0, 0xf688, 0x5813, 0xe8bc, 0x1, 0x0);
        gbc.writeMem(0x7197, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x91f9, gbc.sp());
        EXPECT(0x7199, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 028D
        gbc.setState(0x7d7b, 0xb560, 0x6190, 0x748a, 0xd4, 0x990d, 0x1, 0x1);
        gbc.writeMem(0x7d7b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xb560, gbc.sp());
        EXPECT(0x7d7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 028E
        gbc.setState(0x806b, 0xf9a0, 0x8210, 0x8a77, 0xc819, 0xf1dc, 0x0, 0x1);
        gbc.writeMem(0x806b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xf9a0, gbc.sp());
        EXPECT(0x806d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x806b));
        EXPECT(0x25, gbc.readMem(0x806c));
        // CB 25 028F
        gbc.setState(0x7949, 0xc311, 0xc710, 0x3d1a, 0x103a, 0xf040, 0x1, 0x1);
        gbc.writeMem(0x7949, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xc311, gbc.sp());
        EXPECT(0x794b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0290
        gbc.setState(0x8451, 0x4c04, 0x4f30, 0x7dd5, 0x8eea, 0x5204, 0x1, 0x0);
        gbc.writeMem(0x8451, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x4c04, gbc.sp());
        EXPECT(0x8453, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8451));
        EXPECT(0x25, gbc.readMem(0x8452));
        // CB 25 0291
        gbc.setState(0x55d7, 0x29e4, 0xc0b0, 0xdac8, 0x4c71, 0x70b1, 0x0, 0x0);
        gbc.writeMem(0x55d7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x29e4, gbc.sp());
        EXPECT(0x55d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0292
        gbc.setState(0x8dc7, 0xaed, 0xb8d0, 0xa994, 0xba24, 0x2aab, 0x0, 0x1);
        gbc.writeMem(0x8dc7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xaed, gbc.sp());
        EXPECT(0x8dc9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dc7));
        EXPECT(0x25, gbc.readMem(0x8dc8));
        // CB 25 0293
        gbc.setState(0xd503, 0x69ef, 0xa700, 0xeefd, 0x34b, 0xbeaa, 0x0, 0x0);
        gbc.writeMem(0xd503, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x69ef, gbc.sp());
        EXPECT(0xd505, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd503));
        EXPECT(0x25, gbc.readMem(0xd504));
        // CB 25 0294
        gbc.setState(0x1dd1, 0xeff9, 0x9ed0, 0x7e4f, 0x242c, 0xedc4, 0x1, 0x1);
        gbc.writeMem(0x1dd1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xeff9, gbc.sp());
        EXPECT(0x1dd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0295
        gbc.setState(0xb499, 0xa47f, 0x1a0, 0x65be, 0x5481, 0x139, 0x1, 0x1);
        gbc.writeMem(0xb499, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xa47f, gbc.sp());
        EXPECT(0xb49b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb499));
        EXPECT(0x25, gbc.readMem(0xb49a));
        // CB 25 0296
        gbc.setState(0xe77c, 0x6c1f, 0x1310, 0xa08a, 0x76cc, 0xef4, 0x0, 0x0);
        gbc.writeMem(0xe77c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x6c1f, gbc.sp());
        EXPECT(0xe77e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe77c));
        EXPECT(0x25, gbc.readMem(0xe77d));
        // CB 25 0297
        gbc.setState(0x8123, 0xc832, 0x93b0, 0x4983, 0xe9b0, 0x6e88, 0x0, 0x0);
        gbc.writeMem(0x8123, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xc832, gbc.sp());
        EXPECT(0x8125, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8123));
        EXPECT(0x25, gbc.readMem(0x8124));
        // CB 25 0298
        gbc.setState(0xe07d, 0xa52, 0x5500, 0x833f, 0x1e59, 0x39c7, 0x1, 0x0);
        gbc.writeMem(0xe07d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xa52, gbc.sp());
        EXPECT(0xe07f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe07d));
        EXPECT(0x25, gbc.readMem(0xe07e));
        // CB 25 0299
        gbc.setState(0xcfe1, 0x9d7d, 0x7e10, 0x122f, 0x9f2a, 0x550, 0x1, 0x1);
        gbc.writeMem(0xcfe1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x9d7d, gbc.sp());
        EXPECT(0xcfe3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfe1));
        EXPECT(0x25, gbc.readMem(0xcfe2));
        // CB 25 029A
        gbc.setState(0xbf95, 0xd073, 0x1d00, 0x3b29, 0x20bd, 0x1bb9, 0x0, 0x1);
        gbc.writeMem(0xbf95, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xd073, gbc.sp());
        EXPECT(0xbf97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf95));
        EXPECT(0x25, gbc.readMem(0xbf96));
        // CB 25 029B
        gbc.setState(0xc87c, 0x769c, 0xa570, 0xae3a, 0x62fb, 0xa358, 0x1, 0x0);
        gbc.writeMem(0xc87c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x769c, gbc.sp());
        EXPECT(0xc87e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc87c));
        EXPECT(0x25, gbc.readMem(0xc87d));
        // CB 25 029C
        gbc.setState(0xc148, 0x2bc7, 0xe350, 0xcc40, 0x6237, 0x2ae0, 0x1, 0x0);
        gbc.writeMem(0xc148, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x2bc7, gbc.sp());
        EXPECT(0xc14a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc148));
        EXPECT(0x25, gbc.readMem(0xc149));
        // CB 25 029D
        gbc.setState(0x3a39, 0xdff8, 0x5960, 0x139d, 0x7094, 0xae15, 0x1, 0x0);
        gbc.writeMem(0x3a39, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xdff8, gbc.sp());
        EXPECT(0x3a3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 029E
        gbc.setState(0xc2fe, 0x6070, 0xba40, 0xa6cb, 0x722c, 0x736b, 0x0, 0x0);
        gbc.writeMem(0xc2fe, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x6070, gbc.sp());
        EXPECT(0xc300, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2fe));
        EXPECT(0x25, gbc.readMem(0xc2ff));
        // CB 25 029F
        gbc.setState(0x9fd9, 0x637f, 0xce10, 0xc031, 0x6b0d, 0x1562, 0x0, 0x1);
        gbc.writeMem(0x9fd9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x637f, gbc.sp());
        EXPECT(0x9fdb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fd9));
        EXPECT(0x25, gbc.readMem(0x9fda));
        // CB 25 02A0
        gbc.setState(0x6e46, 0x452, 0x2430, 0x9b0b, 0x2f9d, 0x5974, 0x0, 0x0);
        gbc.writeMem(0x6e46, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x452, gbc.sp());
        EXPECT(0x6e48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02A1
        gbc.setState(0xe38, 0x9978, 0xe40, 0x1a01, 0x8c73, 0xae10, 0x1, 0x1);
        gbc.writeMem(0xe38, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x9978, gbc.sp());
        EXPECT(0xe3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02A2
        gbc.setState(0x8cd0, 0x40cf, 0x4d10, 0x82af, 0x49f7, 0xa893, 0x1, 0x1);
        gbc.writeMem(0x8cd0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x40cf, gbc.sp());
        EXPECT(0x8cd2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cd0));
        EXPECT(0x25, gbc.readMem(0x8cd1));
        // CB 25 02A3
        gbc.setState(0xe78d, 0xcc77, 0x19d0, 0xcb8d, 0xe67a, 0x7ed5, 0x0, 0x0);
        gbc.writeMem(0xe78d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xcc77, gbc.sp());
        EXPECT(0xe78f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe78d));
        EXPECT(0x25, gbc.readMem(0xe78e));
        // CB 25 02A4
        gbc.setState(0xbaab, 0x6ce6, 0x5f50, 0xc0e0, 0x4f1c, 0x686f, 0x1, 0x1);
        gbc.writeMem(0xbaab, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x6ce6, gbc.sp());
        EXPECT(0xbaad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaab));
        EXPECT(0x25, gbc.readMem(0xbaac));
        // CB 25 02A5
        gbc.setState(0x2114, 0x2ced, 0x1c10, 0x7c32, 0x69e5, 0x4dc8, 0x1, 0x0);
        gbc.writeMem(0x2114, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x2ced, gbc.sp());
        EXPECT(0x2116, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02A6
        gbc.setState(0xc917, 0xe75d, 0x7900, 0x1c26, 0x1cc3, 0x451f, 0x0, 0x1);
        gbc.writeMem(0xc917, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xe75d, gbc.sp());
        EXPECT(0xc919, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc917));
        EXPECT(0x25, gbc.readMem(0xc918));
        // CB 25 02A8
        gbc.setState(0x7a42, 0xa6a9, 0x3e0, 0x5556, 0xe91d, 0x39a, 0x1, 0x1);
        gbc.writeMem(0x7a42, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xa6a9, gbc.sp());
        EXPECT(0x7a44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02A9
        gbc.setState(0xd06b, 0xaccc, 0x1960, 0xb864, 0x34d9, 0x3946, 0x1, 0x1);
        gbc.writeMem(0xd06b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xaccc, gbc.sp());
        EXPECT(0xd06d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd06b));
        EXPECT(0x25, gbc.readMem(0xd06c));
        // CB 25 02AA
        gbc.setState(0x614e, 0xa96b, 0x9220, 0x526d, 0x823, 0x2982, 0x1, 0x1);
        gbc.writeMem(0x614e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xa96b, gbc.sp());
        EXPECT(0x6150, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02AB
        gbc.setState(0x6b79, 0x22cd, 0xc150, 0x36a0, 0x3b60, 0xdc00, 0x0, 0x0);
        gbc.writeMem(0x6b79, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x22cd, gbc.sp());
        EXPECT(0x6b7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02AC
        gbc.setState(0x915, 0x37d2, 0xee90, 0xd31e, 0x9169, 0x3d4b, 0x0, 0x0);
        gbc.writeMem(0x915, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x37d2, gbc.sp());
        EXPECT(0x917, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02AE
        gbc.setState(0xd22e, 0xc820, 0xd0e0, 0xebb1, 0x9858, 0x439e, 0x1, 0x0);
        gbc.writeMem(0xd22e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xc820, gbc.sp());
        EXPECT(0xd230, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd22e));
        EXPECT(0x25, gbc.readMem(0xd22f));
        // CB 25 02AF
        gbc.setState(0x25b4, 0xb6fa, 0x6000, 0xe5a9, 0x62f8, 0xd5b4, 0x0, 0x0);
        gbc.writeMem(0x25b4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xb6fa, gbc.sp());
        EXPECT(0x25b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02B0
        gbc.setState(0xa477, 0xb96c, 0x7e10, 0xd03b, 0x46df, 0xb35c, 0x1, 0x1);
        gbc.writeMem(0xa477, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xb96c, gbc.sp());
        EXPECT(0xa479, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa477));
        EXPECT(0x25, gbc.readMem(0xa478));
        // CB 25 02B1
        gbc.setState(0xe43f, 0x9fc0, 0x71b0, 0xaa8f, 0xe9b9, 0xe712, 0x0, 0x0);
        gbc.writeMem(0xe43f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x9fc0, gbc.sp());
        EXPECT(0xe441, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe43f));
        EXPECT(0x25, gbc.readMem(0xe440));
        // CB 25 02B2
        gbc.setState(0x1990, 0x14fb, 0x7620, 0x13a9, 0x9a3, 0xf24a, 0x1, 0x1);
        gbc.writeMem(0x1990, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x14fb, gbc.sp());
        EXPECT(0x1992, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02B4
        gbc.setState(0x4f57, 0x90fb, 0x6e0, 0xb72, 0x5c60, 0x54a9, 0x0, 0x1);
        gbc.writeMem(0x4f57, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x90fb, gbc.sp());
        EXPECT(0x4f59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02B5
        gbc.setState(0x8be7, 0xcb5a, 0x4d00, 0xb217, 0x4156, 0x7fb7, 0x0, 0x0);
        gbc.writeMem(0x8be7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xcb5a, gbc.sp());
        EXPECT(0x8be9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8be7));
        EXPECT(0x25, gbc.readMem(0x8be8));
        // CB 25 02B6
        gbc.setState(0xb51a, 0x3560, 0x4e30, 0xad30, 0x727c, 0x2a3, 0x1, 0x0);
        gbc.writeMem(0xb51a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x3560, gbc.sp());
        EXPECT(0xb51c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb51a));
        EXPECT(0x25, gbc.readMem(0xb51b));
        // CB 25 02B8
        gbc.setState(0xadc1, 0x230c, 0xdae0, 0x50e9, 0xcf78, 0xf4ae, 0x1, 0x0);
        gbc.writeMem(0xadc1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x230c, gbc.sp());
        EXPECT(0xadc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadc1));
        EXPECT(0x25, gbc.readMem(0xadc2));
        // CB 25 02B9
        gbc.setState(0x1b78, 0x446f, 0xb800, 0xd84c, 0x222c, 0x8c57, 0x1, 0x1);
        gbc.writeMem(0x1b78, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x446f, gbc.sp());
        EXPECT(0x1b7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02BA
        gbc.setState(0x8db9, 0x9867, 0x1410, 0xe448, 0x9d16, 0xf475, 0x0, 0x1);
        gbc.writeMem(0x8db9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x9867, gbc.sp());
        EXPECT(0x8dbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8db9));
        EXPECT(0x25, gbc.readMem(0x8dba));
        // CB 25 02BB
        gbc.setState(0x1a4a, 0xbceb, 0xb560, 0xfd3f, 0x7561, 0xfe34, 0x0, 0x0);
        gbc.writeMem(0x1a4a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xbceb, gbc.sp());
        EXPECT(0x1a4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02BC
        gbc.setState(0x682e, 0xb62, 0xf630, 0xa03c, 0x78eb, 0xf6b3, 0x0, 0x1);
        gbc.writeMem(0x682e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xb62, gbc.sp());
        EXPECT(0x6830, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02BE
        gbc.setState(0x535b, 0x288, 0xad50, 0x7230, 0x5bdc, 0x8c15, 0x1, 0x0);
        gbc.writeMem(0x535b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x288, gbc.sp());
        EXPECT(0x535d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02BF
        gbc.setState(0x979f, 0xbc18, 0x1e60, 0x380c, 0x3d24, 0x46bc, 0x1, 0x1);
        gbc.writeMem(0x979f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xbc18, gbc.sp());
        EXPECT(0x97a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x979f));
        EXPECT(0x25, gbc.readMem(0x97a0));
        // CB 25 02C0
        gbc.setState(0x36f, 0x7597, 0xcb80, 0xe0cb, 0xd41f, 0x55f0, 0x1, 0x0);
        gbc.writeMem(0x36f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x7597, gbc.sp());
        EXPECT(0x371, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02C1
        gbc.setState(0xe55d, 0x4deb, 0x9b0, 0xea46, 0x242, 0x448f, 0x0, 0x1);
        gbc.writeMem(0xe55d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x4deb, gbc.sp());
        EXPECT(0xe55f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe55d));
        EXPECT(0x25, gbc.readMem(0xe55e));
        // CB 25 02C2
        gbc.setState(0xd666, 0x110e, 0x2bb0, 0x295a, 0x795, 0xb59c, 0x1, 0x0);
        gbc.writeMem(0xd666, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x110e, gbc.sp());
        EXPECT(0xd668, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd666));
        EXPECT(0x25, gbc.readMem(0xd667));
        // CB 25 02C3
        gbc.setState(0x140d, 0x8ca0, 0x9ad0, 0xad38, 0xff47, 0x49ca, 0x0, 0x1);
        gbc.writeMem(0x140d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x8ca0, gbc.sp());
        EXPECT(0x140f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02C4
        gbc.setState(0xd8d8, 0x98aa, 0xac10, 0x9af5, 0x777b, 0xa4d7, 0x0, 0x1);
        gbc.writeMem(0xd8d8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x98aa, gbc.sp());
        EXPECT(0xd8da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8d8));
        EXPECT(0x25, gbc.readMem(0xd8d9));
        // CB 25 02C5
        gbc.setState(0xcb2e, 0xd8a9, 0x3c50, 0x4c6e, 0x64b9, 0x49f5, 0x0, 0x0);
        gbc.writeMem(0xcb2e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xd8a9, gbc.sp());
        EXPECT(0xcb30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb2e));
        EXPECT(0x25, gbc.readMem(0xcb2f));
        // CB 25 02C6
        gbc.setState(0x206, 0x7e92, 0x32e0, 0x9324, 0x32, 0x6113, 0x1, 0x0);
        gbc.writeMem(0x206, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x7e92, gbc.sp());
        EXPECT(0x208, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02C7
        gbc.setState(0x9b98, 0x55c, 0xe050, 0x6bbc, 0x272, 0xec59, 0x1, 0x0);
        gbc.writeMem(0x9b98, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x55c, gbc.sp());
        EXPECT(0x9b9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b98));
        EXPECT(0x25, gbc.readMem(0x9b99));
        // CB 25 02C8
        gbc.setState(0x8a2, 0xacb7, 0x8e90, 0xc8e6, 0xa254, 0x3890, 0x1, 0x1);
        gbc.writeMem(0x8a2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xacb7, gbc.sp());
        EXPECT(0x8a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02CA
        gbc.setState(0x9a0f, 0x15e9, 0xdc60, 0xa00, 0x7e94, 0xf5a3, 0x0, 0x1);
        gbc.writeMem(0x9a0f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x15e9, gbc.sp());
        EXPECT(0x9a11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a0f));
        EXPECT(0x25, gbc.readMem(0x9a10));
        // CB 25 02CB
        gbc.setState(0x1347, 0xc056, 0x1f40, 0x59ca, 0xb6fb, 0x8d2e, 0x1, 0x1);
        gbc.writeMem(0x1347, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xc056, gbc.sp());
        EXPECT(0x1349, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02CD
        gbc.setState(0x3c60, 0xc806, 0xbf80, 0xab22, 0x885d, 0xb572, 0x1, 0x0);
        gbc.writeMem(0x3c60, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xc806, gbc.sp());
        EXPECT(0x3c62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02CE
        gbc.setState(0xdc3, 0x55cf, 0x8a40, 0x3bbe, 0x1895, 0x7d52, 0x0, 0x0);
        gbc.writeMem(0xdc3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x55cf, gbc.sp());
        EXPECT(0xdc5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02CF
        gbc.setState(0xb6a8, 0xb4d9, 0x1bc0, 0xb672, 0x526d, 0x5ced, 0x0, 0x0);
        gbc.writeMem(0xb6a8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xb4d9, gbc.sp());
        EXPECT(0xb6aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6a8));
        EXPECT(0x25, gbc.readMem(0xb6a9));
        // CB 25 02D0
        gbc.setState(0xc5, 0x2773, 0x9a0, 0x8468, 0x37b5, 0x710d, 0x0, 0x1);
        gbc.writeMem(0xc5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x2773, gbc.sp());
        EXPECT(0xc7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02D1
        gbc.setState(0x7d1c, 0x3ed6, 0xb480, 0xf358, 0x1830, 0x27dc, 0x1, 0x0);
        gbc.writeMem(0x7d1c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x3ed6, gbc.sp());
        EXPECT(0x7d1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02D2
        gbc.setState(0x7f08, 0x171d, 0x9c40, 0x27, 0x7807, 0x389a, 0x1, 0x1);
        gbc.writeMem(0x7f08, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x171d, gbc.sp());
        EXPECT(0x7f0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02D3
        gbc.setState(0x9804, 0x1f38, 0xc6f0, 0x863e, 0x754d, 0xae56, 0x1, 0x0);
        gbc.writeMem(0x9804, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x1f38, gbc.sp());
        EXPECT(0x9806, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9804));
        EXPECT(0x25, gbc.readMem(0x9805));
        // CB 25 02D4
        gbc.setState(0x6711, 0xb96, 0xe590, 0xaf38, 0x9a8a, 0x6ae6, 0x1, 0x0);
        gbc.writeMem(0x6711, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xb96, gbc.sp());
        EXPECT(0x6713, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02D5
        gbc.setState(0xc5f, 0x1762, 0xaec0, 0xdb30, 0x410f, 0x7cd2, 0x1, 0x0);
        gbc.writeMem(0xc5f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x1762, gbc.sp());
        EXPECT(0xc61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02D6
        gbc.setState(0x2626, 0x4040, 0x6770, 0x207, 0xb68c, 0xdfd8, 0x0, 0x0);
        gbc.writeMem(0x2626, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x4040, gbc.sp());
        EXPECT(0x2628, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02D7
        gbc.setState(0x9dad, 0xb18d, 0x4a40, 0x4f91, 0x6e1a, 0x4766, 0x0, 0x0);
        gbc.writeMem(0x9dad, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xb18d, gbc.sp());
        EXPECT(0x9daf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9dad));
        EXPECT(0x25, gbc.readMem(0x9dae));
        // CB 25 02D9
        gbc.setState(0x91ca, 0xc1d5, 0xa6a0, 0x70fc, 0xc086, 0x8fb0, 0x0, 0x1);
        gbc.writeMem(0x91ca, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xc1d5, gbc.sp());
        EXPECT(0x91cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91ca));
        EXPECT(0x25, gbc.readMem(0x91cb));
        // CB 25 02DA
        gbc.setState(0xa980, 0x3a89, 0x9bd0, 0xcb1a, 0xde6, 0xd510, 0x1, 0x1);
        gbc.writeMem(0xa980, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x3a89, gbc.sp());
        EXPECT(0xa982, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa980));
        EXPECT(0x25, gbc.readMem(0xa981));
        // CB 25 02DB
        gbc.setState(0x5b7, 0x4d3d, 0xacd0, 0x5f07, 0x8c19, 0x7232, 0x0, 0x1);
        gbc.writeMem(0x5b7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x4d3d, gbc.sp());
        EXPECT(0x5b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02DC
        gbc.setState(0xd4f2, 0x1b12, 0xdbc0, 0x8b89, 0x30d0, 0xbc2b, 0x0, 0x1);
        gbc.writeMem(0xd4f2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x1b12, gbc.sp());
        EXPECT(0xd4f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4f2));
        EXPECT(0x25, gbc.readMem(0xd4f3));
        // CB 25 02DD
        gbc.setState(0xbdf0, 0x8844, 0x690, 0x9ad, 0x3d3e, 0x2e55, 0x1, 0x1);
        gbc.writeMem(0xbdf0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x8844, gbc.sp());
        EXPECT(0xbdf2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdf0));
        EXPECT(0x25, gbc.readMem(0xbdf1));
        // CB 25 02DE
        gbc.setState(0x39c2, 0x1d0d, 0x4f10, 0x269c, 0x4eff, 0x5d4, 0x1, 0x1);
        gbc.writeMem(0x39c2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x1d0d, gbc.sp());
        EXPECT(0x39c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02DF
        gbc.setState(0xcd54, 0x9818, 0x8980, 0xa180, 0xabd9, 0x9fe4, 0x1, 0x0);
        gbc.writeMem(0xcd54, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x9818, gbc.sp());
        EXPECT(0xcd56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd54));
        EXPECT(0x25, gbc.readMem(0xcd55));
        // CB 25 02E0
        gbc.setState(0x2d06, 0x4916, 0x1a70, 0x3ce6, 0x7fcd, 0x1b62, 0x1, 0x0);
        gbc.writeMem(0x2d06, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x4916, gbc.sp());
        EXPECT(0x2d08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02E1
        gbc.setState(0xd706, 0x58b6, 0x61c0, 0x104e, 0x1e1a, 0xcd1d, 0x0, 0x0);
        gbc.writeMem(0xd706, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x58b6, gbc.sp());
        EXPECT(0xd708, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd706));
        EXPECT(0x25, gbc.readMem(0xd707));
        // CB 25 02E2
        gbc.setState(0x2635, 0x6a1e, 0x1740, 0x663e, 0x8fcd, 0xbe59, 0x1, 0x1);
        gbc.writeMem(0x2635, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x6a1e, gbc.sp());
        EXPECT(0x2637, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02E3
        gbc.setState(0x1916, 0xc816, 0x64b0, 0xf721, 0x24c4, 0xd3ea, 0x0, 0x1);
        gbc.writeMem(0x1916, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xc816, gbc.sp());
        EXPECT(0x1918, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02E4
        gbc.setState(0xc162, 0xd096, 0x510, 0x185c, 0xf2da, 0x9d46, 0x1, 0x1);
        gbc.writeMem(0xc162, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xd096, gbc.sp());
        EXPECT(0xc164, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc162));
        EXPECT(0x25, gbc.readMem(0xc163));
        // CB 25 02E5
        gbc.setState(0x33f5, 0x9ce3, 0x8fa0, 0x605e, 0x41ff, 0x4610, 0x1, 0x1);
        gbc.writeMem(0x33f5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x9ce3, gbc.sp());
        EXPECT(0x33f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02E6
        gbc.setState(0x32e3, 0x5295, 0x69d0, 0x49d9, 0xb22c, 0xfa1c, 0x0, 0x1);
        gbc.writeMem(0x32e3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x5295, gbc.sp());
        EXPECT(0x32e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02E7
        gbc.setState(0xc7ba, 0xc4ab, 0xe960, 0x5414, 0x9187, 0xd800, 0x1, 0x0);
        gbc.writeMem(0xc7ba, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xc4ab, gbc.sp());
        EXPECT(0xc7bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7ba));
        EXPECT(0x25, gbc.readMem(0xc7bb));
        // CB 25 02E8
        gbc.setState(0x7c8b, 0xda92, 0xe870, 0x560a, 0x26e6, 0xc24c, 0x1, 0x1);
        gbc.writeMem(0x7c8b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xda92, gbc.sp());
        EXPECT(0x7c8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02E9
        gbc.setState(0x794a, 0x6118, 0xa220, 0xf952, 0x236b, 0x56eb, 0x1, 0x1);
        gbc.writeMem(0x794a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x6118, gbc.sp());
        EXPECT(0x794c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02EA
        gbc.setState(0xccae, 0x66e7, 0x84b0, 0xab8d, 0xf030, 0x9f08, 0x1, 0x0);
        gbc.writeMem(0xccae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x66e7, gbc.sp());
        EXPECT(0xccb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccae));
        EXPECT(0x25, gbc.readMem(0xccaf));
        // CB 25 02EB
        gbc.setState(0x435e, 0x4f9a, 0x1e20, 0xbdcf, 0x973e, 0x3460, 0x0, 0x1);
        gbc.writeMem(0x435e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x4f9a, gbc.sp());
        EXPECT(0x4360, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02EC
        gbc.setState(0x5f7f, 0x7c57, 0xc290, 0xb5b2, 0x62b8, 0x386c, 0x0, 0x0);
        gbc.writeMem(0x5f7f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x7c57, gbc.sp());
        EXPECT(0x5f81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02ED
        gbc.setState(0x8a7, 0x386f, 0x8f40, 0x3887, 0x586d, 0xeb0a, 0x0, 0x0);
        gbc.writeMem(0x8a7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x386f, gbc.sp());
        EXPECT(0x8a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02EE
        gbc.setState(0x1c75, 0xf8ac, 0x3ee0, 0x3c30, 0x28e3, 0xcce1, 0x1, 0x1);
        gbc.writeMem(0x1c75, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xf8ac, gbc.sp());
        EXPECT(0x1c77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02EF
        gbc.setState(0x3a41, 0xf709, 0x5ec0, 0xc603, 0x1997, 0x338a, 0x0, 0x1);
        gbc.writeMem(0x3a41, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xf709, gbc.sp());
        EXPECT(0x3a43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02F0
        gbc.setState(0x7250, 0x87a3, 0x1fa0, 0x6ce4, 0x5f70, 0x8d34, 0x1, 0x0);
        gbc.writeMem(0x7250, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x87a3, gbc.sp());
        EXPECT(0x7252, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02F1
        gbc.setState(0xc374, 0xa3be, 0x3f20, 0xa9aa, 0x71d8, 0xd711, 0x0, 0x1);
        gbc.writeMem(0xc374, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xa3be, gbc.sp());
        EXPECT(0xc376, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc374));
        EXPECT(0x25, gbc.readMem(0xc375));
        // CB 25 02F2
        gbc.setState(0xbd2f, 0xe0df, 0xf050, 0x351d, 0x533e, 0xa906, 0x1, 0x1);
        gbc.writeMem(0xbd2f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xe0df, gbc.sp());
        EXPECT(0xbd31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd2f));
        EXPECT(0x25, gbc.readMem(0xbd30));
        // CB 25 02F3
        gbc.setState(0x9f20, 0x421f, 0x94d0, 0x637, 0x191d, 0x46e, 0x1, 0x0);
        gbc.writeMem(0x9f20, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x421f, gbc.sp());
        EXPECT(0x9f22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f20));
        EXPECT(0x25, gbc.readMem(0x9f21));
        // CB 25 02F4
        gbc.setState(0x68ea, 0x169d, 0xb430, 0x76eb, 0x58c2, 0x8a65, 0x0, 0x0);
        gbc.writeMem(0x68ea, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x169d, gbc.sp());
        EXPECT(0x68ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02F5
        gbc.setState(0x81de, 0xe41d, 0xb570, 0xb496, 0x90a1, 0xbf36, 0x1, 0x1);
        gbc.writeMem(0x81de, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xe41d, gbc.sp());
        EXPECT(0x81e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81de));
        EXPECT(0x25, gbc.readMem(0x81df));
        // CB 25 02F6
        gbc.setState(0xe7b1, 0x21a5, 0xfef0, 0xbcf1, 0xc84a, 0xbad, 0x1, 0x0);
        gbc.writeMem(0xe7b1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x21a5, gbc.sp());
        EXPECT(0xe7b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7b1));
        EXPECT(0x25, gbc.readMem(0xe7b2));
        // CB 25 02F7
        gbc.setState(0xd4ff, 0x8810, 0x140, 0x5aa7, 0x3cad, 0xa69e, 0x1, 0x1);
        gbc.writeMem(0xd4ff, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x8810, gbc.sp());
        EXPECT(0xd501, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4ff));
        EXPECT(0x25, gbc.readMem(0xd500));
        // CB 25 02F8
        gbc.setState(0x8f06, 0xa2c3, 0x6150, 0x4b5a, 0x6d6e, 0x5d3, 0x0, 0x1);
        gbc.writeMem(0x8f06, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xa2c3, gbc.sp());
        EXPECT(0x8f08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f06));
        EXPECT(0x25, gbc.readMem(0x8f07));
        // CB 25 02F9
        gbc.setState(0xd6f1, 0xc81c, 0x7e60, 0x37f6, 0xf474, 0xe694, 0x1, 0x1);
        gbc.writeMem(0xd6f1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xc81c, gbc.sp());
        EXPECT(0xd6f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6f1));
        EXPECT(0x25, gbc.readMem(0xd6f2));
        // CB 25 02FA
        gbc.setState(0x8bdb, 0xc53a, 0x7170, 0x551c, 0x30cc, 0x22d0, 0x1, 0x0);
        gbc.writeMem(0x8bdb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xc53a, gbc.sp());
        EXPECT(0x8bdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bdb));
        EXPECT(0x25, gbc.readMem(0x8bdc));
        // CB 25 02FB
        gbc.setState(0x7f88, 0x5025, 0x3e50, 0x95d1, 0x301d, 0xae91, 0x1, 0x0);
        gbc.writeMem(0x7f88, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x5025, gbc.sp());
        EXPECT(0x7f8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02FC
        gbc.setState(0x4f37, 0xc9ec, 0x1010, 0xf129, 0x68b2, 0x5a52, 0x0, 0x0);
        gbc.writeMem(0x4f37, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xc9ec, gbc.sp());
        EXPECT(0x4f39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 02FD
        gbc.setState(0x8453, 0x9d30, 0xa350, 0xca44, 0x9a2f, 0x531b, 0x1, 0x1);
        gbc.writeMem(0x8453, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x9d30, gbc.sp());
        EXPECT(0x8455, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8453));
        EXPECT(0x25, gbc.readMem(0x8454));
        // CB 25 02FE
        gbc.setState(0x7358, 0x9dee, 0x4830, 0xda1f, 0x7de3, 0x36b7, 0x0, 0x0);
        gbc.writeMem(0x7358, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x9dee, gbc.sp());
        EXPECT(0x735a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 02FF
        gbc.setState(0xc882, 0x5331, 0x1fd0, 0xafba, 0x316d, 0x9a37, 0x0, 0x0);
        gbc.writeMem(0xc882, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x5331, gbc.sp());
        EXPECT(0xc884, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc882));
        EXPECT(0x25, gbc.readMem(0xc883));
        // CB 25 0300
        gbc.setState(0x4083, 0x370e, 0xaa00, 0xbda3, 0x77c, 0x528a, 0x1, 0x1);
        gbc.writeMem(0x4083, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x370e, gbc.sp());
        EXPECT(0x4085, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0301
        gbc.setState(0x48b, 0xd46a, 0x9a10, 0x9e60, 0x89b7, 0x7354, 0x0, 0x0);
        gbc.writeMem(0x48b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xd46a, gbc.sp());
        EXPECT(0x48d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0302
        gbc.setState(0x9341, 0xba0c, 0x7c20, 0xb666, 0xd08b, 0xda43, 0x1, 0x0);
        gbc.writeMem(0x9341, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xba0c, gbc.sp());
        EXPECT(0x9343, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9341));
        EXPECT(0x25, gbc.readMem(0x9342));
        // CB 25 0303
        gbc.setState(0x6224, 0x7f73, 0x3bd0, 0x5493, 0xfb71, 0x78fa, 0x1, 0x1);
        gbc.writeMem(0x6224, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x7f73, gbc.sp());
        EXPECT(0x6226, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0304
        gbc.setState(0xe908, 0x42b, 0xbc50, 0x10fe, 0xe867, 0xfb31, 0x0, 0x1);
        gbc.writeMem(0xe908, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x42b, gbc.sp());
        EXPECT(0xe90a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe908));
        EXPECT(0x25, gbc.readMem(0xe909));
        // CB 25 0305
        gbc.setState(0x37b4, 0x34cb, 0x62b0, 0x283f, 0x2d8e, 0xc11a, 0x1, 0x0);
        gbc.writeMem(0x37b4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x34cb, gbc.sp());
        EXPECT(0x37b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0306
        gbc.setState(0x794d, 0xf2b5, 0xc350, 0xfcc6, 0x2222, 0x251f, 0x0, 0x0);
        gbc.writeMem(0x794d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xf2b5, gbc.sp());
        EXPECT(0x794f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0307
        gbc.setState(0xb46c, 0xf450, 0xad50, 0x99f4, 0x4268, 0x21ed, 0x1, 0x0);
        gbc.writeMem(0xb46c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xf450, gbc.sp());
        EXPECT(0xb46e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb46c));
        EXPECT(0x25, gbc.readMem(0xb46d));
        // CB 25 0308
        gbc.setState(0xb097, 0xbf78, 0x2150, 0x5b63, 0xa64f, 0xdc4, 0x0, 0x0);
        gbc.writeMem(0xb097, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xbf78, gbc.sp());
        EXPECT(0xb099, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb097));
        EXPECT(0x25, gbc.readMem(0xb098));
        // CB 25 0309
        gbc.setState(0x3842, 0xd852, 0x7a80, 0x90b0, 0x9671, 0xa70f, 0x1, 0x0);
        gbc.writeMem(0x3842, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xd852, gbc.sp());
        EXPECT(0x3844, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 030A
        gbc.setState(0xad00, 0xf144, 0xc7a0, 0x4bca, 0x8158, 0xb2dd, 0x0, 0x0);
        gbc.writeMem(0xad00, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xf144, gbc.sp());
        EXPECT(0xad02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad00));
        EXPECT(0x25, gbc.readMem(0xad01));
        // CB 25 030B
        gbc.setState(0x1acb, 0xebc, 0x5ce0, 0xc0cd, 0x6978, 0x5b52, 0x0, 0x0);
        gbc.writeMem(0x1acb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xebc, gbc.sp());
        EXPECT(0x1acd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 030C
        gbc.setState(0x76d9, 0x79f, 0xb7c0, 0x5590, 0x38bf, 0x7365, 0x1, 0x0);
        gbc.writeMem(0x76d9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x79f, gbc.sp());
        EXPECT(0x76db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 030D
        gbc.setState(0x1d4, 0xc70, 0x8e60, 0x26cf, 0xf81d, 0x5a11, 0x1, 0x1);
        gbc.writeMem(0x1d4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xc70, gbc.sp());
        EXPECT(0x1d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 030E
        gbc.setState(0x34a3, 0x5f97, 0x7290, 0xf1cc, 0xfedc, 0xaead, 0x0, 0x0);
        gbc.writeMem(0x34a3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x5f97, gbc.sp());
        EXPECT(0x34a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 030F
        gbc.setState(0xd2e4, 0x226d, 0x2eb0, 0x64d9, 0x675, 0xb378, 0x0, 0x1);
        gbc.writeMem(0xd2e4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x226d, gbc.sp());
        EXPECT(0xd2e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2e4));
        EXPECT(0x25, gbc.readMem(0xd2e5));
        // CB 25 0310
        gbc.setState(0x1771, 0x53f4, 0x1b20, 0xc84c, 0x65cd, 0x63ee, 0x0, 0x1);
        gbc.writeMem(0x1771, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x53f4, gbc.sp());
        EXPECT(0x1773, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0311
        gbc.setState(0x71ed, 0x3e82, 0x58e0, 0x7094, 0xa10e, 0x8ca1, 0x0, 0x0);
        gbc.writeMem(0x71ed, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x3e82, gbc.sp());
        EXPECT(0x71ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0312
        gbc.setState(0xc8da, 0x4de6, 0xbe80, 0x64b6, 0x1cee, 0x33f4, 0x1, 0x0);
        gbc.writeMem(0xc8da, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x4de6, gbc.sp());
        EXPECT(0xc8dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8da));
        EXPECT(0x25, gbc.readMem(0xc8db));
        // CB 25 0313
        gbc.setState(0x4663, 0xef29, 0x80b0, 0x3c17, 0xf3fb, 0x20d2, 0x0, 0x1);
        gbc.writeMem(0x4663, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xef29, gbc.sp());
        EXPECT(0x4665, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0314
        gbc.setState(0xc7d2, 0xb76c, 0x78b0, 0x14a6, 0xfcc5, 0xf38d, 0x0, 0x1);
        gbc.writeMem(0xc7d2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xb76c, gbc.sp());
        EXPECT(0xc7d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7d2));
        EXPECT(0x25, gbc.readMem(0xc7d3));
        // CB 25 0315
        gbc.setState(0x1798, 0x4582, 0xabd0, 0x59de, 0xa08f, 0x6bfe, 0x0, 0x1);
        gbc.writeMem(0x1798, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x4582, gbc.sp());
        EXPECT(0x179a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0316
        gbc.setState(0xedee, 0xcfa, 0xbb0, 0xf3c3, 0x239a, 0x6920, 0x1, 0x0);
        gbc.writeMem(0xedee, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xcfa, gbc.sp());
        EXPECT(0xedf0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedee));
        EXPECT(0x25, gbc.readMem(0xedef));
        // CB 25 0317
        gbc.setState(0x81e4, 0xec13, 0xf950, 0x5f95, 0x6169, 0x4e9d, 0x0, 0x0);
        gbc.writeMem(0x81e4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xec13, gbc.sp());
        EXPECT(0x81e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81e4));
        EXPECT(0x25, gbc.readMem(0x81e5));
        // CB 25 0318
        gbc.setState(0x25cc, 0x35ba, 0x3340, 0xe5ad, 0xc1ea, 0x6145, 0x0, 0x1);
        gbc.writeMem(0x25cc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x35ba, gbc.sp());
        EXPECT(0x25ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0319
        gbc.setState(0x7899, 0x27d2, 0xb750, 0x4069, 0xc708, 0x3683, 0x0, 0x1);
        gbc.writeMem(0x7899, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x27d2, gbc.sp());
        EXPECT(0x789b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 031A
        gbc.setState(0x1941, 0x6fe4, 0x21b0, 0x10b, 0x2367, 0xe7d7, 0x0, 0x0);
        gbc.writeMem(0x1941, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x6fe4, gbc.sp());
        EXPECT(0x1943, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 031B
        gbc.setState(0x5c7f, 0xdeb4, 0x2110, 0xcf37, 0x380f, 0x8f3, 0x1, 0x0);
        gbc.writeMem(0x5c7f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xdeb4, gbc.sp());
        EXPECT(0x5c81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 031D
        gbc.setState(0xe01e, 0x6da4, 0x45d0, 0x42e9, 0x8a5, 0x7c6e, 0x1, 0x1);
        gbc.writeMem(0xe01e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x6da4, gbc.sp());
        EXPECT(0xe020, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe01e));
        EXPECT(0x25, gbc.readMem(0xe01f));
        // CB 25 031E
        gbc.setState(0xb062, 0x4419, 0xf760, 0xdc77, 0xa1bd, 0x8de9, 0x1, 0x1);
        gbc.writeMem(0xb062, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x4419, gbc.sp());
        EXPECT(0xb064, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb062));
        EXPECT(0x25, gbc.readMem(0xb063));
        // CB 25 031F
        gbc.setState(0x2fc3, 0xd80d, 0xa460, 0x8abf, 0x22e5, 0x6efe, 0x1, 0x0);
        gbc.writeMem(0x2fc3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xd80d, gbc.sp());
        EXPECT(0x2fc5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0320
        gbc.setState(0x3fb1, 0x4b19, 0x6280, 0x2198, 0x23a0, 0x8267, 0x1, 0x0);
        gbc.writeMem(0x3fb1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x4b19, gbc.sp());
        EXPECT(0x3fb3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0321
        gbc.setState(0xbec0, 0xfae0, 0xd2b0, 0xb8e5, 0x1135, 0x9b0f, 0x0, 0x1);
        gbc.writeMem(0xbec0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xfae0, gbc.sp());
        EXPECT(0xbec2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbec0));
        EXPECT(0x25, gbc.readMem(0xbec1));
        // CB 25 0322
        gbc.setState(0x77c7, 0x4175, 0x2a30, 0xcb05, 0x8fa0, 0x2173, 0x0, 0x0);
        gbc.writeMem(0x77c7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x4175, gbc.sp());
        EXPECT(0x77c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0323
        gbc.setState(0x62e4, 0xaf03, 0x4070, 0xfab3, 0x9eb2, 0xb69b, 0x1, 0x0);
        gbc.writeMem(0x62e4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xaf03, gbc.sp());
        EXPECT(0x62e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0325
        gbc.setState(0x8069, 0x1cc1, 0xe460, 0x814d, 0xc5e1, 0xc0b8, 0x1, 0x1);
        gbc.writeMem(0x8069, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x1cc1, gbc.sp());
        EXPECT(0x806b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8069));
        EXPECT(0x25, gbc.readMem(0x806a));
        // CB 25 0327
        gbc.setState(0xe21, 0x8b8c, 0x5f60, 0xda2c, 0x8230, 0xae74, 0x0, 0x0);
        gbc.writeMem(0xe21, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x8b8c, gbc.sp());
        EXPECT(0xe23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0328
        gbc.setState(0x57f6, 0x62ea, 0x7c60, 0xafc, 0x2f57, 0xb744, 0x0, 0x1);
        gbc.writeMem(0x57f6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x62ea, gbc.sp());
        EXPECT(0x57f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0329
        gbc.setState(0x4394, 0x73b2, 0x5770, 0xc3f8, 0x6b3d, 0xc419, 0x0, 0x1);
        gbc.writeMem(0x4394, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x73b2, gbc.sp());
        EXPECT(0x4396, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 032A
        gbc.setState(0xe8bd, 0xf40b, 0x2830, 0x85ec, 0x55e3, 0xefda, 0x1, 0x1);
        gbc.writeMem(0xe8bd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xf40b, gbc.sp());
        EXPECT(0xe8bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8bd));
        EXPECT(0x25, gbc.readMem(0xe8be));
        // CB 25 032B
        gbc.setState(0x6eaa, 0x3dc9, 0x95a0, 0x564a, 0x7ca7, 0xae82, 0x1, 0x1);
        gbc.writeMem(0x6eaa, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x3dc9, gbc.sp());
        EXPECT(0x6eac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 032C
        gbc.setState(0xb90d, 0xd53c, 0x75e0, 0xff9e, 0xcac0, 0x52a9, 0x1, 0x1);
        gbc.writeMem(0xb90d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xd53c, gbc.sp());
        EXPECT(0xb90f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb90d));
        EXPECT(0x25, gbc.readMem(0xb90e));
        // CB 25 032D
        gbc.setState(0xc5e5, 0x501b, 0x9900, 0xc90e, 0xc379, 0xd31d, 0x0, 0x1);
        gbc.writeMem(0xc5e5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x501b, gbc.sp());
        EXPECT(0xc5e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5e5));
        EXPECT(0x25, gbc.readMem(0xc5e6));
        // CB 25 032E
        gbc.setState(0x6f31, 0x4522, 0xb750, 0x48e7, 0x57a1, 0xc6bb, 0x0, 0x1);
        gbc.writeMem(0x6f31, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x4522, gbc.sp());
        EXPECT(0x6f33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 032F
        gbc.setState(0x14fd, 0xf25b, 0x6e50, 0x932d, 0x6b32, 0x975b, 0x0, 0x1);
        gbc.writeMem(0x14fd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xf25b, gbc.sp());
        EXPECT(0x14ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0330
        gbc.setState(0x8b53, 0xd8f0, 0x7020, 0x7132, 0xc9be, 0xb0f3, 0x1, 0x0);
        gbc.writeMem(0x8b53, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xd8f0, gbc.sp());
        EXPECT(0x8b55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b53));
        EXPECT(0x25, gbc.readMem(0x8b54));
        // CB 25 0331
        gbc.setState(0xc007, 0x3c9c, 0xa6f0, 0xc7db, 0xd28a, 0xa27f, 0x1, 0x1);
        gbc.writeMem(0xc007, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x3c9c, gbc.sp());
        EXPECT(0xc009, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc007));
        EXPECT(0x25, gbc.readMem(0xc008));
        // CB 25 0332
        gbc.setState(0xbe02, 0x93a1, 0xb870, 0x1bcb, 0x1578, 0x9327, 0x1, 0x1);
        gbc.writeMem(0xbe02, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x93a1, gbc.sp());
        EXPECT(0xbe04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe02));
        EXPECT(0x25, gbc.readMem(0xbe03));
        // CB 25 0333
        gbc.setState(0x6c9b, 0x3d60, 0x1560, 0xd422, 0xf3d, 0xdf83, 0x0, 0x0);
        gbc.writeMem(0x6c9b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x3d60, gbc.sp());
        EXPECT(0x6c9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0334
        gbc.setState(0x2dcd, 0x1ad4, 0xa450, 0x3b27, 0x722d, 0x3c86, 0x0, 0x0);
        gbc.writeMem(0x2dcd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x1ad4, gbc.sp());
        EXPECT(0x2dcf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0335
        gbc.setState(0x839b, 0x6b5e, 0xc7c0, 0xa6d6, 0xe8c7, 0xb98, 0x1, 0x0);
        gbc.writeMem(0x839b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x6b5e, gbc.sp());
        EXPECT(0x839d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x839b));
        EXPECT(0x25, gbc.readMem(0x839c));
        // CB 25 0336
        gbc.setState(0x3576, 0x3e41, 0xf840, 0xa223, 0xa24a, 0xda9a, 0x1, 0x0);
        gbc.writeMem(0x3576, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x3e41, gbc.sp());
        EXPECT(0x3578, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0337
        gbc.setState(0x23a, 0xda83, 0xbfb0, 0xcd3, 0xcdfc, 0x817b, 0x1, 0x1);
        gbc.writeMem(0x23a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xda83, gbc.sp());
        EXPECT(0x23c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0338
        gbc.setState(0xd826, 0x8879, 0xa060, 0x7965, 0x3eb4, 0xa371, 0x0, 0x1);
        gbc.writeMem(0xd826, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x8879, gbc.sp());
        EXPECT(0xd828, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd826));
        EXPECT(0x25, gbc.readMem(0xd827));
        // CB 25 0339
        gbc.setState(0xa85e, 0xc52e, 0x2700, 0xc8b0, 0xde5, 0xc5fb, 0x0, 0x1);
        gbc.writeMem(0xa85e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xc52e, gbc.sp());
        EXPECT(0xa860, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa85e));
        EXPECT(0x25, gbc.readMem(0xa85f));
        // CB 25 033A
        gbc.setState(0xccf9, 0xfbdf, 0x78f0, 0x4dde, 0x8da9, 0x51a2, 0x0, 0x0);
        gbc.writeMem(0xccf9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xfbdf, gbc.sp());
        EXPECT(0xccfb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccf9));
        EXPECT(0x25, gbc.readMem(0xccfa));
        // CB 25 033B
        gbc.setState(0xd4a6, 0xe0c2, 0xfb0, 0xfcd6, 0x6c4b, 0xe27c, 0x1, 0x1);
        gbc.writeMem(0xd4a6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xe0c2, gbc.sp());
        EXPECT(0xd4a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4a6));
        EXPECT(0x25, gbc.readMem(0xd4a7));
        // CB 25 033C
        gbc.setState(0x793f, 0xaf62, 0x9980, 0xaf13, 0x280f, 0x5df, 0x0, 0x1);
        gbc.writeMem(0x793f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xaf62, gbc.sp());
        EXPECT(0x7941, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 033D
        gbc.setState(0xb3ef, 0x59e5, 0xf3d0, 0x4d43, 0xac38, 0x2506, 0x1, 0x1);
        gbc.writeMem(0xb3ef, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x59e5, gbc.sp());
        EXPECT(0xb3f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3ef));
        EXPECT(0x25, gbc.readMem(0xb3f0));
        // CB 25 033E
        gbc.setState(0x8ebe, 0x13a, 0x2a50, 0xae26, 0x4bd1, 0x2cc2, 0x0, 0x0);
        gbc.writeMem(0x8ebe, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x13a, gbc.sp());
        EXPECT(0x8ec0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ebe));
        EXPECT(0x25, gbc.readMem(0x8ebf));
        // CB 25 033F
        gbc.setState(0x6158, 0x7af6, 0x1c40, 0xb1e3, 0xe093, 0x7c47, 0x1, 0x0);
        gbc.writeMem(0x6158, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x7af6, gbc.sp());
        EXPECT(0x615a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0340
        gbc.setState(0xda0e, 0xfa8e, 0x6630, 0x1f75, 0x6d5a, 0xc49a, 0x0, 0x1);
        gbc.writeMem(0xda0e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xfa8e, gbc.sp());
        EXPECT(0xda10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda0e));
        EXPECT(0x25, gbc.readMem(0xda0f));
        // CB 25 0341
        gbc.setState(0xdbf6, 0xb01a, 0x27d0, 0xc0dc, 0xd841, 0x736d, 0x0, 0x1);
        gbc.writeMem(0xdbf6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xb01a, gbc.sp());
        EXPECT(0xdbf8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbf6));
        EXPECT(0x25, gbc.readMem(0xdbf7));
        // CB 25 0342
        gbc.setState(0x4403, 0x3015, 0x6c80, 0xd83c, 0xa839, 0x6e8b, 0x1, 0x1);
        gbc.writeMem(0x4403, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x3015, gbc.sp());
        EXPECT(0x4405, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0343
        gbc.setState(0x9372, 0x83be, 0x1520, 0x2911, 0x25c9, 0x1ec1, 0x1, 0x0);
        gbc.writeMem(0x9372, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x83be, gbc.sp());
        EXPECT(0x9374, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9372));
        EXPECT(0x25, gbc.readMem(0x9373));
        // CB 25 0344
        gbc.setState(0xc245, 0xec2a, 0xc70, 0xbf8f, 0x41ea, 0x97b7, 0x1, 0x1);
        gbc.writeMem(0xc245, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xec2a, gbc.sp());
        EXPECT(0xc247, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc245));
        EXPECT(0x25, gbc.readMem(0xc246));
        // CB 25 0345
        gbc.setState(0xbf2c, 0x7bd6, 0x72e0, 0xb41b, 0xff6f, 0xd19a, 0x1, 0x0);
        gbc.writeMem(0xbf2c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x7bd6, gbc.sp());
        EXPECT(0xbf2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf2c));
        EXPECT(0x25, gbc.readMem(0xbf2d));
        // CB 25 0346
        gbc.setState(0x6ac3, 0x2413, 0xf640, 0x4742, 0x7b41, 0xad2e, 0x1, 0x1);
        gbc.writeMem(0x6ac3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x2413, gbc.sp());
        EXPECT(0x6ac5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0347
        gbc.setState(0xce08, 0x3e29, 0x6210, 0x5a26, 0xc8b1, 0x2066, 0x0, 0x1);
        gbc.writeMem(0xce08, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x3e29, gbc.sp());
        EXPECT(0xce0a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce08));
        EXPECT(0x25, gbc.readMem(0xce09));
        // CB 25 0348
        gbc.setState(0xbba6, 0xb1d7, 0x4550, 0x7772, 0x357a, 0xfb26, 0x0, 0x0);
        gbc.writeMem(0xbba6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xb1d7, gbc.sp());
        EXPECT(0xbba8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbba6));
        EXPECT(0x25, gbc.readMem(0xbba7));
        // CB 25 0349
        gbc.setState(0xc0b8, 0x2275, 0xe430, 0x901d, 0x2776, 0xd17e, 0x0, 0x0);
        gbc.writeMem(0xc0b8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x2275, gbc.sp());
        EXPECT(0xc0ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0b8));
        EXPECT(0x25, gbc.readMem(0xc0b9));
        // CB 25 034A
        gbc.setState(0x7345, 0x42dd, 0x8f60, 0xf353, 0xd6bc, 0x3343, 0x0, 0x1);
        gbc.writeMem(0x7345, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x42dd, gbc.sp());
        EXPECT(0x7347, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 034B
        gbc.setState(0x436c, 0xdc9, 0xc370, 0xbd94, 0x9d39, 0xef57, 0x1, 0x1);
        gbc.writeMem(0x436c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xdc9, gbc.sp());
        EXPECT(0x436e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 034C
        gbc.setState(0xc33, 0x8b87, 0x830, 0xd6ab, 0xe583, 0x2f14, 0x0, 0x1);
        gbc.writeMem(0xc33, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x8b87, gbc.sp());
        EXPECT(0xc35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 034D
        gbc.setState(0x9b5e, 0xdfe, 0x3d90, 0x5d8, 0x679b, 0xf42b, 0x1, 0x0);
        gbc.writeMem(0x9b5e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xdfe, gbc.sp());
        EXPECT(0x9b60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b5e));
        EXPECT(0x25, gbc.readMem(0x9b5f));
        // CB 25 034E
        gbc.setState(0x7992, 0x489e, 0xa6a0, 0xef84, 0x4d52, 0x94c2, 0x1, 0x1);
        gbc.writeMem(0x7992, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x489e, gbc.sp());
        EXPECT(0x7994, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 034F
        gbc.setState(0x4194, 0x46e3, 0xdaf0, 0xf503, 0x4871, 0x8450, 0x1, 0x0);
        gbc.writeMem(0x4194, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x46e3, gbc.sp());
        EXPECT(0x4196, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0350
        gbc.setState(0x9dbd, 0xfaaf, 0xf270, 0x2dd2, 0xbff8, 0x1642, 0x1, 0x0);
        gbc.writeMem(0x9dbd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xfaaf, gbc.sp());
        EXPECT(0x9dbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9dbd));
        EXPECT(0x25, gbc.readMem(0x9dbe));
        // CB 25 0351
        gbc.setState(0x180a, 0x4d87, 0x52f0, 0xcd, 0xf778, 0x5184, 0x0, 0x1);
        gbc.writeMem(0x180a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x4d87, gbc.sp());
        EXPECT(0x180c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0352
        gbc.setState(0x6bea, 0x19d9, 0x2720, 0x477f, 0x5b0d, 0x418f, 0x1, 0x1);
        gbc.writeMem(0x6bea, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x19d9, gbc.sp());
        EXPECT(0x6bec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0353
        gbc.setState(0x3484, 0xc956, 0xcd60, 0x86b6, 0x35f5, 0xc059, 0x1, 0x1);
        gbc.writeMem(0x3484, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xc956, gbc.sp());
        EXPECT(0x3486, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0354
        gbc.setState(0x2290, 0xe98a, 0x28c0, 0xfd52, 0x5021, 0xd707, 0x0, 0x0);
        gbc.writeMem(0x2290, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xe98a, gbc.sp());
        EXPECT(0x2292, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0355
        gbc.setState(0xdb33, 0xc9c9, 0x2f40, 0xb03e, 0xbd57, 0xcde3, 0x1, 0x1);
        gbc.writeMem(0xdb33, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xc9c9, gbc.sp());
        EXPECT(0xdb35, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb33));
        EXPECT(0x25, gbc.readMem(0xdb34));
        // CB 25 0356
        gbc.setState(0x576a, 0x6d1c, 0x7ff0, 0x3bc0, 0x19e7, 0x5390, 0x0, 0x1);
        gbc.writeMem(0x576a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x6d1c, gbc.sp());
        EXPECT(0x576c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0357
        gbc.setState(0x6d13, 0x77bf, 0x5660, 0xd816, 0x49ff, 0x3e13, 0x1, 0x1);
        gbc.writeMem(0x6d13, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x77bf, gbc.sp());
        EXPECT(0x6d15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0358
        gbc.setState(0x1754, 0x4dcc, 0xd4a0, 0x6b8a, 0x73b2, 0xf229, 0x0, 0x0);
        gbc.writeMem(0x1754, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x4dcc, gbc.sp());
        EXPECT(0x1756, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0359
        gbc.setState(0xb59c, 0x562d, 0xe160, 0xd807, 0x8252, 0xacc0, 0x0, 0x1);
        gbc.writeMem(0xb59c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x562d, gbc.sp());
        EXPECT(0xb59e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb59c));
        EXPECT(0x25, gbc.readMem(0xb59d));
        // CB 25 035A
        gbc.setState(0x6b99, 0xb2b9, 0xf210, 0xa0ae, 0x2840, 0xd27b, 0x1, 0x1);
        gbc.writeMem(0x6b99, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xb2b9, gbc.sp());
        EXPECT(0x6b9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 035B
        gbc.setState(0x5af5, 0x30ef, 0x7080, 0xdc0a, 0xfa0, 0xed77, 0x1, 0x0);
        gbc.writeMem(0x5af5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x30ef, gbc.sp());
        EXPECT(0x5af7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 035D
        gbc.setState(0xa3de, 0xaf0d, 0xe2c0, 0xc8f6, 0x4b65, 0x9207, 0x0, 0x0);
        gbc.writeMem(0xa3de, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xaf0d, gbc.sp());
        EXPECT(0xa3e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3de));
        EXPECT(0x25, gbc.readMem(0xa3df));
        // CB 25 035E
        gbc.setState(0x6121, 0x1ee0, 0xcca0, 0x20d7, 0x9672, 0x9f82, 0x0, 0x0);
        gbc.writeMem(0x6121, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x1ee0, gbc.sp());
        EXPECT(0x6123, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 035F
        gbc.setState(0xd3ae, 0x6ea5, 0xd6c0, 0x9abe, 0x880, 0xe66e, 0x1, 0x1);
        gbc.writeMem(0xd3ae, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x6ea5, gbc.sp());
        EXPECT(0xd3b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3ae));
        EXPECT(0x25, gbc.readMem(0xd3af));
        // CB 25 0360
        gbc.setState(0xc469, 0xd33b, 0xab40, 0x1b37, 0xa28c, 0x7f3a, 0x0, 0x0);
        gbc.writeMem(0xc469, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xd33b, gbc.sp());
        EXPECT(0xc46b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc469));
        EXPECT(0x25, gbc.readMem(0xc46a));
        // CB 25 0361
        gbc.setState(0xea1d, 0xb9d6, 0xef50, 0x6e66, 0xe624, 0x7a1d, 0x1, 0x0);
        gbc.writeMem(0xea1d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xb9d6, gbc.sp());
        EXPECT(0xea1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea1d));
        EXPECT(0x25, gbc.readMem(0xea1e));
        // CB 25 0362
        gbc.setState(0x280b, 0xf30, 0x5ba0, 0x771e, 0x90b0, 0x2814, 0x0, 0x1);
        gbc.writeMem(0x280b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xf30, gbc.sp());
        EXPECT(0x280d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0363
        gbc.setState(0x6ef3, 0x8e11, 0xf440, 0x6b69, 0xad9f, 0x3cc6, 0x1, 0x1);
        gbc.writeMem(0x6ef3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x8e11, gbc.sp());
        EXPECT(0x6ef5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0365
        gbc.setState(0x3117, 0x924a, 0x5c90, 0x3bd1, 0x1418, 0x9a40, 0x0, 0x0);
        gbc.writeMem(0x3117, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x924a, gbc.sp());
        EXPECT(0x3119, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0366
        gbc.setState(0x314d, 0x2b14, 0xce80, 0xa2f1, 0x7147, 0xc4f4, 0x1, 0x1);
        gbc.writeMem(0x314d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x2b14, gbc.sp());
        EXPECT(0x314f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0367
        gbc.setState(0x1840, 0xe3b8, 0xf320, 0x31b8, 0x8083, 0xa45f, 0x0, 0x0);
        gbc.writeMem(0x1840, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xe3b8, gbc.sp());
        EXPECT(0x1842, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0368
        gbc.setState(0xea7f, 0xb680, 0xcd30, 0x5863, 0xf0c3, 0x560b, 0x0, 0x0);
        gbc.writeMem(0xea7f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xb680, gbc.sp());
        EXPECT(0xea81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea7f));
        EXPECT(0x25, gbc.readMem(0xea80));
        // CB 25 0369
        gbc.setState(0xd6aa, 0x8934, 0x82e0, 0x9a78, 0xe10a, 0x5b8d, 0x1, 0x0);
        gbc.writeMem(0xd6aa, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x8934, gbc.sp());
        EXPECT(0xd6ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6aa));
        EXPECT(0x25, gbc.readMem(0xd6ab));
        // CB 25 036A
        gbc.setState(0x5202, 0x6251, 0x2630, 0xbed7, 0x9208, 0x8ffa, 0x0, 0x1);
        gbc.writeMem(0x5202, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x6251, gbc.sp());
        EXPECT(0x5204, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 036B
        gbc.setState(0x8c79, 0xc087, 0xf920, 0x56fe, 0xf131, 0x5ca4, 0x0, 0x1);
        gbc.writeMem(0x8c79, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xc087, gbc.sp());
        EXPECT(0x8c7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c79));
        EXPECT(0x25, gbc.readMem(0x8c7a));
        // CB 25 036C
        gbc.setState(0x3d10, 0x5aa5, 0x52d0, 0xcb9d, 0xe79c, 0x1ba6, 0x0, 0x1);
        gbc.writeMem(0x3d10, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x5aa5, gbc.sp());
        EXPECT(0x3d12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 036D
        gbc.setState(0x24e7, 0x6a84, 0x3c40, 0x1e6c, 0xec31, 0x2518, 0x1, 0x0);
        gbc.writeMem(0x24e7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x6a84, gbc.sp());
        EXPECT(0x24e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 036E
        gbc.setState(0xdfa5, 0x9cb0, 0xb1a0, 0x9024, 0xee45, 0x5781, 0x1, 0x0);
        gbc.writeMem(0xdfa5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x9cb0, gbc.sp());
        EXPECT(0xdfa7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfa5));
        EXPECT(0x25, gbc.readMem(0xdfa6));
        // CB 25 0370
        gbc.setState(0x14de, 0xb6c6, 0xf950, 0x41b1, 0x8078, 0x88dc, 0x1, 0x1);
        gbc.writeMem(0x14de, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xb6c6, gbc.sp());
        EXPECT(0x14e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0371
        gbc.setState(0x7b83, 0xc2e2, 0xb9c0, 0x964f, 0x14b2, 0xa6e, 0x1, 0x0);
        gbc.writeMem(0x7b83, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xc2e2, gbc.sp());
        EXPECT(0x7b85, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0372
        gbc.setState(0x4421, 0xeda7, 0x2180, 0xf05b, 0x6f6e, 0x7ab8, 0x0, 0x1);
        gbc.writeMem(0x4421, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xeda7, gbc.sp());
        EXPECT(0x4423, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0373
        gbc.setState(0x414d, 0xcc35, 0xfdf0, 0x74b8, 0xf447, 0x240f, 0x0, 0x1);
        gbc.writeMem(0x414d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xcc35, gbc.sp());
        EXPECT(0x414f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0374
        gbc.setState(0x2dc6, 0x311a, 0xacd0, 0x253b, 0x1487, 0xca18, 0x0, 0x0);
        gbc.writeMem(0x2dc6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x311a, gbc.sp());
        EXPECT(0x2dc8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0375
        gbc.setState(0x7195, 0x70f5, 0x3360, 0x46d7, 0x960f, 0xcb9b, 0x1, 0x0);
        gbc.writeMem(0x7195, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x70f5, gbc.sp());
        EXPECT(0x7197, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0376
        gbc.setState(0xce00, 0x63ff, 0x1230, 0xe07f, 0x77ce, 0x5a68, 0x1, 0x1);
        gbc.writeMem(0xce00, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x63ff, gbc.sp());
        EXPECT(0xce02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce00));
        EXPECT(0x25, gbc.readMem(0xce01));
        // CB 25 0377
        gbc.setState(0x3bdc, 0x4745, 0x5350, 0xec13, 0x2d4a, 0x9bb2, 0x0, 0x0);
        gbc.writeMem(0x3bdc, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x4745, gbc.sp());
        EXPECT(0x3bde, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0378
        gbc.setState(0x4320, 0xb364, 0xbf40, 0x86f1, 0xd627, 0xf86e, 0x0, 0x0);
        gbc.writeMem(0x4320, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xb364, gbc.sp());
        EXPECT(0x4322, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0379
        gbc.setState(0xe382, 0x91d1, 0x2c00, 0x147, 0x4f2d, 0x186d, 0x0, 0x1);
        gbc.writeMem(0xe382, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x91d1, gbc.sp());
        EXPECT(0xe384, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe382));
        EXPECT(0x25, gbc.readMem(0xe383));
        // CB 25 037A
        gbc.setState(0x8a5b, 0x3656, 0x40a0, 0xe9c1, 0xd97d, 0x3b0d, 0x1, 0x1);
        gbc.writeMem(0x8a5b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x3656, gbc.sp());
        EXPECT(0x8a5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a5b));
        EXPECT(0x25, gbc.readMem(0x8a5c));
        // CB 25 037B
        gbc.setState(0x8493, 0xed4e, 0x7290, 0x135, 0xca0b, 0xf529, 0x0, 0x1);
        gbc.writeMem(0x8493, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xed4e, gbc.sp());
        EXPECT(0x8495, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8493));
        EXPECT(0x25, gbc.readMem(0x8494));
        // CB 25 037C
        gbc.setState(0x5ea2, 0xf194, 0x7850, 0x8de7, 0x2123, 0xc252, 0x0, 0x1);
        gbc.writeMem(0x5ea2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xf194, gbc.sp());
        EXPECT(0x5ea4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 037E
        gbc.setState(0x49e2, 0x6c6a, 0x4ea0, 0x4c3a, 0x6a7d, 0xae0c, 0x0, 0x1);
        gbc.writeMem(0x49e2, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x6c6a, gbc.sp());
        EXPECT(0x49e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 037F
        gbc.setState(0x77a5, 0x30e0, 0x26d0, 0xd21d, 0x4837, 0x4741, 0x1, 0x0);
        gbc.writeMem(0x77a5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x30e0, gbc.sp());
        EXPECT(0x77a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0380
        gbc.setState(0x679a, 0x69e0, 0x2020, 0x859e, 0x8282, 0x1b56, 0x1, 0x1);
        gbc.writeMem(0x679a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x69e0, gbc.sp());
        EXPECT(0x679c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0381
        gbc.setState(0x6263, 0x6bd2, 0x37d0, 0xe0bd, 0xd64e, 0x98e4, 0x1, 0x0);
        gbc.writeMem(0x6263, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x6bd2, gbc.sp());
        EXPECT(0x6265, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0382
        gbc.setState(0x8f8e, 0xdcf8, 0xac20, 0x3bc, 0xc237, 0xd7c4, 0x0, 0x0);
        gbc.writeMem(0x8f8e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xdcf8, gbc.sp());
        EXPECT(0x8f90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f8e));
        EXPECT(0x25, gbc.readMem(0x8f8f));
        // CB 25 0383
        gbc.setState(0xa21, 0x68a4, 0xa7b0, 0x2561, 0x7581, 0x39e1, 0x1, 0x1);
        gbc.writeMem(0xa21, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x68a4, gbc.sp());
        EXPECT(0xa23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0384
        gbc.setState(0x47c7, 0x933d, 0x3610, 0x97a5, 0x8041, 0xc9cd, 0x0, 0x1);
        gbc.writeMem(0x47c7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x933d, gbc.sp());
        EXPECT(0x47c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0385
        gbc.setState(0x22c3, 0x9820, 0xbb90, 0xb5bf, 0x2753, 0x1633, 0x0, 0x1);
        gbc.writeMem(0x22c3, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x9820, gbc.sp());
        EXPECT(0x22c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0386
        gbc.setState(0x6ddf, 0xf11b, 0xa800, 0x3a99, 0x59d5, 0xae27, 0x1, 0x1);
        gbc.writeMem(0x6ddf, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xf11b, gbc.sp());
        EXPECT(0x6de1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0387
        gbc.setState(0x53a9, 0x19f8, 0x55a0, 0x829d, 0x9ae1, 0x5db3, 0x1, 0x1);
        gbc.writeMem(0x53a9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x19f8, gbc.sp());
        EXPECT(0x53ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0388
        gbc.setState(0x5c81, 0x9af5, 0xc60, 0x9afa, 0xa6b3, 0x45b3, 0x0, 0x0);
        gbc.writeMem(0x5c81, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x9af5, gbc.sp());
        EXPECT(0x5c83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0389
        gbc.setState(0x25cb, 0x12dc, 0xab00, 0x5842, 0x2427, 0x277e, 0x0, 0x1);
        gbc.writeMem(0x25cb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x12dc, gbc.sp());
        EXPECT(0x25cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 038B
        gbc.setState(0x8465, 0x5f29, 0xa120, 0xa9c3, 0xb879, 0x5dee, 0x1, 0x0);
        gbc.writeMem(0x8465, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x5f29, gbc.sp());
        EXPECT(0x8467, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8465));
        EXPECT(0x25, gbc.readMem(0x8466));
        // CB 25 038C
        gbc.setState(0x539, 0x35e4, 0x77d0, 0x98d5, 0x183, 0x5106, 0x0, 0x1);
        gbc.writeMem(0x539, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x35e4, gbc.sp());
        EXPECT(0x53b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 038D
        gbc.setState(0x9505, 0x8226, 0x1a00, 0x560, 0xf9d7, 0x4cf4, 0x0, 0x1);
        gbc.writeMem(0x9505, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x8226, gbc.sp());
        EXPECT(0x9507, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9505));
        EXPECT(0x25, gbc.readMem(0x9506));
        // CB 25 038E
        gbc.setState(0x2dd5, 0xd5b0, 0x5650, 0xacf4, 0x497f, 0x9908, 0x0, 0x0);
        gbc.writeMem(0x2dd5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xd5b0, gbc.sp());
        EXPECT(0x2dd7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 038F
        gbc.setState(0x262d, 0x8c2c, 0xb6d0, 0xec9d, 0xcc58, 0x2fb3, 0x1, 0x0);
        gbc.writeMem(0x262d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x8c2c, gbc.sp());
        EXPECT(0x262f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 0390
        gbc.setState(0x3a21, 0xc017, 0x5f00, 0x8a92, 0xd02, 0xa643, 0x1, 0x0);
        gbc.writeMem(0x3a21, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xc017, gbc.sp());
        EXPECT(0x3a23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0391
        gbc.setState(0xb600, 0x7c53, 0x22f0, 0xd5e6, 0xdb08, 0x6c29, 0x0, 0x1);
        gbc.writeMem(0xb600, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x7c53, gbc.sp());
        EXPECT(0xb602, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb600));
        EXPECT(0x25, gbc.readMem(0xb601));
        // CB 25 0392
        gbc.setState(0xebb7, 0xca58, 0x12a0, 0x6201, 0x215e, 0xa09c, 0x1, 0x1);
        gbc.writeMem(0xebb7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xca58, gbc.sp());
        EXPECT(0xebb9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebb7));
        EXPECT(0x25, gbc.readMem(0xebb8));
        // CB 25 0393
        gbc.setState(0xba4c, 0x6433, 0x6da0, 0x1854, 0x1dd1, 0x6a18, 0x1, 0x1);
        gbc.writeMem(0xba4c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x6433, gbc.sp());
        EXPECT(0xba4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba4c));
        EXPECT(0x25, gbc.readMem(0xba4d));
        // CB 25 0394
        gbc.setState(0xd126, 0xf97a, 0x1bd0, 0x4cc, 0x1fdc, 0x277f, 0x0, 0x1);
        gbc.writeMem(0xd126, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xf97a, gbc.sp());
        EXPECT(0xd128, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd126));
        EXPECT(0x25, gbc.readMem(0xd127));
        // CB 25 0395
        gbc.setState(0xd5b8, 0x3acb, 0x9790, 0xaf36, 0x182a, 0x91bc, 0x0, 0x0);
        gbc.writeMem(0xd5b8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x3acb, gbc.sp());
        EXPECT(0xd5ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5b8));
        EXPECT(0x25, gbc.readMem(0xd5b9));
        // CB 25 0396
        gbc.setState(0xcf71, 0x5a68, 0x160, 0x69df, 0x3eef, 0x7351, 0x0, 0x0);
        gbc.writeMem(0xcf71, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x5a68, gbc.sp());
        EXPECT(0xcf73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf71));
        EXPECT(0x25, gbc.readMem(0xcf72));
        // CB 25 0398
        gbc.setState(0x237d, 0x4452, 0x1820, 0xd0a0, 0x35f3, 0xfa2a, 0x1, 0x0);
        gbc.writeMem(0x237d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x4452, gbc.sp());
        EXPECT(0x237f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 0399
        gbc.setState(0x48a4, 0xffe7, 0xdf00, 0x9d87, 0x8a11, 0x2dc8, 0x0, 0x0);
        gbc.writeMem(0x48a4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xffe7, gbc.sp());
        EXPECT(0x48a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 039A
        gbc.setState(0x59d, 0x5607, 0x4e0, 0xff10, 0x4f6e, 0xbc7c, 0x1, 0x1);
        gbc.writeMem(0x59d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x5607, gbc.sp());
        EXPECT(0x59f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 039B
        gbc.setState(0xe93c, 0xf459, 0x450, 0x79b7, 0x9dff, 0xfd87, 0x0, 0x1);
        gbc.writeMem(0xe93c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xf459, gbc.sp());
        EXPECT(0xe93e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe93c));
        EXPECT(0x25, gbc.readMem(0xe93d));
        // CB 25 039C
        gbc.setState(0x9889, 0x65a0, 0xeae0, 0xaa0, 0x71e0, 0x212, 0x1, 0x0);
        gbc.writeMem(0x9889, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x65a0, gbc.sp());
        EXPECT(0x988b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9889));
        EXPECT(0x25, gbc.readMem(0x988a));
        // CB 25 039D
        gbc.setState(0x31a1, 0x449d, 0xfed0, 0x4e71, 0xe33, 0xcb1a, 0x1, 0x1);
        gbc.writeMem(0x31a1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x449d, gbc.sp());
        EXPECT(0x31a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 039E
        gbc.setState(0x114c, 0xb6ea, 0xd770, 0xfa74, 0x2378, 0x21ca, 0x1, 0x0);
        gbc.writeMem(0x114c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xb6ea, gbc.sp());
        EXPECT(0x114e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 039F
        gbc.setState(0xbc07, 0xa795, 0x4840, 0xe31a, 0x6c8, 0x5496, 0x1, 0x1);
        gbc.writeMem(0xbc07, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xa795, gbc.sp());
        EXPECT(0xbc09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc07));
        EXPECT(0x25, gbc.readMem(0xbc08));
        // CB 25 03A0
        gbc.setState(0x2107, 0xccb6, 0x4fe0, 0x7f4e, 0x2368, 0x1330, 0x1, 0x0);
        gbc.writeMem(0x2107, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xccb6, gbc.sp());
        EXPECT(0x2109, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03A1
        gbc.setState(0x7539, 0x1ec6, 0xcff0, 0xf2a2, 0x7862, 0xf7f9, 0x0, 0x1);
        gbc.writeMem(0x7539, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x1ec6, gbc.sp());
        EXPECT(0x753b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03A2
        gbc.setState(0x2c94, 0x6320, 0x1d70, 0x6d7a, 0x6375, 0x9dec, 0x0, 0x1);
        gbc.writeMem(0x2c94, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x6320, gbc.sp());
        EXPECT(0x2c96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03A3
        gbc.setState(0x6830, 0x3315, 0x8860, 0x782f, 0xff1, 0x49df, 0x0, 0x0);
        gbc.writeMem(0x6830, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x3315, gbc.sp());
        EXPECT(0x6832, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03A4
        gbc.setState(0x765a, 0x3343, 0x7d00, 0x34d6, 0xb206, 0xab7f, 0x0, 0x0);
        gbc.writeMem(0x765a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x3343, gbc.sp());
        EXPECT(0x765c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03A5
        gbc.setState(0x98df, 0xfa55, 0x5c40, 0x3729, 0xe45a, 0xf105, 0x1, 0x1);
        gbc.writeMem(0x98df, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xfa55, gbc.sp());
        EXPECT(0x98e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98df));
        EXPECT(0x25, gbc.readMem(0x98e0));
        // CB 25 03A6
        gbc.setState(0x45a9, 0x3a71, 0xc890, 0x2d97, 0xffc9, 0x1031, 0x1, 0x1);
        gbc.writeMem(0x45a9, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x3a71, gbc.sp());
        EXPECT(0x45ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03A7
        gbc.setState(0xde07, 0xb3ab, 0xcda0, 0x7656, 0xb6f3, 0x2bae, 0x0, 0x0);
        gbc.writeMem(0xde07, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xb3ab, gbc.sp());
        EXPECT(0xde09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde07));
        EXPECT(0x25, gbc.readMem(0xde08));
        // CB 25 03A8
        gbc.setState(0x99a6, 0xdfa3, 0x7a0, 0x18ef, 0x9741, 0xee6b, 0x0, 0x0);
        gbc.writeMem(0x99a6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xdfa3, gbc.sp());
        EXPECT(0x99a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99a6));
        EXPECT(0x25, gbc.readMem(0x99a7));
        // CB 25 03A9
        gbc.setState(0xb9f7, 0x2525, 0x7890, 0xb68a, 0xa8c5, 0x322c, 0x0, 0x1);
        gbc.writeMem(0xb9f7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x2525, gbc.sp());
        EXPECT(0xb9f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9f7));
        EXPECT(0x25, gbc.readMem(0xb9f8));
        // CB 25 03AA
        gbc.setState(0xa387, 0x1963, 0x9b00, 0xc6e1, 0x21c3, 0xe4c6, 0x0, 0x0);
        gbc.writeMem(0xa387, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x1963, gbc.sp());
        EXPECT(0xa389, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa387));
        EXPECT(0x25, gbc.readMem(0xa388));
        // CB 25 03AB
        gbc.setState(0xa220, 0x3cb5, 0x510, 0x3aad, 0x9e20, 0x8eed, 0x1, 0x0);
        gbc.writeMem(0xa220, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x3cb5, gbc.sp());
        EXPECT(0xa222, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa220));
        EXPECT(0x25, gbc.readMem(0xa221));
        // CB 25 03AC
        gbc.setState(0xac53, 0x242a, 0xdc90, 0x6e27, 0x5b2f, 0x3cff, 0x0, 0x1);
        gbc.writeMem(0xac53, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x242a, gbc.sp());
        EXPECT(0xac55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac53));
        EXPECT(0x25, gbc.readMem(0xac54));
        // CB 25 03AD
        gbc.setState(0xb8d4, 0xb9f0, 0x5ff0, 0x1759, 0xe57d, 0xd635, 0x0, 0x1);
        gbc.writeMem(0xb8d4, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xb9f0, gbc.sp());
        EXPECT(0xb8d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8d4));
        EXPECT(0x25, gbc.readMem(0xb8d5));
        // CB 25 03AE
        gbc.setState(0xd518, 0x9a7, 0xccc0, 0xdaa, 0xc3ba, 0xdac6, 0x1, 0x1);
        gbc.writeMem(0xd518, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x9a7, gbc.sp());
        EXPECT(0xd51a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd518));
        EXPECT(0x25, gbc.readMem(0xd519));
        // CB 25 03AF
        gbc.setState(0x23f1, 0xb029, 0x56e0, 0xea5c, 0x902e, 0x6c3, 0x1, 0x1);
        gbc.writeMem(0x23f1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xb029, gbc.sp());
        EXPECT(0x23f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03B0
        gbc.setState(0xdea1, 0x37d, 0x9f00, 0x1369, 0x60ac, 0x5106, 0x1, 0x0);
        gbc.writeMem(0xdea1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x37d, gbc.sp());
        EXPECT(0xdea3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdea1));
        EXPECT(0x25, gbc.readMem(0xdea2));
        // CB 25 03B1
        gbc.setState(0x1768, 0xe049, 0xf460, 0x4fa, 0x59c6, 0x5dcf, 0x1, 0x0);
        gbc.writeMem(0x1768, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xe049, gbc.sp());
        EXPECT(0x176a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03B2
        gbc.setState(0x3532, 0xd8f4, 0xff90, 0x8d62, 0x8890, 0xb921, 0x0, 0x1);
        gbc.writeMem(0x3532, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xd8f4, gbc.sp());
        EXPECT(0x3534, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03B3
        gbc.setState(0xb49b, 0x2506, 0xec80, 0x4284, 0xc316, 0x99b0, 0x0, 0x0);
        gbc.writeMem(0xb49b, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x2506, gbc.sp());
        EXPECT(0xb49d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb49b));
        EXPECT(0x25, gbc.readMem(0xb49c));
        // CB 25 03B4
        gbc.setState(0x39af, 0xfa2d, 0xd270, 0xdf44, 0x67dc, 0x34e2, 0x0, 0x1);
        gbc.writeMem(0x39af, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xfa2d, gbc.sp());
        EXPECT(0x39b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03B5
        gbc.setState(0x3e26, 0x4a9e, 0xc490, 0x4b8b, 0x1994, 0x9585, 0x1, 0x1);
        gbc.writeMem(0x3e26, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x4a9e, gbc.sp());
        EXPECT(0x3e28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03B6
        gbc.setState(0x4bcb, 0xba79, 0x5cb0, 0xd9b7, 0x8441, 0xe2cd, 0x1, 0x1);
        gbc.writeMem(0x4bcb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xba79, gbc.sp());
        EXPECT(0x4bcd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03B7
        gbc.setState(0x4f08, 0xd60, 0xf6d0, 0x6e36, 0x6219, 0x4e00, 0x0, 0x1);
        gbc.writeMem(0x4f08, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xd60, gbc.sp());
        EXPECT(0x4f0a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03B8
        gbc.setState(0x537e, 0xd5b1, 0xf0, 0x6e5e, 0xecbe, 0x8039, 0x1, 0x0);
        gbc.writeMem(0x537e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xd5b1, gbc.sp());
        EXPECT(0x5380, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03B9
        gbc.setState(0x1857, 0xc311, 0xe310, 0x619b, 0x5379, 0x7efc, 0x1, 0x1);
        gbc.writeMem(0x1857, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xc311, gbc.sp());
        EXPECT(0x1859, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03BA
        gbc.setState(0xe167, 0x3dba, 0xb650, 0x38ea, 0xff78, 0x37e, 0x1, 0x1);
        gbc.writeMem(0xe167, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x3dba, gbc.sp());
        EXPECT(0xe169, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe167));
        EXPECT(0x25, gbc.readMem(0xe168));
        // CB 25 03BB
        gbc.setState(0x3935, 0xaf68, 0x5e30, 0xb72a, 0x8ba8, 0xb04e, 0x0, 0x0);
        gbc.writeMem(0x3935, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xaf68, gbc.sp());
        EXPECT(0x3937, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03BC
        gbc.setState(0x3746, 0xa2c4, 0xf90, 0x125f, 0xd47f, 0x6576, 0x0, 0x1);
        gbc.writeMem(0x3746, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xa2c4, gbc.sp());
        EXPECT(0x3748, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03BD
        gbc.setState(0x32ad, 0xe19b, 0xc850, 0xa724, 0x332f, 0xeb3c, 0x0, 0x1);
        gbc.writeMem(0x32ad, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xe19b, gbc.sp());
        EXPECT(0x32af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03BE
        gbc.setState(0x133d, 0x9313, 0x3ab0, 0x176a, 0x7d7b, 0x7c66, 0x0, 0x0);
        gbc.writeMem(0x133d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x9313, gbc.sp());
        EXPECT(0x133f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03BF
        gbc.setState(0x2b5e, 0x4a69, 0xa440, 0xe69, 0x636d, 0x57e2, 0x0, 0x1);
        gbc.writeMem(0x2b5e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x4a69, gbc.sp());
        EXPECT(0x2b60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03C0
        gbc.setState(0x9e9c, 0xbf2f, 0x4720, 0x9f6a, 0x61c6, 0xec7e, 0x0, 0x0);
        gbc.writeMem(0x9e9c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xbf2f, gbc.sp());
        EXPECT(0x9e9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e9c));
        EXPECT(0x25, gbc.readMem(0x9e9d));
        // CB 25 03C1
        gbc.setState(0xd913, 0xe79b, 0x19f0, 0x948a, 0x4e2e, 0xf592, 0x0, 0x0);
        gbc.writeMem(0xd913, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xe79b, gbc.sp());
        EXPECT(0xd915, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd913));
        EXPECT(0x25, gbc.readMem(0xd914));
        // CB 25 03C2
        gbc.setState(0x51f7, 0xa2b3, 0xa840, 0x37a4, 0x4b80, 0xbd48, 0x0, 0x0);
        gbc.writeMem(0x51f7, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xa2b3, gbc.sp());
        EXPECT(0x51f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03C3
        gbc.setState(0xa465, 0xd1ff, 0x2c00, 0xe2b2, 0xec29, 0x85eb, 0x0, 0x1);
        gbc.writeMem(0xa465, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xd1ff, gbc.sp());
        EXPECT(0xa467, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa465));
        EXPECT(0x25, gbc.readMem(0xa466));
        // CB 25 03C4
        gbc.setState(0x5495, 0x957, 0x6d30, 0xfb53, 0x2057, 0x7a4f, 0x1, 0x0);
        gbc.writeMem(0x5495, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x957, gbc.sp());
        EXPECT(0x5497, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03C5
        gbc.setState(0x6dcb, 0x4979, 0x48c0, 0xef02, 0xcd78, 0xd9f8, 0x0, 0x1);
        gbc.writeMem(0x6dcb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x4979, gbc.sp());
        EXPECT(0x6dcd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03C7
        gbc.setState(0xa15a, 0x5b4a, 0xee80, 0x3076, 0x8506, 0xb696, 0x1, 0x1);
        gbc.writeMem(0xa15a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x5b4a, gbc.sp());
        EXPECT(0xa15c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa15a));
        EXPECT(0x25, gbc.readMem(0xa15b));
        // CB 25 03C8
        gbc.setState(0x59d5, 0x6a01, 0x4b00, 0x2f1b, 0x3913, 0x8bf, 0x1, 0x1);
        gbc.writeMem(0x59d5, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x6a01, gbc.sp());
        EXPECT(0x59d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03C9
        gbc.setState(0xdc47, 0x6ad, 0xdb30, 0xad3f, 0x4d91, 0x4114, 0x0, 0x0);
        gbc.writeMem(0xdc47, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x6ad, gbc.sp());
        EXPECT(0xdc49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc47));
        EXPECT(0x25, gbc.readMem(0xdc48));
        // CB 25 03CA
        gbc.setState(0xdee8, 0x1946, 0xe1d0, 0x66dc, 0x22af, 0x6afa, 0x1, 0x1);
        gbc.writeMem(0xdee8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x1946, gbc.sp());
        EXPECT(0xdeea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdee8));
        EXPECT(0x25, gbc.readMem(0xdee9));
        // CB 25 03CB
        gbc.setState(0xbe2f, 0x6493, 0x73f0, 0xe7a9, 0x9893, 0x1af9, 0x1, 0x0);
        gbc.writeMem(0xbe2f, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x6493, gbc.sp());
        EXPECT(0xbe31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe2f));
        EXPECT(0x25, gbc.readMem(0xbe30));
        // CB 25 03CC
        gbc.setState(0x8c78, 0xc3f6, 0xf490, 0xd066, 0x9d13, 0x84eb, 0x0, 0x1);
        gbc.writeMem(0x8c78, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xc3f6, gbc.sp());
        EXPECT(0x8c7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c78));
        EXPECT(0x25, gbc.readMem(0x8c79));
        // CB 25 03CD
        gbc.setState(0xa70d, 0xf518, 0xcc70, 0x211d, 0xeba6, 0xa272, 0x1, 0x0);
        gbc.writeMem(0xa70d, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xf518, gbc.sp());
        EXPECT(0xa70f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa70d));
        EXPECT(0x25, gbc.readMem(0xa70e));
        // CB 25 03CE
        gbc.setState(0x3eb, 0xe7d5, 0x9240, 0x6453, 0x57a2, 0xe593, 0x0, 0x0);
        gbc.writeMem(0x3eb, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xe7d5, gbc.sp());
        EXPECT(0x3ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03CF
        gbc.setState(0xa605, 0x76e1, 0x32f0, 0x6e02, 0x4850, 0x45ce, 0x0, 0x0);
        gbc.writeMem(0xa605, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x76e1, gbc.sp());
        EXPECT(0xa607, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa605));
        EXPECT(0x25, gbc.readMem(0xa606));
        // CB 25 03D0
        gbc.setState(0x805a, 0xcd34, 0xbb40, 0x995b, 0xdcc5, 0x5e45, 0x0, 0x1);
        gbc.writeMem(0x805a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xcd34, gbc.sp());
        EXPECT(0x805c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x805a));
        EXPECT(0x25, gbc.readMem(0x805b));
        // CB 25 03D1
        gbc.setState(0x7f93, 0x7aab, 0x3ac0, 0x2c21, 0x45d6, 0xb038, 0x0, 0x1);
        gbc.writeMem(0x7f93, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x7aab, gbc.sp());
        EXPECT(0x7f95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03D2
        gbc.setState(0x564c, 0xb4bb, 0x4ca0, 0xf188, 0x1602, 0x5347, 0x0, 0x0);
        gbc.writeMem(0x564c, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xb4bb, gbc.sp());
        EXPECT(0x564e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03D3
        gbc.setState(0x8efa, 0x67ba, 0x3490, 0xb7b4, 0xea56, 0xae7c, 0x0, 0x1);
        gbc.writeMem(0x8efa, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x67ba, gbc.sp());
        EXPECT(0x8efc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8efa));
        EXPECT(0x25, gbc.readMem(0x8efb));
        // CB 25 03D4
        gbc.setState(0xdd38, 0x3dd7, 0xb3e0, 0x7f86, 0x6048, 0x954f, 0x1, 0x1);
        gbc.writeMem(0xdd38, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x3dd7, gbc.sp());
        EXPECT(0xdd3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd38));
        EXPECT(0x25, gbc.readMem(0xdd39));
        // CB 25 03D5
        gbc.setState(0x9651, 0x8467, 0xeed0, 0x5296, 0x762, 0x4eea, 0x0, 0x1);
        gbc.writeMem(0x9651, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x8467, gbc.sp());
        EXPECT(0x9653, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9651));
        EXPECT(0x25, gbc.readMem(0x9652));
        // CB 25 03D6
        gbc.setState(0x416a, 0x7c48, 0x5c40, 0xbe1a, 0xa654, 0x1835, 0x0, 0x0);
        gbc.writeMem(0x416a, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x7c48, gbc.sp());
        EXPECT(0x416c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03D7
        gbc.setState(0xd29, 0x56d7, 0xad20, 0x44b7, 0x3b26, 0x9cf0, 0x0, 0x0);
        gbc.writeMem(0xd29, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x56d7, gbc.sp());
        EXPECT(0xd2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03D8
        gbc.setState(0x19af, 0xc046, 0x2f20, 0xb46f, 0x657f, 0x3b74, 0x0, 0x0);
        gbc.writeMem(0x19af, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xc046, gbc.sp());
        EXPECT(0x19b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03D9
        gbc.setState(0x91d1, 0xcfc, 0x920, 0x57a3, 0x1b99, 0xbcde, 0x1, 0x0);
        gbc.writeMem(0x91d1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xcfc, gbc.sp());
        EXPECT(0x91d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91d1));
        EXPECT(0x25, gbc.readMem(0x91d2));
        // CB 25 03DA
        gbc.setState(0x8e43, 0xae34, 0x4730, 0x12d1, 0xf3fc, 0x7c18, 0x0, 0x0);
        gbc.writeMem(0x8e43, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xae34, gbc.sp());
        EXPECT(0x8e45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e43));
        EXPECT(0x25, gbc.readMem(0x8e44));
        // CB 25 03DB
        gbc.setState(0xc8e8, 0x5749, 0xb5c0, 0xb0a9, 0xb84c, 0xae56, 0x0, 0x0);
        gbc.writeMem(0xc8e8, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x5749, gbc.sp());
        EXPECT(0xc8ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8e8));
        EXPECT(0x25, gbc.readMem(0xc8e9));
        // CB 25 03DC
        gbc.setState(0xb800, 0x4d14, 0xb2a0, 0xbe57, 0x60e0, 0xe899, 0x0, 0x1);
        gbc.writeMem(0xb800, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x4d14, gbc.sp());
        EXPECT(0xb802, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb800));
        EXPECT(0x25, gbc.readMem(0xb801));
        // CB 25 03DD
        gbc.setState(0x1e84, 0x5324, 0x20d0, 0x8d5e, 0xd791, 0x36f1, 0x1, 0x0);
        gbc.writeMem(0x1e84, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x5324, gbc.sp());
        EXPECT(0x1e86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03DE
        gbc.setState(0xd216, 0x9614, 0x52c0, 0xd6d9, 0x64f2, 0xd08, 0x0, 0x1);
        gbc.writeMem(0xd216, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x9614, gbc.sp());
        EXPECT(0xd218, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd216));
        EXPECT(0x25, gbc.readMem(0xd217));
        // CB 25 03DF
        gbc.setState(0xebd, 0xe34e, 0x1160, 0x67cc, 0xc616, 0xc4c2, 0x1, 0x0);
        gbc.writeMem(0xebd, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xe34e, gbc.sp());
        EXPECT(0xebf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 25 03E0
        gbc.setState(0x683e, 0x91f8, 0x8e40, 0x5da, 0x6c21, 0x967b, 0x1, 0x0);
        gbc.writeMem(0x683e, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x91f8, gbc.sp());
        EXPECT(0x6840, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03E1
        gbc.setState(0x8a46, 0x977, 0xd0a0, 0xf272, 0x7d0, 0xddca, 0x0, 0x1);
        gbc.writeMem(0x8a46, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x977, gbc.sp());
        EXPECT(0x8a48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a46));
        EXPECT(0x25, gbc.readMem(0x8a47));
        // CB 25 03E2
        gbc.setState(0x96f0, 0x3b8d, 0x7050, 0xf7e2, 0xb63f, 0xda3, 0x1, 0x0);
        gbc.writeMem(0x96f0, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x3b8d, gbc.sp());
        EXPECT(0x96f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96f0));
        EXPECT(0x25, gbc.readMem(0x96f1));
        // CB 25 03E3
        gbc.setState(0x1864, 0x1a04, 0xad40, 0x9af2, 0x9ae, 0xbf6d, 0x1, 0x0);
        gbc.writeMem(0x1864, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x1a04, gbc.sp());
        EXPECT(0x1866, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03E4
        gbc.setState(0xd156, 0x3059, 0xe4f0, 0x759d, 0xd6b5, 0x7034, 0x0, 0x1);
        gbc.writeMem(0xd156, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x3059, gbc.sp());
        EXPECT(0xd158, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd156));
        EXPECT(0x25, gbc.readMem(0xd157));
        // CB 25 03E5
        gbc.setState(0x43d6, 0x59f, 0x29a0, 0xb710, 0xa997, 0xfc45, 0x1, 0x0);
        gbc.writeMem(0x43d6, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x59f, gbc.sp());
        EXPECT(0x43d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 25 03E6
        gbc.setState(0x8885, 0x15b0, 0xf790, 0x4629, 0x6728, 0xd825, 0x0, 0x1);
        gbc.writeMem(0x8885, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x15b0, gbc.sp());
        EXPECT(0x8887, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8885));
        EXPECT(0x25, gbc.readMem(0x8886));
        // CB 25 03E7
        gbc.setState(0x39a1, 0x919f, 0xbc10, 0xe0d2, 0xa44e, 0xf9fb, 0x1, 0x0);
        gbc.writeMem(0x39a1, { 0xcb, 0x25 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x919f, gbc.sp());
        EXPECT(0x39a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
    }
