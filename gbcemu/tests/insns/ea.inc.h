    TEST(gbcemu, opcode_ea) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // EA 0004
        gbc.setState(0xcbe5, 0x23dc, 0xabf0, 0xf9f9, 0x4ae, 0x7857, 0x1, 0x1);
        gbc.writeMem(0x9b60, { 0x0 });
        gbc.writeMem(0xcbe5, { 0xea, 0x60, 0x9b });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x23dc, gbc.sp());
        EXPECT(0xcbe8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xab, gbc.readMem(0x9b60));
        EXPECT(0xea, gbc.readMem(0xcbe5));
        EXPECT(0x60, gbc.readMem(0xcbe6));
        EXPECT(0x9b, gbc.readMem(0xcbe7));
        // EA 0005
        gbc.setState(0x902f, 0x3d75, 0xf520, 0xa76a, 0x44ff, 0x9eca, 0x0, 0x0);
        gbc.writeMem(0x902f, { 0xea, 0xb6, 0xf4 });
        gbc.writeMem(0xf4b6, { 0x0 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x3d75, gbc.sp());
        EXPECT(0x9032, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x902f));
        EXPECT(0xb6, gbc.readMem(0x9030));
        EXPECT(0xf4, gbc.readMem(0x9031));
        EXPECT(0xf5, gbc.readMem(0xf4b6));
        // EA 000A
        gbc.setState(0x6564, 0x533, 0xd080, 0xe67b, 0x19ef, 0x9939, 0x0, 0x1);
        gbc.writeMem(0x6564, { 0xea, 0x5b, 0x9b });
        gbc.writeMem(0x9b5b, { 0x0 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x533, gbc.sp());
        EXPECT(0x6567, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd0, gbc.readMem(0x9b5b));
        // EA 000B
        gbc.setState(0x25f8, 0xb923, 0xb1b0, 0xd2fb, 0x6f19, 0x58f6, 0x0, 0x1);
        gbc.writeMem(0x25f8, { 0xea, 0xb2, 0xc7 });
        gbc.writeMem(0xc7b2, { 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xb923, gbc.sp());
        EXPECT(0x25fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb1, gbc.readMem(0xc7b2));
        // EA 000C
        gbc.setState(0x611b, 0x7de, 0x3130, 0xca35, 0x5fe7, 0x873d, 0x1, 0x0);
        gbc.writeMem(0x611b, { 0xea, 0x1d, 0xde });
        gbc.writeMem(0xde1d, { 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x7de, gbc.sp());
        EXPECT(0x611e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x31, gbc.readMem(0xde1d));
        // EA 0012
        gbc.setState(0x16d9, 0xc9d8, 0x8710, 0xc8ad, 0xd0d8, 0xa826, 0x0, 0x1);
        gbc.writeMem(0x16d9, { 0xea, 0x6f, 0xfe });
        gbc.writeMem(0xfe6f, { 0x0 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xc9d8, gbc.sp());
        EXPECT(0x16dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x87, gbc.readMem(0xfe6f));
        // EA 0013
        gbc.setState(0xa8b0, 0xd7dc, 0xe210, 0x9e16, 0x93a0, 0xee89, 0x1, 0x0);
        gbc.writeMem(0xa8b0, { 0xea, 0x6e, 0xeb });
        gbc.writeMem(0xeb6e, { 0x0 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xd7dc, gbc.sp());
        EXPECT(0xa8b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa8b0));
        EXPECT(0x6e, gbc.readMem(0xa8b1));
        EXPECT(0xeb, gbc.readMem(0xa8b2));
        EXPECT(0xe2, gbc.readMem(0xeb6e));
        // EA 0016
        gbc.setState(0xb429, 0xd98d, 0x2950, 0x2c6d, 0x101a, 0xada3, 0x0, 0x0);
        gbc.writeMem(0x84b7, { 0x0 });
        gbc.writeMem(0xb429, { 0xea, 0xb7, 0x84 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xd98d, gbc.sp());
        EXPECT(0xb42c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x29, gbc.readMem(0x84b7));
        EXPECT(0xea, gbc.readMem(0xb429));
        EXPECT(0xb7, gbc.readMem(0xb42a));
        EXPECT(0x84, gbc.readMem(0xb42b));
        // EA 0018
        gbc.setState(0x663b, 0x109f, 0x6750, 0xe6c3, 0x79, 0x3be, 0x1, 0x1);
        gbc.writeMem(0x663b, { 0xea, 0xb5, 0x97 });
        gbc.writeMem(0x97b5, { 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x109f, gbc.sp());
        EXPECT(0x663e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x67, gbc.readMem(0x97b5));
        // EA 001B
        gbc.setState(0xb6f, 0x873c, 0x7b50, 0xc14e, 0x8f0f, 0xdbee, 0x1, 0x0);
        gbc.writeMem(0xb6f, { 0xea, 0x1c, 0x9a });
        gbc.writeMem(0x9a1c, { 0x0 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x873c, gbc.sp());
        EXPECT(0xb72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7b, gbc.readMem(0x9a1c));
        // EA 001D
        gbc.setState(0x3d08, 0xd1bb, 0xbd30, 0x2db1, 0xec85, 0xd9e9, 0x1, 0x1);
        gbc.writeMem(0x3d08, { 0xea, 0xfa, 0x95 });
        gbc.writeMem(0x95fa, { 0x0 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xd1bb, gbc.sp());
        EXPECT(0x3d0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbd, gbc.readMem(0x95fa));
        // EA 001E
        gbc.setState(0x30df, 0xeb7b, 0xe970, 0x9869, 0x45bc, 0x9867, 0x1, 0x1);
        gbc.writeMem(0x30df, { 0xea, 0x70, 0xfa });
        gbc.writeMem(0xfa70, { 0x0 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xeb7b, gbc.sp());
        EXPECT(0x30e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe9, gbc.readMem(0xfa70));
        // EA 0020
        gbc.setState(0x78e7, 0x7982, 0x11e0, 0xd9b8, 0x6ad6, 0xed89, 0x1, 0x1);
        gbc.writeMem(0x78e7, { 0xea, 0x4f, 0xae });
        gbc.writeMem(0xae4f, { 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x7982, gbc.sp());
        EXPECT(0x78ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x11, gbc.readMem(0xae4f));
        // EA 0021
        gbc.setState(0x1bc0, 0xdc43, 0x4f00, 0x1a78, 0xab30, 0x62de, 0x0, 0x0);
        gbc.writeMem(0x1bc0, { 0xea, 0x3d, 0xc4 });
        gbc.writeMem(0xc43d, { 0x0 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xdc43, gbc.sp());
        EXPECT(0x1bc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4f, gbc.readMem(0xc43d));
        // EA 0022
        gbc.setState(0x36ee, 0x9c5, 0xd100, 0xe82, 0x2802, 0xf12f, 0x0, 0x1);
        gbc.writeMem(0x36ee, { 0xea, 0xc6, 0xc9 });
        gbc.writeMem(0xc9c6, { 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x9c5, gbc.sp());
        EXPECT(0x36f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd1, gbc.readMem(0xc9c6));
        // EA 0023
        gbc.setState(0x70fc, 0xecff, 0xa9e0, 0x44f0, 0x5f1a, 0x8a26, 0x0, 0x0);
        gbc.writeMem(0x70fc, { 0xea, 0x77, 0xdb });
        gbc.writeMem(0xdb77, { 0x0 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xecff, gbc.sp());
        EXPECT(0x70ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa9, gbc.readMem(0xdb77));
        // EA 0026
        gbc.setState(0x624c, 0x22c, 0xe340, 0xe14b, 0xf428, 0x96f2, 0x1, 0x1);
        gbc.writeMem(0x624c, { 0xea, 0x69, 0xd8 });
        gbc.writeMem(0xd869, { 0x0 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x22c, gbc.sp());
        EXPECT(0x624f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe3, gbc.readMem(0xd869));
        // EA 0027
        gbc.setState(0x69b3, 0x1178, 0x64e0, 0x2bec, 0x4e9a, 0x5583, 0x1, 0x1);
        gbc.writeMem(0x69b3, { 0xea, 0x5c, 0x9d });
        gbc.writeMem(0x9d5c, { 0x0 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x1178, gbc.sp());
        EXPECT(0x69b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x64, gbc.readMem(0x9d5c));
        // EA 002A
        gbc.setState(0x2c4b, 0x9e4b, 0xff50, 0x6fe4, 0x20b4, 0x972, 0x1, 0x0);
        gbc.writeMem(0x2c4b, { 0xea, 0x91, 0x8f });
        gbc.writeMem(0x8f91, { 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x9e4b, gbc.sp());
        EXPECT(0x2c4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xff, gbc.readMem(0x8f91));
        // EA 002C
        gbc.setState(0xb894, 0x112d, 0x2790, 0x4c59, 0x88c0, 0x8e11, 0x0, 0x0);
        gbc.writeMem(0x9958, { 0x0 });
        gbc.writeMem(0xb894, { 0xea, 0x58, 0x99 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x112d, gbc.sp());
        EXPECT(0xb897, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x27, gbc.readMem(0x9958));
        EXPECT(0xea, gbc.readMem(0xb894));
        EXPECT(0x58, gbc.readMem(0xb895));
        EXPECT(0x99, gbc.readMem(0xb896));
        // EA 002D
        gbc.setState(0x8625, 0xfd2a, 0x2820, 0xb678, 0x6381, 0x7664, 0x0, 0x0);
        gbc.writeMem(0x8625, { 0xea, 0x69, 0x92 });
        gbc.writeMem(0x9269, { 0x0 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xfd2a, gbc.sp());
        EXPECT(0x8628, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8625));
        EXPECT(0x69, gbc.readMem(0x8626));
        EXPECT(0x92, gbc.readMem(0x8627));
        EXPECT(0x28, gbc.readMem(0x9269));
        // EA 002E
        gbc.setState(0xe2e6, 0x7f5d, 0xd6b0, 0x3517, 0x4392, 0x6476, 0x1, 0x0);
        gbc.writeMem(0xc2bb, { 0x0 });
        gbc.writeMem(0xe2e6, { 0xea, 0xbb, 0xc2 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x7f5d, gbc.sp());
        EXPECT(0xe2e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0xc2bb));
        EXPECT(0xea, gbc.readMem(0xe2e6));
        EXPECT(0xbb, gbc.readMem(0xe2e7));
        EXPECT(0xc2, gbc.readMem(0xe2e8));
        // EA 0030
        gbc.setState(0x3544, 0x5b95, 0x2fc0, 0xbb79, 0x6c53, 0xa13b, 0x0, 0x1);
        gbc.writeMem(0x3544, { 0xea, 0x54, 0xe1 });
        gbc.writeMem(0xe154, { 0x0 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x5b95, gbc.sp());
        EXPECT(0x3547, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2f, gbc.readMem(0xe154));
        // EA 0033
        gbc.setState(0x85f4, 0xa3ba, 0x42a0, 0x30a, 0x8af1, 0xbfe1, 0x1, 0x1);
        gbc.writeMem(0x85f4, { 0xea, 0xce, 0xfe });
        gbc.writeMem(0xfece, { 0x0 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xa3ba, gbc.sp());
        EXPECT(0x85f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x85f4));
        EXPECT(0xce, gbc.readMem(0x85f5));
        EXPECT(0xfe, gbc.readMem(0x85f6));
        EXPECT(0x42, gbc.readMem(0xfece));
        // EA 0039
        gbc.setState(0x4ac9, 0xeedf, 0xff40, 0xf3fd, 0xcc59, 0xb515, 0x0, 0x1);
        gbc.writeMem(0x4ac9, { 0xea, 0x46, 0xa8 });
        gbc.writeMem(0xa846, { 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xeedf, gbc.sp());
        EXPECT(0x4acc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xff, gbc.readMem(0xa846));
        // EA 0040
        gbc.setState(0x9a75, 0x5aca, 0xde0, 0xa24f, 0xee, 0x78e, 0x0, 0x0);
        gbc.writeMem(0x9a75, { 0xea, 0xa3, 0xd1 });
        gbc.writeMem(0xd1a3, { 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x5aca, gbc.sp());
        EXPECT(0x9a78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9a75));
        EXPECT(0xa3, gbc.readMem(0x9a76));
        EXPECT(0xd1, gbc.readMem(0x9a77));
        EXPECT(0xd, gbc.readMem(0xd1a3));
        // EA 0042
        gbc.setState(0xc298, 0x7b7a, 0x95d0, 0x57a0, 0x1ec9, 0x5f9, 0x1, 0x1);
        gbc.writeMem(0xb423, { 0x0 });
        gbc.writeMem(0xc298, { 0xea, 0x23, 0xb4 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x7b7a, gbc.sp());
        EXPECT(0xc29b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x95, gbc.readMem(0xb423));
        EXPECT(0xea, gbc.readMem(0xc298));
        EXPECT(0x23, gbc.readMem(0xc299));
        EXPECT(0xb4, gbc.readMem(0xc29a));
        // EA 0048
        gbc.setState(0x7ad1, 0xe350, 0x9de0, 0x75e0, 0x585, 0x5994, 0x0, 0x0);
        gbc.writeMem(0x7ad1, { 0xea, 0x7e, 0xb1 });
        gbc.writeMem(0xb17e, { 0x0 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xe350, gbc.sp());
        EXPECT(0x7ad4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9d, gbc.readMem(0xb17e));
        // EA 004B
        gbc.setState(0xaebd, 0x7974, 0xcb90, 0x98aa, 0x5cea, 0xf817, 0x1, 0x1);
        gbc.writeMem(0xaebd, { 0xea, 0x63, 0xbd });
        gbc.writeMem(0xbd63, { 0x0 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x7974, gbc.sp());
        EXPECT(0xaec0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xaebd));
        EXPECT(0x63, gbc.readMem(0xaebe));
        EXPECT(0xbd, gbc.readMem(0xaebf));
        EXPECT(0xcb, gbc.readMem(0xbd63));
        // EA 004C
        gbc.setState(0x1457, 0xd95e, 0xc410, 0x5fc7, 0xf320, 0x94a1, 0x1, 0x0);
        gbc.writeMem(0x1457, { 0xea, 0x65, 0x9a });
        gbc.writeMem(0x9a65, { 0x0 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xd95e, gbc.sp());
        EXPECT(0x145a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0x9a65));
        // EA 004F
        gbc.setState(0xc56d, 0x79d3, 0xdf10, 0xb6e7, 0x2572, 0xb12d, 0x1, 0x1);
        gbc.writeMem(0xc56d, { 0xea, 0xd1, 0xf0 });
        gbc.writeMem(0xf0d1, { 0x0 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x79d3, gbc.sp());
        EXPECT(0xc570, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc56d));
        EXPECT(0xd1, gbc.readMem(0xc56e));
        EXPECT(0xf0, gbc.readMem(0xc56f));
        EXPECT(0xdf, gbc.readMem(0xf0d1));
        // EA 0050
        gbc.setState(0x5309, 0x46da, 0x200, 0x4a38, 0xde1c, 0x3ffb, 0x0, 0x0);
        gbc.writeMem(0x5309, { 0xea, 0x44, 0xef });
        gbc.writeMem(0xef44, { 0x0 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x46da, gbc.sp());
        EXPECT(0x530c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2, gbc.readMem(0xef44));
        // EA 0051
        gbc.setState(0xcc7c, 0x2d31, 0xa340, 0x41eb, 0xb3b2, 0x4613, 0x0, 0x0);
        gbc.writeMem(0xcc7c, { 0xea, 0x5f, 0xef });
        gbc.writeMem(0xef5f, { 0x0 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x2d31, gbc.sp());
        EXPECT(0xcc7f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xcc7c));
        EXPECT(0x5f, gbc.readMem(0xcc7d));
        EXPECT(0xef, gbc.readMem(0xcc7e));
        EXPECT(0xa3, gbc.readMem(0xef5f));
        // EA 0055
        gbc.setState(0x5612, 0xbeea, 0x87d0, 0xea57, 0x925e, 0xb713, 0x0, 0x0);
        gbc.writeMem(0x5612, { 0xea, 0x97, 0xa3 });
        gbc.writeMem(0xa397, { 0x0 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xbeea, gbc.sp());
        EXPECT(0x5615, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x87, gbc.readMem(0xa397));
        // EA 005B
        gbc.setState(0x178a, 0xe39c, 0x57f0, 0xf923, 0x769d, 0x8da6, 0x0, 0x1);
        gbc.writeMem(0x178a, { 0xea, 0xc2, 0x83 });
        gbc.writeMem(0x83c2, { 0x0 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xe39c, gbc.sp());
        EXPECT(0x178d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x57, gbc.readMem(0x83c2));
        // EA 005E
        gbc.setState(0x1cf5, 0xa35c, 0x93e0, 0xed2d, 0x35bf, 0x6f2d, 0x0, 0x0);
        gbc.writeMem(0x1cf5, { 0xea, 0xd3, 0xdd });
        gbc.writeMem(0xddd3, { 0x0 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xa35c, gbc.sp());
        EXPECT(0x1cf8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x93, gbc.readMem(0xddd3));
        // EA 005F
        gbc.setState(0xb026, 0x6d56, 0x3ed0, 0xabb7, 0x21df, 0x14b7, 0x1, 0x1);
        gbc.writeMem(0x911d, { 0x0 });
        gbc.writeMem(0xb026, { 0xea, 0x1d, 0x91 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x6d56, gbc.sp());
        EXPECT(0xb029, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0x911d));
        EXPECT(0xea, gbc.readMem(0xb026));
        EXPECT(0x1d, gbc.readMem(0xb027));
        EXPECT(0x91, gbc.readMem(0xb028));
        // EA 0060
        gbc.setState(0x9703, 0x5fd0, 0xd940, 0xcb7a, 0xb106, 0x3c8, 0x1, 0x0);
        gbc.writeMem(0x9703, { 0xea, 0x7c, 0xd9 });
        gbc.writeMem(0xd97c, { 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x5fd0, gbc.sp());
        EXPECT(0x9706, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9703));
        EXPECT(0x7c, gbc.readMem(0x9704));
        EXPECT(0xd9, gbc.readMem(0x9705));
        EXPECT(0xd9, gbc.readMem(0xd97c));
        // EA 0063
        gbc.setState(0xb873, 0xddba, 0xcad0, 0x756a, 0x9183, 0xe1, 0x0, 0x0);
        gbc.writeMem(0xb228, { 0x0 });
        gbc.writeMem(0xb873, { 0xea, 0x28, 0xb2 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xddba, gbc.sp());
        EXPECT(0xb876, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0xb228));
        EXPECT(0xea, gbc.readMem(0xb873));
        EXPECT(0x28, gbc.readMem(0xb874));
        EXPECT(0xb2, gbc.readMem(0xb875));
        // EA 0066
        gbc.setState(0xad1b, 0x9bf4, 0x8c00, 0xedfe, 0x68aa, 0xc90a, 0x1, 0x0);
        gbc.writeMem(0xad1b, { 0xea, 0xcb, 0xd6 });
        gbc.writeMem(0xd6cb, { 0x0 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x9bf4, gbc.sp());
        EXPECT(0xad1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xad1b));
        EXPECT(0xcb, gbc.readMem(0xad1c));
        EXPECT(0xd6, gbc.readMem(0xad1d));
        EXPECT(0x8c, gbc.readMem(0xd6cb));
        // EA 0067
        gbc.setState(0xbdb2, 0x4a9e, 0x12a0, 0x2722, 0x68c1, 0xa7bd, 0x0, 0x1);
        gbc.writeMem(0xbdb2, { 0xea, 0x19, 0xe8 });
        gbc.writeMem(0xe819, { 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x4a9e, gbc.sp());
        EXPECT(0xbdb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xbdb2));
        EXPECT(0x19, gbc.readMem(0xbdb3));
        EXPECT(0xe8, gbc.readMem(0xbdb4));
        EXPECT(0x12, gbc.readMem(0xe819));
        // EA 0068
        gbc.setState(0x37e6, 0x2fd3, 0x2010, 0xd6df, 0x2ee2, 0xb9a2, 0x1, 0x0);
        gbc.writeMem(0x37e6, { 0xea, 0x89, 0xf0 });
        gbc.writeMem(0xf089, { 0x0 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x2fd3, gbc.sp());
        EXPECT(0x37e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x20, gbc.readMem(0xf089));
        // EA 0069
        gbc.setState(0xa8c3, 0x5509, 0x46c0, 0xe4ee, 0xd036, 0xdbbd, 0x1, 0x1);
        gbc.writeMem(0xa8c3, { 0xea, 0x73, 0xb2 });
        gbc.writeMem(0xb273, { 0x0 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x5509, gbc.sp());
        EXPECT(0xa8c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa8c3));
        EXPECT(0x73, gbc.readMem(0xa8c4));
        EXPECT(0xb2, gbc.readMem(0xa8c5));
        EXPECT(0x46, gbc.readMem(0xb273));
        // EA 006D
        gbc.setState(0x84bd, 0xffd0, 0x2c0, 0x130c, 0x796b, 0xc071, 0x0, 0x0);
        gbc.writeMem(0x84bd, { 0xea, 0x6a, 0xb0 });
        gbc.writeMem(0xb06a, { 0x0 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xffd0, gbc.sp());
        EXPECT(0x84c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x84bd));
        EXPECT(0x6a, gbc.readMem(0x84be));
        EXPECT(0xb0, gbc.readMem(0x84bf));
        EXPECT(0x2, gbc.readMem(0xb06a));
        // EA 006E
        gbc.setState(0x1b67, 0x36b6, 0x56a0, 0xeddd, 0xd260, 0xcd91, 0x1, 0x0);
        gbc.writeMem(0x1b67, { 0xea, 0x53, 0x91 });
        gbc.writeMem(0x9153, { 0x0 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x36b6, gbc.sp());
        EXPECT(0x1b6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x56, gbc.readMem(0x9153));
        // EA 006F
        gbc.setState(0xd26b, 0xde9c, 0xb340, 0xb3d6, 0x7916, 0x47dd, 0x1, 0x0);
        gbc.writeMem(0xd26b, { 0xea, 0xd0, 0xe7 });
        gbc.writeMem(0xe7d0, { 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xde9c, gbc.sp());
        EXPECT(0xd26e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xd26b));
        EXPECT(0xd0, gbc.readMem(0xd26c));
        EXPECT(0xe7, gbc.readMem(0xd26d));
        EXPECT(0xb3, gbc.readMem(0xe7d0));
        // EA 0070
        gbc.setState(0x77c1, 0x3520, 0x8b30, 0xc5e4, 0x8db2, 0xeb49, 0x0, 0x1);
        gbc.writeMem(0x77c1, { 0xea, 0x56, 0xa7 });
        gbc.writeMem(0xa756, { 0x0 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x3520, gbc.sp());
        EXPECT(0x77c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8b, gbc.readMem(0xa756));
        // EA 0072
        gbc.setState(0x4f43, 0x1a86, 0x3c40, 0x7c73, 0xe78a, 0x80a9, 0x0, 0x0);
        gbc.writeMem(0x4f43, { 0xea, 0xc5, 0xe2 });
        gbc.writeMem(0xe2c5, { 0x0 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x1a86, gbc.sp());
        EXPECT(0x4f46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3c, gbc.readMem(0xe2c5));
        // EA 0073
        gbc.setState(0x340d, 0x1af7, 0x2350, 0x1c74, 0x4414, 0x4853, 0x0, 0x0);
        gbc.writeMem(0x340d, { 0xea, 0x31, 0xc0 });
        gbc.writeMem(0xc031, { 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x1af7, gbc.sp());
        EXPECT(0x3410, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0xc031));
        // EA 0074
        gbc.setState(0xdfbc, 0x70ef, 0xf690, 0xf3e0, 0xf714, 0x2cea, 0x1, 0x1);
        gbc.writeMem(0xbc14, { 0x0 });
        gbc.writeMem(0xdfbc, { 0xea, 0x14, 0xbc });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x70ef, gbc.sp());
        EXPECT(0xdfbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf6, gbc.readMem(0xbc14));
        EXPECT(0xea, gbc.readMem(0xdfbc));
        EXPECT(0x14, gbc.readMem(0xdfbd));
        EXPECT(0xbc, gbc.readMem(0xdfbe));
        // EA 0075
        gbc.setState(0x84d3, 0x4979, 0x3b0, 0xa155, 0x8489, 0x6e2a, 0x0, 0x0);
        gbc.writeMem(0x84d3, { 0xea, 0x7d, 0xb0 });
        gbc.writeMem(0xb07d, { 0x0 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x4979, gbc.sp());
        EXPECT(0x84d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x84d3));
        EXPECT(0x7d, gbc.readMem(0x84d4));
        EXPECT(0xb0, gbc.readMem(0x84d5));
        EXPECT(0x3, gbc.readMem(0xb07d));
        // EA 0079
        gbc.setState(0xaf5f, 0x13ac, 0xb70, 0x3506, 0x63c5, 0x50e3, 0x0, 0x0);
        gbc.writeMem(0xaf5f, { 0xea, 0x1b, 0xcd });
        gbc.writeMem(0xcd1b, { 0x0 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x13ac, gbc.sp());
        EXPECT(0xaf62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xaf5f));
        EXPECT(0x1b, gbc.readMem(0xaf60));
        EXPECT(0xcd, gbc.readMem(0xaf61));
        EXPECT(0xb, gbc.readMem(0xcd1b));
        // EA 007A
        gbc.setState(0x3519, 0x6e63, 0xe8a0, 0xc308, 0x3aeb, 0x5f05, 0x0, 0x0);
        gbc.writeMem(0x3519, { 0xea, 0xa9, 0x8e });
        gbc.writeMem(0x8ea9, { 0x0 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x6e63, gbc.sp());
        EXPECT(0x351c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe8, gbc.readMem(0x8ea9));
        // EA 007E
        gbc.setState(0x61aa, 0x9bc7, 0xda60, 0xb9c6, 0x1f31, 0xf453, 0x0, 0x0);
        gbc.writeMem(0x61aa, { 0xea, 0x86, 0x9e });
        gbc.writeMem(0x9e86, { 0x0 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x9bc7, gbc.sp());
        EXPECT(0x61ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xda, gbc.readMem(0x9e86));
        // EA 007F
        gbc.setState(0x5d86, 0xf54f, 0xd960, 0x1fe9, 0x3381, 0x7e53, 0x1, 0x0);
        gbc.writeMem(0x5d86, { 0xea, 0x52, 0x97 });
        gbc.writeMem(0x9752, { 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xf54f, gbc.sp());
        EXPECT(0x5d89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd9, gbc.readMem(0x9752));
        // EA 0080
        gbc.setState(0xcc40, 0xbd31, 0xfb30, 0x5a6d, 0x7098, 0xdbd8, 0x1, 0x0);
        gbc.writeMem(0xcc40, { 0xea, 0x42, 0xce });
        gbc.writeMem(0xce42, { 0x0 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xbd31, gbc.sp());
        EXPECT(0xcc43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xcc40));
        EXPECT(0x42, gbc.readMem(0xcc41));
        EXPECT(0xce, gbc.readMem(0xcc42));
        EXPECT(0xfb, gbc.readMem(0xce42));
        // EA 0081
        gbc.setState(0x883c, 0xfd39, 0x14c0, 0x1f3d, 0xfbe0, 0x132b, 0x1, 0x0);
        gbc.writeMem(0x883c, { 0xea, 0x4, 0xf9 });
        gbc.writeMem(0xf904, { 0x0 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xfd39, gbc.sp());
        EXPECT(0x883f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x883c));
        EXPECT(0x4, gbc.readMem(0x883d));
        EXPECT(0xf9, gbc.readMem(0x883e));
        EXPECT(0x14, gbc.readMem(0xf904));
        // EA 0082
        gbc.setState(0x1710, 0x13d, 0x8bd0, 0xeae6, 0x20e4, 0xce35, 0x1, 0x1);
        gbc.writeMem(0x1710, { 0xea, 0xf, 0x90 });
        gbc.writeMem(0x900f, { 0x0 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x13d, gbc.sp());
        EXPECT(0x1713, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8b, gbc.readMem(0x900f));
        // EA 0086
        gbc.setState(0x9e4e, 0xc034, 0xff60, 0xb9a1, 0xe2ab, 0xae57, 0x0, 0x1);
        gbc.writeMem(0x9e4e, { 0xea, 0x47, 0xb9 });
        gbc.writeMem(0xb947, { 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xc034, gbc.sp());
        EXPECT(0x9e51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9e4e));
        EXPECT(0x47, gbc.readMem(0x9e4f));
        EXPECT(0xb9, gbc.readMem(0x9e50));
        EXPECT(0xff, gbc.readMem(0xb947));
        // EA 008A
        gbc.setState(0x1bb7, 0xacf9, 0xea70, 0x6435, 0x83f9, 0xce2f, 0x0, 0x1);
        gbc.writeMem(0x1bb7, { 0xea, 0x3e, 0xb7 });
        gbc.writeMem(0xb73e, { 0x0 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xacf9, gbc.sp());
        EXPECT(0x1bba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xb73e));
        // EA 008D
        gbc.setState(0xb462, 0x9b68, 0x6d90, 0x9ae6, 0x6e10, 0xcf05, 0x1, 0x0);
        gbc.writeMem(0xb462, { 0xea, 0xed, 0xc0 });
        gbc.writeMem(0xc0ed, { 0x0 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x9b68, gbc.sp());
        EXPECT(0xb465, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xb462));
        EXPECT(0xed, gbc.readMem(0xb463));
        EXPECT(0xc0, gbc.readMem(0xb464));
        EXPECT(0x6d, gbc.readMem(0xc0ed));
        // EA 008E
        gbc.setState(0x7b1, 0xed3f, 0x1d10, 0xcc89, 0x86a1, 0x55a0, 0x0, 0x1);
        gbc.writeMem(0x7b1, { 0xea, 0x9, 0xab });
        gbc.writeMem(0xab09, { 0x0 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xed3f, gbc.sp());
        EXPECT(0x7b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1d, gbc.readMem(0xab09));
        // EA 0090
        gbc.setState(0xa737, 0x1491, 0x6df0, 0x606, 0x3357, 0xf752, 0x1, 0x0);
        gbc.writeMem(0xa737, { 0xea, 0x72, 0xd1 });
        gbc.writeMem(0xd172, { 0x0 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x1491, gbc.sp());
        EXPECT(0xa73a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa737));
        EXPECT(0x72, gbc.readMem(0xa738));
        EXPECT(0xd1, gbc.readMem(0xa739));
        EXPECT(0x6d, gbc.readMem(0xd172));
        // EA 0091
        gbc.setState(0x29ed, 0xd921, 0x8150, 0x20c7, 0xd0c9, 0x283a, 0x1, 0x1);
        gbc.writeMem(0x29ed, { 0xea, 0xab, 0xe4 });
        gbc.writeMem(0xe4ab, { 0x0 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xd921, gbc.sp());
        EXPECT(0x29f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x81, gbc.readMem(0xe4ab));
        // EA 0092
        gbc.setState(0xd19a, 0xb07f, 0x44f0, 0x648c, 0x3ed2, 0xb964, 0x0, 0x1);
        gbc.writeMem(0xbecd, { 0x0 });
        gbc.writeMem(0xd19a, { 0xea, 0xcd, 0xbe });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xb07f, gbc.sp());
        EXPECT(0xd19d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x44, gbc.readMem(0xbecd));
        EXPECT(0xea, gbc.readMem(0xd19a));
        EXPECT(0xcd, gbc.readMem(0xd19b));
        EXPECT(0xbe, gbc.readMem(0xd19c));
        // EA 0096
        gbc.setState(0x6bb9, 0x5d01, 0x39e0, 0x4803, 0x163d, 0xf8b8, 0x1, 0x1);
        gbc.writeMem(0x6bb9, { 0xea, 0xff, 0x8b });
        gbc.writeMem(0x8bff, { 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x5d01, gbc.sp());
        EXPECT(0x6bbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x39, gbc.readMem(0x8bff));
        // EA 0097
        gbc.setState(0xa709, 0xd7c9, 0xaf70, 0x467b, 0x7074, 0x7502, 0x1, 0x0);
        gbc.writeMem(0xa709, { 0xea, 0x4e, 0xf5 });
        gbc.writeMem(0xf54e, { 0x0 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xd7c9, gbc.sp());
        EXPECT(0xa70c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa709));
        EXPECT(0x4e, gbc.readMem(0xa70a));
        EXPECT(0xf5, gbc.readMem(0xa70b));
        EXPECT(0xaf, gbc.readMem(0xf54e));
        // EA 009B
        gbc.setState(0x9fce, 0x9dd3, 0xec30, 0xeeda, 0xfcf1, 0x5660, 0x1, 0x1);
        gbc.writeMem(0x9fce, { 0xea, 0x4e, 0xfe });
        gbc.writeMem(0xfe4e, { 0x0 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x9dd3, gbc.sp());
        EXPECT(0x9fd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9fce));
        EXPECT(0x4e, gbc.readMem(0x9fcf));
        EXPECT(0xfe, gbc.readMem(0x9fd0));
        EXPECT(0xec, gbc.readMem(0xfe4e));
        // EA 009E
        gbc.setState(0x896a, 0x136, 0x2100, 0x2c89, 0x9c36, 0x4b57, 0x0, 0x1);
        gbc.writeMem(0x896a, { 0xea, 0x43, 0xe7 });
        gbc.writeMem(0xe743, { 0x0 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x136, gbc.sp());
        EXPECT(0x896d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x896a));
        EXPECT(0x43, gbc.readMem(0x896b));
        EXPECT(0xe7, gbc.readMem(0x896c));
        EXPECT(0x21, gbc.readMem(0xe743));
        // EA 009F
        gbc.setState(0x907, 0x5f2f, 0xbd0, 0x3171, 0x920e, 0xfc0f, 0x0, 0x0);
        gbc.writeMem(0x907, { 0xea, 0x5b, 0x9d });
        gbc.writeMem(0x9d5b, { 0x0 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x5f2f, gbc.sp());
        EXPECT(0x90a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb, gbc.readMem(0x9d5b));
        // EA 00A0
        gbc.setState(0x5d2b, 0x9805, 0x7da0, 0x282a, 0x9d22, 0x784b, 0x1, 0x0);
        gbc.writeMem(0x5d2b, { 0xea, 0x3d, 0xeb });
        gbc.writeMem(0xeb3d, { 0x0 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x9805, gbc.sp());
        EXPECT(0x5d2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7d, gbc.readMem(0xeb3d));
        // EA 00A6
        gbc.setState(0x6da4, 0x2949, 0x3d70, 0xdc94, 0xef2d, 0xfcff, 0x1, 0x0);
        gbc.writeMem(0x6da4, { 0xea, 0x76, 0xe2 });
        gbc.writeMem(0xe276, { 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x2949, gbc.sp());
        EXPECT(0x6da7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3d, gbc.readMem(0xe276));
        // EA 00A8
        gbc.setState(0x5fe3, 0x9295, 0xbae0, 0x14a7, 0x52b4, 0x1398, 0x0, 0x1);
        gbc.writeMem(0x5fe3, { 0xea, 0x48, 0xe8 });
        gbc.writeMem(0xe848, { 0x0 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x9295, gbc.sp());
        EXPECT(0x5fe6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xba, gbc.readMem(0xe848));
        // EA 00AA
        gbc.setState(0xc36c, 0xc0b7, 0x2430, 0xe2fd, 0xc22c, 0x7276, 0x0, 0x0);
        gbc.writeMem(0xa40f, { 0x0 });
        gbc.writeMem(0xc36c, { 0xea, 0xf, 0xa4 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xc0b7, gbc.sp());
        EXPECT(0xc36f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0xa40f));
        EXPECT(0xea, gbc.readMem(0xc36c));
        EXPECT(0xf, gbc.readMem(0xc36d));
        EXPECT(0xa4, gbc.readMem(0xc36e));
        // EA 00AC
        gbc.setState(0x57ee, 0xdc13, 0x6050, 0xc8e6, 0x30ee, 0xdd31, 0x0, 0x0);
        gbc.writeMem(0x57ee, { 0xea, 0x4d, 0xec });
        gbc.writeMem(0xec4d, { 0x0 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xdc13, gbc.sp());
        EXPECT(0x57f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0xec4d));
        // EA 00AE
        gbc.setState(0xc9c0, 0xec4c, 0x4e0, 0xa192, 0x469c, 0x9434, 0x0, 0x1);
        gbc.writeMem(0xc9c0, { 0xea, 0xdd, 0xda });
        gbc.writeMem(0xdadd, { 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xec4c, gbc.sp());
        EXPECT(0xc9c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc9c0));
        EXPECT(0xdd, gbc.readMem(0xc9c1));
        EXPECT(0xda, gbc.readMem(0xc9c2));
        EXPECT(0x4, gbc.readMem(0xdadd));
        // EA 00AF
        gbc.setState(0xab12, 0xf2ef, 0x4dc0, 0x1835, 0xe4b, 0x6bb4, 0x0, 0x1);
        gbc.writeMem(0xab12, { 0xea, 0x3b, 0xf3 });
        gbc.writeMem(0xf33b, { 0x0 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xf2ef, gbc.sp());
        EXPECT(0xab15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xab12));
        EXPECT(0x3b, gbc.readMem(0xab13));
        EXPECT(0xf3, gbc.readMem(0xab14));
        EXPECT(0x4d, gbc.readMem(0xf33b));
        // EA 00B5
        gbc.setState(0xe0b6, 0x77e7, 0x2430, 0x399b, 0xec50, 0x9609, 0x0, 0x0);
        gbc.writeMem(0xe0b6, { 0xea, 0x2f, 0xe9 });
        gbc.writeMem(0xe92f, { 0x0 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x77e7, gbc.sp());
        EXPECT(0xe0b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xe0b6));
        EXPECT(0x2f, gbc.readMem(0xe0b7));
        EXPECT(0xe9, gbc.readMem(0xe0b8));
        EXPECT(0x24, gbc.readMem(0xe92f));
        // EA 00B7
        gbc.setState(0x64de, 0xa39b, 0xf4c0, 0xe1f1, 0x2393, 0x5825, 0x1, 0x1);
        gbc.writeMem(0x64de, { 0xea, 0x0, 0xe2 });
        gbc.writeMem(0xe200, { 0x0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xa39b, gbc.sp());
        EXPECT(0x64e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf4, gbc.readMem(0xe200));
        // EA 00BB
        gbc.setState(0xe7a, 0x44ec, 0x4db0, 0xdf24, 0xe0af, 0xcd5, 0x1, 0x0);
        gbc.writeMem(0xe7a, { 0xea, 0x6b, 0xbf });
        gbc.writeMem(0xbf6b, { 0x0 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x44ec, gbc.sp());
        EXPECT(0xe7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4d, gbc.readMem(0xbf6b));
        // EA 00BC
        gbc.setState(0xc1e0, 0xf8b2, 0xe4c0, 0x30b3, 0xdf1f, 0x445c, 0x0, 0x0);
        gbc.writeMem(0xc1e0, { 0xea, 0x4d, 0xdd });
        gbc.writeMem(0xdd4d, { 0x0 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xf8b2, gbc.sp());
        EXPECT(0xc1e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc1e0));
        EXPECT(0x4d, gbc.readMem(0xc1e1));
        EXPECT(0xdd, gbc.readMem(0xc1e2));
        EXPECT(0xe4, gbc.readMem(0xdd4d));
        // EA 00BD
        gbc.setState(0x79ff, 0x7201, 0x4f20, 0x734d, 0x837c, 0xb38e, 0x0, 0x0);
        gbc.writeMem(0x79ff, { 0xea, 0xf9, 0xff });
        gbc.writeMem(0xfff9, { 0x0 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x7201, gbc.sp());
        EXPECT(0x7a02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4f, gbc.readMem(0xfff9));
        // EA 00BF
        gbc.setState(0x7bd1, 0x383b, 0x1e90, 0x553c, 0xf962, 0xdd80, 0x0, 0x1);
        gbc.writeMem(0x7bd1, { 0xea, 0x1b, 0xf3 });
        gbc.writeMem(0xf31b, { 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x383b, gbc.sp());
        EXPECT(0x7bd4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1e, gbc.readMem(0xf31b));
        // EA 00C4
        gbc.setState(0x61a, 0xbfe, 0xa650, 0xf5b7, 0x1f, 0xce35, 0x1, 0x0);
        gbc.writeMem(0x61a, { 0xea, 0xdf, 0xa6 });
        gbc.writeMem(0xa6df, { 0x0 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xbfe, gbc.sp());
        EXPECT(0x61d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0xa6df));
        // EA 00C6
        gbc.setState(0xe10b, 0xa1b2, 0x8d40, 0xc650, 0xf993, 0xa5c8, 0x1, 0x1);
        gbc.writeMem(0xbfe1, { 0x0 });
        gbc.writeMem(0xe10b, { 0xea, 0xe1, 0xbf });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xa1b2, gbc.sp());
        EXPECT(0xe10e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8d, gbc.readMem(0xbfe1));
        EXPECT(0xea, gbc.readMem(0xe10b));
        EXPECT(0xe1, gbc.readMem(0xe10c));
        EXPECT(0xbf, gbc.readMem(0xe10d));
        // EA 00C9
        gbc.setState(0x6, 0xa55e, 0x93f0, 0x8c98, 0xe81a, 0xaa75, 0x0, 0x0);
        gbc.writeMem(0x6, { 0xea, 0x6c, 0xbc });
        gbc.writeMem(0xbc6c, { 0x0 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xa55e, gbc.sp());
        EXPECT(0x9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x93, gbc.readMem(0xbc6c));
        // EA 00CB
        gbc.setState(0x627c, 0xe70d, 0x9f60, 0x5c95, 0x2691, 0x47c9, 0x1, 0x1);
        gbc.writeMem(0x627c, { 0xea, 0xc, 0xdf });
        gbc.writeMem(0xdf0c, { 0x0 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xe70d, gbc.sp());
        EXPECT(0x627f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9f, gbc.readMem(0xdf0c));
        // EA 00CC
        gbc.setState(0xa0f1, 0x4d82, 0x3810, 0x1076, 0x937c, 0x62b5, 0x0, 0x0);
        gbc.writeMem(0xa0f1, { 0xea, 0x13, 0xd8 });
        gbc.writeMem(0xd813, { 0x0 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x4d82, gbc.sp());
        EXPECT(0xa0f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa0f1));
        EXPECT(0x13, gbc.readMem(0xa0f2));
        EXPECT(0xd8, gbc.readMem(0xa0f3));
        EXPECT(0x38, gbc.readMem(0xd813));
        // EA 00CE
        gbc.setState(0x563e, 0xe262, 0x23e0, 0x91f1, 0x4e88, 0x15e3, 0x1, 0x0);
        gbc.writeMem(0x563e, { 0xea, 0x1f, 0xde });
        gbc.writeMem(0xde1f, { 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xe262, gbc.sp());
        EXPECT(0x5641, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0xde1f));
        // EA 00D2
        gbc.setState(0x3d83, 0x2269, 0x97b0, 0x209d, 0xf209, 0x4d21, 0x0, 0x0);
        gbc.writeMem(0x3d83, { 0xea, 0x2b, 0xca });
        gbc.writeMem(0xca2b, { 0x0 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x2269, gbc.sp());
        EXPECT(0x3d86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x97, gbc.readMem(0xca2b));
        // EA 00D4
        gbc.setState(0x21c3, 0x51e9, 0x9950, 0x2609, 0x93f9, 0x6f20, 0x1, 0x0);
        gbc.writeMem(0x21c3, { 0xea, 0x31, 0xba });
        gbc.writeMem(0xba31, { 0x0 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x51e9, gbc.sp());
        EXPECT(0x21c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x99, gbc.readMem(0xba31));
        // EA 00D5
        gbc.setState(0x2a41, 0x27fe, 0xb400, 0xa3e6, 0xb292, 0x9dea, 0x0, 0x1);
        gbc.writeMem(0x2a41, { 0xea, 0xe1, 0xc5 });
        gbc.writeMem(0xc5e1, { 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x27fe, gbc.sp());
        EXPECT(0x2a44, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0xc5e1));
        // EA 00D8
        gbc.setState(0xe397, 0xcda6, 0xab80, 0x15fd, 0x183e, 0xa6b3, 0x0, 0x1);
        gbc.writeMem(0xa986, { 0x0 });
        gbc.writeMem(0xe397, { 0xea, 0x86, 0xa9 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xcda6, gbc.sp());
        EXPECT(0xe39a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xab, gbc.readMem(0xa986));
        EXPECT(0xea, gbc.readMem(0xe397));
        EXPECT(0x86, gbc.readMem(0xe398));
        EXPECT(0xa9, gbc.readMem(0xe399));
        // EA 00DB
        gbc.setState(0xe01c, 0x5f4d, 0xcdb0, 0x655a, 0xf971, 0xc0e7, 0x1, 0x1);
        gbc.writeMem(0xe01c, { 0xea, 0x36, 0xf8 });
        gbc.writeMem(0xf836, { 0x0 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x5f4d, gbc.sp());
        EXPECT(0xe01f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xe01c));
        EXPECT(0x36, gbc.readMem(0xe01d));
        EXPECT(0xf8, gbc.readMem(0xe01e));
        EXPECT(0xcd, gbc.readMem(0xf836));
        // EA 00DC
        gbc.setState(0xe4ec, 0xc045, 0x7f60, 0xc987, 0xda9f, 0x2ba9, 0x0, 0x1);
        gbc.writeMem(0xe4ec, { 0xea, 0x38, 0xe6 });
        gbc.writeMem(0xe638, { 0x0 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xc045, gbc.sp());
        EXPECT(0xe4ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xe4ec));
        EXPECT(0x38, gbc.readMem(0xe4ed));
        EXPECT(0xe6, gbc.readMem(0xe4ee));
        EXPECT(0x7f, gbc.readMem(0xe638));
        // EA 00E2
        gbc.setState(0xe12b, 0x5245, 0x9ac0, 0x7df9, 0xfcf, 0xe6e7, 0x1, 0x1);
        gbc.writeMem(0xb8cf, { 0x0 });
        gbc.writeMem(0xe12b, { 0xea, 0xcf, 0xb8 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x5245, gbc.sp());
        EXPECT(0xe12e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9a, gbc.readMem(0xb8cf));
        EXPECT(0xea, gbc.readMem(0xe12b));
        EXPECT(0xcf, gbc.readMem(0xe12c));
        EXPECT(0xb8, gbc.readMem(0xe12d));
        // EA 00E3
        gbc.setState(0x1247, 0xcb5a, 0xaf90, 0x80f5, 0x93dc, 0xd48e, 0x1, 0x1);
        gbc.writeMem(0x1247, { 0xea, 0xfc, 0x90 });
        gbc.writeMem(0x90fc, { 0x0 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xcb5a, gbc.sp());
        EXPECT(0x124a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x90fc));
        // EA 00E7
        gbc.setState(0x6ce0, 0x962e, 0x1180, 0x7132, 0x7a58, 0xd9b0, 0x0, 0x0);
        gbc.writeMem(0x6ce0, { 0xea, 0x33, 0xa9 });
        gbc.writeMem(0xa933, { 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x962e, gbc.sp());
        EXPECT(0x6ce3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x11, gbc.readMem(0xa933));
        // EA 00E9
        gbc.setState(0x6c5e, 0x1196, 0xf340, 0xee9f, 0x6673, 0x9796, 0x1, 0x0);
        gbc.writeMem(0x6c5e, { 0xea, 0xd3, 0xa8 });
        gbc.writeMem(0xa8d3, { 0x0 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x1196, gbc.sp());
        EXPECT(0x6c61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf3, gbc.readMem(0xa8d3));
        // EA 00EA
        gbc.setState(0x997e, 0x9d0f, 0x4130, 0x35e0, 0x4282, 0xb94c, 0x1, 0x0);
        gbc.writeMem(0x997e, { 0xea, 0x36, 0xf4 });
        gbc.writeMem(0xf436, { 0x0 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x9d0f, gbc.sp());
        EXPECT(0x9981, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x997e));
        EXPECT(0x36, gbc.readMem(0x997f));
        EXPECT(0xf4, gbc.readMem(0x9980));
        EXPECT(0x41, gbc.readMem(0xf436));
        // EA 00EC
        gbc.setState(0xaeb5, 0xe17b, 0xf110, 0xfbcf, 0x2d99, 0x5cd, 0x0, 0x1);
        gbc.writeMem(0xa164, { 0x0 });
        gbc.writeMem(0xaeb5, { 0xea, 0x64, 0xa1 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xe17b, gbc.sp());
        EXPECT(0xaeb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0xa164));
        EXPECT(0xea, gbc.readMem(0xaeb5));
        EXPECT(0x64, gbc.readMem(0xaeb6));
        EXPECT(0xa1, gbc.readMem(0xaeb7));
        // EA 00ED
        gbc.setState(0xa303, 0x77b2, 0xcba0, 0x7530, 0x163b, 0xd32b, 0x0, 0x1);
        gbc.writeMem(0xa303, { 0xea, 0x95, 0xfb });
        gbc.writeMem(0xfb95, { 0x0 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x77b2, gbc.sp());
        EXPECT(0xa306, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa303));
        EXPECT(0x95, gbc.readMem(0xa304));
        EXPECT(0xfb, gbc.readMem(0xa305));
        EXPECT(0xcb, gbc.readMem(0xfb95));
        // EA 00EE
        gbc.setState(0x408a, 0xcab6, 0xa2d0, 0xea0a, 0x418d, 0x2542, 0x0, 0x1);
        gbc.writeMem(0x408a, { 0xea, 0xa9, 0x9c });
        gbc.writeMem(0x9ca9, { 0x0 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xcab6, gbc.sp());
        EXPECT(0x408d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa2, gbc.readMem(0x9ca9));
        // EA 00F1
        gbc.setState(0x4aa7, 0xbbdc, 0x270, 0x144d, 0x2033, 0x491, 0x0, 0x0);
        gbc.writeMem(0x4aa7, { 0xea, 0x9a, 0xc4 });
        gbc.writeMem(0xc49a, { 0x0 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xbbdc, gbc.sp());
        EXPECT(0x4aaa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2, gbc.readMem(0xc49a));
        // EA 00F3
        gbc.setState(0x9e06, 0xa24a, 0xdde0, 0xbb49, 0xed88, 0x78b, 0x1, 0x1);
        gbc.writeMem(0x9e06, { 0xea, 0x92, 0xcf });
        gbc.writeMem(0xcf92, { 0x0 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xa24a, gbc.sp());
        EXPECT(0x9e09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9e06));
        EXPECT(0x92, gbc.readMem(0x9e07));
        EXPECT(0xcf, gbc.readMem(0x9e08));
        EXPECT(0xdd, gbc.readMem(0xcf92));
        // EA 00F6
        gbc.setState(0xc6f2, 0x4902, 0x34f0, 0xe814, 0x9da6, 0x696d, 0x1, 0x0);
        gbc.writeMem(0xabb4, { 0x0 });
        gbc.writeMem(0xc6f2, { 0xea, 0xb4, 0xab });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x4902, gbc.sp());
        EXPECT(0xc6f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x34, gbc.readMem(0xabb4));
        EXPECT(0xea, gbc.readMem(0xc6f2));
        EXPECT(0xb4, gbc.readMem(0xc6f3));
        EXPECT(0xab, gbc.readMem(0xc6f4));
        // EA 00F8
        gbc.setState(0x395, 0xd438, 0x9d70, 0xe620, 0x19aa, 0x28bc, 0x1, 0x1);
        gbc.writeMem(0x395, { 0xea, 0xa4, 0x9c });
        gbc.writeMem(0x9ca4, { 0x0 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xd438, gbc.sp());
        EXPECT(0x398, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9d, gbc.readMem(0x9ca4));
        // EA 00FE
        gbc.setState(0xbcd4, 0x1c2c, 0xb0f0, 0xec39, 0xb585, 0x694e, 0x1, 0x1);
        gbc.writeMem(0xbcd4, { 0xea, 0xb5, 0xd7 });
        gbc.writeMem(0xd7b5, { 0x0 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x1c2c, gbc.sp());
        EXPECT(0xbcd7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xbcd4));
        EXPECT(0xb5, gbc.readMem(0xbcd5));
        EXPECT(0xd7, gbc.readMem(0xbcd6));
        EXPECT(0xb0, gbc.readMem(0xd7b5));
        // EA 0100
        gbc.setState(0xacc, 0xc2dc, 0x5550, 0x6d76, 0x4492, 0x58a1, 0x0, 0x0);
        gbc.writeMem(0xacc, { 0xea, 0xba, 0xfb });
        gbc.writeMem(0xfbba, { 0x0 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xc2dc, gbc.sp());
        EXPECT(0xacf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x55, gbc.readMem(0xfbba));
        // EA 0101
        gbc.setState(0x68ae, 0xd0c3, 0x32e0, 0x9e45, 0x64ec, 0xf913, 0x0, 0x0);
        gbc.writeMem(0x68ae, { 0xea, 0x14, 0xcc });
        gbc.writeMem(0xcc14, { 0x0 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xd0c3, gbc.sp());
        EXPECT(0x68b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xcc14));
        // EA 0102
        gbc.setState(0x976b, 0x4c6f, 0x3d60, 0x2fda, 0x191c, 0xf651, 0x1, 0x1);
        gbc.writeMem(0x976b, { 0xea, 0x79, 0xb7 });
        gbc.writeMem(0xb779, { 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x4c6f, gbc.sp());
        EXPECT(0x976e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x976b));
        EXPECT(0x79, gbc.readMem(0x976c));
        EXPECT(0xb7, gbc.readMem(0x976d));
        EXPECT(0x3d, gbc.readMem(0xb779));
        // EA 0105
        gbc.setState(0xd567, 0x2f22, 0xf9a0, 0xb3ff, 0x786, 0x3eec, 0x0, 0x1);
        gbc.writeMem(0xd567, { 0xea, 0x23, 0xfc });
        gbc.writeMem(0xfc23, { 0x0 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x2f22, gbc.sp());
        EXPECT(0xd56a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xd567));
        EXPECT(0x23, gbc.readMem(0xd568));
        EXPECT(0xfc, gbc.readMem(0xd569));
        EXPECT(0xf9, gbc.readMem(0xfc23));
        // EA 0107
        gbc.setState(0xbd9f, 0x67d4, 0x4ff0, 0x4ac8, 0xefe0, 0x24d7, 0x0, 0x0);
        gbc.writeMem(0xbd9f, { 0xea, 0xb1, 0xd4 });
        gbc.writeMem(0xd4b1, { 0x0 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x67d4, gbc.sp());
        EXPECT(0xbda2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xbd9f));
        EXPECT(0xb1, gbc.readMem(0xbda0));
        EXPECT(0xd4, gbc.readMem(0xbda1));
        EXPECT(0x4f, gbc.readMem(0xd4b1));
        // EA 010C
        gbc.setState(0xcf8a, 0xf2e7, 0x2d50, 0xac8f, 0x625a, 0x4baa, 0x1, 0x1);
        gbc.writeMem(0x9569, { 0x0 });
        gbc.writeMem(0xcf8a, { 0xea, 0x69, 0x95 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xf2e7, gbc.sp());
        EXPECT(0xcf8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2d, gbc.readMem(0x9569));
        EXPECT(0xea, gbc.readMem(0xcf8a));
        EXPECT(0x69, gbc.readMem(0xcf8b));
        EXPECT(0x95, gbc.readMem(0xcf8c));
        // EA 010E
        gbc.setState(0x2a40, 0xef13, 0xd240, 0xa10c, 0x23d3, 0xa37b, 0x1, 0x1);
        gbc.writeMem(0x2a40, { 0xea, 0x56, 0xe1 });
        gbc.writeMem(0xe156, { 0x0 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xef13, gbc.sp());
        EXPECT(0x2a43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0xe156));
        // EA 010F
        gbc.setState(0x18cb, 0x974a, 0xcd80, 0x8e17, 0x46ed, 0x4f32, 0x0, 0x1);
        gbc.writeMem(0x18cb, { 0xea, 0xb5, 0x81 });
        gbc.writeMem(0x81b5, { 0x0 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x974a, gbc.sp());
        EXPECT(0x18ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x81b5));
        // EA 0111
        gbc.setState(0xa298, 0x60f2, 0xb390, 0x3a98, 0x8661, 0xa4b1, 0x1, 0x0);
        gbc.writeMem(0xa298, { 0xea, 0xa9, 0xd7 });
        gbc.writeMem(0xd7a9, { 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x60f2, gbc.sp());
        EXPECT(0xa29b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa298));
        EXPECT(0xa9, gbc.readMem(0xa299));
        EXPECT(0xd7, gbc.readMem(0xa29a));
        EXPECT(0xb3, gbc.readMem(0xd7a9));
        // EA 0112
        gbc.setState(0xc12c, 0x7e58, 0xf3f0, 0xd73b, 0x2ad3, 0xb799, 0x0, 0x1);
        gbc.writeMem(0xa808, { 0x0 });
        gbc.writeMem(0xc12c, { 0xea, 0x8, 0xa8 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x7e58, gbc.sp());
        EXPECT(0xc12f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf3, gbc.readMem(0xa808));
        EXPECT(0xea, gbc.readMem(0xc12c));
        EXPECT(0x8, gbc.readMem(0xc12d));
        EXPECT(0xa8, gbc.readMem(0xc12e));
        // EA 0119
        gbc.setState(0x6abe, 0xb480, 0xc330, 0x22ce, 0xe0dc, 0x370, 0x0, 0x0);
        gbc.writeMem(0x6abe, { 0xea, 0x9f, 0xcc });
        gbc.writeMem(0xcc9f, { 0x0 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xb480, gbc.sp());
        EXPECT(0x6ac1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc3, gbc.readMem(0xcc9f));
        // EA 011B
        gbc.setState(0xd44f, 0xd427, 0x5b0, 0x62a0, 0xa990, 0x1473, 0x1, 0x1);
        gbc.writeMem(0xc8bf, { 0x0 });
        gbc.writeMem(0xd44f, { 0xea, 0xbf, 0xc8 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xd427, gbc.sp());
        EXPECT(0xd452, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5, gbc.readMem(0xc8bf));
        EXPECT(0xea, gbc.readMem(0xd44f));
        EXPECT(0xbf, gbc.readMem(0xd450));
        EXPECT(0xc8, gbc.readMem(0xd451));
        // EA 011D
        gbc.setState(0x2677, 0x627e, 0x7680, 0xa58f, 0x3b4e, 0x4e46, 0x0, 0x1);
        gbc.writeMem(0x2677, { 0xea, 0x8d, 0xd9 });
        gbc.writeMem(0xd98d, { 0x0 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x627e, gbc.sp());
        EXPECT(0x267a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x76, gbc.readMem(0xd98d));
        // EA 011F
        gbc.setState(0xb383, 0x218b, 0x6330, 0x761e, 0xf03, 0x8e9b, 0x0, 0x1);
        gbc.writeMem(0xb383, { 0xea, 0x69, 0xf6 });
        gbc.writeMem(0xf669, { 0x0 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x218b, gbc.sp());
        EXPECT(0xb386, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xb383));
        EXPECT(0x69, gbc.readMem(0xb384));
        EXPECT(0xf6, gbc.readMem(0xb385));
        EXPECT(0x63, gbc.readMem(0xf669));
        // EA 0120
        gbc.setState(0xead0, 0x8c8b, 0x3dd0, 0x50cb, 0x382d, 0x1caa, 0x1, 0x1);
        gbc.writeMem(0xead0, { 0xea, 0xb3, 0xf4 });
        gbc.writeMem(0xf4b3, { 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x8c8b, gbc.sp());
        EXPECT(0xead3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xead0));
        EXPECT(0xb3, gbc.readMem(0xead1));
        EXPECT(0xf4, gbc.readMem(0xead2));
        EXPECT(0x3d, gbc.readMem(0xf4b3));
        // EA 0125
        gbc.setState(0x602c, 0x4a35, 0x9140, 0x7094, 0xd29a, 0xc5b1, 0x0, 0x1);
        gbc.writeMem(0x602c, { 0xea, 0x91, 0xba });
        gbc.writeMem(0xba91, { 0x0 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x4a35, gbc.sp());
        EXPECT(0x602f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x91, gbc.readMem(0xba91));
        // EA 0127
        gbc.setState(0x3907, 0xfc2a, 0x3f90, 0xf9c1, 0x259, 0xca64, 0x0, 0x1);
        gbc.writeMem(0x3907, { 0xea, 0xb1, 0xd3 });
        gbc.writeMem(0xd3b1, { 0x0 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xfc2a, gbc.sp());
        EXPECT(0x390a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3f, gbc.readMem(0xd3b1));
        // EA 0129
        gbc.setState(0xd000, 0xf8ef, 0xb140, 0xa5, 0xd3b8, 0xceae, 0x0, 0x0);
        gbc.writeMem(0xa75b, { 0x0 });
        gbc.writeMem(0xd000, { 0xea, 0x5b, 0xa7 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xf8ef, gbc.sp());
        EXPECT(0xd003, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb1, gbc.readMem(0xa75b));
        EXPECT(0xea, gbc.readMem(0xd000));
        EXPECT(0x5b, gbc.readMem(0xd001));
        EXPECT(0xa7, gbc.readMem(0xd002));
        // EA 012B
        gbc.setState(0x8ad6, 0xa972, 0xc150, 0x22a8, 0x2673, 0x8175, 0x0, 0x1);
        gbc.writeMem(0x8ad6, { 0xea, 0x8c, 0x91 });
        gbc.writeMem(0x918c, { 0x0 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xa972, gbc.sp());
        EXPECT(0x8ad9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8ad6));
        EXPECT(0x8c, gbc.readMem(0x8ad7));
        EXPECT(0x91, gbc.readMem(0x8ad8));
        EXPECT(0xc1, gbc.readMem(0x918c));
        // EA 012C
        gbc.setState(0xb17e, 0x3d84, 0xd420, 0xa507, 0x8cef, 0xdeca, 0x0, 0x1);
        gbc.writeMem(0xb17e, { 0xea, 0xd8, 0xfe });
        gbc.writeMem(0xfed8, { 0x0 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x3d84, gbc.sp());
        EXPECT(0xb181, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xb17e));
        EXPECT(0xd8, gbc.readMem(0xb17f));
        EXPECT(0xfe, gbc.readMem(0xb180));
        EXPECT(0xd4, gbc.readMem(0xfed8));
        // EA 012D
        gbc.setState(0xec7d, 0x5767, 0xc8d0, 0xe9e, 0xc692, 0xf135, 0x0, 0x1);
        gbc.writeMem(0xd5e9, { 0x0 });
        gbc.writeMem(0xec7d, { 0xea, 0xe9, 0xd5 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x5767, gbc.sp());
        EXPECT(0xec80, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc8, gbc.readMem(0xd5e9));
        EXPECT(0xea, gbc.readMem(0xec7d));
        EXPECT(0xe9, gbc.readMem(0xec7e));
        EXPECT(0xd5, gbc.readMem(0xec7f));
        // EA 012E
        gbc.setState(0x63e, 0x56c4, 0xf790, 0x7c10, 0xa5d3, 0xa66c, 0x1, 0x0);
        gbc.writeMem(0x63e, { 0xea, 0x7d, 0xf4 });
        gbc.writeMem(0xf47d, { 0x0 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x56c4, gbc.sp());
        EXPECT(0x641, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf7, gbc.readMem(0xf47d));
        // EA 0130
        gbc.setState(0x1af, 0xf466, 0x8550, 0xd1f7, 0x9a4c, 0x5c4e, 0x0, 0x1);
        gbc.writeMem(0x1af, { 0xea, 0x5f, 0xcd });
        gbc.writeMem(0xcd5f, { 0x0 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xf466, gbc.sp());
        EXPECT(0x1b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x85, gbc.readMem(0xcd5f));
        // EA 0135
        gbc.setState(0xe1c2, 0x165, 0x9b90, 0xfd10, 0x3f20, 0xcfbb, 0x1, 0x1);
        gbc.writeMem(0xe1c2, { 0xea, 0xbd, 0xf8 });
        gbc.writeMem(0xf8bd, { 0x0 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x165, gbc.sp());
        EXPECT(0xe1c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xe1c2));
        EXPECT(0xbd, gbc.readMem(0xe1c3));
        EXPECT(0xf8, gbc.readMem(0xe1c4));
        EXPECT(0x9b, gbc.readMem(0xf8bd));
        // EA 0137
        gbc.setState(0xe8b3, 0xb18b, 0x7690, 0x9828, 0xd76b, 0xe5df, 0x1, 0x1);
        gbc.writeMem(0xe8b3, { 0xea, 0x82, 0xf1 });
        gbc.writeMem(0xf182, { 0x0 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xb18b, gbc.sp());
        EXPECT(0xe8b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xe8b3));
        EXPECT(0x82, gbc.readMem(0xe8b4));
        EXPECT(0xf1, gbc.readMem(0xe8b5));
        EXPECT(0x76, gbc.readMem(0xf182));
        // EA 0139
        gbc.setState(0x23c9, 0xfffc, 0x5810, 0x967d, 0xf3d, 0xe3fb, 0x0, 0x0);
        gbc.writeMem(0x23c9, { 0xea, 0x77, 0x84 });
        gbc.writeMem(0x8477, { 0x0 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xfffc, gbc.sp());
        EXPECT(0x23cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0x8477));
        // EA 013A
        gbc.setState(0xd8e3, 0xd54a, 0xeee0, 0x2460, 0x96b8, 0x2f4a, 0x1, 0x0);
        gbc.writeMem(0xd00f, { 0x0 });
        gbc.writeMem(0xd8e3, { 0xea, 0xf, 0xd0 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xd54a, gbc.sp());
        EXPECT(0xd8e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xd00f));
        EXPECT(0xea, gbc.readMem(0xd8e3));
        EXPECT(0xf, gbc.readMem(0xd8e4));
        EXPECT(0xd0, gbc.readMem(0xd8e5));
        // EA 013B
        gbc.setState(0x2b0b, 0x1328, 0xdce0, 0x43ef, 0xe261, 0x5595, 0x0, 0x1);
        gbc.writeMem(0x2b0b, { 0xea, 0xd7, 0xdc });
        gbc.writeMem(0xdcd7, { 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x1328, gbc.sp());
        EXPECT(0x2b0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xdcd7));
        // EA 0144
        gbc.setState(0x9a61, 0xf9fb, 0x2400, 0xff9c, 0xb14, 0x5197, 0x0, 0x1);
        gbc.writeMem(0x8f10, { 0x0 });
        gbc.writeMem(0x9a61, { 0xea, 0x10, 0x8f });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xf9fb, gbc.sp());
        EXPECT(0x9a64, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0x8f10));
        EXPECT(0xea, gbc.readMem(0x9a61));
        EXPECT(0x10, gbc.readMem(0x9a62));
        EXPECT(0x8f, gbc.readMem(0x9a63));
        // EA 0145
        gbc.setState(0x8be9, 0xc681, 0x9ef0, 0x92b2, 0xf4f8, 0x7d2f, 0x1, 0x1);
        gbc.writeMem(0x8be9, { 0xea, 0xd6, 0xb8 });
        gbc.writeMem(0xb8d6, { 0x0 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xc681, gbc.sp());
        EXPECT(0x8bec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8be9));
        EXPECT(0xd6, gbc.readMem(0x8bea));
        EXPECT(0xb8, gbc.readMem(0x8beb));
        EXPECT(0x9e, gbc.readMem(0xb8d6));
        // EA 0146
        gbc.setState(0x92ec, 0xe4ba, 0x51a0, 0x77ba, 0x552c, 0x39, 0x0, 0x0);
        gbc.writeMem(0x92ec, { 0xea, 0x71, 0x96 });
        gbc.writeMem(0x9671, { 0x0 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xe4ba, gbc.sp());
        EXPECT(0x92ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x92ec));
        EXPECT(0x71, gbc.readMem(0x92ed));
        EXPECT(0x96, gbc.readMem(0x92ee));
        EXPECT(0x51, gbc.readMem(0x9671));
        // EA 0147
        gbc.setState(0xda0a, 0xe31e, 0xe310, 0x8ef0, 0xfda8, 0x834a, 0x0, 0x0);
        gbc.writeMem(0x9338, { 0x0 });
        gbc.writeMem(0xda0a, { 0xea, 0x38, 0x93 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xe31e, gbc.sp());
        EXPECT(0xda0d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe3, gbc.readMem(0x9338));
        EXPECT(0xea, gbc.readMem(0xda0a));
        EXPECT(0x38, gbc.readMem(0xda0b));
        EXPECT(0x93, gbc.readMem(0xda0c));
        // EA 014B
        gbc.setState(0x9cb6, 0xf194, 0x17f0, 0x46d2, 0x846d, 0xaf3b, 0x0, 0x1);
        gbc.writeMem(0x9cb6, { 0xea, 0x3d, 0xd4 });
        gbc.writeMem(0xd43d, { 0x0 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xf194, gbc.sp());
        EXPECT(0x9cb9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9cb6));
        EXPECT(0x3d, gbc.readMem(0x9cb7));
        EXPECT(0xd4, gbc.readMem(0x9cb8));
        EXPECT(0x17, gbc.readMem(0xd43d));
        // EA 014C
        gbc.setState(0x4de, 0xe1db, 0x71a0, 0x17e8, 0x63b1, 0xcc55, 0x1, 0x0);
        gbc.writeMem(0x4de, { 0xea, 0x88, 0xc7 });
        gbc.writeMem(0xc788, { 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xe1db, gbc.sp());
        EXPECT(0x4e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x71, gbc.readMem(0xc788));
        // EA 014D
        gbc.setState(0x2398, 0x1079, 0xb80, 0x62db, 0x5f11, 0x8dcd, 0x1, 0x1);
        gbc.writeMem(0x2398, { 0xea, 0xde, 0xef });
        gbc.writeMem(0xefde, { 0x0 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x1079, gbc.sp());
        EXPECT(0x239b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb, gbc.readMem(0xefde));
        // EA 014E
        gbc.setState(0x561b, 0xf4e7, 0xffd0, 0xdc56, 0xb948, 0x6d03, 0x1, 0x1);
        gbc.writeMem(0x561b, { 0xea, 0x4d, 0x81 });
        gbc.writeMem(0x814d, { 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xf4e7, gbc.sp());
        EXPECT(0x561e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xff, gbc.readMem(0x814d));
        // EA 0152
        gbc.setState(0x2caf, 0x4e7b, 0x59d0, 0x95b, 0xab9b, 0x53c5, 0x1, 0x1);
        gbc.writeMem(0x2caf, { 0xea, 0x79, 0xf0 });
        gbc.writeMem(0xf079, { 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x4e7b, gbc.sp());
        EXPECT(0x2cb2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x59, gbc.readMem(0xf079));
        // EA 0153
        gbc.setState(0xd501, 0x9701, 0x1a80, 0xd67e, 0xe2bb, 0x30a6, 0x0, 0x1);
        gbc.writeMem(0xd501, { 0xea, 0x19, 0xd6 });
        gbc.writeMem(0xd619, { 0x0 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x9701, gbc.sp());
        EXPECT(0xd504, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xd501));
        EXPECT(0x19, gbc.readMem(0xd502));
        EXPECT(0xd6, gbc.readMem(0xd503));
        EXPECT(0x1a, gbc.readMem(0xd619));
        // EA 0154
        gbc.setState(0x8627, 0xa703, 0x8980, 0xedc, 0x8055, 0x2bc6, 0x1, 0x1);
        gbc.writeMem(0x8627, { 0xea, 0xea, 0xb9 });
        gbc.writeMem(0xb9ea, { 0x0 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xa703, gbc.sp());
        EXPECT(0x862a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8627));
        EXPECT(0xea, gbc.readMem(0x8628));
        EXPECT(0xb9, gbc.readMem(0x8629));
        EXPECT(0x89, gbc.readMem(0xb9ea));
        // EA 0158
        gbc.setState(0x8141, 0x9e17, 0xa670, 0xa70, 0xb4fe, 0x12f3, 0x1, 0x0);
        gbc.writeMem(0x8141, { 0xea, 0x19, 0x82 });
        gbc.writeMem(0x8219, { 0x0 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x9e17, gbc.sp());
        EXPECT(0x8144, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8141));
        EXPECT(0x19, gbc.readMem(0x8142));
        EXPECT(0x82, gbc.readMem(0x8143));
        EXPECT(0xa6, gbc.readMem(0x8219));
        // EA 0159
        gbc.setState(0x1621, 0x3383, 0x2a00, 0x1147, 0x1ec, 0x9239, 0x1, 0x0);
        gbc.writeMem(0x1621, { 0xea, 0x76, 0xec });
        gbc.writeMem(0xec76, { 0x0 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x3383, gbc.sp());
        EXPECT(0x1624, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0xec76));
        // EA 015C
        gbc.setState(0x550, 0xaa2c, 0x90d0, 0x62c6, 0xbe39, 0x21ab, 0x1, 0x1);
        gbc.writeMem(0x550, { 0xea, 0x6c, 0x96 });
        gbc.writeMem(0x966c, { 0x0 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xaa2c, gbc.sp());
        EXPECT(0x553, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0x966c));
        // EA 015E
        gbc.setState(0xc973, 0x5a63, 0x1b20, 0x84be, 0x5c1e, 0xcc01, 0x1, 0x1);
        gbc.writeMem(0xbeee, { 0x0 });
        gbc.writeMem(0xc973, { 0xea, 0xee, 0xbe });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x5a63, gbc.sp());
        EXPECT(0xc976, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1b, gbc.readMem(0xbeee));
        EXPECT(0xea, gbc.readMem(0xc973));
        EXPECT(0xee, gbc.readMem(0xc974));
        EXPECT(0xbe, gbc.readMem(0xc975));
        // EA 0161
        gbc.setState(0x5bec, 0x35e7, 0x8a40, 0x26ef, 0xc4a6, 0x129e, 0x1, 0x0);
        gbc.writeMem(0x5bec, { 0xea, 0x28, 0xe5 });
        gbc.writeMem(0xe528, { 0x0 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x35e7, gbc.sp());
        EXPECT(0x5bef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8a, gbc.readMem(0xe528));
        // EA 0163
        gbc.setState(0x5e52, 0x7ee2, 0x5ca0, 0xa841, 0xcdc, 0xfd56, 0x0, 0x0);
        gbc.writeMem(0x5e52, { 0xea, 0x84, 0xe0 });
        gbc.writeMem(0xe084, { 0x0 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x7ee2, gbc.sp());
        EXPECT(0x5e55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5c, gbc.readMem(0xe084));
        // EA 0164
        gbc.setState(0xc0c7, 0xd732, 0x7950, 0x627c, 0x829f, 0x15cf, 0x0, 0x0);
        gbc.writeMem(0xa254, { 0x0 });
        gbc.writeMem(0xc0c7, { 0xea, 0x54, 0xa2 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xd732, gbc.sp());
        EXPECT(0xc0ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x79, gbc.readMem(0xa254));
        EXPECT(0xea, gbc.readMem(0xc0c7));
        EXPECT(0x54, gbc.readMem(0xc0c8));
        EXPECT(0xa2, gbc.readMem(0xc0c9));
        // EA 0165
        gbc.setState(0x2a46, 0x5751, 0xd200, 0x914e, 0x24c8, 0xefad, 0x1, 0x1);
        gbc.writeMem(0x2a46, { 0xea, 0xc3, 0xcd });
        gbc.writeMem(0xcdc3, { 0x0 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x5751, gbc.sp());
        EXPECT(0x2a49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0xcdc3));
        // EA 0167
        gbc.setState(0x9536, 0x648b, 0xff20, 0x8177, 0xba52, 0x419, 0x0, 0x1);
        gbc.writeMem(0x9536, { 0xea, 0x64, 0xd1 });
        gbc.writeMem(0xd164, { 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x648b, gbc.sp());
        EXPECT(0x9539, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9536));
        EXPECT(0x64, gbc.readMem(0x9537));
        EXPECT(0xd1, gbc.readMem(0x9538));
        EXPECT(0xff, gbc.readMem(0xd164));
        // EA 0168
        gbc.setState(0xcd87, 0x89a5, 0xd4d0, 0x6992, 0x18f7, 0x6596, 0x0, 0x1);
        gbc.writeMem(0xcc94, { 0x0 });
        gbc.writeMem(0xcd87, { 0xea, 0x94, 0xcc });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x89a5, gbc.sp());
        EXPECT(0xcd8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd4, gbc.readMem(0xcc94));
        EXPECT(0xea, gbc.readMem(0xcd87));
        EXPECT(0x94, gbc.readMem(0xcd88));
        EXPECT(0xcc, gbc.readMem(0xcd89));
        // EA 0169
        gbc.setState(0x4536, 0xa171, 0xef70, 0xf362, 0x9fee, 0x5f73, 0x0, 0x0);
        gbc.writeMem(0x4536, { 0xea, 0x3a, 0x8b });
        gbc.writeMem(0x8b3a, { 0x0 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xa171, gbc.sp());
        EXPECT(0x4539, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xef, gbc.readMem(0x8b3a));
        // EA 016A
        gbc.setState(0x283c, 0xeb2c, 0xdc0, 0xe5e1, 0x81f9, 0x5477, 0x1, 0x1);
        gbc.writeMem(0x283c, { 0xea, 0xe9, 0x8b });
        gbc.writeMem(0x8be9, { 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xeb2c, gbc.sp());
        EXPECT(0x283f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd, gbc.readMem(0x8be9));
        // EA 016B
        gbc.setState(0xed96, 0xb5a6, 0xcca0, 0xb780, 0x681e, 0x660d, 0x0, 0x0);
        gbc.writeMem(0xcbd8, { 0x0 });
        gbc.writeMem(0xed96, { 0xea, 0xd8, 0xcb });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xb5a6, gbc.sp());
        EXPECT(0xed99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcbd8));
        EXPECT(0xea, gbc.readMem(0xed96));
        EXPECT(0xd8, gbc.readMem(0xed97));
        EXPECT(0xcb, gbc.readMem(0xed98));
        // EA 016C
        gbc.setState(0x67bb, 0x6796, 0xb6e0, 0x8d06, 0x59e0, 0x364c, 0x0, 0x0);
        gbc.writeMem(0x67bb, { 0xea, 0x7f, 0x99 });
        gbc.writeMem(0x997f, { 0x0 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x6796, gbc.sp());
        EXPECT(0x67be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0x997f));
        // EA 016D
        gbc.setState(0xaa91, 0x9622, 0xd290, 0xe573, 0xdbb1, 0xd412, 0x1, 0x0);
        gbc.writeMem(0xaa91, { 0xea, 0x96, 0xb2 });
        gbc.writeMem(0xb296, { 0x0 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x9622, gbc.sp());
        EXPECT(0xaa94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xaa91));
        EXPECT(0x96, gbc.readMem(0xaa92));
        EXPECT(0xb2, gbc.readMem(0xaa93));
        EXPECT(0xd2, gbc.readMem(0xb296));
        // EA 016E
        gbc.setState(0x6e5c, 0x6c1d, 0x12a0, 0xc939, 0x5ae, 0x1ce0, 0x0, 0x1);
        gbc.writeMem(0x6e5c, { 0xea, 0x7e, 0xb2 });
        gbc.writeMem(0xb27e, { 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x6c1d, gbc.sp());
        EXPECT(0x6e5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0xb27e));
        // EA 0171
        gbc.setState(0x63ed, 0x5e42, 0x25c0, 0x12ef, 0x9721, 0x8e32, 0x0, 0x1);
        gbc.writeMem(0x63ed, { 0xea, 0x24, 0xea });
        gbc.writeMem(0xea24, { 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x5e42, gbc.sp());
        EXPECT(0x63f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x25, gbc.readMem(0xea24));
        // EA 0173
        gbc.setState(0x83ac, 0x3f36, 0x9020, 0xf366, 0xc26b, 0x805e, 0x0, 0x1);
        gbc.writeMem(0x83ac, { 0xea, 0x18, 0x8d });
        gbc.writeMem(0x8d18, { 0x0 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x3f36, gbc.sp());
        EXPECT(0x83af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x83ac));
        EXPECT(0x18, gbc.readMem(0x83ad));
        EXPECT(0x8d, gbc.readMem(0x83ae));
        EXPECT(0x90, gbc.readMem(0x8d18));
        // EA 0174
        gbc.setState(0x9118, 0x5ad8, 0x7bd0, 0x4a84, 0x5567, 0xb41f, 0x1, 0x0);
        gbc.writeMem(0x9118, { 0xea, 0x16, 0xa8 });
        gbc.writeMem(0xa816, { 0x0 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x5ad8, gbc.sp());
        EXPECT(0x911b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9118));
        EXPECT(0x16, gbc.readMem(0x9119));
        EXPECT(0xa8, gbc.readMem(0x911a));
        EXPECT(0x7b, gbc.readMem(0xa816));
        // EA 0175
        gbc.setState(0xccfe, 0x4e80, 0x3030, 0xf21a, 0x70ee, 0xc599, 0x1, 0x1);
        gbc.writeMem(0xbe04, { 0x0 });
        gbc.writeMem(0xccfe, { 0xea, 0x4, 0xbe });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x4e80, gbc.sp());
        EXPECT(0xcd01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x30, gbc.readMem(0xbe04));
        EXPECT(0xea, gbc.readMem(0xccfe));
        EXPECT(0x4, gbc.readMem(0xccff));
        EXPECT(0xbe, gbc.readMem(0xcd00));
        // EA 0177
        gbc.setState(0xa1bf, 0xb8a9, 0x2200, 0xb25f, 0x460, 0x197f, 0x0, 0x0);
        gbc.writeMem(0xa1bf, { 0xea, 0x82, 0xf8 });
        gbc.writeMem(0xf882, { 0x0 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xb8a9, gbc.sp());
        EXPECT(0xa1c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa1bf));
        EXPECT(0x82, gbc.readMem(0xa1c0));
        EXPECT(0xf8, gbc.readMem(0xa1c1));
        EXPECT(0x22, gbc.readMem(0xf882));
        // EA 0178
        gbc.setState(0x19ce, 0xdf63, 0x39c0, 0xa6b9, 0x83d8, 0x779, 0x0, 0x0);
        gbc.writeMem(0x19ce, { 0xea, 0xb4, 0xb1 });
        gbc.writeMem(0xb1b4, { 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xdf63, gbc.sp());
        EXPECT(0x19d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x39, gbc.readMem(0xb1b4));
        // EA 017B
        gbc.setState(0xa461, 0x7848, 0x6310, 0xf944, 0xe275, 0xa49f, 0x1, 0x0);
        gbc.writeMem(0x80b7, { 0x0 });
        gbc.writeMem(0xa461, { 0xea, 0xb7, 0x80 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x7848, gbc.sp());
        EXPECT(0xa464, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x63, gbc.readMem(0x80b7));
        EXPECT(0xea, gbc.readMem(0xa461));
        EXPECT(0xb7, gbc.readMem(0xa462));
        EXPECT(0x80, gbc.readMem(0xa463));
        // EA 017E
        gbc.setState(0x12a5, 0x4b79, 0xf240, 0xd741, 0x26f9, 0x6b5b, 0x1, 0x0);
        gbc.writeMem(0x12a5, { 0xea, 0x88, 0x84 });
        gbc.writeMem(0x8488, { 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x4b79, gbc.sp());
        EXPECT(0x12a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0x8488));
        // EA 0180
        gbc.setState(0x791a, 0xea4b, 0xc430, 0x8712, 0xde94, 0xa195, 0x0, 0x0);
        gbc.writeMem(0x791a, { 0xea, 0x3e, 0xa9 });
        gbc.writeMem(0xa93e, { 0x0 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xea4b, gbc.sp());
        EXPECT(0x791d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xa93e));
        // EA 0182
        gbc.setState(0x469a, 0xefb5, 0xce00, 0x5d9b, 0xba16, 0x2c9c, 0x0, 0x0);
        gbc.writeMem(0x469a, { 0xea, 0xd2, 0xbe });
        gbc.writeMem(0xbed2, { 0x0 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xefb5, gbc.sp());
        EXPECT(0x469d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0xbed2));
        // EA 0183
        gbc.setState(0x618c, 0xec89, 0x3b90, 0x14bd, 0x2290, 0xe191, 0x1, 0x0);
        gbc.writeMem(0x618c, { 0xea, 0xb3, 0xc5 });
        gbc.writeMem(0xc5b3, { 0x0 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xec89, gbc.sp());
        EXPECT(0x618f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3b, gbc.readMem(0xc5b3));
        // EA 0185
        gbc.setState(0x81fe, 0xe4f6, 0xa910, 0x6b67, 0x37bc, 0x7b21, 0x0, 0x1);
        gbc.writeMem(0x81fe, { 0xea, 0x2e, 0xdc });
        gbc.writeMem(0xdc2e, { 0x0 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xe4f6, gbc.sp());
        EXPECT(0x8201, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x81fe));
        EXPECT(0x2e, gbc.readMem(0x81ff));
        EXPECT(0xdc, gbc.readMem(0x8200));
        EXPECT(0xa9, gbc.readMem(0xdc2e));
        // EA 0188
        gbc.setState(0x23d6, 0x789b, 0x1e90, 0xb16b, 0x6dfc, 0xdf1a, 0x1, 0x1);
        gbc.writeMem(0x23d6, { 0xea, 0x69, 0x9e });
        gbc.writeMem(0x9e69, { 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x789b, gbc.sp());
        EXPECT(0x23d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1e, gbc.readMem(0x9e69));
        // EA 0189
        gbc.setState(0xd3, 0x57b2, 0xede0, 0xb116, 0xfe94, 0xf779, 0x0, 0x0);
        gbc.writeMem(0xd3, { 0xea, 0xda, 0x94 });
        gbc.writeMem(0x94da, { 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x57b2, gbc.sp());
        EXPECT(0xd6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xed, gbc.readMem(0x94da));
        // EA 018A
        gbc.setState(0x483b, 0xde7b, 0xaac0, 0xd9c7, 0x7b6, 0xcc49, 0x0, 0x0);
        gbc.writeMem(0x483b, { 0xea, 0x91, 0xab });
        gbc.writeMem(0xab91, { 0x0 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xde7b, gbc.sp());
        EXPECT(0x483e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaa, gbc.readMem(0xab91));
        // EA 018D
        gbc.setState(0xd208, 0x704b, 0xc620, 0xa187, 0x3152, 0x460e, 0x0, 0x0);
        gbc.writeMem(0xbeca, { 0x0 });
        gbc.writeMem(0xd208, { 0xea, 0xca, 0xbe });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x704b, gbc.sp());
        EXPECT(0xd20b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc6, gbc.readMem(0xbeca));
        EXPECT(0xea, gbc.readMem(0xd208));
        EXPECT(0xca, gbc.readMem(0xd209));
        EXPECT(0xbe, gbc.readMem(0xd20a));
        // EA 018E
        gbc.setState(0x7ba, 0x75f8, 0xe500, 0x1f84, 0xcc42, 0x990a, 0x1, 0x0);
        gbc.writeMem(0x7ba, { 0xea, 0x83, 0xce });
        gbc.writeMem(0xce83, { 0x0 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x75f8, gbc.sp());
        EXPECT(0x7bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe5, gbc.readMem(0xce83));
        // EA 018F
        gbc.setState(0xd589, 0xd8ee, 0x35e0, 0x8f06, 0x6515, 0xb913, 0x0, 0x1);
        gbc.writeMem(0x88bd, { 0x0 });
        gbc.writeMem(0xd589, { 0xea, 0xbd, 0x88 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xd8ee, gbc.sp());
        EXPECT(0xd58c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x35, gbc.readMem(0x88bd));
        EXPECT(0xea, gbc.readMem(0xd589));
        EXPECT(0xbd, gbc.readMem(0xd58a));
        EXPECT(0x88, gbc.readMem(0xd58b));
        // EA 0191
        gbc.setState(0xac50, 0xeec4, 0xcac0, 0xa649, 0xc6e2, 0x15b9, 0x1, 0x0);
        gbc.writeMem(0x87ff, { 0x0 });
        gbc.writeMem(0xac50, { 0xea, 0xff, 0x87 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xeec4, gbc.sp());
        EXPECT(0xac53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0x87ff));
        EXPECT(0xea, gbc.readMem(0xac50));
        EXPECT(0xff, gbc.readMem(0xac51));
        EXPECT(0x87, gbc.readMem(0xac52));
        // EA 0194
        gbc.setState(0xce4b, 0xec22, 0xd600, 0x1ca2, 0x376f, 0x7b5c, 0x0, 0x1);
        gbc.writeMem(0xce4b, { 0xea, 0x14, 0xf2 });
        gbc.writeMem(0xf214, { 0x0 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xec22, gbc.sp());
        EXPECT(0xce4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xce4b));
        EXPECT(0x14, gbc.readMem(0xce4c));
        EXPECT(0xf2, gbc.readMem(0xce4d));
        EXPECT(0xd6, gbc.readMem(0xf214));
        // EA 0196
        gbc.setState(0x57fc, 0x3b9d, 0x2960, 0x2ff9, 0x6b7f, 0xbd42, 0x0, 0x0);
        gbc.writeMem(0x57fc, { 0xea, 0x6f, 0xc5 });
        gbc.writeMem(0xc56f, { 0x0 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x3b9d, gbc.sp());
        EXPECT(0x57ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x29, gbc.readMem(0xc56f));
        // EA 0197
        gbc.setState(0xde6e, 0x9019, 0x1f70, 0x11a8, 0x1cf5, 0x4407, 0x0, 0x1);
        gbc.writeMem(0xbf91, { 0x0 });
        gbc.writeMem(0xde6e, { 0xea, 0x91, 0xbf });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x9019, gbc.sp());
        EXPECT(0xde71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1f, gbc.readMem(0xbf91));
        EXPECT(0xea, gbc.readMem(0xde6e));
        EXPECT(0x91, gbc.readMem(0xde6f));
        EXPECT(0xbf, gbc.readMem(0xde70));
        // EA 0198
        gbc.setState(0x59b7, 0x28da, 0x1e90, 0x13df, 0xd0c3, 0xebe1, 0x1, 0x0);
        gbc.writeMem(0x59b7, { 0xea, 0xe2, 0xec });
        gbc.writeMem(0xece2, { 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x28da, gbc.sp());
        EXPECT(0x59ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1e, gbc.readMem(0xece2));
        // EA 019A
        gbc.setState(0x6e0d, 0x979b, 0x8680, 0x12a2, 0xf324, 0x66b0, 0x1, 0x0);
        gbc.writeMem(0x6e0d, { 0xea, 0x7, 0xfe });
        gbc.writeMem(0xfe07, { 0x0 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x979b, gbc.sp());
        EXPECT(0x6e10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xfe07));
        // EA 019E
        gbc.setState(0x5dba, 0x4e69, 0x7670, 0x41b9, 0xbbd9, 0x5554, 0x1, 0x0);
        gbc.writeMem(0x5dba, { 0xea, 0xfb, 0xf9 });
        gbc.writeMem(0xf9fb, { 0x0 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x4e69, gbc.sp());
        EXPECT(0x5dbd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x76, gbc.readMem(0xf9fb));
        // EA 019F
        gbc.setState(0x93f2, 0x6c2c, 0xbd20, 0x7b6f, 0x44a9, 0x8af2, 0x0, 0x1);
        gbc.writeMem(0x93f2, { 0xea, 0x46, 0xe7 });
        gbc.writeMem(0xe746, { 0x0 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x6c2c, gbc.sp());
        EXPECT(0x93f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x93f2));
        EXPECT(0x46, gbc.readMem(0x93f3));
        EXPECT(0xe7, gbc.readMem(0x93f4));
        EXPECT(0xbd, gbc.readMem(0xe746));
        // EA 01A1
        gbc.setState(0xc7f1, 0x63d3, 0x1e40, 0xeca5, 0x6499, 0xaf7f, 0x1, 0x0);
        gbc.writeMem(0xc7f1, { 0xea, 0x84, 0xfc });
        gbc.writeMem(0xfc84, { 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x63d3, gbc.sp());
        EXPECT(0xc7f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc7f1));
        EXPECT(0x84, gbc.readMem(0xc7f2));
        EXPECT(0xfc, gbc.readMem(0xc7f3));
        EXPECT(0x1e, gbc.readMem(0xfc84));
        // EA 01A4
        gbc.setState(0x7197, 0x7e5a, 0xdba0, 0x1566, 0xaffa, 0xfe89, 0x0, 0x0);
        gbc.writeMem(0x7197, { 0xea, 0xd2, 0xf0 });
        gbc.writeMem(0xf0d2, { 0x0 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x7e5a, gbc.sp());
        EXPECT(0x719a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdb, gbc.readMem(0xf0d2));
        // EA 01A9
        gbc.setState(0xc991, 0x7692, 0x23e0, 0x4280, 0xcf0a, 0x95f5, 0x1, 0x1);
        gbc.writeMem(0xb981, { 0x0 });
        gbc.writeMem(0xc991, { 0xea, 0x81, 0xb9 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x7692, gbc.sp());
        EXPECT(0xc994, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0xb981));
        EXPECT(0xea, gbc.readMem(0xc991));
        EXPECT(0x81, gbc.readMem(0xc992));
        EXPECT(0xb9, gbc.readMem(0xc993));
        // EA 01AA
        gbc.setState(0xa375, 0x1065, 0x10e0, 0x99df, 0xf1f1, 0xf6e6, 0x0, 0x1);
        gbc.writeMem(0xa375, { 0xea, 0x3d, 0xba });
        gbc.writeMem(0xba3d, { 0x0 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x1065, gbc.sp());
        EXPECT(0xa378, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa375));
        EXPECT(0x3d, gbc.readMem(0xa376));
        EXPECT(0xba, gbc.readMem(0xa377));
        EXPECT(0x10, gbc.readMem(0xba3d));
        // EA 01AC
        gbc.setState(0x12b1, 0xbead, 0x98f0, 0x1ec5, 0xfac, 0x2fa5, 0x0, 0x0);
        gbc.writeMem(0x12b1, { 0xea, 0x9a, 0xad });
        gbc.writeMem(0xad9a, { 0x0 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xbead, gbc.sp());
        EXPECT(0x12b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0xad9a));
        // EA 01AF
        gbc.setState(0x36a, 0xff8e, 0xc630, 0x14bc, 0x4396, 0x471f, 0x1, 0x0);
        gbc.writeMem(0x36a, { 0xea, 0xf6, 0xb3 });
        gbc.writeMem(0xb3f6, { 0x0 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xff8e, gbc.sp());
        EXPECT(0x36d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc6, gbc.readMem(0xb3f6));
        // EA 01B5
        gbc.setState(0x8380, 0x8bf, 0x1d10, 0xd1c1, 0x4530, 0x31e3, 0x0, 0x0);
        gbc.writeMem(0x8380, { 0xea, 0x36, 0xd1 });
        gbc.writeMem(0xd136, { 0x0 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x8bf, gbc.sp());
        EXPECT(0x8383, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8380));
        EXPECT(0x36, gbc.readMem(0x8381));
        EXPECT(0xd1, gbc.readMem(0x8382));
        EXPECT(0x1d, gbc.readMem(0xd136));
        // EA 01B6
        gbc.setState(0x5e39, 0xab5e, 0x6e50, 0xf773, 0x8ea2, 0x556d, 0x1, 0x1);
        gbc.writeMem(0x5e39, { 0xea, 0x20, 0xcb });
        gbc.writeMem(0xcb20, { 0x0 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xab5e, gbc.sp());
        EXPECT(0x5e3c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6e, gbc.readMem(0xcb20));
        // EA 01B7
        gbc.setState(0xa359, 0xe7d6, 0x3da0, 0x321c, 0x409a, 0x14a4, 0x1, 0x0);
        gbc.writeMem(0xa359, { 0xea, 0x73, 0xd2 });
        gbc.writeMem(0xd273, { 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xe7d6, gbc.sp());
        EXPECT(0xa35c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa359));
        EXPECT(0x73, gbc.readMem(0xa35a));
        EXPECT(0xd2, gbc.readMem(0xa35b));
        EXPECT(0x3d, gbc.readMem(0xd273));
        // EA 01B8
        gbc.setState(0x8ad6, 0x57be, 0x6600, 0xdbda, 0xb348, 0x88c6, 0x1, 0x1);
        gbc.writeMem(0x8ad6, { 0xea, 0x8c, 0x91 });
        gbc.writeMem(0x918c, { 0x0 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x57be, gbc.sp());
        EXPECT(0x8ad9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8ad6));
        EXPECT(0x8c, gbc.readMem(0x8ad7));
        EXPECT(0x91, gbc.readMem(0x8ad8));
        EXPECT(0x66, gbc.readMem(0x918c));
        // EA 01B9
        gbc.setState(0x9d09, 0x8ec2, 0x6970, 0xb231, 0xb732, 0xd6a4, 0x1, 0x1);
        gbc.writeMem(0x9d09, { 0xea, 0x74, 0xaa });
        gbc.writeMem(0xaa74, { 0x0 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x8ec2, gbc.sp());
        EXPECT(0x9d0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9d09));
        EXPECT(0x74, gbc.readMem(0x9d0a));
        EXPECT(0xaa, gbc.readMem(0x9d0b));
        EXPECT(0x69, gbc.readMem(0xaa74));
        // EA 01BA
        gbc.setState(0xb246, 0x816d, 0x9a70, 0x5719, 0x8ad1, 0x8ec4, 0x0, 0x0);
        gbc.writeMem(0xb246, { 0xea, 0xef, 0xb2 });
        gbc.writeMem(0xb2ef, { 0x0 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x816d, gbc.sp());
        EXPECT(0xb249, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xb246));
        EXPECT(0xef, gbc.readMem(0xb247));
        EXPECT(0xb2, gbc.readMem(0xb248));
        EXPECT(0x9a, gbc.readMem(0xb2ef));
        // EA 01BB
        gbc.setState(0x244d, 0x8ab3, 0xa040, 0x13, 0x2fdd, 0x7060, 0x1, 0x0);
        gbc.writeMem(0x244d, { 0xea, 0x39, 0x92 });
        gbc.writeMem(0x9239, { 0x0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x8ab3, gbc.sp());
        EXPECT(0x2450, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0x9239));
        // EA 01BD
        gbc.setState(0x60ab, 0x9b3b, 0x4820, 0x16e3, 0xc2a2, 0x332f, 0x1, 0x0);
        gbc.writeMem(0x60ab, { 0xea, 0x1c, 0x82 });
        gbc.writeMem(0x821c, { 0x0 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x9b3b, gbc.sp());
        EXPECT(0x60ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0x821c));
        // EA 01BF
        gbc.setState(0x72a8, 0x7dba, 0xd0, 0x7f7e, 0xec05, 0x8608, 0x1, 0x1);
        gbc.writeMem(0x3310, { 0x0 });
        gbc.writeMem(0x72a8, { 0xea, 0x10, 0x33 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x7dba, gbc.sp());
        EXPECT(0x72ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // EA 01C1
        gbc.setState(0x72be, 0x4ef0, 0x6ab0, 0xd89d, 0xa451, 0x64b, 0x1, 0x0);
        gbc.writeMem(0x72be, { 0xea, 0xac, 0xf5 });
        gbc.writeMem(0xf5ac, { 0x0 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x4ef0, gbc.sp());
        EXPECT(0x72c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6a, gbc.readMem(0xf5ac));
        // EA 01C2
        gbc.setState(0x6383, 0x64fd, 0xe910, 0x14aa, 0x91c5, 0xcbb5, 0x1, 0x1);
        gbc.writeMem(0x6383, { 0xea, 0x59, 0xef });
        gbc.writeMem(0xef59, { 0x0 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x64fd, gbc.sp());
        EXPECT(0x6386, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe9, gbc.readMem(0xef59));
        // EA 01C5
        gbc.setState(0x2c1f, 0xbccd, 0xbf00, 0xe327, 0xdff, 0x6d69, 0x1, 0x1);
        gbc.writeMem(0x2c1f, { 0xea, 0x1b, 0xc5 });
        gbc.writeMem(0xc51b, { 0x0 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xbccd, gbc.sp());
        EXPECT(0x2c22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbf, gbc.readMem(0xc51b));
        // EA 01C6
        gbc.setState(0x9a8c, 0xd6a3, 0xe1a0, 0x3393, 0x1be0, 0xc97f, 0x0, 0x1);
        gbc.writeMem(0x894f, { 0x0 });
        gbc.writeMem(0x9a8c, { 0xea, 0x4f, 0x89 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xd6a3, gbc.sp());
        EXPECT(0x9a8f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe1, gbc.readMem(0x894f));
        EXPECT(0xea, gbc.readMem(0x9a8c));
        EXPECT(0x4f, gbc.readMem(0x9a8d));
        EXPECT(0x89, gbc.readMem(0x9a8e));
        // EA 01C8
        gbc.setState(0x2eec, 0x613f, 0xc7f0, 0x193c, 0xe586, 0x47bf, 0x0, 0x1);
        gbc.writeMem(0x2eec, { 0xea, 0x85, 0xf6 });
        gbc.writeMem(0xf685, { 0x0 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x613f, gbc.sp());
        EXPECT(0x2eef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc7, gbc.readMem(0xf685));
        // EA 01C9
        gbc.setState(0x2dcc, 0x215d, 0x70a0, 0x7ebe, 0x94f9, 0xce40, 0x1, 0x0);
        gbc.writeMem(0x2dcc, { 0xea, 0xd4, 0xbd });
        gbc.writeMem(0xbdd4, { 0x0 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x215d, gbc.sp());
        EXPECT(0x2dcf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x70, gbc.readMem(0xbdd4));
        // EA 01CA
        gbc.setState(0xb46c, 0x7d75, 0xdff0, 0x8fe4, 0xd390, 0x579e, 0x0, 0x0);
        gbc.writeMem(0x9904, { 0x0 });
        gbc.writeMem(0xb46c, { 0xea, 0x4, 0x99 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x7d75, gbc.sp());
        EXPECT(0xb46f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9904));
        EXPECT(0xea, gbc.readMem(0xb46c));
        EXPECT(0x4, gbc.readMem(0xb46d));
        EXPECT(0x99, gbc.readMem(0xb46e));
        // EA 01CC
        gbc.setState(0x1fce, 0x59d3, 0x6c80, 0xf34b, 0x3b0b, 0xccf, 0x1, 0x0);
        gbc.writeMem(0x1fce, { 0xea, 0xd1, 0x9b });
        gbc.writeMem(0x9bd1, { 0x0 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x59d3, gbc.sp());
        EXPECT(0x1fd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6c, gbc.readMem(0x9bd1));
        // EA 01CE
        gbc.setState(0x89d6, 0xbd10, 0xf700, 0x1916, 0x5fc8, 0x2faa, 0x0, 0x0);
        gbc.writeMem(0x89d6, { 0xea, 0x73, 0xc0 });
        gbc.writeMem(0xc073, { 0x0 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xbd10, gbc.sp());
        EXPECT(0x89d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x89d6));
        EXPECT(0x73, gbc.readMem(0x89d7));
        EXPECT(0xc0, gbc.readMem(0x89d8));
        EXPECT(0xf7, gbc.readMem(0xc073));
        // EA 01D0
        gbc.setState(0x82c3, 0x4336, 0xcee0, 0x53c6, 0xee37, 0x44dc, 0x0, 0x1);
        gbc.writeMem(0x82c3, { 0xea, 0xcb, 0xdc });
        gbc.writeMem(0xdccb, { 0x0 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x4336, gbc.sp());
        EXPECT(0x82c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x82c3));
        EXPECT(0xcb, gbc.readMem(0x82c4));
        EXPECT(0xdc, gbc.readMem(0x82c5));
        EXPECT(0xce, gbc.readMem(0xdccb));
        // EA 01D3
        gbc.setState(0xdcde, 0x1828, 0x9820, 0x6acd, 0xc6a0, 0x4afd, 0x0, 0x1);
        gbc.writeMem(0xd4cf, { 0x0 });
        gbc.writeMem(0xdcde, { 0xea, 0xcf, 0xd4 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x1828, gbc.sp());
        EXPECT(0xdce1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0xd4cf));
        EXPECT(0xea, gbc.readMem(0xdcde));
        EXPECT(0xcf, gbc.readMem(0xdcdf));
        EXPECT(0xd4, gbc.readMem(0xdce0));
        // EA 01D5
        gbc.setState(0xa3e1, 0x33c6, 0x4c80, 0xfc84, 0x2703, 0xaa4e, 0x1, 0x1);
        gbc.writeMem(0xa3e1, { 0xea, 0x9a, 0xbe });
        gbc.writeMem(0xbe9a, { 0x0 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x33c6, gbc.sp());
        EXPECT(0xa3e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa3e1));
        EXPECT(0x9a, gbc.readMem(0xa3e2));
        EXPECT(0xbe, gbc.readMem(0xa3e3));
        EXPECT(0x4c, gbc.readMem(0xbe9a));
        // EA 01D8
        gbc.setState(0x3b83, 0xde39, 0xd5a0, 0x5748, 0xd44f, 0xc44a, 0x1, 0x1);
        gbc.writeMem(0x3b83, { 0xea, 0xb2, 0x94 });
        gbc.writeMem(0x94b2, { 0x0 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xde39, gbc.sp());
        EXPECT(0x3b86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd5, gbc.readMem(0x94b2));
        // EA 01DA
        gbc.setState(0x8b71, 0xb396, 0x6ae0, 0x2023, 0xc619, 0x837b, 0x1, 0x1);
        gbc.writeMem(0x8b71, { 0xea, 0xe2, 0xd3 });
        gbc.writeMem(0xd3e2, { 0x0 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xb396, gbc.sp());
        EXPECT(0x8b74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8b71));
        EXPECT(0xe2, gbc.readMem(0x8b72));
        EXPECT(0xd3, gbc.readMem(0x8b73));
        EXPECT(0x6a, gbc.readMem(0xd3e2));
        // EA 01DB
        gbc.setState(0xd43f, 0xe621, 0x6200, 0xaddf, 0xe7ff, 0xc25d, 0x1, 0x1);
        gbc.writeMem(0xd43f, { 0xea, 0x27, 0xde });
        gbc.writeMem(0xde27, { 0x0 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xe621, gbc.sp());
        EXPECT(0xd442, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xd43f));
        EXPECT(0x27, gbc.readMem(0xd440));
        EXPECT(0xde, gbc.readMem(0xd441));
        EXPECT(0x62, gbc.readMem(0xde27));
        // EA 01DC
        gbc.setState(0xc23e, 0x816c, 0x9310, 0x1261, 0xa158, 0xb3f7, 0x0, 0x0);
        gbc.writeMem(0x8dc1, { 0x0 });
        gbc.writeMem(0xc23e, { 0xea, 0xc1, 0x8d });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x816c, gbc.sp());
        EXPECT(0xc241, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x93, gbc.readMem(0x8dc1));
        EXPECT(0xea, gbc.readMem(0xc23e));
        EXPECT(0xc1, gbc.readMem(0xc23f));
        EXPECT(0x8d, gbc.readMem(0xc240));
        // EA 01DE
        gbc.setState(0x2d55, 0x7fa8, 0x2630, 0x1838, 0x735c, 0x7d4f, 0x1, 0x1);
        gbc.writeMem(0x2d55, { 0xea, 0xd4, 0xc0 });
        gbc.writeMem(0xc0d4, { 0x0 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x7fa8, gbc.sp());
        EXPECT(0x2d58, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x26, gbc.readMem(0xc0d4));
        // EA 01DF
        gbc.setState(0x8255, 0xed7, 0x5380, 0x8ceb, 0xf155, 0x9a1d, 0x1, 0x1);
        gbc.writeMem(0x8255, { 0xea, 0xd, 0xda });
        gbc.writeMem(0xda0d, { 0x0 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xed7, gbc.sp());
        EXPECT(0x8258, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8255));
        EXPECT(0xd, gbc.readMem(0x8256));
        EXPECT(0xda, gbc.readMem(0x8257));
        EXPECT(0x53, gbc.readMem(0xda0d));
        // EA 01E0
        gbc.setState(0xe5d9, 0xaa3b, 0x2b10, 0x3f60, 0x4427, 0xb63e, 0x1, 0x0);
        gbc.writeMem(0xd80f, { 0x0 });
        gbc.writeMem(0xe5d9, { 0xea, 0xf, 0xd8 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xaa3b, gbc.sp());
        EXPECT(0xe5dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2b, gbc.readMem(0xd80f));
        EXPECT(0xea, gbc.readMem(0xe5d9));
        EXPECT(0xf, gbc.readMem(0xe5da));
        EXPECT(0xd8, gbc.readMem(0xe5db));
        // EA 01E1
        gbc.setState(0xed8d, 0xdf71, 0x7720, 0x37a2, 0xc501, 0x6009, 0x0, 0x0);
        gbc.writeMem(0xb044, { 0x0 });
        gbc.writeMem(0xed8d, { 0xea, 0x44, 0xb0 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xdf71, gbc.sp());
        EXPECT(0xed90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x77, gbc.readMem(0xb044));
        EXPECT(0xea, gbc.readMem(0xed8d));
        EXPECT(0x44, gbc.readMem(0xed8e));
        EXPECT(0xb0, gbc.readMem(0xed8f));
        // EA 01E3
        gbc.setState(0xeaee, 0x7ab6, 0xca10, 0xd27a, 0x97cd, 0x71c7, 0x1, 0x0);
        gbc.writeMem(0xeaee, { 0xea, 0x78, 0xff });
        gbc.writeMem(0xff78, { 0x0 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x7ab6, gbc.sp());
        EXPECT(0xeaf1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xeaee));
        EXPECT(0x78, gbc.readMem(0xeaef));
        EXPECT(0xff, gbc.readMem(0xeaf0));
        EXPECT(0xca, gbc.readMem(0xff78));
        // EA 01E4
        gbc.setState(0x75a3, 0x1228, 0x9320, 0x1270, 0xa529, 0xa892, 0x0, 0x0);
        gbc.writeMem(0x75a3, { 0xea, 0x31, 0x8c });
        gbc.writeMem(0x8c31, { 0x0 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x1228, gbc.sp());
        EXPECT(0x75a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x93, gbc.readMem(0x8c31));
        // EA 01E5
        gbc.setState(0x3a66, 0xeff5, 0xf2f0, 0x85ea, 0xec97, 0x6eb, 0x0, 0x0);
        gbc.writeMem(0x3a66, { 0xea, 0xd0, 0xf7 });
        gbc.writeMem(0xf7d0, { 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xeff5, gbc.sp());
        EXPECT(0x3a69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0xf7d0));
        // EA 01E7
        gbc.setState(0x9f17, 0xf0d7, 0xc0e0, 0xb011, 0x9196, 0x6ae6, 0x1, 0x1);
        gbc.writeMem(0x9f17, { 0xea, 0xc9, 0xb5 });
        gbc.writeMem(0xb5c9, { 0x0 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xf0d7, gbc.sp());
        EXPECT(0x9f1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9f17));
        EXPECT(0xc9, gbc.readMem(0x9f18));
        EXPECT(0xb5, gbc.readMem(0x9f19));
        EXPECT(0xc0, gbc.readMem(0xb5c9));
        // EA 01EA
        gbc.setState(0xd78f, 0xb55b, 0xf370, 0x4cf, 0xe06a, 0x881, 0x0, 0x0);
        gbc.writeMem(0xa7fc, { 0x0 });
        gbc.writeMem(0xd78f, { 0xea, 0xfc, 0xa7 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xb55b, gbc.sp());
        EXPECT(0xd792, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf3, gbc.readMem(0xa7fc));
        EXPECT(0xea, gbc.readMem(0xd78f));
        EXPECT(0xfc, gbc.readMem(0xd790));
        EXPECT(0xa7, gbc.readMem(0xd791));
        // EA 01ED
        gbc.setState(0x765a, 0x12c4, 0xe80, 0x4f16, 0x3627, 0x5e81, 0x0, 0x0);
        gbc.writeMem(0x765a, { 0xea, 0x50, 0x93 });
        gbc.writeMem(0x9350, { 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x12c4, gbc.sp());
        EXPECT(0x765d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe, gbc.readMem(0x9350));
        // EA 01EF
        gbc.setState(0x66ef, 0x8e4d, 0x1960, 0x540f, 0x6efd, 0x884f, 0x0, 0x1);
        gbc.writeMem(0x66ef, { 0xea, 0x16, 0xcd });
        gbc.writeMem(0xcd16, { 0x0 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x8e4d, gbc.sp());
        EXPECT(0x66f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x19, gbc.readMem(0xcd16));
        // EA 01F1
        gbc.setState(0x1018, 0x8657, 0xf730, 0x906c, 0x6a1a, 0xbb5e, 0x1, 0x1);
        gbc.writeMem(0x1018, { 0xea, 0x4, 0x91 });
        gbc.writeMem(0x9104, { 0x0 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x8657, gbc.sp());
        EXPECT(0x101b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf7, gbc.readMem(0x9104));
        // EA 01F3
        gbc.setState(0xbf7f, 0x74d3, 0x3fa0, 0x5f1d, 0x708a, 0xfd1f, 0x0, 0x1);
        gbc.writeMem(0xa38c, { 0x0 });
        gbc.writeMem(0xbf7f, { 0xea, 0x8c, 0xa3 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x74d3, gbc.sp());
        EXPECT(0xbf82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3f, gbc.readMem(0xa38c));
        EXPECT(0xea, gbc.readMem(0xbf7f));
        EXPECT(0x8c, gbc.readMem(0xbf80));
        EXPECT(0xa3, gbc.readMem(0xbf81));
        // EA 01F7
        gbc.setState(0x8c4e, 0xcdaa, 0x49b0, 0xf0aa, 0xf0a6, 0x6ce1, 0x1, 0x1);
        gbc.writeMem(0x8c4e, { 0xea, 0x84, 0xad });
        gbc.writeMem(0xad84, { 0x0 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xcdaa, gbc.sp());
        EXPECT(0x8c51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8c4e));
        EXPECT(0x84, gbc.readMem(0x8c4f));
        EXPECT(0xad, gbc.readMem(0x8c50));
        EXPECT(0x49, gbc.readMem(0xad84));
        // EA 01F8
        gbc.setState(0xcf5c, 0x62cb, 0xcc50, 0x4793, 0x7540, 0x49d6, 0x0, 0x0);
        gbc.writeMem(0xcf5c, { 0xea, 0xa0, 0xf0 });
        gbc.writeMem(0xf0a0, { 0x0 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x62cb, gbc.sp());
        EXPECT(0xcf5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xcf5c));
        EXPECT(0xa0, gbc.readMem(0xcf5d));
        EXPECT(0xf0, gbc.readMem(0xcf5e));
        EXPECT(0xcc, gbc.readMem(0xf0a0));
        // EA 01F9
        gbc.setState(0x875b, 0x3264, 0xa040, 0x659a, 0xed57, 0x6bc9, 0x1, 0x0);
        gbc.writeMem(0x875b, { 0xea, 0xf1, 0xbd });
        gbc.writeMem(0xbdf1, { 0x0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x3264, gbc.sp());
        EXPECT(0x875e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x875b));
        EXPECT(0xf1, gbc.readMem(0x875c));
        EXPECT(0xbd, gbc.readMem(0x875d));
        EXPECT(0xa0, gbc.readMem(0xbdf1));
        // EA 01FA
        gbc.setState(0xacbb, 0xbfea, 0x5920, 0xb359, 0x7c46, 0x5563, 0x0, 0x1);
        gbc.writeMem(0xacbb, { 0xea, 0xf1, 0xfa });
        gbc.writeMem(0xfaf1, { 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xbfea, gbc.sp());
        EXPECT(0xacbe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xacbb));
        EXPECT(0xf1, gbc.readMem(0xacbc));
        EXPECT(0xfa, gbc.readMem(0xacbd));
        EXPECT(0x59, gbc.readMem(0xfaf1));
        // EA 01FB
        gbc.setState(0x71b5, 0xe7ff, 0xf30, 0xb948, 0x4382, 0x9b95, 0x0, 0x0);
        gbc.writeMem(0x71b5, { 0xea, 0x8b, 0xb7 });
        gbc.writeMem(0xb78b, { 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xe7ff, gbc.sp());
        EXPECT(0x71b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf, gbc.readMem(0xb78b));
        // EA 01FC
        gbc.setState(0xd3ea, 0x31c4, 0xd000, 0x10ee, 0x91cd, 0x48d9, 0x1, 0x0);
        gbc.writeMem(0xcfcf, { 0x0 });
        gbc.writeMem(0xd3ea, { 0xea, 0xcf, 0xcf });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x31c4, gbc.sp());
        EXPECT(0xd3ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd0, gbc.readMem(0xcfcf));
        EXPECT(0xea, gbc.readMem(0xd3ea));
        EXPECT(0xcf, gbc.readMem(0xd3eb));
        EXPECT(0xcf, gbc.readMem(0xd3ec));
        // EA 01FD
        gbc.setState(0xd617, 0x1831, 0x8ac0, 0xd22f, 0xdbf3, 0x155f, 0x1, 0x1);
        gbc.writeMem(0x809c, { 0x0 });
        gbc.writeMem(0xd617, { 0xea, 0x9c, 0x80 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x1831, gbc.sp());
        EXPECT(0xd61a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8a, gbc.readMem(0x809c));
        EXPECT(0xea, gbc.readMem(0xd617));
        EXPECT(0x9c, gbc.readMem(0xd618));
        EXPECT(0x80, gbc.readMem(0xd619));
        // EA 01FE
        gbc.setState(0x11be, 0xa5b1, 0xb4e0, 0x1fc0, 0x6cce, 0xc0c2, 0x1, 0x0);
        gbc.writeMem(0x11be, { 0xea, 0x7a, 0xd9 });
        gbc.writeMem(0xd97a, { 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xa5b1, gbc.sp());
        EXPECT(0x11c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0xd97a));
        // EA 0201
        gbc.setState(0x4437, 0x2294, 0x26e0, 0x7cf9, 0xbb7b, 0xc4d2, 0x1, 0x0);
        gbc.writeMem(0x4437, { 0xea, 0x6a, 0x88 });
        gbc.writeMem(0x886a, { 0x0 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x2294, gbc.sp());
        EXPECT(0x443a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x26, gbc.readMem(0x886a));
        // EA 0204
        gbc.setState(0x8245, 0x14b4, 0xfc90, 0x784a, 0xca30, 0x4ffd, 0x1, 0x1);
        gbc.writeMem(0x8245, { 0xea, 0x11, 0xe1 });
        gbc.writeMem(0xe111, { 0x0 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x14b4, gbc.sp());
        EXPECT(0x8248, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8245));
        EXPECT(0x11, gbc.readMem(0x8246));
        EXPECT(0xe1, gbc.readMem(0x8247));
        EXPECT(0xfc, gbc.readMem(0xe111));
        // EA 0205
        gbc.setState(0xe05b, 0xf5ad, 0x43b0, 0x355b, 0xa1e0, 0xd9ce, 0x1, 0x1);
        gbc.writeMem(0xe05b, { 0xea, 0xe, 0xff });
        gbc.writeMem(0xff0e, { 0x0 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xf5ad, gbc.sp());
        EXPECT(0xe05e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xe05b));
        EXPECT(0xe, gbc.readMem(0xe05c));
        EXPECT(0xff, gbc.readMem(0xe05d));
        EXPECT(0x43, gbc.readMem(0xff0e));
        // EA 0206
        gbc.setState(0xb5bb, 0xb29f, 0xf7e0, 0xb32a, 0x7cfe, 0x8623, 0x1, 0x1);
        gbc.writeMem(0xa479, { 0x0 });
        gbc.writeMem(0xb5bb, { 0xea, 0x79, 0xa4 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xb29f, gbc.sp());
        EXPECT(0xb5be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf7, gbc.readMem(0xa479));
        EXPECT(0xea, gbc.readMem(0xb5bb));
        EXPECT(0x79, gbc.readMem(0xb5bc));
        EXPECT(0xa4, gbc.readMem(0xb5bd));
        // EA 0207
        gbc.setState(0x5eb4, 0xa69c, 0x9c0, 0x201a, 0xa3e, 0x67b2, 0x0, 0x1);
        gbc.writeMem(0x5eb4, { 0xea, 0x34, 0x82 });
        gbc.writeMem(0x8234, { 0x0 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xa69c, gbc.sp());
        EXPECT(0x5eb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0x8234));
        // EA 020A
        gbc.setState(0x7cec, 0x6be6, 0x4820, 0x5d21, 0x1d68, 0xaefe, 0x1, 0x0);
        gbc.writeMem(0x7cec, { 0xea, 0x5, 0xfe });
        gbc.writeMem(0xfe05, { 0x0 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x6be6, gbc.sp());
        EXPECT(0x7cef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0xfe05));
        // EA 020B
        gbc.setState(0x12d4, 0x1064, 0x5880, 0x5e24, 0x5da8, 0xa792, 0x0, 0x1);
        gbc.writeMem(0x12d4, { 0xea, 0x73, 0xf3 });
        gbc.writeMem(0xf373, { 0x0 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x1064, gbc.sp());
        EXPECT(0x12d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0xf373));
        // EA 020D
        gbc.setState(0x914d, 0x20db, 0x62b0, 0x5305, 0x70dd, 0x3fce, 0x0, 0x0);
        gbc.writeMem(0x914d, { 0xea, 0x55, 0x96 });
        gbc.writeMem(0x9655, { 0x0 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x20db, gbc.sp());
        EXPECT(0x9150, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x914d));
        EXPECT(0x55, gbc.readMem(0x914e));
        EXPECT(0x96, gbc.readMem(0x914f));
        EXPECT(0x62, gbc.readMem(0x9655));
        // EA 020F
        gbc.setState(0x681f, 0x3e7f, 0xb460, 0x76c, 0x9b0d, 0x7435, 0x1, 0x0);
        gbc.writeMem(0x681f, { 0xea, 0xd7, 0xc5 });
        gbc.writeMem(0xc5d7, { 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x3e7f, gbc.sp());
        EXPECT(0x6822, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0xc5d7));
        // EA 0211
        gbc.setState(0xd67e, 0x4b1e, 0x8f80, 0x78fb, 0x2612, 0x742c, 0x1, 0x1);
        gbc.writeMem(0xc2dc, { 0x0 });
        gbc.writeMem(0xd67e, { 0xea, 0xdc, 0xc2 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x4b1e, gbc.sp());
        EXPECT(0xd681, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xc2dc));
        EXPECT(0xea, gbc.readMem(0xd67e));
        EXPECT(0xdc, gbc.readMem(0xd67f));
        EXPECT(0xc2, gbc.readMem(0xd680));
        // EA 0212
        gbc.setState(0xd538, 0xceec, 0x9200, 0xd52e, 0xa777, 0x3037, 0x1, 0x0);
        gbc.writeMem(0xc065, { 0x0 });
        gbc.writeMem(0xd538, { 0xea, 0x65, 0xc0 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xceec, gbc.sp());
        EXPECT(0xd53b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x92, gbc.readMem(0xc065));
        EXPECT(0xea, gbc.readMem(0xd538));
        EXPECT(0x65, gbc.readMem(0xd539));
        EXPECT(0xc0, gbc.readMem(0xd53a));
        // EA 0213
        gbc.setState(0xe2e, 0xd8d3, 0x6730, 0x9092, 0xbd8d, 0xa4eb, 0x1, 0x0);
        gbc.writeMem(0xe2e, { 0xea, 0xfd, 0xbc });
        gbc.writeMem(0xbcfd, { 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xd8d3, gbc.sp());
        EXPECT(0xe31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x67, gbc.readMem(0xbcfd));
        // EA 0219
        gbc.setState(0xdd90, 0x3300, 0x6ea0, 0xfc14, 0x14c5, 0x3478, 0x1, 0x1);
        gbc.writeMem(0xb26f, { 0x0 });
        gbc.writeMem(0xdd90, { 0xea, 0x6f, 0xb2 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x3300, gbc.sp());
        EXPECT(0xdd93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6e, gbc.readMem(0xb26f));
        EXPECT(0xea, gbc.readMem(0xdd90));
        EXPECT(0x6f, gbc.readMem(0xdd91));
        EXPECT(0xb2, gbc.readMem(0xdd92));
        // EA 021B
        gbc.setState(0x9dd3, 0x69c0, 0xa0a0, 0xf4dd, 0xb380, 0x3c3b, 0x1, 0x1);
        gbc.writeMem(0x9d54, { 0x0 });
        gbc.writeMem(0x9dd3, { 0xea, 0x54, 0x9d });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x69c0, gbc.sp());
        EXPECT(0x9dd6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0x9d54));
        EXPECT(0xea, gbc.readMem(0x9dd3));
        EXPECT(0x54, gbc.readMem(0x9dd4));
        EXPECT(0x9d, gbc.readMem(0x9dd5));
        // EA 021D
        gbc.setState(0x43cc, 0x5a68, 0x2d40, 0x4cbe, 0xd5d, 0x4600, 0x0, 0x1);
        gbc.writeMem(0x43cc, { 0xea, 0xbf, 0xae });
        gbc.writeMem(0xaebf, { 0x0 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x5a68, gbc.sp());
        EXPECT(0x43cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2d, gbc.readMem(0xaebf));
        // EA 021F
        gbc.setState(0xd557, 0x66fa, 0xf690, 0x8bd0, 0xfbad, 0xfe70, 0x0, 0x1);
        gbc.writeMem(0xd557, { 0xea, 0x69, 0xf6 });
        gbc.writeMem(0xf669, { 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x66fa, gbc.sp());
        EXPECT(0xd55a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xd557));
        EXPECT(0x69, gbc.readMem(0xd558));
        EXPECT(0xf6, gbc.readMem(0xd559));
        EXPECT(0xf6, gbc.readMem(0xf669));
        // EA 0221
        gbc.setState(0xef20, 0x2cb9, 0x86c0, 0xb7b6, 0xfb2b, 0x7132, 0x0, 0x1);
        gbc.writeMem(0xa6ca, { 0x0 });
        gbc.writeMem(0xef20, { 0xea, 0xca, 0xa6 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x2cb9, gbc.sp());
        EXPECT(0xef23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xa6ca));
        EXPECT(0xea, gbc.readMem(0xef20));
        EXPECT(0xca, gbc.readMem(0xef21));
        EXPECT(0xa6, gbc.readMem(0xef22));
        // EA 0222
        gbc.setState(0x8b7, 0x37f5, 0x6e60, 0x5794, 0xb01a, 0x189, 0x0, 0x0);
        gbc.writeMem(0x8b7, { 0xea, 0x9a, 0xc9 });
        gbc.writeMem(0xc99a, { 0x0 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x37f5, gbc.sp());
        EXPECT(0x8ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6e, gbc.readMem(0xc99a));
        // EA 0226
        gbc.setState(0xd470, 0x63a3, 0x8ce0, 0x39fa, 0xa5aa, 0x1c23, 0x0, 0x0);
        gbc.writeMem(0x9bc0, { 0x0 });
        gbc.writeMem(0xd470, { 0xea, 0xc0, 0x9b });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x63a3, gbc.sp());
        EXPECT(0xd473, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0x9bc0));
        EXPECT(0xea, gbc.readMem(0xd470));
        EXPECT(0xc0, gbc.readMem(0xd471));
        EXPECT(0x9b, gbc.readMem(0xd472));
        // EA 0228
        gbc.setState(0x2917, 0xcc48, 0xe760, 0x2f8a, 0x7934, 0x209c, 0x1, 0x0);
        gbc.writeMem(0x2917, { 0xea, 0x9a, 0xd3 });
        gbc.writeMem(0xd39a, { 0x0 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xcc48, gbc.sp());
        EXPECT(0x291a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe7, gbc.readMem(0xd39a));
        // EA 022B
        gbc.setState(0xae1, 0x64c9, 0x3ae0, 0x6afd, 0x9c34, 0x45d, 0x1, 0x0);
        gbc.writeMem(0xae1, { 0xea, 0x49, 0xc8 });
        gbc.writeMem(0xc849, { 0x0 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x64c9, gbc.sp());
        EXPECT(0xae4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3a, gbc.readMem(0xc849));
        // EA 022C
        gbc.setState(0xec35, 0xd126, 0x9710, 0x24f1, 0xdd68, 0x2a0f, 0x0, 0x1);
        gbc.writeMem(0xb168, { 0x0 });
        gbc.writeMem(0xec35, { 0xea, 0x68, 0xb1 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xd126, gbc.sp());
        EXPECT(0xec38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x97, gbc.readMem(0xb168));
        EXPECT(0xea, gbc.readMem(0xec35));
        EXPECT(0x68, gbc.readMem(0xec36));
        EXPECT(0xb1, gbc.readMem(0xec37));
        // EA 022E
        gbc.setState(0x4908, 0x5901, 0x9df0, 0xc666, 0x26cc, 0x39bf, 0x1, 0x0);
        gbc.writeMem(0x4908, { 0xea, 0x6c, 0xde });
        gbc.writeMem(0xde6c, { 0x0 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x5901, gbc.sp());
        EXPECT(0x490b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9d, gbc.readMem(0xde6c));
        // EA 0231
        gbc.setState(0xbb81, 0x3ef8, 0x71b0, 0xd6d0, 0xcfef, 0xf3e1, 0x1, 0x0);
        gbc.writeMem(0xbb81, { 0xea, 0x73, 0xbd });
        gbc.writeMem(0xbd73, { 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x3ef8, gbc.sp());
        EXPECT(0xbb84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xbb81));
        EXPECT(0x73, gbc.readMem(0xbb82));
        EXPECT(0xbd, gbc.readMem(0xbb83));
        EXPECT(0x71, gbc.readMem(0xbd73));
        // EA 0233
        gbc.setState(0xbef4, 0xc398, 0x3290, 0x4cce, 0x7ba9, 0xbf8a, 0x1, 0x1);
        gbc.writeMem(0xa83a, { 0x0 });
        gbc.writeMem(0xbef4, { 0xea, 0x3a, 0xa8 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xc398, gbc.sp());
        EXPECT(0xbef7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xa83a));
        EXPECT(0xea, gbc.readMem(0xbef4));
        EXPECT(0x3a, gbc.readMem(0xbef5));
        EXPECT(0xa8, gbc.readMem(0xbef6));
        // EA 0237
        gbc.setState(0xd31c, 0x96be, 0x6430, 0x9829, 0xdb37, 0x9b07, 0x1, 0x0);
        gbc.writeMem(0xac68, { 0x0 });
        gbc.writeMem(0xd31c, { 0xea, 0x68, 0xac });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x96be, gbc.sp());
        EXPECT(0xd31f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x64, gbc.readMem(0xac68));
        EXPECT(0xea, gbc.readMem(0xd31c));
        EXPECT(0x68, gbc.readMem(0xd31d));
        EXPECT(0xac, gbc.readMem(0xd31e));
        // EA 023B
        gbc.setState(0x95cb, 0xdab8, 0x8fd0, 0xf69, 0x8fe1, 0x6e8d, 0x1, 0x0);
        gbc.writeMem(0x95cb, { 0xea, 0x26, 0xaa });
        gbc.writeMem(0xaa26, { 0x0 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xdab8, gbc.sp());
        EXPECT(0x95ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x95cb));
        EXPECT(0x26, gbc.readMem(0x95cc));
        EXPECT(0xaa, gbc.readMem(0x95cd));
        EXPECT(0x8f, gbc.readMem(0xaa26));
        // EA 023D
        gbc.setState(0xe5b5, 0x2ed2, 0x1940, 0xbd18, 0x7db1, 0xdf40, 0x1, 0x0);
        gbc.writeMem(0xcbac, { 0x0 });
        gbc.writeMem(0xe5b5, { 0xea, 0xac, 0xcb });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x2ed2, gbc.sp());
        EXPECT(0xe5b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x19, gbc.readMem(0xcbac));
        EXPECT(0xea, gbc.readMem(0xe5b5));
        EXPECT(0xac, gbc.readMem(0xe5b6));
        EXPECT(0xcb, gbc.readMem(0xe5b7));
        // EA 0240
        gbc.setState(0xc181, 0x5bbd, 0x3210, 0xdadd, 0x8fad, 0x3be4, 0x0, 0x1);
        gbc.writeMem(0xc181, { 0xea, 0xe4, 0xeb });
        gbc.writeMem(0xebe4, { 0x0 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x5bbd, gbc.sp());
        EXPECT(0xc184, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc181));
        EXPECT(0xe4, gbc.readMem(0xc182));
        EXPECT(0xeb, gbc.readMem(0xc183));
        EXPECT(0x32, gbc.readMem(0xebe4));
        // EA 0241
        gbc.setState(0xcc18, 0x6b54, 0x84c0, 0x98a9, 0x12fa, 0xb59c, 0x0, 0x1);
        gbc.writeMem(0xa0fa, { 0x0 });
        gbc.writeMem(0xcc18, { 0xea, 0xfa, 0xa0 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x6b54, gbc.sp());
        EXPECT(0xcc1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0xa0fa));
        EXPECT(0xea, gbc.readMem(0xcc18));
        EXPECT(0xfa, gbc.readMem(0xcc19));
        EXPECT(0xa0, gbc.readMem(0xcc1a));
        // EA 0244
        gbc.setState(0xc649, 0x9500, 0xf2e0, 0x9675, 0x4bb8, 0x5cf8, 0x1, 0x0);
        gbc.writeMem(0xc649, { 0xea, 0xea, 0xd4 });
        gbc.writeMem(0xd4ea, { 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x9500, gbc.sp());
        EXPECT(0xc64c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc649));
        EXPECT(0xea, gbc.readMem(0xc64a));
        EXPECT(0xd4, gbc.readMem(0xc64b));
        EXPECT(0xf2, gbc.readMem(0xd4ea));
        // EA 0245
        gbc.setState(0x5e82, 0x9a1e, 0x24c0, 0x4e4d, 0x190f, 0x14b1, 0x0, 0x1);
        gbc.writeMem(0x5e82, { 0xea, 0xe5, 0xd8 });
        gbc.writeMem(0xd8e5, { 0x0 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x9a1e, gbc.sp());
        EXPECT(0x5e85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0xd8e5));
        // EA 0246
        gbc.setState(0x6fc0, 0xf182, 0x660, 0x5f7b, 0xe03, 0x1548, 0x0, 0x0);
        gbc.writeMem(0x6fc0, { 0xea, 0x93, 0xd6 });
        gbc.writeMem(0xd693, { 0x0 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xf182, gbc.sp());
        EXPECT(0x6fc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6, gbc.readMem(0xd693));
        // EA 0247
        gbc.setState(0x16e3, 0x3d50, 0xa730, 0xc9ab, 0xc27d, 0xa473, 0x0, 0x1);
        gbc.writeMem(0x16e3, { 0xea, 0x42, 0xfc });
        gbc.writeMem(0xfc42, { 0x0 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x3d50, gbc.sp());
        EXPECT(0x16e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa7, gbc.readMem(0xfc42));
        // EA 0249
        gbc.setState(0xd35b, 0x4e92, 0xa7f0, 0x3ce4, 0x3f85, 0xeb4c, 0x1, 0x0);
        gbc.writeMem(0xa37d, { 0x0 });
        gbc.writeMem(0xd35b, { 0xea, 0x7d, 0xa3 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x4e92, gbc.sp());
        EXPECT(0xd35e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa7, gbc.readMem(0xa37d));
        EXPECT(0xea, gbc.readMem(0xd35b));
        EXPECT(0x7d, gbc.readMem(0xd35c));
        EXPECT(0xa3, gbc.readMem(0xd35d));
        // EA 024C
        gbc.setState(0x3798, 0xf318, 0xb270, 0x97c9, 0xd056, 0x3e, 0x0, 0x1);
        gbc.writeMem(0x3798, { 0xea, 0x86, 0xe1 });
        gbc.writeMem(0xe186, { 0x0 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xf318, gbc.sp());
        EXPECT(0x379b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb2, gbc.readMem(0xe186));
        // EA 024D
        gbc.setState(0x26a7, 0x7de5, 0x7e80, 0x742b, 0x552d, 0x38cc, 0x1, 0x1);
        gbc.writeMem(0x26a7, { 0xea, 0x73, 0xef });
        gbc.writeMem(0xef73, { 0x0 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x7de5, gbc.sp());
        EXPECT(0x26aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0xef73));
        // EA 024E
        gbc.setState(0x2981, 0x4357, 0x58f0, 0x5e35, 0x7923, 0x9fe7, 0x0, 0x0);
        gbc.writeMem(0x2981, { 0xea, 0xad, 0x9b });
        gbc.writeMem(0x9bad, { 0x0 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x4357, gbc.sp());
        EXPECT(0x2984, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0x9bad));
        // EA 024F
        gbc.setState(0x1a1f, 0x2c2d, 0x1e60, 0x8401, 0x13a2, 0x4f08, 0x0, 0x0);
        gbc.writeMem(0x1a1f, { 0xea, 0x22, 0xfc });
        gbc.writeMem(0xfc22, { 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x2c2d, gbc.sp());
        EXPECT(0x1a22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1e, gbc.readMem(0xfc22));
        // EA 0250
        gbc.setState(0x2c45, 0x7b3b, 0xe590, 0x87ea, 0xd9db, 0x8c88, 0x0, 0x1);
        gbc.writeMem(0x2c45, { 0xea, 0xa9, 0x82 });
        gbc.writeMem(0x82a9, { 0x0 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x7b3b, gbc.sp());
        EXPECT(0x2c48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe5, gbc.readMem(0x82a9));
        // EA 0251
        gbc.setState(0x87a2, 0x30d4, 0x21e0, 0x97ca, 0xd39f, 0x5b19, 0x1, 0x0);
        gbc.writeMem(0x8671, { 0x0 });
        gbc.writeMem(0x87a2, { 0xea, 0x71, 0x86 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x30d4, gbc.sp());
        EXPECT(0x87a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x21, gbc.readMem(0x8671));
        EXPECT(0xea, gbc.readMem(0x87a2));
        EXPECT(0x71, gbc.readMem(0x87a3));
        EXPECT(0x86, gbc.readMem(0x87a4));
        // EA 0253
        gbc.setState(0x4ba2, 0xc0d4, 0x54c0, 0xe8b5, 0xac07, 0x4ec2, 0x0, 0x1);
        gbc.writeMem(0x4ba2, { 0xea, 0x20, 0x9b });
        gbc.writeMem(0x9b20, { 0x0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xc0d4, gbc.sp());
        EXPECT(0x4ba5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0x9b20));
        // EA 0255
        gbc.setState(0x3d49, 0x64e8, 0xb660, 0x7383, 0x2148, 0xbac, 0x1, 0x0);
        gbc.writeMem(0x3d49, { 0xea, 0xc8, 0x95 });
        gbc.writeMem(0x95c8, { 0x0 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x64e8, gbc.sp());
        EXPECT(0x3d4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0x95c8));
        // EA 025A
        gbc.setState(0x2c7, 0x2cb4, 0xa9f0, 0x1f75, 0x6c0e, 0x9241, 0x0, 0x0);
        gbc.writeMem(0x2c7, { 0xea, 0xcd, 0xe3 });
        gbc.writeMem(0xe3cd, { 0x0 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x2cb4, gbc.sp());
        EXPECT(0x2ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa9, gbc.readMem(0xe3cd));
        // EA 025B
        gbc.setState(0x149b, 0xe96c, 0xf2c0, 0xc1fa, 0x6fac, 0xe574, 0x1, 0x0);
        gbc.writeMem(0x149b, { 0xea, 0xc2, 0x95 });
        gbc.writeMem(0x95c2, { 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xe96c, gbc.sp());
        EXPECT(0x149e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0x95c2));
        // EA 025E
        gbc.setState(0x1c63, 0x47c4, 0x6b90, 0x9cb2, 0x8ff6, 0x411, 0x1, 0x0);
        gbc.writeMem(0x1c63, { 0xea, 0xbe, 0xd6 });
        gbc.writeMem(0xd6be, { 0x0 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x47c4, gbc.sp());
        EXPECT(0x1c66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6b, gbc.readMem(0xd6be));
        // EA 025F
        gbc.setState(0x29e, 0x7288, 0xfe50, 0xf5ac, 0x48e4, 0xbdbc, 0x1, 0x0);
        gbc.writeMem(0x29e, { 0xea, 0xf9, 0x86 });
        gbc.writeMem(0x86f9, { 0x0 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x7288, gbc.sp());
        EXPECT(0x2a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfe, gbc.readMem(0x86f9));
        // EA 0260
        gbc.setState(0x74b4, 0xa65e, 0xc270, 0xd1ca, 0x2e4e, 0x1463, 0x0, 0x1);
        gbc.writeMem(0x74b4, { 0xea, 0x1f, 0xa2 });
        gbc.writeMem(0xa21f, { 0x0 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xa65e, gbc.sp());
        EXPECT(0x74b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc2, gbc.readMem(0xa21f));
        // EA 0261
        gbc.setState(0x2b0d, 0xf2a9, 0x8590, 0xb269, 0xa4c5, 0x1f, 0x0, 0x0);
        gbc.writeMem(0x2b0d, { 0xea, 0x2f, 0xe2 });
        gbc.writeMem(0xe22f, { 0x0 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xf2a9, gbc.sp());
        EXPECT(0x2b10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x85, gbc.readMem(0xe22f));
        // EA 0263
        gbc.setState(0x7f41, 0xdb23, 0x2ba0, 0x47c2, 0x5b52, 0x31c8, 0x1, 0x1);
        gbc.writeMem(0x7f41, { 0xea, 0x58, 0x94 });
        gbc.writeMem(0x9458, { 0x0 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xdb23, gbc.sp());
        EXPECT(0x7f44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2b, gbc.readMem(0x9458));
        // EA 0266
        gbc.setState(0xe401, 0x1e94, 0x8230, 0xa7e7, 0xb54, 0x656, 0x0, 0x1);
        gbc.writeMem(0xd689, { 0x0 });
        gbc.writeMem(0xe401, { 0xea, 0x89, 0xd6 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x1e94, gbc.sp());
        EXPECT(0xe404, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x82, gbc.readMem(0xd689));
        EXPECT(0xea, gbc.readMem(0xe401));
        EXPECT(0x89, gbc.readMem(0xe402));
        EXPECT(0xd6, gbc.readMem(0xe403));
        // EA 0267
        gbc.setState(0xa1b0, 0x81c5, 0x3780, 0x2b8, 0x4f27, 0xea0e, 0x0, 0x1);
        gbc.writeMem(0xa1b0, { 0xea, 0x6a, 0xe0 });
        gbc.writeMem(0xe06a, { 0x0 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x81c5, gbc.sp());
        EXPECT(0xa1b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa1b0));
        EXPECT(0x6a, gbc.readMem(0xa1b1));
        EXPECT(0xe0, gbc.readMem(0xa1b2));
        EXPECT(0x37, gbc.readMem(0xe06a));
        // EA 0269
        gbc.setState(0x2e84, 0x3d2c, 0xb7c0, 0xe484, 0x1b6d, 0x1caf, 0x1, 0x1);
        gbc.writeMem(0x2e84, { 0xea, 0xe1, 0xa1 });
        gbc.writeMem(0xa1e1, { 0x0 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x3d2c, gbc.sp());
        EXPECT(0x2e87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb7, gbc.readMem(0xa1e1));
        // EA 026A
        gbc.setState(0xe81b, 0x4ead, 0x89a0, 0xd8fb, 0xf122, 0x8fea, 0x0, 0x1);
        gbc.writeMem(0xaa48, { 0x0 });
        gbc.writeMem(0xe81b, { 0xea, 0x48, 0xaa });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x4ead, gbc.sp());
        EXPECT(0xe81e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x89, gbc.readMem(0xaa48));
        EXPECT(0xea, gbc.readMem(0xe81b));
        EXPECT(0x48, gbc.readMem(0xe81c));
        EXPECT(0xaa, gbc.readMem(0xe81d));
        // EA 026D
        gbc.setState(0xaa12, 0x8767, 0xa800, 0x94c2, 0x299b, 0xe7cc, 0x0, 0x1);
        gbc.writeMem(0xa7c1, { 0x0 });
        gbc.writeMem(0xaa12, { 0xea, 0xc1, 0xa7 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x8767, gbc.sp());
        EXPECT(0xaa15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa8, gbc.readMem(0xa7c1));
        EXPECT(0xea, gbc.readMem(0xaa12));
        EXPECT(0xc1, gbc.readMem(0xaa13));
        EXPECT(0xa7, gbc.readMem(0xaa14));
        // EA 026F
        gbc.setState(0x8b31, 0x1ebf, 0x54d0, 0x2a6b, 0xef55, 0xf73f, 0x0, 0x0);
        gbc.writeMem(0x8b31, { 0xea, 0xe1, 0xb2 });
        gbc.writeMem(0xb2e1, { 0x0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x1ebf, gbc.sp());
        EXPECT(0x8b34, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8b31));
        EXPECT(0xe1, gbc.readMem(0x8b32));
        EXPECT(0xb2, gbc.readMem(0x8b33));
        EXPECT(0x54, gbc.readMem(0xb2e1));
        // EA 0270
        gbc.setState(0xb2ed, 0x5187, 0x7bc0, 0xafe2, 0xfa97, 0x7739, 0x0, 0x1);
        gbc.writeMem(0x88ce, { 0x0 });
        gbc.writeMem(0xb2ed, { 0xea, 0xce, 0x88 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x5187, gbc.sp());
        EXPECT(0xb2f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7b, gbc.readMem(0x88ce));
        EXPECT(0xea, gbc.readMem(0xb2ed));
        EXPECT(0xce, gbc.readMem(0xb2ee));
        EXPECT(0x88, gbc.readMem(0xb2ef));
        // EA 0272
        gbc.setState(0x50f1, 0x71a2, 0xa8e0, 0x64ad, 0xf6eb, 0x7cc, 0x1, 0x0);
        gbc.writeMem(0x50f1, { 0xea, 0x74, 0xda });
        gbc.writeMem(0xda74, { 0x0 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x71a2, gbc.sp());
        EXPECT(0x50f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa8, gbc.readMem(0xda74));
        // EA 0273
        gbc.setState(0xa2c9, 0x2efb, 0xdfe0, 0xe739, 0x2f85, 0x5332, 0x1, 0x0);
        gbc.writeMem(0xa2c9, { 0xea, 0x1d, 0xd9 });
        gbc.writeMem(0xd91d, { 0x0 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x2efb, gbc.sp());
        EXPECT(0xa2cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa2c9));
        EXPECT(0x1d, gbc.readMem(0xa2ca));
        EXPECT(0xd9, gbc.readMem(0xa2cb));
        EXPECT(0xdf, gbc.readMem(0xd91d));
        // EA 0276
        gbc.setState(0x42a, 0x115e, 0x1210, 0xce8b, 0x8145, 0x7b88, 0x1, 0x0);
        gbc.writeMem(0x42a, { 0xea, 0x79, 0xd7 });
        gbc.writeMem(0xd779, { 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x115e, gbc.sp());
        EXPECT(0x42d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0xd779));
        // EA 0277
        gbc.setState(0xb4c9, 0x88ce, 0xb670, 0x3833, 0xd8e2, 0xd040, 0x0, 0x1);
        gbc.writeMem(0x882a, { 0x0 });
        gbc.writeMem(0xb4c9, { 0xea, 0x2a, 0x88 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x88ce, gbc.sp());
        EXPECT(0xb4cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0x882a));
        EXPECT(0xea, gbc.readMem(0xb4c9));
        EXPECT(0x2a, gbc.readMem(0xb4ca));
        EXPECT(0x88, gbc.readMem(0xb4cb));
        // EA 0278
        gbc.setState(0x88b8, 0x2206, 0x5ec0, 0x61db, 0x258e, 0xb921, 0x1, 0x1);
        gbc.writeMem(0x88b8, { 0xea, 0x69, 0x8a });
        gbc.writeMem(0x8a69, { 0x0 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x2206, gbc.sp());
        EXPECT(0x88bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x88b8));
        EXPECT(0x69, gbc.readMem(0x88b9));
        EXPECT(0x8a, gbc.readMem(0x88ba));
        EXPECT(0x5e, gbc.readMem(0x8a69));
        // EA 0279
        gbc.setState(0xdfd9, 0x85a, 0xe2e0, 0x6d17, 0x1c95, 0x7e18, 0x0, 0x0);
        gbc.writeMem(0x823b, { 0x0 });
        gbc.writeMem(0xdfd9, { 0xea, 0x3b, 0x82 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x85a, gbc.sp());
        EXPECT(0xdfdc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe2, gbc.readMem(0x823b));
        EXPECT(0xea, gbc.readMem(0xdfd9));
        EXPECT(0x3b, gbc.readMem(0xdfda));
        EXPECT(0x82, gbc.readMem(0xdfdb));
        // EA 027E
        gbc.setState(0x6fc0, 0x22f4, 0x83e0, 0x98b1, 0x5dd, 0x4da, 0x1, 0x0);
        gbc.writeMem(0x6fc0, { 0xea, 0x93, 0xd6 });
        gbc.writeMem(0xd693, { 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x22f4, gbc.sp());
        EXPECT(0x6fc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x83, gbc.readMem(0xd693));
        // EA 027F
        gbc.setState(0x7da6, 0xa48e, 0xbaf0, 0x7780, 0x9d8b, 0xb14a, 0x0, 0x0);
        gbc.writeMem(0x7da6, { 0xea, 0x72, 0xf8 });
        gbc.writeMem(0xf872, { 0x0 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xa48e, gbc.sp());
        EXPECT(0x7da9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xba, gbc.readMem(0xf872));
        // EA 0280
        gbc.setState(0x11e9, 0x2bc4, 0x260, 0xaec1, 0xa4e7, 0x47d7, 0x0, 0x0);
        gbc.writeMem(0x11e9, { 0xea, 0xc8, 0xf0 });
        gbc.writeMem(0xf0c8, { 0x0 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x2bc4, gbc.sp());
        EXPECT(0x11ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2, gbc.readMem(0xf0c8));
        // EA 0281
        gbc.setState(0x23ca, 0xaa2f, 0x2cd0, 0x2d94, 0xb748, 0xee96, 0x1, 0x0);
        gbc.writeMem(0x23ca, { 0xea, 0x84, 0x95 });
        gbc.writeMem(0x9584, { 0x0 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xaa2f, gbc.sp());
        EXPECT(0x23cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2c, gbc.readMem(0x9584));
        // EA 0282
        gbc.setState(0x7cd8, 0xff63, 0x7c40, 0xafdc, 0x69a0, 0xab90, 0x1, 0x1);
        gbc.writeMem(0x7cd8, { 0xea, 0x6e, 0xc4 });
        gbc.writeMem(0xc46e, { 0x0 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xff63, gbc.sp());
        EXPECT(0x7cdb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xc46e));
        // EA 0285
        gbc.setState(0xca2d, 0xcd02, 0xec50, 0x5b3, 0x1e74, 0xf768, 0x1, 0x0);
        gbc.writeMem(0x8a50, { 0x0 });
        gbc.writeMem(0xca2d, { 0xea, 0x50, 0x8a });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xcd02, gbc.sp());
        EXPECT(0xca30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xec, gbc.readMem(0x8a50));
        EXPECT(0xea, gbc.readMem(0xca2d));
        EXPECT(0x50, gbc.readMem(0xca2e));
        EXPECT(0x8a, gbc.readMem(0xca2f));
        // EA 0288
        gbc.setState(0x3f45, 0xd818, 0xf380, 0xad0c, 0x842c, 0xa811, 0x1, 0x1);
        gbc.writeMem(0x3f45, { 0xea, 0x72, 0xa1 });
        gbc.writeMem(0xa172, { 0x0 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xd818, gbc.sp());
        EXPECT(0x3f48, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf3, gbc.readMem(0xa172));
        // EA 0289
        gbc.setState(0xcc83, 0xda4f, 0xf540, 0xd776, 0x83c7, 0xd4c8, 0x0, 0x0);
        gbc.writeMem(0x9563, { 0x0 });
        gbc.writeMem(0xcc83, { 0xea, 0x63, 0x95 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xda4f, gbc.sp());
        EXPECT(0xcc86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf5, gbc.readMem(0x9563));
        EXPECT(0xea, gbc.readMem(0xcc83));
        EXPECT(0x63, gbc.readMem(0xcc84));
        EXPECT(0x95, gbc.readMem(0xcc85));
        // EA 028B
        gbc.setState(0x8be3, 0xc4d8, 0x2ff0, 0x9a6, 0x4540, 0xb9e3, 0x0, 0x1);
        gbc.writeMem(0x8be3, { 0xea, 0x4e, 0xf7 });
        gbc.writeMem(0xf74e, { 0x0 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xc4d8, gbc.sp());
        EXPECT(0x8be6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8be3));
        EXPECT(0x4e, gbc.readMem(0x8be4));
        EXPECT(0xf7, gbc.readMem(0x8be5));
        EXPECT(0x2f, gbc.readMem(0xf74e));
        // EA 028C
        gbc.setState(0x6e4b, 0xb209, 0x33f0, 0xf943, 0x9603, 0x6dbf, 0x0, 0x1);
        gbc.writeMem(0x6e4b, { 0xea, 0xb5, 0xbf });
        gbc.writeMem(0xbfb5, { 0x0 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xb209, gbc.sp());
        EXPECT(0x6e4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x33, gbc.readMem(0xbfb5));
        // EA 028D
        gbc.setState(0x745d, 0x32f8, 0x8f70, 0x3356, 0x72f2, 0x334a, 0x0, 0x1);
        gbc.writeMem(0x745d, { 0xea, 0x15, 0xe9 });
        gbc.writeMem(0xe915, { 0x0 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x32f8, gbc.sp());
        EXPECT(0x7460, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xe915));
        // EA 0290
        gbc.setState(0x9bb2, 0xeede, 0x6240, 0x6544, 0x2219, 0x8f9f, 0x1, 0x0);
        gbc.writeMem(0x9bb2, { 0xea, 0x1c, 0xe9 });
        gbc.writeMem(0xe91c, { 0x0 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xeede, gbc.sp());
        EXPECT(0x9bb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9bb2));
        EXPECT(0x1c, gbc.readMem(0x9bb3));
        EXPECT(0xe9, gbc.readMem(0x9bb4));
        EXPECT(0x62, gbc.readMem(0xe91c));
        // EA 0292
        gbc.setState(0x37bb, 0x2d6f, 0x3ee0, 0x245b, 0xa54, 0x2e66, 0x0, 0x0);
        gbc.writeMem(0x37bb, { 0xea, 0xd, 0x89 });
        gbc.writeMem(0x890d, { 0x0 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x2d6f, gbc.sp());
        EXPECT(0x37be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0x890d));
        // EA 0293
        gbc.setState(0x36c1, 0x9051, 0x6780, 0x7dd, 0xdbcc, 0xa14a, 0x1, 0x0);
        gbc.writeMem(0x36c1, { 0xea, 0xf4, 0x92 });
        gbc.writeMem(0x92f4, { 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x9051, gbc.sp());
        EXPECT(0x36c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x67, gbc.readMem(0x92f4));
        // EA 0295
        gbc.setState(0xc264, 0x3f67, 0x9820, 0xe21c, 0x850c, 0xdd, 0x0, 0x0);
        gbc.writeMem(0xa89a, { 0x0 });
        gbc.writeMem(0xc264, { 0xea, 0x9a, 0xa8 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x3f67, gbc.sp());
        EXPECT(0xc267, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0xa89a));
        EXPECT(0xea, gbc.readMem(0xc264));
        EXPECT(0x9a, gbc.readMem(0xc265));
        EXPECT(0xa8, gbc.readMem(0xc266));
        // EA 029B
        gbc.setState(0xdb56, 0x5eda, 0xc5b0, 0x46e3, 0xf4dc, 0x964a, 0x0, 0x1);
        gbc.writeMem(0xdb56, { 0xea, 0x40, 0xea });
        gbc.writeMem(0xea40, { 0x0 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x5eda, gbc.sp());
        EXPECT(0xdb59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xdb56));
        EXPECT(0x40, gbc.readMem(0xdb57));
        EXPECT(0xea, gbc.readMem(0xdb58));
        EXPECT(0xc5, gbc.readMem(0xea40));
        // EA 029D
        gbc.setState(0xe211, 0x8847, 0xac90, 0x9137, 0xb686, 0x153a, 0x1, 0x1);
        gbc.writeMem(0x8cc7, { 0x0 });
        gbc.writeMem(0xe211, { 0xea, 0xc7, 0x8c });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x8847, gbc.sp());
        EXPECT(0xe214, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xac, gbc.readMem(0x8cc7));
        EXPECT(0xea, gbc.readMem(0xe211));
        EXPECT(0xc7, gbc.readMem(0xe212));
        EXPECT(0x8c, gbc.readMem(0xe213));
        // EA 029E
        gbc.setState(0xb9fe, 0xb639, 0x5d30, 0x3118, 0x56bd, 0xaf16, 0x0, 0x0);
        gbc.writeMem(0xb9fe, { 0xea, 0x5f, 0xde });
        gbc.writeMem(0xde5f, { 0x0 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xb639, gbc.sp());
        EXPECT(0xba01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xb9fe));
        EXPECT(0x5f, gbc.readMem(0xb9ff));
        EXPECT(0xde, gbc.readMem(0xba00));
        EXPECT(0x5d, gbc.readMem(0xde5f));
        // EA 02A0
        gbc.setState(0x928f, 0xcb6f, 0x7c30, 0x7347, 0xc6fe, 0x7656, 0x0, 0x1);
        gbc.writeMem(0x928f, { 0xea, 0x24, 0xe8 });
        gbc.writeMem(0xe824, { 0x0 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xcb6f, gbc.sp());
        EXPECT(0x9292, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x928f));
        EXPECT(0x24, gbc.readMem(0x9290));
        EXPECT(0xe8, gbc.readMem(0x9291));
        EXPECT(0x7c, gbc.readMem(0xe824));
        // EA 02A4
        gbc.setState(0x4170, 0x561, 0x7ad0, 0xff77, 0xddf6, 0x44f0, 0x0, 0x0);
        gbc.writeMem(0x4170, { 0xea, 0xfd, 0x82 });
        gbc.writeMem(0x82fd, { 0x0 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x561, gbc.sp());
        EXPECT(0x4173, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7a, gbc.readMem(0x82fd));
        // EA 02A5
        gbc.setState(0x4c2d, 0x64f4, 0x4e10, 0x6e1e, 0xed0c, 0x9852, 0x1, 0x1);
        gbc.writeMem(0x4c2d, { 0xea, 0x18, 0xa1 });
        gbc.writeMem(0xa118, { 0x0 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x64f4, gbc.sp());
        EXPECT(0x4c30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0xa118));
        // EA 02A7
        gbc.setState(0x6ea7, 0x1c52, 0x5670, 0xf67d, 0x601, 0xfda0, 0x1, 0x1);
        gbc.writeMem(0x6ea7, { 0xea, 0xb1, 0xdf });
        gbc.writeMem(0xdfb1, { 0x0 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x1c52, gbc.sp());
        EXPECT(0x6eaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x56, gbc.readMem(0xdfb1));
        // EA 02A9
        gbc.setState(0xa65f, 0xde9b, 0xd1c0, 0x2c85, 0xdc22, 0x7444, 0x1, 0x0);
        gbc.writeMem(0xa65f, { 0xea, 0x4d, 0xe6 });
        gbc.writeMem(0xe64d, { 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xde9b, gbc.sp());
        EXPECT(0xa662, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa65f));
        EXPECT(0x4d, gbc.readMem(0xa660));
        EXPECT(0xe6, gbc.readMem(0xa661));
        EXPECT(0xd1, gbc.readMem(0xe64d));
        // EA 02AC
        gbc.setState(0x8d99, 0xda47, 0x580, 0xbc65, 0x42d8, 0x5ccc, 0x0, 0x1);
        gbc.writeMem(0x8d99, { 0xea, 0x76, 0xbb });
        gbc.writeMem(0xbb76, { 0x0 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xda47, gbc.sp());
        EXPECT(0x8d9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8d99));
        EXPECT(0x76, gbc.readMem(0x8d9a));
        EXPECT(0xbb, gbc.readMem(0x8d9b));
        EXPECT(0x5, gbc.readMem(0xbb76));
        // EA 02AE
        gbc.setState(0x5e22, 0x66b2, 0xf650, 0x4180, 0x4fb1, 0x2368, 0x1, 0x0);
        gbc.writeMem(0x5e22, { 0xea, 0x4f, 0xd6 });
        gbc.writeMem(0xd64f, { 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x66b2, gbc.sp());
        EXPECT(0x5e25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf6, gbc.readMem(0xd64f));
        // EA 02AF
        gbc.setState(0x95a4, 0x8b63, 0x3c30, 0xa41e, 0x5614, 0xf69e, 0x0, 0x0);
        gbc.writeMem(0x95a4, { 0xea, 0x41, 0xec });
        gbc.writeMem(0xec41, { 0x0 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x8b63, gbc.sp());
        EXPECT(0x95a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x95a4));
        EXPECT(0x41, gbc.readMem(0x95a5));
        EXPECT(0xec, gbc.readMem(0x95a6));
        EXPECT(0x3c, gbc.readMem(0xec41));
        // EA 02B2
        gbc.setState(0xa868, 0x4729, 0x42b0, 0x9088, 0x506a, 0x6f66, 0x1, 0x0);
        gbc.writeMem(0xa868, { 0xea, 0x78, 0xfc });
        gbc.writeMem(0xfc78, { 0x0 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x4729, gbc.sp());
        EXPECT(0xa86b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa868));
        EXPECT(0x78, gbc.readMem(0xa869));
        EXPECT(0xfc, gbc.readMem(0xa86a));
        EXPECT(0x42, gbc.readMem(0xfc78));
        // EA 02B6
        gbc.setState(0xb6d2, 0x7b9b, 0xc1f0, 0x43a1, 0x36b, 0xaaf8, 0x1, 0x1);
        gbc.writeMem(0x8edc, { 0x0 });
        gbc.writeMem(0xb6d2, { 0xea, 0xdc, 0x8e });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x7b9b, gbc.sp());
        EXPECT(0xb6d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc1, gbc.readMem(0x8edc));
        EXPECT(0xea, gbc.readMem(0xb6d2));
        EXPECT(0xdc, gbc.readMem(0xb6d3));
        EXPECT(0x8e, gbc.readMem(0xb6d4));
        // EA 02B8
        gbc.setState(0x1cf5, 0xd995, 0x8da0, 0x941e, 0xde07, 0xf507, 0x1, 0x0);
        gbc.writeMem(0x1cf5, { 0xea, 0xd3, 0xdd });
        gbc.writeMem(0xddd3, { 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xd995, gbc.sp());
        EXPECT(0x1cf8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8d, gbc.readMem(0xddd3));
        // EA 02B9
        gbc.setState(0xa5b2, 0xa2a, 0x7e80, 0xfb46, 0x46db, 0x9932, 0x1, 0x1);
        gbc.writeMem(0x9168, { 0x0 });
        gbc.writeMem(0xa5b2, { 0xea, 0x68, 0x91 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xa2a, gbc.sp());
        EXPECT(0xa5b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0x9168));
        EXPECT(0xea, gbc.readMem(0xa5b2));
        EXPECT(0x68, gbc.readMem(0xa5b3));
        EXPECT(0x91, gbc.readMem(0xa5b4));
        // EA 02BA
        gbc.setState(0x5906, 0x381f, 0x2450, 0xc176, 0xfbf6, 0x4168, 0x0, 0x0);
        gbc.writeMem(0x5906, { 0xea, 0xbd, 0x81 });
        gbc.writeMem(0x81bd, { 0x0 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x381f, gbc.sp());
        EXPECT(0x5909, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0x81bd));
        // EA 02BC
        gbc.setState(0xeba5, 0x15f, 0x4d50, 0x8741, 0xba2b, 0x9cbd, 0x0, 0x1);
        gbc.writeMem(0x998f, { 0x0 });
        gbc.writeMem(0xeba5, { 0xea, 0x8f, 0x99 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x15f, gbc.sp());
        EXPECT(0xeba8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4d, gbc.readMem(0x998f));
        EXPECT(0xea, gbc.readMem(0xeba5));
        EXPECT(0x8f, gbc.readMem(0xeba6));
        EXPECT(0x99, gbc.readMem(0xeba7));
        // EA 02BE
        gbc.setState(0xc4b4, 0x4934, 0x5bf0, 0x3b26, 0x4df2, 0x570a, 0x1, 0x0);
        gbc.writeMem(0xc4b4, { 0xea, 0x2, 0xe7 });
        gbc.writeMem(0xe702, { 0x0 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x4934, gbc.sp());
        EXPECT(0xc4b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc4b4));
        EXPECT(0x2, gbc.readMem(0xc4b5));
        EXPECT(0xe7, gbc.readMem(0xc4b6));
        EXPECT(0x5b, gbc.readMem(0xe702));
        // EA 02C0
        gbc.setState(0xb7a1, 0x905e, 0x3c30, 0xc4f5, 0x1ffb, 0x6221, 0x1, 0x0);
        gbc.writeMem(0x8b12, { 0x0 });
        gbc.writeMem(0xb7a1, { 0xea, 0x12, 0x8b });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x905e, gbc.sp());
        EXPECT(0xb7a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3c, gbc.readMem(0x8b12));
        EXPECT(0xea, gbc.readMem(0xb7a1));
        EXPECT(0x12, gbc.readMem(0xb7a2));
        EXPECT(0x8b, gbc.readMem(0xb7a3));
        // EA 02C1
        gbc.setState(0xa782, 0x7aca, 0x1f10, 0x2fe0, 0xdab7, 0xee60, 0x1, 0x1);
        gbc.writeMem(0x81d6, { 0x0 });
        gbc.writeMem(0xa782, { 0xea, 0xd6, 0x81 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x7aca, gbc.sp());
        EXPECT(0xa785, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1f, gbc.readMem(0x81d6));
        EXPECT(0xea, gbc.readMem(0xa782));
        EXPECT(0xd6, gbc.readMem(0xa783));
        EXPECT(0x81, gbc.readMem(0xa784));
        // EA 02C3
        gbc.setState(0x711e, 0xe587, 0x7cc0, 0x7892, 0xb589, 0x7426, 0x0, 0x0);
        gbc.writeMem(0x711e, { 0xea, 0xd2, 0xd2 });
        gbc.writeMem(0xd2d2, { 0x0 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xe587, gbc.sp());
        EXPECT(0x7121, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xd2d2));
        // EA 02C5
        gbc.setState(0x321, 0x103f, 0x6200, 0xab5, 0x4321, 0x22de, 0x1, 0x1);
        gbc.writeMem(0x321, { 0xea, 0xfc, 0x80 });
        gbc.writeMem(0x80fc, { 0x0 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x103f, gbc.sp());
        EXPECT(0x324, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0x80fc));
        // EA 02C7
        gbc.setState(0xb659, 0x571b, 0x900, 0x49d0, 0x860e, 0x8126, 0x0, 0x0);
        gbc.writeMem(0xb659, { 0xea, 0x6e, 0xe4 });
        gbc.writeMem(0xe46e, { 0x0 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x571b, gbc.sp());
        EXPECT(0xb65c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xb659));
        EXPECT(0x6e, gbc.readMem(0xb65a));
        EXPECT(0xe4, gbc.readMem(0xb65b));
        EXPECT(0x9, gbc.readMem(0xe46e));
        // EA 02C8
        gbc.setState(0x4991, 0xe750, 0xa860, 0x9ffe, 0xdacc, 0xfaa, 0x0, 0x0);
        gbc.writeMem(0x4991, { 0xea, 0xa8, 0xf4 });
        gbc.writeMem(0xf4a8, { 0x0 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xe750, gbc.sp());
        EXPECT(0x4994, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa8, gbc.readMem(0xf4a8));
        // EA 02C9
        gbc.setState(0x8caf, 0x3d2, 0x2390, 0x8d6c, 0xbf4c, 0xb10e, 0x0, 0x1);
        gbc.writeMem(0x8caf, { 0xea, 0xf9, 0xa1 });
        gbc.writeMem(0xa1f9, { 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x3d2, gbc.sp());
        EXPECT(0x8cb2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8caf));
        EXPECT(0xf9, gbc.readMem(0x8cb0));
        EXPECT(0xa1, gbc.readMem(0x8cb1));
        EXPECT(0x23, gbc.readMem(0xa1f9));
        // EA 02CE
        gbc.setState(0x4ecd, 0x4f30, 0xc730, 0xe04a, 0x3927, 0xbbf7, 0x0, 0x0);
        gbc.writeMem(0x4ecd, { 0xea, 0xf5, 0xf1 });
        gbc.writeMem(0xf1f5, { 0x0 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x4f30, gbc.sp());
        EXPECT(0x4ed0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc7, gbc.readMem(0xf1f5));
        // EA 02CF
        gbc.setState(0xeb90, 0x5cfc, 0xa560, 0xb6fa, 0xf9f8, 0x5b3b, 0x0, 0x0);
        gbc.writeMem(0xabce, { 0x0 });
        gbc.writeMem(0xeb90, { 0xea, 0xce, 0xab });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x5cfc, gbc.sp());
        EXPECT(0xeb93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0xabce));
        EXPECT(0xea, gbc.readMem(0xeb90));
        EXPECT(0xce, gbc.readMem(0xeb91));
        EXPECT(0xab, gbc.readMem(0xeb92));
        // EA 02D8
        gbc.setState(0x2e2b, 0xdc84, 0x7330, 0x32de, 0x36fa, 0x1e16, 0x0, 0x1);
        gbc.writeMem(0x2e2b, { 0xea, 0xfd, 0x8d });
        gbc.writeMem(0x8dfd, { 0x0 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xdc84, gbc.sp());
        EXPECT(0x2e2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x73, gbc.readMem(0x8dfd));
        // EA 02D9
        gbc.setState(0xbfb9, 0x52d9, 0x28b0, 0x5196, 0xb756, 0xd15d, 0x0, 0x0);
        gbc.writeMem(0x8a10, { 0x0 });
        gbc.writeMem(0xbfb9, { 0xea, 0x10, 0x8a });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x52d9, gbc.sp());
        EXPECT(0xbfbc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0x8a10));
        EXPECT(0xea, gbc.readMem(0xbfb9));
        EXPECT(0x10, gbc.readMem(0xbfba));
        EXPECT(0x8a, gbc.readMem(0xbfbb));
        // EA 02DC
        gbc.setState(0x928d, 0x64ee, 0xe800, 0x611, 0xe87, 0x6a9d, 0x1, 0x0);
        gbc.writeMem(0x928d, { 0xea, 0x4, 0xc8 });
        gbc.writeMem(0xc804, { 0x0 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x64ee, gbc.sp());
        EXPECT(0x9290, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x928d));
        EXPECT(0x4, gbc.readMem(0x928e));
        EXPECT(0xc8, gbc.readMem(0x928f));
        EXPECT(0xe8, gbc.readMem(0xc804));
        // EA 02E3
        gbc.setState(0x36ef, 0x32d6, 0x11f0, 0x7d25, 0x648c, 0x6a59, 0x1, 0x1);
        gbc.writeMem(0x36ef, { 0xea, 0xc9, 0xc6 });
        gbc.writeMem(0xc6c9, { 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x32d6, gbc.sp());
        EXPECT(0x36f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x11, gbc.readMem(0xc6c9));
        // EA 02E4
        gbc.setState(0x37cd, 0xaa3f, 0x69d0, 0xc44a, 0x1bc1, 0x5f4f, 0x0, 0x1);
        gbc.writeMem(0x37cd, { 0xea, 0x43, 0xc8 });
        gbc.writeMem(0xc843, { 0x0 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xaa3f, gbc.sp());
        EXPECT(0x37d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x69, gbc.readMem(0xc843));
        // EA 02E7
        gbc.setState(0x9378, 0x3984, 0xe7c0, 0x62b, 0x2c93, 0x45cd, 0x1, 0x1);
        gbc.writeMem(0x9378, { 0xea, 0x82, 0xa5 });
        gbc.writeMem(0xa582, { 0x0 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x3984, gbc.sp());
        EXPECT(0x937b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9378));
        EXPECT(0x82, gbc.readMem(0x9379));
        EXPECT(0xa5, gbc.readMem(0x937a));
        EXPECT(0xe7, gbc.readMem(0xa582));
        // EA 02E9
        gbc.setState(0x2439, 0xc29d, 0xf430, 0xc9df, 0x5539, 0xa48f, 0x1, 0x1);
        gbc.writeMem(0x2439, { 0xea, 0xb6, 0x9a });
        gbc.writeMem(0x9ab6, { 0x0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xc29d, gbc.sp());
        EXPECT(0x243c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf4, gbc.readMem(0x9ab6));
        // EA 02EA
        gbc.setState(0x60ef, 0xbfb9, 0xa390, 0xda1d, 0x82d9, 0xaef6, 0x1, 0x1);
        gbc.writeMem(0x60ef, { 0xea, 0xb4, 0x9d });
        gbc.writeMem(0x9db4, { 0x0 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xbfb9, gbc.sp());
        EXPECT(0x60f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa3, gbc.readMem(0x9db4));
        // EA 02EC
        gbc.setState(0xc5c9, 0xf486, 0xdc00, 0x24ef, 0x3080, 0x6667, 0x0, 0x1);
        gbc.writeMem(0xc5c9, { 0xea, 0xf1, 0xee });
        gbc.writeMem(0xeef1, { 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xf486, gbc.sp());
        EXPECT(0xc5cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc5c9));
        EXPECT(0xf1, gbc.readMem(0xc5ca));
        EXPECT(0xee, gbc.readMem(0xc5cb));
        EXPECT(0xdc, gbc.readMem(0xeef1));
        // EA 02ED
        gbc.setState(0x5c02, 0x80cd, 0x7de0, 0x1a58, 0x9b03, 0x246b, 0x0, 0x1);
        gbc.writeMem(0x5c02, { 0xea, 0x5c, 0xb6 });
        gbc.writeMem(0xb65c, { 0x0 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x80cd, gbc.sp());
        EXPECT(0x5c05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7d, gbc.readMem(0xb65c));
        // EA 02EE
        gbc.setState(0xe677, 0x7a14, 0xd0d0, 0x8180, 0x8a17, 0x5625, 0x0, 0x0);
        gbc.writeMem(0xb284, { 0x0 });
        gbc.writeMem(0xe677, { 0xea, 0x84, 0xb2 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x7a14, gbc.sp());
        EXPECT(0xe67a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd0, gbc.readMem(0xb284));
        EXPECT(0xea, gbc.readMem(0xe677));
        EXPECT(0x84, gbc.readMem(0xe678));
        EXPECT(0xb2, gbc.readMem(0xe679));
        // EA 02F1
        gbc.setState(0xd164, 0x5014, 0xc830, 0xc12b, 0x2341, 0x8c7f, 0x0, 0x1);
        gbc.writeMem(0xd164, { 0xea, 0xa1, 0xf8 });
        gbc.writeMem(0xf8a1, { 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x5014, gbc.sp());
        EXPECT(0xd167, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xd164));
        EXPECT(0xa1, gbc.readMem(0xd165));
        EXPECT(0xf8, gbc.readMem(0xd166));
        EXPECT(0xc8, gbc.readMem(0xf8a1));
        // EA 02F3
        gbc.setState(0x761, 0x4d06, 0x98d0, 0xa689, 0x49f7, 0x7d2d, 0x1, 0x0);
        gbc.writeMem(0x761, { 0xea, 0x91, 0xb4 });
        gbc.writeMem(0xb491, { 0x0 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x4d06, gbc.sp());
        EXPECT(0x764, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0xb491));
        // EA 02F6
        gbc.setState(0xc69, 0xddfd, 0x2a70, 0x3380, 0x128e, 0x1d45, 0x0, 0x1);
        gbc.writeMem(0xc69, { 0xea, 0xe3, 0xaa });
        gbc.writeMem(0xaae3, { 0x0 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xddfd, gbc.sp());
        EXPECT(0xc6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0xaae3));
        // EA 02F9
        gbc.setState(0x8913, 0xf677, 0xc500, 0x6d8f, 0xed1c, 0x2450, 0x1, 0x1);
        gbc.writeMem(0x8913, { 0xea, 0x38, 0xba });
        gbc.writeMem(0xba38, { 0x0 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xf677, gbc.sp());
        EXPECT(0x8916, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8913));
        EXPECT(0x38, gbc.readMem(0x8914));
        EXPECT(0xba, gbc.readMem(0x8915));
        EXPECT(0xc5, gbc.readMem(0xba38));
        // EA 02FA
        gbc.setState(0xcb6c, 0xfa5c, 0xc40, 0x22bf, 0x386e, 0x4819, 0x1, 0x0);
        gbc.writeMem(0xa96f, { 0x0 });
        gbc.writeMem(0xcb6c, { 0xea, 0x6f, 0xa9 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xfa5c, gbc.sp());
        EXPECT(0xcb6f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc, gbc.readMem(0xa96f));
        EXPECT(0xea, gbc.readMem(0xcb6c));
        EXPECT(0x6f, gbc.readMem(0xcb6d));
        EXPECT(0xa9, gbc.readMem(0xcb6e));
        // EA 02FD
        gbc.setState(0xe99f, 0xd426, 0x6740, 0xc326, 0x59ca, 0x45e2, 0x0, 0x1);
        gbc.writeMem(0xd197, { 0x0 });
        gbc.writeMem(0xe99f, { 0xea, 0x97, 0xd1 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xd426, gbc.sp());
        EXPECT(0xe9a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x67, gbc.readMem(0xd197));
        EXPECT(0xea, gbc.readMem(0xe99f));
        EXPECT(0x97, gbc.readMem(0xe9a0));
        EXPECT(0xd1, gbc.readMem(0xe9a1));
        // EA 02FE
        gbc.setState(0xb41e, 0x8cfb, 0xc970, 0xd0dd, 0x1096, 0xbbe4, 0x1, 0x1);
        gbc.writeMem(0x9f7a, { 0x0 });
        gbc.writeMem(0xb41e, { 0xea, 0x7a, 0x9f });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x8cfb, gbc.sp());
        EXPECT(0xb421, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0x9f7a));
        EXPECT(0xea, gbc.readMem(0xb41e));
        EXPECT(0x7a, gbc.readMem(0xb41f));
        EXPECT(0x9f, gbc.readMem(0xb420));
        // EA 0301
        gbc.setState(0xee8b, 0x3191, 0xf130, 0xeac2, 0x1bcb, 0x97e1, 0x1, 0x1);
        gbc.writeMem(0xa71a, { 0x0 });
        gbc.writeMem(0xee8b, { 0xea, 0x1a, 0xa7 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x3191, gbc.sp());
        EXPECT(0xee8e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0xa71a));
        EXPECT(0xea, gbc.readMem(0xee8b));
        EXPECT(0x1a, gbc.readMem(0xee8c));
        EXPECT(0xa7, gbc.readMem(0xee8d));
        // EA 0305
        gbc.setState(0x5138, 0xbef3, 0x6930, 0xbe05, 0xdbf1, 0x580d, 0x0, 0x1);
        gbc.writeMem(0x5138, { 0xea, 0x44, 0x83 });
        gbc.writeMem(0x8344, { 0x0 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xbef3, gbc.sp());
        EXPECT(0x513b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x69, gbc.readMem(0x8344));
        // EA 0307
        gbc.setState(0x34b2, 0xbb58, 0x33a0, 0x5a9b, 0x62c6, 0xa4a4, 0x0, 0x0);
        gbc.writeMem(0x34b2, { 0xea, 0xda, 0x86 });
        gbc.writeMem(0x86da, { 0x0 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xbb58, gbc.sp());
        EXPECT(0x34b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x33, gbc.readMem(0x86da));
        // EA 0309
        gbc.setState(0x7a57, 0xd4a4, 0x12d0, 0x7bc8, 0x5417, 0x253c, 0x1, 0x1);
        gbc.writeMem(0x7a57, { 0xea, 0xa9, 0xb1 });
        gbc.writeMem(0xb1a9, { 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xd4a4, gbc.sp());
        EXPECT(0x7a5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0xb1a9));
        // EA 030A
        gbc.setState(0x64cb, 0x6d6, 0x25c0, 0xd15e, 0xcf1e, 0xc13a, 0x0, 0x0);
        gbc.writeMem(0x64cb, { 0xea, 0x89, 0xe6 });
        gbc.writeMem(0xe689, { 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x6d6, gbc.sp());
        EXPECT(0x64ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x25, gbc.readMem(0xe689));
        // EA 030B
        gbc.setState(0x99d7, 0xd680, 0x8330, 0xdbc4, 0xe9e2, 0xea9e, 0x0, 0x1);
        gbc.writeMem(0x99d7, { 0xea, 0x63, 0xad });
        gbc.writeMem(0xad63, { 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xd680, gbc.sp());
        EXPECT(0x99da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x99d7));
        EXPECT(0x63, gbc.readMem(0x99d8));
        EXPECT(0xad, gbc.readMem(0x99d9));
        EXPECT(0x83, gbc.readMem(0xad63));
        // EA 030F
        gbc.setState(0xeafc, 0x6f27, 0xc9b0, 0xad9f, 0xc926, 0xae40, 0x0, 0x1);
        gbc.writeMem(0xb331, { 0x0 });
        gbc.writeMem(0xeafc, { 0xea, 0x31, 0xb3 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x6f27, gbc.sp());
        EXPECT(0xeaff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0xb331));
        EXPECT(0xea, gbc.readMem(0xeafc));
        EXPECT(0x31, gbc.readMem(0xeafd));
        EXPECT(0xb3, gbc.readMem(0xeafe));
        // EA 0315
        gbc.setState(0xd69c, 0xf, 0x16a0, 0xb4a0, 0x7f2d, 0x6c8d, 0x1, 0x0);
        gbc.writeMem(0x894a, { 0x0 });
        gbc.writeMem(0xd69c, { 0xea, 0x4a, 0x89 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xf, gbc.sp());
        EXPECT(0xd69f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x16, gbc.readMem(0x894a));
        EXPECT(0xea, gbc.readMem(0xd69c));
        EXPECT(0x4a, gbc.readMem(0xd69d));
        EXPECT(0x89, gbc.readMem(0xd69e));
        // EA 0316
        gbc.setState(0x3366, 0x3343, 0xebd0, 0xe85c, 0x9a90, 0x63c0, 0x1, 0x1);
        gbc.writeMem(0x3366, { 0xea, 0x77, 0x91 });
        gbc.writeMem(0x9177, { 0x0 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x3343, gbc.sp());
        EXPECT(0x3369, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xeb, gbc.readMem(0x9177));
        // EA 0318
        gbc.setState(0xbc16, 0x65a6, 0xe4b0, 0xc843, 0x942e, 0xf62b, 0x1, 0x0);
        gbc.writeMem(0x8b9b, { 0x0 });
        gbc.writeMem(0xbc16, { 0xea, 0x9b, 0x8b });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x65a6, gbc.sp());
        EXPECT(0xbc19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0x8b9b));
        EXPECT(0xea, gbc.readMem(0xbc16));
        EXPECT(0x9b, gbc.readMem(0xbc17));
        EXPECT(0x8b, gbc.readMem(0xbc18));
        // EA 031D
        gbc.setState(0x8e4a, 0x9ac8, 0x80, 0xb9a5, 0x8852, 0xcb6e, 0x0, 0x1);
        gbc.writeMem(0x4f0f, { 0x0 });
        gbc.writeMem(0x8e4a, { 0xea, 0xf, 0x4f });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x9ac8, gbc.sp());
        EXPECT(0x8e4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8e4a));
        EXPECT(0xf, gbc.readMem(0x8e4b));
        EXPECT(0x4f, gbc.readMem(0x8e4c));
        // EA 031F
        gbc.setState(0xaa57, 0xcfc9, 0x60c0, 0x6233, 0xaf63, 0x49cd, 0x0, 0x0);
        gbc.writeMem(0x9cc1, { 0x0 });
        gbc.writeMem(0xaa57, { 0xea, 0xc1, 0x9c });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xcfc9, gbc.sp());
        EXPECT(0xaa5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0x9cc1));
        EXPECT(0xea, gbc.readMem(0xaa57));
        EXPECT(0xc1, gbc.readMem(0xaa58));
        EXPECT(0x9c, gbc.readMem(0xaa59));
        // EA 0320
        gbc.setState(0x86e6, 0x69ad, 0xafc0, 0x9c8e, 0x3bdd, 0xa1ee, 0x1, 0x0);
        gbc.writeMem(0x86e6, { 0xea, 0xca, 0xed });
        gbc.writeMem(0xedca, { 0x0 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x69ad, gbc.sp());
        EXPECT(0x86e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x86e6));
        EXPECT(0xca, gbc.readMem(0x86e7));
        EXPECT(0xed, gbc.readMem(0x86e8));
        EXPECT(0xaf, gbc.readMem(0xedca));
        // EA 0321
        gbc.setState(0x10bb, 0xd98a, 0x9be0, 0xf5dc, 0xc06f, 0x9e29, 0x1, 0x0);
        gbc.writeMem(0x10bb, { 0xea, 0x4b, 0x94 });
        gbc.writeMem(0x944b, { 0x0 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xd98a, gbc.sp());
        EXPECT(0x10be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9b, gbc.readMem(0x944b));
        // EA 0323
        gbc.setState(0xec6c, 0x7711, 0xacb0, 0x89a4, 0x4fd3, 0x57be, 0x0, 0x0);
        gbc.writeMem(0xaace, { 0x0 });
        gbc.writeMem(0xec6c, { 0xea, 0xce, 0xaa });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x7711, gbc.sp());
        EXPECT(0xec6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xac, gbc.readMem(0xaace));
        EXPECT(0xea, gbc.readMem(0xec6c));
        EXPECT(0xce, gbc.readMem(0xec6d));
        EXPECT(0xaa, gbc.readMem(0xec6e));
        // EA 0324
        gbc.setState(0xc63d, 0xe00, 0x5990, 0x89be, 0x971e, 0x47e, 0x0, 0x1);
        gbc.writeMem(0xc63d, { 0xea, 0xfc, 0xde });
        gbc.writeMem(0xdefc, { 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xe00, gbc.sp());
        EXPECT(0xc640, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc63d));
        EXPECT(0xfc, gbc.readMem(0xc63e));
        EXPECT(0xde, gbc.readMem(0xc63f));
        EXPECT(0x59, gbc.readMem(0xdefc));
        // EA 0326
        gbc.setState(0x36ec, 0x87da, 0xce20, 0x9b77, 0x93d1, 0x4f3, 0x1, 0x0);
        gbc.writeMem(0x36ec, { 0xea, 0x2, 0x8b });
        gbc.writeMem(0x8b02, { 0x0 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x87da, gbc.sp());
        EXPECT(0x36ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0x8b02));
        // EA 0327
        gbc.setState(0x89cd, 0xb7e6, 0x66a0, 0x6885, 0xfc4b, 0x2e8f, 0x1, 0x0);
        gbc.writeMem(0x89cd, { 0xea, 0xc7, 0xe2 });
        gbc.writeMem(0xe2c7, { 0x0 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xb7e6, gbc.sp());
        EXPECT(0x89d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x89cd));
        EXPECT(0xc7, gbc.readMem(0x89ce));
        EXPECT(0xe2, gbc.readMem(0x89cf));
        EXPECT(0x66, gbc.readMem(0xe2c7));
        // EA 032A
        gbc.setState(0x6fb5, 0x3f22, 0x83d0, 0x295f, 0x2e0a, 0x4ae, 0x0, 0x0);
        gbc.writeMem(0x6fb5, { 0xea, 0x63, 0xcb });
        gbc.writeMem(0xcb63, { 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x3f22, gbc.sp());
        EXPECT(0x6fb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x83, gbc.readMem(0xcb63));
        // EA 032B
        gbc.setState(0x86d7, 0xff61, 0x5b00, 0x3930, 0xbb87, 0x83d6, 0x0, 0x1);
        gbc.writeMem(0x86d7, { 0xea, 0x9b, 0xf6 });
        gbc.writeMem(0xf69b, { 0x0 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xff61, gbc.sp());
        EXPECT(0x86da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x86d7));
        EXPECT(0x9b, gbc.readMem(0x86d8));
        EXPECT(0xf6, gbc.readMem(0x86d9));
        EXPECT(0x5b, gbc.readMem(0xf69b));
        // EA 032D
        gbc.setState(0x3eef, 0x6170, 0x44c0, 0xae9c, 0xc222, 0xf4, 0x1, 0x0);
        gbc.writeMem(0x3eef, { 0xea, 0xaa, 0xde });
        gbc.writeMem(0xdeaa, { 0x0 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x6170, gbc.sp());
        EXPECT(0x3ef2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x44, gbc.readMem(0xdeaa));
        // EA 032F
        gbc.setState(0x2921, 0xe3e4, 0x52c0, 0x3b67, 0xc513, 0xd289, 0x0, 0x1);
        gbc.writeMem(0x2921, { 0xea, 0xe2, 0xdc });
        gbc.writeMem(0xdce2, { 0x0 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xe3e4, gbc.sp());
        EXPECT(0x2924, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0xdce2));
        // EA 0331
        gbc.setState(0x850f, 0x19ed, 0x6d20, 0x6d1b, 0x31fd, 0xc97f, 0x1, 0x0);
        gbc.writeMem(0x850f, { 0xea, 0x48, 0xb6 });
        gbc.writeMem(0xb648, { 0x0 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x19ed, gbc.sp());
        EXPECT(0x8512, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x850f));
        EXPECT(0x48, gbc.readMem(0x8510));
        EXPECT(0xb6, gbc.readMem(0x8511));
        EXPECT(0x6d, gbc.readMem(0xb648));
        // EA 0333
        gbc.setState(0x31a7, 0x5fcf, 0xdb60, 0x6dbb, 0x673e, 0x9329, 0x1, 0x1);
        gbc.writeMem(0x31a7, { 0xea, 0x19, 0x84 });
        gbc.writeMem(0x8419, { 0x0 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x5fcf, gbc.sp());
        EXPECT(0x31aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdb, gbc.readMem(0x8419));
        // EA 0335
        gbc.setState(0x4556, 0x82, 0x38a0, 0xd96f, 0xc78, 0xad0f, 0x0, 0x1);
        gbc.writeMem(0x4556, { 0xea, 0x3, 0xa8 });
        gbc.writeMem(0xa803, { 0x0 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x82, gbc.sp());
        EXPECT(0x4559, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0xa803));
        // EA 0337
        gbc.setState(0xdfa6, 0x38b4, 0xf3c0, 0x4f27, 0xdf40, 0x9535, 0x1, 0x0);
        gbc.writeMem(0xaa07, { 0x0 });
        gbc.writeMem(0xdfa6, { 0xea, 0x7, 0xaa });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x38b4, gbc.sp());
        EXPECT(0xdfa9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf3, gbc.readMem(0xaa07));
        EXPECT(0xea, gbc.readMem(0xdfa6));
        EXPECT(0x7, gbc.readMem(0xdfa7));
        EXPECT(0xaa, gbc.readMem(0xdfa8));
        // EA 0339
        gbc.setState(0xc679, 0x3e3d, 0xdc80, 0xaff3, 0xcec7, 0x513d, 0x0, 0x1);
        gbc.writeMem(0xb0e6, { 0x0 });
        gbc.writeMem(0xc679, { 0xea, 0xe6, 0xb0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x3e3d, gbc.sp());
        EXPECT(0xc67c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb0e6));
        EXPECT(0xea, gbc.readMem(0xc679));
        EXPECT(0xe6, gbc.readMem(0xc67a));
        EXPECT(0xb0, gbc.readMem(0xc67b));
        // EA 033C
        gbc.setState(0xbdfd, 0x7ac2, 0x3210, 0x8adc, 0xe1af, 0xa0af, 0x0, 0x1);
        gbc.writeMem(0xa7a2, { 0x0 });
        gbc.writeMem(0xbdfd, { 0xea, 0xa2, 0xa7 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x7ac2, gbc.sp());
        EXPECT(0xbe00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xa7a2));
        EXPECT(0xea, gbc.readMem(0xbdfd));
        EXPECT(0xa2, gbc.readMem(0xbdfe));
        EXPECT(0xa7, gbc.readMem(0xbdff));
        // EA 033D
        gbc.setState(0xd4c3, 0x951e, 0x50, 0xfec0, 0xff93, 0x668b, 0x1, 0x1);
        gbc.writeMem(0x513b, { 0x0 });
        gbc.writeMem(0xd4c3, { 0xea, 0x3b, 0x51 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x951e, gbc.sp());
        EXPECT(0xd4c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xd4c3));
        EXPECT(0x3b, gbc.readMem(0xd4c4));
        EXPECT(0x51, gbc.readMem(0xd4c5));
        // EA 033E
        gbc.setState(0x7e57, 0x806a, 0xae80, 0xcf38, 0xee09, 0x4113, 0x0, 0x1);
        gbc.writeMem(0x7e57, { 0xea, 0xbb, 0xfb });
        gbc.writeMem(0xfbbb, { 0x0 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x806a, gbc.sp());
        EXPECT(0x7e5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xae, gbc.readMem(0xfbbb));
        // EA 0341
        gbc.setState(0x6295, 0x9701, 0x9e0, 0x2802, 0xf5be, 0x3ee0, 0x0, 0x1);
        gbc.writeMem(0x6295, { 0xea, 0xa9, 0xa6 });
        gbc.writeMem(0xa6a9, { 0x0 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x9701, gbc.sp());
        EXPECT(0x6298, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0xa6a9));
        // EA 0343
        gbc.setState(0x9fa6, 0x7b21, 0x8bf0, 0x2a4d, 0x7b0e, 0x1c10, 0x0, 0x0);
        gbc.writeMem(0x9fa6, { 0xea, 0x7a, 0xc3 });
        gbc.writeMem(0xc37a, { 0x0 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x7b21, gbc.sp());
        EXPECT(0x9fa9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9fa6));
        EXPECT(0x7a, gbc.readMem(0x9fa7));
        EXPECT(0xc3, gbc.readMem(0x9fa8));
        EXPECT(0x8b, gbc.readMem(0xc37a));
        // EA 0344
        gbc.setState(0x8897, 0xd93f, 0x1fe0, 0xe049, 0x15fa, 0x9387, 0x0, 0x1);
        gbc.writeMem(0x8897, { 0xea, 0xf4, 0xac });
        gbc.writeMem(0xacf4, { 0x0 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xd93f, gbc.sp());
        EXPECT(0x889a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8897));
        EXPECT(0xf4, gbc.readMem(0x8898));
        EXPECT(0xac, gbc.readMem(0x8899));
        EXPECT(0x1f, gbc.readMem(0xacf4));
        // EA 0345
        gbc.setState(0x3556, 0x319c, 0x4400, 0xaf7d, 0x1a0f, 0xbc9a, 0x1, 0x0);
        gbc.writeMem(0x3556, { 0xea, 0xde, 0xf7 });
        gbc.writeMem(0xf7de, { 0x0 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x319c, gbc.sp());
        EXPECT(0x3559, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x44, gbc.readMem(0xf7de));
        // EA 0348
        gbc.setState(0x31a4, 0xaa73, 0x6c90, 0x1f86, 0xd1de, 0x3c6a, 0x1, 0x1);
        gbc.writeMem(0x31a4, { 0xea, 0xa4, 0xd7 });
        gbc.writeMem(0xd7a4, { 0x0 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xaa73, gbc.sp());
        EXPECT(0x31a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6c, gbc.readMem(0xd7a4));
        // EA 034C
        gbc.setState(0xe33c, 0x54f8, 0x8d60, 0x2cd7, 0x313b, 0xd6e7, 0x1, 0x0);
        gbc.writeMem(0xbe2a, { 0x0 });
        gbc.writeMem(0xe33c, { 0xea, 0x2a, 0xbe });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x54f8, gbc.sp());
        EXPECT(0xe33f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8d, gbc.readMem(0xbe2a));
        EXPECT(0xea, gbc.readMem(0xe33c));
        EXPECT(0x2a, gbc.readMem(0xe33d));
        EXPECT(0xbe, gbc.readMem(0xe33e));
        // EA 034E
        gbc.setState(0x4838, 0x14b0, 0xb3d0, 0xa7bd, 0xa55d, 0x5798, 0x1, 0x1);
        gbc.writeMem(0x4838, { 0xea, 0x2f, 0xdb });
        gbc.writeMem(0xdb2f, { 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x14b0, gbc.sp());
        EXPECT(0x483b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb3, gbc.readMem(0xdb2f));
        // EA 0350
        gbc.setState(0x3be5, 0xeb5a, 0x2ea0, 0x241, 0x486f, 0x3542, 0x0, 0x0);
        gbc.writeMem(0x3be5, { 0xea, 0x5a, 0xe3 });
        gbc.writeMem(0xe35a, { 0x0 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xeb5a, gbc.sp());
        EXPECT(0x3be8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2e, gbc.readMem(0xe35a));
        // EA 0351
        gbc.setState(0xa536, 0xa007, 0x60d0, 0x9cc0, 0x41ec, 0xc8ea, 0x0, 0x0);
        gbc.writeMem(0xa536, { 0xea, 0x38, 0xeb });
        gbc.writeMem(0xeb38, { 0x0 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xa007, gbc.sp());
        EXPECT(0xa539, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa536));
        EXPECT(0x38, gbc.readMem(0xa537));
        EXPECT(0xeb, gbc.readMem(0xa538));
        EXPECT(0x60, gbc.readMem(0xeb38));
        // EA 0353
        gbc.setState(0xe5cd, 0x38ad, 0x3870, 0x2e7b, 0xbb75, 0x5212, 0x0, 0x1);
        gbc.writeMem(0x9c59, { 0x0 });
        gbc.writeMem(0xe5cd, { 0xea, 0x59, 0x9c });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x38ad, gbc.sp());
        EXPECT(0xe5d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0x9c59));
        EXPECT(0xea, gbc.readMem(0xe5cd));
        EXPECT(0x59, gbc.readMem(0xe5ce));
        EXPECT(0x9c, gbc.readMem(0xe5cf));
        // EA 0357
        gbc.setState(0x80ba, 0xe4b6, 0x9040, 0x845e, 0xc298, 0xfec5, 0x0, 0x1);
        gbc.writeMem(0x80ba, { 0xea, 0x3d, 0xad });
        gbc.writeMem(0xad3d, { 0x0 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xe4b6, gbc.sp());
        EXPECT(0x80bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x80ba));
        EXPECT(0x3d, gbc.readMem(0x80bb));
        EXPECT(0xad, gbc.readMem(0x80bc));
        EXPECT(0x90, gbc.readMem(0xad3d));
        // EA 035A
        gbc.setState(0x7af, 0xa141, 0xe450, 0xe8f6, 0xcbe9, 0x15d5, 0x1, 0x0);
        gbc.writeMem(0x7af, { 0xea, 0xd, 0xbc });
        gbc.writeMem(0xbc0d, { 0x0 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xa141, gbc.sp());
        EXPECT(0x7b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0xbc0d));
        // EA 035C
        gbc.setState(0xa3e3, 0x4e6e, 0xb700, 0xd524, 0x1946, 0xe4fb, 0x1, 0x0);
        gbc.writeMem(0xa3e3, { 0xea, 0x41, 0xe6 });
        gbc.writeMem(0xe641, { 0x0 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x4e6e, gbc.sp());
        EXPECT(0xa3e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa3e3));
        EXPECT(0x41, gbc.readMem(0xa3e4));
        EXPECT(0xe6, gbc.readMem(0xa3e5));
        EXPECT(0xb7, gbc.readMem(0xe641));
        // EA 035F
        gbc.setState(0x72d4, 0xbd59, 0xdb20, 0x8cc5, 0xb39d, 0xab3d, 0x1, 0x0);
        gbc.writeMem(0x72d4, { 0xea, 0x4b, 0x93 });
        gbc.writeMem(0x934b, { 0x0 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xbd59, gbc.sp());
        EXPECT(0x72d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdb, gbc.readMem(0x934b));
        // EA 0360
        gbc.setState(0x4c7c, 0x3f9a, 0x7f0, 0x8d87, 0xea98, 0x7b98, 0x0, 0x0);
        gbc.writeMem(0x4c7c, { 0xea, 0xd5, 0xf2 });
        gbc.writeMem(0xf2d5, { 0x0 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x3f9a, gbc.sp());
        EXPECT(0x4c7f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7, gbc.readMem(0xf2d5));
        // EA 0361
        gbc.setState(0x7bd, 0xcb01, 0x7540, 0x2e6d, 0x7498, 0xd259, 0x1, 0x0);
        gbc.writeMem(0x7bd, { 0xea, 0x4b, 0x85 });
        gbc.writeMem(0x854b, { 0x0 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xcb01, gbc.sp());
        EXPECT(0x7c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x75, gbc.readMem(0x854b));
        // EA 0363
        gbc.setState(0x5392, 0xf66b, 0xb30, 0x38ca, 0x72cf, 0xc51f, 0x1, 0x0);
        gbc.writeMem(0x5392, { 0xea, 0xf6, 0xa1 });
        gbc.writeMem(0xa1f6, { 0x0 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xf66b, gbc.sp());
        EXPECT(0x5395, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb, gbc.readMem(0xa1f6));
        // EA 0365
        gbc.setState(0x8c1, 0x610a, 0xa790, 0x84a9, 0x99c, 0x4662, 0x0, 0x0);
        gbc.writeMem(0x8c1, { 0xea, 0x61, 0xe0 });
        gbc.writeMem(0xe061, { 0x0 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x610a, gbc.sp());
        EXPECT(0x8c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa7, gbc.readMem(0xe061));
        // EA 0366
        gbc.setState(0x7406, 0xa9a4, 0x15e0, 0xc4ce, 0x83e6, 0x6fa8, 0x1, 0x0);
        gbc.writeMem(0x7406, { 0xea, 0xc2, 0xd3 });
        gbc.writeMem(0xd3c2, { 0x0 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xa9a4, gbc.sp());
        EXPECT(0x7409, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x15, gbc.readMem(0xd3c2));
        // EA 0367
        gbc.setState(0xa7d, 0x6a80, 0x6d90, 0xde4b, 0xb9d2, 0xe4a2, 0x1, 0x0);
        gbc.writeMem(0xa7d, { 0xea, 0x5, 0x8e });
        gbc.writeMem(0x8e05, { 0x0 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x6a80, gbc.sp());
        EXPECT(0xa80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6d, gbc.readMem(0x8e05));
        // EA 0368
        gbc.setState(0x62ae, 0xd5d1, 0xb020, 0x3905, 0x5844, 0xc17d, 0x0, 0x0);
        gbc.writeMem(0x62ae, { 0xea, 0xf5, 0x9d });
        gbc.writeMem(0x9df5, { 0x0 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xd5d1, gbc.sp());
        EXPECT(0x62b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb0, gbc.readMem(0x9df5));
        // EA 036D
        gbc.setState(0xa48c, 0xa37b, 0x3720, 0xd179, 0xa349, 0x3a31, 0x1, 0x1);
        gbc.writeMem(0xa48c, { 0xea, 0xa7, 0xd2 });
        gbc.writeMem(0xd2a7, { 0x0 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xa37b, gbc.sp());
        EXPECT(0xa48f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa48c));
        EXPECT(0xa7, gbc.readMem(0xa48d));
        EXPECT(0xd2, gbc.readMem(0xa48e));
        EXPECT(0x37, gbc.readMem(0xd2a7));
        // EA 0370
        gbc.setState(0x7c7f, 0x167a, 0x7f30, 0x7f21, 0xf634, 0xf8dc, 0x1, 0x1);
        gbc.writeMem(0x7c7f, { 0xea, 0xbf, 0xee });
        gbc.writeMem(0xeebf, { 0x0 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x167a, gbc.sp());
        EXPECT(0x7c82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7f, gbc.readMem(0xeebf));
        // EA 0373
        gbc.setState(0xa556, 0xdd04, 0xd1a0, 0x1d4b, 0x323a, 0x3e94, 0x0, 0x0);
        gbc.writeMem(0xa556, { 0xea, 0x7c, 0xb3 });
        gbc.writeMem(0xb37c, { 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xdd04, gbc.sp());
        EXPECT(0xa559, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xa556));
        EXPECT(0x7c, gbc.readMem(0xa557));
        EXPECT(0xb3, gbc.readMem(0xa558));
        EXPECT(0xd1, gbc.readMem(0xb37c));
        // EA 0374
        gbc.setState(0x3907, 0x9bac, 0xcf10, 0xdae9, 0xa7b1, 0x18e1, 0x0, 0x0);
        gbc.writeMem(0x3907, { 0xea, 0xb1, 0xd3 });
        gbc.writeMem(0xd3b1, { 0x0 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x9bac, gbc.sp());
        EXPECT(0x390a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xd3b1));
        // EA 0375
        gbc.setState(0x7a7, 0x9f72, 0x9b30, 0x5871, 0xc6ca, 0x99f3, 0x1, 0x1);
        gbc.writeMem(0x7a7, { 0xea, 0xd2, 0x86 });
        gbc.writeMem(0x86d2, { 0x0 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x9f72, gbc.sp());
        EXPECT(0x7aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9b, gbc.readMem(0x86d2));
        // EA 037E
        gbc.setState(0x341f, 0x633d, 0x5400, 0x1e8c, 0x79be, 0xca2c, 0x0, 0x0);
        gbc.writeMem(0x341f, { 0xea, 0x6, 0x90 });
        gbc.writeMem(0x9006, { 0x0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x633d, gbc.sp());
        EXPECT(0x3422, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0x9006));
        // EA 0380
        gbc.setState(0xe977, 0x73ac, 0x63f0, 0x6bc2, 0x5b2b, 0x525e, 0x0, 0x1);
        gbc.writeMem(0xbcbf, { 0x0 });
        gbc.writeMem(0xe977, { 0xea, 0xbf, 0xbc });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x73ac, gbc.sp());
        EXPECT(0xe97a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x63, gbc.readMem(0xbcbf));
        EXPECT(0xea, gbc.readMem(0xe977));
        EXPECT(0xbf, gbc.readMem(0xe978));
        EXPECT(0xbc, gbc.readMem(0xe979));
        // EA 0381
        gbc.setState(0x47eb, 0xe56, 0xa560, 0x9d95, 0xcd57, 0xc763, 0x0, 0x0);
        gbc.writeMem(0x47eb, { 0xea, 0x97, 0x98 });
        gbc.writeMem(0x9897, { 0x0 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xe56, gbc.sp());
        EXPECT(0x47ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0x9897));
        // EA 0382
        gbc.setState(0xc152, 0xee2, 0xc600, 0x3b97, 0x60f4, 0x5663, 0x1, 0x1);
        gbc.writeMem(0xc152, { 0xea, 0x7e, 0xc2 });
        gbc.writeMem(0xc27e, { 0x0 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xee2, gbc.sp());
        EXPECT(0xc155, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc152));
        EXPECT(0x7e, gbc.readMem(0xc153));
        EXPECT(0xc2, gbc.readMem(0xc154));
        EXPECT(0xc6, gbc.readMem(0xc27e));
        // EA 0387
        gbc.setState(0xbeba, 0x49c9, 0x5f90, 0x39c4, 0xaefc, 0xd0cd, 0x0, 0x0);
        gbc.writeMem(0xbeba, { 0xea, 0x8b, 0xda });
        gbc.writeMem(0xda8b, { 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x49c9, gbc.sp());
        EXPECT(0xbebd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xbeba));
        EXPECT(0x8b, gbc.readMem(0xbebb));
        EXPECT(0xda, gbc.readMem(0xbebc));
        EXPECT(0x5f, gbc.readMem(0xda8b));
        // EA 038C
        gbc.setState(0xf28, 0xb213, 0x2870, 0xa61c, 0x1306, 0x9217, 0x0, 0x0);
        gbc.writeMem(0xf28, { 0xea, 0x32, 0xd8 });
        gbc.writeMem(0xd832, { 0x0 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xb213, gbc.sp());
        EXPECT(0xf2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0xd832));
        // EA 038D
        gbc.setState(0x9727, 0x213, 0xf050, 0xb135, 0x202d, 0xa296, 0x1, 0x0);
        gbc.writeMem(0x9727, { 0xea, 0x98, 0xc1 });
        gbc.writeMem(0xc198, { 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x213, gbc.sp());
        EXPECT(0x972a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9727));
        EXPECT(0x98, gbc.readMem(0x9728));
        EXPECT(0xc1, gbc.readMem(0x9729));
        EXPECT(0xf0, gbc.readMem(0xc198));
        // EA 038E
        gbc.setState(0xd0b3, 0x2587, 0x6a0, 0x7c8e, 0x1828, 0x1960, 0x0, 0x0);
        gbc.writeMem(0x9f15, { 0x0 });
        gbc.writeMem(0xd0b3, { 0xea, 0x15, 0x9f });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x2587, gbc.sp());
        EXPECT(0xd0b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6, gbc.readMem(0x9f15));
        EXPECT(0xea, gbc.readMem(0xd0b3));
        EXPECT(0x15, gbc.readMem(0xd0b4));
        EXPECT(0x9f, gbc.readMem(0xd0b5));
        // EA 038F
        gbc.setState(0xd2f1, 0x5139, 0x8510, 0xfc95, 0xa71a, 0x81fc, 0x0, 0x1);
        gbc.writeMem(0xd2f1, { 0xea, 0xde, 0xf4 });
        gbc.writeMem(0xf4de, { 0x0 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x5139, gbc.sp());
        EXPECT(0xd2f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xd2f1));
        EXPECT(0xde, gbc.readMem(0xd2f2));
        EXPECT(0xf4, gbc.readMem(0xd2f3));
        EXPECT(0x85, gbc.readMem(0xf4de));
        // EA 0390
        gbc.setState(0xdf66, 0x689a, 0x4830, 0xd67a, 0x8119, 0xc0fd, 0x1, 0x0);
        gbc.writeMem(0xdf66, { 0xea, 0xeb, 0xe6 });
        gbc.writeMem(0xe6eb, { 0x0 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x689a, gbc.sp());
        EXPECT(0xdf69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xdf66));
        EXPECT(0xeb, gbc.readMem(0xdf67));
        EXPECT(0xe6, gbc.readMem(0xdf68));
        EXPECT(0x48, gbc.readMem(0xe6eb));
        // EA 0391
        gbc.setState(0xecc3, 0x292b, 0xf090, 0x1694, 0x8071, 0x20ed, 0x1, 0x0);
        gbc.writeMem(0xecc3, { 0xea, 0x42, 0xed });
        gbc.writeMem(0xed42, { 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x292b, gbc.sp());
        EXPECT(0xecc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xecc3));
        EXPECT(0x42, gbc.readMem(0xecc4));
        EXPECT(0xed, gbc.readMem(0xecc5));
        EXPECT(0xf0, gbc.readMem(0xed42));
        // EA 0394
        gbc.setState(0xaba8, 0x5e63, 0xcce0, 0xc555, 0xf67e, 0x6223, 0x1, 0x0);
        gbc.writeMem(0xaba8, { 0xea, 0xe4, 0xee });
        gbc.writeMem(0xeee4, { 0x0 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x5e63, gbc.sp());
        EXPECT(0xabab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xaba8));
        EXPECT(0xe4, gbc.readMem(0xaba9));
        EXPECT(0xee, gbc.readMem(0xabaa));
        EXPECT(0xcc, gbc.readMem(0xeee4));
        // EA 0396
        gbc.setState(0xe5eb, 0xb99d, 0x3310, 0xbd2f, 0x713a, 0x140c, 0x1, 0x0);
        gbc.writeMem(0xe5d2, { 0x0 });
        gbc.writeMem(0xe5eb, { 0xea, 0xd2, 0xe5 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xb99d, gbc.sp());
        EXPECT(0xe5ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x33, gbc.readMem(0xe5d2));
        EXPECT(0xea, gbc.readMem(0xe5eb));
        EXPECT(0xd2, gbc.readMem(0xe5ec));
        EXPECT(0xe5, gbc.readMem(0xe5ed));
        // EA 0398
        gbc.setState(0x40cb, 0xf854, 0x53a0, 0x6a11, 0x857f, 0xe5cc, 0x0, 0x1);
        gbc.writeMem(0x40cb, { 0xea, 0x99, 0xf4 });
        gbc.writeMem(0xf499, { 0x0 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xf854, gbc.sp());
        EXPECT(0x40ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xf499));
        // EA 0399
        gbc.setState(0x4280, 0x58ac, 0x52c0, 0x824e, 0x9366, 0x75eb, 0x1, 0x1);
        gbc.writeMem(0x4280, { 0xea, 0x5e, 0xf0 });
        gbc.writeMem(0xf05e, { 0x0 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x58ac, gbc.sp());
        EXPECT(0x4283, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0xf05e));
        // EA 039C
        gbc.setState(0xb5fa, 0xa1f9, 0x8c30, 0xb81c, 0x48d0, 0x8a7e, 0x1, 0x0);
        gbc.writeMem(0x86d6, { 0x0 });
        gbc.writeMem(0xb5fa, { 0xea, 0xd6, 0x86 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xa1f9, gbc.sp());
        EXPECT(0xb5fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0x86d6));
        EXPECT(0xea, gbc.readMem(0xb5fa));
        EXPECT(0xd6, gbc.readMem(0xb5fb));
        EXPECT(0x86, gbc.readMem(0xb5fc));
        // EA 039E
        gbc.setState(0xbbaa, 0xa7ab, 0x5890, 0xcd2f, 0xce52, 0x824, 0x0, 0x0);
        gbc.writeMem(0x9181, { 0x0 });
        gbc.writeMem(0xbbaa, { 0xea, 0x81, 0x91 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xa7ab, gbc.sp());
        EXPECT(0xbbad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0x9181));
        EXPECT(0xea, gbc.readMem(0xbbaa));
        EXPECT(0x81, gbc.readMem(0xbbab));
        EXPECT(0x91, gbc.readMem(0xbbac));
        // EA 03A1
        gbc.setState(0xadcc, 0xb8e3, 0x5d40, 0x828e, 0x7157, 0xa42e, 0x0, 0x0);
        gbc.writeMem(0xa5e6, { 0x0 });
        gbc.writeMem(0xadcc, { 0xea, 0xe6, 0xa5 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xb8e3, gbc.sp());
        EXPECT(0xadcf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5d, gbc.readMem(0xa5e6));
        EXPECT(0xea, gbc.readMem(0xadcc));
        EXPECT(0xe6, gbc.readMem(0xadcd));
        EXPECT(0xa5, gbc.readMem(0xadce));
        // EA 03A2
        gbc.setState(0x2999, 0xf963, 0xcd90, 0xfd43, 0x38e4, 0x9a56, 0x0, 0x0);
        gbc.writeMem(0x2999, { 0xea, 0x57, 0xcc });
        gbc.writeMem(0xcc57, { 0x0 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xf963, gbc.sp());
        EXPECT(0x299c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xcc57));
        // EA 03A4
        gbc.setState(0x39ff, 0x5db7, 0xf530, 0x82c2, 0x1c2c, 0x13ac, 0x1, 0x0);
        gbc.writeMem(0x39ff, { 0xea, 0xf5, 0x89 });
        gbc.writeMem(0x89f5, { 0x0 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x5db7, gbc.sp());
        EXPECT(0x3a02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf5, gbc.readMem(0x89f5));
        // EA 03A7
        gbc.setState(0xde1e, 0x1e09, 0xe80, 0xf86, 0xe6d4, 0xd3ce, 0x1, 0x1);
        gbc.writeMem(0xa605, { 0x0 });
        gbc.writeMem(0xde1e, { 0xea, 0x5, 0xa6 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x1e09, gbc.sp());
        EXPECT(0xde21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe, gbc.readMem(0xa605));
        EXPECT(0xea, gbc.readMem(0xde1e));
        EXPECT(0x5, gbc.readMem(0xde1f));
        EXPECT(0xa6, gbc.readMem(0xde20));
        // EA 03A8
        gbc.setState(0xacf, 0x561, 0xa780, 0x213a, 0xd02c, 0x6bf5, 0x1, 0x1);
        gbc.writeMem(0xacf, { 0xea, 0xaf, 0xb7 });
        gbc.writeMem(0xb7af, { 0x0 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x561, gbc.sp());
        EXPECT(0xad2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa7, gbc.readMem(0xb7af));
        // EA 03AA
        gbc.setState(0xef12, 0xa870, 0xd330, 0x93c6, 0xad00, 0xa6ca, 0x1, 0x1);
        gbc.writeMem(0xef12, { 0xea, 0x9a, 0xf3 });
        gbc.writeMem(0xf39a, { 0x0 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xa870, gbc.sp());
        EXPECT(0xef15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xef12));
        EXPECT(0x9a, gbc.readMem(0xef13));
        EXPECT(0xf3, gbc.readMem(0xef14));
        EXPECT(0xd3, gbc.readMem(0xf39a));
        // EA 03AD
        gbc.setState(0xef77, 0x5a2e, 0xc40, 0xe716, 0x13ac, 0xa9c6, 0x0, 0x1);
        gbc.writeMem(0xeb5b, { 0x0 });
        gbc.writeMem(0xef77, { 0xea, 0x5b, 0xeb });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x5a2e, gbc.sp());
        EXPECT(0xef7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc, gbc.readMem(0xeb5b));
        EXPECT(0xea, gbc.readMem(0xef77));
        EXPECT(0x5b, gbc.readMem(0xef78));
        EXPECT(0xeb, gbc.readMem(0xef79));
        // EA 03AE
        gbc.setState(0x9813, 0xa506, 0xc820, 0x3dc6, 0x3280, 0x966, 0x0, 0x0);
        gbc.writeMem(0x9813, { 0xea, 0x93, 0xf5 });
        gbc.writeMem(0xf593, { 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xa506, gbc.sp());
        EXPECT(0x9816, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x9813));
        EXPECT(0x93, gbc.readMem(0x9814));
        EXPECT(0xf5, gbc.readMem(0x9815));
        EXPECT(0xc8, gbc.readMem(0xf593));
        // EA 03AF
        gbc.setState(0xad2a, 0xe7c1, 0xd30, 0xb93c, 0x6a76, 0x24d8, 0x1, 0x1);
        gbc.writeMem(0x9f16, { 0x0 });
        gbc.writeMem(0xad2a, { 0xea, 0x16, 0x9f });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xe7c1, gbc.sp());
        EXPECT(0xad2d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd, gbc.readMem(0x9f16));
        EXPECT(0xea, gbc.readMem(0xad2a));
        EXPECT(0x16, gbc.readMem(0xad2b));
        EXPECT(0x9f, gbc.readMem(0xad2c));
        // EA 03B0
        gbc.setState(0xc361, 0x590f, 0x9b10, 0x190, 0x16e5, 0xa95c, 0x1, 0x1);
        gbc.writeMem(0xc361, { 0xea, 0x19, 0xf3 });
        gbc.writeMem(0xf319, { 0x0 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x590f, gbc.sp());
        EXPECT(0xc364, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc361));
        EXPECT(0x19, gbc.readMem(0xc362));
        EXPECT(0xf3, gbc.readMem(0xc363));
        EXPECT(0x9b, gbc.readMem(0xf319));
        // EA 03B4
        gbc.setState(0xde49, 0xe7c0, 0xf100, 0x1371, 0x64cf, 0xfe4d, 0x1, 0x1);
        gbc.writeMem(0xde49, { 0xea, 0xc8, 0xef });
        gbc.writeMem(0xefc8, { 0x0 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xe7c0, gbc.sp());
        EXPECT(0xde4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xde49));
        EXPECT(0xc8, gbc.readMem(0xde4a));
        EXPECT(0xef, gbc.readMem(0xde4b));
        EXPECT(0xf1, gbc.readMem(0xefc8));
        // EA 03B6
        gbc.setState(0xdfca, 0xbbea, 0x1d0, 0xa1c1, 0x53ec, 0xb8ed, 0x0, 0x1);
        gbc.writeMem(0xc673, { 0x0 });
        gbc.writeMem(0xdfca, { 0xea, 0x73, 0xc6 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xbbea, gbc.sp());
        EXPECT(0xdfcd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1, gbc.readMem(0xc673));
        EXPECT(0xea, gbc.readMem(0xdfca));
        EXPECT(0x73, gbc.readMem(0xdfcb));
        EXPECT(0xc6, gbc.readMem(0xdfcc));
        // EA 03B8
        gbc.setState(0xea11, 0x29da, 0xa7f0, 0xdc55, 0x24e0, 0xe6e7, 0x1, 0x0);
        gbc.writeMem(0xded4, { 0x0 });
        gbc.writeMem(0xea11, { 0xea, 0xd4, 0xde });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x29da, gbc.sp());
        EXPECT(0xea14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa7, gbc.readMem(0xded4));
        EXPECT(0xea, gbc.readMem(0xea11));
        EXPECT(0xd4, gbc.readMem(0xea12));
        EXPECT(0xde, gbc.readMem(0xea13));
        // EA 03BA
        gbc.setState(0xd46, 0x4, 0xac40, 0x7cf9, 0x2623, 0x5a82, 0x0, 0x1);
        gbc.writeMem(0xd46, { 0xea, 0x29, 0xd4 });
        gbc.writeMem(0xd429, { 0x0 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x4, gbc.sp());
        EXPECT(0xd49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xac, gbc.readMem(0xd429));
        // EA 03BE
        gbc.setState(0xdcf4, 0x28a4, 0x14f0, 0xb311, 0xab12, 0x311f, 0x0, 0x1);
        gbc.writeMem(0xdcf4, { 0xea, 0x5e, 0xe3 });
        gbc.writeMem(0xe35e, { 0x0 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x28a4, gbc.sp());
        EXPECT(0xdcf7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xdcf4));
        EXPECT(0x5e, gbc.readMem(0xdcf5));
        EXPECT(0xe3, gbc.readMem(0xdcf6));
        EXPECT(0x14, gbc.readMem(0xe35e));
        // EA 03BF
        gbc.setState(0xe78d, 0x8585, 0xeff0, 0xf7ad, 0x5004, 0x6f84, 0x0, 0x1);
        gbc.writeMem(0x8e71, { 0x0 });
        gbc.writeMem(0xe78d, { 0xea, 0x71, 0x8e });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x8585, gbc.sp());
        EXPECT(0xe790, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xef, gbc.readMem(0x8e71));
        EXPECT(0xea, gbc.readMem(0xe78d));
        EXPECT(0x71, gbc.readMem(0xe78e));
        EXPECT(0x8e, gbc.readMem(0xe78f));
        // EA 03C3
        gbc.setState(0xe32d, 0xbbb0, 0x5f00, 0x6d21, 0xdc11, 0x4df9, 0x1, 0x1);
        gbc.writeMem(0x9ad7, { 0x0 });
        gbc.writeMem(0xe32d, { 0xea, 0xd7, 0x9a });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xbbb0, gbc.sp());
        EXPECT(0xe330, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5f, gbc.readMem(0x9ad7));
        EXPECT(0xea, gbc.readMem(0xe32d));
        EXPECT(0xd7, gbc.readMem(0xe32e));
        EXPECT(0x9a, gbc.readMem(0xe32f));
        // EA 03C5
        gbc.setState(0x6023, 0x978d, 0x3080, 0xd3f4, 0xf96b, 0x8ef1, 0x0, 0x1);
        gbc.writeMem(0x6023, { 0xea, 0x19, 0xcc });
        gbc.writeMem(0xcc19, { 0x0 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x978d, gbc.sp());
        EXPECT(0x6026, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x30, gbc.readMem(0xcc19));
        // EA 03C8
        gbc.setState(0x6a3, 0xd011, 0xd700, 0xe73b, 0x7d32, 0x81a2, 0x1, 0x0);
        gbc.writeMem(0x6a3, { 0xea, 0xfc, 0xc1 });
        gbc.writeMem(0xc1fc, { 0x0 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xd011, gbc.sp());
        EXPECT(0x6a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd7, gbc.readMem(0xc1fc));
        // EA 03CD
        gbc.setState(0x278b, 0x3169, 0xb920, 0x9eae, 0x6475, 0xc06a, 0x0, 0x0);
        gbc.writeMem(0x278b, { 0xea, 0x71, 0x83 });
        gbc.writeMem(0x8371, { 0x0 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x3169, gbc.sp());
        EXPECT(0x278e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb9, gbc.readMem(0x8371));
        // EA 03D1
        gbc.setState(0x2fa9, 0x163a, 0x7750, 0x528a, 0x56e, 0xe572, 0x0, 0x1);
        gbc.writeMem(0x2fa9, { 0xea, 0x41, 0x99 });
        gbc.writeMem(0x9941, { 0x0 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x163a, gbc.sp());
        EXPECT(0x2fac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x77, gbc.readMem(0x9941));
        // EA 03D5
        gbc.setState(0x3fa7, 0x4133, 0x9580, 0xdba6, 0x8396, 0x3f58, 0x0, 0x1);
        gbc.writeMem(0x3fa7, { 0xea, 0x7b, 0xc7 });
        gbc.writeMem(0xc77b, { 0x0 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x4133, gbc.sp());
        EXPECT(0x3faa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x95, gbc.readMem(0xc77b));
        // EA 03D6
        gbc.setState(0x39dd, 0x6471, 0x7cc0, 0x54bb, 0x40f2, 0xaf83, 0x1, 0x1);
        gbc.writeMem(0x39dd, { 0xea, 0xa7, 0xdb });
        gbc.writeMem(0xdba7, { 0x0 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x6471, gbc.sp());
        EXPECT(0x39e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xdba7));
        // EA 03D7
        gbc.setState(0xbbda, 0x195a, 0x1680, 0xa343, 0xe1b6, 0x7942, 0x1, 0x1);
        gbc.writeMem(0xbbda, { 0xea, 0x20, 0xfa });
        gbc.writeMem(0xfa20, { 0x0 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x195a, gbc.sp());
        EXPECT(0xbbdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xbbda));
        EXPECT(0x20, gbc.readMem(0xbbdb));
        EXPECT(0xfa, gbc.readMem(0xbbdc));
        EXPECT(0x16, gbc.readMem(0xfa20));
        // EA 03DD
        gbc.setState(0x5ca7, 0x5b4e, 0x2320, 0xbe85, 0x9d81, 0x90d8, 0x1, 0x1);
        gbc.writeMem(0x5ca7, { 0xea, 0x3e, 0xee });
        gbc.writeMem(0xee3e, { 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x5b4e, gbc.sp());
        EXPECT(0x5caa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0xee3e));
        // EA 03DF
        gbc.setState(0xb3db, 0x6dea, 0x1350, 0x9794, 0x697f, 0xa711, 0x0, 0x1);
        gbc.writeMem(0xb3db, { 0xea, 0xa1, 0xc2 });
        gbc.writeMem(0xc2a1, { 0x0 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x6dea, gbc.sp());
        EXPECT(0xb3de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xb3db));
        EXPECT(0xa1, gbc.readMem(0xb3dc));
        EXPECT(0xc2, gbc.readMem(0xb3dd));
        EXPECT(0x13, gbc.readMem(0xc2a1));
        // EA 03E0
        gbc.setState(0x7823, 0x6bde, 0x78d0, 0xa799, 0x8376, 0x9094, 0x1, 0x0);
        gbc.writeMem(0x7823, { 0xea, 0x23, 0xf4 });
        gbc.writeMem(0xf423, { 0x0 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x6bde, gbc.sp());
        EXPECT(0x7826, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xf423));
        // EA 03E3
        gbc.setState(0x3fc5, 0x87db, 0xa570, 0x779a, 0xc8b7, 0xbce6, 0x1, 0x0);
        gbc.writeMem(0x3fc5, { 0xea, 0xb, 0xb8 });
        gbc.writeMem(0xb80b, { 0x0 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x87db, gbc.sp());
        EXPECT(0x3fc8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0xb80b));
        // EA 03E4
        gbc.setState(0x3572, 0xfa45, 0x9e90, 0xc109, 0xebb5, 0xd57d, 0x0, 0x0);
        gbc.writeMem(0x3572, { 0xea, 0xda, 0x9d });
        gbc.writeMem(0x9dda, { 0x0 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xfa45, gbc.sp());
        EXPECT(0x3575, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9e, gbc.readMem(0x9dda));
        // EA 03E5
        gbc.setState(0x6f42, 0x8891, 0x4e70, 0x9630, 0x694b, 0xb34f, 0x1, 0x0);
        gbc.writeMem(0x6f42, { 0xea, 0x1d, 0x85 });
        gbc.writeMem(0x851d, { 0x0 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x8891, gbc.sp());
        EXPECT(0x6f45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0x851d));
        // EA 03E6
        gbc.setState(0xce71, 0x8fac, 0x1270, 0xdd3e, 0x1d75, 0xb018, 0x1, 0x0);
        gbc.writeMem(0x8970, { 0x0 });
        gbc.writeMem(0xce71, { 0xea, 0x70, 0x89 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x8fac, gbc.sp());
        EXPECT(0xce74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0x8970));
        EXPECT(0xea, gbc.readMem(0xce71));
        EXPECT(0x70, gbc.readMem(0xce72));
        EXPECT(0x89, gbc.readMem(0xce73));
    }
