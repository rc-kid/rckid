    TEST(gbcemu, opcode_cb_af) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB AF 0000
        gbc.setState(0x454f, 0xd564, 0x2400, 0x4053, 0xdf97, 0x250d, 0x0, 0x0);
        gbc.writeMem(0x454f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xd564, gbc.sp());
        EXPECT(0x4551, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0001
        gbc.setState(0xc25e, 0x2da4, 0xf460, 0xb4b4, 0x3715, 0xbd45, 0x1, 0x0);
        gbc.writeMem(0xc25e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x2da4, gbc.sp());
        EXPECT(0xc260, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc25e));
        EXPECT(0xaf, gbc.readMem(0xc25f));
        // CB AF 0002
        gbc.setState(0x3a27, 0xde47, 0x3660, 0xbdb8, 0x5cbf, 0xa88c, 0x0, 0x0);
        gbc.writeMem(0x3a27, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xde47, gbc.sp());
        EXPECT(0x3a29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0003
        gbc.setState(0x2dba, 0x7049, 0xd1a0, 0xe6ba, 0x970, 0x6114, 0x1, 0x0);
        gbc.writeMem(0x2dba, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x7049, gbc.sp());
        EXPECT(0x2dbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0004
        gbc.setState(0x37eb, 0xa478, 0xe2b0, 0x9ce8, 0xf2d6, 0x3c16, 0x0, 0x1);
        gbc.writeMem(0x37eb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xa478, gbc.sp());
        EXPECT(0x37ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0005
        gbc.setState(0x180, 0x155d, 0x3080, 0xfa3e, 0x774a, 0x7cd4, 0x1, 0x1);
        gbc.writeMem(0x180, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x155d, gbc.sp());
        EXPECT(0x182, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0006
        gbc.setState(0xa056, 0xf438, 0x31d0, 0x471b, 0xe56d, 0x7a2, 0x1, 0x1);
        gbc.writeMem(0xa056, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xf438, gbc.sp());
        EXPECT(0xa058, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa056));
        EXPECT(0xaf, gbc.readMem(0xa057));
        // CB AF 0007
        gbc.setState(0x46ae, 0xa88, 0x1960, 0x84ee, 0x8ef2, 0x1b2, 0x1, 0x0);
        gbc.writeMem(0x46ae, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xa88, gbc.sp());
        EXPECT(0x46b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0008
        gbc.setState(0xaa76, 0x4f90, 0x4d40, 0xdab, 0x71cd, 0xdbc7, 0x0, 0x0);
        gbc.writeMem(0xaa76, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x4f90, gbc.sp());
        EXPECT(0xaa78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa76));
        EXPECT(0xaf, gbc.readMem(0xaa77));
        // CB AF 0009
        gbc.setState(0x21df, 0xab47, 0x3b30, 0x639d, 0x7e1a, 0x3372, 0x1, 0x1);
        gbc.writeMem(0x21df, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xab47, gbc.sp());
        EXPECT(0x21e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 000A
        gbc.setState(0x6f8c, 0xf5a6, 0x6df0, 0xcf66, 0x2815, 0x5cf8, 0x0, 0x0);
        gbc.writeMem(0x6f8c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xf5a6, gbc.sp());
        EXPECT(0x6f8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 000B
        gbc.setState(0xb825, 0xb2cb, 0xf8f0, 0xed35, 0xa2cb, 0x116d, 0x1, 0x0);
        gbc.writeMem(0xb825, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xb2cb, gbc.sp());
        EXPECT(0xb827, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb825));
        EXPECT(0xaf, gbc.readMem(0xb826));
        // CB AF 000C
        gbc.setState(0xe6d5, 0x932, 0x6050, 0x9f9f, 0x3ba, 0x3c55, 0x1, 0x1);
        gbc.writeMem(0xe6d5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x932, gbc.sp());
        EXPECT(0xe6d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6d5));
        EXPECT(0xaf, gbc.readMem(0xe6d6));
        // CB AF 000D
        gbc.setState(0xe75a, 0xbcfc, 0x4bf0, 0x9205, 0x8c91, 0xecc9, 0x1, 0x1);
        gbc.writeMem(0xe75a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xbcfc, gbc.sp());
        EXPECT(0xe75c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe75a));
        EXPECT(0xaf, gbc.readMem(0xe75b));
        // CB AF 000E
        gbc.setState(0xbed, 0x6748, 0xc0e0, 0xb3ad, 0x9a40, 0xc1db, 0x1, 0x0);
        gbc.writeMem(0xbed, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x6748, gbc.sp());
        EXPECT(0xbef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 000F
        gbc.setState(0x3f35, 0xd3f6, 0x7fd0, 0xf3d5, 0xdcd6, 0xeb35, 0x1, 0x1);
        gbc.writeMem(0x3f35, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xd3f6, gbc.sp());
        EXPECT(0x3f37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0010
        gbc.setState(0xacc1, 0x4017, 0x6990, 0x715a, 0xbc66, 0x4c61, 0x0, 0x1);
        gbc.writeMem(0xacc1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x4017, gbc.sp());
        EXPECT(0xacc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacc1));
        EXPECT(0xaf, gbc.readMem(0xacc2));
        // CB AF 0011
        gbc.setState(0xbaeb, 0x2b06, 0x44f0, 0xb564, 0x274b, 0x451c, 0x1, 0x1);
        gbc.writeMem(0xbaeb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x2b06, gbc.sp());
        EXPECT(0xbaed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaeb));
        EXPECT(0xaf, gbc.readMem(0xbaec));
        // CB AF 0012
        gbc.setState(0xad12, 0x4920, 0xece0, 0x112d, 0x16c9, 0x8c20, 0x1, 0x0);
        gbc.writeMem(0xad12, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x4920, gbc.sp());
        EXPECT(0xad14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad12));
        EXPECT(0xaf, gbc.readMem(0xad13));
        // CB AF 0013
        gbc.setState(0x8cb9, 0x7254, 0x68e0, 0xda2e, 0x292d, 0x8400, 0x1, 0x1);
        gbc.writeMem(0x8cb9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x7254, gbc.sp());
        EXPECT(0x8cbb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cb9));
        EXPECT(0xaf, gbc.readMem(0x8cba));
        // CB AF 0014
        gbc.setState(0x6a7f, 0xdc08, 0x8a20, 0xf3f2, 0xa19c, 0xaaeb, 0x0, 0x1);
        gbc.writeMem(0x6a7f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xdc08, gbc.sp());
        EXPECT(0x6a81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0015
        gbc.setState(0x2b1d, 0x8ea1, 0x7470, 0x7345, 0xa364, 0xf257, 0x1, 0x0);
        gbc.writeMem(0x2b1d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x8ea1, gbc.sp());
        EXPECT(0x2b1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0016
        gbc.setState(0x4a54, 0x8314, 0xbb40, 0x3f35, 0x306d, 0x4085, 0x0, 0x0);
        gbc.writeMem(0x4a54, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x8314, gbc.sp());
        EXPECT(0x4a56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0017
        gbc.setState(0x955, 0xa302, 0xc120, 0xfc12, 0x9a4e, 0x3df4, 0x1, 0x1);
        gbc.writeMem(0x955, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xa302, gbc.sp());
        EXPECT(0x957, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0018
        gbc.setState(0xe0cc, 0x5acc, 0xd310, 0xb858, 0x618b, 0x80c2, 0x0, 0x1);
        gbc.writeMem(0xe0cc, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x5acc, gbc.sp());
        EXPECT(0xe0ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0cc));
        EXPECT(0xaf, gbc.readMem(0xe0cd));
        // CB AF 0019
        gbc.setState(0x2280, 0xd1d8, 0x4e40, 0xdc1d, 0x4a8b, 0x92f2, 0x1, 0x1);
        gbc.writeMem(0x2280, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xd1d8, gbc.sp());
        EXPECT(0x2282, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 001A
        gbc.setState(0xafb8, 0x5968, 0xec80, 0x4bc4, 0x3267, 0xe299, 0x0, 0x1);
        gbc.writeMem(0xafb8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x5968, gbc.sp());
        EXPECT(0xafba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafb8));
        EXPECT(0xaf, gbc.readMem(0xafb9));
        // CB AF 001B
        gbc.setState(0x7262, 0xa33e, 0x61a0, 0x9f61, 0x52a4, 0x1dca, 0x1, 0x0);
        gbc.writeMem(0x7262, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xa33e, gbc.sp());
        EXPECT(0x7264, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 001C
        gbc.setState(0x9384, 0xfe15, 0xaae0, 0x18cc, 0x659a, 0x4c9, 0x1, 0x0);
        gbc.writeMem(0x9384, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xfe15, gbc.sp());
        EXPECT(0x9386, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9384));
        EXPECT(0xaf, gbc.readMem(0x9385));
        // CB AF 001D
        gbc.setState(0x98b6, 0x6cc3, 0x1080, 0xe983, 0x3d8d, 0xc470, 0x0, 0x0);
        gbc.writeMem(0x98b6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x6cc3, gbc.sp());
        EXPECT(0x98b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98b6));
        EXPECT(0xaf, gbc.readMem(0x98b7));
        // CB AF 001E
        gbc.setState(0xea45, 0x5375, 0x1790, 0x7cda, 0x1bb8, 0x3e37, 0x0, 0x1);
        gbc.writeMem(0xea45, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x5375, gbc.sp());
        EXPECT(0xea47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea45));
        EXPECT(0xaf, gbc.readMem(0xea46));
        // CB AF 001F
        gbc.setState(0xb960, 0x606b, 0xbf30, 0x62cc, 0x6eb, 0xb13b, 0x1, 0x1);
        gbc.writeMem(0xb960, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x606b, gbc.sp());
        EXPECT(0xb962, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb960));
        EXPECT(0xaf, gbc.readMem(0xb961));
        // CB AF 0020
        gbc.setState(0x1543, 0x738f, 0x3730, 0xe331, 0xecf7, 0x289, 0x0, 0x0);
        gbc.writeMem(0x1543, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x738f, gbc.sp());
        EXPECT(0x1545, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0021
        gbc.setState(0x5eeb, 0x992e, 0x7000, 0x6697, 0x1ff6, 0xde6e, 0x1, 0x1);
        gbc.writeMem(0x5eeb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x992e, gbc.sp());
        EXPECT(0x5eed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0023
        gbc.setState(0xa1fa, 0xa243, 0x2e90, 0xe7f9, 0xbe1d, 0xae44, 0x0, 0x0);
        gbc.writeMem(0xa1fa, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xa243, gbc.sp());
        EXPECT(0xa1fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1fa));
        EXPECT(0xaf, gbc.readMem(0xa1fb));
        // CB AF 0024
        gbc.setState(0x2a1, 0x2882, 0xdb30, 0xf4b0, 0x76ad, 0x8e52, 0x1, 0x0);
        gbc.writeMem(0x2a1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x2882, gbc.sp());
        EXPECT(0x2a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0025
        gbc.setState(0x3649, 0x8bae, 0x4530, 0x1508, 0x8330, 0xef94, 0x1, 0x1);
        gbc.writeMem(0x3649, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x8bae, gbc.sp());
        EXPECT(0x364b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0026
        gbc.setState(0x2e93, 0x828c, 0xd520, 0xd83b, 0x9ada, 0x2a44, 0x0, 0x1);
        gbc.writeMem(0x2e93, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x828c, gbc.sp());
        EXPECT(0x2e95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0028
        gbc.setState(0x947d, 0x92aa, 0x560, 0x973f, 0x753a, 0xeb73, 0x0, 0x1);
        gbc.writeMem(0x947d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x92aa, gbc.sp());
        EXPECT(0x947f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x947d));
        EXPECT(0xaf, gbc.readMem(0x947e));
        // CB AF 0029
        gbc.setState(0xac13, 0xd114, 0x9b70, 0x1a93, 0x1d48, 0x7d83, 0x1, 0x1);
        gbc.writeMem(0xac13, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xd114, gbc.sp());
        EXPECT(0xac15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac13));
        EXPECT(0xaf, gbc.readMem(0xac14));
        // CB AF 002A
        gbc.setState(0x1f5, 0x2923, 0x52f0, 0xb1d1, 0x539e, 0x6b3c, 0x0, 0x0);
        gbc.writeMem(0x1f5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x2923, gbc.sp());
        EXPECT(0x1f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 002B
        gbc.setState(0xc65a, 0xccd1, 0x8d90, 0x76c1, 0xfb66, 0xd9bf, 0x1, 0x1);
        gbc.writeMem(0xc65a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xccd1, gbc.sp());
        EXPECT(0xc65c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc65a));
        EXPECT(0xaf, gbc.readMem(0xc65b));
        // CB AF 002C
        gbc.setState(0xaec6, 0x9e03, 0xf170, 0x5ac1, 0x3b95, 0x2e51, 0x0, 0x1);
        gbc.writeMem(0xaec6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x9e03, gbc.sp());
        EXPECT(0xaec8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaec6));
        EXPECT(0xaf, gbc.readMem(0xaec7));
        // CB AF 002D
        gbc.setState(0x215b, 0x41a6, 0xd490, 0xe59, 0xda37, 0x1e09, 0x0, 0x0);
        gbc.writeMem(0x215b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x41a6, gbc.sp());
        EXPECT(0x215d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 002E
        gbc.setState(0x194e, 0xc4c3, 0x3f70, 0xdfbf, 0xf327, 0x9142, 0x0, 0x1);
        gbc.writeMem(0x194e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xc4c3, gbc.sp());
        EXPECT(0x1950, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 002F
        gbc.setState(0xa978, 0x663c, 0x7c50, 0xc693, 0xafc6, 0xf03c, 0x1, 0x1);
        gbc.writeMem(0xa978, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x663c, gbc.sp());
        EXPECT(0xa97a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa978));
        EXPECT(0xaf, gbc.readMem(0xa979));
        // CB AF 0030
        gbc.setState(0x1f97, 0x8a4, 0x7eb0, 0x1982, 0x1fd3, 0x9470, 0x1, 0x0);
        gbc.writeMem(0x1f97, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x8a4, gbc.sp());
        EXPECT(0x1f99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0032
        gbc.setState(0x13ff, 0x8238, 0x8210, 0xdf12, 0xa048, 0xf4d5, 0x1, 0x1);
        gbc.writeMem(0x13ff, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x8238, gbc.sp());
        EXPECT(0x1401, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0033
        gbc.setState(0x75be, 0xe648, 0x9740, 0x308f, 0xb91c, 0x98ba, 0x0, 0x0);
        gbc.writeMem(0x75be, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xe648, gbc.sp());
        EXPECT(0x75c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0034
        gbc.setState(0x3a9e, 0xe7d1, 0x6160, 0x95aa, 0x6b8a, 0xcc85, 0x1, 0x0);
        gbc.writeMem(0x3a9e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xe7d1, gbc.sp());
        EXPECT(0x3aa0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0035
        gbc.setState(0x83e5, 0x36ab, 0xddc0, 0x68f7, 0xe6ba, 0x5f44, 0x1, 0x0);
        gbc.writeMem(0x83e5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x36ab, gbc.sp());
        EXPECT(0x83e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83e5));
        EXPECT(0xaf, gbc.readMem(0x83e6));
        // CB AF 0036
        gbc.setState(0x75d, 0x87b9, 0x3db0, 0xd9b2, 0xdc8c, 0x4963, 0x1, 0x0);
        gbc.writeMem(0x75d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x87b9, gbc.sp());
        EXPECT(0x75f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0037
        gbc.setState(0xebcb, 0xe5dd, 0x4ad0, 0x219f, 0x8aa6, 0x1779, 0x1, 0x0);
        gbc.writeMem(0xebcb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xe5dd, gbc.sp());
        EXPECT(0xebcd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebcb));
        EXPECT(0xaf, gbc.readMem(0xebcc));
        // CB AF 0039
        gbc.setState(0x149a, 0xd36f, 0x2410, 0x3293, 0x6970, 0xb9c7, 0x1, 0x0);
        gbc.writeMem(0x149a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xd36f, gbc.sp());
        EXPECT(0x149c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 003A
        gbc.setState(0xbe64, 0x6d1c, 0x1d10, 0x6ed3, 0x2db1, 0xeda8, 0x0, 0x0);
        gbc.writeMem(0xbe64, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x6d1c, gbc.sp());
        EXPECT(0xbe66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe64));
        EXPECT(0xaf, gbc.readMem(0xbe65));
        // CB AF 003B
        gbc.setState(0xc5cd, 0x2d2c, 0xb630, 0x474a, 0xf4f7, 0xd411, 0x0, 0x1);
        gbc.writeMem(0xc5cd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x2d2c, gbc.sp());
        EXPECT(0xc5cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5cd));
        EXPECT(0xaf, gbc.readMem(0xc5ce));
        // CB AF 003C
        gbc.setState(0x7ec, 0xe944, 0x53f0, 0xd2d7, 0x7f4e, 0x2f72, 0x0, 0x1);
        gbc.writeMem(0x7ec, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xe944, gbc.sp());
        EXPECT(0x7ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 003D
        gbc.setState(0x408d, 0x63c1, 0x5460, 0x9711, 0x334, 0x376e, 0x0, 0x0);
        gbc.writeMem(0x408d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x63c1, gbc.sp());
        EXPECT(0x408f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 003E
        gbc.setState(0xef34, 0x69e6, 0xf790, 0x846d, 0xa1e9, 0x1c04, 0x1, 0x1);
        gbc.writeMem(0xef34, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x69e6, gbc.sp());
        EXPECT(0xef36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef34));
        EXPECT(0xaf, gbc.readMem(0xef35));
        // CB AF 003F
        gbc.setState(0x1284, 0x5012, 0x3c30, 0x69a, 0xa0c7, 0x3b5e, 0x1, 0x0);
        gbc.writeMem(0x1284, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x5012, gbc.sp());
        EXPECT(0x1286, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0040
        gbc.setState(0xf0a, 0x6294, 0x1220, 0xec1a, 0x9606, 0x5906, 0x0, 0x1);
        gbc.writeMem(0xf0a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x6294, gbc.sp());
        EXPECT(0xf0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0041
        gbc.setState(0x213c, 0xf416, 0xda20, 0x1569, 0x8dab, 0x6eb2, 0x0, 0x0);
        gbc.writeMem(0x213c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xf416, gbc.sp());
        EXPECT(0x213e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0042
        gbc.setState(0x624b, 0xf2b2, 0x1a00, 0xa781, 0x7e2b, 0x4683, 0x0, 0x1);
        gbc.writeMem(0x624b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xf2b2, gbc.sp());
        EXPECT(0x624d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0043
        gbc.setState(0x33c9, 0xae1d, 0xe30, 0xec2f, 0x158d, 0x964a, 0x1, 0x1);
        gbc.writeMem(0x33c9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xae1d, gbc.sp());
        EXPECT(0x33cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0044
        gbc.setState(0x46c4, 0xb872, 0x1500, 0x6ce1, 0x5c86, 0x1d53, 0x0, 0x1);
        gbc.writeMem(0x46c4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xb872, gbc.sp());
        EXPECT(0x46c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0045
        gbc.setState(0xca1, 0x39d5, 0xa540, 0x2f34, 0x27b4, 0x289c, 0x1, 0x0);
        gbc.writeMem(0xca1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x39d5, gbc.sp());
        EXPECT(0xca3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0046
        gbc.setState(0x8af2, 0x49fe, 0xe930, 0xd978, 0x5eaa, 0xab16, 0x0, 0x0);
        gbc.writeMem(0x8af2, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x49fe, gbc.sp());
        EXPECT(0x8af4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8af2));
        EXPECT(0xaf, gbc.readMem(0x8af3));
        // CB AF 0047
        gbc.setState(0xb151, 0xe21b, 0x2460, 0xc6a0, 0x15a, 0x6452, 0x1, 0x0);
        gbc.writeMem(0xb151, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xe21b, gbc.sp());
        EXPECT(0xb153, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb151));
        EXPECT(0xaf, gbc.readMem(0xb152));
        // CB AF 0048
        gbc.setState(0xdbfc, 0x7571, 0xeca0, 0x94f, 0x1987, 0x9ef9, 0x1, 0x0);
        gbc.writeMem(0xdbfc, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x7571, gbc.sp());
        EXPECT(0xdbfe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbfc));
        EXPECT(0xaf, gbc.readMem(0xdbfd));
        // CB AF 0049
        gbc.setState(0x5cc3, 0xefb9, 0xc050, 0x245a, 0x8d60, 0x733, 0x1, 0x0);
        gbc.writeMem(0x5cc3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xefb9, gbc.sp());
        EXPECT(0x5cc5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 004A
        gbc.setState(0x6c13, 0x5706, 0xfb0, 0xc5a0, 0x2f4b, 0x4ba4, 0x1, 0x0);
        gbc.writeMem(0x6c13, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x5706, gbc.sp());
        EXPECT(0x6c15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 004B
        gbc.setState(0xc6ea, 0xbbba, 0x6120, 0x403d, 0x98b8, 0x5240, 0x0, 0x1);
        gbc.writeMem(0xc6ea, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xbbba, gbc.sp());
        EXPECT(0xc6ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6ea));
        EXPECT(0xaf, gbc.readMem(0xc6eb));
        // CB AF 004C
        gbc.setState(0xe7f0, 0xd16d, 0xde90, 0x39b6, 0xfc22, 0xbd68, 0x0, 0x1);
        gbc.writeMem(0xe7f0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xd16d, gbc.sp());
        EXPECT(0xe7f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7f0));
        EXPECT(0xaf, gbc.readMem(0xe7f1));
        // CB AF 004D
        gbc.setState(0xad4a, 0xea8b, 0x6a80, 0xe0d2, 0xfeb8, 0x7874, 0x1, 0x1);
        gbc.writeMem(0xad4a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xea8b, gbc.sp());
        EXPECT(0xad4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad4a));
        EXPECT(0xaf, gbc.readMem(0xad4b));
        // CB AF 004E
        gbc.setState(0x7da2, 0xc66d, 0x5fc0, 0x1886, 0xaa96, 0x706d, 0x0, 0x1);
        gbc.writeMem(0x7da2, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xc66d, gbc.sp());
        EXPECT(0x7da4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 004F
        gbc.setState(0xccc1, 0x1226, 0xcf40, 0xcc42, 0xec0d, 0x6a71, 0x0, 0x1);
        gbc.writeMem(0xccc1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x1226, gbc.sp());
        EXPECT(0xccc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccc1));
        EXPECT(0xaf, gbc.readMem(0xccc2));
        // CB AF 0050
        gbc.setState(0x6c24, 0xf543, 0x1cf0, 0xdc74, 0x8b47, 0x213d, 0x1, 0x1);
        gbc.writeMem(0x6c24, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xf543, gbc.sp());
        EXPECT(0x6c26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0051
        gbc.setState(0x6485, 0xe7c5, 0x88e0, 0xfcc3, 0x9dea, 0xe6c, 0x1, 0x1);
        gbc.writeMem(0x6485, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xe7c5, gbc.sp());
        EXPECT(0x6487, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0052
        gbc.setState(0x5620, 0x9a1, 0xaf50, 0x1ae7, 0x6356, 0x18e5, 0x1, 0x0);
        gbc.writeMem(0x5620, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x9a1, gbc.sp());
        EXPECT(0x5622, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0053
        gbc.setState(0x1eb5, 0x8036, 0x4bd0, 0xd2c, 0x413f, 0xc9b4, 0x0, 0x1);
        gbc.writeMem(0x1eb5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x8036, gbc.sp());
        EXPECT(0x1eb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0054
        gbc.setState(0x1123, 0xe191, 0x6ab0, 0x731a, 0xfaa3, 0x4981, 0x0, 0x0);
        gbc.writeMem(0x1123, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xe191, gbc.sp());
        EXPECT(0x1125, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0055
        gbc.setState(0xd21f, 0xc85b, 0xa130, 0x6c4b, 0x9021, 0xd14e, 0x0, 0x0);
        gbc.writeMem(0xd21f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xc85b, gbc.sp());
        EXPECT(0xd221, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd21f));
        EXPECT(0xaf, gbc.readMem(0xd220));
        // CB AF 0056
        gbc.setState(0xa595, 0x97d0, 0xb020, 0x4399, 0x4abe, 0x379e, 0x0, 0x0);
        gbc.writeMem(0xa595, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x97d0, gbc.sp());
        EXPECT(0xa597, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa595));
        EXPECT(0xaf, gbc.readMem(0xa596));
        // CB AF 0057
        gbc.setState(0x668f, 0x1177, 0x7c0, 0x725e, 0x360a, 0xc557, 0x0, 0x0);
        gbc.writeMem(0x668f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x1177, gbc.sp());
        EXPECT(0x6691, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0058
        gbc.setState(0xb84, 0x4897, 0xdff0, 0x8983, 0xacf4, 0xb905, 0x1, 0x1);
        gbc.writeMem(0xb84, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x4897, gbc.sp());
        EXPECT(0xb86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0059
        gbc.setState(0xa95e, 0xe224, 0x3bf0, 0xcfd1, 0x2e2d, 0xdcbb, 0x0, 0x0);
        gbc.writeMem(0xa95e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xe224, gbc.sp());
        EXPECT(0xa960, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa95e));
        EXPECT(0xaf, gbc.readMem(0xa95f));
        // CB AF 005A
        gbc.setState(0x3c06, 0x6dc6, 0xd720, 0x29d0, 0x40e9, 0x7157, 0x0, 0x0);
        gbc.writeMem(0x3c06, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x6dc6, gbc.sp());
        EXPECT(0x3c08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 005B
        gbc.setState(0x301f, 0xa4f1, 0xa890, 0xc60d, 0x41a4, 0x8cad, 0x1, 0x1);
        gbc.writeMem(0x301f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xa4f1, gbc.sp());
        EXPECT(0x3021, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 005C
        gbc.setState(0x5ae8, 0x7f07, 0x6190, 0x5a13, 0x9565, 0xc158, 0x0, 0x1);
        gbc.writeMem(0x5ae8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x7f07, gbc.sp());
        EXPECT(0x5aea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 005D
        gbc.setState(0x3b1b, 0x277d, 0x6400, 0x7f1f, 0xcd63, 0x1d58, 0x1, 0x1);
        gbc.writeMem(0x3b1b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x277d, gbc.sp());
        EXPECT(0x3b1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 005E
        gbc.setState(0xaeb7, 0xacdd, 0x640, 0xfa0, 0xdf62, 0x62f9, 0x0, 0x1);
        gbc.writeMem(0xaeb7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xacdd, gbc.sp());
        EXPECT(0xaeb9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaeb7));
        EXPECT(0xaf, gbc.readMem(0xaeb8));
        // CB AF 005F
        gbc.setState(0x8665, 0x4057, 0x9800, 0x8932, 0x5c33, 0xb580, 0x1, 0x1);
        gbc.writeMem(0x8665, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x4057, gbc.sp());
        EXPECT(0x8667, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8665));
        EXPECT(0xaf, gbc.readMem(0x8666));
        // CB AF 0060
        gbc.setState(0x2da7, 0x4969, 0xbc20, 0xc328, 0xfb94, 0xd112, 0x1, 0x1);
        gbc.writeMem(0x2da7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x4969, gbc.sp());
        EXPECT(0x2da9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0061
        gbc.setState(0x2e4d, 0xea09, 0x4240, 0x3c16, 0x2d19, 0xc4db, 0x1, 0x1);
        gbc.writeMem(0x2e4d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xea09, gbc.sp());
        EXPECT(0x2e4f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0062
        gbc.setState(0x125c, 0xa53b, 0x8e00, 0x262b, 0xfcd1, 0xc0b1, 0x1, 0x0);
        gbc.writeMem(0x125c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xa53b, gbc.sp());
        EXPECT(0x125e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0063
        gbc.setState(0xe48a, 0x90b1, 0xde20, 0x8d68, 0x54c1, 0x5bc6, 0x1, 0x1);
        gbc.writeMem(0xe48a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x90b1, gbc.sp());
        EXPECT(0xe48c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe48a));
        EXPECT(0xaf, gbc.readMem(0xe48b));
        // CB AF 0064
        gbc.setState(0xfff, 0xeb29, 0xf930, 0x614e, 0xf7c5, 0x2291, 0x0, 0x0);
        gbc.writeMem(0xfff, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xeb29, gbc.sp());
        EXPECT(0x1001, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0065
        gbc.setState(0x899c, 0xfdb2, 0x6c80, 0x2d86, 0xff38, 0xf6a4, 0x0, 0x0);
        gbc.writeMem(0x899c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xfdb2, gbc.sp());
        EXPECT(0x899e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x899c));
        EXPECT(0xaf, gbc.readMem(0x899d));
        // CB AF 0066
        gbc.setState(0x4291, 0x719c, 0x9f20, 0x3f88, 0x9b9c, 0x3508, 0x1, 0x1);
        gbc.writeMem(0x4291, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x719c, gbc.sp());
        EXPECT(0x4293, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0067
        gbc.setState(0x3b68, 0xe101, 0x3a50, 0x3901, 0x82d, 0xaa42, 0x0, 0x0);
        gbc.writeMem(0x3b68, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xe101, gbc.sp());
        EXPECT(0x3b6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0068
        gbc.setState(0x89e2, 0xa088, 0x6320, 0x3880, 0xa293, 0x30aa, 0x0, 0x1);
        gbc.writeMem(0x89e2, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xa088, gbc.sp());
        EXPECT(0x89e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89e2));
        EXPECT(0xaf, gbc.readMem(0x89e3));
        // CB AF 0069
        gbc.setState(0xbdd4, 0xfce7, 0x6af0, 0xabb8, 0xb51a, 0x60a2, 0x0, 0x0);
        gbc.writeMem(0xbdd4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xfce7, gbc.sp());
        EXPECT(0xbdd6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdd4));
        EXPECT(0xaf, gbc.readMem(0xbdd5));
        // CB AF 006A
        gbc.setState(0xe94, 0xf2f5, 0xdad0, 0xc554, 0xd3a1, 0x33af, 0x1, 0x0);
        gbc.writeMem(0xe94, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xf2f5, gbc.sp());
        EXPECT(0xe96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 006B
        gbc.setState(0x6f10, 0x930, 0x2350, 0x2e4e, 0xfdc3, 0x4e69, 0x1, 0x1);
        gbc.writeMem(0x6f10, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x930, gbc.sp());
        EXPECT(0x6f12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 006C
        gbc.setState(0xa323, 0x856f, 0xaa20, 0xd0e, 0x36c1, 0x54c1, 0x0, 0x0);
        gbc.writeMem(0xa323, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x856f, gbc.sp());
        EXPECT(0xa325, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa323));
        EXPECT(0xaf, gbc.readMem(0xa324));
        // CB AF 006D
        gbc.setState(0x5a14, 0x3bbd, 0xec20, 0x3d13, 0x32bb, 0xaf8e, 0x1, 0x1);
        gbc.writeMem(0x5a14, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x3bbd, gbc.sp());
        EXPECT(0x5a16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 006E
        gbc.setState(0xb53c, 0x6fe, 0x51e0, 0xf98c, 0x4118, 0x93, 0x1, 0x0);
        gbc.writeMem(0xb53c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x6fe, gbc.sp());
        EXPECT(0xb53e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb53c));
        EXPECT(0xaf, gbc.readMem(0xb53d));
        // CB AF 006F
        gbc.setState(0x7dec, 0xb865, 0xd6c0, 0x17b3, 0x1f71, 0x6c, 0x1, 0x1);
        gbc.writeMem(0x7dec, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xb865, gbc.sp());
        EXPECT(0x7dee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0070
        gbc.setState(0x5e92, 0xe764, 0xa670, 0xf286, 0xaed5, 0x18e, 0x1, 0x1);
        gbc.writeMem(0x5e92, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xe764, gbc.sp());
        EXPECT(0x5e94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0071
        gbc.setState(0x3a34, 0x9c86, 0x3b10, 0xfcc0, 0x2d4e, 0xaac3, 0x0, 0x1);
        gbc.writeMem(0x3a34, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x9c86, gbc.sp());
        EXPECT(0x3a36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0072
        gbc.setState(0x4e42, 0x1e15, 0x4c30, 0x9b85, 0x4e47, 0x767c, 0x1, 0x1);
        gbc.writeMem(0x4e42, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x1e15, gbc.sp());
        EXPECT(0x4e44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0073
        gbc.setState(0xae42, 0x4eb4, 0xd930, 0xcd8d, 0xe36c, 0x550d, 0x1, 0x1);
        gbc.writeMem(0xae42, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x4eb4, gbc.sp());
        EXPECT(0xae44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae42));
        EXPECT(0xaf, gbc.readMem(0xae43));
        // CB AF 0074
        gbc.setState(0x69e8, 0x91f0, 0xc430, 0xb78e, 0x3d30, 0x6c16, 0x0, 0x0);
        gbc.writeMem(0x69e8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x91f0, gbc.sp());
        EXPECT(0x69ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0075
        gbc.setState(0xa61a, 0xcc00, 0xa760, 0x4902, 0x5f54, 0xc58e, 0x0, 0x0);
        gbc.writeMem(0xa61a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xcc00, gbc.sp());
        EXPECT(0xa61c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa61a));
        EXPECT(0xaf, gbc.readMem(0xa61b));
        // CB AF 0076
        gbc.setState(0x7756, 0x6a49, 0x87d0, 0xc41c, 0x76ed, 0x8fff, 0x0, 0x1);
        gbc.writeMem(0x7756, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x6a49, gbc.sp());
        EXPECT(0x7758, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0077
        gbc.setState(0xae16, 0xeed1, 0x29f0, 0xc7a1, 0x3e38, 0xe831, 0x1, 0x0);
        gbc.writeMem(0xae16, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xeed1, gbc.sp());
        EXPECT(0xae18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae16));
        EXPECT(0xaf, gbc.readMem(0xae17));
        // CB AF 0078
        gbc.setState(0x772c, 0x2e24, 0x6640, 0xf00c, 0x29b, 0xdbb3, 0x1, 0x1);
        gbc.writeMem(0x772c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x2e24, gbc.sp());
        EXPECT(0x772e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0079
        gbc.setState(0xb901, 0x3ec, 0x4250, 0xad95, 0xc435, 0x68db, 0x1, 0x1);
        gbc.writeMem(0xb901, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x3ec, gbc.sp());
        EXPECT(0xb903, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb901));
        EXPECT(0xaf, gbc.readMem(0xb902));
        // CB AF 007A
        gbc.setState(0xa361, 0x3c0a, 0x1d70, 0xb26d, 0x6c33, 0x6518, 0x0, 0x1);
        gbc.writeMem(0xa361, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x3c0a, gbc.sp());
        EXPECT(0xa363, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa361));
        EXPECT(0xaf, gbc.readMem(0xa362));
        // CB AF 007B
        gbc.setState(0x5d09, 0x4a83, 0x5cf0, 0x2c73, 0x6aa4, 0xacc0, 0x0, 0x1);
        gbc.writeMem(0x5d09, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x4a83, gbc.sp());
        EXPECT(0x5d0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 007D
        gbc.setState(0xe5c1, 0xa0cd, 0xe290, 0x4d83, 0x42e6, 0x2904, 0x0, 0x1);
        gbc.writeMem(0xe5c1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xa0cd, gbc.sp());
        EXPECT(0xe5c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5c1));
        EXPECT(0xaf, gbc.readMem(0xe5c2));
        // CB AF 007E
        gbc.setState(0xa905, 0x2117, 0xa6c0, 0x6587, 0x7eb0, 0x2354, 0x1, 0x0);
        gbc.writeMem(0xa905, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x2117, gbc.sp());
        EXPECT(0xa907, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa905));
        EXPECT(0xaf, gbc.readMem(0xa906));
        // CB AF 007F
        gbc.setState(0x5ae1, 0x39c6, 0xf280, 0xfce8, 0x933c, 0x40e9, 0x0, 0x0);
        gbc.writeMem(0x5ae1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x39c6, gbc.sp());
        EXPECT(0x5ae3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0080
        gbc.setState(0xdcef, 0x9585, 0xf920, 0x31e1, 0x7d61, 0x81d4, 0x1, 0x1);
        gbc.writeMem(0xdcef, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x9585, gbc.sp());
        EXPECT(0xdcf1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcef));
        EXPECT(0xaf, gbc.readMem(0xdcf0));
        // CB AF 0081
        gbc.setState(0x1cd3, 0xbd60, 0xb160, 0xac70, 0x3808, 0xdb30, 0x0, 0x1);
        gbc.writeMem(0x1cd3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xbd60, gbc.sp());
        EXPECT(0x1cd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0082
        gbc.setState(0x2397, 0x9c26, 0xa3f0, 0x9bf4, 0xdbfe, 0xaf45, 0x0, 0x0);
        gbc.writeMem(0x2397, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x9c26, gbc.sp());
        EXPECT(0x2399, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0083
        gbc.setState(0x15ad, 0x77c3, 0x1ee0, 0x1186, 0xe156, 0x7091, 0x0, 0x1);
        gbc.writeMem(0x15ad, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x77c3, gbc.sp());
        EXPECT(0x15af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0084
        gbc.setState(0xd7c0, 0x3cb3, 0x5bb0, 0xa464, 0xbcf4, 0x2d42, 0x1, 0x1);
        gbc.writeMem(0xd7c0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x3cb3, gbc.sp());
        EXPECT(0xd7c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7c0));
        EXPECT(0xaf, gbc.readMem(0xd7c1));
        // CB AF 0085
        gbc.setState(0xee6e, 0x6190, 0x7980, 0x26fd, 0x4942, 0x250b, 0x1, 0x1);
        gbc.writeMem(0xee6e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x6190, gbc.sp());
        EXPECT(0xee70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee6e));
        EXPECT(0xaf, gbc.readMem(0xee6f));
        // CB AF 0086
        gbc.setState(0xa23c, 0xc05a, 0x6360, 0xbab8, 0xcdd6, 0x787c, 0x0, 0x1);
        gbc.writeMem(0xa23c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xc05a, gbc.sp());
        EXPECT(0xa23e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa23c));
        EXPECT(0xaf, gbc.readMem(0xa23d));
        // CB AF 0087
        gbc.setState(0x2c36, 0x25b, 0x1be0, 0xae7c, 0x9959, 0xf8dc, 0x1, 0x1);
        gbc.writeMem(0x2c36, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x25b, gbc.sp());
        EXPECT(0x2c38, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0088
        gbc.setState(0xe1e4, 0xf16a, 0x8840, 0xa133, 0x691d, 0x9d3f, 0x0, 0x0);
        gbc.writeMem(0xe1e4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xf16a, gbc.sp());
        EXPECT(0xe1e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1e4));
        EXPECT(0xaf, gbc.readMem(0xe1e5));
        // CB AF 0089
        gbc.setState(0xdb74, 0x8129, 0xd6b0, 0x5170, 0x330b, 0xfff1, 0x1, 0x0);
        gbc.writeMem(0xdb74, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x8129, gbc.sp());
        EXPECT(0xdb76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb74));
        EXPECT(0xaf, gbc.readMem(0xdb75));
        // CB AF 008A
        gbc.setState(0x9222, 0x1b38, 0x80c0, 0x59fb, 0xfaad, 0xa30a, 0x0, 0x1);
        gbc.writeMem(0x9222, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x1b38, gbc.sp());
        EXPECT(0x9224, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9222));
        EXPECT(0xaf, gbc.readMem(0x9223));
        // CB AF 008B
        gbc.setState(0x8a59, 0x7599, 0x4940, 0x7df7, 0xd9c7, 0x71dd, 0x1, 0x0);
        gbc.writeMem(0x8a59, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x7599, gbc.sp());
        EXPECT(0x8a5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a59));
        EXPECT(0xaf, gbc.readMem(0x8a5a));
        // CB AF 008C
        gbc.setState(0xd6d6, 0x379e, 0xaeb0, 0x28e8, 0xd4ed, 0x2b8c, 0x0, 0x1);
        gbc.writeMem(0xd6d6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x379e, gbc.sp());
        EXPECT(0xd6d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6d6));
        EXPECT(0xaf, gbc.readMem(0xd6d7));
        // CB AF 008D
        gbc.setState(0xd8c7, 0x9435, 0x3870, 0xa9c4, 0xd1d6, 0xc165, 0x1, 0x0);
        gbc.writeMem(0xd8c7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x9435, gbc.sp());
        EXPECT(0xd8c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8c7));
        EXPECT(0xaf, gbc.readMem(0xd8c8));
        // CB AF 008E
        gbc.setState(0xee04, 0x9840, 0x7ec0, 0x589c, 0xa9e0, 0x178c, 0x1, 0x1);
        gbc.writeMem(0xee04, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x9840, gbc.sp());
        EXPECT(0xee06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee04));
        EXPECT(0xaf, gbc.readMem(0xee05));
        // CB AF 008F
        gbc.setState(0x702, 0x35d8, 0x56e0, 0x14b9, 0x6cec, 0x1ccd, 0x0, 0x0);
        gbc.writeMem(0x702, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x35d8, gbc.sp());
        EXPECT(0x704, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0090
        gbc.setState(0xb282, 0x8ba3, 0x1150, 0x5d2d, 0x8d73, 0xb7e7, 0x0, 0x1);
        gbc.writeMem(0xb282, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x8ba3, gbc.sp());
        EXPECT(0xb284, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb282));
        EXPECT(0xaf, gbc.readMem(0xb283));
        // CB AF 0091
        gbc.setState(0x41f4, 0x4da9, 0x6790, 0x1038, 0xf4c6, 0x9eee, 0x1, 0x0);
        gbc.writeMem(0x41f4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x4da9, gbc.sp());
        EXPECT(0x41f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0092
        gbc.setState(0x40d2, 0x839f, 0xfa0, 0xde9b, 0x6dbb, 0x3430, 0x1, 0x1);
        gbc.writeMem(0x40d2, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x839f, gbc.sp());
        EXPECT(0x40d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0093
        gbc.setState(0x3f8d, 0xcf70, 0x9ea0, 0xdcae, 0x813c, 0xc9d5, 0x0, 0x0);
        gbc.writeMem(0x3f8d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xcf70, gbc.sp());
        EXPECT(0x3f8f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0094
        gbc.setState(0x229f, 0xfd8d, 0x1c30, 0x7d39, 0xf671, 0x7d13, 0x0, 0x1);
        gbc.writeMem(0x229f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xfd8d, gbc.sp());
        EXPECT(0x22a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0095
        gbc.setState(0xdf33, 0xb07, 0x2390, 0x7bba, 0x5dce, 0x7230, 0x0, 0x1);
        gbc.writeMem(0xdf33, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xb07, gbc.sp());
        EXPECT(0xdf35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf33));
        EXPECT(0xaf, gbc.readMem(0xdf34));
        // CB AF 0096
        gbc.setState(0x3e91, 0xa6c8, 0xb7e0, 0x3ff, 0x1ac0, 0x9998, 0x0, 0x0);
        gbc.writeMem(0x3e91, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xa6c8, gbc.sp());
        EXPECT(0x3e93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0097
        gbc.setState(0x5ad5, 0x4da, 0x37c0, 0x8bd6, 0xc1f3, 0x1fb9, 0x1, 0x0);
        gbc.writeMem(0x5ad5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x4da, gbc.sp());
        EXPECT(0x5ad7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0098
        gbc.setState(0x261c, 0x9990, 0x1920, 0xb405, 0xf850, 0xe3c0, 0x0, 0x1);
        gbc.writeMem(0x261c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x9990, gbc.sp());
        EXPECT(0x261e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0099
        gbc.setState(0xe80, 0x67, 0x2f70, 0xf68a, 0x6dbb, 0xabf1, 0x1, 0x0);
        gbc.writeMem(0xe80, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x67, gbc.sp());
        EXPECT(0xe82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 009A
        gbc.setState(0x8e64, 0xef62, 0x5210, 0x927e, 0x3550, 0x8246, 0x0, 0x1);
        gbc.writeMem(0x8e64, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xef62, gbc.sp());
        EXPECT(0x8e66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e64));
        EXPECT(0xaf, gbc.readMem(0x8e65));
        // CB AF 009B
        gbc.setState(0xcfb5, 0x5379, 0x6dd0, 0xe6bd, 0x5989, 0xe957, 0x1, 0x1);
        gbc.writeMem(0xcfb5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x5379, gbc.sp());
        EXPECT(0xcfb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfb5));
        EXPECT(0xaf, gbc.readMem(0xcfb6));
        // CB AF 009C
        gbc.setState(0x4127, 0x6689, 0x86d0, 0x44fc, 0x1e5a, 0xa9ec, 0x0, 0x1);
        gbc.writeMem(0x4127, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x6689, gbc.sp());
        EXPECT(0x4129, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 009D
        gbc.setState(0xce6f, 0x49b0, 0x6a80, 0xef26, 0x85e8, 0xfa76, 0x0, 0x0);
        gbc.writeMem(0xce6f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x49b0, gbc.sp());
        EXPECT(0xce71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce6f));
        EXPECT(0xaf, gbc.readMem(0xce70));
        // CB AF 009E
        gbc.setState(0x1e8c, 0x7959, 0xa6f0, 0xc314, 0x6465, 0xf7b7, 0x0, 0x0);
        gbc.writeMem(0x1e8c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x7959, gbc.sp());
        EXPECT(0x1e8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 009F
        gbc.setState(0x691, 0x86c2, 0x4380, 0x2a0c, 0x97f0, 0xa560, 0x0, 0x1);
        gbc.writeMem(0x691, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x86c2, gbc.sp());
        EXPECT(0x693, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00A0
        gbc.setState(0xc664, 0x4e11, 0x8850, 0xec60, 0x14dc, 0x7890, 0x1, 0x1);
        gbc.writeMem(0xc664, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x4e11, gbc.sp());
        EXPECT(0xc666, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc664));
        EXPECT(0xaf, gbc.readMem(0xc665));
        // CB AF 00A1
        gbc.setState(0x8fa4, 0xb303, 0xbb80, 0x1b84, 0xede2, 0xacd6, 0x1, 0x0);
        gbc.writeMem(0x8fa4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xb303, gbc.sp());
        EXPECT(0x8fa6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fa4));
        EXPECT(0xaf, gbc.readMem(0x8fa5));
        // CB AF 00A2
        gbc.setState(0x25ce, 0xcdb5, 0xfb70, 0xf53e, 0x2f75, 0xf4a3, 0x1, 0x1);
        gbc.writeMem(0x25ce, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xcdb5, gbc.sp());
        EXPECT(0x25d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00A3
        gbc.setState(0x135a, 0x4c11, 0x3700, 0x23ca, 0xd0fa, 0x4c27, 0x0, 0x0);
        gbc.writeMem(0x135a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x4c11, gbc.sp());
        EXPECT(0x135c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00A5
        gbc.setState(0xecbc, 0xa0fb, 0xac00, 0x25d8, 0x7a6c, 0xc916, 0x0, 0x0);
        gbc.writeMem(0xecbc, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xa0fb, gbc.sp());
        EXPECT(0xecbe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecbc));
        EXPECT(0xaf, gbc.readMem(0xecbd));
        // CB AF 00A6
        gbc.setState(0xccf9, 0x953d, 0x4c60, 0xf5f6, 0x66ee, 0xeb9c, 0x1, 0x0);
        gbc.writeMem(0xccf9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x953d, gbc.sp());
        EXPECT(0xccfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccf9));
        EXPECT(0xaf, gbc.readMem(0xccfa));
        // CB AF 00A7
        gbc.setState(0xe181, 0x6b84, 0x6a30, 0x90aa, 0xd253, 0x1023, 0x0, 0x1);
        gbc.writeMem(0xe181, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x6b84, gbc.sp());
        EXPECT(0xe183, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe181));
        EXPECT(0xaf, gbc.readMem(0xe182));
        // CB AF 00A8
        gbc.setState(0x6d79, 0xf07c, 0xc800, 0xecf6, 0x8c7a, 0xab7a, 0x0, 0x0);
        gbc.writeMem(0x6d79, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xf07c, gbc.sp());
        EXPECT(0x6d7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00A9
        gbc.setState(0xd5c3, 0xb84a, 0xb720, 0x3c9c, 0x6442, 0x746a, 0x1, 0x0);
        gbc.writeMem(0xd5c3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xb84a, gbc.sp());
        EXPECT(0xd5c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5c3));
        EXPECT(0xaf, gbc.readMem(0xd5c4));
        // CB AF 00AA
        gbc.setState(0x5d86, 0xf2b4, 0x51d0, 0x4568, 0xf993, 0xece4, 0x0, 0x1);
        gbc.writeMem(0x5d86, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xf2b4, gbc.sp());
        EXPECT(0x5d88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00AB
        gbc.setState(0x7e00, 0x607d, 0x9570, 0xf112, 0x638a, 0xeb95, 0x0, 0x0);
        gbc.writeMem(0x7e00, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x607d, gbc.sp());
        EXPECT(0x7e02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00AC
        gbc.setState(0x398c, 0x96fc, 0x9e80, 0x893d, 0xfe0a, 0x64fd, 0x0, 0x0);
        gbc.writeMem(0x398c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x96fc, gbc.sp());
        EXPECT(0x398e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00AD
        gbc.setState(0xb858, 0xf5ae, 0xb340, 0xbe66, 0x355b, 0x98af, 0x0, 0x1);
        gbc.writeMem(0xb858, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xf5ae, gbc.sp());
        EXPECT(0xb85a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb858));
        EXPECT(0xaf, gbc.readMem(0xb859));
        // CB AF 00AE
        gbc.setState(0x5814, 0x6753, 0x5060, 0x9a7, 0xad3a, 0x4f, 0x1, 0x0);
        gbc.writeMem(0x5814, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x6753, gbc.sp());
        EXPECT(0x5816, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00AF
        gbc.setState(0x8b12, 0x4a6c, 0x7680, 0xaf50, 0x58df, 0x497, 0x1, 0x1);
        gbc.writeMem(0x8b12, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x4a6c, gbc.sp());
        EXPECT(0x8b14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b12));
        EXPECT(0xaf, gbc.readMem(0x8b13));
        // CB AF 00B0
        gbc.setState(0x753c, 0x46f6, 0x8ca0, 0xd517, 0xfdf9, 0x9b74, 0x0, 0x1);
        gbc.writeMem(0x753c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x46f6, gbc.sp());
        EXPECT(0x753e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00B1
        gbc.setState(0x6578, 0xd987, 0x9e20, 0xce8, 0x7619, 0xf7fe, 0x0, 0x0);
        gbc.writeMem(0x6578, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xd987, gbc.sp());
        EXPECT(0x657a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00B2
        gbc.setState(0x1575, 0x19d3, 0xf8e0, 0xe37d, 0xd261, 0xe851, 0x1, 0x1);
        gbc.writeMem(0x1575, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x19d3, gbc.sp());
        EXPECT(0x1577, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00B3
        gbc.setState(0x471a, 0x8acb, 0x7c00, 0x2fa4, 0xbd28, 0xdb9c, 0x1, 0x1);
        gbc.writeMem(0x471a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x8acb, gbc.sp());
        EXPECT(0x471c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00B4
        gbc.setState(0x431c, 0x7c08, 0xa0e0, 0x863e, 0x75b1, 0x25e, 0x1, 0x0);
        gbc.writeMem(0x431c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x7c08, gbc.sp());
        EXPECT(0x431e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00B5
        gbc.setState(0x9021, 0x94fe, 0x7990, 0x2bcf, 0xcb9c, 0x7817, 0x1, 0x1);
        gbc.writeMem(0x9021, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x94fe, gbc.sp());
        EXPECT(0x9023, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9021));
        EXPECT(0xaf, gbc.readMem(0x9022));
        // CB AF 00B6
        gbc.setState(0x7813, 0xb2dd, 0x650, 0x125, 0x99e4, 0x691d, 0x1, 0x0);
        gbc.writeMem(0x7813, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xb2dd, gbc.sp());
        EXPECT(0x7815, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00B7
        gbc.setState(0x60c3, 0xa212, 0x250, 0xd22e, 0x13d4, 0xcdd4, 0x1, 0x1);
        gbc.writeMem(0x60c3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xa212, gbc.sp());
        EXPECT(0x60c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00B8
        gbc.setState(0xa811, 0x1cc5, 0xcec0, 0x7a17, 0xdda1, 0x7fa6, 0x0, 0x1);
        gbc.writeMem(0xa811, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x1cc5, gbc.sp());
        EXPECT(0xa813, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa811));
        EXPECT(0xaf, gbc.readMem(0xa812));
        // CB AF 00B9
        gbc.setState(0x7995, 0x4958, 0x8100, 0x54ea, 0x5183, 0xd81f, 0x0, 0x1);
        gbc.writeMem(0x7995, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x4958, gbc.sp());
        EXPECT(0x7997, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00BA
        gbc.setState(0xebc0, 0xab9e, 0x3110, 0xea7b, 0x8445, 0x17fc, 0x1, 0x1);
        gbc.writeMem(0xebc0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xab9e, gbc.sp());
        EXPECT(0xebc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebc0));
        EXPECT(0xaf, gbc.readMem(0xebc1));
        // CB AF 00BB
        gbc.setState(0xe764, 0xe051, 0x8c20, 0x71b2, 0xa5d, 0x7925, 0x1, 0x0);
        gbc.writeMem(0xe764, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xe051, gbc.sp());
        EXPECT(0xe766, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe764));
        EXPECT(0xaf, gbc.readMem(0xe765));
        // CB AF 00BC
        gbc.setState(0x2647, 0x27f5, 0xa90, 0xe4d, 0xce25, 0x474, 0x0, 0x0);
        gbc.writeMem(0x2647, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x27f5, gbc.sp());
        EXPECT(0x2649, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00BD
        gbc.setState(0x22cd, 0x8662, 0x9ac0, 0xf943, 0x7c56, 0x179e, 0x1, 0x0);
        gbc.writeMem(0x22cd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x8662, gbc.sp());
        EXPECT(0x22cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00BE
        gbc.setState(0xcb9a, 0x9801, 0xf770, 0xfaa9, 0x8b42, 0x9f9f, 0x1, 0x1);
        gbc.writeMem(0xcb9a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x9801, gbc.sp());
        EXPECT(0xcb9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb9a));
        EXPECT(0xaf, gbc.readMem(0xcb9b));
        // CB AF 00BF
        gbc.setState(0xd3e0, 0x8404, 0x6900, 0x1023, 0xc7cd, 0xe22a, 0x1, 0x1);
        gbc.writeMem(0xd3e0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x8404, gbc.sp());
        EXPECT(0xd3e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3e0));
        EXPECT(0xaf, gbc.readMem(0xd3e1));
        // CB AF 00C0
        gbc.setState(0x6973, 0x457d, 0x5590, 0xdd90, 0x4ec0, 0x70fd, 0x1, 0x0);
        gbc.writeMem(0x6973, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x457d, gbc.sp());
        EXPECT(0x6975, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00C1
        gbc.setState(0x1cc7, 0x8916, 0xe320, 0x1d25, 0x4de6, 0x8617, 0x0, 0x0);
        gbc.writeMem(0x1cc7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x8916, gbc.sp());
        EXPECT(0x1cc9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00C2
        gbc.setState(0x8d0d, 0x8d4, 0x9410, 0x2608, 0x2cb3, 0xe195, 0x0, 0x0);
        gbc.writeMem(0x8d0d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x8d4, gbc.sp());
        EXPECT(0x8d0f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d0d));
        EXPECT(0xaf, gbc.readMem(0x8d0e));
        // CB AF 00C3
        gbc.setState(0x2b44, 0x7e37, 0x8f80, 0x9a56, 0x24fc, 0x636b, 0x0, 0x0);
        gbc.writeMem(0x2b44, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x7e37, gbc.sp());
        EXPECT(0x2b46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00C4
        gbc.setState(0x16da, 0xb7a9, 0x4a50, 0x99c8, 0x1742, 0x6f1, 0x0, 0x0);
        gbc.writeMem(0x16da, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xb7a9, gbc.sp());
        EXPECT(0x16dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00C5
        gbc.setState(0x823c, 0x5662, 0x8320, 0x4cfb, 0xd42f, 0x4ea6, 0x0, 0x0);
        gbc.writeMem(0x823c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x5662, gbc.sp());
        EXPECT(0x823e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x823c));
        EXPECT(0xaf, gbc.readMem(0x823d));
        // CB AF 00C6
        gbc.setState(0x62e7, 0x2, 0x5f30, 0xa82e, 0x2e3c, 0xfaec, 0x0, 0x0);
        gbc.writeMem(0x62e7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x2, gbc.sp());
        EXPECT(0x62e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00C7
        gbc.setState(0xe379, 0xbdd4, 0x3e80, 0xebc6, 0x4645, 0xfbc7, 0x1, 0x1);
        gbc.writeMem(0xe379, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xbdd4, gbc.sp());
        EXPECT(0xe37b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe379));
        EXPECT(0xaf, gbc.readMem(0xe37a));
        // CB AF 00C8
        gbc.setState(0xe89, 0xa156, 0x1380, 0x5fe7, 0x6088, 0xc52c, 0x1, 0x0);
        gbc.writeMem(0xe89, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xa156, gbc.sp());
        EXPECT(0xe8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00C9
        gbc.setState(0x27aa, 0xab2b, 0x3140, 0xbdfb, 0x5a61, 0xf307, 0x0, 0x0);
        gbc.writeMem(0x27aa, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xab2b, gbc.sp());
        EXPECT(0x27ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00CA
        gbc.setState(0x96f7, 0xb3d7, 0xd910, 0x9842, 0x4529, 0x43d3, 0x1, 0x0);
        gbc.writeMem(0x96f7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xb3d7, gbc.sp());
        EXPECT(0x96f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96f7));
        EXPECT(0xaf, gbc.readMem(0x96f8));
        // CB AF 00CB
        gbc.setState(0x77f8, 0x36e, 0xec30, 0xf6c9, 0x2e41, 0x5cb6, 0x1, 0x1);
        gbc.writeMem(0x77f8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x36e, gbc.sp());
        EXPECT(0x77fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00CC
        gbc.setState(0x1c87, 0xd832, 0xa750, 0x72d7, 0x411f, 0xffae, 0x1, 0x1);
        gbc.writeMem(0x1c87, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xd832, gbc.sp());
        EXPECT(0x1c89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00CD
        gbc.setState(0xefa9, 0x48be, 0x4130, 0xe69d, 0x1bad, 0x48ba, 0x1, 0x1);
        gbc.writeMem(0xefa9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x48be, gbc.sp());
        EXPECT(0xefab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefa9));
        EXPECT(0xaf, gbc.readMem(0xefaa));
        // CB AF 00CE
        gbc.setState(0x6b03, 0xb050, 0xefb0, 0xe423, 0x841, 0xc88d, 0x1, 0x1);
        gbc.writeMem(0x6b03, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xb050, gbc.sp());
        EXPECT(0x6b05, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00CF
        gbc.setState(0xbcc8, 0x3ea9, 0x1c20, 0x6e56, 0xa055, 0x7bf5, 0x1, 0x1);
        gbc.writeMem(0xbcc8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x3ea9, gbc.sp());
        EXPECT(0xbcca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcc8));
        EXPECT(0xaf, gbc.readMem(0xbcc9));
        // CB AF 00D0
        gbc.setState(0xbf45, 0xac7c, 0xcf90, 0x3ced, 0xab81, 0x20a5, 0x0, 0x0);
        gbc.writeMem(0xbf45, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xac7c, gbc.sp());
        EXPECT(0xbf47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf45));
        EXPECT(0xaf, gbc.readMem(0xbf46));
        // CB AF 00D1
        gbc.setState(0x7b3e, 0xeeb0, 0x52a0, 0x3034, 0xf121, 0x83b9, 0x1, 0x1);
        gbc.writeMem(0x7b3e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xeeb0, gbc.sp());
        EXPECT(0x7b40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00D2
        gbc.setState(0x4f19, 0x891, 0x9980, 0x6b1b, 0xa0a2, 0x7610, 0x1, 0x0);
        gbc.writeMem(0x4f19, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x891, gbc.sp());
        EXPECT(0x4f1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00D3
        gbc.setState(0x97a7, 0x596, 0xdf40, 0xfdc8, 0x178f, 0x423b, 0x0, 0x0);
        gbc.writeMem(0x97a7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x596, gbc.sp());
        EXPECT(0x97a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97a7));
        EXPECT(0xaf, gbc.readMem(0x97a8));
        // CB AF 00D4
        gbc.setState(0x6aad, 0x5925, 0x4e50, 0xca3f, 0x97ca, 0xd944, 0x1, 0x1);
        gbc.writeMem(0x6aad, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x5925, gbc.sp());
        EXPECT(0x6aaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00D5
        gbc.setState(0x4f42, 0x744e, 0x27a0, 0x30ca, 0xe90f, 0xedeb, 0x1, 0x1);
        gbc.writeMem(0x4f42, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x744e, gbc.sp());
        EXPECT(0x4f44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00D6
        gbc.setState(0x6fc3, 0xcc6c, 0xa7a0, 0xe96f, 0x5796, 0xb2be, 0x1, 0x1);
        gbc.writeMem(0x6fc3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xcc6c, gbc.sp());
        EXPECT(0x6fc5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00D7
        gbc.setState(0xcdc1, 0x71e3, 0xc1a0, 0x2892, 0x11b8, 0xc1f3, 0x0, 0x0);
        gbc.writeMem(0xcdc1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x71e3, gbc.sp());
        EXPECT(0xcdc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdc1));
        EXPECT(0xaf, gbc.readMem(0xcdc2));
        // CB AF 00D8
        gbc.setState(0x2ef3, 0x5ff9, 0x7450, 0x102d, 0xc01d, 0x7bfc, 0x0, 0x0);
        gbc.writeMem(0x2ef3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x5ff9, gbc.sp());
        EXPECT(0x2ef5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00D9
        gbc.setState(0xb6b9, 0x2b31, 0xe050, 0x845f, 0x57c2, 0x63b4, 0x0, 0x1);
        gbc.writeMem(0xb6b9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x2b31, gbc.sp());
        EXPECT(0xb6bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6b9));
        EXPECT(0xaf, gbc.readMem(0xb6ba));
        // CB AF 00DA
        gbc.setState(0x4c22, 0x2362, 0xc510, 0x72c0, 0x3a48, 0x6d84, 0x1, 0x1);
        gbc.writeMem(0x4c22, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x2362, gbc.sp());
        EXPECT(0x4c24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00DB
        gbc.setState(0xbb24, 0xaea2, 0xc9f0, 0x161f, 0x3648, 0xea0b, 0x0, 0x1);
        gbc.writeMem(0xbb24, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xaea2, gbc.sp());
        EXPECT(0xbb26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb24));
        EXPECT(0xaf, gbc.readMem(0xbb25));
        // CB AF 00DC
        gbc.setState(0xc3e7, 0xa54a, 0x5930, 0x1fdf, 0x24af, 0xa6bd, 0x0, 0x0);
        gbc.writeMem(0xc3e7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xa54a, gbc.sp());
        EXPECT(0xc3e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3e7));
        EXPECT(0xaf, gbc.readMem(0xc3e8));
        // CB AF 00DD
        gbc.setState(0x940c, 0xfdf5, 0xdc70, 0xd072, 0x74b1, 0xdace, 0x1, 0x1);
        gbc.writeMem(0x940c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xfdf5, gbc.sp());
        EXPECT(0x940e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x940c));
        EXPECT(0xaf, gbc.readMem(0x940d));
        // CB AF 00DE
        gbc.setState(0xa0bb, 0xe825, 0xf2b0, 0x347c, 0x3d9c, 0xf181, 0x1, 0x0);
        gbc.writeMem(0xa0bb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xe825, gbc.sp());
        EXPECT(0xa0bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0bb));
        EXPECT(0xaf, gbc.readMem(0xa0bc));
        // CB AF 00DF
        gbc.setState(0xcf21, 0x17ea, 0x860, 0x3eeb, 0xfaf0, 0xc69a, 0x1, 0x0);
        gbc.writeMem(0xcf21, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x17ea, gbc.sp());
        EXPECT(0xcf23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf21));
        EXPECT(0xaf, gbc.readMem(0xcf22));
        // CB AF 00E0
        gbc.setState(0x3a05, 0xba18, 0x1400, 0xfce1, 0xd381, 0x37c7, 0x0, 0x0);
        gbc.writeMem(0x3a05, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xba18, gbc.sp());
        EXPECT(0x3a07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00E1
        gbc.setState(0x1dba, 0x7f71, 0xb980, 0x552f, 0x5164, 0xa3c1, 0x1, 0x0);
        gbc.writeMem(0x1dba, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x7f71, gbc.sp());
        EXPECT(0x1dbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00E2
        gbc.setState(0xd90, 0x3ce5, 0xf2f0, 0x635c, 0x5bd9, 0x21c, 0x1, 0x0);
        gbc.writeMem(0xd90, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x3ce5, gbc.sp());
        EXPECT(0xd92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00E3
        gbc.setState(0xc6a8, 0xd8e8, 0x6880, 0x363c, 0xec24, 0x5dd7, 0x0, 0x0);
        gbc.writeMem(0xc6a8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xd8e8, gbc.sp());
        EXPECT(0xc6aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6a8));
        EXPECT(0xaf, gbc.readMem(0xc6a9));
        // CB AF 00E5
        gbc.setState(0x1e8a, 0x4a40, 0xc770, 0x6cb0, 0xa58c, 0x3e40, 0x0, 0x1);
        gbc.writeMem(0x1e8a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x4a40, gbc.sp());
        EXPECT(0x1e8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00E6
        gbc.setState(0x8a18, 0x17cb, 0x1740, 0x6ed4, 0x33aa, 0x6925, 0x0, 0x0);
        gbc.writeMem(0x8a18, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x17cb, gbc.sp());
        EXPECT(0x8a1a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a18));
        EXPECT(0xaf, gbc.readMem(0x8a19));
        // CB AF 00E7
        gbc.setState(0x782e, 0x7da2, 0xeab0, 0xd44d, 0xaa7f, 0x6cc0, 0x0, 0x0);
        gbc.writeMem(0x782e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x7da2, gbc.sp());
        EXPECT(0x7830, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00E8
        gbc.setState(0x4fab, 0x1d93, 0x7a50, 0x8007, 0x63b3, 0xc4c5, 0x0, 0x0);
        gbc.writeMem(0x4fab, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x1d93, gbc.sp());
        EXPECT(0x4fad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00E9
        gbc.setState(0xa7fc, 0x4fb5, 0xe590, 0x5e29, 0xcae1, 0x15c2, 0x0, 0x1);
        gbc.writeMem(0xa7fc, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x4fb5, gbc.sp());
        EXPECT(0xa7fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7fc));
        EXPECT(0xaf, gbc.readMem(0xa7fd));
        // CB AF 00EA
        gbc.setState(0x154b, 0x984f, 0xd740, 0xc380, 0x4ba4, 0xb69c, 0x0, 0x0);
        gbc.writeMem(0x154b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x984f, gbc.sp());
        EXPECT(0x154d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00EB
        gbc.setState(0xe258, 0xdc93, 0xe260, 0x22e0, 0x6ac5, 0x6d59, 0x1, 0x1);
        gbc.writeMem(0xe258, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xdc93, gbc.sp());
        EXPECT(0xe25a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe258));
        EXPECT(0xaf, gbc.readMem(0xe259));
        // CB AF 00EC
        gbc.setState(0x6ec9, 0x1287, 0xa840, 0x958b, 0xaab8, 0x659a, 0x1, 0x0);
        gbc.writeMem(0x6ec9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x1287, gbc.sp());
        EXPECT(0x6ecb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00ED
        gbc.setState(0x9990, 0x2002, 0xa0, 0xaaf0, 0x59da, 0x51aa, 0x0, 0x0);
        gbc.writeMem(0x9990, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x2002, gbc.sp());
        EXPECT(0x9992, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9990));
        EXPECT(0xaf, gbc.readMem(0x9991));
        // CB AF 00EE
        gbc.setState(0x22ed, 0x66bd, 0xe410, 0xad33, 0x62a3, 0xdac9, 0x0, 0x0);
        gbc.writeMem(0x22ed, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x66bd, gbc.sp());
        EXPECT(0x22ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00EF
        gbc.setState(0x7bd, 0x877c, 0xa720, 0xf75b, 0x9916, 0x7048, 0x0, 0x1);
        gbc.writeMem(0x7bd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x877c, gbc.sp());
        EXPECT(0x7bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00F0
        gbc.setState(0x8b0d, 0xf175, 0x6850, 0x7115, 0x8bf1, 0xce83, 0x1, 0x1);
        gbc.writeMem(0x8b0d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xf175, gbc.sp());
        EXPECT(0x8b0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b0d));
        EXPECT(0xaf, gbc.readMem(0x8b0e));
        // CB AF 00F1
        gbc.setState(0xdef0, 0x3ce3, 0xce20, 0x5b4f, 0xfc2f, 0x7331, 0x0, 0x0);
        gbc.writeMem(0xdef0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x3ce3, gbc.sp());
        EXPECT(0xdef2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdef0));
        EXPECT(0xaf, gbc.readMem(0xdef1));
        // CB AF 00F2
        gbc.setState(0x9d87, 0xe1af, 0x2780, 0x939c, 0xa981, 0xe1b7, 0x1, 0x1);
        gbc.writeMem(0x9d87, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xe1af, gbc.sp());
        EXPECT(0x9d89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d87));
        EXPECT(0xaf, gbc.readMem(0x9d88));
        // CB AF 00F3
        gbc.setState(0xe28a, 0x4e0d, 0xb4d0, 0xb9c, 0x7ca1, 0xf430, 0x1, 0x0);
        gbc.writeMem(0xe28a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x4e0d, gbc.sp());
        EXPECT(0xe28c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe28a));
        EXPECT(0xaf, gbc.readMem(0xe28b));
        // CB AF 00F4
        gbc.setState(0x508a, 0xd88e, 0x2b30, 0x1968, 0xe1a4, 0x319e, 0x0, 0x0);
        gbc.writeMem(0x508a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xd88e, gbc.sp());
        EXPECT(0x508c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00F5
        gbc.setState(0x7372, 0xf96a, 0x7fa0, 0xedc5, 0xf19a, 0x3f7f, 0x0, 0x1);
        gbc.writeMem(0x7372, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xf96a, gbc.sp());
        EXPECT(0x7374, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00F6
        gbc.setState(0xb2df, 0x58fc, 0x9460, 0x902b, 0x6, 0x19d2, 0x1, 0x1);
        gbc.writeMem(0xb2df, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x58fc, gbc.sp());
        EXPECT(0xb2e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2df));
        EXPECT(0xaf, gbc.readMem(0xb2e0));
        // CB AF 00F7
        gbc.setState(0x3786, 0xf9c4, 0x98f0, 0x89b3, 0x69ea, 0x8d8, 0x0, 0x0);
        gbc.writeMem(0x3786, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xf9c4, gbc.sp());
        EXPECT(0x3788, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00F8
        gbc.setState(0xab3a, 0x415e, 0x60f0, 0x3e30, 0xbbaf, 0x2a6c, 0x1, 0x1);
        gbc.writeMem(0xab3a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x415e, gbc.sp());
        EXPECT(0xab3c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab3a));
        EXPECT(0xaf, gbc.readMem(0xab3b));
        // CB AF 00F9
        gbc.setState(0x1f2a, 0x8218, 0x15d0, 0x8f84, 0x10c8, 0x1984, 0x1, 0x0);
        gbc.writeMem(0x1f2a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x8218, gbc.sp());
        EXPECT(0x1f2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 00FA
        gbc.setState(0xed32, 0xb0f3, 0x7d70, 0xe33c, 0xb9df, 0xbeb6, 0x0, 0x1);
        gbc.writeMem(0xed32, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xb0f3, gbc.sp());
        EXPECT(0xed34, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed32));
        EXPECT(0xaf, gbc.readMem(0xed33));
        // CB AF 00FB
        gbc.setState(0x1044, 0x3dd8, 0x5480, 0xf25d, 0x6b8a, 0x59a6, 0x0, 0x1);
        gbc.writeMem(0x1044, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x3dd8, gbc.sp());
        EXPECT(0x1046, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 00FC
        gbc.setState(0xe943, 0xf9a1, 0x61f0, 0xbb69, 0xb0c6, 0x26fa, 0x1, 0x1);
        gbc.writeMem(0xe943, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xf9a1, gbc.sp());
        EXPECT(0xe945, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe943));
        EXPECT(0xaf, gbc.readMem(0xe944));
        // CB AF 00FD
        gbc.setState(0xb691, 0xd3fc, 0x71e0, 0x1410, 0xddea, 0x6b41, 0x0, 0x0);
        gbc.writeMem(0xb691, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xd3fc, gbc.sp());
        EXPECT(0xb693, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb691));
        EXPECT(0xaf, gbc.readMem(0xb692));
        // CB AF 00FE
        gbc.setState(0xb124, 0xd1fa, 0x62d0, 0xbc5d, 0x5b6c, 0x69a4, 0x0, 0x1);
        gbc.writeMem(0xb124, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xd1fa, gbc.sp());
        EXPECT(0xb126, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb124));
        EXPECT(0xaf, gbc.readMem(0xb125));
        // CB AF 00FF
        gbc.setState(0xd9c5, 0xbf66, 0xbb70, 0x7794, 0x8a05, 0xdfc7, 0x1, 0x0);
        gbc.writeMem(0xd9c5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xbf66, gbc.sp());
        EXPECT(0xd9c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9c5));
        EXPECT(0xaf, gbc.readMem(0xd9c6));
        // CB AF 0100
        gbc.setState(0x9f7f, 0x2685, 0x6170, 0x3a42, 0xab68, 0x4774, 0x0, 0x1);
        gbc.writeMem(0x9f7f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x2685, gbc.sp());
        EXPECT(0x9f81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f7f));
        EXPECT(0xaf, gbc.readMem(0x9f80));
        // CB AF 0102
        gbc.setState(0xefa3, 0x4d4, 0xc840, 0x7d33, 0x95ed, 0x975f, 0x0, 0x1);
        gbc.writeMem(0xefa3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x4d4, gbc.sp());
        EXPECT(0xefa5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefa3));
        EXPECT(0xaf, gbc.readMem(0xefa4));
        // CB AF 0103
        gbc.setState(0xca0e, 0x98c6, 0xf8f0, 0xd28c, 0x15a4, 0x8cd8, 0x1, 0x0);
        gbc.writeMem(0xca0e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x98c6, gbc.sp());
        EXPECT(0xca10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca0e));
        EXPECT(0xaf, gbc.readMem(0xca0f));
        // CB AF 0105
        gbc.setState(0x1b06, 0x8e96, 0xe360, 0xe991, 0x4b95, 0xfd41, 0x1, 0x0);
        gbc.writeMem(0x1b06, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x8e96, gbc.sp());
        EXPECT(0x1b08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0106
        gbc.setState(0x6e33, 0x92e6, 0x6f90, 0x660b, 0xacae, 0xdeef, 0x0, 0x1);
        gbc.writeMem(0x6e33, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x92e6, gbc.sp());
        EXPECT(0x6e35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0107
        gbc.setState(0xdc6e, 0xc138, 0x9780, 0xe532, 0xf762, 0x3749, 0x1, 0x0);
        gbc.writeMem(0xdc6e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xc138, gbc.sp());
        EXPECT(0xdc70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc6e));
        EXPECT(0xaf, gbc.readMem(0xdc6f));
        // CB AF 0108
        gbc.setState(0x2007, 0xe821, 0xacd0, 0x155b, 0xe071, 0xaf20, 0x1, 0x0);
        gbc.writeMem(0x2007, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xe821, gbc.sp());
        EXPECT(0x2009, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0109
        gbc.setState(0x8e53, 0x8ad7, 0xe9f0, 0xab58, 0x19b3, 0x7d16, 0x0, 0x1);
        gbc.writeMem(0x8e53, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x8ad7, gbc.sp());
        EXPECT(0x8e55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e53));
        EXPECT(0xaf, gbc.readMem(0x8e54));
        // CB AF 010A
        gbc.setState(0x5d1e, 0xe6b6, 0xf8a0, 0xfd49, 0x11bd, 0xbba8, 0x0, 0x1);
        gbc.writeMem(0x5d1e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xe6b6, gbc.sp());
        EXPECT(0x5d20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 010B
        gbc.setState(0x3b0c, 0xe322, 0x6d70, 0xa20b, 0x4fda, 0x9a28, 0x1, 0x1);
        gbc.writeMem(0x3b0c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xe322, gbc.sp());
        EXPECT(0x3b0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 010C
        gbc.setState(0x47d, 0xf982, 0x9bf0, 0xd77f, 0x9ab8, 0x31f7, 0x1, 0x1);
        gbc.writeMem(0x47d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xf982, gbc.sp());
        EXPECT(0x47f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 010D
        gbc.setState(0xd628, 0x5b9f, 0xad20, 0xa00b, 0xd23a, 0x589c, 0x0, 0x1);
        gbc.writeMem(0xd628, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x5b9f, gbc.sp());
        EXPECT(0xd62a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd628));
        EXPECT(0xaf, gbc.readMem(0xd629));
        // CB AF 010E
        gbc.setState(0xb993, 0x5d31, 0x4360, 0x3d5b, 0xe3dc, 0xff98, 0x0, 0x0);
        gbc.writeMem(0xb993, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x5d31, gbc.sp());
        EXPECT(0xb995, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb993));
        EXPECT(0xaf, gbc.readMem(0xb994));
        // CB AF 010F
        gbc.setState(0x4f43, 0x6dec, 0xe540, 0x5996, 0x3c2a, 0x2d8b, 0x0, 0x0);
        gbc.writeMem(0x4f43, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x6dec, gbc.sp());
        EXPECT(0x4f45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0110
        gbc.setState(0x9768, 0xb725, 0x59e0, 0xdbd2, 0x29dc, 0x60a0, 0x1, 0x1);
        gbc.writeMem(0x9768, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xb725, gbc.sp());
        EXPECT(0x976a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9768));
        EXPECT(0xaf, gbc.readMem(0x9769));
        // CB AF 0111
        gbc.setState(0xd3a0, 0x4788, 0xbc80, 0x74dc, 0x2026, 0x86a9, 0x1, 0x1);
        gbc.writeMem(0xd3a0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x4788, gbc.sp());
        EXPECT(0xd3a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3a0));
        EXPECT(0xaf, gbc.readMem(0xd3a1));
        // CB AF 0112
        gbc.setState(0x4af2, 0xd50a, 0x47a0, 0xcee0, 0x72d4, 0x7873, 0x1, 0x0);
        gbc.writeMem(0x4af2, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xd50a, gbc.sp());
        EXPECT(0x4af4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0114
        gbc.setState(0x397c, 0xca8f, 0xc2d0, 0x927b, 0xcc18, 0x8f0e, 0x1, 0x0);
        gbc.writeMem(0x397c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xca8f, gbc.sp());
        EXPECT(0x397e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0115
        gbc.setState(0xb968, 0x88fb, 0xc7c0, 0xd270, 0x99ed, 0x558d, 0x1, 0x0);
        gbc.writeMem(0xb968, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x88fb, gbc.sp());
        EXPECT(0xb96a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb968));
        EXPECT(0xaf, gbc.readMem(0xb969));
        // CB AF 0116
        gbc.setState(0xe9db, 0xaa6d, 0x6840, 0xda84, 0xc907, 0x8fa5, 0x1, 0x1);
        gbc.writeMem(0xe9db, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xaa6d, gbc.sp());
        EXPECT(0xe9dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9db));
        EXPECT(0xaf, gbc.readMem(0xe9dc));
        // CB AF 0117
        gbc.setState(0x558b, 0x4fcd, 0xd150, 0x11c, 0xe3ae, 0x6553, 0x0, 0x1);
        gbc.writeMem(0x558b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x4fcd, gbc.sp());
        EXPECT(0x558d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0118
        gbc.setState(0xab76, 0xa347, 0xd7d0, 0xb1e9, 0x9aba, 0x1d40, 0x1, 0x0);
        gbc.writeMem(0xab76, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xa347, gbc.sp());
        EXPECT(0xab78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab76));
        EXPECT(0xaf, gbc.readMem(0xab77));
        // CB AF 0119
        gbc.setState(0xcc57, 0xb07f, 0x3870, 0x4c65, 0xdba1, 0xaccf, 0x1, 0x1);
        gbc.writeMem(0xcc57, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xb07f, gbc.sp());
        EXPECT(0xcc59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc57));
        EXPECT(0xaf, gbc.readMem(0xcc58));
        // CB AF 011A
        gbc.setState(0xb016, 0xf4ac, 0xec50, 0x8bee, 0xe703, 0x5edd, 0x0, 0x0);
        gbc.writeMem(0xb016, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xf4ac, gbc.sp());
        EXPECT(0xb018, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb016));
        EXPECT(0xaf, gbc.readMem(0xb017));
        // CB AF 011B
        gbc.setState(0x8cb5, 0x53a, 0xc80, 0xd392, 0x6409, 0x76b6, 0x0, 0x1);
        gbc.writeMem(0x8cb5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x53a, gbc.sp());
        EXPECT(0x8cb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cb5));
        EXPECT(0xaf, gbc.readMem(0x8cb6));
        // CB AF 011C
        gbc.setState(0x820f, 0x18ca, 0x12c0, 0x9444, 0xb1d2, 0x3ab7, 0x1, 0x0);
        gbc.writeMem(0x820f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x18ca, gbc.sp());
        EXPECT(0x8211, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x820f));
        EXPECT(0xaf, gbc.readMem(0x8210));
        // CB AF 011D
        gbc.setState(0xb119, 0x1974, 0x3a20, 0x78b4, 0xd88d, 0x5325, 0x1, 0x1);
        gbc.writeMem(0xb119, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x1974, gbc.sp());
        EXPECT(0xb11b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb119));
        EXPECT(0xaf, gbc.readMem(0xb11a));
        // CB AF 011E
        gbc.setState(0xc33e, 0x76, 0xb910, 0x7d54, 0xe8f9, 0xc79d, 0x1, 0x1);
        gbc.writeMem(0xc33e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x76, gbc.sp());
        EXPECT(0xc340, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc33e));
        EXPECT(0xaf, gbc.readMem(0xc33f));
        // CB AF 011F
        gbc.setState(0xc01, 0xa990, 0xdf00, 0x65d6, 0xbe86, 0x6287, 0x1, 0x0);
        gbc.writeMem(0xc01, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xa990, gbc.sp());
        EXPECT(0xc03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0120
        gbc.setState(0xcb81, 0xcf39, 0x9d80, 0x2602, 0xb27f, 0x8ffa, 0x1, 0x0);
        gbc.writeMem(0xcb81, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xcf39, gbc.sp());
        EXPECT(0xcb83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb81));
        EXPECT(0xaf, gbc.readMem(0xcb82));
        // CB AF 0122
        gbc.setState(0xd9a0, 0x3463, 0x45a0, 0x220e, 0x15ff, 0x49ca, 0x1, 0x0);
        gbc.writeMem(0xd9a0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x3463, gbc.sp());
        EXPECT(0xd9a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9a0));
        EXPECT(0xaf, gbc.readMem(0xd9a1));
        // CB AF 0123
        gbc.setState(0xe6, 0xa34a, 0xb150, 0x27fa, 0x1288, 0xf3, 0x1, 0x0);
        gbc.writeMem(0xe6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xa34a, gbc.sp());
        EXPECT(0xe8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0124
        gbc.setState(0x3a3, 0x58cc, 0x270, 0xa29a, 0xc795, 0x2979, 0x0, 0x1);
        gbc.writeMem(0x3a3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x58cc, gbc.sp());
        EXPECT(0x3a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0125
        gbc.setState(0x1cc3, 0xa839, 0x6ce0, 0x9b67, 0x9ea5, 0x11ea, 0x0, 0x1);
        gbc.writeMem(0x1cc3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xa839, gbc.sp());
        EXPECT(0x1cc5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0126
        gbc.setState(0xa1e5, 0x5af2, 0x8320, 0xf262, 0x4e47, 0x9ccd, 0x0, 0x1);
        gbc.writeMem(0xa1e5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x5af2, gbc.sp());
        EXPECT(0xa1e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1e5));
        EXPECT(0xaf, gbc.readMem(0xa1e6));
        // CB AF 0127
        gbc.setState(0x6df5, 0xfdf3, 0x5510, 0x4de8, 0x44ef, 0x6ce8, 0x1, 0x1);
        gbc.writeMem(0x6df5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xfdf3, gbc.sp());
        EXPECT(0x6df7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0128
        gbc.setState(0x9ff4, 0xa58f, 0x860, 0x3485, 0xf8fb, 0x2fe0, 0x0, 0x1);
        gbc.writeMem(0x9ff4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xa58f, gbc.sp());
        EXPECT(0x9ff6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ff4));
        EXPECT(0xaf, gbc.readMem(0x9ff5));
        // CB AF 0129
        gbc.setState(0x863e, 0x3220, 0xcbd0, 0x14aa, 0x216, 0xbddc, 0x1, 0x0);
        gbc.writeMem(0x863e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x3220, gbc.sp());
        EXPECT(0x8640, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x863e));
        EXPECT(0xaf, gbc.readMem(0x863f));
        // CB AF 012A
        gbc.setState(0x94c9, 0xf54d, 0x56a0, 0xa5f4, 0x9725, 0xa78, 0x0, 0x1);
        gbc.writeMem(0x94c9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xf54d, gbc.sp());
        EXPECT(0x94cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94c9));
        EXPECT(0xaf, gbc.readMem(0x94ca));
        // CB AF 012B
        gbc.setState(0x7880, 0xfc60, 0x1030, 0x242f, 0xc0ee, 0x94aa, 0x0, 0x0);
        gbc.writeMem(0x7880, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xfc60, gbc.sp());
        EXPECT(0x7882, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 012C
        gbc.setState(0xa72, 0x9f8a, 0x770, 0x6da6, 0xcff5, 0xcf63, 0x1, 0x0);
        gbc.writeMem(0xa72, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x9f8a, gbc.sp());
        EXPECT(0xa74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 012D
        gbc.setState(0x3a13, 0xc518, 0xaf0, 0x407f, 0x3487, 0x4ce5, 0x0, 0x1);
        gbc.writeMem(0x3a13, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xc518, gbc.sp());
        EXPECT(0x3a15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 012E
        gbc.setState(0x49ee, 0xf532, 0x45e0, 0x9ab5, 0x538, 0x7964, 0x1, 0x0);
        gbc.writeMem(0x49ee, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xf532, gbc.sp());
        EXPECT(0x49f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 012F
        gbc.setState(0x64b7, 0x241f, 0xac60, 0xe599, 0x7b3e, 0xb77f, 0x1, 0x1);
        gbc.writeMem(0x64b7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x241f, gbc.sp());
        EXPECT(0x64b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0130
        gbc.setState(0x556e, 0x908c, 0xf490, 0xcf98, 0x7144, 0xd53c, 0x1, 0x0);
        gbc.writeMem(0x556e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x908c, gbc.sp());
        EXPECT(0x5570, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0131
        gbc.setState(0xee7d, 0xf536, 0x1060, 0x54f0, 0xdd42, 0xf2e2, 0x1, 0x1);
        gbc.writeMem(0xee7d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xf536, gbc.sp());
        EXPECT(0xee7f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee7d));
        EXPECT(0xaf, gbc.readMem(0xee7e));
        // CB AF 0133
        gbc.setState(0xc154, 0xdc87, 0xc3e0, 0x2e86, 0xd33c, 0xe23, 0x1, 0x0);
        gbc.writeMem(0xc154, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xdc87, gbc.sp());
        EXPECT(0xc156, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc154));
        EXPECT(0xaf, gbc.readMem(0xc155));
        // CB AF 0134
        gbc.setState(0x9e88, 0xea89, 0xe630, 0xb37d, 0x72ae, 0xc631, 0x0, 0x1);
        gbc.writeMem(0x9e88, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xea89, gbc.sp());
        EXPECT(0x9e8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e88));
        EXPECT(0xaf, gbc.readMem(0x9e89));
        // CB AF 0135
        gbc.setState(0xa65e, 0x160b, 0x6470, 0xe7c9, 0xe5f1, 0x8e6b, 0x0, 0x1);
        gbc.writeMem(0xa65e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x160b, gbc.sp());
        EXPECT(0xa660, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa65e));
        EXPECT(0xaf, gbc.readMem(0xa65f));
        // CB AF 0136
        gbc.setState(0xa0f6, 0x1dec, 0x7990, 0xdb99, 0xea1e, 0x25ca, 0x1, 0x0);
        gbc.writeMem(0xa0f6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x1dec, gbc.sp());
        EXPECT(0xa0f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0f6));
        EXPECT(0xaf, gbc.readMem(0xa0f7));
        // CB AF 0137
        gbc.setState(0x5cdb, 0x79aa, 0x9650, 0xc1a8, 0xfd09, 0xacc9, 0x1, 0x1);
        gbc.writeMem(0x5cdb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x79aa, gbc.sp());
        EXPECT(0x5cdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0138
        gbc.setState(0x3773, 0x9445, 0x81c0, 0x527a, 0xb581, 0x51a9, 0x1, 0x1);
        gbc.writeMem(0x3773, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x9445, gbc.sp());
        EXPECT(0x3775, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0139
        gbc.setState(0x96c6, 0xa5df, 0x9ca0, 0xe96, 0xe34b, 0x5715, 0x0, 0x1);
        gbc.writeMem(0x96c6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xa5df, gbc.sp());
        EXPECT(0x96c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96c6));
        EXPECT(0xaf, gbc.readMem(0x96c7));
        // CB AF 013A
        gbc.setState(0x68b3, 0xe830, 0xb360, 0xd7ff, 0x8b1e, 0xa241, 0x0, 0x0);
        gbc.writeMem(0x68b3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xe830, gbc.sp());
        EXPECT(0x68b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 013B
        gbc.setState(0x6f30, 0x919, 0x1830, 0x6796, 0x98e7, 0xfca7, 0x1, 0x0);
        gbc.writeMem(0x6f30, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x919, gbc.sp());
        EXPECT(0x6f32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 013C
        gbc.setState(0x3679, 0xd4b6, 0x2b00, 0xa1ee, 0x855a, 0x599f, 0x0, 0x0);
        gbc.writeMem(0x3679, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xd4b6, gbc.sp());
        EXPECT(0x367b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 013D
        gbc.setState(0x3412, 0xb37b, 0x4460, 0xcf5, 0x82c2, 0x51fa, 0x0, 0x0);
        gbc.writeMem(0x3412, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xb37b, gbc.sp());
        EXPECT(0x3414, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 013E
        gbc.setState(0x7ca4, 0x3604, 0x6370, 0x7d06, 0x96a9, 0x2df8, 0x0, 0x1);
        gbc.writeMem(0x7ca4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x3604, gbc.sp());
        EXPECT(0x7ca6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 013F
        gbc.setState(0xb85d, 0x2a99, 0x9000, 0xfaf3, 0xeac7, 0x4035, 0x0, 0x1);
        gbc.writeMem(0xb85d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x2a99, gbc.sp());
        EXPECT(0xb85f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb85d));
        EXPECT(0xaf, gbc.readMem(0xb85e));
        // CB AF 0140
        gbc.setState(0xd3c5, 0x21a4, 0x6d70, 0xb013, 0x33d6, 0x25b5, 0x1, 0x0);
        gbc.writeMem(0xd3c5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x21a4, gbc.sp());
        EXPECT(0xd3c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3c5));
        EXPECT(0xaf, gbc.readMem(0xd3c6));
        // CB AF 0141
        gbc.setState(0xcd07, 0x5730, 0x5320, 0xeb9c, 0x3de8, 0xdd71, 0x0, 0x1);
        gbc.writeMem(0xcd07, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x5730, gbc.sp());
        EXPECT(0xcd09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd07));
        EXPECT(0xaf, gbc.readMem(0xcd08));
        // CB AF 0142
        gbc.setState(0xcf88, 0x9c8, 0x5dc0, 0x58cb, 0x2f4, 0x874a, 0x0, 0x1);
        gbc.writeMem(0xcf88, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x9c8, gbc.sp());
        EXPECT(0xcf8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf88));
        EXPECT(0xaf, gbc.readMem(0xcf89));
        // CB AF 0143
        gbc.setState(0xbe2e, 0x1858, 0xc940, 0x456a, 0xc42, 0x8cad, 0x1, 0x0);
        gbc.writeMem(0xbe2e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x1858, gbc.sp());
        EXPECT(0xbe30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe2e));
        EXPECT(0xaf, gbc.readMem(0xbe2f));
        // CB AF 0144
        gbc.setState(0x3f55, 0x10af, 0x7e80, 0xbe04, 0x7c35, 0x12f7, 0x0, 0x1);
        gbc.writeMem(0x3f55, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x10af, gbc.sp());
        EXPECT(0x3f57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0145
        gbc.setState(0xd233, 0x1064, 0xae50, 0x6781, 0x693f, 0x4728, 0x0, 0x0);
        gbc.writeMem(0xd233, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x1064, gbc.sp());
        EXPECT(0xd235, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd233));
        EXPECT(0xaf, gbc.readMem(0xd234));
        // CB AF 0146
        gbc.setState(0xa019, 0xf493, 0xd90, 0xe568, 0x7b44, 0x4c3, 0x0, 0x0);
        gbc.writeMem(0xa019, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xf493, gbc.sp());
        EXPECT(0xa01b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa019));
        EXPECT(0xaf, gbc.readMem(0xa01a));
        // CB AF 0147
        gbc.setState(0x31e4, 0xad26, 0x6440, 0x5b9b, 0xe28e, 0x546f, 0x0, 0x0);
        gbc.writeMem(0x31e4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xad26, gbc.sp());
        EXPECT(0x31e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0148
        gbc.setState(0x6c76, 0xd4d2, 0x8c0, 0x3df2, 0x80a9, 0xa8c3, 0x0, 0x1);
        gbc.writeMem(0x6c76, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xd4d2, gbc.sp());
        EXPECT(0x6c78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0149
        gbc.setState(0x2906, 0xd4d7, 0x4ce0, 0x3dac, 0xde80, 0x60c9, 0x1, 0x1);
        gbc.writeMem(0x2906, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xd4d7, gbc.sp());
        EXPECT(0x2908, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 014A
        gbc.setState(0xab51, 0x4d80, 0x6c00, 0x3635, 0xa140, 0xeb8e, 0x1, 0x1);
        gbc.writeMem(0xab51, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x4d80, gbc.sp());
        EXPECT(0xab53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab51));
        EXPECT(0xaf, gbc.readMem(0xab52));
        // CB AF 014B
        gbc.setState(0x1a9f, 0x6998, 0x2d10, 0x57d2, 0xc709, 0xb7db, 0x0, 0x1);
        gbc.writeMem(0x1a9f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x6998, gbc.sp());
        EXPECT(0x1aa1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 014C
        gbc.setState(0x858, 0xf9be, 0xd930, 0xa84e, 0x63c2, 0xb336, 0x0, 0x0);
        gbc.writeMem(0x858, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xf9be, gbc.sp());
        EXPECT(0x85a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 014D
        gbc.setState(0x623c, 0x7582, 0xf180, 0x708c, 0xfcc2, 0x9400, 0x0, 0x0);
        gbc.writeMem(0x623c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x7582, gbc.sp());
        EXPECT(0x623e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 014E
        gbc.setState(0x6db3, 0x703c, 0xc640, 0x9097, 0xfdb7, 0xcc55, 0x0, 0x0);
        gbc.writeMem(0x6db3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x703c, gbc.sp());
        EXPECT(0x6db5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 014F
        gbc.setState(0x8afd, 0x3dc9, 0x3a0, 0xa7c2, 0x2bfe, 0xdbfd, 0x1, 0x0);
        gbc.writeMem(0x8afd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x3dc9, gbc.sp());
        EXPECT(0x8aff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8afd));
        EXPECT(0xaf, gbc.readMem(0x8afe));
        // CB AF 0150
        gbc.setState(0x1649, 0x40aa, 0xe090, 0x7981, 0x66a7, 0x92e5, 0x1, 0x0);
        gbc.writeMem(0x1649, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x40aa, gbc.sp());
        EXPECT(0x164b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0151
        gbc.setState(0x407f, 0xa92f, 0xa9a0, 0xf6b7, 0x61ce, 0xe438, 0x0, 0x0);
        gbc.writeMem(0x407f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xa92f, gbc.sp());
        EXPECT(0x4081, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0152
        gbc.setState(0xa45, 0x99b0, 0x9f50, 0x8808, 0xdf94, 0x5264, 0x0, 0x1);
        gbc.writeMem(0xa45, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x99b0, gbc.sp());
        EXPECT(0xa47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0153
        gbc.setState(0x596, 0x4207, 0xe2a0, 0xcd41, 0x99b6, 0x9d70, 0x1, 0x1);
        gbc.writeMem(0x596, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x4207, gbc.sp());
        EXPECT(0x598, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0154
        gbc.setState(0xeed8, 0xd83a, 0x110, 0x80ff, 0xbb14, 0x8b5a, 0x0, 0x1);
        gbc.writeMem(0xeed8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xd83a, gbc.sp());
        EXPECT(0xeeda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeed8));
        EXPECT(0xaf, gbc.readMem(0xeed9));
        // CB AF 0155
        gbc.setState(0xaffa, 0x5ed, 0xb9f0, 0xec8d, 0x2948, 0xb349, 0x0, 0x1);
        gbc.writeMem(0xaffa, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x5ed, gbc.sp());
        EXPECT(0xaffc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaffa));
        EXPECT(0xaf, gbc.readMem(0xaffb));
        // CB AF 0156
        gbc.setState(0xb9b5, 0x394f, 0xca80, 0xa14c, 0xe730, 0xfcfb, 0x1, 0x0);
        gbc.writeMem(0xb9b5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x394f, gbc.sp());
        EXPECT(0xb9b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9b5));
        EXPECT(0xaf, gbc.readMem(0xb9b6));
        // CB AF 0157
        gbc.setState(0x8318, 0x2ca, 0xcc10, 0x705, 0x49b5, 0x8a1b, 0x0, 0x1);
        gbc.writeMem(0x8318, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x2ca, gbc.sp());
        EXPECT(0x831a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8318));
        EXPECT(0xaf, gbc.readMem(0x8319));
        // CB AF 0158
        gbc.setState(0x8718, 0x4e5d, 0x48d0, 0x7f8c, 0x7f8e, 0x8b39, 0x1, 0x1);
        gbc.writeMem(0x8718, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x4e5d, gbc.sp());
        EXPECT(0x871a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8718));
        EXPECT(0xaf, gbc.readMem(0x8719));
        // CB AF 0159
        gbc.setState(0x6945, 0xc4c9, 0xd6c0, 0x35a5, 0x11d0, 0x9b79, 0x0, 0x0);
        gbc.writeMem(0x6945, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xc4c9, gbc.sp());
        EXPECT(0x6947, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 015A
        gbc.setState(0x8800, 0xdaa5, 0xfaf0, 0xf833, 0xce9b, 0x717a, 0x0, 0x1);
        gbc.writeMem(0x8800, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xdaa5, gbc.sp());
        EXPECT(0x8802, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8800));
        EXPECT(0xaf, gbc.readMem(0x8801));
        // CB AF 015B
        gbc.setState(0x6eec, 0x9faf, 0xa2a0, 0x9f22, 0xb28b, 0x9b92, 0x1, 0x0);
        gbc.writeMem(0x6eec, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x9faf, gbc.sp());
        EXPECT(0x6eee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 015C
        gbc.setState(0xe135, 0x559f, 0xf670, 0x9deb, 0xa578, 0x7621, 0x0, 0x1);
        gbc.writeMem(0xe135, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x559f, gbc.sp());
        EXPECT(0xe137, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe135));
        EXPECT(0xaf, gbc.readMem(0xe136));
        // CB AF 015D
        gbc.setState(0x8907, 0x71e9, 0x3c40, 0x5bfa, 0x8e94, 0x7b29, 0x1, 0x1);
        gbc.writeMem(0x8907, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x71e9, gbc.sp());
        EXPECT(0x8909, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8907));
        EXPECT(0xaf, gbc.readMem(0x8908));
        // CB AF 015E
        gbc.setState(0xc641, 0x1c2, 0xf2c0, 0x7c5d, 0x4ae6, 0x8893, 0x1, 0x0);
        gbc.writeMem(0xc641, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x1c2, gbc.sp());
        EXPECT(0xc643, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc641));
        EXPECT(0xaf, gbc.readMem(0xc642));
        // CB AF 015F
        gbc.setState(0x817c, 0xdedb, 0x2b0, 0x6d4e, 0xf3ec, 0x572a, 0x1, 0x0);
        gbc.writeMem(0x817c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xdedb, gbc.sp());
        EXPECT(0x817e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x817c));
        EXPECT(0xaf, gbc.readMem(0x817d));
        // CB AF 0161
        gbc.setState(0x5286, 0x3e9f, 0xfeb0, 0xb120, 0x27e1, 0xe75, 0x1, 0x0);
        gbc.writeMem(0x5286, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x3e9f, gbc.sp());
        EXPECT(0x5288, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0162
        gbc.setState(0xece6, 0xaad0, 0x99d0, 0x1623, 0xe10a, 0x647, 0x1, 0x1);
        gbc.writeMem(0xece6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xaad0, gbc.sp());
        EXPECT(0xece8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xece6));
        EXPECT(0xaf, gbc.readMem(0xece7));
        // CB AF 0163
        gbc.setState(0x944e, 0xc9dc, 0xa4f0, 0xe4f1, 0xdad1, 0x9051, 0x1, 0x0);
        gbc.writeMem(0x944e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xc9dc, gbc.sp());
        EXPECT(0x9450, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x944e));
        EXPECT(0xaf, gbc.readMem(0x944f));
        // CB AF 0164
        gbc.setState(0x54a6, 0x9b1e, 0xd2d0, 0x977a, 0xb597, 0x1472, 0x1, 0x0);
        gbc.writeMem(0x54a6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x9b1e, gbc.sp());
        EXPECT(0x54a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0165
        gbc.setState(0xd971, 0xc94e, 0xd820, 0xb330, 0x5fde, 0xfecb, 0x1, 0x0);
        gbc.writeMem(0xd971, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xc94e, gbc.sp());
        EXPECT(0xd973, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd971));
        EXPECT(0xaf, gbc.readMem(0xd972));
        // CB AF 0167
        gbc.setState(0x665f, 0xc802, 0x80d0, 0x2690, 0x59d2, 0x5edc, 0x1, 0x1);
        gbc.writeMem(0x665f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xc802, gbc.sp());
        EXPECT(0x6661, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0168
        gbc.setState(0x9d0, 0x55df, 0x84a0, 0xaa6e, 0x6fcb, 0xfc8, 0x1, 0x0);
        gbc.writeMem(0x9d0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x55df, gbc.sp());
        EXPECT(0x9d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0169
        gbc.setState(0x6b73, 0x5a54, 0xdad0, 0x4451, 0x9e17, 0x432c, 0x1, 0x0);
        gbc.writeMem(0x6b73, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x5a54, gbc.sp());
        EXPECT(0x6b75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 016A
        gbc.setState(0x653d, 0x8df0, 0xff80, 0x5001, 0x9980, 0xe981, 0x0, 0x1);
        gbc.writeMem(0x653d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x8df0, gbc.sp());
        EXPECT(0x653f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 016B
        gbc.setState(0x81b5, 0xb6e8, 0x9b10, 0x787d, 0xb4db, 0xc2f8, 0x0, 0x1);
        gbc.writeMem(0x81b5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xb6e8, gbc.sp());
        EXPECT(0x81b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81b5));
        EXPECT(0xaf, gbc.readMem(0x81b6));
        // CB AF 016C
        gbc.setState(0x1d78, 0xf717, 0x1520, 0xac1c, 0x17ac, 0x16e0, 0x0, 0x0);
        gbc.writeMem(0x1d78, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xf717, gbc.sp());
        EXPECT(0x1d7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 016D
        gbc.setState(0xb83b, 0x2711, 0xb8a0, 0x4408, 0x8c14, 0x29c6, 0x1, 0x0);
        gbc.writeMem(0xb83b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x2711, gbc.sp());
        EXPECT(0xb83d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb83b));
        EXPECT(0xaf, gbc.readMem(0xb83c));
        // CB AF 016E
        gbc.setState(0x1f9b, 0xb241, 0xed10, 0x98e4, 0x5b9a, 0x709c, 0x0, 0x0);
        gbc.writeMem(0x1f9b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xb241, gbc.sp());
        EXPECT(0x1f9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 016F
        gbc.setState(0x24a1, 0xc215, 0x38e0, 0x9166, 0x8d96, 0x8078, 0x0, 0x1);
        gbc.writeMem(0x24a1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xc215, gbc.sp());
        EXPECT(0x24a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0170
        gbc.setState(0x5df6, 0xad0e, 0xc40, 0x9e16, 0x47dc, 0xc676, 0x1, 0x0);
        gbc.writeMem(0x5df6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xad0e, gbc.sp());
        EXPECT(0x5df8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0171
        gbc.setState(0xdc12, 0xf9fc, 0x9580, 0xfd89, 0x2f72, 0xe0e, 0x0, 0x0);
        gbc.writeMem(0xdc12, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xf9fc, gbc.sp());
        EXPECT(0xdc14, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc12));
        EXPECT(0xaf, gbc.readMem(0xdc13));
        // CB AF 0172
        gbc.setState(0x8289, 0x28bf, 0x6c80, 0x6a8f, 0xddfc, 0xa7ab, 0x0, 0x0);
        gbc.writeMem(0x8289, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x28bf, gbc.sp());
        EXPECT(0x828b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8289));
        EXPECT(0xaf, gbc.readMem(0x828a));
        // CB AF 0173
        gbc.setState(0x3456, 0xef6b, 0x5d90, 0x816d, 0xb863, 0x5593, 0x1, 0x0);
        gbc.writeMem(0x3456, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xef6b, gbc.sp());
        EXPECT(0x3458, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0174
        gbc.setState(0x3ebd, 0x32d1, 0x6450, 0xfda5, 0x597d, 0x69ad, 0x0, 0x0);
        gbc.writeMem(0x3ebd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x32d1, gbc.sp());
        EXPECT(0x3ebf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0175
        gbc.setState(0x39ff, 0x429c, 0x1650, 0x2818, 0x51e0, 0xf30d, 0x0, 0x1);
        gbc.writeMem(0x39ff, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x429c, gbc.sp());
        EXPECT(0x3a01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0176
        gbc.setState(0xf69, 0x7e05, 0xd7a0, 0xa2b4, 0xf678, 0x8099, 0x1, 0x0);
        gbc.writeMem(0xf69, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x7e05, gbc.sp());
        EXPECT(0xf6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0177
        gbc.setState(0x55ee, 0xc44a, 0xd4a0, 0x6958, 0x6e9e, 0xe3f2, 0x1, 0x1);
        gbc.writeMem(0x55ee, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xc44a, gbc.sp());
        EXPECT(0x55f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0178
        gbc.setState(0x37ee, 0xb2d4, 0x8df0, 0xa354, 0x655, 0xe004, 0x1, 0x1);
        gbc.writeMem(0x37ee, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xb2d4, gbc.sp());
        EXPECT(0x37f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0179
        gbc.setState(0x60ee, 0x3277, 0x2c10, 0x708c, 0xb61, 0x45ef, 0x1, 0x0);
        gbc.writeMem(0x60ee, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x3277, gbc.sp());
        EXPECT(0x60f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 017A
        gbc.setState(0xe380, 0x8a61, 0x1f50, 0xc58c, 0xc7cf, 0x5d51, 0x0, 0x1);
        gbc.writeMem(0xe380, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x8a61, gbc.sp());
        EXPECT(0xe382, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe380));
        EXPECT(0xaf, gbc.readMem(0xe381));
        // CB AF 017B
        gbc.setState(0xa45, 0x5fdf, 0x65e0, 0xf67c, 0xe9b0, 0xc271, 0x0, 0x0);
        gbc.writeMem(0xa45, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x5fdf, gbc.sp());
        EXPECT(0xa47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 017C
        gbc.setState(0x11ac, 0xfda5, 0x53f0, 0x39cc, 0x7cf0, 0xe230, 0x1, 0x1);
        gbc.writeMem(0x11ac, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xfda5, gbc.sp());
        EXPECT(0x11ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 017D
        gbc.setState(0x5373, 0x334f, 0xfc00, 0x3707, 0x463a, 0xf6b9, 0x1, 0x0);
        gbc.writeMem(0x5373, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x334f, gbc.sp());
        EXPECT(0x5375, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 017E
        gbc.setState(0x6fc4, 0xd834, 0x4c70, 0xdeed, 0x1fc, 0x5dd6, 0x1, 0x1);
        gbc.writeMem(0x6fc4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xd834, gbc.sp());
        EXPECT(0x6fc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 017F
        gbc.setState(0xb80e, 0xe7ef, 0xd8d0, 0x4032, 0xb50b, 0x7ec3, 0x0, 0x1);
        gbc.writeMem(0xb80e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xe7ef, gbc.sp());
        EXPECT(0xb810, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb80e));
        EXPECT(0xaf, gbc.readMem(0xb80f));
        // CB AF 0180
        gbc.setState(0x55f1, 0xcfa9, 0xbab0, 0x5e28, 0x6271, 0x9828, 0x0, 0x0);
        gbc.writeMem(0x55f1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xcfa9, gbc.sp());
        EXPECT(0x55f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0181
        gbc.setState(0x97dd, 0x8c27, 0x220, 0x1ba7, 0xcf94, 0x521b, 0x0, 0x0);
        gbc.writeMem(0x97dd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x8c27, gbc.sp());
        EXPECT(0x97df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97dd));
        EXPECT(0xaf, gbc.readMem(0x97de));
        // CB AF 0182
        gbc.setState(0x200f, 0xbfdd, 0x9360, 0xc3a0, 0x76bf, 0x5b10, 0x1, 0x1);
        gbc.writeMem(0x200f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xbfdd, gbc.sp());
        EXPECT(0x2011, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0183
        gbc.setState(0x4924, 0x55b5, 0xe720, 0x3fa1, 0x20c8, 0xdbfa, 0x0, 0x1);
        gbc.writeMem(0x4924, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x55b5, gbc.sp());
        EXPECT(0x4926, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0184
        gbc.setState(0x633f, 0xed18, 0x9c90, 0xc713, 0xbc2b, 0xb3fb, 0x1, 0x0);
        gbc.writeMem(0x633f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xed18, gbc.sp());
        EXPECT(0x6341, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0185
        gbc.setState(0x9f7c, 0x364b, 0x1950, 0x3107, 0xcab7, 0xca62, 0x0, 0x1);
        gbc.writeMem(0x9f7c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x364b, gbc.sp());
        EXPECT(0x9f7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f7c));
        EXPECT(0xaf, gbc.readMem(0x9f7d));
        // CB AF 0186
        gbc.setState(0xa252, 0x3b91, 0x7e70, 0x4768, 0x3d60, 0x5afb, 0x1, 0x0);
        gbc.writeMem(0xa252, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x3b91, gbc.sp());
        EXPECT(0xa254, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa252));
        EXPECT(0xaf, gbc.readMem(0xa253));
        // CB AF 0187
        gbc.setState(0xd5e, 0x8599, 0xb200, 0x160c, 0x42e7, 0xb255, 0x0, 0x0);
        gbc.writeMem(0xd5e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x8599, gbc.sp());
        EXPECT(0xd60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0188
        gbc.setState(0x7e48, 0x9f49, 0x7250, 0x1f50, 0x29dc, 0xc642, 0x1, 0x0);
        gbc.writeMem(0x7e48, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x9f49, gbc.sp());
        EXPECT(0x7e4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0189
        gbc.setState(0x6b2f, 0xc4fd, 0x7580, 0x4ecb, 0xcd17, 0xdac, 0x0, 0x1);
        gbc.writeMem(0x6b2f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xc4fd, gbc.sp());
        EXPECT(0x6b31, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 018A
        gbc.setState(0x55fb, 0xc1a8, 0xff60, 0xf5b8, 0xc094, 0xb1ec, 0x1, 0x0);
        gbc.writeMem(0x55fb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xc1a8, gbc.sp());
        EXPECT(0x55fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 018B
        gbc.setState(0xc69e, 0xa7f0, 0x53a0, 0xafa1, 0x1a20, 0xfc64, 0x0, 0x1);
        gbc.writeMem(0xc69e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xa7f0, gbc.sp());
        EXPECT(0xc6a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc69e));
        EXPECT(0xaf, gbc.readMem(0xc69f));
        // CB AF 018C
        gbc.setState(0x149a, 0x85b4, 0x3310, 0xd02c, 0x88d6, 0xfe53, 0x1, 0x1);
        gbc.writeMem(0x149a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x85b4, gbc.sp());
        EXPECT(0x149c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 018D
        gbc.setState(0xe74b, 0xc939, 0x2620, 0x51aa, 0xfc5f, 0xea7e, 0x1, 0x1);
        gbc.writeMem(0xe74b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xc939, gbc.sp());
        EXPECT(0xe74d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe74b));
        EXPECT(0xaf, gbc.readMem(0xe74c));
        // CB AF 018E
        gbc.setState(0xd8ba, 0x2fe9, 0x3d80, 0xd0b2, 0x1fdb, 0xbd5, 0x1, 0x1);
        gbc.writeMem(0xd8ba, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x2fe9, gbc.sp());
        EXPECT(0xd8bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8ba));
        EXPECT(0xaf, gbc.readMem(0xd8bb));
        // CB AF 018F
        gbc.setState(0x279c, 0xdde, 0xd540, 0x9489, 0x358d, 0x4619, 0x1, 0x1);
        gbc.writeMem(0x279c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xdde, gbc.sp());
        EXPECT(0x279e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0190
        gbc.setState(0x1244, 0xb5f4, 0xb190, 0x4d95, 0xfd0b, 0xd72, 0x0, 0x1);
        gbc.writeMem(0x1244, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xb5f4, gbc.sp());
        EXPECT(0x1246, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0191
        gbc.setState(0x4346, 0xa333, 0x2df0, 0x2d9f, 0x28df, 0x1421, 0x0, 0x0);
        gbc.writeMem(0x4346, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xa333, gbc.sp());
        EXPECT(0x4348, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0192
        gbc.setState(0x2750, 0x71b3, 0x8170, 0xa466, 0x9673, 0x4f16, 0x1, 0x1);
        gbc.writeMem(0x2750, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x71b3, gbc.sp());
        EXPECT(0x2752, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0193
        gbc.setState(0x3725, 0xd049, 0x8000, 0x4916, 0xfbeb, 0xc882, 0x0, 0x1);
        gbc.writeMem(0x3725, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xd049, gbc.sp());
        EXPECT(0x3727, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0194
        gbc.setState(0xc9d3, 0xc63e, 0xfa30, 0x748a, 0xe3be, 0x6bd4, 0x0, 0x1);
        gbc.writeMem(0xc9d3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xc63e, gbc.sp());
        EXPECT(0xc9d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9d3));
        EXPECT(0xaf, gbc.readMem(0xc9d4));
        // CB AF 0195
        gbc.setState(0x3f2c, 0xc749, 0xcb10, 0x9048, 0x5772, 0xf509, 0x1, 0x1);
        gbc.writeMem(0x3f2c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xc749, gbc.sp());
        EXPECT(0x3f2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0196
        gbc.setState(0x7ce1, 0x100a, 0xaef0, 0x5441, 0x7e17, 0x84c2, 0x1, 0x1);
        gbc.writeMem(0x7ce1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x100a, gbc.sp());
        EXPECT(0x7ce3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0197
        gbc.setState(0xc65e, 0xf890, 0x170, 0x6865, 0x1a15, 0x386, 0x1, 0x1);
        gbc.writeMem(0xc65e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xf890, gbc.sp());
        EXPECT(0xc660, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc65e));
        EXPECT(0xaf, gbc.readMem(0xc65f));
        // CB AF 0198
        gbc.setState(0x15fb, 0x4aee, 0x5520, 0xc389, 0x6984, 0x580e, 0x0, 0x1);
        gbc.writeMem(0x15fb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x4aee, gbc.sp());
        EXPECT(0x15fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0199
        gbc.setState(0x6839, 0xf37d, 0xce40, 0x6930, 0x610f, 0xee29, 0x1, 0x1);
        gbc.writeMem(0x6839, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xf37d, gbc.sp());
        EXPECT(0x683b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 019A
        gbc.setState(0xd36c, 0x8fc4, 0x7d60, 0x95c7, 0x78d4, 0x6d56, 0x0, 0x1);
        gbc.writeMem(0xd36c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x8fc4, gbc.sp());
        EXPECT(0xd36e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd36c));
        EXPECT(0xaf, gbc.readMem(0xd36d));
        // CB AF 019B
        gbc.setState(0x7195, 0xbf2e, 0x28d0, 0x312a, 0x79ce, 0x6c62, 0x1, 0x1);
        gbc.writeMem(0x7195, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xbf2e, gbc.sp());
        EXPECT(0x7197, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 019C
        gbc.setState(0xb690, 0xaf83, 0x9eb0, 0xa52c, 0x734a, 0x95e, 0x1, 0x1);
        gbc.writeMem(0xb690, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xaf83, gbc.sp());
        EXPECT(0xb692, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb690));
        EXPECT(0xaf, gbc.readMem(0xb691));
        // CB AF 019E
        gbc.setState(0x557a, 0x7312, 0x8960, 0xd6a9, 0x8612, 0x3ee8, 0x1, 0x0);
        gbc.writeMem(0x557a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x7312, gbc.sp());
        EXPECT(0x557c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 019F
        gbc.setState(0xd63f, 0xc4b9, 0xb30, 0x5d71, 0xad09, 0xf7d4, 0x1, 0x0);
        gbc.writeMem(0xd63f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xc4b9, gbc.sp());
        EXPECT(0xd641, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd63f));
        EXPECT(0xaf, gbc.readMem(0xd640));
        // CB AF 01A0
        gbc.setState(0x4052, 0x923e, 0x4660, 0x35af, 0x68b6, 0x8bf9, 0x0, 0x1);
        gbc.writeMem(0x4052, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x923e, gbc.sp());
        EXPECT(0x4054, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01A1
        gbc.setState(0x8f35, 0x889e, 0x29c0, 0x3d34, 0xe23b, 0x567a, 0x0, 0x0);
        gbc.writeMem(0x8f35, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x889e, gbc.sp());
        EXPECT(0x8f37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f35));
        EXPECT(0xaf, gbc.readMem(0x8f36));
        // CB AF 01A2
        gbc.setState(0xa848, 0x4ef, 0xca40, 0x143d, 0x3fc6, 0xb932, 0x1, 0x1);
        gbc.writeMem(0xa848, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x4ef, gbc.sp());
        EXPECT(0xa84a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa848));
        EXPECT(0xaf, gbc.readMem(0xa849));
        // CB AF 01A3
        gbc.setState(0x2bf7, 0x3096, 0x2210, 0xa880, 0xba19, 0x90db, 0x1, 0x1);
        gbc.writeMem(0x2bf7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x3096, gbc.sp());
        EXPECT(0x2bf9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01A4
        gbc.setState(0xeeb7, 0xef07, 0xc120, 0x5947, 0x8dd5, 0x1f2, 0x1, 0x0);
        gbc.writeMem(0xeeb7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xef07, gbc.sp());
        EXPECT(0xeeb9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeeb7));
        EXPECT(0xaf, gbc.readMem(0xeeb8));
        // CB AF 01A5
        gbc.setState(0x1a9, 0x6974, 0x1d70, 0xf9a0, 0xc3d0, 0x679c, 0x1, 0x0);
        gbc.writeMem(0x1a9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x6974, gbc.sp());
        EXPECT(0x1ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01A6
        gbc.setState(0x5baa, 0x638e, 0x9680, 0x7657, 0xd77f, 0x2179, 0x1, 0x1);
        gbc.writeMem(0x5baa, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x638e, gbc.sp());
        EXPECT(0x5bac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01A8
        gbc.setState(0xb81e, 0x3f2, 0x3060, 0x6750, 0x7660, 0x9208, 0x1, 0x1);
        gbc.writeMem(0xb81e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x3f2, gbc.sp());
        EXPECT(0xb820, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb81e));
        EXPECT(0xaf, gbc.readMem(0xb81f));
        // CB AF 01A9
        gbc.setState(0xc27c, 0x6794, 0x2040, 0x9bfd, 0xbae5, 0x475, 0x1, 0x1);
        gbc.writeMem(0xc27c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x6794, gbc.sp());
        EXPECT(0xc27e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc27c));
        EXPECT(0xaf, gbc.readMem(0xc27d));
        // CB AF 01AA
        gbc.setState(0x32ea, 0xe833, 0xa50, 0x138d, 0x87e0, 0xc009, 0x0, 0x0);
        gbc.writeMem(0x32ea, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xe833, gbc.sp());
        EXPECT(0x32ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01AB
        gbc.setState(0x8095, 0x3af4, 0x6780, 0xa476, 0xa06b, 0x6ab8, 0x0, 0x1);
        gbc.writeMem(0x8095, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x3af4, gbc.sp());
        EXPECT(0x8097, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8095));
        EXPECT(0xaf, gbc.readMem(0x8096));
        // CB AF 01AC
        gbc.setState(0x6e52, 0x4d3a, 0xe4e0, 0x4122, 0x28e3, 0xe7cb, 0x1, 0x1);
        gbc.writeMem(0x6e52, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x4d3a, gbc.sp());
        EXPECT(0x6e54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01AD
        gbc.setState(0x588a, 0x846c, 0x6890, 0xf647, 0xb65a, 0x7e3, 0x0, 0x0);
        gbc.writeMem(0x588a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x846c, gbc.sp());
        EXPECT(0x588c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01AE
        gbc.setState(0x318f, 0x9f31, 0xc480, 0x3600, 0xa49, 0xf9cb, 0x0, 0x1);
        gbc.writeMem(0x318f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x9f31, gbc.sp());
        EXPECT(0x3191, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01AF
        gbc.setState(0xdefd, 0xf5e7, 0x3170, 0xe584, 0xb6de, 0x81a9, 0x0, 0x1);
        gbc.writeMem(0xdefd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xf5e7, gbc.sp());
        EXPECT(0xdeff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdefd));
        EXPECT(0xaf, gbc.readMem(0xdefe));
        // CB AF 01B0
        gbc.setState(0x4d68, 0xcba7, 0x1e40, 0x1372, 0x3cf2, 0x648f, 0x1, 0x1);
        gbc.writeMem(0x4d68, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xcba7, gbc.sp());
        EXPECT(0x4d6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01B1
        gbc.setState(0x7388, 0x2658, 0x2c20, 0x5704, 0xf51f, 0x19db, 0x0, 0x0);
        gbc.writeMem(0x7388, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x2658, gbc.sp());
        EXPECT(0x738a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01B2
        gbc.setState(0xb569, 0xe278, 0xa4b0, 0x5e8e, 0xbac2, 0xdc74, 0x0, 0x1);
        gbc.writeMem(0xb569, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xe278, gbc.sp());
        EXPECT(0xb56b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb569));
        EXPECT(0xaf, gbc.readMem(0xb56a));
        // CB AF 01B3
        gbc.setState(0x143f, 0x9124, 0xdf50, 0x3ebe, 0x483b, 0x5f3d, 0x0, 0x0);
        gbc.writeMem(0x143f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x9124, gbc.sp());
        EXPECT(0x1441, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01B4
        gbc.setState(0xebe4, 0xfa50, 0x4720, 0x270d, 0x295b, 0xdb6e, 0x0, 0x1);
        gbc.writeMem(0xebe4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xfa50, gbc.sp());
        EXPECT(0xebe6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebe4));
        EXPECT(0xaf, gbc.readMem(0xebe5));
        // CB AF 01B5
        gbc.setState(0x1ec8, 0xad82, 0xd6a0, 0xbe79, 0xb6c0, 0x84f2, 0x1, 0x1);
        gbc.writeMem(0x1ec8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xad82, gbc.sp());
        EXPECT(0x1eca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01B8
        gbc.setState(0xe3ea, 0x3bab, 0x3c40, 0x6b1c, 0x9462, 0x1e5d, 0x1, 0x0);
        gbc.writeMem(0xe3ea, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x3bab, gbc.sp());
        EXPECT(0xe3ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3ea));
        EXPECT(0xaf, gbc.readMem(0xe3eb));
        // CB AF 01B9
        gbc.setState(0xd2ec, 0xe983, 0x4670, 0x344c, 0x9e27, 0xf01e, 0x1, 0x1);
        gbc.writeMem(0xd2ec, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xe983, gbc.sp());
        EXPECT(0xd2ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2ec));
        EXPECT(0xaf, gbc.readMem(0xd2ed));
        // CB AF 01BA
        gbc.setState(0x9d30, 0xc2be, 0x5fd0, 0x9ace, 0x8775, 0xdae8, 0x0, 0x1);
        gbc.writeMem(0x9d30, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xc2be, gbc.sp());
        EXPECT(0x9d32, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d30));
        EXPECT(0xaf, gbc.readMem(0x9d31));
        // CB AF 01BC
        gbc.setState(0xdd43, 0xbc96, 0x44b0, 0x2008, 0xb4c7, 0x8bb7, 0x1, 0x1);
        gbc.writeMem(0xdd43, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xbc96, gbc.sp());
        EXPECT(0xdd45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd43));
        EXPECT(0xaf, gbc.readMem(0xdd44));
        // CB AF 01BD
        gbc.setState(0xae9d, 0x2fdc, 0x6cb0, 0x17c, 0xaed8, 0xd00e, 0x1, 0x1);
        gbc.writeMem(0xae9d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x2fdc, gbc.sp());
        EXPECT(0xae9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae9d));
        EXPECT(0xaf, gbc.readMem(0xae9e));
        // CB AF 01BE
        gbc.setState(0x8c27, 0xb714, 0x8990, 0xc9ef, 0xf460, 0xc268, 0x1, 0x1);
        gbc.writeMem(0x8c27, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xb714, gbc.sp());
        EXPECT(0x8c29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c27));
        EXPECT(0xaf, gbc.readMem(0x8c28));
        // CB AF 01BF
        gbc.setState(0x7bb7, 0xc557, 0xfb30, 0x4e5f, 0x3ac1, 0xd675, 0x1, 0x1);
        gbc.writeMem(0x7bb7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xc557, gbc.sp());
        EXPECT(0x7bb9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01C0
        gbc.setState(0x9541, 0xfd2c, 0x5620, 0xe62d, 0x55ee, 0xe20f, 0x0, 0x1);
        gbc.writeMem(0x9541, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xfd2c, gbc.sp());
        EXPECT(0x9543, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9541));
        EXPECT(0xaf, gbc.readMem(0x9542));
        // CB AF 01C1
        gbc.setState(0xc6cf, 0x8954, 0xaf60, 0xb63e, 0x9427, 0xa3a4, 0x0, 0x1);
        gbc.writeMem(0xc6cf, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x8954, gbc.sp());
        EXPECT(0xc6d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6cf));
        EXPECT(0xaf, gbc.readMem(0xc6d0));
        // CB AF 01C2
        gbc.setState(0xd51d, 0x3427, 0x10f0, 0x9010, 0x4105, 0x3f7, 0x0, 0x0);
        gbc.writeMem(0xd51d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x3427, gbc.sp());
        EXPECT(0xd51f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd51d));
        EXPECT(0xaf, gbc.readMem(0xd51e));
        // CB AF 01C3
        gbc.setState(0x306c, 0x8b14, 0x55c0, 0x65ce, 0xf1f1, 0xce5a, 0x0, 0x0);
        gbc.writeMem(0x306c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x8b14, gbc.sp());
        EXPECT(0x306e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01C4
        gbc.setState(0xade3, 0x6b11, 0x8410, 0xd449, 0x579b, 0x641f, 0x0, 0x1);
        gbc.writeMem(0xade3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x6b11, gbc.sp());
        EXPECT(0xade5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xade3));
        EXPECT(0xaf, gbc.readMem(0xade4));
        // CB AF 01C5
        gbc.setState(0x47df, 0xab9d, 0x3f30, 0x9c0, 0x505a, 0x2630, 0x1, 0x0);
        gbc.writeMem(0x47df, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xab9d, gbc.sp());
        EXPECT(0x47e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01C6
        gbc.setState(0xbbb6, 0xd943, 0x5a50, 0x5d36, 0xdc80, 0xd7a5, 0x0, 0x0);
        gbc.writeMem(0xbbb6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xd943, gbc.sp());
        EXPECT(0xbbb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbb6));
        EXPECT(0xaf, gbc.readMem(0xbbb7));
        // CB AF 01C7
        gbc.setState(0x3948, 0xd40b, 0x1f30, 0x880a, 0x758f, 0xdeed, 0x0, 0x1);
        gbc.writeMem(0x3948, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xd40b, gbc.sp());
        EXPECT(0x394a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01C8
        gbc.setState(0x2b8d, 0xcf4e, 0x30, 0x2eaa, 0x92c, 0xd9af, 0x1, 0x1);
        gbc.writeMem(0x2b8d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xcf4e, gbc.sp());
        EXPECT(0x2b8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01C9
        gbc.setState(0xa5c1, 0xf19d, 0xccf0, 0x6214, 0x2779, 0x7ac8, 0x1, 0x0);
        gbc.writeMem(0xa5c1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xf19d, gbc.sp());
        EXPECT(0xa5c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5c1));
        EXPECT(0xaf, gbc.readMem(0xa5c2));
        // CB AF 01CA
        gbc.setState(0x9e2c, 0xdd7, 0x43f0, 0xef03, 0x5b8f, 0x49df, 0x1, 0x1);
        gbc.writeMem(0x9e2c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xdd7, gbc.sp());
        EXPECT(0x9e2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e2c));
        EXPECT(0xaf, gbc.readMem(0x9e2d));
        // CB AF 01CB
        gbc.setState(0xc716, 0x5d64, 0x8000, 0xebec, 0xe29b, 0x5088, 0x0, 0x0);
        gbc.writeMem(0xc716, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x5d64, gbc.sp());
        EXPECT(0xc718, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc716));
        EXPECT(0xaf, gbc.readMem(0xc717));
        // CB AF 01CC
        gbc.setState(0xce36, 0x1fa2, 0xf400, 0x7a10, 0x8695, 0xc0ab, 0x0, 0x0);
        gbc.writeMem(0xce36, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x1fa2, gbc.sp());
        EXPECT(0xce38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce36));
        EXPECT(0xaf, gbc.readMem(0xce37));
        // CB AF 01CD
        gbc.setState(0x901f, 0x46ea, 0x5660, 0xbae8, 0xbd4f, 0x62d7, 0x0, 0x1);
        gbc.writeMem(0x901f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x46ea, gbc.sp());
        EXPECT(0x9021, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x901f));
        EXPECT(0xaf, gbc.readMem(0x9020));
        // CB AF 01CF
        gbc.setState(0x58f6, 0xdb35, 0xbe20, 0x43a6, 0x1306, 0xa37f, 0x0, 0x1);
        gbc.writeMem(0x58f6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xdb35, gbc.sp());
        EXPECT(0x58f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01D0
        gbc.setState(0x530e, 0xac02, 0x97f0, 0xfdc2, 0xda7e, 0x40d6, 0x0, 0x0);
        gbc.writeMem(0x530e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xac02, gbc.sp());
        EXPECT(0x5310, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01D1
        gbc.setState(0x6f3e, 0x2686, 0xbb40, 0x3c5b, 0xf0bf, 0x8f70, 0x1, 0x0);
        gbc.writeMem(0x6f3e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x2686, gbc.sp());
        EXPECT(0x6f40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01D2
        gbc.setState(0xd3ac, 0x794c, 0xec40, 0x533e, 0x3150, 0x6ad8, 0x1, 0x0);
        gbc.writeMem(0xd3ac, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x794c, gbc.sp());
        EXPECT(0xd3ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3ac));
        EXPECT(0xaf, gbc.readMem(0xd3ad));
        // CB AF 01D3
        gbc.setState(0x2a6d, 0xbce7, 0x6a20, 0xfbc6, 0x8a65, 0x82c, 0x1, 0x0);
        gbc.writeMem(0x2a6d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xbce7, gbc.sp());
        EXPECT(0x2a6f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01D4
        gbc.setState(0x6bc0, 0x6459, 0x2890, 0x194a, 0xa7b7, 0xe60a, 0x0, 0x1);
        gbc.writeMem(0x6bc0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x6459, gbc.sp());
        EXPECT(0x6bc2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01D5
        gbc.setState(0x4e32, 0x7b24, 0xe460, 0xe41f, 0xa1b8, 0x28a9, 0x1, 0x0);
        gbc.writeMem(0x4e32, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x7b24, gbc.sp());
        EXPECT(0x4e34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01D6
        gbc.setState(0x9370, 0x5b38, 0x1150, 0x47f0, 0x6cf8, 0xc320, 0x1, 0x0);
        gbc.writeMem(0x9370, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x5b38, gbc.sp());
        EXPECT(0x9372, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9370));
        EXPECT(0xaf, gbc.readMem(0x9371));
        // CB AF 01D7
        gbc.setState(0xccc6, 0xe658, 0x4c50, 0xb4fe, 0xd63e, 0xbe5d, 0x0, 0x1);
        gbc.writeMem(0xccc6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xe658, gbc.sp());
        EXPECT(0xccc8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccc6));
        EXPECT(0xaf, gbc.readMem(0xccc7));
        // CB AF 01D8
        gbc.setState(0xce85, 0x8201, 0x9d80, 0xff38, 0x522d, 0xef7e, 0x1, 0x1);
        gbc.writeMem(0xce85, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x8201, gbc.sp());
        EXPECT(0xce87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce85));
        EXPECT(0xaf, gbc.readMem(0xce86));
        // CB AF 01D9
        gbc.setState(0x13cb, 0x6f78, 0xb390, 0x9094, 0x9602, 0x18d1, 0x0, 0x1);
        gbc.writeMem(0x13cb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x6f78, gbc.sp());
        EXPECT(0x13cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01DA
        gbc.setState(0x4567, 0x41db, 0xeaf0, 0xea76, 0xdf94, 0x4e16, 0x1, 0x0);
        gbc.writeMem(0x4567, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x41db, gbc.sp());
        EXPECT(0x4569, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01DB
        gbc.setState(0x6caf, 0xdb43, 0x30b0, 0xaa4c, 0xeeb6, 0x8dac, 0x0, 0x1);
        gbc.writeMem(0x6caf, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xdb43, gbc.sp());
        EXPECT(0x6cb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01DC
        gbc.setState(0x2534, 0xa628, 0x2250, 0x806b, 0x9d6c, 0xfad8, 0x0, 0x1);
        gbc.writeMem(0x2534, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xa628, gbc.sp());
        EXPECT(0x2536, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01DD
        gbc.setState(0x4343, 0xcafb, 0xbb30, 0xb45c, 0x5e35, 0xc3a4, 0x1, 0x0);
        gbc.writeMem(0x4343, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xcafb, gbc.sp());
        EXPECT(0x4345, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01DE
        gbc.setState(0x5fce, 0x63a2, 0x8930, 0x820f, 0x3bd0, 0xf900, 0x1, 0x0);
        gbc.writeMem(0x5fce, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x63a2, gbc.sp());
        EXPECT(0x5fd0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01DF
        gbc.setState(0xb98f, 0x850f, 0xe920, 0x383, 0xd990, 0x7acb, 0x0, 0x1);
        gbc.writeMem(0xb98f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x850f, gbc.sp());
        EXPECT(0xb991, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb98f));
        EXPECT(0xaf, gbc.readMem(0xb990));
        // CB AF 01E0
        gbc.setState(0x3af7, 0x7aa3, 0x4da0, 0x9d02, 0xad6c, 0x3a9f, 0x0, 0x1);
        gbc.writeMem(0x3af7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x7aa3, gbc.sp());
        EXPECT(0x3af9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01E1
        gbc.setState(0xcb62, 0x4118, 0x58e0, 0xdc57, 0xa31e, 0xa364, 0x0, 0x1);
        gbc.writeMem(0xcb62, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x4118, gbc.sp());
        EXPECT(0xcb64, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb62));
        EXPECT(0xaf, gbc.readMem(0xcb63));
        // CB AF 01E2
        gbc.setState(0x1e37, 0x9ab7, 0x6230, 0x2e0e, 0x3ac6, 0x14ea, 0x0, 0x1);
        gbc.writeMem(0x1e37, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x9ab7, gbc.sp());
        EXPECT(0x1e39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01E3
        gbc.setState(0xc816, 0xf2c2, 0x8d70, 0x11ea, 0xde69, 0x5522, 0x1, 0x1);
        gbc.writeMem(0xc816, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xf2c2, gbc.sp());
        EXPECT(0xc818, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc816));
        EXPECT(0xaf, gbc.readMem(0xc817));
        // CB AF 01E4
        gbc.setState(0x34f, 0x5ffb, 0xd700, 0x76c5, 0xd0ca, 0x710, 0x0, 0x0);
        gbc.writeMem(0x34f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x5ffb, gbc.sp());
        EXPECT(0x351, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01E5
        gbc.setState(0x42ac, 0xb778, 0x6590, 0x3c00, 0xe881, 0x998f, 0x1, 0x1);
        gbc.writeMem(0x42ac, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xb778, gbc.sp());
        EXPECT(0x42ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01E6
        gbc.setState(0xcca0, 0x3e96, 0xa940, 0x7c72, 0x3cc5, 0xdd74, 0x0, 0x0);
        gbc.writeMem(0xcca0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x3e96, gbc.sp());
        EXPECT(0xcca2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcca0));
        EXPECT(0xaf, gbc.readMem(0xcca1));
        // CB AF 01E7
        gbc.setState(0x5d61, 0x952b, 0x1900, 0x23bd, 0x11b0, 0x1e6c, 0x1, 0x0);
        gbc.writeMem(0x5d61, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x952b, gbc.sp());
        EXPECT(0x5d63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01E8
        gbc.setState(0xdd86, 0x903, 0xf70, 0xa80e, 0x580c, 0xd8b9, 0x0, 0x0);
        gbc.writeMem(0xdd86, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x903, gbc.sp());
        EXPECT(0xdd88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd86));
        EXPECT(0xaf, gbc.readMem(0xdd87));
        // CB AF 01E9
        gbc.setState(0x86ab, 0x9905, 0xffb0, 0xc626, 0x7b5, 0xac8, 0x1, 0x0);
        gbc.writeMem(0x86ab, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x9905, gbc.sp());
        EXPECT(0x86ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86ab));
        EXPECT(0xaf, gbc.readMem(0x86ac));
        // CB AF 01EA
        gbc.setState(0xbfc4, 0x6155, 0xe1a0, 0x13a5, 0x8009, 0xd00b, 0x0, 0x0);
        gbc.writeMem(0xbfc4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x6155, gbc.sp());
        EXPECT(0xbfc6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfc4));
        EXPECT(0xaf, gbc.readMem(0xbfc5));
        // CB AF 01EB
        gbc.setState(0x55f, 0xc6a7, 0xccb0, 0x71ac, 0x1191, 0xfbad, 0x1, 0x0);
        gbc.writeMem(0x55f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xc6a7, gbc.sp());
        EXPECT(0x561, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01EC
        gbc.setState(0x7a97, 0xcc53, 0x940, 0x98be, 0xd618, 0xf992, 0x0, 0x0);
        gbc.writeMem(0x7a97, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xcc53, gbc.sp());
        EXPECT(0x7a99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01ED
        gbc.setState(0xbf71, 0x2094, 0x4bb0, 0x6318, 0x70ca, 0xa7d4, 0x1, 0x0);
        gbc.writeMem(0xbf71, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x2094, gbc.sp());
        EXPECT(0xbf73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf71));
        EXPECT(0xaf, gbc.readMem(0xbf72));
        // CB AF 01EE
        gbc.setState(0x5144, 0x2254, 0x16a0, 0xa323, 0xaa87, 0x9e71, 0x1, 0x1);
        gbc.writeMem(0x5144, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x2254, gbc.sp());
        EXPECT(0x5146, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01EF
        gbc.setState(0x4666, 0x4931, 0xcc60, 0x4dcb, 0xc3dc, 0x1a1, 0x0, 0x0);
        gbc.writeMem(0x4666, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x4931, gbc.sp());
        EXPECT(0x4668, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01F0
        gbc.setState(0xa8f7, 0x5266, 0x8b40, 0x78a8, 0xad5e, 0x9eb7, 0x1, 0x0);
        gbc.writeMem(0xa8f7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x5266, gbc.sp());
        EXPECT(0xa8f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8f7));
        EXPECT(0xaf, gbc.readMem(0xa8f8));
        // CB AF 01F1
        gbc.setState(0xa2bc, 0xbf4f, 0x8ff0, 0x2040, 0xf20d, 0x9433, 0x1, 0x1);
        gbc.writeMem(0xa2bc, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xbf4f, gbc.sp());
        EXPECT(0xa2be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2bc));
        EXPECT(0xaf, gbc.readMem(0xa2bd));
        // CB AF 01F2
        gbc.setState(0xc4c4, 0x2846, 0xb730, 0xa06c, 0x887e, 0xba3a, 0x1, 0x0);
        gbc.writeMem(0xc4c4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x2846, gbc.sp());
        EXPECT(0xc4c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4c4));
        EXPECT(0xaf, gbc.readMem(0xc4c5));
        // CB AF 01F3
        gbc.setState(0x8658, 0xacd1, 0x9160, 0xc19e, 0x7937, 0xf68d, 0x1, 0x1);
        gbc.writeMem(0x8658, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xacd1, gbc.sp());
        EXPECT(0x865a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8658));
        EXPECT(0xaf, gbc.readMem(0x8659));
        // CB AF 01F4
        gbc.setState(0x4b26, 0x1170, 0x95b0, 0xee47, 0xe5e2, 0xa917, 0x0, 0x1);
        gbc.writeMem(0x4b26, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x1170, gbc.sp());
        EXPECT(0x4b28, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01F5
        gbc.setState(0x2d81, 0x22d2, 0x7b10, 0x5779, 0x70f7, 0xdbe0, 0x0, 0x1);
        gbc.writeMem(0x2d81, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x22d2, gbc.sp());
        EXPECT(0x2d83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01F6
        gbc.setState(0x8b81, 0x660a, 0xd540, 0x9ce7, 0x5a51, 0x5928, 0x0, 0x0);
        gbc.writeMem(0x8b81, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x660a, gbc.sp());
        EXPECT(0x8b83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b81));
        EXPECT(0xaf, gbc.readMem(0x8b82));
        // CB AF 01F7
        gbc.setState(0x18f7, 0xab30, 0x6cf0, 0x3c98, 0x1a0c, 0xf38e, 0x0, 0x1);
        gbc.writeMem(0x18f7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xab30, gbc.sp());
        EXPECT(0x18f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01F8
        gbc.setState(0x8568, 0x9d0c, 0x9a90, 0xe807, 0xcfc, 0x50fe, 0x1, 0x0);
        gbc.writeMem(0x8568, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x9d0c, gbc.sp());
        EXPECT(0x856a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8568));
        EXPECT(0xaf, gbc.readMem(0x8569));
        // CB AF 01F9
        gbc.setState(0x75f1, 0x2d55, 0xd050, 0x98a7, 0x3928, 0x499b, 0x0, 0x1);
        gbc.writeMem(0x75f1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x2d55, gbc.sp());
        EXPECT(0x75f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 01FB
        gbc.setState(0xd6a1, 0x9c19, 0xc290, 0x607a, 0x5d49, 0x5eea, 0x1, 0x0);
        gbc.writeMem(0xd6a1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x9c19, gbc.sp());
        EXPECT(0xd6a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6a1));
        EXPECT(0xaf, gbc.readMem(0xd6a2));
        // CB AF 01FC
        gbc.setState(0x3694, 0x7064, 0x120, 0x7e39, 0x21fe, 0x6d0d, 0x0, 0x1);
        gbc.writeMem(0x3694, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x7064, gbc.sp());
        EXPECT(0x3696, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01FD
        gbc.setState(0x348f, 0x9306, 0xfe20, 0x59fa, 0xde9, 0xdf01, 0x0, 0x0);
        gbc.writeMem(0x348f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x9306, gbc.sp());
        EXPECT(0x3491, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 01FE
        gbc.setState(0x6d55, 0x10a8, 0x34c0, 0x1c2c, 0x68e3, 0xcdae, 0x0, 0x0);
        gbc.writeMem(0x6d55, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x10a8, gbc.sp());
        EXPECT(0x6d57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0200
        gbc.setState(0xbd16, 0x3822, 0x44f0, 0x9cf6, 0x4959, 0xa9e3, 0x1, 0x0);
        gbc.writeMem(0xbd16, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x3822, gbc.sp());
        EXPECT(0xbd18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd16));
        EXPECT(0xaf, gbc.readMem(0xbd17));
        // CB AF 0201
        gbc.setState(0x6ca0, 0x33cb, 0xdf60, 0xad70, 0x7b11, 0xc2b4, 0x1, 0x1);
        gbc.writeMem(0x6ca0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x33cb, gbc.sp());
        EXPECT(0x6ca2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0202
        gbc.setState(0x87dd, 0x9eaa, 0x6db0, 0x4e1e, 0x54bb, 0x5670, 0x1, 0x1);
        gbc.writeMem(0x87dd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x9eaa, gbc.sp());
        EXPECT(0x87df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87dd));
        EXPECT(0xaf, gbc.readMem(0x87de));
        // CB AF 0203
        gbc.setState(0x9da3, 0x95c3, 0xfb80, 0xd29d, 0x194b, 0x13a8, 0x1, 0x0);
        gbc.writeMem(0x9da3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x95c3, gbc.sp());
        EXPECT(0x9da5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9da3));
        EXPECT(0xaf, gbc.readMem(0x9da4));
        // CB AF 0204
        gbc.setState(0xeb88, 0x3009, 0x6d0, 0xbf2f, 0x6f2f, 0xf4fb, 0x1, 0x0);
        gbc.writeMem(0xeb88, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x3009, gbc.sp());
        EXPECT(0xeb8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb88));
        EXPECT(0xaf, gbc.readMem(0xeb89));
        // CB AF 0205
        gbc.setState(0xe371, 0xf419, 0x8a40, 0xb933, 0x21c1, 0x34e3, 0x1, 0x0);
        gbc.writeMem(0xe371, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xf419, gbc.sp());
        EXPECT(0xe373, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe371));
        EXPECT(0xaf, gbc.readMem(0xe372));
        // CB AF 0206
        gbc.setState(0xdbd9, 0x114c, 0xab70, 0x4729, 0xd106, 0x3c34, 0x1, 0x1);
        gbc.writeMem(0xdbd9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x114c, gbc.sp());
        EXPECT(0xdbdb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbd9));
        EXPECT(0xaf, gbc.readMem(0xdbda));
        // CB AF 0207
        gbc.setState(0x27aa, 0x3fb4, 0xb110, 0xca4, 0x7aec, 0xbc4c, 0x1, 0x0);
        gbc.writeMem(0x27aa, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x3fb4, gbc.sp());
        EXPECT(0x27ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0208
        gbc.setState(0x74bc, 0xef7d, 0x1200, 0xde83, 0xbb8e, 0x8aa6, 0x1, 0x1);
        gbc.writeMem(0x74bc, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xef7d, gbc.sp());
        EXPECT(0x74be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0209
        gbc.setState(0x48b4, 0x9806, 0xba00, 0xf86, 0xa654, 0xf343, 0x0, 0x1);
        gbc.writeMem(0x48b4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x9806, gbc.sp());
        EXPECT(0x48b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 020A
        gbc.setState(0x8a46, 0x5ae6, 0xc640, 0xb12, 0x235d, 0xbfbf, 0x1, 0x1);
        gbc.writeMem(0x8a46, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x5ae6, gbc.sp());
        EXPECT(0x8a48, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a46));
        EXPECT(0xaf, gbc.readMem(0x8a47));
        // CB AF 020B
        gbc.setState(0xa913, 0xde5a, 0xe790, 0xae2a, 0x7c6, 0xae02, 0x1, 0x0);
        gbc.writeMem(0xa913, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xde5a, gbc.sp());
        EXPECT(0xa915, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa913));
        EXPECT(0xaf, gbc.readMem(0xa914));
        // CB AF 020C
        gbc.setState(0x8f52, 0xc636, 0xa0b0, 0x8ce, 0x1304, 0x5e25, 0x1, 0x0);
        gbc.writeMem(0x8f52, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xc636, gbc.sp());
        EXPECT(0x8f54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f52));
        EXPECT(0xaf, gbc.readMem(0x8f53));
        // CB AF 020D
        gbc.setState(0xc389, 0x1a6c, 0xa170, 0x9d55, 0x4266, 0x8b61, 0x0, 0x1);
        gbc.writeMem(0xc389, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x1a6c, gbc.sp());
        EXPECT(0xc38b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc389));
        EXPECT(0xaf, gbc.readMem(0xc38a));
        // CB AF 020E
        gbc.setState(0xdafd, 0xf13d, 0xcf60, 0x2ab7, 0x6746, 0xf025, 0x1, 0x1);
        gbc.writeMem(0xdafd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xf13d, gbc.sp());
        EXPECT(0xdaff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdafd));
        EXPECT(0xaf, gbc.readMem(0xdafe));
        // CB AF 020F
        gbc.setState(0xeb91, 0xb792, 0xe050, 0x435b, 0xf5d6, 0x8b9b, 0x0, 0x1);
        gbc.writeMem(0xeb91, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xb792, gbc.sp());
        EXPECT(0xeb93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb91));
        EXPECT(0xaf, gbc.readMem(0xeb92));
        // CB AF 0210
        gbc.setState(0x4021, 0xc215, 0xa760, 0x6d94, 0x27b8, 0x739f, 0x1, 0x1);
        gbc.writeMem(0x4021, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xc215, gbc.sp());
        EXPECT(0x4023, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0211
        gbc.setState(0xa1e8, 0x90f0, 0x1330, 0x58a8, 0xec00, 0xb49b, 0x0, 0x0);
        gbc.writeMem(0xa1e8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x90f0, gbc.sp());
        EXPECT(0xa1ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1e8));
        EXPECT(0xaf, gbc.readMem(0xa1e9));
        // CB AF 0212
        gbc.setState(0x5a6c, 0x87ba, 0xefc0, 0xee87, 0x25d0, 0xe03c, 0x0, 0x0);
        gbc.writeMem(0x5a6c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x87ba, gbc.sp());
        EXPECT(0x5a6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0213
        gbc.setState(0x7af7, 0x5946, 0x560, 0xf400, 0x6c79, 0xe482, 0x0, 0x1);
        gbc.writeMem(0x7af7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x5946, gbc.sp());
        EXPECT(0x7af9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0214
        gbc.setState(0x5f2f, 0xb6, 0xbda0, 0xec0f, 0x7674, 0x2cb3, 0x0, 0x0);
        gbc.writeMem(0x5f2f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xb6, gbc.sp());
        EXPECT(0x5f31, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0215
        gbc.setState(0x73aa, 0xbb8a, 0x2230, 0xdca8, 0x5bae, 0x959a, 0x0, 0x0);
        gbc.writeMem(0x73aa, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xbb8a, gbc.sp());
        EXPECT(0x73ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0216
        gbc.setState(0x3f24, 0x8bf7, 0xc310, 0xcb55, 0x5efe, 0x1126, 0x1, 0x1);
        gbc.writeMem(0x3f24, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x8bf7, gbc.sp());
        EXPECT(0x3f26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0217
        gbc.setState(0x55b2, 0x9d34, 0x2660, 0xea0b, 0xf5f, 0xd791, 0x1, 0x0);
        gbc.writeMem(0x55b2, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x9d34, gbc.sp());
        EXPECT(0x55b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0219
        gbc.setState(0x4cdb, 0x55af, 0xda90, 0xf791, 0xec79, 0xd340, 0x1, 0x1);
        gbc.writeMem(0x4cdb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x55af, gbc.sp());
        EXPECT(0x4cdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 021A
        gbc.setState(0xed4d, 0x46f7, 0xa560, 0xc86e, 0xe9d9, 0xbc17, 0x0, 0x0);
        gbc.writeMem(0xed4d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x46f7, gbc.sp());
        EXPECT(0xed4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed4d));
        EXPECT(0xaf, gbc.readMem(0xed4e));
        // CB AF 021B
        gbc.setState(0x28ac, 0x4298, 0xe760, 0x6a5b, 0x28a9, 0xff41, 0x1, 0x1);
        gbc.writeMem(0x28ac, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x4298, gbc.sp());
        EXPECT(0x28ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 021C
        gbc.setState(0x9478, 0x2db5, 0x7620, 0xede7, 0x45d7, 0xf70d, 0x0, 0x0);
        gbc.writeMem(0x9478, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x2db5, gbc.sp());
        EXPECT(0x947a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9478));
        EXPECT(0xaf, gbc.readMem(0x9479));
        // CB AF 021E
        gbc.setState(0xefd1, 0x595d, 0x40e0, 0xbcb3, 0x176b, 0xd1fd, 0x1, 0x1);
        gbc.writeMem(0xefd1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x595d, gbc.sp());
        EXPECT(0xefd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefd1));
        EXPECT(0xaf, gbc.readMem(0xefd2));
        // CB AF 021F
        gbc.setState(0x37c6, 0x7b8c, 0xc3e0, 0x71d6, 0x5873, 0x1cc0, 0x1, 0x1);
        gbc.writeMem(0x37c6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x7b8c, gbc.sp());
        EXPECT(0x37c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0220
        gbc.setState(0x7dbe, 0x5635, 0x33b0, 0x75e9, 0xac4a, 0x2bb2, 0x0, 0x1);
        gbc.writeMem(0x7dbe, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x5635, gbc.sp());
        EXPECT(0x7dc0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0221
        gbc.setState(0x9bb0, 0xe2a2, 0xedf0, 0x868c, 0x755e, 0x4cf2, 0x1, 0x1);
        gbc.writeMem(0x9bb0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xe2a2, gbc.sp());
        EXPECT(0x9bb2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bb0));
        EXPECT(0xaf, gbc.readMem(0x9bb1));
        // CB AF 0222
        gbc.setState(0x95f1, 0x65d8, 0x32e0, 0x6184, 0xaf18, 0xe49a, 0x1, 0x0);
        gbc.writeMem(0x95f1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x65d8, gbc.sp());
        EXPECT(0x95f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95f1));
        EXPECT(0xaf, gbc.readMem(0x95f2));
        // CB AF 0223
        gbc.setState(0x3d50, 0x9dc3, 0xd490, 0xcdfb, 0x7174, 0x1ad6, 0x0, 0x1);
        gbc.writeMem(0x3d50, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x9dc3, gbc.sp());
        EXPECT(0x3d52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0224
        gbc.setState(0x3227, 0x7b87, 0xb210, 0x9a8b, 0x77be, 0xaa67, 0x0, 0x1);
        gbc.writeMem(0x3227, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x7b87, gbc.sp());
        EXPECT(0x3229, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0225
        gbc.setState(0xeef1, 0xef6a, 0x5dc0, 0xd8b1, 0xb06c, 0xe2f2, 0x0, 0x1);
        gbc.writeMem(0xeef1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xef6a, gbc.sp());
        EXPECT(0xeef3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeef1));
        EXPECT(0xaf, gbc.readMem(0xeef2));
        // CB AF 0226
        gbc.setState(0x137c, 0xd257, 0x4630, 0xfcbe, 0xeb5a, 0x310e, 0x1, 0x1);
        gbc.writeMem(0x137c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xd257, gbc.sp());
        EXPECT(0x137e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0227
        gbc.setState(0x1e65, 0xf3aa, 0x7e0, 0x2ed3, 0x3a85, 0xc708, 0x0, 0x1);
        gbc.writeMem(0x1e65, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xf3aa, gbc.sp());
        EXPECT(0x1e67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0228
        gbc.setState(0x483c, 0xe3ba, 0x82a0, 0x793e, 0x583d, 0x12a9, 0x0, 0x1);
        gbc.writeMem(0x483c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xe3ba, gbc.sp());
        EXPECT(0x483e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0229
        gbc.setState(0x96a0, 0xf717, 0x9a50, 0x9000, 0x1de, 0x9d27, 0x1, 0x0);
        gbc.writeMem(0x96a0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xf717, gbc.sp());
        EXPECT(0x96a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96a0));
        EXPECT(0xaf, gbc.readMem(0x96a1));
        // CB AF 022A
        gbc.setState(0x60bb, 0xbb40, 0xbc20, 0xcdd9, 0xd5f8, 0x2c8c, 0x0, 0x1);
        gbc.writeMem(0x60bb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xbb40, gbc.sp());
        EXPECT(0x60bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 022B
        gbc.setState(0x4fea, 0x70bf, 0x7cf0, 0x4845, 0x1c53, 0x7c37, 0x0, 0x1);
        gbc.writeMem(0x4fea, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x70bf, gbc.sp());
        EXPECT(0x4fec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 022C
        gbc.setState(0xba33, 0xa78d, 0xb140, 0x54a8, 0xec7d, 0x6d59, 0x0, 0x1);
        gbc.writeMem(0xba33, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xa78d, gbc.sp());
        EXPECT(0xba35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba33));
        EXPECT(0xaf, gbc.readMem(0xba34));
        // CB AF 022D
        gbc.setState(0x25c5, 0x1098, 0x6470, 0xb23d, 0x3cc7, 0xce36, 0x0, 0x0);
        gbc.writeMem(0x25c5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x1098, gbc.sp());
        EXPECT(0x25c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 022E
        gbc.setState(0x1125, 0x6dee, 0x49f0, 0xa1dd, 0x24f6, 0xa2a1, 0x1, 0x0);
        gbc.writeMem(0x1125, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x6dee, gbc.sp());
        EXPECT(0x1127, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 022F
        gbc.setState(0x3f8e, 0x3f73, 0xf3c0, 0x97aa, 0x2055, 0xd0a, 0x0, 0x1);
        gbc.writeMem(0x3f8e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x3f73, gbc.sp());
        EXPECT(0x3f90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0230
        gbc.setState(0xad10, 0x4045, 0x6420, 0xe3bb, 0xb961, 0xb79d, 0x0, 0x1);
        gbc.writeMem(0xad10, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x4045, gbc.sp());
        EXPECT(0xad12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad10));
        EXPECT(0xaf, gbc.readMem(0xad11));
        // CB AF 0232
        gbc.setState(0x2e28, 0x207e, 0xcb00, 0xde58, 0x3661, 0xa4fb, 0x1, 0x0);
        gbc.writeMem(0x2e28, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x207e, gbc.sp());
        EXPECT(0x2e2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0233
        gbc.setState(0xa9e, 0x8224, 0xb0e0, 0x6fd2, 0x719, 0x44da, 0x0, 0x1);
        gbc.writeMem(0xa9e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x8224, gbc.sp());
        EXPECT(0xaa0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0234
        gbc.setState(0x90d0, 0xa5dc, 0x9620, 0xf171, 0x58c4, 0x7508, 0x0, 0x0);
        gbc.writeMem(0x90d0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xa5dc, gbc.sp());
        EXPECT(0x90d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90d0));
        EXPECT(0xaf, gbc.readMem(0x90d1));
        // CB AF 0236
        gbc.setState(0x95c7, 0x62bc, 0x650, 0x59c6, 0x5640, 0x9edf, 0x0, 0x1);
        gbc.writeMem(0x95c7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x62bc, gbc.sp());
        EXPECT(0x95c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95c7));
        EXPECT(0xaf, gbc.readMem(0x95c8));
        // CB AF 0237
        gbc.setState(0xd80b, 0x4302, 0x2960, 0x94ad, 0x569b, 0xac6f, 0x1, 0x1);
        gbc.writeMem(0xd80b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x4302, gbc.sp());
        EXPECT(0xd80d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd80b));
        EXPECT(0xaf, gbc.readMem(0xd80c));
        // CB AF 0238
        gbc.setState(0xac7a, 0xa6be, 0xa0d0, 0xcbd0, 0x7b85, 0x9e11, 0x0, 0x0);
        gbc.writeMem(0xac7a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xa6be, gbc.sp());
        EXPECT(0xac7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac7a));
        EXPECT(0xaf, gbc.readMem(0xac7b));
        // CB AF 0239
        gbc.setState(0x8a5b, 0xb873, 0x510, 0x75aa, 0xf10a, 0xaec6, 0x0, 0x0);
        gbc.writeMem(0x8a5b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xb873, gbc.sp());
        EXPECT(0x8a5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a5b));
        EXPECT(0xaf, gbc.readMem(0x8a5c));
        // CB AF 023A
        gbc.setState(0xb9d4, 0x35f, 0xeac0, 0x3437, 0x1bd8, 0x7648, 0x1, 0x0);
        gbc.writeMem(0xb9d4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x35f, gbc.sp());
        EXPECT(0xb9d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9d4));
        EXPECT(0xaf, gbc.readMem(0xb9d5));
        // CB AF 023B
        gbc.setState(0xbfc, 0x933, 0x3540, 0x4ae5, 0xebc2, 0xbb64, 0x0, 0x0);
        gbc.writeMem(0xbfc, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x933, gbc.sp());
        EXPECT(0xbfe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 023C
        gbc.setState(0xe08, 0x323a, 0x7720, 0x19cb, 0x2034, 0x79b1, 0x0, 0x0);
        gbc.writeMem(0xe08, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x323a, gbc.sp());
        EXPECT(0xe0a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 023E
        gbc.setState(0xa1f8, 0xeefe, 0x4db0, 0x1e64, 0xb5de, 0xa7a7, 0x0, 0x0);
        gbc.writeMem(0xa1f8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xeefe, gbc.sp());
        EXPECT(0xa1fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1f8));
        EXPECT(0xaf, gbc.readMem(0xa1f9));
        // CB AF 023F
        gbc.setState(0x6d98, 0x2ca9, 0x5220, 0x3ae0, 0x2a05, 0x6571, 0x0, 0x0);
        gbc.writeMem(0x6d98, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x2ca9, gbc.sp());
        EXPECT(0x6d9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0240
        gbc.setState(0xaee6, 0x1764, 0xb0f0, 0x5022, 0x5e3, 0x6fe1, 0x1, 0x1);
        gbc.writeMem(0xaee6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x1764, gbc.sp());
        EXPECT(0xaee8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaee6));
        EXPECT(0xaf, gbc.readMem(0xaee7));
        // CB AF 0241
        gbc.setState(0x10c9, 0xe63c, 0xa5f0, 0xf968, 0xc9c0, 0x504b, 0x0, 0x0);
        gbc.writeMem(0x10c9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xe63c, gbc.sp());
        EXPECT(0x10cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0243
        gbc.setState(0x2d04, 0xea5b, 0x2740, 0x1092, 0xc839, 0x184a, 0x0, 0x0);
        gbc.writeMem(0x2d04, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xea5b, gbc.sp());
        EXPECT(0x2d06, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0245
        gbc.setState(0x7c83, 0xa922, 0x2c40, 0x4b27, 0xe3e2, 0xff04, 0x0, 0x0);
        gbc.writeMem(0x7c83, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xa922, gbc.sp());
        EXPECT(0x7c85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0246
        gbc.setState(0x66b1, 0x1510, 0x9ef0, 0x6d8d, 0xb121, 0xd516, 0x1, 0x0);
        gbc.writeMem(0x66b1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x1510, gbc.sp());
        EXPECT(0x66b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0247
        gbc.setState(0x5259, 0x51ff, 0xb8e0, 0x8df3, 0xd3e9, 0xdb7b, 0x0, 0x0);
        gbc.writeMem(0x5259, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x51ff, gbc.sp());
        EXPECT(0x525b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0248
        gbc.setState(0x98fb, 0x988a, 0x5c70, 0x6eb3, 0x8e1b, 0xa84a, 0x1, 0x0);
        gbc.writeMem(0x98fb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x988a, gbc.sp());
        EXPECT(0x98fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98fb));
        EXPECT(0xaf, gbc.readMem(0x98fc));
        // CB AF 0249
        gbc.setState(0x3982, 0x3f4b, 0xd0c0, 0x48af, 0xa05a, 0x434, 0x0, 0x0);
        gbc.writeMem(0x3982, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x3f4b, gbc.sp());
        EXPECT(0x3984, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 024A
        gbc.setState(0x20d3, 0xb72e, 0xdbb0, 0xc475, 0xfc54, 0xef34, 0x0, 0x0);
        gbc.writeMem(0x20d3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xb72e, gbc.sp());
        EXPECT(0x20d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 024B
        gbc.setState(0xa398, 0xad7b, 0x310, 0x9ad9, 0x6eeb, 0xf05, 0x0, 0x0);
        gbc.writeMem(0xa398, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xad7b, gbc.sp());
        EXPECT(0xa39a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa398));
        EXPECT(0xaf, gbc.readMem(0xa399));
        // CB AF 024C
        gbc.setState(0x5592, 0x2a93, 0xc390, 0x78ac, 0x3604, 0x1a77, 0x0, 0x1);
        gbc.writeMem(0x5592, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x2a93, gbc.sp());
        EXPECT(0x5594, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 024D
        gbc.setState(0x2a93, 0x9c9, 0xd10, 0x10a3, 0xb786, 0x518b, 0x0, 0x1);
        gbc.writeMem(0x2a93, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x9c9, gbc.sp());
        EXPECT(0x2a95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 024E
        gbc.setState(0x9025, 0x2944, 0xb340, 0x268a, 0xf10b, 0x2031, 0x1, 0x0);
        gbc.writeMem(0x9025, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x2944, gbc.sp());
        EXPECT(0x9027, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9025));
        EXPECT(0xaf, gbc.readMem(0x9026));
        // CB AF 024F
        gbc.setState(0x1262, 0x36ee, 0xb900, 0xb081, 0x750, 0x3dbf, 0x0, 0x1);
        gbc.writeMem(0x1262, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x36ee, gbc.sp());
        EXPECT(0x1264, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0251
        gbc.setState(0xa9b8, 0x3969, 0x16a0, 0x873e, 0x349, 0x130, 0x1, 0x0);
        gbc.writeMem(0xa9b8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x3969, gbc.sp());
        EXPECT(0xa9ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9b8));
        EXPECT(0xaf, gbc.readMem(0xa9b9));
        // CB AF 0252
        gbc.setState(0x21ec, 0x9a8e, 0xa980, 0x2608, 0x9618, 0xdcdf, 0x1, 0x1);
        gbc.writeMem(0x21ec, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x9a8e, gbc.sp());
        EXPECT(0x21ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0253
        gbc.setState(0x407, 0x7cd8, 0x5a50, 0xb95e, 0xa5ff, 0x84ac, 0x0, 0x0);
        gbc.writeMem(0x407, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x7cd8, gbc.sp());
        EXPECT(0x409, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0254
        gbc.setState(0xd3ed, 0x9a59, 0xa310, 0x4eaa, 0xedf9, 0xc064, 0x0, 0x0);
        gbc.writeMem(0xd3ed, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x9a59, gbc.sp());
        EXPECT(0xd3ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3ed));
        EXPECT(0xaf, gbc.readMem(0xd3ee));
        // CB AF 0255
        gbc.setState(0x760c, 0x39cc, 0x1b00, 0x4ef8, 0x7b33, 0x8343, 0x1, 0x0);
        gbc.writeMem(0x760c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x39cc, gbc.sp());
        EXPECT(0x760e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0256
        gbc.setState(0x5f0a, 0x305b, 0xf530, 0xab54, 0xceec, 0x5f3c, 0x0, 0x1);
        gbc.writeMem(0x5f0a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x305b, gbc.sp());
        EXPECT(0x5f0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0257
        gbc.setState(0x195a, 0x9cd5, 0x3e80, 0x225, 0xd08f, 0x502a, 0x0, 0x1);
        gbc.writeMem(0x195a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x9cd5, gbc.sp());
        EXPECT(0x195c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0258
        gbc.setState(0xa7f4, 0xa129, 0xee0, 0x5b79, 0x7f46, 0x1aa8, 0x1, 0x1);
        gbc.writeMem(0xa7f4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xa129, gbc.sp());
        EXPECT(0xa7f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7f4));
        EXPECT(0xaf, gbc.readMem(0xa7f5));
        // CB AF 0259
        gbc.setState(0xcbbb, 0x4b46, 0xe420, 0x2058, 0x749a, 0x500, 0x0, 0x1);
        gbc.writeMem(0xcbbb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x4b46, gbc.sp());
        EXPECT(0xcbbd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbbb));
        EXPECT(0xaf, gbc.readMem(0xcbbc));
        // CB AF 025A
        gbc.setState(0xfd3, 0x6f72, 0xdbe0, 0xa8d5, 0x4e96, 0xe881, 0x0, 0x1);
        gbc.writeMem(0xfd3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x6f72, gbc.sp());
        EXPECT(0xfd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 025B
        gbc.setState(0xca19, 0x5e6e, 0xcca0, 0xe045, 0x189, 0xd16b, 0x1, 0x0);
        gbc.writeMem(0xca19, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x5e6e, gbc.sp());
        EXPECT(0xca1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca19));
        EXPECT(0xaf, gbc.readMem(0xca1a));
        // CB AF 025C
        gbc.setState(0x121b, 0x892e, 0x32a0, 0x8695, 0x922c, 0xcebd, 0x1, 0x1);
        gbc.writeMem(0x121b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x892e, gbc.sp());
        EXPECT(0x121d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 025D
        gbc.setState(0x308c, 0xbe2e, 0x9fc0, 0x9bae, 0x56ad, 0xad5d, 0x1, 0x0);
        gbc.writeMem(0x308c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xbe2e, gbc.sp());
        EXPECT(0x308e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 025E
        gbc.setState(0xdb86, 0xc223, 0x8410, 0x5b2b, 0x10bd, 0x13bd, 0x0, 0x1);
        gbc.writeMem(0xdb86, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xc223, gbc.sp());
        EXPECT(0xdb88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb86));
        EXPECT(0xaf, gbc.readMem(0xdb87));
        // CB AF 025F
        gbc.setState(0x8cc1, 0x83a9, 0x7e60, 0xc148, 0xd7b8, 0x7f1, 0x0, 0x0);
        gbc.writeMem(0x8cc1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x83a9, gbc.sp());
        EXPECT(0x8cc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cc1));
        EXPECT(0xaf, gbc.readMem(0x8cc2));
        // CB AF 0260
        gbc.setState(0x641a, 0xc756, 0xa0d0, 0x38c3, 0x6c91, 0x793b, 0x0, 0x1);
        gbc.writeMem(0x641a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xc756, gbc.sp());
        EXPECT(0x641c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0261
        gbc.setState(0xe88d, 0x2f7a, 0x6900, 0x2aac, 0xb5e4, 0x9895, 0x1, 0x0);
        gbc.writeMem(0xe88d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x2f7a, gbc.sp());
        EXPECT(0xe88f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe88d));
        EXPECT(0xaf, gbc.readMem(0xe88e));
        // CB AF 0262
        gbc.setState(0xb605, 0x7b7b, 0x7c10, 0xaac4, 0x140e, 0x2c22, 0x0, 0x0);
        gbc.writeMem(0xb605, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x7b7b, gbc.sp());
        EXPECT(0xb607, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb605));
        EXPECT(0xaf, gbc.readMem(0xb606));
        // CB AF 0263
        gbc.setState(0x45d0, 0x18c2, 0x4ae0, 0xaa7f, 0x3077, 0x59ba, 0x0, 0x1);
        gbc.writeMem(0x45d0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x18c2, gbc.sp());
        EXPECT(0x45d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0264
        gbc.setState(0x9095, 0xc85c, 0x61d0, 0xa664, 0xf41e, 0x9794, 0x1, 0x0);
        gbc.writeMem(0x9095, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xc85c, gbc.sp());
        EXPECT(0x9097, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9095));
        EXPECT(0xaf, gbc.readMem(0x9096));
        // CB AF 0265
        gbc.setState(0xab02, 0x42ea, 0x3a90, 0xa472, 0xb63e, 0xca8e, 0x1, 0x1);
        gbc.writeMem(0xab02, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x42ea, gbc.sp());
        EXPECT(0xab04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab02));
        EXPECT(0xaf, gbc.readMem(0xab03));
        // CB AF 0266
        gbc.setState(0x53ce, 0x7ac, 0xa050, 0x5c5f, 0x8ca6, 0x4a65, 0x1, 0x1);
        gbc.writeMem(0x53ce, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x7ac, gbc.sp());
        EXPECT(0x53d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0267
        gbc.setState(0x4c24, 0x6654, 0x2400, 0xa542, 0xafcc, 0xf0df, 0x0, 0x0);
        gbc.writeMem(0x4c24, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x6654, gbc.sp());
        EXPECT(0x4c26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0268
        gbc.setState(0x9f1e, 0x77f, 0x7eb0, 0xe290, 0x9d33, 0x5a79, 0x0, 0x1);
        gbc.writeMem(0x9f1e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x77f, gbc.sp());
        EXPECT(0x9f20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f1e));
        EXPECT(0xaf, gbc.readMem(0x9f1f));
        // CB AF 0269
        gbc.setState(0x45f4, 0x5d0a, 0x50, 0xa567, 0x38b, 0x5c4, 0x1, 0x1);
        gbc.writeMem(0x45f4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x5d0a, gbc.sp());
        EXPECT(0x45f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 026A
        gbc.setState(0x985f, 0xbe88, 0x7360, 0x59fc, 0xc1b6, 0x6256, 0x1, 0x0);
        gbc.writeMem(0x985f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xbe88, gbc.sp());
        EXPECT(0x9861, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x985f));
        EXPECT(0xaf, gbc.readMem(0x9860));
        // CB AF 026B
        gbc.setState(0xcb5a, 0xd982, 0x7b40, 0x3c03, 0xffe6, 0x6fed, 0x0, 0x0);
        gbc.writeMem(0xcb5a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xd982, gbc.sp());
        EXPECT(0xcb5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb5a));
        EXPECT(0xaf, gbc.readMem(0xcb5b));
        // CB AF 026D
        gbc.setState(0x918b, 0xf1cb, 0x2b0, 0x78ba, 0xab3f, 0xc8e1, 0x0, 0x0);
        gbc.writeMem(0x918b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xf1cb, gbc.sp());
        EXPECT(0x918d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x918b));
        EXPECT(0xaf, gbc.readMem(0x918c));
        // CB AF 026E
        gbc.setState(0x4335, 0xa390, 0x15f0, 0x66db, 0x9737, 0x66bc, 0x0, 0x1);
        gbc.writeMem(0x4335, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xa390, gbc.sp());
        EXPECT(0x4337, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 026F
        gbc.setState(0xdceb, 0xc74d, 0x8490, 0x2a9e, 0x5932, 0x2ff8, 0x1, 0x1);
        gbc.writeMem(0xdceb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xc74d, gbc.sp());
        EXPECT(0xdced, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdceb));
        EXPECT(0xaf, gbc.readMem(0xdcec));
        // CB AF 0270
        gbc.setState(0xd494, 0x2b13, 0x1860, 0x8a22, 0x1408, 0x929a, 0x1, 0x0);
        gbc.writeMem(0xd494, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x2b13, gbc.sp());
        EXPECT(0xd496, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd494));
        EXPECT(0xaf, gbc.readMem(0xd495));
        // CB AF 0271
        gbc.setState(0xe10e, 0xceee, 0xd6d0, 0x37e7, 0x1ec4, 0x42cd, 0x1, 0x0);
        gbc.writeMem(0xe10e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xceee, gbc.sp());
        EXPECT(0xe110, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe10e));
        EXPECT(0xaf, gbc.readMem(0xe10f));
        // CB AF 0272
        gbc.setState(0xbfc1, 0x8df7, 0x4160, 0xd092, 0xb2ef, 0xe586, 0x1, 0x1);
        gbc.writeMem(0xbfc1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x8df7, gbc.sp());
        EXPECT(0xbfc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfc1));
        EXPECT(0xaf, gbc.readMem(0xbfc2));
        // CB AF 0273
        gbc.setState(0x82a1, 0x2cfc, 0x4c10, 0x1b0d, 0x50ff, 0xbbd1, 0x0, 0x0);
        gbc.writeMem(0x82a1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x2cfc, gbc.sp());
        EXPECT(0x82a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82a1));
        EXPECT(0xaf, gbc.readMem(0x82a2));
        // CB AF 0274
        gbc.setState(0xd292, 0x686b, 0x3bd0, 0xd0a4, 0xbb90, 0x2e3d, 0x1, 0x0);
        gbc.writeMem(0xd292, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x686b, gbc.sp());
        EXPECT(0xd294, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd292));
        EXPECT(0xaf, gbc.readMem(0xd293));
        // CB AF 0275
        gbc.setState(0x14e1, 0xb039, 0x1d00, 0x4d6, 0x4c52, 0x22d4, 0x0, 0x0);
        gbc.writeMem(0x14e1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xb039, gbc.sp());
        EXPECT(0x14e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0276
        gbc.setState(0x4982, 0x9c5, 0xb2f0, 0x5d3e, 0xcabe, 0xf6ca, 0x1, 0x1);
        gbc.writeMem(0x4982, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x9c5, gbc.sp());
        EXPECT(0x4984, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0277
        gbc.setState(0x4487, 0xe664, 0x2b80, 0xdf1, 0x38b5, 0x3b60, 0x0, 0x1);
        gbc.writeMem(0x4487, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xe664, gbc.sp());
        EXPECT(0x4489, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0278
        gbc.setState(0x50a3, 0xc24, 0x22a0, 0xca86, 0x360f, 0xd657, 0x0, 0x0);
        gbc.writeMem(0x50a3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xc24, gbc.sp());
        EXPECT(0x50a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0279
        gbc.setState(0x4e6e, 0x18a7, 0xa6f0, 0x66fe, 0xf4a0, 0x9ada, 0x0, 0x0);
        gbc.writeMem(0x4e6e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x18a7, gbc.sp());
        EXPECT(0x4e70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 027A
        gbc.setState(0x4151, 0x361f, 0xf090, 0xfbcc, 0x16b7, 0x20bf, 0x1, 0x1);
        gbc.writeMem(0x4151, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x361f, gbc.sp());
        EXPECT(0x4153, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 027B
        gbc.setState(0xc680, 0x5dfc, 0xe4a0, 0x6252, 0xe367, 0x5497, 0x0, 0x0);
        gbc.writeMem(0xc680, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x5dfc, gbc.sp());
        EXPECT(0xc682, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc680));
        EXPECT(0xaf, gbc.readMem(0xc681));
        // CB AF 027C
        gbc.setState(0xadd7, 0x9dc8, 0x1320, 0xc1dd, 0x47ab, 0x9dd2, 0x0, 0x0);
        gbc.writeMem(0xadd7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x9dc8, gbc.sp());
        EXPECT(0xadd9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadd7));
        EXPECT(0xaf, gbc.readMem(0xadd8));
        // CB AF 027D
        gbc.setState(0x63c9, 0x5a20, 0x52f0, 0x40ac, 0xd0e0, 0xa368, 0x0, 0x0);
        gbc.writeMem(0x63c9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x5a20, gbc.sp());
        EXPECT(0x63cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 027E
        gbc.setState(0x5760, 0x3c2a, 0x7f80, 0x5105, 0x9720, 0x1151, 0x1, 0x1);
        gbc.writeMem(0x5760, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x3c2a, gbc.sp());
        EXPECT(0x5762, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 027F
        gbc.setState(0x6116, 0x59fb, 0xcf10, 0xec1, 0xa3a1, 0xce1, 0x1, 0x1);
        gbc.writeMem(0x6116, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x59fb, gbc.sp());
        EXPECT(0x6118, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0280
        gbc.setState(0x884e, 0x611f, 0x6a80, 0x27fd, 0x934, 0x9b3d, 0x1, 0x1);
        gbc.writeMem(0x884e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x611f, gbc.sp());
        EXPECT(0x8850, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x884e));
        EXPECT(0xaf, gbc.readMem(0x884f));
        // CB AF 0281
        gbc.setState(0xcfc7, 0xe5bb, 0x8f80, 0x5bc8, 0x8fd5, 0x93d3, 0x1, 0x0);
        gbc.writeMem(0xcfc7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xe5bb, gbc.sp());
        EXPECT(0xcfc9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfc7));
        EXPECT(0xaf, gbc.readMem(0xcfc8));
        // CB AF 0282
        gbc.setState(0xa1b6, 0x48ae, 0xa150, 0x7fd7, 0x10f6, 0x5aa9, 0x0, 0x1);
        gbc.writeMem(0xa1b6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x48ae, gbc.sp());
        EXPECT(0xa1b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1b6));
        EXPECT(0xaf, gbc.readMem(0xa1b7));
        // CB AF 0283
        gbc.setState(0xc633, 0x4b96, 0xd6d0, 0xf8d6, 0xe66f, 0x435f, 0x1, 0x0);
        gbc.writeMem(0xc633, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x4b96, gbc.sp());
        EXPECT(0xc635, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc633));
        EXPECT(0xaf, gbc.readMem(0xc634));
        // CB AF 0284
        gbc.setState(0xb2b4, 0x8b85, 0xed70, 0x6428, 0x7d91, 0x136d, 0x1, 0x1);
        gbc.writeMem(0xb2b4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x8b85, gbc.sp());
        EXPECT(0xb2b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2b4));
        EXPECT(0xaf, gbc.readMem(0xb2b5));
        // CB AF 0285
        gbc.setState(0x466c, 0x1055, 0x600, 0xec72, 0xa29e, 0xadeb, 0x0, 0x1);
        gbc.writeMem(0x466c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x1055, gbc.sp());
        EXPECT(0x466e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0286
        gbc.setState(0xc629, 0x9cd4, 0x100, 0xd496, 0x43c2, 0x21a5, 0x1, 0x0);
        gbc.writeMem(0xc629, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x9cd4, gbc.sp());
        EXPECT(0xc62b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc629));
        EXPECT(0xaf, gbc.readMem(0xc62a));
        // CB AF 0287
        gbc.setState(0x13a0, 0xdae4, 0x6e0, 0xa6c9, 0x8667, 0xbcf5, 0x0, 0x0);
        gbc.writeMem(0x13a0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xdae4, gbc.sp());
        EXPECT(0x13a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0288
        gbc.setState(0xd402, 0x98e9, 0x4000, 0xfd6, 0x404a, 0xc991, 0x0, 0x0);
        gbc.writeMem(0xd402, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x98e9, gbc.sp());
        EXPECT(0xd404, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd402));
        EXPECT(0xaf, gbc.readMem(0xd403));
        // CB AF 0289
        gbc.setState(0x8e74, 0x7d48, 0xb0b0, 0xe8d, 0xd6dd, 0xfbc8, 0x0, 0x0);
        gbc.writeMem(0x8e74, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x7d48, gbc.sp());
        EXPECT(0x8e76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e74));
        EXPECT(0xaf, gbc.readMem(0x8e75));
        // CB AF 028A
        gbc.setState(0x43ea, 0x344e, 0xfaf0, 0x7cda, 0x1fc6, 0x49ad, 0x0, 0x0);
        gbc.writeMem(0x43ea, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x344e, gbc.sp());
        EXPECT(0x43ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 028B
        gbc.setState(0xdfdf, 0xc36, 0xcf60, 0xde34, 0x6079, 0x10c4, 0x1, 0x0);
        gbc.writeMem(0xdfdf, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xc36, gbc.sp());
        EXPECT(0xdfe1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfdf));
        EXPECT(0xaf, gbc.readMem(0xdfe0));
        // CB AF 028C
        gbc.setState(0x64b1, 0x98c2, 0xf330, 0xf22a, 0xc702, 0x7332, 0x0, 0x1);
        gbc.writeMem(0x64b1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x98c2, gbc.sp());
        EXPECT(0x64b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 028D
        gbc.setState(0x25, 0x3e2, 0x3130, 0xb37d, 0x1b3, 0x3b05, 0x1, 0x0);
        gbc.writeMem(0x25, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x3e2, gbc.sp());
        EXPECT(0x27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 028E
        gbc.setState(0x8ad3, 0xe171, 0x6370, 0xe64a, 0xef24, 0x90b0, 0x1, 0x1);
        gbc.writeMem(0x8ad3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xe171, gbc.sp());
        EXPECT(0x8ad5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ad3));
        EXPECT(0xaf, gbc.readMem(0x8ad4));
        // CB AF 028F
        gbc.setState(0x9413, 0xa416, 0xc200, 0xf992, 0x829b, 0x8543, 0x1, 0x1);
        gbc.writeMem(0x9413, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xa416, gbc.sp());
        EXPECT(0x9415, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9413));
        EXPECT(0xaf, gbc.readMem(0x9414));
        // CB AF 0290
        gbc.setState(0x462f, 0xc9dc, 0xb0c0, 0x4beb, 0xdea2, 0xfce7, 0x0, 0x1);
        gbc.writeMem(0x462f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xc9dc, gbc.sp());
        EXPECT(0x4631, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0291
        gbc.setState(0xa40f, 0xe5c9, 0xdcd0, 0xb690, 0xd53a, 0xe9e7, 0x0, 0x1);
        gbc.writeMem(0xa40f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xe5c9, gbc.sp());
        EXPECT(0xa411, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa40f));
        EXPECT(0xaf, gbc.readMem(0xa410));
        // CB AF 0292
        gbc.setState(0xbf48, 0x8636, 0x2560, 0xbd69, 0x728b, 0x64c0, 0x1, 0x1);
        gbc.writeMem(0xbf48, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x8636, gbc.sp());
        EXPECT(0xbf4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf48));
        EXPECT(0xaf, gbc.readMem(0xbf49));
        // CB AF 0293
        gbc.setState(0xb384, 0x3fa9, 0xe390, 0x7f74, 0x159c, 0xaecf, 0x1, 0x0);
        gbc.writeMem(0xb384, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x3fa9, gbc.sp());
        EXPECT(0xb386, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb384));
        EXPECT(0xaf, gbc.readMem(0xb385));
        // CB AF 0294
        gbc.setState(0x772e, 0x9b43, 0xe520, 0x4f79, 0x803a, 0x44d1, 0x1, 0x1);
        gbc.writeMem(0x772e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x9b43, gbc.sp());
        EXPECT(0x7730, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0295
        gbc.setState(0x5857, 0x2736, 0xc550, 0x46b6, 0x8783, 0x74d6, 0x1, 0x0);
        gbc.writeMem(0x5857, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x2736, gbc.sp());
        EXPECT(0x5859, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0296
        gbc.setState(0xef4a, 0x76bc, 0x80c0, 0xcea5, 0xae8e, 0x195a, 0x1, 0x0);
        gbc.writeMem(0xef4a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x76bc, gbc.sp());
        EXPECT(0xef4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef4a));
        EXPECT(0xaf, gbc.readMem(0xef4b));
        // CB AF 0298
        gbc.setState(0x11fd, 0x9cfa, 0xaf50, 0x904d, 0x62e7, 0x1fde, 0x0, 0x0);
        gbc.writeMem(0x11fd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x9cfa, gbc.sp());
        EXPECT(0x11ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0299
        gbc.setState(0xb102, 0x7952, 0x3b0, 0xd3e6, 0xc4a8, 0x7409, 0x0, 0x0);
        gbc.writeMem(0xb102, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x7952, gbc.sp());
        EXPECT(0xb104, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb102));
        EXPECT(0xaf, gbc.readMem(0xb103));
        // CB AF 029A
        gbc.setState(0xd726, 0x9eaf, 0xb7d0, 0xf248, 0x963d, 0x181e, 0x0, 0x1);
        gbc.writeMem(0xd726, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x9eaf, gbc.sp());
        EXPECT(0xd728, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd726));
        EXPECT(0xaf, gbc.readMem(0xd727));
        // CB AF 029B
        gbc.setState(0xe4dd, 0xade2, 0xc4d0, 0xe701, 0x3c92, 0xe8ce, 0x1, 0x1);
        gbc.writeMem(0xe4dd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xade2, gbc.sp());
        EXPECT(0xe4df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4dd));
        EXPECT(0xaf, gbc.readMem(0xe4de));
        // CB AF 029C
        gbc.setState(0x8521, 0x73d7, 0x78e0, 0xf6ca, 0x696f, 0xdebb, 0x1, 0x0);
        gbc.writeMem(0x8521, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x73d7, gbc.sp());
        EXPECT(0x8523, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8521));
        EXPECT(0xaf, gbc.readMem(0x8522));
        // CB AF 029D
        gbc.setState(0x10a8, 0xf5f5, 0xd5a0, 0x22f6, 0xd0e4, 0x6dce, 0x0, 0x1);
        gbc.writeMem(0x10a8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xf5f5, gbc.sp());
        EXPECT(0x10aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 029E
        gbc.setState(0x9bfc, 0x40ec, 0x85f0, 0x5a0c, 0x4df3, 0x7e2c, 0x1, 0x0);
        gbc.writeMem(0x9bfc, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x40ec, gbc.sp());
        EXPECT(0x9bfe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bfc));
        EXPECT(0xaf, gbc.readMem(0x9bfd));
        // CB AF 029F
        gbc.setState(0x6954, 0xd284, 0xee60, 0x3a17, 0xfd35, 0x6ea2, 0x1, 0x0);
        gbc.writeMem(0x6954, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xd284, gbc.sp());
        EXPECT(0x6956, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02A0
        gbc.setState(0x7552, 0xb61f, 0x6220, 0x4148, 0xc4e9, 0x61c1, 0x1, 0x0);
        gbc.writeMem(0x7552, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xb61f, gbc.sp());
        EXPECT(0x7554, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02A1
        gbc.setState(0x8188, 0x10c3, 0x15c0, 0x148f, 0xd480, 0xcde9, 0x0, 0x0);
        gbc.writeMem(0x8188, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x10c3, gbc.sp());
        EXPECT(0x818a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8188));
        EXPECT(0xaf, gbc.readMem(0x8189));
        // CB AF 02A2
        gbc.setState(0x5, 0x2159, 0x2ee0, 0x18bb, 0x3db, 0xdfd4, 0x0, 0x0);
        gbc.writeMem(0x5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x2159, gbc.sp());
        EXPECT(0x7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02A3
        gbc.setState(0x80db, 0x903a, 0x5670, 0x6353, 0x18ef, 0xaf68, 0x1, 0x1);
        gbc.writeMem(0x80db, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x903a, gbc.sp());
        EXPECT(0x80dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80db));
        EXPECT(0xaf, gbc.readMem(0x80dc));
        // CB AF 02A4
        gbc.setState(0xbcb8, 0xf63b, 0x1e60, 0xe472, 0xf21e, 0x163a, 0x1, 0x1);
        gbc.writeMem(0xbcb8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xf63b, gbc.sp());
        EXPECT(0xbcba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcb8));
        EXPECT(0xaf, gbc.readMem(0xbcb9));
        // CB AF 02A5
        gbc.setState(0xa437, 0x2c38, 0x7670, 0xf77c, 0x102d, 0x275e, 0x1, 0x1);
        gbc.writeMem(0xa437, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x2c38, gbc.sp());
        EXPECT(0xa439, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa437));
        EXPECT(0xaf, gbc.readMem(0xa438));
        // CB AF 02A6
        gbc.setState(0x1acb, 0x9308, 0xe6c0, 0x3ae, 0x78d1, 0x7453, 0x0, 0x1);
        gbc.writeMem(0x1acb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x9308, gbc.sp());
        EXPECT(0x1acd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02A7
        gbc.setState(0x5bb, 0x7747, 0x20e0, 0xdace, 0x42d7, 0x8287, 0x1, 0x1);
        gbc.writeMem(0x5bb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x7747, gbc.sp());
        EXPECT(0x5bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02A8
        gbc.setState(0x3ced, 0xff77, 0xdf00, 0x752d, 0x4a96, 0x2e48, 0x1, 0x0);
        gbc.writeMem(0x3ced, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xff77, gbc.sp());
        EXPECT(0x3cef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02A9
        gbc.setState(0x3d3d, 0xe061, 0x2d0, 0x45b0, 0xcde1, 0x6166, 0x0, 0x0);
        gbc.writeMem(0x3d3d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xe061, gbc.sp());
        EXPECT(0x3d3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02AA
        gbc.setState(0x713d, 0x6804, 0xaf50, 0x6e65, 0x1e87, 0x684d, 0x0, 0x0);
        gbc.writeMem(0x713d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x6804, gbc.sp());
        EXPECT(0x713f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02AB
        gbc.setState(0xe795, 0xed76, 0x4040, 0xd22f, 0x5b9f, 0xd231, 0x1, 0x0);
        gbc.writeMem(0xe795, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xed76, gbc.sp());
        EXPECT(0xe797, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe795));
        EXPECT(0xaf, gbc.readMem(0xe796));
        // CB AF 02AC
        gbc.setState(0x55ee, 0x6998, 0x5350, 0x8ab4, 0x45a8, 0xeb46, 0x1, 0x0);
        gbc.writeMem(0x55ee, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x6998, gbc.sp());
        EXPECT(0x55f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02AD
        gbc.setState(0xba5d, 0x8656, 0x5d80, 0xdedc, 0xdca3, 0x7974, 0x0, 0x0);
        gbc.writeMem(0xba5d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x8656, gbc.sp());
        EXPECT(0xba5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba5d));
        EXPECT(0xaf, gbc.readMem(0xba5e));
        // CB AF 02AF
        gbc.setState(0xe652, 0xc958, 0x3ad0, 0x90e3, 0x4696, 0x55d2, 0x1, 0x0);
        gbc.writeMem(0xe652, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xc958, gbc.sp());
        EXPECT(0xe654, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe652));
        EXPECT(0xaf, gbc.readMem(0xe653));
        // CB AF 02B0
        gbc.setState(0x9af, 0x1e2, 0x15e0, 0xc699, 0x45b, 0x4cb4, 0x0, 0x1);
        gbc.writeMem(0x9af, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x1e2, gbc.sp());
        EXPECT(0x9b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02B1
        gbc.setState(0x3ff2, 0x47e0, 0xe470, 0x6888, 0xbd7, 0x4004, 0x1, 0x0);
        gbc.writeMem(0x3ff2, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x47e0, gbc.sp());
        EXPECT(0x3ff4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02B2
        gbc.setState(0x18c, 0xbaab, 0xb940, 0xfe7a, 0x3f5, 0x497b, 0x0, 0x1);
        gbc.writeMem(0x18c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xbaab, gbc.sp());
        EXPECT(0x18e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02B3
        gbc.setState(0x93b7, 0x7a10, 0x66c0, 0xf40a, 0x4e1d, 0x262d, 0x0, 0x0);
        gbc.writeMem(0x93b7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x7a10, gbc.sp());
        EXPECT(0x93b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93b7));
        EXPECT(0xaf, gbc.readMem(0x93b8));
        // CB AF 02B4
        gbc.setState(0x995c, 0xa1c5, 0x7e60, 0xa3c1, 0x5058, 0x6ad5, 0x0, 0x0);
        gbc.writeMem(0x995c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xa1c5, gbc.sp());
        EXPECT(0x995e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x995c));
        EXPECT(0xaf, gbc.readMem(0x995d));
        // CB AF 02B5
        gbc.setState(0x94ca, 0x780a, 0xaba0, 0xacb0, 0x8612, 0x52fb, 0x0, 0x1);
        gbc.writeMem(0x94ca, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x780a, gbc.sp());
        EXPECT(0x94cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94ca));
        EXPECT(0xaf, gbc.readMem(0x94cb));
        // CB AF 02B6
        gbc.setState(0xa0ef, 0x2108, 0xdf0, 0x210a, 0x9f21, 0x9e28, 0x0, 0x0);
        gbc.writeMem(0xa0ef, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x2108, gbc.sp());
        EXPECT(0xa0f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0ef));
        EXPECT(0xaf, gbc.readMem(0xa0f0));
        // CB AF 02B7
        gbc.setState(0xb0e9, 0x7fa5, 0xa2b0, 0x6a4a, 0x42c9, 0xe34b, 0x1, 0x1);
        gbc.writeMem(0xb0e9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x7fa5, gbc.sp());
        EXPECT(0xb0eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0e9));
        EXPECT(0xaf, gbc.readMem(0xb0ea));
        // CB AF 02B8
        gbc.setState(0x5a0e, 0x4cf, 0x1e00, 0xfd2c, 0xcd7c, 0x5a77, 0x0, 0x0);
        gbc.writeMem(0x5a0e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x4cf, gbc.sp());
        EXPECT(0x5a10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02B9
        gbc.setState(0x993b, 0x5f0a, 0xe460, 0x5b9c, 0xabc4, 0xe5ab, 0x1, 0x1);
        gbc.writeMem(0x993b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x5f0a, gbc.sp());
        EXPECT(0x993d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x993b));
        EXPECT(0xaf, gbc.readMem(0x993c));
        // CB AF 02BA
        gbc.setState(0xdd66, 0xe48, 0x90d0, 0x4e55, 0x9d1a, 0xca3b, 0x1, 0x1);
        gbc.writeMem(0xdd66, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xe48, gbc.sp());
        EXPECT(0xdd68, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd66));
        EXPECT(0xaf, gbc.readMem(0xdd67));
        // CB AF 02BB
        gbc.setState(0xb7b4, 0x6400, 0xfd40, 0xc27a, 0x9786, 0x4ac0, 0x1, 0x1);
        gbc.writeMem(0xb7b4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x6400, gbc.sp());
        EXPECT(0xb7b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7b4));
        EXPECT(0xaf, gbc.readMem(0xb7b5));
        // CB AF 02BC
        gbc.setState(0x45ce, 0x40c9, 0xd2c0, 0xf769, 0x352, 0xb070, 0x0, 0x0);
        gbc.writeMem(0x45ce, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x40c9, gbc.sp());
        EXPECT(0x45d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02BD
        gbc.setState(0x6be0, 0x7789, 0x8650, 0xfa52, 0xb134, 0xa9bb, 0x0, 0x0);
        gbc.writeMem(0x6be0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x7789, gbc.sp());
        EXPECT(0x6be2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02BF
        gbc.setState(0x72bb, 0xb17a, 0xb880, 0xf592, 0xd048, 0xb255, 0x1, 0x0);
        gbc.writeMem(0x72bb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xb17a, gbc.sp());
        EXPECT(0x72bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02C0
        gbc.setState(0xe339, 0xb074, 0x8670, 0x37c9, 0xc579, 0xf9be, 0x1, 0x0);
        gbc.writeMem(0xe339, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xb074, gbc.sp());
        EXPECT(0xe33b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe339));
        EXPECT(0xaf, gbc.readMem(0xe33a));
        // CB AF 02C1
        gbc.setState(0x4a39, 0x11c6, 0x2170, 0x47d6, 0x987, 0x26ca, 0x0, 0x1);
        gbc.writeMem(0x4a39, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x11c6, gbc.sp());
        EXPECT(0x4a3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02C2
        gbc.setState(0x605, 0x9246, 0xfda0, 0xd4a2, 0x7048, 0x4095, 0x1, 0x0);
        gbc.writeMem(0x605, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x9246, gbc.sp());
        EXPECT(0x607, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02C3
        gbc.setState(0xd3b4, 0x48e, 0x3e00, 0xa2eb, 0xf358, 0xabc6, 0x0, 0x1);
        gbc.writeMem(0xd3b4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x48e, gbc.sp());
        EXPECT(0xd3b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3b4));
        EXPECT(0xaf, gbc.readMem(0xd3b5));
        // CB AF 02C4
        gbc.setState(0xa13c, 0x6e29, 0xc1c0, 0x70ba, 0x884e, 0x9d07, 0x1, 0x1);
        gbc.writeMem(0xa13c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x6e29, gbc.sp());
        EXPECT(0xa13e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa13c));
        EXPECT(0xaf, gbc.readMem(0xa13d));
        // CB AF 02C5
        gbc.setState(0x3bee, 0x84d6, 0xf8c0, 0x1d07, 0x78bb, 0x69cd, 0x0, 0x0);
        gbc.writeMem(0x3bee, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x84d6, gbc.sp());
        EXPECT(0x3bf0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02C6
        gbc.setState(0x23ea, 0x7114, 0x6ce0, 0x2094, 0x6ab5, 0x9313, 0x1, 0x0);
        gbc.writeMem(0x23ea, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x7114, gbc.sp());
        EXPECT(0x23ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02C7
        gbc.setState(0xa331, 0x4467, 0xe6b0, 0x2618, 0x488f, 0x45e3, 0x1, 0x1);
        gbc.writeMem(0xa331, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x4467, gbc.sp());
        EXPECT(0xa333, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa331));
        EXPECT(0xaf, gbc.readMem(0xa332));
        // CB AF 02C8
        gbc.setState(0x9caf, 0xba4d, 0xaba0, 0x9436, 0x3b2, 0x58a5, 0x0, 0x0);
        gbc.writeMem(0x9caf, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xba4d, gbc.sp());
        EXPECT(0x9cb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9caf));
        EXPECT(0xaf, gbc.readMem(0x9cb0));
        // CB AF 02C9
        gbc.setState(0xbbc, 0xb4bc, 0xcf60, 0xe52e, 0x8550, 0xfb49, 0x1, 0x0);
        gbc.writeMem(0xbbc, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xb4bc, gbc.sp());
        EXPECT(0xbbe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02CA
        gbc.setState(0xc717, 0xb1ae, 0xb0, 0x7504, 0xbd6, 0xba52, 0x0, 0x0);
        gbc.writeMem(0xc717, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xb1ae, gbc.sp());
        EXPECT(0xc719, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc717));
        EXPECT(0xaf, gbc.readMem(0xc718));
        // CB AF 02CB
        gbc.setState(0x59e5, 0x7720, 0x3a50, 0x62d5, 0x9946, 0xc1b0, 0x0, 0x1);
        gbc.writeMem(0x59e5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x7720, gbc.sp());
        EXPECT(0x59e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02CC
        gbc.setState(0xada6, 0xc40b, 0xfe70, 0x6c6d, 0x61c6, 0x3cde, 0x0, 0x0);
        gbc.writeMem(0xada6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xc40b, gbc.sp());
        EXPECT(0xada8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xada6));
        EXPECT(0xaf, gbc.readMem(0xada7));
        // CB AF 02CD
        gbc.setState(0xa754, 0x8ecd, 0x28b0, 0xe6a8, 0x1042, 0x212d, 0x0, 0x1);
        gbc.writeMem(0xa754, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x8ecd, gbc.sp());
        EXPECT(0xa756, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa754));
        EXPECT(0xaf, gbc.readMem(0xa755));
        // CB AF 02CE
        gbc.setState(0x1aff, 0xabfc, 0x5a0, 0xbd97, 0xc70a, 0xe672, 0x1, 0x0);
        gbc.writeMem(0x1aff, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xabfc, gbc.sp());
        EXPECT(0x1b01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02CF
        gbc.setState(0xa002, 0x783c, 0xb930, 0x9437, 0x376c, 0x6cdc, 0x1, 0x0);
        gbc.writeMem(0xa002, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x783c, gbc.sp());
        EXPECT(0xa004, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa002));
        EXPECT(0xaf, gbc.readMem(0xa003));
        // CB AF 02D0
        gbc.setState(0x749c, 0x79a, 0xf310, 0x72cb, 0x437a, 0xb48f, 0x1, 0x0);
        gbc.writeMem(0x749c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x79a, gbc.sp());
        EXPECT(0x749e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02D1
        gbc.setState(0x4648, 0xb41d, 0x8420, 0xa7c3, 0xb7af, 0xa2c8, 0x1, 0x1);
        gbc.writeMem(0x4648, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xb41d, gbc.sp());
        EXPECT(0x464a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02D2
        gbc.setState(0x16a4, 0x8d2c, 0x88b0, 0xc682, 0xbfff, 0xb76a, 0x0, 0x1);
        gbc.writeMem(0x16a4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x8d2c, gbc.sp());
        EXPECT(0x16a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02D3
        gbc.setState(0xb96e, 0xb70e, 0xa6a0, 0xba03, 0x8327, 0xe965, 0x0, 0x0);
        gbc.writeMem(0xb96e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xb70e, gbc.sp());
        EXPECT(0xb970, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb96e));
        EXPECT(0xaf, gbc.readMem(0xb96f));
        // CB AF 02D4
        gbc.setState(0x4670, 0x3331, 0x24d0, 0x90d, 0x72a7, 0xeddf, 0x1, 0x0);
        gbc.writeMem(0x4670, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x3331, gbc.sp());
        EXPECT(0x4672, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02D5
        gbc.setState(0xcdb, 0x4129, 0x9a90, 0x9094, 0x8f14, 0x70ce, 0x1, 0x1);
        gbc.writeMem(0xcdb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x4129, gbc.sp());
        EXPECT(0xcdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02D6
        gbc.setState(0x4b30, 0x9a93, 0xe8f0, 0xcc1, 0x5b5b, 0x2342, 0x0, 0x1);
        gbc.writeMem(0x4b30, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x9a93, gbc.sp());
        EXPECT(0x4b32, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02D7
        gbc.setState(0x4ca, 0x4d29, 0x8900, 0xd62b, 0x8c83, 0x638, 0x0, 0x0);
        gbc.writeMem(0x4ca, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x4d29, gbc.sp());
        EXPECT(0x4cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02D9
        gbc.setState(0x2d68, 0x6653, 0x1eb0, 0xac5b, 0x27ad, 0x8db4, 0x0, 0x1);
        gbc.writeMem(0x2d68, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x6653, gbc.sp());
        EXPECT(0x2d6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02DA
        gbc.setState(0x932f, 0xc58b, 0xdcf0, 0x84d5, 0x7926, 0x78a7, 0x0, 0x0);
        gbc.writeMem(0x932f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xc58b, gbc.sp());
        EXPECT(0x9331, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x932f));
        EXPECT(0xaf, gbc.readMem(0x9330));
        // CB AF 02DB
        gbc.setState(0xe169, 0xb094, 0x6120, 0x501a, 0x62fa, 0x36f3, 0x1, 0x1);
        gbc.writeMem(0xe169, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xb094, gbc.sp());
        EXPECT(0xe16b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe169));
        EXPECT(0xaf, gbc.readMem(0xe16a));
        // CB AF 02DC
        gbc.setState(0x2491, 0xe1ee, 0x7040, 0x6d2a, 0x5c8a, 0x2ed7, 0x0, 0x0);
        gbc.writeMem(0x2491, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xe1ee, gbc.sp());
        EXPECT(0x2493, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02DE
        gbc.setState(0x8091, 0x42f9, 0x9420, 0xbe22, 0x263f, 0x2e47, 0x0, 0x0);
        gbc.writeMem(0x8091, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x42f9, gbc.sp());
        EXPECT(0x8093, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8091));
        EXPECT(0xaf, gbc.readMem(0x8092));
        // CB AF 02E0
        gbc.setState(0x1a3c, 0x7471, 0x90c0, 0x527c, 0x4898, 0x6bba, 0x0, 0x1);
        gbc.writeMem(0x1a3c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x7471, gbc.sp());
        EXPECT(0x1a3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02E1
        gbc.setState(0x2d78, 0xef08, 0x1b90, 0x9f2, 0x2c35, 0x9a55, 0x1, 0x0);
        gbc.writeMem(0x2d78, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xef08, gbc.sp());
        EXPECT(0x2d7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02E2
        gbc.setState(0x8781, 0x41bd, 0xe1d0, 0xdb05, 0x60ba, 0x353c, 0x0, 0x1);
        gbc.writeMem(0x8781, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x41bd, gbc.sp());
        EXPECT(0x8783, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8781));
        EXPECT(0xaf, gbc.readMem(0x8782));
        // CB AF 02E3
        gbc.setState(0x299, 0x6660, 0xe50, 0x9643, 0x400, 0x7b8f, 0x0, 0x1);
        gbc.writeMem(0x299, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x6660, gbc.sp());
        EXPECT(0x29b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02E4
        gbc.setState(0x33d8, 0x7a71, 0xcbd0, 0xa92b, 0xd325, 0xe1f2, 0x1, 0x0);
        gbc.writeMem(0x33d8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x7a71, gbc.sp());
        EXPECT(0x33da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02E5
        gbc.setState(0x81cb, 0xb84d, 0xac10, 0x289d, 0xf752, 0xebab, 0x0, 0x1);
        gbc.writeMem(0x81cb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xb84d, gbc.sp());
        EXPECT(0x81cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81cb));
        EXPECT(0xaf, gbc.readMem(0x81cc));
        // CB AF 02E6
        gbc.setState(0x8610, 0x3a3b, 0xdc30, 0x6d4, 0x18b, 0xc027, 0x0, 0x1);
        gbc.writeMem(0x8610, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x3a3b, gbc.sp());
        EXPECT(0x8612, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8610));
        EXPECT(0xaf, gbc.readMem(0x8611));
        // CB AF 02E8
        gbc.setState(0xba88, 0x674d, 0x6590, 0x6a6f, 0xe4e, 0x5703, 0x0, 0x0);
        gbc.writeMem(0xba88, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x674d, gbc.sp());
        EXPECT(0xba8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba88));
        EXPECT(0xaf, gbc.readMem(0xba89));
        // CB AF 02E9
        gbc.setState(0xd61, 0x7b9f, 0x3d30, 0x317a, 0x86cd, 0xc461, 0x0, 0x0);
        gbc.writeMem(0xd61, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x7b9f, gbc.sp());
        EXPECT(0xd63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02EB
        gbc.setState(0xc3c6, 0x5ad, 0x5880, 0xaf31, 0x336e, 0x290e, 0x0, 0x0);
        gbc.writeMem(0xc3c6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x5ad, gbc.sp());
        EXPECT(0xc3c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3c6));
        EXPECT(0xaf, gbc.readMem(0xc3c7));
        // CB AF 02EC
        gbc.setState(0x4f7f, 0x4d31, 0x6840, 0xb1bf, 0xa002, 0x8f1d, 0x1, 0x1);
        gbc.writeMem(0x4f7f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x4d31, gbc.sp());
        EXPECT(0x4f81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02ED
        gbc.setState(0x988c, 0xb229, 0xd650, 0x209e, 0x5d96, 0xaa6f, 0x1, 0x0);
        gbc.writeMem(0x988c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xb229, gbc.sp());
        EXPECT(0x988e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x988c));
        EXPECT(0xaf, gbc.readMem(0x988d));
        // CB AF 02EE
        gbc.setState(0x6a63, 0xd5cb, 0x36b0, 0x96e3, 0x53ec, 0x3738, 0x0, 0x1);
        gbc.writeMem(0x6a63, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xd5cb, gbc.sp());
        EXPECT(0x6a65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02EF
        gbc.setState(0x86ce, 0x276e, 0xbad0, 0x15a2, 0xd98a, 0xdeb5, 0x0, 0x0);
        gbc.writeMem(0x86ce, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x276e, gbc.sp());
        EXPECT(0x86d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86ce));
        EXPECT(0xaf, gbc.readMem(0x86cf));
        // CB AF 02F0
        gbc.setState(0x7396, 0x2faf, 0x7bb0, 0xb537, 0x2bd8, 0xc520, 0x1, 0x1);
        gbc.writeMem(0x7396, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x2faf, gbc.sp());
        EXPECT(0x7398, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02F1
        gbc.setState(0xb09f, 0x52a2, 0x3e0, 0x6f2d, 0xaff, 0xf58e, 0x1, 0x1);
        gbc.writeMem(0xb09f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x52a2, gbc.sp());
        EXPECT(0xb0a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb09f));
        EXPECT(0xaf, gbc.readMem(0xb0a0));
        // CB AF 02F2
        gbc.setState(0x116d, 0xc989, 0x8f80, 0xafcf, 0x16f5, 0x9c84, 0x0, 0x0);
        gbc.writeMem(0x116d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xc989, gbc.sp());
        EXPECT(0x116f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02F3
        gbc.setState(0xf14, 0x322b, 0x9110, 0x8a04, 0xaca7, 0xd49, 0x0, 0x0);
        gbc.writeMem(0xf14, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x322b, gbc.sp());
        EXPECT(0xf16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02F4
        gbc.setState(0x97f7, 0x48ed, 0x5ec0, 0x48aa, 0xa3c4, 0x29de, 0x1, 0x1);
        gbc.writeMem(0x97f7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x48ed, gbc.sp());
        EXPECT(0x97f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97f7));
        EXPECT(0xaf, gbc.readMem(0x97f8));
        // CB AF 02F5
        gbc.setState(0x2edb, 0xb11a, 0x7380, 0xbf5a, 0x2265, 0xefc6, 0x0, 0x0);
        gbc.writeMem(0x2edb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xb11a, gbc.sp());
        EXPECT(0x2edd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02F7
        gbc.setState(0x75e5, 0x3e1e, 0xd910, 0x7e4f, 0x263c, 0xd1f3, 0x0, 0x0);
        gbc.writeMem(0x75e5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x3e1e, gbc.sp());
        EXPECT(0x75e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02F8
        gbc.setState(0xea90, 0x7ef9, 0x6e0, 0x9e1b, 0xfdb4, 0x494, 0x1, 0x1);
        gbc.writeMem(0xea90, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x7ef9, gbc.sp());
        EXPECT(0xea92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea90));
        EXPECT(0xaf, gbc.readMem(0xea91));
        // CB AF 02F9
        gbc.setState(0x24ec, 0x28db, 0x2ac0, 0x4f74, 0x8630, 0x7d6e, 0x0, 0x1);
        gbc.writeMem(0x24ec, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x28db, gbc.sp());
        EXPECT(0x24ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02FA
        gbc.setState(0xb7b6, 0x352b, 0x1e20, 0x9767, 0xe54a, 0x85e4, 0x1, 0x1);
        gbc.writeMem(0xb7b6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x352b, gbc.sp());
        EXPECT(0xb7b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7b6));
        EXPECT(0xaf, gbc.readMem(0xb7b7));
        // CB AF 02FB
        gbc.setState(0x6c6, 0xdaaa, 0xf280, 0x6599, 0x59be, 0xb56b, 0x0, 0x1);
        gbc.writeMem(0x6c6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xdaaa, gbc.sp());
        EXPECT(0x6c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 02FC
        gbc.setState(0xe479, 0xf9ec, 0x6060, 0x21ec, 0x3de2, 0x5f01, 0x0, 0x1);
        gbc.writeMem(0xe479, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xf9ec, gbc.sp());
        EXPECT(0xe47b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe479));
        EXPECT(0xaf, gbc.readMem(0xe47a));
        // CB AF 02FD
        gbc.setState(0x6fa7, 0x42e8, 0xf810, 0x7023, 0xcffd, 0xe657, 0x1, 0x1);
        gbc.writeMem(0x6fa7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x42e8, gbc.sp());
        EXPECT(0x6fa9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02FE
        gbc.setState(0x5ed3, 0x859c, 0xffb0, 0x6ca8, 0xb640, 0x14d0, 0x1, 0x0);
        gbc.writeMem(0x5ed3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x859c, gbc.sp());
        EXPECT(0x5ed5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 02FF
        gbc.setState(0xcfa9, 0xa96f, 0x5e40, 0xfba2, 0x495, 0x831e, 0x0, 0x0);
        gbc.writeMem(0xcfa9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xa96f, gbc.sp());
        EXPECT(0xcfab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfa9));
        EXPECT(0xaf, gbc.readMem(0xcfaa));
        // CB AF 0300
        gbc.setState(0xee99, 0x3417, 0x35b0, 0xf0ca, 0x85b9, 0x4837, 0x1, 0x0);
        gbc.writeMem(0xee99, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x3417, gbc.sp());
        EXPECT(0xee9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee99));
        EXPECT(0xaf, gbc.readMem(0xee9a));
        // CB AF 0301
        gbc.setState(0x2269, 0x71fd, 0x4de0, 0xd0a2, 0xf38, 0x5076, 0x1, 0x0);
        gbc.writeMem(0x2269, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x71fd, gbc.sp());
        EXPECT(0x226b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0302
        gbc.setState(0x6e08, 0xda31, 0x9b0, 0xfad, 0x985a, 0xb21f, 0x1, 0x1);
        gbc.writeMem(0x6e08, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xda31, gbc.sp());
        EXPECT(0x6e0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0303
        gbc.setState(0x86b7, 0x9f18, 0xafc0, 0x96be, 0xb2c2, 0x9de1, 0x1, 0x0);
        gbc.writeMem(0x86b7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x9f18, gbc.sp());
        EXPECT(0x86b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86b7));
        EXPECT(0xaf, gbc.readMem(0x86b8));
        // CB AF 0304
        gbc.setState(0x3b83, 0x9ed7, 0xff0, 0x5c4e, 0x349e, 0x30ca, 0x0, 0x0);
        gbc.writeMem(0x3b83, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x9ed7, gbc.sp());
        EXPECT(0x3b85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0305
        gbc.setState(0xc1a1, 0x82f2, 0x6f80, 0x5a21, 0xc9e7, 0x5a03, 0x0, 0x0);
        gbc.writeMem(0xc1a1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x82f2, gbc.sp());
        EXPECT(0xc1a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1a1));
        EXPECT(0xaf, gbc.readMem(0xc1a2));
        // CB AF 0306
        gbc.setState(0xc788, 0x676b, 0xfe00, 0x718c, 0xf5ba, 0xa25b, 0x1, 0x1);
        gbc.writeMem(0xc788, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x676b, gbc.sp());
        EXPECT(0xc78a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc788));
        EXPECT(0xaf, gbc.readMem(0xc789));
        // CB AF 0307
        gbc.setState(0xdafb, 0x9bcf, 0x190, 0x8603, 0x518d, 0xf83f, 0x1, 0x0);
        gbc.writeMem(0xdafb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x9bcf, gbc.sp());
        EXPECT(0xdafd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdafb));
        EXPECT(0xaf, gbc.readMem(0xdafc));
        // CB AF 0308
        gbc.setState(0x65bf, 0x35ca, 0xf340, 0x103e, 0x16ec, 0x767e, 0x1, 0x1);
        gbc.writeMem(0x65bf, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x35ca, gbc.sp());
        EXPECT(0x65c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0309
        gbc.setState(0x4f0a, 0xc086, 0xc5f0, 0xc5a2, 0xe7c5, 0x5344, 0x0, 0x1);
        gbc.writeMem(0x4f0a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xc086, gbc.sp());
        EXPECT(0x4f0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 030A
        gbc.setState(0x7483, 0x9e55, 0x9bd0, 0xa8f4, 0x9c62, 0x6f7b, 0x0, 0x1);
        gbc.writeMem(0x7483, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x9e55, gbc.sp());
        EXPECT(0x7485, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 030B
        gbc.setState(0x84d9, 0x5b3d, 0x1800, 0x13c7, 0x3d7b, 0x9ed5, 0x0, 0x1);
        gbc.writeMem(0x84d9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x5b3d, gbc.sp());
        EXPECT(0x84db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84d9));
        EXPECT(0xaf, gbc.readMem(0x84da));
        // CB AF 030C
        gbc.setState(0x7ac0, 0x77cf, 0xf6d0, 0x8bf5, 0x2a9f, 0xe3fd, 0x1, 0x1);
        gbc.writeMem(0x7ac0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x77cf, gbc.sp());
        EXPECT(0x7ac2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 030D
        gbc.setState(0x6d22, 0x6c4a, 0x8b10, 0xb398, 0xf7b3, 0xa1c6, 0x1, 0x0);
        gbc.writeMem(0x6d22, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x6c4a, gbc.sp());
        EXPECT(0x6d24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 030E
        gbc.setState(0x4576, 0xa5a7, 0xf8f0, 0xec1a, 0xa14b, 0x3c0a, 0x0, 0x1);
        gbc.writeMem(0x4576, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xa5a7, gbc.sp());
        EXPECT(0x4578, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 030F
        gbc.setState(0x8895, 0xb83, 0x9090, 0xa539, 0xdbc4, 0x94d0, 0x0, 0x1);
        gbc.writeMem(0x8895, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xb83, gbc.sp());
        EXPECT(0x8897, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8895));
        EXPECT(0xaf, gbc.readMem(0x8896));
        // CB AF 0310
        gbc.setState(0x9e06, 0xefa3, 0x57d0, 0x44ad, 0xe501, 0x368c, 0x1, 0x0);
        gbc.writeMem(0x9e06, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xefa3, gbc.sp());
        EXPECT(0x9e08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e06));
        EXPECT(0xaf, gbc.readMem(0x9e07));
        // CB AF 0312
        gbc.setState(0xb306, 0xf6df, 0x5870, 0x51d9, 0xd26a, 0x4bbc, 0x1, 0x0);
        gbc.writeMem(0xb306, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xf6df, gbc.sp());
        EXPECT(0xb308, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb306));
        EXPECT(0xaf, gbc.readMem(0xb307));
        // CB AF 0313
        gbc.setState(0xa1ed, 0x46fc, 0x7a10, 0xcbec, 0x4c00, 0x3c3e, 0x0, 0x1);
        gbc.writeMem(0xa1ed, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x46fc, gbc.sp());
        EXPECT(0xa1ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1ed));
        EXPECT(0xaf, gbc.readMem(0xa1ee));
        // CB AF 0314
        gbc.setState(0xe61d, 0xb90, 0x9470, 0xabec, 0xc459, 0x25a5, 0x1, 0x1);
        gbc.writeMem(0xe61d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xb90, gbc.sp());
        EXPECT(0xe61f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe61d));
        EXPECT(0xaf, gbc.readMem(0xe61e));
        // CB AF 0315
        gbc.setState(0xdef3, 0xda8e, 0xdf50, 0xb385, 0xb63a, 0xc857, 0x0, 0x1);
        gbc.writeMem(0xdef3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xda8e, gbc.sp());
        EXPECT(0xdef5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdef3));
        EXPECT(0xaf, gbc.readMem(0xdef4));
        // CB AF 0316
        gbc.setState(0x4c15, 0xb917, 0x360, 0xe112, 0x1c84, 0x8462, 0x1, 0x1);
        gbc.writeMem(0x4c15, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xb917, gbc.sp());
        EXPECT(0x4c17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0317
        gbc.setState(0xc04, 0x98d, 0x93b0, 0xe16, 0xd7cc, 0xd455, 0x1, 0x0);
        gbc.writeMem(0xc04, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x98d, gbc.sp());
        EXPECT(0xc06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0318
        gbc.setState(0x21be, 0xe6eb, 0xc000, 0xfd2c, 0xc801, 0x29ad, 0x1, 0x1);
        gbc.writeMem(0x21be, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xe6eb, gbc.sp());
        EXPECT(0x21c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0319
        gbc.setState(0x94ae, 0xb1e5, 0x2ff0, 0x8cf8, 0x4710, 0x45c, 0x1, 0x1);
        gbc.writeMem(0x94ae, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xb1e5, gbc.sp());
        EXPECT(0x94b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94ae));
        EXPECT(0xaf, gbc.readMem(0x94af));
        // CB AF 031A
        gbc.setState(0xdd78, 0xdc76, 0xabe0, 0xf9ba, 0x4db0, 0x80aa, 0x0, 0x1);
        gbc.writeMem(0xdd78, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xdc76, gbc.sp());
        EXPECT(0xdd7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd78));
        EXPECT(0xaf, gbc.readMem(0xdd79));
        // CB AF 031B
        gbc.setState(0x4f44, 0x160b, 0xcbb0, 0x9285, 0x5612, 0xd5c, 0x0, 0x1);
        gbc.writeMem(0x4f44, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x160b, gbc.sp());
        EXPECT(0x4f46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 031C
        gbc.setState(0x199e, 0x2636, 0xaeb0, 0xf998, 0xdca, 0xb57d, 0x1, 0x1);
        gbc.writeMem(0x199e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x2636, gbc.sp());
        EXPECT(0x19a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 031D
        gbc.setState(0xb561, 0x34b7, 0x6cf0, 0x3ae6, 0xafff, 0x5949, 0x0, 0x0);
        gbc.writeMem(0xb561, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x34b7, gbc.sp());
        EXPECT(0xb563, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb561));
        EXPECT(0xaf, gbc.readMem(0xb562));
        // CB AF 031F
        gbc.setState(0xd831, 0xa584, 0xe070, 0x3914, 0xf722, 0x4634, 0x1, 0x0);
        gbc.writeMem(0xd831, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xa584, gbc.sp());
        EXPECT(0xd833, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd831));
        EXPECT(0xaf, gbc.readMem(0xd832));
        // CB AF 0320
        gbc.setState(0x4314, 0xc06f, 0xcd10, 0x5cd5, 0xff9c, 0x1ac0, 0x1, 0x0);
        gbc.writeMem(0x4314, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xc06f, gbc.sp());
        EXPECT(0x4316, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0321
        gbc.setState(0x912e, 0x1850, 0xe470, 0x5a31, 0xcae8, 0x368f, 0x0, 0x0);
        gbc.writeMem(0x912e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x1850, gbc.sp());
        EXPECT(0x9130, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x912e));
        EXPECT(0xaf, gbc.readMem(0x912f));
        // CB AF 0322
        gbc.setState(0xe4fb, 0xc56, 0x2dc0, 0x2e92, 0xed50, 0xe69a, 0x1, 0x1);
        gbc.writeMem(0xe4fb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xc56, gbc.sp());
        EXPECT(0xe4fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4fb));
        EXPECT(0xaf, gbc.readMem(0xe4fc));
        // CB AF 0323
        gbc.setState(0x378a, 0x515a, 0xfea0, 0x6f8d, 0x2569, 0xa124, 0x1, 0x0);
        gbc.writeMem(0x378a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x515a, gbc.sp());
        EXPECT(0x378c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0324
        gbc.setState(0xa014, 0x1a87, 0xf2e0, 0xc8b8, 0x2b92, 0x7161, 0x1, 0x1);
        gbc.writeMem(0xa014, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x1a87, gbc.sp());
        EXPECT(0xa016, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa014));
        EXPECT(0xaf, gbc.readMem(0xa015));
        // CB AF 0325
        gbc.setState(0x5180, 0x49ae, 0xf830, 0x4e9b, 0x5980, 0x7bb4, 0x1, 0x0);
        gbc.writeMem(0x5180, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x49ae, gbc.sp());
        EXPECT(0x5182, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0326
        gbc.setState(0xb64e, 0x4be2, 0x4890, 0x5e2c, 0xcdc8, 0xf339, 0x1, 0x0);
        gbc.writeMem(0xb64e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x4be2, gbc.sp());
        EXPECT(0xb650, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb64e));
        EXPECT(0xaf, gbc.readMem(0xb64f));
        // CB AF 0327
        gbc.setState(0x9865, 0xe5d3, 0xe180, 0x2ae5, 0x6d18, 0xcf76, 0x0, 0x0);
        gbc.writeMem(0x9865, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xe5d3, gbc.sp());
        EXPECT(0x9867, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9865));
        EXPECT(0xaf, gbc.readMem(0x9866));
        // CB AF 0328
        gbc.setState(0xa929, 0xfdc7, 0x3c30, 0xeb6b, 0x9687, 0x6cda, 0x1, 0x0);
        gbc.writeMem(0xa929, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xfdc7, gbc.sp());
        EXPECT(0xa92b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa929));
        EXPECT(0xaf, gbc.readMem(0xa92a));
        // CB AF 0329
        gbc.setState(0x79e, 0xca81, 0xba00, 0x60d3, 0x99d, 0x2eb4, 0x0, 0x1);
        gbc.writeMem(0x79e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xca81, gbc.sp());
        EXPECT(0x7a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 032A
        gbc.setState(0xe43b, 0xebf0, 0x2170, 0x5424, 0xf8af, 0x6c35, 0x1, 0x1);
        gbc.writeMem(0xe43b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xebf0, gbc.sp());
        EXPECT(0xe43d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe43b));
        EXPECT(0xaf, gbc.readMem(0xe43c));
        // CB AF 032B
        gbc.setState(0x4ff5, 0xdf12, 0x9f70, 0xc3e4, 0xb72, 0xbe1f, 0x0, 0x0);
        gbc.writeMem(0x4ff5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xdf12, gbc.sp());
        EXPECT(0x4ff7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 032C
        gbc.setState(0x758b, 0x8db2, 0xdbe0, 0xa9c1, 0x6e26, 0x6c4a, 0x0, 0x1);
        gbc.writeMem(0x758b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x8db2, gbc.sp());
        EXPECT(0x758d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 032D
        gbc.setState(0x3d84, 0xe0ad, 0xc10, 0xa283, 0x89ca, 0xe7f4, 0x0, 0x1);
        gbc.writeMem(0x3d84, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xe0ad, gbc.sp());
        EXPECT(0x3d86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 032E
        gbc.setState(0x6d85, 0xa218, 0x4820, 0xa1d5, 0xafc2, 0x773, 0x0, 0x1);
        gbc.writeMem(0x6d85, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xa218, gbc.sp());
        EXPECT(0x6d87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 032F
        gbc.setState(0x5b46, 0xd536, 0x1590, 0x9c75, 0xdc31, 0x4411, 0x1, 0x0);
        gbc.writeMem(0x5b46, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xd536, gbc.sp());
        EXPECT(0x5b48, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0330
        gbc.setState(0x3a94, 0x7cb4, 0xdf50, 0x5fbc, 0x1dc3, 0x5eab, 0x1, 0x1);
        gbc.writeMem(0x3a94, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x7cb4, gbc.sp());
        EXPECT(0x3a96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0331
        gbc.setState(0x7222, 0xa495, 0x90a0, 0x6c2f, 0x5608, 0x5c2, 0x0, 0x1);
        gbc.writeMem(0x7222, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xa495, gbc.sp());
        EXPECT(0x7224, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0332
        gbc.setState(0xc7d4, 0xc887, 0xd480, 0x89e9, 0x6006, 0xa19b, 0x1, 0x1);
        gbc.writeMem(0xc7d4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xc887, gbc.sp());
        EXPECT(0xc7d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7d4));
        EXPECT(0xaf, gbc.readMem(0xc7d5));
        // CB AF 0333
        gbc.setState(0x144f, 0x95d9, 0x6ee0, 0x1b8a, 0x60bf, 0xf4ab, 0x1, 0x1);
        gbc.writeMem(0x144f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x95d9, gbc.sp());
        EXPECT(0x1451, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0334
        gbc.setState(0xa184, 0x7367, 0xd2a0, 0x7ffb, 0x9d78, 0xe843, 0x1, 0x0);
        gbc.writeMem(0xa184, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x7367, gbc.sp());
        EXPECT(0xa186, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa184));
        EXPECT(0xaf, gbc.readMem(0xa185));
        // CB AF 0335
        gbc.setState(0xa7df, 0x758b, 0x8cb0, 0x34e8, 0x9e45, 0x5ca0, 0x1, 0x1);
        gbc.writeMem(0xa7df, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x758b, gbc.sp());
        EXPECT(0xa7e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7df));
        EXPECT(0xaf, gbc.readMem(0xa7e0));
        // CB AF 0336
        gbc.setState(0x2a3b, 0x9869, 0x1540, 0xe6ec, 0x9a92, 0xfc5, 0x1, 0x1);
        gbc.writeMem(0x2a3b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x9869, gbc.sp());
        EXPECT(0x2a3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0337
        gbc.setState(0xb169, 0x4a9e, 0xf9e0, 0x24d6, 0xc072, 0xc969, 0x1, 0x1);
        gbc.writeMem(0xb169, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x4a9e, gbc.sp());
        EXPECT(0xb16b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb169));
        EXPECT(0xaf, gbc.readMem(0xb16a));
        // CB AF 0338
        gbc.setState(0x657e, 0xf54d, 0x3430, 0x2e57, 0xcfdb, 0x8213, 0x0, 0x0);
        gbc.writeMem(0x657e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xf54d, gbc.sp());
        EXPECT(0x6580, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0339
        gbc.setState(0xc788, 0x4aea, 0x4850, 0x63eb, 0xdb0a, 0xb8b0, 0x0, 0x0);
        gbc.writeMem(0xc788, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x4aea, gbc.sp());
        EXPECT(0xc78a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc788));
        EXPECT(0xaf, gbc.readMem(0xc789));
        // CB AF 033A
        gbc.setState(0x3a5b, 0x853b, 0x57d0, 0xcb96, 0xd52d, 0x6c6d, 0x1, 0x0);
        gbc.writeMem(0x3a5b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x853b, gbc.sp());
        EXPECT(0x3a5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 033B
        gbc.setState(0x6d24, 0x9718, 0xd460, 0xda4f, 0x5742, 0xec9f, 0x1, 0x0);
        gbc.writeMem(0x6d24, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x9718, gbc.sp());
        EXPECT(0x6d26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 033C
        gbc.setState(0x91d9, 0x3b62, 0xf510, 0x6d85, 0xff18, 0x7842, 0x0, 0x0);
        gbc.writeMem(0x91d9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x3b62, gbc.sp());
        EXPECT(0x91db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91d9));
        EXPECT(0xaf, gbc.readMem(0x91da));
        // CB AF 033D
        gbc.setState(0xad8b, 0xb016, 0x4c20, 0x6aa7, 0x7754, 0x6963, 0x0, 0x1);
        gbc.writeMem(0xad8b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xb016, gbc.sp());
        EXPECT(0xad8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad8b));
        EXPECT(0xaf, gbc.readMem(0xad8c));
        // CB AF 033F
        gbc.setState(0xce5f, 0xaced, 0xf3a0, 0x6033, 0x9013, 0x8fdc, 0x0, 0x0);
        gbc.writeMem(0xce5f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xaced, gbc.sp());
        EXPECT(0xce61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce5f));
        EXPECT(0xaf, gbc.readMem(0xce60));
        // CB AF 0340
        gbc.setState(0x7cf, 0x8850, 0xb480, 0xc85c, 0xe376, 0xf9cf, 0x0, 0x0);
        gbc.writeMem(0x7cf, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x8850, gbc.sp());
        EXPECT(0x7d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0341
        gbc.setState(0xa595, 0xc06a, 0xf3f0, 0x8ceb, 0x9690, 0xefab, 0x1, 0x1);
        gbc.writeMem(0xa595, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xc06a, gbc.sp());
        EXPECT(0xa597, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa595));
        EXPECT(0xaf, gbc.readMem(0xa596));
        // CB AF 0342
        gbc.setState(0x4d77, 0xcb72, 0x9de0, 0x7439, 0x7543, 0xa52f, 0x1, 0x1);
        gbc.writeMem(0x4d77, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xcb72, gbc.sp());
        EXPECT(0x4d79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0343
        gbc.setState(0x6888, 0x1030, 0x64e0, 0xd4ac, 0xf1d5, 0xc4b1, 0x0, 0x1);
        gbc.writeMem(0x6888, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x1030, gbc.sp());
        EXPECT(0x688a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0344
        gbc.setState(0xa901, 0xc224, 0xf5c0, 0x884c, 0x1f54, 0x7467, 0x1, 0x1);
        gbc.writeMem(0xa901, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xc224, gbc.sp());
        EXPECT(0xa903, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa901));
        EXPECT(0xaf, gbc.readMem(0xa902));
        // CB AF 0345
        gbc.setState(0x93de, 0x76, 0x7870, 0x5462, 0x3d28, 0x9f16, 0x0, 0x1);
        gbc.writeMem(0x93de, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x76, gbc.sp());
        EXPECT(0x93e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93de));
        EXPECT(0xaf, gbc.readMem(0x93df));
        // CB AF 0346
        gbc.setState(0x1b5b, 0xf799, 0xe0c0, 0xe298, 0xfe2b, 0x1f82, 0x0, 0x0);
        gbc.writeMem(0x1b5b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xf799, gbc.sp());
        EXPECT(0x1b5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0347
        gbc.setState(0x4698, 0xee08, 0xbb10, 0xee18, 0xc524, 0x162a, 0x0, 0x0);
        gbc.writeMem(0x4698, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xee08, gbc.sp());
        EXPECT(0x469a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0348
        gbc.setState(0x1d9, 0x7298, 0x6e30, 0x63ea, 0x8baf, 0xe011, 0x1, 0x0);
        gbc.writeMem(0x1d9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x7298, gbc.sp());
        EXPECT(0x1db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0349
        gbc.setState(0xb621, 0x3651, 0x12d0, 0x926e, 0x9493, 0xf696, 0x0, 0x1);
        gbc.writeMem(0xb621, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x3651, gbc.sp());
        EXPECT(0xb623, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb621));
        EXPECT(0xaf, gbc.readMem(0xb622));
        // CB AF 034A
        gbc.setState(0x823d, 0x66ae, 0x7d0, 0xf5ae, 0x9671, 0x99ba, 0x1, 0x1);
        gbc.writeMem(0x823d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x66ae, gbc.sp());
        EXPECT(0x823f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x823d));
        EXPECT(0xaf, gbc.readMem(0x823e));
        // CB AF 034C
        gbc.setState(0xdec0, 0xe3b9, 0xb880, 0x3264, 0xb2fc, 0x32a, 0x0, 0x0);
        gbc.writeMem(0xdec0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xe3b9, gbc.sp());
        EXPECT(0xdec2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdec0));
        EXPECT(0xaf, gbc.readMem(0xdec1));
        // CB AF 034D
        gbc.setState(0x50e0, 0xb328, 0x200, 0xeead, 0x4c21, 0x2fb0, 0x1, 0x1);
        gbc.writeMem(0x50e0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xb328, gbc.sp());
        EXPECT(0x50e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 034E
        gbc.setState(0x2f26, 0x7272, 0x8f50, 0x450b, 0x2b39, 0x820c, 0x1, 0x1);
        gbc.writeMem(0x2f26, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x7272, gbc.sp());
        EXPECT(0x2f28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 034F
        gbc.setState(0x47e0, 0x4426, 0xd820, 0xc72e, 0x77be, 0x13fc, 0x1, 0x1);
        gbc.writeMem(0x47e0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x4426, gbc.sp());
        EXPECT(0x47e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0350
        gbc.setState(0xda0f, 0x6b96, 0x2c60, 0x7867, 0x2f9a, 0xfa10, 0x0, 0x0);
        gbc.writeMem(0xda0f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x6b96, gbc.sp());
        EXPECT(0xda11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda0f));
        EXPECT(0xaf, gbc.readMem(0xda10));
        // CB AF 0352
        gbc.setState(0x391b, 0x58b1, 0x1e90, 0xbcf9, 0x5742, 0xc0ad, 0x1, 0x1);
        gbc.writeMem(0x391b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x58b1, gbc.sp());
        EXPECT(0x391d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0353
        gbc.setState(0x67e2, 0x81c2, 0xe5c0, 0xc76e, 0x7edd, 0xd63, 0x0, 0x0);
        gbc.writeMem(0x67e2, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x81c2, gbc.sp());
        EXPECT(0x67e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0354
        gbc.setState(0x35f3, 0x3825, 0xc5f0, 0xd4ef, 0xe17c, 0x6b90, 0x1, 0x1);
        gbc.writeMem(0x35f3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x3825, gbc.sp());
        EXPECT(0x35f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0355
        gbc.setState(0xc859, 0xf55f, 0xab40, 0x5171, 0x4c9e, 0xb83b, 0x0, 0x1);
        gbc.writeMem(0xc859, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xf55f, gbc.sp());
        EXPECT(0xc85b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc859));
        EXPECT(0xaf, gbc.readMem(0xc85a));
        // CB AF 0356
        gbc.setState(0x24e7, 0xf32b, 0x5600, 0xa1cb, 0xc722, 0x4989, 0x0, 0x0);
        gbc.writeMem(0x24e7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xf32b, gbc.sp());
        EXPECT(0x24e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0357
        gbc.setState(0x6c0a, 0xa2bf, 0xea70, 0x936b, 0xf1dc, 0x1b8d, 0x1, 0x0);
        gbc.writeMem(0x6c0a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xa2bf, gbc.sp());
        EXPECT(0x6c0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0358
        gbc.setState(0x945d, 0x2cdd, 0xb410, 0x2ab5, 0x221, 0x3e98, 0x1, 0x0);
        gbc.writeMem(0x945d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x2cdd, gbc.sp());
        EXPECT(0x945f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x945d));
        EXPECT(0xaf, gbc.readMem(0x945e));
        // CB AF 0359
        gbc.setState(0x7c09, 0x120b, 0x7660, 0x7f52, 0xbd0c, 0xcc88, 0x1, 0x0);
        gbc.writeMem(0x7c09, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x120b, gbc.sp());
        EXPECT(0x7c0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 035B
        gbc.setState(0x39b3, 0xdca5, 0x7440, 0x921b, 0x9a09, 0xe5b2, 0x1, 0x1);
        gbc.writeMem(0x39b3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xdca5, gbc.sp());
        EXPECT(0x39b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 035C
        gbc.setState(0x3126, 0x96b, 0x71a0, 0x904a, 0x2087, 0xa689, 0x1, 0x1);
        gbc.writeMem(0x3126, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x96b, gbc.sp());
        EXPECT(0x3128, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 035D
        gbc.setState(0x3d9a, 0x4365, 0xbe90, 0xf738, 0x7d8b, 0xb23b, 0x0, 0x0);
        gbc.writeMem(0x3d9a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x4365, gbc.sp());
        EXPECT(0x3d9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 035E
        gbc.setState(0xea60, 0x9ecd, 0x3a80, 0x1c64, 0x53bc, 0xd984, 0x1, 0x1);
        gbc.writeMem(0xea60, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x9ecd, gbc.sp());
        EXPECT(0xea62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea60));
        EXPECT(0xaf, gbc.readMem(0xea61));
        // CB AF 035F
        gbc.setState(0x7d23, 0xaa8f, 0x9520, 0xc145, 0x939f, 0x6355, 0x1, 0x1);
        gbc.writeMem(0x7d23, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xaa8f, gbc.sp());
        EXPECT(0x7d25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0360
        gbc.setState(0x8cd3, 0x73a4, 0x7bf0, 0x68d5, 0xcc13, 0xa8a0, 0x1, 0x1);
        gbc.writeMem(0x8cd3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x73a4, gbc.sp());
        EXPECT(0x8cd5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cd3));
        EXPECT(0xaf, gbc.readMem(0x8cd4));
        // CB AF 0361
        gbc.setState(0x2598, 0x39f, 0x64f0, 0xb37c, 0xe1c5, 0x6b5f, 0x1, 0x1);
        gbc.writeMem(0x2598, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x39f, gbc.sp());
        EXPECT(0x259a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0362
        gbc.setState(0x348c, 0x9053, 0xc730, 0xf602, 0x6175, 0xc801, 0x0, 0x1);
        gbc.writeMem(0x348c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x9053, gbc.sp());
        EXPECT(0x348e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0363
        gbc.setState(0x72ff, 0xe4e3, 0x6b70, 0xf051, 0xa000, 0x3ef8, 0x1, 0x1);
        gbc.writeMem(0x72ff, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xe4e3, gbc.sp());
        EXPECT(0x7301, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0364
        gbc.setState(0x4afb, 0x89ab, 0x2140, 0x57d3, 0xe890, 0xa03f, 0x0, 0x1);
        gbc.writeMem(0x4afb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x89ab, gbc.sp());
        EXPECT(0x4afd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0365
        gbc.setState(0x2cbb, 0x1921, 0x6b40, 0x7675, 0xd984, 0xce90, 0x0, 0x0);
        gbc.writeMem(0x2cbb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x1921, gbc.sp());
        EXPECT(0x2cbd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0366
        gbc.setState(0x16c8, 0xdda7, 0x4700, 0xc67c, 0x28d3, 0xe844, 0x1, 0x1);
        gbc.writeMem(0x16c8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xdda7, gbc.sp());
        EXPECT(0x16ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0367
        gbc.setState(0xacca, 0xfd0d, 0xc050, 0xd78e, 0xdace, 0xf1d5, 0x0, 0x0);
        gbc.writeMem(0xacca, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xfd0d, gbc.sp());
        EXPECT(0xaccc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacca));
        EXPECT(0xaf, gbc.readMem(0xaccb));
        // CB AF 0368
        gbc.setState(0xc70, 0x2ac9, 0x7910, 0x7131, 0x11f4, 0xaf2d, 0x1, 0x1);
        gbc.writeMem(0xc70, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x2ac9, gbc.sp());
        EXPECT(0xc72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0369
        gbc.setState(0xa98e, 0x8af7, 0x670, 0x5d35, 0xd2, 0x1d79, 0x0, 0x1);
        gbc.writeMem(0xa98e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x8af7, gbc.sp());
        EXPECT(0xa990, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa98e));
        EXPECT(0xaf, gbc.readMem(0xa98f));
        // CB AF 036A
        gbc.setState(0xbf1b, 0x13ab, 0x2b90, 0x2ddc, 0xf7dc, 0x85, 0x1, 0x1);
        gbc.writeMem(0xbf1b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x13ab, gbc.sp());
        EXPECT(0xbf1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf1b));
        EXPECT(0xaf, gbc.readMem(0xbf1c));
        // CB AF 036B
        gbc.setState(0xdea3, 0xa7a6, 0x9510, 0xe25b, 0xfa98, 0xdc7f, 0x0, 0x1);
        gbc.writeMem(0xdea3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xa7a6, gbc.sp());
        EXPECT(0xdea5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdea3));
        EXPECT(0xaf, gbc.readMem(0xdea4));
        // CB AF 036C
        gbc.setState(0x2763, 0x390a, 0xe00, 0xe95e, 0x8999, 0x1489, 0x1, 0x0);
        gbc.writeMem(0x2763, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x390a, gbc.sp());
        EXPECT(0x2765, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 036D
        gbc.setState(0x312c, 0xfa2b, 0x30c0, 0x4d4a, 0x9ad6, 0x1488, 0x0, 0x0);
        gbc.writeMem(0x312c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xfa2b, gbc.sp());
        EXPECT(0x312e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 036F
        gbc.setState(0xca37, 0x5935, 0x30, 0xa8dd, 0xf9e6, 0xb270, 0x1, 0x0);
        gbc.writeMem(0xca37, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x5935, gbc.sp());
        EXPECT(0xca39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca37));
        EXPECT(0xaf, gbc.readMem(0xca38));
        // CB AF 0370
        gbc.setState(0x5316, 0x5eca, 0x4010, 0x1a0, 0xc4a3, 0x3b44, 0x0, 0x0);
        gbc.writeMem(0x5316, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x5eca, gbc.sp());
        EXPECT(0x5318, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0371
        gbc.setState(0x6fbd, 0x745e, 0xd590, 0xc419, 0xedf7, 0xd30, 0x1, 0x0);
        gbc.writeMem(0x6fbd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x745e, gbc.sp());
        EXPECT(0x6fbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0372
        gbc.setState(0xc49, 0x669d, 0x34c0, 0xaeb6, 0xddad, 0x3d19, 0x0, 0x1);
        gbc.writeMem(0xc49, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x669d, gbc.sp());
        EXPECT(0xc4b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0373
        gbc.setState(0x84d7, 0x4d93, 0x7750, 0xd65, 0xe12, 0x45dd, 0x1, 0x0);
        gbc.writeMem(0x84d7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x4d93, gbc.sp());
        EXPECT(0x84d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84d7));
        EXPECT(0xaf, gbc.readMem(0x84d8));
        // CB AF 0374
        gbc.setState(0xc9e0, 0xb687, 0xc1f0, 0x27a4, 0x878d, 0x766a, 0x1, 0x0);
        gbc.writeMem(0xc9e0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xb687, gbc.sp());
        EXPECT(0xc9e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9e0));
        EXPECT(0xaf, gbc.readMem(0xc9e1));
        // CB AF 0375
        gbc.setState(0x836d, 0xd6b, 0x62d0, 0x2633, 0x1bee, 0x4c5, 0x0, 0x1);
        gbc.writeMem(0x836d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xd6b, gbc.sp());
        EXPECT(0x836f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x836d));
        EXPECT(0xaf, gbc.readMem(0x836e));
        // CB AF 0376
        gbc.setState(0x38ea, 0x74f7, 0x9aa0, 0xa104, 0xe56a, 0x1b82, 0x1, 0x1);
        gbc.writeMem(0x38ea, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x74f7, gbc.sp());
        EXPECT(0x38ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0377
        gbc.setState(0xd46, 0x1e2, 0x3b20, 0x29a5, 0xf76d, 0x781, 0x0, 0x1);
        gbc.writeMem(0xd46, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x1e2, gbc.sp());
        EXPECT(0xd48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0378
        gbc.setState(0x139c, 0x9b24, 0xf2d0, 0x2987, 0xc84b, 0xfe02, 0x0, 0x1);
        gbc.writeMem(0x139c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x9b24, gbc.sp());
        EXPECT(0x139e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0379
        gbc.setState(0xd5d3, 0x4173, 0x8b40, 0x1ac0, 0xe31a, 0x8619, 0x0, 0x1);
        gbc.writeMem(0xd5d3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x4173, gbc.sp());
        EXPECT(0xd5d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5d3));
        EXPECT(0xaf, gbc.readMem(0xd5d4));
        // CB AF 037A
        gbc.setState(0x61d9, 0x7732, 0xe8e0, 0x6222, 0x4b48, 0xfc7e, 0x1, 0x1);
        gbc.writeMem(0x61d9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x7732, gbc.sp());
        EXPECT(0x61db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 037B
        gbc.setState(0x7896, 0x6bcd, 0xcc20, 0x4353, 0xe6f6, 0x1357, 0x1, 0x1);
        gbc.writeMem(0x7896, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x6bcd, gbc.sp());
        EXPECT(0x7898, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 037C
        gbc.setState(0x2e09, 0xc7d5, 0x7450, 0xe7fd, 0x64db, 0xd444, 0x0, 0x0);
        gbc.writeMem(0x2e09, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xc7d5, gbc.sp());
        EXPECT(0x2e0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 037D
        gbc.setState(0x7ee7, 0x1054, 0x7cd0, 0xe0de, 0x1de3, 0xb9b, 0x0, 0x1);
        gbc.writeMem(0x7ee7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x1054, gbc.sp());
        EXPECT(0x7ee9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 037E
        gbc.setState(0x5362, 0x641a, 0x61f0, 0xc5dc, 0x2199, 0x55c3, 0x0, 0x0);
        gbc.writeMem(0x5362, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x641a, gbc.sp());
        EXPECT(0x5364, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 037F
        gbc.setState(0x54b1, 0xbc38, 0x23a0, 0xece4, 0xf724, 0x61c0, 0x0, 0x1);
        gbc.writeMem(0x54b1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xbc38, gbc.sp());
        EXPECT(0x54b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0380
        gbc.setState(0xe0d, 0xdc00, 0x1760, 0xf773, 0x3bb4, 0xcaa1, 0x0, 0x0);
        gbc.writeMem(0xe0d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xdc00, gbc.sp());
        EXPECT(0xe0f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0381
        gbc.setState(0xe867, 0xb9f2, 0xae90, 0xe71a, 0xba75, 0x1f7, 0x0, 0x1);
        gbc.writeMem(0xe867, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xb9f2, gbc.sp());
        EXPECT(0xe869, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe867));
        EXPECT(0xaf, gbc.readMem(0xe868));
        // CB AF 0382
        gbc.setState(0x16a6, 0x9edf, 0xc310, 0xb92a, 0x2787, 0xd849, 0x1, 0x0);
        gbc.writeMem(0x16a6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x9edf, gbc.sp());
        EXPECT(0x16a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0383
        gbc.setState(0x9979, 0x2f6f, 0x44f0, 0x71d6, 0x6fa8, 0x8bf9, 0x1, 0x0);
        gbc.writeMem(0x9979, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x2f6f, gbc.sp());
        EXPECT(0x997b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9979));
        EXPECT(0xaf, gbc.readMem(0x997a));
        // CB AF 0384
        gbc.setState(0x4158, 0xa895, 0xc40, 0xcd06, 0x5bfc, 0x76d3, 0x1, 0x0);
        gbc.writeMem(0x4158, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xa895, gbc.sp());
        EXPECT(0x415a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0385
        gbc.setState(0x3853, 0xf136, 0x32a0, 0xc00b, 0x5e3e, 0xfb71, 0x0, 0x1);
        gbc.writeMem(0x3853, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xf136, gbc.sp());
        EXPECT(0x3855, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0386
        gbc.setState(0x2ee, 0xe82b, 0xcc10, 0x21ec, 0xada3, 0x9899, 0x0, 0x0);
        gbc.writeMem(0x2ee, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xe82b, gbc.sp());
        EXPECT(0x2f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0387
        gbc.setState(0x5db1, 0x64b3, 0xaef0, 0x48cb, 0xb445, 0x2ffc, 0x0, 0x1);
        gbc.writeMem(0x5db1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x64b3, gbc.sp());
        EXPECT(0x5db3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0388
        gbc.setState(0x9a9b, 0xdff1, 0xa0a0, 0x313, 0xbadb, 0xd673, 0x0, 0x0);
        gbc.writeMem(0x9a9b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xdff1, gbc.sp());
        EXPECT(0x9a9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a9b));
        EXPECT(0xaf, gbc.readMem(0x9a9c));
        // CB AF 0389
        gbc.setState(0x4675, 0xb9a6, 0x6600, 0xa26f, 0x8cf0, 0xa3b4, 0x0, 0x1);
        gbc.writeMem(0x4675, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xb9a6, gbc.sp());
        EXPECT(0x4677, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 038A
        gbc.setState(0x17b9, 0xd3f5, 0x1af0, 0x6b70, 0x2966, 0x5986, 0x1, 0x0);
        gbc.writeMem(0x17b9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xd3f5, gbc.sp());
        EXPECT(0x17bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 038B
        gbc.setState(0x5def, 0x9c6, 0xf440, 0x44cb, 0x5f79, 0x527f, 0x1, 0x1);
        gbc.writeMem(0x5def, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x9c6, gbc.sp());
        EXPECT(0x5df1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 038C
        gbc.setState(0x71e1, 0x7c0a, 0x46a0, 0x3bc5, 0xb92d, 0x1b70, 0x1, 0x1);
        gbc.writeMem(0x71e1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x7c0a, gbc.sp());
        EXPECT(0x71e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 038D
        gbc.setState(0x1b9f, 0xf98e, 0x28f0, 0x7229, 0x9ca3, 0x341d, 0x1, 0x0);
        gbc.writeMem(0x1b9f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xf98e, gbc.sp());
        EXPECT(0x1ba1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 038E
        gbc.setState(0x4b22, 0xa6fb, 0x42a0, 0x396c, 0xafbc, 0x8f4a, 0x0, 0x1);
        gbc.writeMem(0x4b22, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xa6fb, gbc.sp());
        EXPECT(0x4b24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 038F
        gbc.setState(0xde9e, 0xc3ae, 0x3d50, 0xfb61, 0x1287, 0x6ecc, 0x1, 0x1);
        gbc.writeMem(0xde9e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xc3ae, gbc.sp());
        EXPECT(0xdea0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde9e));
        EXPECT(0xaf, gbc.readMem(0xde9f));
        // CB AF 0390
        gbc.setState(0xad64, 0x901e, 0x69d0, 0x3fd4, 0x8112, 0x9f45, 0x1, 0x0);
        gbc.writeMem(0xad64, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x901e, gbc.sp());
        EXPECT(0xad66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad64));
        EXPECT(0xaf, gbc.readMem(0xad65));
        // CB AF 0391
        gbc.setState(0x87e7, 0x87d7, 0x1400, 0x3ac9, 0x17d3, 0xd6d4, 0x1, 0x1);
        gbc.writeMem(0x87e7, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x87d7, gbc.sp());
        EXPECT(0x87e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87e7));
        EXPECT(0xaf, gbc.readMem(0x87e8));
        // CB AF 0392
        gbc.setState(0xd6a2, 0x2f32, 0xc7f0, 0xf7cc, 0x4e2, 0x79eb, 0x1, 0x1);
        gbc.writeMem(0xd6a2, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x2f32, gbc.sp());
        EXPECT(0xd6a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6a2));
        EXPECT(0xaf, gbc.readMem(0xd6a3));
        // CB AF 0393
        gbc.setState(0x26c1, 0x6568, 0x93e0, 0xb1c2, 0xa10a, 0x29b6, 0x0, 0x1);
        gbc.writeMem(0x26c1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x6568, gbc.sp());
        EXPECT(0x26c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 0394
        gbc.setState(0xacfa, 0xca97, 0xd180, 0xb411, 0xc729, 0x374, 0x0, 0x1);
        gbc.writeMem(0xacfa, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xca97, gbc.sp());
        EXPECT(0xacfc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacfa));
        EXPECT(0xaf, gbc.readMem(0xacfb));
        // CB AF 0396
        gbc.setState(0x71d4, 0xe392, 0x53d0, 0xdb3d, 0x3ad4, 0x29e3, 0x0, 0x0);
        gbc.writeMem(0x71d4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xe392, gbc.sp());
        EXPECT(0x71d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 0397
        gbc.setState(0xef89, 0x1d35, 0x37d0, 0xeece, 0xd3f2, 0xefe7, 0x0, 0x0);
        gbc.writeMem(0xef89, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x1d35, gbc.sp());
        EXPECT(0xef8b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef89));
        EXPECT(0xaf, gbc.readMem(0xef8a));
        // CB AF 0398
        gbc.setState(0xa7ca, 0xeb2b, 0x2090, 0x4dae, 0x67e1, 0xd920, 0x1, 0x0);
        gbc.writeMem(0xa7ca, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xeb2b, gbc.sp());
        EXPECT(0xa7cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7ca));
        EXPECT(0xaf, gbc.readMem(0xa7cb));
        // CB AF 0399
        gbc.setState(0x66a5, 0x652c, 0xb470, 0x718f, 0x3ab0, 0x476d, 0x1, 0x0);
        gbc.writeMem(0x66a5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x652c, gbc.sp());
        EXPECT(0x66a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 039A
        gbc.setState(0x26ff, 0x3e91, 0x6e60, 0x376d, 0x537a, 0x6d1c, 0x1, 0x1);
        gbc.writeMem(0x26ff, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x3e91, gbc.sp());
        EXPECT(0x2701, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 039B
        gbc.setState(0xb92e, 0x7d0e, 0x2600, 0x5a2b, 0x224c, 0xa483, 0x1, 0x0);
        gbc.writeMem(0xb92e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x7d0e, gbc.sp());
        EXPECT(0xb930, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb92e));
        EXPECT(0xaf, gbc.readMem(0xb92f));
        // CB AF 039C
        gbc.setState(0x9267, 0x4dcb, 0x5b90, 0xd413, 0x780, 0x3a14, 0x1, 0x0);
        gbc.writeMem(0x9267, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x4dcb, gbc.sp());
        EXPECT(0x9269, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9267));
        EXPECT(0xaf, gbc.readMem(0x9268));
        // CB AF 039E
        gbc.setState(0xca47, 0xbcf5, 0x4e50, 0x3927, 0x987a, 0x7e0e, 0x0, 0x0);
        gbc.writeMem(0xca47, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xbcf5, gbc.sp());
        EXPECT(0xca49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca47));
        EXPECT(0xaf, gbc.readMem(0xca48));
        // CB AF 039F
        gbc.setState(0xc378, 0x6e12, 0xed60, 0x80a1, 0x90fe, 0x349b, 0x1, 0x0);
        gbc.writeMem(0xc378, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x6e12, gbc.sp());
        EXPECT(0xc37a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc378));
        EXPECT(0xaf, gbc.readMem(0xc379));
        // CB AF 03A0
        gbc.setState(0x55ee, 0x9e46, 0x3850, 0xad7b, 0x2a28, 0x20d0, 0x0, 0x1);
        gbc.writeMem(0x55ee, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x9e46, gbc.sp());
        EXPECT(0x55f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03A1
        gbc.setState(0x9aab, 0x5c32, 0xb8a0, 0xa62, 0x75f1, 0x1b8c, 0x0, 0x1);
        gbc.writeMem(0x9aab, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x5c32, gbc.sp());
        EXPECT(0x9aad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9aab));
        EXPECT(0xaf, gbc.readMem(0x9aac));
        // CB AF 03A2
        gbc.setState(0x7802, 0x2bae, 0x4990, 0xb8b3, 0x83f5, 0x3dbc, 0x0, 0x0);
        gbc.writeMem(0x7802, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x2bae, gbc.sp());
        EXPECT(0x7804, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03A3
        gbc.setState(0x8f57, 0x7aa1, 0x1010, 0x91f0, 0xae79, 0xbe2f, 0x1, 0x0);
        gbc.writeMem(0x8f57, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x7aa1, gbc.sp());
        EXPECT(0x8f59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f57));
        EXPECT(0xaf, gbc.readMem(0x8f58));
        // CB AF 03A4
        gbc.setState(0x6c3d, 0x6143, 0x7690, 0x8640, 0x2a17, 0xb931, 0x1, 0x0);
        gbc.writeMem(0x6c3d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x6143, gbc.sp());
        EXPECT(0x6c3f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03A5
        gbc.setState(0x6350, 0x1eb9, 0x6070, 0xe302, 0x3158, 0x8d79, 0x0, 0x0);
        gbc.writeMem(0x6350, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x1eb9, gbc.sp());
        EXPECT(0x6352, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03A6
        gbc.setState(0x9f4b, 0x5910, 0x1e20, 0x8b40, 0x758a, 0x8985, 0x0, 0x1);
        gbc.writeMem(0x9f4b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x5910, gbc.sp());
        EXPECT(0x9f4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f4b));
        EXPECT(0xaf, gbc.readMem(0x9f4c));
        // CB AF 03A7
        gbc.setState(0x4777, 0x8afe, 0x3090, 0xd659, 0x926, 0xec21, 0x1, 0x0);
        gbc.writeMem(0x4777, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x8afe, gbc.sp());
        EXPECT(0x4779, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03A8
        gbc.setState(0xe211, 0x70c8, 0x8ab0, 0x5d35, 0xca1a, 0x7f6a, 0x0, 0x0);
        gbc.writeMem(0xe211, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x70c8, gbc.sp());
        EXPECT(0xe213, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe211));
        EXPECT(0xaf, gbc.readMem(0xe212));
        // CB AF 03A9
        gbc.setState(0xc9e9, 0x8c3d, 0x1040, 0x5f48, 0xc254, 0xb2e9, 0x0, 0x1);
        gbc.writeMem(0xc9e9, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x8c3d, gbc.sp());
        EXPECT(0xc9eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9e9));
        EXPECT(0xaf, gbc.readMem(0xc9ea));
        // CB AF 03AA
        gbc.setState(0x80bd, 0x8f0d, 0x7240, 0x432f, 0x54c2, 0xe738, 0x0, 0x0);
        gbc.writeMem(0x80bd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x8f0d, gbc.sp());
        EXPECT(0x80bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80bd));
        EXPECT(0xaf, gbc.readMem(0x80be));
        // CB AF 03AB
        gbc.setState(0xbbb6, 0x9f98, 0x8b60, 0x83bb, 0xb361, 0xc37b, 0x0, 0x0);
        gbc.writeMem(0xbbb6, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x9f98, gbc.sp());
        EXPECT(0xbbb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbb6));
        EXPECT(0xaf, gbc.readMem(0xbbb7));
        // CB AF 03AC
        gbc.setState(0x8e3e, 0x3d8, 0x640, 0xb598, 0xa54e, 0x7da1, 0x0, 0x0);
        gbc.writeMem(0x8e3e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x3d8, gbc.sp());
        EXPECT(0x8e40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e3e));
        EXPECT(0xaf, gbc.readMem(0x8e3f));
        // CB AF 03AD
        gbc.setState(0x25d5, 0x63cf, 0x5210, 0x7691, 0x9a3, 0x9de2, 0x0, 0x1);
        gbc.writeMem(0x25d5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x63cf, gbc.sp());
        EXPECT(0x25d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03AE
        gbc.setState(0xbfcd, 0x24c9, 0xab10, 0x516a, 0xe138, 0x99fe, 0x1, 0x0);
        gbc.writeMem(0xbfcd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x24c9, gbc.sp());
        EXPECT(0xbfcf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfcd));
        EXPECT(0xaf, gbc.readMem(0xbfce));
        // CB AF 03AF
        gbc.setState(0xede8, 0x2742, 0x54e0, 0x8418, 0xa328, 0xe61f, 0x0, 0x1);
        gbc.writeMem(0xede8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x2742, gbc.sp());
        EXPECT(0xedea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xede8));
        EXPECT(0xaf, gbc.readMem(0xede9));
        // CB AF 03B0
        gbc.setState(0xdd5f, 0x4fa3, 0xfaa0, 0x4b0, 0x2981, 0x647c, 0x0, 0x1);
        gbc.writeMem(0xdd5f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x4fa3, gbc.sp());
        EXPECT(0xdd61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd5f));
        EXPECT(0xaf, gbc.readMem(0xdd60));
        // CB AF 03B1
        gbc.setState(0x7df3, 0xd559, 0x5440, 0x8d48, 0xe436, 0x97b1, 0x1, 0x1);
        gbc.writeMem(0x7df3, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xd559, gbc.sp());
        EXPECT(0x7df5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03B2
        gbc.setState(0x6c34, 0x234e, 0x4510, 0x9131, 0x5e59, 0x3129, 0x1, 0x1);
        gbc.writeMem(0x6c34, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x234e, gbc.sp());
        EXPECT(0x6c36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03B3
        gbc.setState(0x156d, 0x2092, 0x6570, 0x212b, 0x8eb5, 0x7148, 0x1, 0x1);
        gbc.writeMem(0x156d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x2092, gbc.sp());
        EXPECT(0x156f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03B4
        gbc.setState(0xdd07, 0x780f, 0x23f0, 0xf2da, 0x1a8b, 0xa36e, 0x0, 0x1);
        gbc.writeMem(0xdd07, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x780f, gbc.sp());
        EXPECT(0xdd09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd07));
        EXPECT(0xaf, gbc.readMem(0xdd08));
        // CB AF 03B5
        gbc.setState(0x4453, 0x1e64, 0xadb0, 0xd0c, 0xdaca, 0xd530, 0x0, 0x1);
        gbc.writeMem(0x4453, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x1e64, gbc.sp());
        EXPECT(0x4455, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03B7
        gbc.setState(0x9ab5, 0x929c, 0x6c80, 0xa06d, 0xca01, 0xc6fb, 0x0, 0x1);
        gbc.writeMem(0x9ab5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x929c, gbc.sp());
        EXPECT(0x9ab7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ab5));
        EXPECT(0xaf, gbc.readMem(0x9ab6));
        // CB AF 03B8
        gbc.setState(0xabd4, 0xca61, 0x1530, 0xf3d1, 0x183c, 0x5c00, 0x1, 0x0);
        gbc.writeMem(0xabd4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xca61, gbc.sp());
        EXPECT(0xabd6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabd4));
        EXPECT(0xaf, gbc.readMem(0xabd5));
        // CB AF 03B9
        gbc.setState(0x4a9b, 0x3912, 0x3970, 0xa79d, 0x4eff, 0xb05e, 0x1, 0x1);
        gbc.writeMem(0x4a9b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x3912, gbc.sp());
        EXPECT(0x4a9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03BA
        gbc.setState(0x2611, 0x9fca, 0xe7f0, 0x5534, 0x3c0f, 0xe4bc, 0x1, 0x0);
        gbc.writeMem(0x2611, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x9fca, gbc.sp());
        EXPECT(0x2613, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03BB
        gbc.setState(0x1cff, 0xc51b, 0xad10, 0xa54e, 0x1943, 0x2763, 0x1, 0x0);
        gbc.writeMem(0x1cff, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xc51b, gbc.sp());
        EXPECT(0x1d01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03BC
        gbc.setState(0xa00f, 0xa7b6, 0x4520, 0x6673, 0xfdc6, 0xc740, 0x0, 0x1);
        gbc.writeMem(0xa00f, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xa7b6, gbc.sp());
        EXPECT(0xa011, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa00f));
        EXPECT(0xaf, gbc.readMem(0xa010));
        // CB AF 03BD
        gbc.setState(0x6ae5, 0x76a5, 0xb580, 0x5b80, 0x6bb2, 0xb470, 0x1, 0x1);
        gbc.writeMem(0x6ae5, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x76a5, gbc.sp());
        EXPECT(0x6ae7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03BE
        gbc.setState(0x672e, 0x8650, 0x6f90, 0xa53e, 0x3951, 0xbe2, 0x0, 0x0);
        gbc.writeMem(0x672e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x8650, gbc.sp());
        EXPECT(0x6730, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03BF
        gbc.setState(0x3597, 0xb4fb, 0x7430, 0x3758, 0xf263, 0x8eab, 0x1, 0x1);
        gbc.writeMem(0x3597, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xb4fb, gbc.sp());
        EXPECT(0x3599, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03C0
        gbc.setState(0x3131, 0x7f1d, 0x8f30, 0x789e, 0x4fe8, 0x71ee, 0x1, 0x0);
        gbc.writeMem(0x3131, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x7f1d, gbc.sp());
        EXPECT(0x3133, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03C1
        gbc.setState(0x6cfd, 0x3b64, 0x86c0, 0xc061, 0x865f, 0x2372, 0x1, 0x1);
        gbc.writeMem(0x6cfd, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x3b64, gbc.sp());
        EXPECT(0x6cff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03C2
        gbc.setState(0x6168, 0x9fb6, 0xbc10, 0x50a6, 0x8511, 0xf34, 0x0, 0x1);
        gbc.writeMem(0x6168, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x9fb6, gbc.sp());
        EXPECT(0x616a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03C3
        gbc.setState(0xdf81, 0xab62, 0x6040, 0x1067, 0xb3e8, 0x2895, 0x0, 0x1);
        gbc.writeMem(0xdf81, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xab62, gbc.sp());
        EXPECT(0xdf83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf81));
        EXPECT(0xaf, gbc.readMem(0xdf82));
        // CB AF 03C4
        gbc.setState(0x54df, 0xb391, 0x7b80, 0x1aa4, 0xee5e, 0xf610, 0x0, 0x0);
        gbc.writeMem(0x54df, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xb391, gbc.sp());
        EXPECT(0x54e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03C5
        gbc.setState(0x9a02, 0xb1c6, 0xe830, 0xf4a8, 0xe1c4, 0x3013, 0x1, 0x1);
        gbc.writeMem(0x9a02, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xb1c6, gbc.sp());
        EXPECT(0x9a04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a02));
        EXPECT(0xaf, gbc.readMem(0x9a03));
        // CB AF 03C6
        gbc.setState(0x6f30, 0x6b89, 0x9c10, 0x4d60, 0x85d9, 0xe9b8, 0x0, 0x1);
        gbc.writeMem(0x6f30, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x6b89, gbc.sp());
        EXPECT(0x6f32, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03C7
        gbc.setState(0x1486, 0xb467, 0x9790, 0xedec, 0x1d1d, 0x7f15, 0x1, 0x0);
        gbc.writeMem(0x1486, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xb467, gbc.sp());
        EXPECT(0x1488, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03C8
        gbc.setState(0x6427, 0xa332, 0x1a90, 0x5274, 0x4ae6, 0x85cb, 0x1, 0x0);
        gbc.writeMem(0x6427, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xa332, gbc.sp());
        EXPECT(0x6429, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03C9
        gbc.setState(0xd632, 0x962b, 0x1090, 0xe7ba, 0x1d86, 0xdd01, 0x1, 0x0);
        gbc.writeMem(0xd632, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x962b, gbc.sp());
        EXPECT(0xd634, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd632));
        EXPECT(0xaf, gbc.readMem(0xd633));
        // CB AF 03CA
        gbc.setState(0xae2d, 0x5f5e, 0x8e70, 0x60b, 0xa59c, 0x1a5d, 0x0, 0x0);
        gbc.writeMem(0xae2d, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x5f5e, gbc.sp());
        EXPECT(0xae2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae2d));
        EXPECT(0xaf, gbc.readMem(0xae2e));
        // CB AF 03CC
        gbc.setState(0x8ef4, 0x899, 0x6a40, 0x778b, 0x4ee8, 0x8713, 0x0, 0x1);
        gbc.writeMem(0x8ef4, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x899, gbc.sp());
        EXPECT(0x8ef6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ef4));
        EXPECT(0xaf, gbc.readMem(0x8ef5));
        // CB AF 03CD
        gbc.setState(0x2478, 0xc747, 0xe090, 0xe3e7, 0xec77, 0x4982, 0x0, 0x0);
        gbc.writeMem(0x2478, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xc747, gbc.sp());
        EXPECT(0x247a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03CE
        gbc.setState(0x1f25, 0xd542, 0xb3a0, 0x37bd, 0xd3a9, 0x8204, 0x0, 0x1);
        gbc.writeMem(0x1f25, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xd542, gbc.sp());
        EXPECT(0x1f27, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03CF
        gbc.setState(0x8b28, 0x5fc0, 0xc620, 0xeaf4, 0x8f33, 0xd1c0, 0x1, 0x1);
        gbc.writeMem(0x8b28, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x5fc0, gbc.sp());
        EXPECT(0x8b2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b28));
        EXPECT(0xaf, gbc.readMem(0x8b29));
        // CB AF 03D0
        gbc.setState(0xc7ba, 0xe45c, 0x5cf0, 0x5d4f, 0x3ef0, 0xfa05, 0x0, 0x1);
        gbc.writeMem(0xc7ba, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xe45c, gbc.sp());
        EXPECT(0xc7bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7ba));
        EXPECT(0xaf, gbc.readMem(0xc7bb));
        // CB AF 03D1
        gbc.setState(0xb7ac, 0x21f3, 0x7fb0, 0x8b3e, 0x9213, 0xbd82, 0x1, 0x0);
        gbc.writeMem(0xb7ac, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x21f3, gbc.sp());
        EXPECT(0xb7ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7ac));
        EXPECT(0xaf, gbc.readMem(0xb7ad));
        // CB AF 03D2
        gbc.setState(0x1ac0, 0x911, 0xa770, 0x7c1b, 0x53ea, 0x4a46, 0x0, 0x1);
        gbc.writeMem(0x1ac0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x911, gbc.sp());
        EXPECT(0x1ac2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03D3
        gbc.setState(0x63da, 0x6baf, 0xfad0, 0xd7c5, 0x6080, 0xc656, 0x0, 0x1);
        gbc.writeMem(0x63da, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x6baf, gbc.sp());
        EXPECT(0x63dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03D4
        gbc.setState(0xb1b0, 0x41be, 0x150, 0x5a3, 0x69e7, 0x3e76, 0x0, 0x0);
        gbc.writeMem(0xb1b0, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x41be, gbc.sp());
        EXPECT(0xb1b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1b0));
        EXPECT(0xaf, gbc.readMem(0xb1b1));
        // CB AF 03D5
        gbc.setState(0x6eda, 0x889f, 0xe20, 0x62b5, 0xf110, 0xfe8, 0x1, 0x1);
        gbc.writeMem(0x6eda, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x889f, gbc.sp());
        EXPECT(0x6edc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03D6
        gbc.setState(0xe274, 0x1fd, 0x2540, 0x5f69, 0xc8df, 0x52b3, 0x0, 0x1);
        gbc.writeMem(0xe274, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x1fd, gbc.sp());
        EXPECT(0xe276, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe274));
        EXPECT(0xaf, gbc.readMem(0xe275));
        // CB AF 03D7
        gbc.setState(0x7b94, 0x93e4, 0xa7c0, 0x629f, 0xd444, 0x2668, 0x1, 0x0);
        gbc.writeMem(0x7b94, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x93e4, gbc.sp());
        EXPECT(0x7b96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03D8
        gbc.setState(0x15, 0x89fb, 0x8620, 0x8c6, 0xf0a0, 0xbc38, 0x1, 0x0);
        gbc.writeMem(0x15, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x89fb, gbc.sp());
        EXPECT(0x17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03D9
        gbc.setState(0x9f31, 0xa88d, 0xe900, 0x7a7c, 0xa0fc, 0x7e36, 0x0, 0x1);
        gbc.writeMem(0x9f31, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xa88d, gbc.sp());
        EXPECT(0x9f33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f31));
        EXPECT(0xaf, gbc.readMem(0x9f32));
        // CB AF 03DA
        gbc.setState(0xb44e, 0x2452, 0x6110, 0x42cc, 0xd4c3, 0xa23d, 0x1, 0x1);
        gbc.writeMem(0xb44e, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x2452, gbc.sp());
        EXPECT(0xb450, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb44e));
        EXPECT(0xaf, gbc.readMem(0xb44f));
        // CB AF 03DB
        gbc.setState(0xc5fb, 0xa923, 0xb070, 0xed18, 0xb9b4, 0x1174, 0x0, 0x1);
        gbc.writeMem(0xc5fb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xa923, gbc.sp());
        EXPECT(0xc5fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5fb));
        EXPECT(0xaf, gbc.readMem(0xc5fc));
        // CB AF 03DC
        gbc.setState(0x3600, 0x8061, 0xa0e0, 0x10f, 0x3452, 0xbe18, 0x0, 0x1);
        gbc.writeMem(0x3600, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x8061, gbc.sp());
        EXPECT(0x3602, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03DD
        gbc.setState(0xbb0a, 0x433e, 0xcda0, 0x3a16, 0x4d60, 0x4bf9, 0x0, 0x1);
        gbc.writeMem(0xbb0a, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x433e, gbc.sp());
        EXPECT(0xbb0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb0a));
        EXPECT(0xaf, gbc.readMem(0xbb0b));
        // CB AF 03DE
        gbc.setState(0x3a6b, 0x32b0, 0x6170, 0x9835, 0x44c, 0x7309, 0x0, 0x0);
        gbc.writeMem(0x3a6b, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x32b0, gbc.sp());
        EXPECT(0x3a6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03DF
        gbc.setState(0xb1a8, 0x2ad1, 0xf730, 0xe225, 0xd9a3, 0x7e2, 0x1, 0x1);
        gbc.writeMem(0xb1a8, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x2ad1, gbc.sp());
        EXPECT(0xb1aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1a8));
        EXPECT(0xaf, gbc.readMem(0xb1a9));
        // CB AF 03E0
        gbc.setState(0x32e1, 0xcb89, 0xc920, 0x3334, 0xe91, 0x9c29, 0x0, 0x1);
        gbc.writeMem(0x32e1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xcb89, gbc.sp());
        EXPECT(0x32e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03E1
        gbc.setState(0x80b2, 0x16e5, 0x75f0, 0x3a07, 0xec10, 0xdd39, 0x1, 0x0);
        gbc.writeMem(0x80b2, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x16e5, gbc.sp());
        EXPECT(0x80b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80b2));
        EXPECT(0xaf, gbc.readMem(0x80b3));
        // CB AF 03E2
        gbc.setState(0x8268, 0x6601, 0x93f0, 0xd477, 0x645b, 0xd13f, 0x0, 0x0);
        gbc.writeMem(0x8268, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x6601, gbc.sp());
        EXPECT(0x826a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8268));
        EXPECT(0xaf, gbc.readMem(0x8269));
        // CB AF 03E3
        gbc.setState(0x30eb, 0xd52d, 0x1da0, 0xc3a3, 0xdd7d, 0xefde, 0x0, 0x1);
        gbc.writeMem(0x30eb, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xd52d, gbc.sp());
        EXPECT(0x30ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03E4
        gbc.setState(0x573c, 0x3168, 0xeb60, 0x27af, 0xa481, 0xdf83, 0x1, 0x1);
        gbc.writeMem(0x573c, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x3168, gbc.sp());
        EXPECT(0x573e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB AF 03E5
        gbc.setState(0xcd21, 0xd5af, 0x45b0, 0xa5e7, 0xe26e, 0x1a3f, 0x0, 0x1);
        gbc.writeMem(0xcd21, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xd5af, gbc.sp());
        EXPECT(0xcd23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd21));
        EXPECT(0xaf, gbc.readMem(0xcd22));
        // CB AF 03E6
        gbc.setState(0x1526, 0x133c, 0xb750, 0x20ab, 0xfeac, 0x3505, 0x1, 0x0);
        gbc.writeMem(0x1526, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x133c, gbc.sp());
        EXPECT(0x1528, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB AF 03E7
        gbc.setState(0x59c1, 0x36f8, 0x4710, 0xc2b4, 0xcdcf, 0x1c93, 0x1, 0x0);
        gbc.writeMem(0x59c1, { 0xcb, 0xaf });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x36f8, gbc.sp());
        EXPECT(0x59c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
    }
