    TEST(gbcemu, opcode_cb_15) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 15 0000
        gbc.setState(0x452b, 0x7f51, 0x5c20, 0xd637, 0xaa08, 0x88ed, 0x1, 0x0);
        gbc.writeMem(0x452b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x7f51, gbc.sp());
        EXPECT(0x452d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0001
        gbc.setState(0x1330, 0x71a8, 0xd1a0, 0xddb4, 0x9aa0, 0x464f, 0x1, 0x1);
        gbc.writeMem(0x1330, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x71a8, gbc.sp());
        EXPECT(0x1332, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0002
        gbc.setState(0xc2e2, 0x2007, 0xdc0, 0x153, 0xd04c, 0x24ed, 0x0, 0x1);
        gbc.writeMem(0xc2e2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x2007, gbc.sp());
        EXPECT(0xc2e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2e2));
        EXPECT(0x15, gbc.readMem(0xc2e3));
        // CB 15 0003
        gbc.setState(0x4ed3, 0x9418, 0x710, 0x3649, 0xb5b0, 0xe793, 0x1, 0x1);
        gbc.writeMem(0x4ed3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x9418, gbc.sp());
        EXPECT(0x4ed5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0004
        gbc.setState(0x99f7, 0x8dc0, 0x8430, 0x73d8, 0xf120, 0x3ce0, 0x0, 0x0);
        gbc.writeMem(0x99f7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x8dc0, gbc.sp());
        EXPECT(0x99f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99f7));
        EXPECT(0x15, gbc.readMem(0x99f8));
        // CB 15 0005
        gbc.setState(0x1084, 0x89f1, 0x3d80, 0x177c, 0xc147, 0xcea6, 0x0, 0x1);
        gbc.writeMem(0x1084, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x89f1, gbc.sp());
        EXPECT(0x1086, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0006
        gbc.setState(0x90fe, 0x2d4d, 0x9230, 0x9642, 0xe970, 0xd09d, 0x1, 0x1);
        gbc.writeMem(0x90fe, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x2d4d, gbc.sp());
        EXPECT(0x9100, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90fe));
        EXPECT(0x15, gbc.readMem(0x90ff));
        // CB 15 0007
        gbc.setState(0x8c1b, 0xbd43, 0x3a80, 0xd8d7, 0x4e0b, 0xa0c8, 0x1, 0x0);
        gbc.writeMem(0x8c1b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xbd43, gbc.sp());
        EXPECT(0x8c1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c1b));
        EXPECT(0x15, gbc.readMem(0x8c1c));
        // CB 15 0008
        gbc.setState(0x1674, 0xdf53, 0x91b0, 0x2018, 0xe104, 0xec32, 0x0, 0x0);
        gbc.writeMem(0x1674, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xdf53, gbc.sp());
        EXPECT(0x1676, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0009
        gbc.setState(0x4021, 0xac8f, 0x50a0, 0xf782, 0xbe72, 0x3660, 0x0, 0x0);
        gbc.writeMem(0x4021, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xac8f, gbc.sp());
        EXPECT(0x4023, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 000A
        gbc.setState(0xc73, 0x6180, 0x8720, 0x8c55, 0x231c, 0x4b05, 0x1, 0x1);
        gbc.writeMem(0xc73, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x6180, gbc.sp());
        EXPECT(0xc75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 000B
        gbc.setState(0xb4b0, 0xbf6d, 0x70d0, 0x8019, 0xc581, 0x7b35, 0x1, 0x1);
        gbc.writeMem(0xb4b0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xbf6d, gbc.sp());
        EXPECT(0xb4b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4b0));
        EXPECT(0x15, gbc.readMem(0xb4b1));
        // CB 15 000C
        gbc.setState(0x6980, 0xb7fa, 0x34b0, 0xc122, 0xc61e, 0x8931, 0x0, 0x1);
        gbc.writeMem(0x6980, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xb7fa, gbc.sp());
        EXPECT(0x6982, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 000D
        gbc.setState(0xadb9, 0x3b1, 0x2dc0, 0x5db, 0x2d24, 0xda92, 0x1, 0x1);
        gbc.writeMem(0xadb9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x3b1, gbc.sp());
        EXPECT(0xadbb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadb9));
        EXPECT(0x15, gbc.readMem(0xadba));
        // CB 15 000F
        gbc.setState(0x6e5c, 0x6ce6, 0xa4e0, 0x90f1, 0x96b3, 0xa2a, 0x0, 0x1);
        gbc.writeMem(0x6e5c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x6ce6, gbc.sp());
        EXPECT(0x6e5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0010
        gbc.setState(0xae41, 0xe7f3, 0xd3e0, 0x51e4, 0x139d, 0x7df, 0x0, 0x0);
        gbc.writeMem(0xae41, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xe7f3, gbc.sp());
        EXPECT(0xae43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae41));
        EXPECT(0x15, gbc.readMem(0xae42));
        // CB 15 0011
        gbc.setState(0xb954, 0x2ea4, 0x7e00, 0x8646, 0xc1c8, 0x8ec4, 0x0, 0x0);
        gbc.writeMem(0xb954, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x2ea4, gbc.sp());
        EXPECT(0xb956, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb954));
        EXPECT(0x15, gbc.readMem(0xb955));
        // CB 15 0012
        gbc.setState(0x2f11, 0xf235, 0x6270, 0x830, 0xf33f, 0xfa10, 0x0, 0x0);
        gbc.writeMem(0x2f11, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xf235, gbc.sp());
        EXPECT(0x2f13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0013
        gbc.setState(0x995c, 0xa535, 0x650, 0x68ea, 0xecdc, 0x914c, 0x1, 0x0);
        gbc.writeMem(0x995c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xa535, gbc.sp());
        EXPECT(0x995e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x995c));
        EXPECT(0x15, gbc.readMem(0x995d));
        // CB 15 0014
        gbc.setState(0x99e1, 0xef27, 0xce0, 0xeada, 0x3b18, 0x8d02, 0x1, 0x1);
        gbc.writeMem(0x99e1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xef27, gbc.sp());
        EXPECT(0x99e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99e1));
        EXPECT(0x15, gbc.readMem(0x99e2));
        // CB 15 0015
        gbc.setState(0x6819, 0x978b, 0xeb70, 0x535b, 0x6309, 0xfaed, 0x0, 0x1);
        gbc.writeMem(0x6819, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x978b, gbc.sp());
        EXPECT(0x681b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0016
        gbc.setState(0x502b, 0x3fc2, 0x6510, 0xe9aa, 0xdb91, 0xe0d0, 0x1, 0x1);
        gbc.writeMem(0x502b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x3fc2, gbc.sp());
        EXPECT(0x502d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0017
        gbc.setState(0x9f00, 0xdfcb, 0xdb90, 0xb266, 0x5eb4, 0x82f8, 0x1, 0x1);
        gbc.writeMem(0x9f00, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xdfcb, gbc.sp());
        EXPECT(0x9f02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f00));
        EXPECT(0x15, gbc.readMem(0x9f01));
        // CB 15 0018
        gbc.setState(0x479e, 0xc395, 0xe460, 0x3d5c, 0x244f, 0xa189, 0x1, 0x1);
        gbc.writeMem(0x479e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xc395, gbc.sp());
        EXPECT(0x47a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0019
        gbc.setState(0xd6be, 0xe36c, 0x2290, 0x3424, 0xd6c0, 0xd9e7, 0x0, 0x0);
        gbc.writeMem(0xd6be, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xe36c, gbc.sp());
        EXPECT(0xd6c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6be));
        EXPECT(0x15, gbc.readMem(0xd6bf));
        // CB 15 001A
        gbc.setState(0xc0ed, 0x4def, 0x77d0, 0x7a62, 0x8a65, 0xb529, 0x1, 0x0);
        gbc.writeMem(0xc0ed, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x4def, gbc.sp());
        EXPECT(0xc0ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0ed));
        EXPECT(0x15, gbc.readMem(0xc0ee));
        // CB 15 001B
        gbc.setState(0x850b, 0x221, 0xb9c0, 0x9264, 0x1a65, 0x6d51, 0x1, 0x0);
        gbc.writeMem(0x850b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x221, gbc.sp());
        EXPECT(0x850d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x850b));
        EXPECT(0x15, gbc.readMem(0x850c));
        // CB 15 001C
        gbc.setState(0xa229, 0x2187, 0x2c60, 0xc0ec, 0x3b40, 0x5621, 0x0, 0x1);
        gbc.writeMem(0xa229, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x2187, gbc.sp());
        EXPECT(0xa22b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa229));
        EXPECT(0x15, gbc.readMem(0xa22a));
        // CB 15 001D
        gbc.setState(0xaf9d, 0x9564, 0x8290, 0x1781, 0xa555, 0x73e6, 0x1, 0x0);
        gbc.writeMem(0xaf9d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x9564, gbc.sp());
        EXPECT(0xaf9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf9d));
        EXPECT(0x15, gbc.readMem(0xaf9e));
        // CB 15 001E
        gbc.setState(0x8f4a, 0xf7ef, 0x6db0, 0xdc3b, 0x22f5, 0xf345, 0x1, 0x1);
        gbc.writeMem(0x8f4a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xf7ef, gbc.sp());
        EXPECT(0x8f4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f4a));
        EXPECT(0x15, gbc.readMem(0x8f4b));
        // CB 15 001F
        gbc.setState(0x3935, 0x967a, 0xd90, 0x3e97, 0x9fce, 0x5d12, 0x0, 0x1);
        gbc.writeMem(0x3935, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x967a, gbc.sp());
        EXPECT(0x3937, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0020
        gbc.setState(0x4e67, 0x6ce7, 0xd730, 0x25e4, 0x41ae, 0xf88d, 0x0, 0x0);
        gbc.writeMem(0x4e67, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x6ce7, gbc.sp());
        EXPECT(0x4e69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0021
        gbc.setState(0x78e3, 0x2d34, 0xbc10, 0x5b8b, 0xbfdb, 0xbd80, 0x0, 0x0);
        gbc.writeMem(0x78e3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x2d34, gbc.sp());
        EXPECT(0x78e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0022
        gbc.setState(0xa5ff, 0xc79b, 0xaf50, 0xe668, 0x8e8e, 0x8397, 0x1, 0x1);
        gbc.writeMem(0xa5ff, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xc79b, gbc.sp());
        EXPECT(0xa601, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5ff));
        EXPECT(0x15, gbc.readMem(0xa600));
        // CB 15 0023
        gbc.setState(0x3ffe, 0xe279, 0xacd0, 0x73de, 0x2f58, 0x4735, 0x1, 0x0);
        gbc.writeMem(0x3ffe, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xe279, gbc.sp());
        EXPECT(0x4000, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0024
        gbc.setState(0x518b, 0x52d, 0xb250, 0xdcbe, 0xce43, 0xe288, 0x0, 0x1);
        gbc.writeMem(0x518b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x52d, gbc.sp());
        EXPECT(0x518d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0025
        gbc.setState(0x72d7, 0x2f3, 0xa340, 0x7a7e, 0x68b9, 0x1547, 0x1, 0x0);
        gbc.writeMem(0x72d7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x2f3, gbc.sp());
        EXPECT(0x72d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0026
        gbc.setState(0x46bb, 0x4, 0x3b50, 0x12e7, 0xe664, 0x768a, 0x1, 0x1);
        gbc.writeMem(0x46bb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x4, gbc.sp());
        EXPECT(0x46bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0027
        gbc.setState(0x3c75, 0x77fa, 0xe90, 0xc771, 0x9b34, 0x4d40, 0x1, 0x0);
        gbc.writeMem(0x3c75, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x77fa, gbc.sp());
        EXPECT(0x3c77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0028
        gbc.setState(0xdb27, 0x2612, 0x6ec0, 0xc47d, 0x2849, 0xb9f3, 0x1, 0x0);
        gbc.writeMem(0xdb27, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x2612, gbc.sp());
        EXPECT(0xdb29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb27));
        EXPECT(0x15, gbc.readMem(0xdb28));
        // CB 15 0029
        gbc.setState(0x863c, 0xabe4, 0xfbf0, 0x3e5d, 0xf6a, 0x52ef, 0x1, 0x1);
        gbc.writeMem(0x863c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xabe4, gbc.sp());
        EXPECT(0x863e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x863c));
        EXPECT(0x15, gbc.readMem(0x863d));
        // CB 15 002A
        gbc.setState(0x7380, 0x9e26, 0x4380, 0xbe28, 0x3936, 0xf8c9, 0x1, 0x0);
        gbc.writeMem(0x7380, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x9e26, gbc.sp());
        EXPECT(0x7382, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 002B
        gbc.setState(0x6b5d, 0xc5ee, 0x3010, 0x7944, 0xef82, 0x6178, 0x0, 0x0);
        gbc.writeMem(0x6b5d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xc5ee, gbc.sp());
        EXPECT(0x6b5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 002C
        gbc.setState(0xa354, 0x9442, 0x8fb0, 0x77bc, 0x9cd, 0xf841, 0x1, 0x1);
        gbc.writeMem(0xa354, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x9442, gbc.sp());
        EXPECT(0xa356, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa354));
        EXPECT(0x15, gbc.readMem(0xa355));
        // CB 15 002D
        gbc.setState(0x3f73, 0xc0a3, 0xe600, 0xdc33, 0x8a23, 0x3004, 0x0, 0x1);
        gbc.writeMem(0x3f73, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xc0a3, gbc.sp());
        EXPECT(0x3f75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 002E
        gbc.setState(0x46ad, 0x58e5, 0xff20, 0xca6a, 0x44fa, 0x31ea, 0x0, 0x0);
        gbc.writeMem(0x46ad, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x58e5, gbc.sp());
        EXPECT(0x46af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 002F
        gbc.setState(0xe229, 0xc8d5, 0xc4f0, 0x46cb, 0xfb, 0x1cca, 0x1, 0x1);
        gbc.writeMem(0xe229, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xc8d5, gbc.sp());
        EXPECT(0xe22b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe229));
        EXPECT(0x15, gbc.readMem(0xe22a));
        // CB 15 0030
        gbc.setState(0xeacc, 0xa268, 0x3110, 0x8829, 0xeef2, 0xe92a, 0x0, 0x1);
        gbc.writeMem(0xeacc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xa268, gbc.sp());
        EXPECT(0xeace, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeacc));
        EXPECT(0x15, gbc.readMem(0xeacd));
        // CB 15 0031
        gbc.setState(0xd784, 0x4b1f, 0x4ae0, 0x1363, 0x2db7, 0x6547, 0x1, 0x1);
        gbc.writeMem(0xd784, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x4b1f, gbc.sp());
        EXPECT(0xd786, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd784));
        EXPECT(0x15, gbc.readMem(0xd785));
        // CB 15 0032
        gbc.setState(0x3f56, 0x65eb, 0xf9a0, 0x49b1, 0x4e9d, 0x2f1, 0x0, 0x0);
        gbc.writeMem(0x3f56, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x65eb, gbc.sp());
        EXPECT(0x3f58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0033
        gbc.setState(0x3529, 0xae37, 0x5f00, 0xaa43, 0x720b, 0xf250, 0x1, 0x1);
        gbc.writeMem(0x3529, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xae37, gbc.sp());
        EXPECT(0x352b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0034
        gbc.setState(0xe4a2, 0xf6bc, 0xe3a0, 0x6eec, 0x9555, 0xadb8, 0x0, 0x1);
        gbc.writeMem(0xe4a2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xf6bc, gbc.sp());
        EXPECT(0xe4a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4a2));
        EXPECT(0x15, gbc.readMem(0xe4a3));
        // CB 15 0035
        gbc.setState(0xa219, 0x1d92, 0xf120, 0xab44, 0x86fc, 0xef9, 0x0, 0x0);
        gbc.writeMem(0xa219, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x1d92, gbc.sp());
        EXPECT(0xa21b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa219));
        EXPECT(0x15, gbc.readMem(0xa21a));
        // CB 15 0036
        gbc.setState(0xc667, 0xeea8, 0xf670, 0x9497, 0x9d55, 0x1a23, 0x1, 0x0);
        gbc.writeMem(0xc667, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xeea8, gbc.sp());
        EXPECT(0xc669, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc667));
        EXPECT(0x15, gbc.readMem(0xc668));
        // CB 15 0037
        gbc.setState(0x9260, 0x75f7, 0xce20, 0x72f8, 0x3fae, 0xd89c, 0x0, 0x0);
        gbc.writeMem(0x9260, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x75f7, gbc.sp());
        EXPECT(0x9262, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9260));
        EXPECT(0x15, gbc.readMem(0x9261));
        // CB 15 0038
        gbc.setState(0xe13a, 0xfa1c, 0x6510, 0xa193, 0x138f, 0xa574, 0x0, 0x0);
        gbc.writeMem(0xe13a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xfa1c, gbc.sp());
        EXPECT(0xe13c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe13a));
        EXPECT(0x15, gbc.readMem(0xe13b));
        // CB 15 0039
        gbc.setState(0xe6e7, 0x486d, 0x6f20, 0x4d52, 0x8842, 0x2d6d, 0x1, 0x1);
        gbc.writeMem(0xe6e7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x486d, gbc.sp());
        EXPECT(0xe6e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6e7));
        EXPECT(0x15, gbc.readMem(0xe6e8));
        // CB 15 003A
        gbc.setState(0x3115, 0xc1d3, 0xfcd0, 0xfaea, 0xaec1, 0xa8b9, 0x1, 0x1);
        gbc.writeMem(0x3115, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xc1d3, gbc.sp());
        EXPECT(0x3117, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 003B
        gbc.setState(0x995e, 0x27f7, 0xcf00, 0x4c65, 0x505e, 0xb378, 0x0, 0x0);
        gbc.writeMem(0x995e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x27f7, gbc.sp());
        EXPECT(0x9960, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x995e));
        EXPECT(0x15, gbc.readMem(0x995f));
        // CB 15 003C
        gbc.setState(0xea67, 0x34e7, 0xfec0, 0xb66c, 0x4500, 0x1309, 0x0, 0x1);
        gbc.writeMem(0xea67, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x34e7, gbc.sp());
        EXPECT(0xea69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea67));
        EXPECT(0x15, gbc.readMem(0xea68));
        // CB 15 003D
        gbc.setState(0x82a5, 0xce7b, 0x7d80, 0x9279, 0xf160, 0x9df, 0x1, 0x0);
        gbc.writeMem(0x82a5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xce7b, gbc.sp());
        EXPECT(0x82a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82a5));
        EXPECT(0x15, gbc.readMem(0x82a6));
        // CB 15 003E
        gbc.setState(0xc045, 0x9f0, 0x470, 0x823a, 0x2dd3, 0xe8e6, 0x1, 0x1);
        gbc.writeMem(0xc045, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x9f0, gbc.sp());
        EXPECT(0xc047, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc045));
        EXPECT(0x15, gbc.readMem(0xc046));
        // CB 15 003F
        gbc.setState(0x258f, 0xf117, 0xd3a0, 0xde7f, 0xe8dc, 0x3b37, 0x1, 0x1);
        gbc.writeMem(0x258f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xf117, gbc.sp());
        EXPECT(0x2591, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0040
        gbc.setState(0xe1e1, 0x997e, 0xf680, 0x9c78, 0xcd47, 0xf356, 0x1, 0x0);
        gbc.writeMem(0xe1e1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x997e, gbc.sp());
        EXPECT(0xe1e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1e1));
        EXPECT(0x15, gbc.readMem(0xe1e2));
        // CB 15 0041
        gbc.setState(0xe76e, 0x5bd9, 0x6070, 0x1ad2, 0x65d5, 0xb1db, 0x0, 0x0);
        gbc.writeMem(0xe76e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x5bd9, gbc.sp());
        EXPECT(0xe770, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe76e));
        EXPECT(0x15, gbc.readMem(0xe76f));
        // CB 15 0042
        gbc.setState(0x63a2, 0xcca9, 0x20c0, 0x5747, 0x438e, 0xd009, 0x0, 0x0);
        gbc.writeMem(0x63a2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xcca9, gbc.sp());
        EXPECT(0x63a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0043
        gbc.setState(0xc6ee, 0xcc88, 0xf430, 0xdeeb, 0x4700, 0xb5f1, 0x0, 0x0);
        gbc.writeMem(0xc6ee, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xcc88, gbc.sp());
        EXPECT(0xc6f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6ee));
        EXPECT(0x15, gbc.readMem(0xc6ef));
        // CB 15 0044
        gbc.setState(0x19ea, 0x73f9, 0x2f50, 0xbe66, 0xc622, 0x8248, 0x1, 0x0);
        gbc.writeMem(0x19ea, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x73f9, gbc.sp());
        EXPECT(0x19ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0045
        gbc.setState(0x7127, 0xa9c3, 0x4fb0, 0xac37, 0xbe82, 0xa70b, 0x1, 0x1);
        gbc.writeMem(0x7127, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xa9c3, gbc.sp());
        EXPECT(0x7129, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0046
        gbc.setState(0x942d, 0x93e5, 0xc890, 0x6412, 0xec21, 0x2fca, 0x1, 0x0);
        gbc.writeMem(0x942d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x93e5, gbc.sp());
        EXPECT(0x942f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x942d));
        EXPECT(0x15, gbc.readMem(0x942e));
        // CB 15 0047
        gbc.setState(0xd353, 0xd4b5, 0x8dc0, 0xd11b, 0xe5cf, 0x2104, 0x0, 0x0);
        gbc.writeMem(0xd353, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xd4b5, gbc.sp());
        EXPECT(0xd355, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd353));
        EXPECT(0x15, gbc.readMem(0xd354));
        // CB 15 0049
        gbc.setState(0xd598, 0xb9c0, 0x6190, 0x6173, 0xb4ff, 0xcdf8, 0x1, 0x1);
        gbc.writeMem(0xd598, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xb9c0, gbc.sp());
        EXPECT(0xd59a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd598));
        EXPECT(0x15, gbc.readMem(0xd599));
        // CB 15 004A
        gbc.setState(0x3fe2, 0x5089, 0x1590, 0xa238, 0xefb2, 0xf096, 0x1, 0x1);
        gbc.writeMem(0x3fe2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x5089, gbc.sp());
        EXPECT(0x3fe4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 004B
        gbc.setState(0x463f, 0xae67, 0x8ce0, 0xcc91, 0xda36, 0x9c08, 0x0, 0x0);
        gbc.writeMem(0x463f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xae67, gbc.sp());
        EXPECT(0x4641, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 004C
        gbc.setState(0xd8c9, 0xe430, 0x12d0, 0x49ad, 0x24e8, 0xd249, 0x0, 0x0);
        gbc.writeMem(0xd8c9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xe430, gbc.sp());
        EXPECT(0xd8cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8c9));
        EXPECT(0x15, gbc.readMem(0xd8ca));
        // CB 15 004D
        gbc.setState(0x94a9, 0x1545, 0x650, 0xc321, 0xf70f, 0xeda, 0x0, 0x0);
        gbc.writeMem(0x94a9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x1545, gbc.sp());
        EXPECT(0x94ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94a9));
        EXPECT(0x15, gbc.readMem(0x94aa));
        // CB 15 004E
        gbc.setState(0x5e24, 0xab34, 0xb3f0, 0x1cae, 0x8fa3, 0x98b3, 0x0, 0x0);
        gbc.writeMem(0x5e24, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xab34, gbc.sp());
        EXPECT(0x5e26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 004F
        gbc.setState(0xe761, 0x75d5, 0x2e70, 0x79b1, 0x91e, 0xf151, 0x1, 0x1);
        gbc.writeMem(0xe761, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x75d5, gbc.sp());
        EXPECT(0xe763, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe761));
        EXPECT(0x15, gbc.readMem(0xe762));
        // CB 15 0050
        gbc.setState(0x5523, 0xfbe0, 0x35b0, 0xcfa, 0xb3ad, 0xda23, 0x0, 0x1);
        gbc.writeMem(0x5523, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xfbe0, gbc.sp());
        EXPECT(0x5525, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0051
        gbc.setState(0x4a90, 0xbef2, 0xe420, 0xaf6c, 0x156e, 0x9339, 0x1, 0x1);
        gbc.writeMem(0x4a90, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xbef2, gbc.sp());
        EXPECT(0x4a92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0052
        gbc.setState(0xc539, 0xc56f, 0x5340, 0x20e6, 0x71b6, 0x18b3, 0x1, 0x0);
        gbc.writeMem(0xc539, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xc56f, gbc.sp());
        EXPECT(0xc53b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc539));
        EXPECT(0x15, gbc.readMem(0xc53a));
        // CB 15 0053
        gbc.setState(0x8713, 0x9d86, 0xd610, 0x9860, 0x443e, 0x8060, 0x0, 0x1);
        gbc.writeMem(0x8713, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x9d86, gbc.sp());
        EXPECT(0x8715, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8713));
        EXPECT(0x15, gbc.readMem(0x8714));
        // CB 15 0054
        gbc.setState(0x5c8c, 0x4cc3, 0x5d30, 0xe810, 0x82db, 0x5e94, 0x0, 0x0);
        gbc.writeMem(0x5c8c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x4cc3, gbc.sp());
        EXPECT(0x5c8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0055
        gbc.setState(0x42f8, 0x4465, 0x2290, 0x55ab, 0x15b, 0xfad1, 0x0, 0x0);
        gbc.writeMem(0x42f8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x4465, gbc.sp());
        EXPECT(0x42fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0056
        gbc.setState(0x1eba, 0xed8d, 0xbc50, 0xa136, 0x6c9f, 0x2117, 0x1, 0x1);
        gbc.writeMem(0x1eba, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xed8d, gbc.sp());
        EXPECT(0x1ebc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0057
        gbc.setState(0x1280, 0x6bf7, 0x7c90, 0x42b0, 0x2767, 0x194d, 0x0, 0x0);
        gbc.writeMem(0x1280, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x6bf7, gbc.sp());
        EXPECT(0x1282, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0058
        gbc.setState(0x1fc5, 0xf494, 0x3df0, 0xa5cf, 0x1a73, 0xf054, 0x1, 0x1);
        gbc.writeMem(0x1fc5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xf494, gbc.sp());
        EXPECT(0x1fc7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0059
        gbc.setState(0xa465, 0x5f9, 0x1370, 0x8a62, 0xbaa5, 0xe95b, 0x1, 0x1);
        gbc.writeMem(0xa465, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x5f9, gbc.sp());
        EXPECT(0xa467, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa465));
        EXPECT(0x15, gbc.readMem(0xa466));
        // CB 15 005A
        gbc.setState(0xbb7a, 0x51de, 0x2ee0, 0x725c, 0x3e0c, 0xfd8f, 0x1, 0x0);
        gbc.writeMem(0xbb7a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x51de, gbc.sp());
        EXPECT(0xbb7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb7a));
        EXPECT(0x15, gbc.readMem(0xbb7b));
        // CB 15 005B
        gbc.setState(0xebc, 0x7d2e, 0x6660, 0x87d2, 0x4d7f, 0x38d0, 0x0, 0x0);
        gbc.writeMem(0xebc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x7d2e, gbc.sp());
        EXPECT(0xebe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 005C
        gbc.setState(0xc10f, 0x25e7, 0x32a0, 0x11f1, 0x605, 0xccf8, 0x0, 0x1);
        gbc.writeMem(0xc10f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x25e7, gbc.sp());
        EXPECT(0xc111, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc10f));
        EXPECT(0x15, gbc.readMem(0xc110));
        // CB 15 005D
        gbc.setState(0x9194, 0xf3db, 0xc7f0, 0x21cc, 0x58cf, 0xfb80, 0x0, 0x0);
        gbc.writeMem(0x9194, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xf3db, gbc.sp());
        EXPECT(0x9196, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9194));
        EXPECT(0x15, gbc.readMem(0x9195));
        // CB 15 005E
        gbc.setState(0x6afb, 0xe5de, 0x31d0, 0x7a6a, 0xd3de, 0x6747, 0x0, 0x1);
        gbc.writeMem(0x6afb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xe5de, gbc.sp());
        EXPECT(0x6afd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 005F
        gbc.setState(0x58ac, 0x6760, 0xb3e0, 0xe0f9, 0xb7f2, 0xe533, 0x1, 0x0);
        gbc.writeMem(0x58ac, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x6760, gbc.sp());
        EXPECT(0x58ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0060
        gbc.setState(0xb7c5, 0xc32a, 0xa840, 0x4046, 0xa3bd, 0x86ad, 0x0, 0x0);
        gbc.writeMem(0xb7c5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xc32a, gbc.sp());
        EXPECT(0xb7c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7c5));
        EXPECT(0x15, gbc.readMem(0xb7c6));
        // CB 15 0061
        gbc.setState(0x9259, 0x263c, 0x1220, 0x511a, 0x67cb, 0xb63, 0x0, 0x1);
        gbc.writeMem(0x9259, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x263c, gbc.sp());
        EXPECT(0x925b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9259));
        EXPECT(0x15, gbc.readMem(0x925a));
        // CB 15 0062
        gbc.setState(0x74df, 0x45ec, 0xdda0, 0x5260, 0xc7e1, 0x6fd, 0x0, 0x1);
        gbc.writeMem(0x74df, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x45ec, gbc.sp());
        EXPECT(0x74e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0063
        gbc.setState(0xae7, 0xe937, 0x6280, 0x76f5, 0x8997, 0xbe89, 0x0, 0x1);
        gbc.writeMem(0xae7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xe937, gbc.sp());
        EXPECT(0xae9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0064
        gbc.setState(0x56fd, 0xa7b5, 0x1930, 0xf09a, 0xf0d1, 0xd3c, 0x1, 0x0);
        gbc.writeMem(0x56fd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xa7b5, gbc.sp());
        EXPECT(0x56ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0065
        gbc.setState(0x52cd, 0xe2f4, 0x65f0, 0x12de, 0x4906, 0x2e18, 0x1, 0x1);
        gbc.writeMem(0x52cd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xe2f4, gbc.sp());
        EXPECT(0x52cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0066
        gbc.setState(0x99db, 0xa9c4, 0x1250, 0xb1a8, 0x86e6, 0x17f1, 0x1, 0x1);
        gbc.writeMem(0x99db, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xa9c4, gbc.sp());
        EXPECT(0x99dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99db));
        EXPECT(0x15, gbc.readMem(0x99dc));
        // CB 15 0067
        gbc.setState(0x7954, 0x2f99, 0xd160, 0x68ca, 0x290, 0xdf42, 0x1, 0x1);
        gbc.writeMem(0x7954, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x2f99, gbc.sp());
        EXPECT(0x7956, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0068
        gbc.setState(0x537c, 0x5244, 0x3710, 0x392e, 0xac28, 0x2a35, 0x0, 0x1);
        gbc.writeMem(0x537c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x5244, gbc.sp());
        EXPECT(0x537e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0069
        gbc.setState(0x9d63, 0x3ff3, 0x8d90, 0xa12f, 0xd280, 0x64fe, 0x0, 0x1);
        gbc.writeMem(0x9d63, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x3ff3, gbc.sp());
        EXPECT(0x9d65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d63));
        EXPECT(0x15, gbc.readMem(0x9d64));
        // CB 15 006B
        gbc.setState(0x78b3, 0x41f5, 0xd230, 0x13df, 0xe8e3, 0x6e76, 0x1, 0x1);
        gbc.writeMem(0x78b3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x41f5, gbc.sp());
        EXPECT(0x78b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 006C
        gbc.setState(0x5ea, 0xb999, 0x79f0, 0x1e9c, 0xcbcf, 0x6ac, 0x1, 0x1);
        gbc.writeMem(0x5ea, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xb999, gbc.sp());
        EXPECT(0x5ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 006D
        gbc.setState(0xbfde, 0x17e1, 0xa9b0, 0x66bd, 0x7fc7, 0xc498, 0x1, 0x1);
        gbc.writeMem(0xbfde, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x17e1, gbc.sp());
        EXPECT(0xbfe0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfde));
        EXPECT(0x15, gbc.readMem(0xbfdf));
        // CB 15 006E
        gbc.setState(0xbdee, 0xeaff, 0x94d0, 0x38b3, 0x5d4d, 0x28af, 0x0, 0x1);
        gbc.writeMem(0xbdee, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xeaff, gbc.sp());
        EXPECT(0xbdf0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdee));
        EXPECT(0x15, gbc.readMem(0xbdef));
        // CB 15 006F
        gbc.setState(0xafe5, 0xcfef, 0xfd60, 0x363e, 0x4e2f, 0x7ac6, 0x0, 0x0);
        gbc.writeMem(0xafe5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xcfef, gbc.sp());
        EXPECT(0xafe7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafe5));
        EXPECT(0x15, gbc.readMem(0xafe6));
        // CB 15 0070
        gbc.setState(0x5ae7, 0xffb6, 0xb960, 0x2d02, 0xebc9, 0x7ace, 0x1, 0x0);
        gbc.writeMem(0x5ae7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xffb6, gbc.sp());
        EXPECT(0x5ae9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0071
        gbc.setState(0xab42, 0x434c, 0xe770, 0x9b46, 0xdc48, 0x91e7, 0x1, 0x0);
        gbc.writeMem(0xab42, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x434c, gbc.sp());
        EXPECT(0xab44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab42));
        EXPECT(0x15, gbc.readMem(0xab43));
        // CB 15 0072
        gbc.setState(0xee5f, 0xe473, 0x85c0, 0x5597, 0x482c, 0x7c94, 0x0, 0x0);
        gbc.writeMem(0xee5f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xe473, gbc.sp());
        EXPECT(0xee61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee5f));
        EXPECT(0x15, gbc.readMem(0xee60));
        // CB 15 0073
        gbc.setState(0x8a00, 0x98ee, 0x2bb0, 0xf4ec, 0xccbe, 0x460f, 0x0, 0x0);
        gbc.writeMem(0x8a00, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x98ee, gbc.sp());
        EXPECT(0x8a02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a00));
        EXPECT(0x15, gbc.readMem(0x8a01));
        // CB 15 0074
        gbc.setState(0xd3cc, 0x1e40, 0xdc20, 0x11a0, 0x3313, 0x39a0, 0x1, 0x1);
        gbc.writeMem(0xd3cc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x1e40, gbc.sp());
        EXPECT(0xd3ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3cc));
        EXPECT(0x15, gbc.readMem(0xd3cd));
        // CB 15 0075
        gbc.setState(0x7793, 0x68b1, 0x74b0, 0x6a96, 0x5058, 0x1c8, 0x1, 0x0);
        gbc.writeMem(0x7793, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x68b1, gbc.sp());
        EXPECT(0x7795, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0076
        gbc.setState(0x99ec, 0x580f, 0xa450, 0x5128, 0x23a5, 0xe605, 0x1, 0x1);
        gbc.writeMem(0x99ec, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x580f, gbc.sp());
        EXPECT(0x99ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99ec));
        EXPECT(0x15, gbc.readMem(0x99ed));
        // CB 15 0077
        gbc.setState(0xa9ff, 0x66b6, 0x4d40, 0xa945, 0xc6ff, 0x8454, 0x1, 0x1);
        gbc.writeMem(0xa9ff, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x66b6, gbc.sp());
        EXPECT(0xaa01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9ff));
        EXPECT(0x15, gbc.readMem(0xaa00));
        // CB 15 0079
        gbc.setState(0x3d62, 0x1516, 0x8d30, 0xd0ea, 0xd13, 0x7223, 0x1, 0x0);
        gbc.writeMem(0x3d62, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x1516, gbc.sp());
        EXPECT(0x3d64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 007C
        gbc.setState(0x1a80, 0x9238, 0x8490, 0x2dca, 0x4fe6, 0xeba, 0x1, 0x1);
        gbc.writeMem(0x1a80, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x9238, gbc.sp());
        EXPECT(0x1a82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 007D
        gbc.setState(0x540b, 0xa725, 0x2980, 0x4a73, 0x5632, 0xb0ba, 0x0, 0x1);
        gbc.writeMem(0x540b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xa725, gbc.sp());
        EXPECT(0x540d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 007E
        gbc.setState(0x2e28, 0xd364, 0xad20, 0x50e0, 0xbfcb, 0x9d6f, 0x1, 0x0);
        gbc.writeMem(0x2e28, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xd364, gbc.sp());
        EXPECT(0x2e2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 007F
        gbc.setState(0x201c, 0x5b6c, 0xde40, 0x7f47, 0x71d3, 0x6cb9, 0x1, 0x0);
        gbc.writeMem(0x201c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x5b6c, gbc.sp());
        EXPECT(0x201e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0080
        gbc.setState(0xd6e4, 0xf830, 0xe430, 0x9d1c, 0x95de, 0x2fb4, 0x1, 0x1);
        gbc.writeMem(0xd6e4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xf830, gbc.sp());
        EXPECT(0xd6e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6e4));
        EXPECT(0x15, gbc.readMem(0xd6e5));
        // CB 15 0081
        gbc.setState(0x83fc, 0x2105, 0xdac0, 0x8392, 0x69a5, 0x8f52, 0x0, 0x1);
        gbc.writeMem(0x83fc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x2105, gbc.sp());
        EXPECT(0x83fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83fc));
        EXPECT(0x15, gbc.readMem(0x83fd));
        // CB 15 0082
        gbc.setState(0x590f, 0xf664, 0xe570, 0x3084, 0xa02, 0x1609, 0x0, 0x1);
        gbc.writeMem(0x590f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xf664, gbc.sp());
        EXPECT(0x5911, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0083
        gbc.setState(0x5e52, 0x14dd, 0xf910, 0xfd91, 0xaac1, 0xd227, 0x1, 0x0);
        gbc.writeMem(0x5e52, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x14dd, gbc.sp());
        EXPECT(0x5e54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0084
        gbc.setState(0x8e93, 0x93b9, 0x1e60, 0x6911, 0xd991, 0x84e1, 0x0, 0x1);
        gbc.writeMem(0x8e93, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x93b9, gbc.sp());
        EXPECT(0x8e95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e93));
        EXPECT(0x15, gbc.readMem(0x8e94));
        // CB 15 0085
        gbc.setState(0x20c0, 0x8484, 0xde0, 0xc58c, 0xd8b8, 0xc2b7, 0x1, 0x1);
        gbc.writeMem(0x20c0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x8484, gbc.sp());
        EXPECT(0x20c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0086
        gbc.setState(0x59bb, 0xbbc1, 0xeca0, 0xbd0, 0xa48, 0x23ce, 0x0, 0x1);
        gbc.writeMem(0x59bb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xbbc1, gbc.sp());
        EXPECT(0x59bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0087
        gbc.setState(0xa349, 0xa3fe, 0x2d50, 0x16a8, 0x5054, 0xfc37, 0x1, 0x0);
        gbc.writeMem(0xa349, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xa3fe, gbc.sp());
        EXPECT(0xa34b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa349));
        EXPECT(0x15, gbc.readMem(0xa34a));
        // CB 15 0088
        gbc.setState(0xa34b, 0x30b0, 0x1ff0, 0x53a6, 0x3f51, 0xe914, 0x0, 0x0);
        gbc.writeMem(0xa34b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x30b0, gbc.sp());
        EXPECT(0xa34d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa34b));
        EXPECT(0x15, gbc.readMem(0xa34c));
        // CB 15 0089
        gbc.setState(0xebdd, 0x5cb3, 0x9ff0, 0x3f75, 0xaf2f, 0xc081, 0x0, 0x0);
        gbc.writeMem(0xebdd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x5cb3, gbc.sp());
        EXPECT(0xebdf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebdd));
        EXPECT(0x15, gbc.readMem(0xebde));
        // CB 15 008A
        gbc.setState(0xa281, 0x2558, 0x12f0, 0x2969, 0x7e8d, 0xfa48, 0x1, 0x0);
        gbc.writeMem(0xa281, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x2558, gbc.sp());
        EXPECT(0xa283, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa281));
        EXPECT(0x15, gbc.readMem(0xa282));
        // CB 15 008B
        gbc.setState(0xe28d, 0x9830, 0x1e80, 0x42d, 0x84c1, 0x1486, 0x0, 0x1);
        gbc.writeMem(0xe28d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x9830, gbc.sp());
        EXPECT(0xe28f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe28d));
        EXPECT(0x15, gbc.readMem(0xe28e));
        // CB 15 008D
        gbc.setState(0x7079, 0xbf08, 0x54c0, 0x44c8, 0xf50e, 0x5bc7, 0x1, 0x0);
        gbc.writeMem(0x7079, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xbf08, gbc.sp());
        EXPECT(0x707b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 008E
        gbc.setState(0xb8ae, 0x1c8d, 0x2a50, 0x55a1, 0x9b15, 0xf650, 0x1, 0x1);
        gbc.writeMem(0xb8ae, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x1c8d, gbc.sp());
        EXPECT(0xb8b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8ae));
        EXPECT(0x15, gbc.readMem(0xb8af));
        // CB 15 008F
        gbc.setState(0x9c9a, 0x524c, 0x270, 0xd095, 0xc978, 0x92bd, 0x0, 0x0);
        gbc.writeMem(0x9c9a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x524c, gbc.sp());
        EXPECT(0x9c9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c9a));
        EXPECT(0x15, gbc.readMem(0x9c9b));
        // CB 15 0090
        gbc.setState(0x66e6, 0x7422, 0xff50, 0x69d8, 0x67a6, 0xfe34, 0x0, 0x1);
        gbc.writeMem(0x66e6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x7422, gbc.sp());
        EXPECT(0x66e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0091
        gbc.setState(0x72b9, 0xb227, 0xde40, 0x3c18, 0xb6c8, 0x6e18, 0x1, 0x1);
        gbc.writeMem(0x72b9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xb227, gbc.sp());
        EXPECT(0x72bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0092
        gbc.setState(0x30f2, 0xec04, 0xda20, 0x13e6, 0x7711, 0x6da4, 0x1, 0x0);
        gbc.writeMem(0x30f2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xec04, gbc.sp());
        EXPECT(0x30f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0093
        gbc.setState(0xb56c, 0x268c, 0x5bb0, 0x818f, 0xad67, 0x7a4d, 0x1, 0x0);
        gbc.writeMem(0xb56c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x268c, gbc.sp());
        EXPECT(0xb56e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb56c));
        EXPECT(0x15, gbc.readMem(0xb56d));
        // CB 15 0094
        gbc.setState(0xdbec, 0xe327, 0xd880, 0x65c7, 0x73ad, 0xcb87, 0x1, 0x1);
        gbc.writeMem(0xdbec, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xe327, gbc.sp());
        EXPECT(0xdbee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbec));
        EXPECT(0x15, gbc.readMem(0xdbed));
        // CB 15 0095
        gbc.setState(0xbf68, 0x9020, 0x7960, 0x203f, 0xbfed, 0x5648, 0x0, 0x0);
        gbc.writeMem(0xbf68, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x9020, gbc.sp());
        EXPECT(0xbf6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf68));
        EXPECT(0x15, gbc.readMem(0xbf69));
        // CB 15 0096
        gbc.setState(0x186c, 0x8f3f, 0xc600, 0x760, 0x69df, 0xfc10, 0x1, 0x0);
        gbc.writeMem(0x186c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x8f3f, gbc.sp());
        EXPECT(0x186e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0097
        gbc.setState(0xd51a, 0x70e2, 0x490, 0x2c62, 0x4bc4, 0x1ab9, 0x0, 0x1);
        gbc.writeMem(0xd51a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x70e2, gbc.sp());
        EXPECT(0xd51c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd51a));
        EXPECT(0x15, gbc.readMem(0xd51b));
        // CB 15 0098
        gbc.setState(0x9139, 0xbdf0, 0xe010, 0xd93c, 0xe5f1, 0xb9c9, 0x1, 0x1);
        gbc.writeMem(0x9139, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xbdf0, gbc.sp());
        EXPECT(0x913b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9139));
        EXPECT(0x15, gbc.readMem(0x913a));
        // CB 15 0099
        gbc.setState(0x3de7, 0x5f8, 0x1c30, 0x7492, 0xd7f9, 0xe47d, 0x1, 0x1);
        gbc.writeMem(0x3de7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x5f8, gbc.sp());
        EXPECT(0x3de9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 009A
        gbc.setState(0xe7ae, 0x118a, 0x8030, 0xdb57, 0x4741, 0xd4ae, 0x1, 0x0);
        gbc.writeMem(0xe7ae, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x118a, gbc.sp());
        EXPECT(0xe7b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7ae));
        EXPECT(0x15, gbc.readMem(0xe7af));
        // CB 15 009C
        gbc.setState(0x3834, 0x5b24, 0x2a40, 0xb68a, 0x6020, 0x137f, 0x1, 0x1);
        gbc.writeMem(0x3834, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x5b24, gbc.sp());
        EXPECT(0x3836, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 009D
        gbc.setState(0x9f69, 0x63ad, 0xd040, 0x6947, 0xf6b, 0x36c3, 0x1, 0x1);
        gbc.writeMem(0x9f69, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x63ad, gbc.sp());
        EXPECT(0x9f6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f69));
        EXPECT(0x15, gbc.readMem(0x9f6a));
        // CB 15 009E
        gbc.setState(0x34e8, 0xe6a, 0x7320, 0x7b45, 0xd0e5, 0x68a9, 0x1, 0x1);
        gbc.writeMem(0x34e8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xe6a, gbc.sp());
        EXPECT(0x34ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 009F
        gbc.setState(0x2728, 0x811f, 0xb230, 0x9a8d, 0xfa77, 0xbdcb, 0x0, 0x0);
        gbc.writeMem(0x2728, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x811f, gbc.sp());
        EXPECT(0x272a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00A0
        gbc.setState(0x791e, 0x3032, 0x5b00, 0xf6b0, 0x99b7, 0x11c8, 0x0, 0x0);
        gbc.writeMem(0x791e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x3032, gbc.sp());
        EXPECT(0x7920, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00A1
        gbc.setState(0x4d93, 0x1dc3, 0x8490, 0xf5b9, 0x6aa, 0x969d, 0x0, 0x0);
        gbc.writeMem(0x4d93, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x1dc3, gbc.sp());
        EXPECT(0x4d95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00A2
        gbc.setState(0x6ced, 0x8ff3, 0xf940, 0x636, 0xd143, 0x46c7, 0x0, 0x0);
        gbc.writeMem(0x6ced, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x8ff3, gbc.sp());
        EXPECT(0x6cef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00A3
        gbc.setState(0xcfb9, 0x9a1d, 0x4540, 0x2905, 0x3f0e, 0xf1e, 0x0, 0x0);
        gbc.writeMem(0xcfb9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x9a1d, gbc.sp());
        EXPECT(0xcfbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfb9));
        EXPECT(0x15, gbc.readMem(0xcfba));
        // CB 15 00A5
        gbc.setState(0xb1c3, 0xe676, 0xf7b0, 0x7993, 0xf69a, 0x7ad9, 0x0, 0x0);
        gbc.writeMem(0xb1c3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xe676, gbc.sp());
        EXPECT(0xb1c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1c3));
        EXPECT(0x15, gbc.readMem(0xb1c4));
        // CB 15 00A6
        gbc.setState(0x76b9, 0xa1c1, 0x7a80, 0x1e2d, 0x9d84, 0xfefd, 0x1, 0x1);
        gbc.writeMem(0x76b9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xa1c1, gbc.sp());
        EXPECT(0x76bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00A7
        gbc.setState(0xe269, 0xf520, 0xa920, 0xaa6e, 0x65ef, 0x3782, 0x0, 0x1);
        gbc.writeMem(0xe269, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xf520, gbc.sp());
        EXPECT(0xe26b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe269));
        EXPECT(0x15, gbc.readMem(0xe26a));
        // CB 15 00A8
        gbc.setState(0x65fd, 0x7bdd, 0xfbe0, 0x3673, 0x45cc, 0xc689, 0x1, 0x0);
        gbc.writeMem(0x65fd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x7bdd, gbc.sp());
        EXPECT(0x65ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00A9
        gbc.setState(0x6ac6, 0x5aae, 0x16e0, 0x7f19, 0x1d2f, 0xf9ca, 0x1, 0x0);
        gbc.writeMem(0x6ac6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x5aae, gbc.sp());
        EXPECT(0x6ac8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00AA
        gbc.setState(0xc9af, 0xa169, 0x4160, 0xf397, 0x43b7, 0x9a22, 0x0, 0x0);
        gbc.writeMem(0xc9af, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xa169, gbc.sp());
        EXPECT(0xc9b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9af));
        EXPECT(0x15, gbc.readMem(0xc9b0));
        // CB 15 00AB
        gbc.setState(0x16fe, 0xee4a, 0x9960, 0xf201, 0x9a08, 0xf7c3, 0x1, 0x0);
        gbc.writeMem(0x16fe, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xee4a, gbc.sp());
        EXPECT(0x1700, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00AC
        gbc.setState(0xd706, 0xad9a, 0x8e60, 0x9e89, 0x215e, 0xe00e, 0x0, 0x1);
        gbc.writeMem(0xd706, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xad9a, gbc.sp());
        EXPECT(0xd708, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd706));
        EXPECT(0x15, gbc.readMem(0xd707));
        // CB 15 00AD
        gbc.setState(0x2476, 0xf400, 0xe5e0, 0xdc9c, 0xe7a6, 0xd4d6, 0x1, 0x1);
        gbc.writeMem(0x2476, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xf400, gbc.sp());
        EXPECT(0x2478, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00AE
        gbc.setState(0x3bba, 0x6d70, 0xf310, 0x8413, 0xd4fe, 0xaafb, 0x1, 0x0);
        gbc.writeMem(0x3bba, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x6d70, gbc.sp());
        EXPECT(0x3bbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00AF
        gbc.setState(0x168d, 0xc13d, 0xad30, 0x4412, 0x1876, 0xda3e, 0x0, 0x1);
        gbc.writeMem(0x168d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xc13d, gbc.sp());
        EXPECT(0x168f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00B0
        gbc.setState(0x5ca7, 0x8656, 0x71d0, 0xd09c, 0xa064, 0x5bbb, 0x1, 0x0);
        gbc.writeMem(0x5ca7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x8656, gbc.sp());
        EXPECT(0x5ca9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00B1
        gbc.setState(0xec98, 0x6041, 0x2a20, 0x926e, 0xb07e, 0x8931, 0x0, 0x1);
        gbc.writeMem(0xec98, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x6041, gbc.sp());
        EXPECT(0xec9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec98));
        EXPECT(0x15, gbc.readMem(0xec99));
        // CB 15 00B2
        gbc.setState(0x8316, 0x7fc0, 0xa60, 0x705b, 0xa40d, 0x84f9, 0x0, 0x1);
        gbc.writeMem(0x8316, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x7fc0, gbc.sp());
        EXPECT(0x8318, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8316));
        EXPECT(0x15, gbc.readMem(0x8317));
        // CB 15 00B3
        gbc.setState(0x2eab, 0x1b62, 0xfa20, 0xcbab, 0x4378, 0xfc7, 0x1, 0x0);
        gbc.writeMem(0x2eab, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x1b62, gbc.sp());
        EXPECT(0x2ead, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00B4
        gbc.setState(0xe70f, 0x3b84, 0x2790, 0x9756, 0xbf6b, 0xa277, 0x1, 0x0);
        gbc.writeMem(0xe70f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x3b84, gbc.sp());
        EXPECT(0xe711, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe70f));
        EXPECT(0x15, gbc.readMem(0xe710));
        // CB 15 00B5
        gbc.setState(0x169c, 0xc2fc, 0xa5c0, 0x7d71, 0x2aa3, 0x5f25, 0x1, 0x0);
        gbc.writeMem(0x169c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xc2fc, gbc.sp());
        EXPECT(0x169e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00B6
        gbc.setState(0x20a3, 0x98d5, 0x9a0, 0xfc12, 0x4e2e, 0x643d, 0x1, 0x0);
        gbc.writeMem(0x20a3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x98d5, gbc.sp());
        EXPECT(0x20a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00B7
        gbc.setState(0x7430, 0x373, 0x3960, 0x92b5, 0xc89c, 0xaeaf, 0x0, 0x1);
        gbc.writeMem(0x7430, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x373, gbc.sp());
        EXPECT(0x7432, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00B8
        gbc.setState(0x8841, 0x2502, 0x1da0, 0x56d6, 0x5c92, 0x41dc, 0x1, 0x1);
        gbc.writeMem(0x8841, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x2502, gbc.sp());
        EXPECT(0x8843, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8841));
        EXPECT(0x15, gbc.readMem(0x8842));
        // CB 15 00B9
        gbc.setState(0xbaed, 0x3c8b, 0x4530, 0x5308, 0xccde, 0x8ed6, 0x0, 0x1);
        gbc.writeMem(0xbaed, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x3c8b, gbc.sp());
        EXPECT(0xbaef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaed));
        EXPECT(0x15, gbc.readMem(0xbaee));
        // CB 15 00BA
        gbc.setState(0xa60a, 0xc9c1, 0x8750, 0x5add, 0x7266, 0x563b, 0x0, 0x1);
        gbc.writeMem(0xa60a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xc9c1, gbc.sp());
        EXPECT(0xa60c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa60a));
        EXPECT(0x15, gbc.readMem(0xa60b));
        // CB 15 00BB
        gbc.setState(0x903d, 0x3d85, 0x9740, 0x6182, 0x12a1, 0xb76c, 0x1, 0x0);
        gbc.writeMem(0x903d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x3d85, gbc.sp());
        EXPECT(0x903f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x903d));
        EXPECT(0x15, gbc.readMem(0x903e));
        // CB 15 00BD
        gbc.setState(0xccaa, 0x3eb7, 0x88c0, 0x5380, 0x892, 0xbdfa, 0x1, 0x0);
        gbc.writeMem(0xccaa, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x3eb7, gbc.sp());
        EXPECT(0xccac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccaa));
        EXPECT(0x15, gbc.readMem(0xccab));
        // CB 15 00BE
        gbc.setState(0xc0cd, 0x7340, 0xbf30, 0xc7c1, 0x6b08, 0x1713, 0x1, 0x1);
        gbc.writeMem(0xc0cd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x7340, gbc.sp());
        EXPECT(0xc0cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0cd));
        EXPECT(0x15, gbc.readMem(0xc0ce));
        // CB 15 00BF
        gbc.setState(0xa9a6, 0xc973, 0xe880, 0xa4c9, 0x8739, 0xc145, 0x1, 0x0);
        gbc.writeMem(0xa9a6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xc973, gbc.sp());
        EXPECT(0xa9a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9a6));
        EXPECT(0x15, gbc.readMem(0xa9a7));
        // CB 15 00C0
        gbc.setState(0x20c8, 0x1cd8, 0x3500, 0xe2b1, 0x2e81, 0xa371, 0x1, 0x0);
        gbc.writeMem(0x20c8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x1cd8, gbc.sp());
        EXPECT(0x20ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00C1
        gbc.setState(0x83df, 0x9543, 0x73c0, 0x901, 0x3555, 0xa990, 0x0, 0x0);
        gbc.writeMem(0x83df, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x9543, gbc.sp());
        EXPECT(0x83e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83df));
        EXPECT(0x15, gbc.readMem(0x83e0));
        // CB 15 00C2
        gbc.setState(0xdc0c, 0xd510, 0xee00, 0xb451, 0x9609, 0xcbfd, 0x1, 0x0);
        gbc.writeMem(0xdc0c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xd510, gbc.sp());
        EXPECT(0xdc0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc0c));
        EXPECT(0x15, gbc.readMem(0xdc0d));
        // CB 15 00C3
        gbc.setState(0x893b, 0x797a, 0xe0a0, 0xab5d, 0xd115, 0x8268, 0x0, 0x1);
        gbc.writeMem(0x893b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x797a, gbc.sp());
        EXPECT(0x893d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x893b));
        EXPECT(0x15, gbc.readMem(0x893c));
        // CB 15 00C4
        gbc.setState(0x5a69, 0xccf0, 0xcbb0, 0xfbd5, 0x36bb, 0x1e43, 0x0, 0x0);
        gbc.writeMem(0x5a69, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xccf0, gbc.sp());
        EXPECT(0x5a6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00C5
        gbc.setState(0x444e, 0xfb23, 0x2900, 0xf57b, 0xa7b9, 0xb7d, 0x1, 0x1);
        gbc.writeMem(0x444e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xfb23, gbc.sp());
        EXPECT(0x4450, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00C7
        gbc.setState(0xc15d, 0x3493, 0x38d0, 0x4fd2, 0xd9e8, 0x6d3e, 0x0, 0x1);
        gbc.writeMem(0xc15d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x3493, gbc.sp());
        EXPECT(0xc15f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc15d));
        EXPECT(0x15, gbc.readMem(0xc15e));
        // CB 15 00C8
        gbc.setState(0x447, 0x8804, 0xa960, 0xcb95, 0x68bc, 0xf8c, 0x1, 0x0);
        gbc.writeMem(0x447, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x8804, gbc.sp());
        EXPECT(0x449, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00C9
        gbc.setState(0xe7f, 0x42ad, 0x3eb0, 0x313c, 0x1ca, 0x1685, 0x0, 0x0);
        gbc.writeMem(0xe7f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x42ad, gbc.sp());
        EXPECT(0xe81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00CA
        gbc.setState(0xc7ee, 0x4d70, 0x950, 0x71c8, 0xcc74, 0xd811, 0x0, 0x1);
        gbc.writeMem(0xc7ee, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x4d70, gbc.sp());
        EXPECT(0xc7f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7ee));
        EXPECT(0x15, gbc.readMem(0xc7ef));
        // CB 15 00CB
        gbc.setState(0x325, 0x34ea, 0x9de0, 0xfd57, 0x84d3, 0xb30f, 0x1, 0x1);
        gbc.writeMem(0x325, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x34ea, gbc.sp());
        EXPECT(0x327, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00CC
        gbc.setState(0x5f81, 0x183a, 0x3a40, 0x86f0, 0xf5ed, 0x4050, 0x0, 0x0);
        gbc.writeMem(0x5f81, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x183a, gbc.sp());
        EXPECT(0x5f83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00CD
        gbc.setState(0xdbc3, 0x14cb, 0xec40, 0x5d46, 0xbcb1, 0xef70, 0x0, 0x0);
        gbc.writeMem(0xdbc3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x14cb, gbc.sp());
        EXPECT(0xdbc5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbc3));
        EXPECT(0x15, gbc.readMem(0xdbc4));
        // CB 15 00CE
        gbc.setState(0x77bb, 0xccbd, 0x70f0, 0x87c, 0xd3be, 0x21d2, 0x1, 0x1);
        gbc.writeMem(0x77bb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xccbd, gbc.sp());
        EXPECT(0x77bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00CF
        gbc.setState(0x63ba, 0x21c7, 0xa0f0, 0xa370, 0x602a, 0xc5d9, 0x1, 0x0);
        gbc.writeMem(0x63ba, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x21c7, gbc.sp());
        EXPECT(0x63bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00D0
        gbc.setState(0x2318, 0x2147, 0xc130, 0x8df5, 0xf96c, 0xa6e3, 0x1, 0x1);
        gbc.writeMem(0x2318, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x2147, gbc.sp());
        EXPECT(0x231a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00D1
        gbc.setState(0xa46, 0xfc74, 0xb970, 0x91ca, 0x6bf0, 0xdc68, 0x0, 0x1);
        gbc.writeMem(0xa46, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xfc74, gbc.sp());
        EXPECT(0xa48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00D2
        gbc.setState(0x8f2f, 0x4c39, 0xf930, 0x24c4, 0xbff7, 0x8a23, 0x1, 0x1);
        gbc.writeMem(0x8f2f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x4c39, gbc.sp());
        EXPECT(0x8f31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f2f));
        EXPECT(0x15, gbc.readMem(0x8f30));
        // CB 15 00D3
        gbc.setState(0x3516, 0xf3ba, 0x2fb0, 0x19fd, 0x4031, 0x8ebe, 0x0, 0x1);
        gbc.writeMem(0x3516, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xf3ba, gbc.sp());
        EXPECT(0x3518, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00D4
        gbc.setState(0xd70d, 0x73fd, 0xe660, 0x6516, 0xa17d, 0x8775, 0x1, 0x0);
        gbc.writeMem(0xd70d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x73fd, gbc.sp());
        EXPECT(0xd70f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd70d));
        EXPECT(0x15, gbc.readMem(0xd70e));
        // CB 15 00D5
        gbc.setState(0x12ce, 0x58ac, 0x96c0, 0xcfe2, 0xcd61, 0x71fe, 0x0, 0x1);
        gbc.writeMem(0x12ce, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x58ac, gbc.sp());
        EXPECT(0x12d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00D6
        gbc.setState(0x2444, 0xfda9, 0x3ee0, 0x416b, 0x79fc, 0xc88, 0x1, 0x0);
        gbc.writeMem(0x2444, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xfda9, gbc.sp());
        EXPECT(0x2446, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00D7
        gbc.setState(0x3200, 0xb365, 0xfd60, 0x343f, 0x80c9, 0x8ac2, 0x1, 0x0);
        gbc.writeMem(0x3200, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xb365, gbc.sp());
        EXPECT(0x3202, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00D8
        gbc.setState(0xa2ce, 0x1597, 0x8b0, 0x1929, 0x1ac, 0x3286, 0x1, 0x1);
        gbc.writeMem(0xa2ce, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x1597, gbc.sp());
        EXPECT(0xa2d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2ce));
        EXPECT(0x15, gbc.readMem(0xa2cf));
        // CB 15 00D9
        gbc.setState(0x38ed, 0xeeda, 0x6a90, 0xadee, 0x213a, 0x51a5, 0x1, 0x0);
        gbc.writeMem(0x38ed, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xeeda, gbc.sp());
        EXPECT(0x38ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00DA
        gbc.setState(0x1a12, 0x2086, 0xfd40, 0x5abb, 0xba50, 0xbc50, 0x1, 0x1);
        gbc.writeMem(0x1a12, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x2086, gbc.sp());
        EXPECT(0x1a14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00DB
        gbc.setState(0x274c, 0x40e8, 0xd490, 0x75b, 0xa530, 0x189f, 0x1, 0x1);
        gbc.writeMem(0x274c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x40e8, gbc.sp());
        EXPECT(0x274e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00DC
        gbc.setState(0x5a77, 0xa995, 0x12d0, 0xf243, 0x7677, 0x54c2, 0x1, 0x1);
        gbc.writeMem(0x5a77, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xa995, gbc.sp());
        EXPECT(0x5a79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00DD
        gbc.setState(0x9333, 0x9f9, 0xf270, 0x1835, 0x5ba, 0x9cc0, 0x0, 0x0);
        gbc.writeMem(0x9333, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x9f9, gbc.sp());
        EXPECT(0x9335, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9333));
        EXPECT(0x15, gbc.readMem(0x9334));
        // CB 15 00DE
        gbc.setState(0xce07, 0xdc3f, 0xe570, 0x42df, 0xef47, 0xc28e, 0x1, 0x0);
        gbc.writeMem(0xce07, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xdc3f, gbc.sp());
        EXPECT(0xce09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce07));
        EXPECT(0x15, gbc.readMem(0xce08));
        // CB 15 00DF
        gbc.setState(0x423, 0x75cb, 0x74f0, 0x316b, 0xc890, 0xed78, 0x0, 0x1);
        gbc.writeMem(0x423, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x75cb, gbc.sp());
        EXPECT(0x425, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00E0
        gbc.setState(0xdcf8, 0x8044, 0x6d50, 0x284a, 0xb4e, 0xf135, 0x0, 0x0);
        gbc.writeMem(0xdcf8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x8044, gbc.sp());
        EXPECT(0xdcfa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcf8));
        EXPECT(0x15, gbc.readMem(0xdcf9));
        // CB 15 00E1
        gbc.setState(0x55f, 0xb71d, 0xa240, 0x370d, 0x80b2, 0x19ee, 0x0, 0x0);
        gbc.writeMem(0x55f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xb71d, gbc.sp());
        EXPECT(0x561, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00E2
        gbc.setState(0x7ee0, 0x8aa1, 0xd010, 0xeff2, 0x4991, 0xbf4, 0x0, 0x1);
        gbc.writeMem(0x7ee0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x8aa1, gbc.sp());
        EXPECT(0x7ee2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00E3
        gbc.setState(0x127, 0x5a6b, 0x5f10, 0x67d3, 0xa688, 0xb74f, 0x0, 0x1);
        gbc.writeMem(0x127, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x5a6b, gbc.sp());
        EXPECT(0x129, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00E4
        gbc.setState(0x3ce5, 0xa101, 0x9470, 0xffea, 0x3c53, 0x5425, 0x1, 0x1);
        gbc.writeMem(0x3ce5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xa101, gbc.sp());
        EXPECT(0x3ce7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00E6
        gbc.setState(0x6a2a, 0xb9a2, 0x6e50, 0x10c3, 0x8836, 0x15e1, 0x1, 0x1);
        gbc.writeMem(0x6a2a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xb9a2, gbc.sp());
        EXPECT(0x6a2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00E7
        gbc.setState(0x169f, 0xaa54, 0x31d0, 0xc5c0, 0x66de, 0x7671, 0x0, 0x0);
        gbc.writeMem(0x169f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xaa54, gbc.sp());
        EXPECT(0x16a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00E8
        gbc.setState(0xe71b, 0x86c2, 0x68c0, 0x58b9, 0x4577, 0x79e3, 0x1, 0x0);
        gbc.writeMem(0xe71b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x86c2, gbc.sp());
        EXPECT(0xe71d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe71b));
        EXPECT(0x15, gbc.readMem(0xe71c));
        // CB 15 00E9
        gbc.setState(0x42fd, 0x55f4, 0x10f0, 0x1701, 0x1578, 0x1ea2, 0x1, 0x1);
        gbc.writeMem(0x42fd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x55f4, gbc.sp());
        EXPECT(0x42ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00EA
        gbc.setState(0x4c58, 0xe274, 0x4670, 0x24bb, 0x9b86, 0x40a9, 0x0, 0x1);
        gbc.writeMem(0x4c58, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xe274, gbc.sp());
        EXPECT(0x4c5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00EB
        gbc.setState(0x5052, 0x7392, 0x2150, 0xf0ed, 0xa40f, 0x63e4, 0x1, 0x1);
        gbc.writeMem(0x5052, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x7392, gbc.sp());
        EXPECT(0x5054, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00EC
        gbc.setState(0xb988, 0x3344, 0xcb80, 0x7c35, 0x42d3, 0xaa30, 0x1, 0x0);
        gbc.writeMem(0xb988, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x3344, gbc.sp());
        EXPECT(0xb98a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb988));
        EXPECT(0x15, gbc.readMem(0xb989));
        // CB 15 00EE
        gbc.setState(0xcbb5, 0x4d9c, 0xa130, 0x626a, 0x6018, 0x59aa, 0x1, 0x1);
        gbc.writeMem(0xcbb5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x4d9c, gbc.sp());
        EXPECT(0xcbb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbb5));
        EXPECT(0x15, gbc.readMem(0xcbb6));
        // CB 15 00EF
        gbc.setState(0x1c49, 0xc321, 0x9820, 0x1a83, 0x83ef, 0xcb61, 0x0, 0x1);
        gbc.writeMem(0x1c49, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xc321, gbc.sp());
        EXPECT(0x1c4b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00F0
        gbc.setState(0x22ca, 0x2a23, 0xaf30, 0x44f9, 0x8476, 0xb1ce, 0x1, 0x0);
        gbc.writeMem(0x22ca, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x2a23, gbc.sp());
        EXPECT(0x22cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00F2
        gbc.setState(0x6e65, 0x9c0d, 0xd290, 0x8870, 0xe87e, 0xcdbb, 0x0, 0x0);
        gbc.writeMem(0x6e65, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x9c0d, gbc.sp());
        EXPECT(0x6e67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00F3
        gbc.setState(0x92eb, 0x381a, 0x2920, 0x150a, 0x606f, 0xd457, 0x0, 0x1);
        gbc.writeMem(0x92eb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x381a, gbc.sp());
        EXPECT(0x92ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92eb));
        EXPECT(0x15, gbc.readMem(0x92ec));
        // CB 15 00F4
        gbc.setState(0x57b4, 0x1d25, 0x7140, 0x28f9, 0x8f3a, 0x7b0c, 0x0, 0x1);
        gbc.writeMem(0x57b4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x1d25, gbc.sp());
        EXPECT(0x57b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00F5
        gbc.setState(0x5f55, 0x412e, 0xd350, 0xe414, 0x74dc, 0x24d0, 0x1, 0x1);
        gbc.writeMem(0x5f55, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x412e, gbc.sp());
        EXPECT(0x5f57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00F6
        gbc.setState(0x27e3, 0x5008, 0xfaf0, 0xe1cc, 0x4af2, 0x970e, 0x0, 0x1);
        gbc.writeMem(0x27e3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x5008, gbc.sp());
        EXPECT(0x27e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 00F7
        gbc.setState(0x1d65, 0x2701, 0x5560, 0xc194, 0xcded, 0x1bcf, 0x0, 0x1);
        gbc.writeMem(0x1d65, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x2701, gbc.sp());
        EXPECT(0x1d67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00F8
        gbc.setState(0x80fe, 0x8df4, 0xc770, 0x90b9, 0x348e, 0xa119, 0x1, 0x1);
        gbc.writeMem(0x80fe, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x8df4, gbc.sp());
        EXPECT(0x8100, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80fe));
        EXPECT(0x15, gbc.readMem(0x80ff));
        // CB 15 00F9
        gbc.setState(0x81f0, 0xeb04, 0xaa70, 0xda4f, 0xf6cc, 0x1609, 0x1, 0x0);
        gbc.writeMem(0x81f0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xeb04, gbc.sp());
        EXPECT(0x81f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81f0));
        EXPECT(0x15, gbc.readMem(0x81f1));
        // CB 15 00FA
        gbc.setState(0xee73, 0x2d24, 0x1be0, 0x2aca, 0xf6d9, 0x15d, 0x0, 0x1);
        gbc.writeMem(0xee73, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x2d24, gbc.sp());
        EXPECT(0xee75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee73));
        EXPECT(0x15, gbc.readMem(0xee74));
        // CB 15 00FB
        gbc.setState(0xe760, 0xeda9, 0xe420, 0xea09, 0x4412, 0x6705, 0x0, 0x1);
        gbc.writeMem(0xe760, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xeda9, gbc.sp());
        EXPECT(0xe762, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe760));
        EXPECT(0x15, gbc.readMem(0xe761));
        // CB 15 00FC
        gbc.setState(0xd1e1, 0x5d32, 0xae30, 0xaf6f, 0x5f99, 0x486e, 0x1, 0x0);
        gbc.writeMem(0xd1e1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x5d32, gbc.sp());
        EXPECT(0xd1e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1e1));
        EXPECT(0x15, gbc.readMem(0xd1e2));
        // CB 15 00FD
        gbc.setState(0xe04a, 0x71c0, 0x6c30, 0x28bf, 0x4bd6, 0x348f, 0x0, 0x1);
        gbc.writeMem(0xe04a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x71c0, gbc.sp());
        EXPECT(0xe04c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe04a));
        EXPECT(0x15, gbc.readMem(0xe04b));
        // CB 15 00FE
        gbc.setState(0x2f1b, 0xb5ea, 0x9e00, 0xc9fb, 0x8428, 0x32db, 0x1, 0x1);
        gbc.writeMem(0x2f1b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xb5ea, gbc.sp());
        EXPECT(0x2f1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 00FF
        gbc.setState(0xa66d, 0x22e1, 0xe200, 0xe0da, 0xf82e, 0xdf92, 0x1, 0x0);
        gbc.writeMem(0xa66d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x22e1, gbc.sp());
        EXPECT(0xa66f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa66d));
        EXPECT(0x15, gbc.readMem(0xa66e));
        // CB 15 0100
        gbc.setState(0x242c, 0x5f52, 0x5780, 0x1229, 0xa2b4, 0xf80f, 0x1, 0x1);
        gbc.writeMem(0x242c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x5f52, gbc.sp());
        EXPECT(0x242e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0101
        gbc.setState(0x3ca8, 0xb1f3, 0x1a00, 0x7d9e, 0x1878, 0x98fc, 0x0, 0x0);
        gbc.writeMem(0x3ca8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xb1f3, gbc.sp());
        EXPECT(0x3caa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0102
        gbc.setState(0x598c, 0x44a4, 0x8f0, 0xdca5, 0xc393, 0x8b17, 0x0, 0x1);
        gbc.writeMem(0x598c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x44a4, gbc.sp());
        EXPECT(0x598e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0103
        gbc.setState(0x938f, 0xcba5, 0xb8a0, 0x6b89, 0x8da4, 0x68bb, 0x1, 0x0);
        gbc.writeMem(0x938f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xcba5, gbc.sp());
        EXPECT(0x9391, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x938f));
        EXPECT(0x15, gbc.readMem(0x9390));
        // CB 15 0104
        gbc.setState(0xd65b, 0xb728, 0xcc50, 0x8e3b, 0x5227, 0xf10d, 0x1, 0x1);
        gbc.writeMem(0xd65b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xb728, gbc.sp());
        EXPECT(0xd65d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd65b));
        EXPECT(0x15, gbc.readMem(0xd65c));
        // CB 15 0105
        gbc.setState(0x2b4b, 0x4288, 0x9170, 0xe5c6, 0xdd5f, 0xd2e0, 0x1, 0x1);
        gbc.writeMem(0x2b4b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x4288, gbc.sp());
        EXPECT(0x2b4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0106
        gbc.setState(0x689d, 0xbf2, 0x6f00, 0xf791, 0x22bc, 0x2619, 0x1, 0x0);
        gbc.writeMem(0x689d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xbf2, gbc.sp());
        EXPECT(0x689f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0107
        gbc.setState(0x1f53, 0xbb4d, 0xb400, 0x4754, 0xc7bf, 0x2e3c, 0x0, 0x1);
        gbc.writeMem(0x1f53, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xbb4d, gbc.sp());
        EXPECT(0x1f55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0108
        gbc.setState(0x6b85, 0x27ba, 0xce70, 0xac97, 0x9338, 0x6424, 0x1, 0x1);
        gbc.writeMem(0x6b85, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x27ba, gbc.sp());
        EXPECT(0x6b87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0109
        gbc.setState(0x726b, 0x1f03, 0xbfc0, 0x1698, 0x65e1, 0xabad, 0x0, 0x0);
        gbc.writeMem(0x726b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x1f03, gbc.sp());
        EXPECT(0x726d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 010A
        gbc.setState(0x68ba, 0xf2b, 0xce90, 0x4552, 0xd62a, 0xf27f, 0x1, 0x0);
        gbc.writeMem(0x68ba, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xf2b, gbc.sp());
        EXPECT(0x68bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 010B
        gbc.setState(0x4d52, 0x2d67, 0x69c0, 0xaf9b, 0x6868, 0xed67, 0x1, 0x1);
        gbc.writeMem(0x4d52, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x2d67, gbc.sp());
        EXPECT(0x4d54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 010C
        gbc.setState(0xea4e, 0x2a31, 0x6630, 0x50bf, 0x32c9, 0x61a0, 0x1, 0x0);
        gbc.writeMem(0xea4e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x2a31, gbc.sp());
        EXPECT(0xea50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea4e));
        EXPECT(0x15, gbc.readMem(0xea4f));
        // CB 15 010D
        gbc.setState(0xe9a5, 0xd4fb, 0x24b0, 0xce72, 0xcdfb, 0x112d, 0x0, 0x0);
        gbc.writeMem(0xe9a5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xd4fb, gbc.sp());
        EXPECT(0xe9a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9a5));
        EXPECT(0x15, gbc.readMem(0xe9a6));
        // CB 15 010E
        gbc.setState(0xd1b5, 0x2fa9, 0xb6e0, 0xb88a, 0xb1d8, 0x5965, 0x1, 0x1);
        gbc.writeMem(0xd1b5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x2fa9, gbc.sp());
        EXPECT(0xd1b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1b5));
        EXPECT(0x15, gbc.readMem(0xd1b6));
        // CB 15 010F
        gbc.setState(0x66e8, 0x4858, 0x99b0, 0x5f30, 0xcf65, 0x1201, 0x1, 0x0);
        gbc.writeMem(0x66e8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x4858, gbc.sp());
        EXPECT(0x66ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0110
        gbc.setState(0x9286, 0x904c, 0x3e10, 0x8808, 0xc294, 0x20e6, 0x0, 0x1);
        gbc.writeMem(0x9286, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x904c, gbc.sp());
        EXPECT(0x9288, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9286));
        EXPECT(0x15, gbc.readMem(0x9287));
        // CB 15 0111
        gbc.setState(0x4d7f, 0xa6a7, 0x3990, 0xcc07, 0x683c, 0x14dd, 0x0, 0x1);
        gbc.writeMem(0x4d7f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xa6a7, gbc.sp());
        EXPECT(0x4d81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0112
        gbc.setState(0x96b0, 0x99c9, 0xf630, 0xc823, 0xaa1, 0x8e8b, 0x1, 0x0);
        gbc.writeMem(0x96b0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x99c9, gbc.sp());
        EXPECT(0x96b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96b0));
        EXPECT(0x15, gbc.readMem(0x96b1));
        // CB 15 0113
        gbc.setState(0x47b3, 0xee94, 0xb4e0, 0xc549, 0xbfa4, 0x446e, 0x1, 0x0);
        gbc.writeMem(0x47b3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xee94, gbc.sp());
        EXPECT(0x47b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0114
        gbc.setState(0x8989, 0xfab5, 0x4cd0, 0x8101, 0xc0f4, 0xe9ed, 0x0, 0x1);
        gbc.writeMem(0x8989, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xfab5, gbc.sp());
        EXPECT(0x898b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8989));
        EXPECT(0x15, gbc.readMem(0x898a));
        // CB 15 0115
        gbc.setState(0xbd7c, 0xcf0e, 0x2db0, 0x6faa, 0xff34, 0x3357, 0x0, 0x0);
        gbc.writeMem(0xbd7c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xcf0e, gbc.sp());
        EXPECT(0xbd7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd7c));
        EXPECT(0x15, gbc.readMem(0xbd7d));
        // CB 15 0116
        gbc.setState(0xec7b, 0x8eb4, 0x7250, 0xcef3, 0x2559, 0x1311, 0x1, 0x1);
        gbc.writeMem(0xec7b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x8eb4, gbc.sp());
        EXPECT(0xec7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec7b));
        EXPECT(0x15, gbc.readMem(0xec7c));
        // CB 15 0117
        gbc.setState(0x2872, 0xf8e1, 0xc100, 0xcc3a, 0x5b3b, 0x86b4, 0x1, 0x0);
        gbc.writeMem(0x2872, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xf8e1, gbc.sp());
        EXPECT(0x2874, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0118
        gbc.setState(0x8b23, 0x112a, 0x9a60, 0x1bf2, 0x9cf4, 0xc29d, 0x1, 0x1);
        gbc.writeMem(0x8b23, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x112a, gbc.sp());
        EXPECT(0x8b25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b23));
        EXPECT(0x15, gbc.readMem(0x8b24));
        // CB 15 0119
        gbc.setState(0x3bf9, 0xcb82, 0xc7b0, 0xa3a5, 0xebcc, 0x5f86, 0x1, 0x1);
        gbc.writeMem(0x3bf9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xcb82, gbc.sp());
        EXPECT(0x3bfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 011A
        gbc.setState(0x7262, 0xe5a9, 0xe160, 0x24c1, 0x9484, 0x1032, 0x0, 0x0);
        gbc.writeMem(0x7262, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xe5a9, gbc.sp());
        EXPECT(0x7264, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 011B
        gbc.setState(0xee4b, 0x65d3, 0x6370, 0xb4db, 0xe85b, 0xbed2, 0x1, 0x0);
        gbc.writeMem(0xee4b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x65d3, gbc.sp());
        EXPECT(0xee4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee4b));
        EXPECT(0x15, gbc.readMem(0xee4c));
        // CB 15 011C
        gbc.setState(0xca51, 0x29e, 0x7c60, 0x185b, 0xe530, 0x3c89, 0x0, 0x0);
        gbc.writeMem(0xca51, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x29e, gbc.sp());
        EXPECT(0xca53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca51));
        EXPECT(0x15, gbc.readMem(0xca52));
        // CB 15 011D
        gbc.setState(0xb99e, 0x45a7, 0xfad0, 0x1542, 0x1cc8, 0x994b, 0x0, 0x1);
        gbc.writeMem(0xb99e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x45a7, gbc.sp());
        EXPECT(0xb9a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb99e));
        EXPECT(0x15, gbc.readMem(0xb99f));
        // CB 15 011E
        gbc.setState(0xa6aa, 0xf6de, 0x85c0, 0xa7b8, 0xb07c, 0x2c44, 0x1, 0x1);
        gbc.writeMem(0xa6aa, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xf6de, gbc.sp());
        EXPECT(0xa6ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6aa));
        EXPECT(0x15, gbc.readMem(0xa6ab));
        // CB 15 011F
        gbc.setState(0xded8, 0xf07, 0x5310, 0xbd64, 0x6cdf, 0xc578, 0x1, 0x1);
        gbc.writeMem(0xded8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xf07, gbc.sp());
        EXPECT(0xdeda, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xded8));
        EXPECT(0x15, gbc.readMem(0xded9));
        // CB 15 0120
        gbc.setState(0x9e3, 0xd369, 0x85f0, 0x3c93, 0xe686, 0x3e13, 0x1, 0x1);
        gbc.writeMem(0x9e3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xd369, gbc.sp());
        EXPECT(0x9e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0121
        gbc.setState(0x3307, 0xe296, 0x9bd0, 0xd98e, 0xb611, 0x1412, 0x1, 0x1);
        gbc.writeMem(0x3307, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xe296, gbc.sp());
        EXPECT(0x3309, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0122
        gbc.setState(0xe33d, 0x2262, 0x3b40, 0x8453, 0x356c, 0x81b0, 0x1, 0x1);
        gbc.writeMem(0xe33d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x2262, gbc.sp());
        EXPECT(0xe33f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe33d));
        EXPECT(0x15, gbc.readMem(0xe33e));
        // CB 15 0123
        gbc.setState(0x79cf, 0x20a7, 0x3a40, 0x70f, 0xf95, 0x58ac, 0x0, 0x0);
        gbc.writeMem(0x79cf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x20a7, gbc.sp());
        EXPECT(0x79d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0124
        gbc.setState(0x94d9, 0xfde0, 0xd830, 0x932, 0x40b3, 0xe2ce, 0x0, 0x1);
        gbc.writeMem(0x94d9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xfde0, gbc.sp());
        EXPECT(0x94db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94d9));
        EXPECT(0x15, gbc.readMem(0x94da));
        // CB 15 0125
        gbc.setState(0x9a70, 0x67c8, 0x3f60, 0x4d20, 0xb7ff, 0xe496, 0x1, 0x1);
        gbc.writeMem(0x9a70, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x67c8, gbc.sp());
        EXPECT(0x9a72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a70));
        EXPECT(0x15, gbc.readMem(0x9a71));
        // CB 15 0126
        gbc.setState(0x83d7, 0x28ab, 0xdd10, 0xb26b, 0x5cdf, 0x2c77, 0x0, 0x1);
        gbc.writeMem(0x83d7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x28ab, gbc.sp());
        EXPECT(0x83d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83d7));
        EXPECT(0x15, gbc.readMem(0x83d8));
        // CB 15 0127
        gbc.setState(0x1d95, 0xa5b9, 0x2980, 0x1afa, 0x3120, 0x3719, 0x0, 0x0);
        gbc.writeMem(0x1d95, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xa5b9, gbc.sp());
        EXPECT(0x1d97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0128
        gbc.setState(0x29f2, 0xa866, 0x7550, 0xb868, 0x90d0, 0x4df1, 0x1, 0x0);
        gbc.writeMem(0x29f2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xa866, gbc.sp());
        EXPECT(0x29f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0129
        gbc.setState(0xb3ad, 0x5cfb, 0xa2a0, 0xd3b1, 0xac6c, 0x393f, 0x1, 0x0);
        gbc.writeMem(0xb3ad, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x5cfb, gbc.sp());
        EXPECT(0xb3af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3ad));
        EXPECT(0x15, gbc.readMem(0xb3ae));
        // CB 15 012A
        gbc.setState(0x7760, 0x2fe7, 0x35f0, 0x1ae1, 0xae4a, 0x76b0, 0x1, 0x0);
        gbc.writeMem(0x7760, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x2fe7, gbc.sp());
        EXPECT(0x7762, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 012B
        gbc.setState(0x31e3, 0xb3ab, 0xa370, 0xa85c, 0x6f6d, 0x2310, 0x0, 0x0);
        gbc.writeMem(0x31e3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xb3ab, gbc.sp());
        EXPECT(0x31e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 012C
        gbc.setState(0xa424, 0x1b00, 0xa280, 0xf560, 0xc449, 0x9d51, 0x1, 0x1);
        gbc.writeMem(0xa424, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x1b00, gbc.sp());
        EXPECT(0xa426, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa424));
        EXPECT(0x15, gbc.readMem(0xa425));
        // CB 15 012D
        gbc.setState(0x345e, 0x8fb1, 0xc950, 0x1b66, 0xe691, 0x914c, 0x0, 0x0);
        gbc.writeMem(0x345e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x8fb1, gbc.sp());
        EXPECT(0x3460, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 012E
        gbc.setState(0x1217, 0xa712, 0xfc30, 0x42cf, 0x85dd, 0x4700, 0x1, 0x1);
        gbc.writeMem(0x1217, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xa712, gbc.sp());
        EXPECT(0x1219, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 012F
        gbc.setState(0xd784, 0xe65f, 0x2ec0, 0x279c, 0x9417, 0x28e5, 0x0, 0x0);
        gbc.writeMem(0xd784, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xe65f, gbc.sp());
        EXPECT(0xd786, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd784));
        EXPECT(0x15, gbc.readMem(0xd785));
        // CB 15 0130
        gbc.setState(0xa680, 0x31d3, 0xaa70, 0x9798, 0x3ebb, 0xaa3e, 0x1, 0x0);
        gbc.writeMem(0xa680, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x31d3, gbc.sp());
        EXPECT(0xa682, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa680));
        EXPECT(0x15, gbc.readMem(0xa681));
        // CB 15 0131
        gbc.setState(0x2518, 0x8f8f, 0x73a0, 0x6076, 0x8ead, 0xf0d2, 0x0, 0x1);
        gbc.writeMem(0x2518, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x8f8f, gbc.sp());
        EXPECT(0x251a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0132
        gbc.setState(0x9f84, 0xcf12, 0x2b60, 0x2f2a, 0x92e, 0x1efc, 0x0, 0x0);
        gbc.writeMem(0x9f84, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xcf12, gbc.sp());
        EXPECT(0x9f86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f84));
        EXPECT(0x15, gbc.readMem(0x9f85));
        // CB 15 0133
        gbc.setState(0x3856, 0xfd7b, 0x5910, 0x202, 0xb7f9, 0xc242, 0x0, 0x0);
        gbc.writeMem(0x3856, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xfd7b, gbc.sp());
        EXPECT(0x3858, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0134
        gbc.setState(0x81c, 0xcc09, 0x3790, 0x3940, 0xc869, 0x9cb9, 0x1, 0x1);
        gbc.writeMem(0x81c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xcc09, gbc.sp());
        EXPECT(0x81e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0135
        gbc.setState(0x4f03, 0xb0c9, 0xb7a0, 0x982, 0x32f6, 0xdda0, 0x0, 0x0);
        gbc.writeMem(0x4f03, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xb0c9, gbc.sp());
        EXPECT(0x4f05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0136
        gbc.setState(0x9f97, 0xb852, 0x5cb0, 0x8bb7, 0x58ce, 0xacd1, 0x0, 0x0);
        gbc.writeMem(0x9f97, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xb852, gbc.sp());
        EXPECT(0x9f99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f97));
        EXPECT(0x15, gbc.readMem(0x9f98));
        // CB 15 0137
        gbc.setState(0x8da9, 0xf245, 0x97a0, 0x40e5, 0x2d6f, 0xed0, 0x1, 0x1);
        gbc.writeMem(0x8da9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xf245, gbc.sp());
        EXPECT(0x8dab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8da9));
        EXPECT(0x15, gbc.readMem(0x8daa));
        // CB 15 0138
        gbc.setState(0x4c8a, 0xb031, 0x1020, 0xf5a4, 0x415d, 0xa7fd, 0x0, 0x0);
        gbc.writeMem(0x4c8a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xb031, gbc.sp());
        EXPECT(0x4c8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0139
        gbc.setState(0x61ef, 0x40c3, 0xb460, 0x143a, 0x8e70, 0x7e54, 0x0, 0x1);
        gbc.writeMem(0x61ef, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x40c3, gbc.sp());
        EXPECT(0x61f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 013A
        gbc.setState(0xee29, 0xe97c, 0x4040, 0x3625, 0x1c09, 0x3b3b, 0x0, 0x0);
        gbc.writeMem(0xee29, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xe97c, gbc.sp());
        EXPECT(0xee2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee29));
        EXPECT(0x15, gbc.readMem(0xee2a));
        // CB 15 013B
        gbc.setState(0x74a2, 0x64, 0x10a0, 0x5eb2, 0xc46a, 0x9ebe, 0x0, 0x1);
        gbc.writeMem(0x74a2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x64, gbc.sp());
        EXPECT(0x74a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 013C
        gbc.setState(0x7707, 0xe5a7, 0xc3b0, 0x6591, 0xd895, 0xb175, 0x0, 0x1);
        gbc.writeMem(0x7707, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xe5a7, gbc.sp());
        EXPECT(0x7709, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 013D
        gbc.setState(0xbd45, 0x2836, 0x6ae0, 0x9371, 0x21cf, 0xdf0c, 0x1, 0x0);
        gbc.writeMem(0xbd45, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x2836, gbc.sp());
        EXPECT(0xbd47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd45));
        EXPECT(0x15, gbc.readMem(0xbd46));
        // CB 15 013F
        gbc.setState(0x723a, 0x1f1a, 0x67c0, 0xf767, 0x41df, 0xe285, 0x1, 0x0);
        gbc.writeMem(0x723a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x1f1a, gbc.sp());
        EXPECT(0x723c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0140
        gbc.setState(0xe196, 0x3f40, 0x160, 0x3ef8, 0xedd5, 0x7f6, 0x0, 0x0);
        gbc.writeMem(0xe196, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x3f40, gbc.sp());
        EXPECT(0xe198, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe196));
        EXPECT(0x15, gbc.readMem(0xe197));
        // CB 15 0141
        gbc.setState(0x1f1d, 0x7c69, 0x20e0, 0xf659, 0x784b, 0x2873, 0x1, 0x0);
        gbc.writeMem(0x1f1d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x7c69, gbc.sp());
        EXPECT(0x1f1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0142
        gbc.setState(0xe0e7, 0xd143, 0xd5b0, 0x90a1, 0xcaac, 0x57a7, 0x1, 0x1);
        gbc.writeMem(0xe0e7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xd143, gbc.sp());
        EXPECT(0xe0e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0e7));
        EXPECT(0x15, gbc.readMem(0xe0e8));
        // CB 15 0143
        gbc.setState(0xc2f2, 0xad62, 0x4500, 0x54aa, 0x373e, 0x6cc9, 0x1, 0x0);
        gbc.writeMem(0xc2f2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xad62, gbc.sp());
        EXPECT(0xc2f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2f2));
        EXPECT(0x15, gbc.readMem(0xc2f3));
        // CB 15 0144
        gbc.setState(0x19da, 0xe918, 0x45c0, 0x9e6b, 0xe461, 0xbac9, 0x0, 0x0);
        gbc.writeMem(0x19da, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xe918, gbc.sp());
        EXPECT(0x19dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0145
        gbc.setState(0x6857, 0x10ab, 0xea00, 0x3c6e, 0xe07c, 0xa33e, 0x1, 0x1);
        gbc.writeMem(0x6857, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x10ab, gbc.sp());
        EXPECT(0x6859, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0146
        gbc.setState(0x2133, 0x39a1, 0xe2b0, 0xe58b, 0x6bb4, 0x534e, 0x1, 0x1);
        gbc.writeMem(0x2133, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x39a1, gbc.sp());
        EXPECT(0x2135, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0147
        gbc.setState(0xaf96, 0xfaf3, 0xc5b0, 0x8c96, 0x405, 0x40a1, 0x1, 0x1);
        gbc.writeMem(0xaf96, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xfaf3, gbc.sp());
        EXPECT(0xaf98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf96));
        EXPECT(0x15, gbc.readMem(0xaf97));
        // CB 15 0148
        gbc.setState(0x99bc, 0xb845, 0xd840, 0xbdf8, 0xcc59, 0xc5d9, 0x0, 0x1);
        gbc.writeMem(0x99bc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xb845, gbc.sp());
        EXPECT(0x99be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99bc));
        EXPECT(0x15, gbc.readMem(0x99bd));
        // CB 15 0149
        gbc.setState(0x169c, 0x3d37, 0xf030, 0xe4ac, 0xd1bf, 0xd35f, 0x0, 0x0);
        gbc.writeMem(0x169c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x3d37, gbc.sp());
        EXPECT(0x169e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 014A
        gbc.setState(0xd805, 0xf985, 0x2110, 0x64fc, 0x332b, 0x8277, 0x0, 0x1);
        gbc.writeMem(0xd805, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xf985, gbc.sp());
        EXPECT(0xd807, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd805));
        EXPECT(0x15, gbc.readMem(0xd806));
        // CB 15 014B
        gbc.setState(0x1dfd, 0xd220, 0x5b00, 0xe708, 0x57d, 0xa919, 0x1, 0x0);
        gbc.writeMem(0x1dfd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xd220, gbc.sp());
        EXPECT(0x1dff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 014C
        gbc.setState(0x237a, 0xd3a4, 0xfa80, 0x3d7a, 0xbf5f, 0x50f8, 0x0, 0x1);
        gbc.writeMem(0x237a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xd3a4, gbc.sp());
        EXPECT(0x237c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 014D
        gbc.setState(0xee6b, 0xcb18, 0xb3f0, 0x7169, 0xb337, 0xb55e, 0x1, 0x0);
        gbc.writeMem(0xee6b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xcb18, gbc.sp());
        EXPECT(0xee6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee6b));
        EXPECT(0x15, gbc.readMem(0xee6c));
        // CB 15 014E
        gbc.setState(0xa1e7, 0xf6a0, 0x5080, 0x9753, 0x293b, 0x17f0, 0x1, 0x0);
        gbc.writeMem(0xa1e7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xf6a0, gbc.sp());
        EXPECT(0xa1e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1e7));
        EXPECT(0x15, gbc.readMem(0xa1e8));
        // CB 15 014F
        gbc.setState(0xc202, 0x5b0e, 0x1400, 0xd035, 0x264f, 0x9de1, 0x1, 0x0);
        gbc.writeMem(0xc202, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x5b0e, gbc.sp());
        EXPECT(0xc204, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc202));
        EXPECT(0x15, gbc.readMem(0xc203));
        // CB 15 0150
        gbc.setState(0x1a29, 0xf359, 0x63a0, 0xbbd0, 0x34bb, 0xcfca, 0x1, 0x1);
        gbc.writeMem(0x1a29, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xf359, gbc.sp());
        EXPECT(0x1a2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0151
        gbc.setState(0x177, 0x71d, 0xb110, 0xf48b, 0x8f49, 0x6519, 0x1, 0x0);
        gbc.writeMem(0x177, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x71d, gbc.sp());
        EXPECT(0x179, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0152
        gbc.setState(0x1044, 0x1c6b, 0x7db0, 0x7a23, 0x90e1, 0x10d5, 0x0, 0x1);
        gbc.writeMem(0x1044, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x1c6b, gbc.sp());
        EXPECT(0x1046, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0153
        gbc.setState(0xdb5b, 0xa243, 0xf8b0, 0x1c26, 0x1dac, 0x7a2e, 0x1, 0x0);
        gbc.writeMem(0xdb5b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xa243, gbc.sp());
        EXPECT(0xdb5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb5b));
        EXPECT(0x15, gbc.readMem(0xdb5c));
        // CB 15 0154
        gbc.setState(0x4315, 0xc91d, 0x4830, 0x127b, 0xac1e, 0xc918, 0x1, 0x1);
        gbc.writeMem(0x4315, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xc91d, gbc.sp());
        EXPECT(0x4317, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0155
        gbc.setState(0x30ab, 0xea6e, 0x1f70, 0x8445, 0x9c0b, 0x8c8, 0x1, 0x1);
        gbc.writeMem(0x30ab, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xea6e, gbc.sp());
        EXPECT(0x30ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0156
        gbc.setState(0xe233, 0xe02a, 0x9a80, 0xee88, 0x94ab, 0x5cfa, 0x1, 0x0);
        gbc.writeMem(0xe233, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xe02a, gbc.sp());
        EXPECT(0xe235, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe233));
        EXPECT(0x15, gbc.readMem(0xe234));
        // CB 15 0157
        gbc.setState(0xea62, 0x63a6, 0xc1e0, 0xa0a, 0xd299, 0x3535, 0x1, 0x1);
        gbc.writeMem(0xea62, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x63a6, gbc.sp());
        EXPECT(0xea64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea62));
        EXPECT(0x15, gbc.readMem(0xea63));
        // CB 15 0158
        gbc.setState(0x60e, 0xdee8, 0xe430, 0x2208, 0x8a0, 0x17ad, 0x1, 0x0);
        gbc.writeMem(0x60e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xdee8, gbc.sp());
        EXPECT(0x610, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0159
        gbc.setState(0xd4c8, 0x127c, 0xdc20, 0xf640, 0x1c91, 0xcf45, 0x1, 0x1);
        gbc.writeMem(0xd4c8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x127c, gbc.sp());
        EXPECT(0xd4ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4c8));
        EXPECT(0x15, gbc.readMem(0xd4c9));
        // CB 15 015A
        gbc.setState(0x75e9, 0xf62a, 0x1ee0, 0x8601, 0xec6c, 0x8aae, 0x0, 0x0);
        gbc.writeMem(0x75e9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xf62a, gbc.sp());
        EXPECT(0x75eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 015B
        gbc.setState(0x7459, 0x30c7, 0x260, 0xe759, 0x9034, 0x2920, 0x1, 0x1);
        gbc.writeMem(0x7459, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x30c7, gbc.sp());
        EXPECT(0x745b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 015C
        gbc.setState(0xce55, 0x69b9, 0xe3b0, 0xd3c, 0x7a9a, 0x70df, 0x0, 0x1);
        gbc.writeMem(0xce55, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x69b9, gbc.sp());
        EXPECT(0xce57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce55));
        EXPECT(0x15, gbc.readMem(0xce56));
        // CB 15 015D
        gbc.setState(0xe926, 0xe1d7, 0xb3c0, 0x2f96, 0x2867, 0x6154, 0x0, 0x1);
        gbc.writeMem(0xe926, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xe1d7, gbc.sp());
        EXPECT(0xe928, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe926));
        EXPECT(0x15, gbc.readMem(0xe927));
        // CB 15 015E
        gbc.setState(0xd9de, 0x646d, 0x68d0, 0x4b9a, 0x5628, 0xb25b, 0x0, 0x1);
        gbc.writeMem(0xd9de, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x646d, gbc.sp());
        EXPECT(0xd9e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9de));
        EXPECT(0x15, gbc.readMem(0xd9df));
        // CB 15 015F
        gbc.setState(0xd58e, 0x7f40, 0xd3e0, 0x7744, 0x64e4, 0xe9c, 0x0, 0x0);
        gbc.writeMem(0xd58e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x7f40, gbc.sp());
        EXPECT(0xd590, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd58e));
        EXPECT(0x15, gbc.readMem(0xd58f));
        // CB 15 0160
        gbc.setState(0x61a1, 0x9ac1, 0x7af0, 0xf453, 0xa19a, 0x9dc1, 0x1, 0x1);
        gbc.writeMem(0x61a1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x9ac1, gbc.sp());
        EXPECT(0x61a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0161
        gbc.setState(0x9826, 0xe4e2, 0x1480, 0x149, 0x47cf, 0x1caf, 0x1, 0x1);
        gbc.writeMem(0x9826, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xe4e2, gbc.sp());
        EXPECT(0x9828, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9826));
        EXPECT(0x15, gbc.readMem(0x9827));
        // CB 15 0162
        gbc.setState(0xa3bd, 0xb8f6, 0x3590, 0x40b, 0x5909, 0x11ac, 0x1, 0x1);
        gbc.writeMem(0xa3bd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xb8f6, gbc.sp());
        EXPECT(0xa3bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3bd));
        EXPECT(0x15, gbc.readMem(0xa3be));
        // CB 15 0163
        gbc.setState(0x1f65, 0x499f, 0x8750, 0x8237, 0x6734, 0x198c, 0x1, 0x0);
        gbc.writeMem(0x1f65, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x499f, gbc.sp());
        EXPECT(0x1f67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0164
        gbc.setState(0x95f, 0x3f51, 0xf690, 0x33a1, 0x4be, 0x1c79, 0x1, 0x1);
        gbc.writeMem(0x95f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x3f51, gbc.sp());
        EXPECT(0x961, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0165
        gbc.setState(0x8ee8, 0x449, 0x6620, 0x5eea, 0x2b0b, 0x138d, 0x1, 0x0);
        gbc.writeMem(0x8ee8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x449, gbc.sp());
        EXPECT(0x8eea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ee8));
        EXPECT(0x15, gbc.readMem(0x8ee9));
        // CB 15 0166
        gbc.setState(0x3979, 0xe, 0xe30, 0x2506, 0x5a79, 0x36ea, 0x1, 0x0);
        gbc.writeMem(0x3979, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xe, gbc.sp());
        EXPECT(0x397b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0167
        gbc.setState(0xa70b, 0xaa45, 0x7fc0, 0x135c, 0x1e96, 0xe0a1, 0x0, 0x1);
        gbc.writeMem(0xa70b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xaa45, gbc.sp());
        EXPECT(0xa70d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa70b));
        EXPECT(0x15, gbc.readMem(0xa70c));
        // CB 15 0168
        gbc.setState(0xb64c, 0xb7d6, 0x27e0, 0xc87a, 0xd1fd, 0xf5dc, 0x0, 0x1);
        gbc.writeMem(0xb64c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xb7d6, gbc.sp());
        EXPECT(0xb64e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb64c));
        EXPECT(0x15, gbc.readMem(0xb64d));
        // CB 15 0169
        gbc.setState(0xe72, 0xdc63, 0x1990, 0x12d5, 0x8752, 0x2127, 0x0, 0x0);
        gbc.writeMem(0xe72, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xdc63, gbc.sp());
        EXPECT(0xe74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 016A
        gbc.setState(0xc4a9, 0x9b32, 0x3de0, 0x2c2d, 0xd77a, 0x681, 0x0, 0x0);
        gbc.writeMem(0xc4a9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x9b32, gbc.sp());
        EXPECT(0xc4ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4a9));
        EXPECT(0x15, gbc.readMem(0xc4aa));
        // CB 15 016B
        gbc.setState(0x860a, 0x919e, 0x6dc0, 0xb8cf, 0x65e4, 0x594c, 0x0, 0x0);
        gbc.writeMem(0x860a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x919e, gbc.sp());
        EXPECT(0x860c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x860a));
        EXPECT(0x15, gbc.readMem(0x860b));
        // CB 15 016C
        gbc.setState(0x47ed, 0x83df, 0x9fe0, 0x12bd, 0x1af2, 0x7db2, 0x1, 0x1);
        gbc.writeMem(0x47ed, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x83df, gbc.sp());
        EXPECT(0x47ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 016D
        gbc.setState(0x469c, 0x4d3b, 0x6f40, 0x9691, 0xccf1, 0x9c7b, 0x0, 0x0);
        gbc.writeMem(0x469c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x4d3b, gbc.sp());
        EXPECT(0x469e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 016E
        gbc.setState(0x7549, 0xe04c, 0xf360, 0xa72f, 0x6c58, 0x3c0a, 0x0, 0x0);
        gbc.writeMem(0x7549, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xe04c, gbc.sp());
        EXPECT(0x754b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 016F
        gbc.setState(0xa388, 0x1fa1, 0xee10, 0x91b7, 0xf6c1, 0xbb7b, 0x0, 0x0);
        gbc.writeMem(0xa388, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x1fa1, gbc.sp());
        EXPECT(0xa38a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa388));
        EXPECT(0x15, gbc.readMem(0xa389));
        // CB 15 0170
        gbc.setState(0x6f40, 0xa7f9, 0x5b0, 0x4e5b, 0x4339, 0x7fe2, 0x0, 0x1);
        gbc.writeMem(0x6f40, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xa7f9, gbc.sp());
        EXPECT(0x6f42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0171
        gbc.setState(0xe263, 0x6b4b, 0xe8f0, 0x3ed1, 0x7baa, 0x4629, 0x0, 0x0);
        gbc.writeMem(0xe263, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x6b4b, gbc.sp());
        EXPECT(0xe265, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe263));
        EXPECT(0x15, gbc.readMem(0xe264));
        // CB 15 0172
        gbc.setState(0x46c0, 0xe752, 0xae50, 0x4712, 0xaeb4, 0x129e, 0x1, 0x1);
        gbc.writeMem(0x46c0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xe752, gbc.sp());
        EXPECT(0x46c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0174
        gbc.setState(0xc830, 0x914a, 0x5a00, 0x9a69, 0x1ac5, 0x2365, 0x1, 0x0);
        gbc.writeMem(0xc830, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x914a, gbc.sp());
        EXPECT(0xc832, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc830));
        EXPECT(0x15, gbc.readMem(0xc831));
        // CB 15 0175
        gbc.setState(0xaa1f, 0xea2d, 0x8460, 0x94eb, 0x7991, 0x4400, 0x0, 0x0);
        gbc.writeMem(0xaa1f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xea2d, gbc.sp());
        EXPECT(0xaa21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa1f));
        EXPECT(0x15, gbc.readMem(0xaa20));
        // CB 15 0176
        gbc.setState(0xc7c3, 0x732d, 0xc1d0, 0xc0a1, 0xb288, 0x916, 0x1, 0x1);
        gbc.writeMem(0xc7c3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x732d, gbc.sp());
        EXPECT(0xc7c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7c3));
        EXPECT(0x15, gbc.readMem(0xc7c4));
        // CB 15 0177
        gbc.setState(0x43db, 0x30f4, 0x4210, 0xbdf5, 0x9278, 0x2bda, 0x0, 0x0);
        gbc.writeMem(0x43db, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x30f4, gbc.sp());
        EXPECT(0x43dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0179
        gbc.setState(0xddc8, 0x3255, 0x3b30, 0x5066, 0xa16a, 0xed89, 0x1, 0x1);
        gbc.writeMem(0xddc8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x3255, gbc.sp());
        EXPECT(0xddca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddc8));
        EXPECT(0x15, gbc.readMem(0xddc9));
        // CB 15 017C
        gbc.setState(0x6ef9, 0x1916, 0x68e0, 0x5798, 0xd41a, 0x7528, 0x0, 0x1);
        gbc.writeMem(0x6ef9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x1916, gbc.sp());
        EXPECT(0x6efb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 017D
        gbc.setState(0x8a9a, 0xccbd, 0x3bf0, 0x6467, 0x43d6, 0xcf7e, 0x1, 0x1);
        gbc.writeMem(0x8a9a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xccbd, gbc.sp());
        EXPECT(0x8a9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a9a));
        EXPECT(0x15, gbc.readMem(0x8a9b));
        // CB 15 017E
        gbc.setState(0xa74b, 0x3126, 0xb2f0, 0x3f9b, 0x87cb, 0x856, 0x0, 0x1);
        gbc.writeMem(0xa74b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x3126, gbc.sp());
        EXPECT(0xa74d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa74b));
        EXPECT(0x15, gbc.readMem(0xa74c));
        // CB 15 017F
        gbc.setState(0xa31c, 0x4bd2, 0x8550, 0x182d, 0x8551, 0x5c2, 0x1, 0x1);
        gbc.writeMem(0xa31c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x4bd2, gbc.sp());
        EXPECT(0xa31e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa31c));
        EXPECT(0x15, gbc.readMem(0xa31d));
        // CB 15 0180
        gbc.setState(0x92b, 0x86de, 0x8e10, 0x1dca, 0x11e9, 0x5bd9, 0x0, 0x0);
        gbc.writeMem(0x92b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x86de, gbc.sp());
        EXPECT(0x92d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0181
        gbc.setState(0x857e, 0x67f3, 0x7920, 0x99d8, 0xc88d, 0x20b3, 0x1, 0x0);
        gbc.writeMem(0x857e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x67f3, gbc.sp());
        EXPECT(0x8580, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x857e));
        EXPECT(0x15, gbc.readMem(0x857f));
        // CB 15 0182
        gbc.setState(0xe2bc, 0xad4e, 0xdc0, 0xc38f, 0xaa8c, 0x68f, 0x1, 0x1);
        gbc.writeMem(0xe2bc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xad4e, gbc.sp());
        EXPECT(0xe2be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2bc));
        EXPECT(0x15, gbc.readMem(0xe2bd));
        // CB 15 0183
        gbc.setState(0x5c28, 0x5f3a, 0xf940, 0xe523, 0x773, 0x95f3, 0x0, 0x1);
        gbc.writeMem(0x5c28, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x5f3a, gbc.sp());
        EXPECT(0x5c2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0184
        gbc.setState(0x72e, 0x65fe, 0xa810, 0xa584, 0x1ecd, 0x47c7, 0x1, 0x1);
        gbc.writeMem(0x72e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x65fe, gbc.sp());
        EXPECT(0x730, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0185
        gbc.setState(0x5e5c, 0x3c43, 0x70a0, 0x8ae3, 0xfc7c, 0xb2c9, 0x1, 0x1);
        gbc.writeMem(0x5e5c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x3c43, gbc.sp());
        EXPECT(0x5e5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0186
        gbc.setState(0xe470, 0xf08, 0x310, 0x3519, 0x3d67, 0x625f, 0x0, 0x0);
        gbc.writeMem(0xe470, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xf08, gbc.sp());
        EXPECT(0xe472, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe470));
        EXPECT(0x15, gbc.readMem(0xe471));
        // CB 15 0187
        gbc.setState(0x81de, 0x149b, 0x7b30, 0x872, 0x3e97, 0x82af, 0x1, 0x1);
        gbc.writeMem(0x81de, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x149b, gbc.sp());
        EXPECT(0x81e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81de));
        EXPECT(0x15, gbc.readMem(0x81df));
        // CB 15 0188
        gbc.setState(0xeee1, 0xfac4, 0x98b0, 0x498a, 0x5c97, 0x567b, 0x0, 0x0);
        gbc.writeMem(0xeee1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xfac4, gbc.sp());
        EXPECT(0xeee3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeee1));
        EXPECT(0x15, gbc.readMem(0xeee2));
        // CB 15 0189
        gbc.setState(0xc0c, 0x6feb, 0xc240, 0x9ba0, 0x2015, 0xd849, 0x1, 0x0);
        gbc.writeMem(0xc0c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x6feb, gbc.sp());
        EXPECT(0xc0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 018A
        gbc.setState(0x56d, 0x30ba, 0xc50, 0x3bea, 0x76e1, 0x61b0, 0x0, 0x1);
        gbc.writeMem(0x56d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x30ba, gbc.sp());
        EXPECT(0x56f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 018B
        gbc.setState(0x4c30, 0x5382, 0xa510, 0xcf31, 0xa11e, 0x364e, 0x0, 0x1);
        gbc.writeMem(0x4c30, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x5382, gbc.sp());
        EXPECT(0x4c32, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 018D
        gbc.setState(0x8734, 0xb102, 0xaec0, 0x1af5, 0x3675, 0x858, 0x1, 0x1);
        gbc.writeMem(0x8734, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xb102, gbc.sp());
        EXPECT(0x8736, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8734));
        EXPECT(0x15, gbc.readMem(0x8735));
        // CB 15 018E
        gbc.setState(0x7eb6, 0xa718, 0x8940, 0xbdef, 0xe736, 0x6a2d, 0x1, 0x0);
        gbc.writeMem(0x7eb6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xa718, gbc.sp());
        EXPECT(0x7eb8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 018F
        gbc.setState(0xab61, 0x9384, 0x6ca0, 0xb622, 0x2cbd, 0x8a12, 0x1, 0x0);
        gbc.writeMem(0xab61, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x9384, gbc.sp());
        EXPECT(0xab63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab61));
        EXPECT(0x15, gbc.readMem(0xab62));
        // CB 15 0190
        gbc.setState(0x2986, 0x6810, 0x16b0, 0xed0f, 0x631c, 0xcb82, 0x0, 0x0);
        gbc.writeMem(0x2986, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x6810, gbc.sp());
        EXPECT(0x2988, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0191
        gbc.setState(0xcb9d, 0xa630, 0x63e0, 0xa864, 0x9dae, 0xe4a, 0x0, 0x0);
        gbc.writeMem(0xcb9d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xa630, gbc.sp());
        EXPECT(0xcb9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb9d));
        EXPECT(0x15, gbc.readMem(0xcb9e));
        // CB 15 0192
        gbc.setState(0x722c, 0x59e2, 0x6b70, 0xb145, 0x16c5, 0xd8e5, 0x1, 0x1);
        gbc.writeMem(0x722c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x59e2, gbc.sp());
        EXPECT(0x722e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0193
        gbc.setState(0x512b, 0xaa4a, 0xd450, 0x3df6, 0x6c95, 0x889c, 0x1, 0x1);
        gbc.writeMem(0x512b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xaa4a, gbc.sp());
        EXPECT(0x512d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0194
        gbc.setState(0x8fd0, 0xc803, 0x7b20, 0x97ad, 0x2795, 0x1283, 0x1, 0x0);
        gbc.writeMem(0x8fd0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xc803, gbc.sp());
        EXPECT(0x8fd2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fd0));
        EXPECT(0x15, gbc.readMem(0x8fd1));
        // CB 15 0195
        gbc.setState(0x137c, 0xdfa5, 0xf170, 0x47cd, 0x48e6, 0xfd22, 0x0, 0x0);
        gbc.writeMem(0x137c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xdfa5, gbc.sp());
        EXPECT(0x137e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0197
        gbc.setState(0x8806, 0x4df6, 0x9340, 0xa231, 0x49df, 0x44a, 0x0, 0x0);
        gbc.writeMem(0x8806, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x4df6, gbc.sp());
        EXPECT(0x8808, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8806));
        EXPECT(0x15, gbc.readMem(0x8807));
        // CB 15 0198
        gbc.setState(0x51bf, 0xd5ac, 0x84b0, 0x12e0, 0x16a5, 0xbd43, 0x0, 0x1);
        gbc.writeMem(0x51bf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xd5ac, gbc.sp());
        EXPECT(0x51c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0199
        gbc.setState(0x3c88, 0x2952, 0xd570, 0x787c, 0xde7e, 0x8761, 0x1, 0x0);
        gbc.writeMem(0x3c88, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x2952, gbc.sp());
        EXPECT(0x3c8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 019A
        gbc.setState(0x5c5b, 0xd0b6, 0xf150, 0x6246, 0xf9a3, 0xc7fe, 0x0, 0x0);
        gbc.writeMem(0x5c5b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xd0b6, gbc.sp());
        EXPECT(0x5c5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 019B
        gbc.setState(0x7a9, 0x672f, 0x4510, 0x1ce3, 0x9ce4, 0x9b80, 0x1, 0x1);
        gbc.writeMem(0x7a9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x672f, gbc.sp());
        EXPECT(0x7ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 019C
        gbc.setState(0x79c5, 0xac58, 0x7890, 0xe386, 0xff12, 0x30bb, 0x0, 0x1);
        gbc.writeMem(0x79c5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xac58, gbc.sp());
        EXPECT(0x79c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 019D
        gbc.setState(0xeb2c, 0x990d, 0x2df0, 0xb02b, 0xe94e, 0xa366, 0x0, 0x0);
        gbc.writeMem(0xeb2c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x990d, gbc.sp());
        EXPECT(0xeb2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb2c));
        EXPECT(0x15, gbc.readMem(0xeb2d));
        // CB 15 019F
        gbc.setState(0x5df3, 0x1c7f, 0x2d50, 0xb7ac, 0x24dd, 0x6e42, 0x0, 0x1);
        gbc.writeMem(0x5df3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x1c7f, gbc.sp());
        EXPECT(0x5df5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01A1
        gbc.setState(0x1c32, 0xa90b, 0x9e0, 0x6a3a, 0xbd8c, 0x8973, 0x1, 0x0);
        gbc.writeMem(0x1c32, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xa90b, gbc.sp());
        EXPECT(0x1c34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01A2
        gbc.setState(0x7632, 0xa37e, 0x6bd0, 0x968e, 0x742, 0xd7d6, 0x1, 0x0);
        gbc.writeMem(0x7632, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xa37e, gbc.sp());
        EXPECT(0x7634, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01A4
        gbc.setState(0x7198, 0xbe40, 0x4740, 0xce3, 0x1b8e, 0xc61a, 0x1, 0x0);
        gbc.writeMem(0x7198, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xbe40, gbc.sp());
        EXPECT(0x719a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01A5
        gbc.setState(0x26a6, 0xc848, 0x4690, 0x66d2, 0x610d, 0x1661, 0x0, 0x0);
        gbc.writeMem(0x26a6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xc848, gbc.sp());
        EXPECT(0x26a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01A6
        gbc.setState(0x23dd, 0xd8db, 0xb250, 0x3448, 0xc5c5, 0x6598, 0x0, 0x1);
        gbc.writeMem(0x23dd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xd8db, gbc.sp());
        EXPECT(0x23df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01A7
        gbc.setState(0x6bbd, 0x237, 0xd680, 0x6036, 0x318a, 0xd80a, 0x0, 0x0);
        gbc.writeMem(0x6bbd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x237, gbc.sp());
        EXPECT(0x6bbf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01A8
        gbc.setState(0xaeb4, 0x71da, 0x6900, 0xdbca, 0x77f3, 0x85fb, 0x1, 0x1);
        gbc.writeMem(0xaeb4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x71da, gbc.sp());
        EXPECT(0xaeb6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaeb4));
        EXPECT(0x15, gbc.readMem(0xaeb5));
        // CB 15 01A9
        gbc.setState(0xc23a, 0x2162, 0xb90, 0x57ee, 0x7b92, 0x227c, 0x1, 0x0);
        gbc.writeMem(0xc23a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x2162, gbc.sp());
        EXPECT(0xc23c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc23a));
        EXPECT(0x15, gbc.readMem(0xc23b));
        // CB 15 01AA
        gbc.setState(0x8fb0, 0xcfea, 0xe5d0, 0x55dd, 0x5cf8, 0x41bf, 0x1, 0x1);
        gbc.writeMem(0x8fb0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xcfea, gbc.sp());
        EXPECT(0x8fb2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fb0));
        EXPECT(0x15, gbc.readMem(0x8fb1));
        // CB 15 01AB
        gbc.setState(0x95a9, 0x9d2, 0xb0c0, 0xdf, 0x7e4d, 0x6b2a, 0x1, 0x1);
        gbc.writeMem(0x95a9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x9d2, gbc.sp());
        EXPECT(0x95ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95a9));
        EXPECT(0x15, gbc.readMem(0x95aa));
        // CB 15 01AC
        gbc.setState(0x8503, 0x8757, 0x26a0, 0xb7ee, 0xd3ba, 0xdf20, 0x0, 0x0);
        gbc.writeMem(0x8503, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x8757, gbc.sp());
        EXPECT(0x8505, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8503));
        EXPECT(0x15, gbc.readMem(0x8504));
        // CB 15 01AD
        gbc.setState(0x73df, 0xd02d, 0x7ac0, 0x8706, 0x3cc8, 0xdad7, 0x0, 0x0);
        gbc.writeMem(0x73df, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xd02d, gbc.sp());
        EXPECT(0x73e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01AE
        gbc.setState(0xad4c, 0x9f1f, 0x8030, 0x8b57, 0x4c68, 0x51aa, 0x1, 0x1);
        gbc.writeMem(0xad4c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x9f1f, gbc.sp());
        EXPECT(0xad4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad4c));
        EXPECT(0x15, gbc.readMem(0xad4d));
        // CB 15 01AF
        gbc.setState(0x41a, 0x1437, 0x5ab0, 0xfb02, 0x8f34, 0xb172, 0x0, 0x0);
        gbc.writeMem(0x41a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x1437, gbc.sp());
        EXPECT(0x41c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01B0
        gbc.setState(0x3566, 0xf3be, 0x1f30, 0x79bd, 0x5dfb, 0x2808, 0x0, 0x1);
        gbc.writeMem(0x3566, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xf3be, gbc.sp());
        EXPECT(0x3568, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01B1
        gbc.setState(0xb2e0, 0x4256, 0xd5d0, 0x8de, 0x4fcd, 0xc4e6, 0x1, 0x1);
        gbc.writeMem(0xb2e0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x4256, gbc.sp());
        EXPECT(0xb2e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2e0));
        EXPECT(0x15, gbc.readMem(0xb2e1));
        // CB 15 01B2
        gbc.setState(0xc920, 0xc764, 0xe6a0, 0x1d0d, 0xd659, 0xb28f, 0x1, 0x1);
        gbc.writeMem(0xc920, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xc764, gbc.sp());
        EXPECT(0xc922, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc920));
        EXPECT(0x15, gbc.readMem(0xc921));
        // CB 15 01B3
        gbc.setState(0x281e, 0x938e, 0xf690, 0xeeed, 0x5091, 0x47f0, 0x1, 0x0);
        gbc.writeMem(0x281e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x938e, gbc.sp());
        EXPECT(0x2820, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01B4
        gbc.setState(0x7b10, 0xc521, 0x2e40, 0x440, 0xdb86, 0xc5ff, 0x1, 0x0);
        gbc.writeMem(0x7b10, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xc521, gbc.sp());
        EXPECT(0x7b12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01B5
        gbc.setState(0x1f49, 0x529a, 0xbf20, 0x5c34, 0xe954, 0x6f6, 0x1, 0x0);
        gbc.writeMem(0x1f49, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x529a, gbc.sp());
        EXPECT(0x1f4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01B6
        gbc.setState(0x1b1d, 0x663, 0xade0, 0xa3c9, 0xbc52, 0x1c17, 0x0, 0x0);
        gbc.writeMem(0x1b1d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x663, gbc.sp());
        EXPECT(0x1b1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01B7
        gbc.setState(0x7be2, 0x8638, 0x45f0, 0x3ca6, 0x3dad, 0x4ef0, 0x1, 0x1);
        gbc.writeMem(0x7be2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x8638, gbc.sp());
        EXPECT(0x7be4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01B8
        gbc.setState(0xdc02, 0xee25, 0x4090, 0x1b7, 0xfea3, 0x3f59, 0x0, 0x0);
        gbc.writeMem(0xdc02, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xee25, gbc.sp());
        EXPECT(0xdc04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc02));
        EXPECT(0x15, gbc.readMem(0xdc03));
        // CB 15 01B9
        gbc.setState(0xa535, 0x359b, 0x8430, 0x2bb7, 0x3ef8, 0xdbd7, 0x1, 0x0);
        gbc.writeMem(0xa535, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x359b, gbc.sp());
        EXPECT(0xa537, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa535));
        EXPECT(0x15, gbc.readMem(0xa536));
        // CB 15 01BA
        gbc.setState(0x9bc5, 0xd75a, 0xefc0, 0x3e14, 0x5f9c, 0xcba, 0x0, 0x0);
        gbc.writeMem(0x9bc5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xd75a, gbc.sp());
        EXPECT(0x9bc7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bc5));
        EXPECT(0x15, gbc.readMem(0x9bc6));
        // CB 15 01BB
        gbc.setState(0x4970, 0xbe4e, 0x10b0, 0xf461, 0x6cf7, 0x525f, 0x1, 0x0);
        gbc.writeMem(0x4970, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xbe4e, gbc.sp());
        EXPECT(0x4972, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01BC
        gbc.setState(0xea6f, 0x8e93, 0xfc40, 0x6564, 0xab44, 0xb148, 0x1, 0x1);
        gbc.writeMem(0xea6f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x8e93, gbc.sp());
        EXPECT(0xea71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea6f));
        EXPECT(0x15, gbc.readMem(0xea70));
        // CB 15 01BD
        gbc.setState(0xdb51, 0x4f7e, 0x3880, 0xbd9, 0xb80e, 0xc041, 0x1, 0x0);
        gbc.writeMem(0xdb51, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x4f7e, gbc.sp());
        EXPECT(0xdb53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb51));
        EXPECT(0x15, gbc.readMem(0xdb52));
        // CB 15 01BE
        gbc.setState(0x2976, 0xf353, 0x6770, 0x4020, 0xfe10, 0x39bc, 0x1, 0x1);
        gbc.writeMem(0x2976, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xf353, gbc.sp());
        EXPECT(0x2978, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01BF
        gbc.setState(0x108c, 0x3402, 0x8480, 0xa72e, 0x16cb, 0xd874, 0x1, 0x1);
        gbc.writeMem(0x108c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x3402, gbc.sp());
        EXPECT(0x108e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01C0
        gbc.setState(0x9ea4, 0xd574, 0x9e80, 0x782a, 0xa3b8, 0x143b, 0x1, 0x1);
        gbc.writeMem(0x9ea4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xd574, gbc.sp());
        EXPECT(0x9ea6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ea4));
        EXPECT(0x15, gbc.readMem(0x9ea5));
        // CB 15 01C1
        gbc.setState(0xee4f, 0x9944, 0x30e0, 0xfa6e, 0xf778, 0x4479, 0x1, 0x1);
        gbc.writeMem(0xee4f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x9944, gbc.sp());
        EXPECT(0xee51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee4f));
        EXPECT(0x15, gbc.readMem(0xee50));
        // CB 15 01C3
        gbc.setState(0x7f89, 0x86bd, 0xfb40, 0x8f88, 0x3e06, 0xcc7f, 0x1, 0x1);
        gbc.writeMem(0x7f89, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x86bd, gbc.sp());
        EXPECT(0x7f8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01C4
        gbc.setState(0x4e9f, 0x89c, 0xf1d0, 0xf0cc, 0xe82, 0xd80e, 0x0, 0x0);
        gbc.writeMem(0x4e9f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x89c, gbc.sp());
        EXPECT(0x4ea1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01C5
        gbc.setState(0xa812, 0xbe86, 0xffd0, 0x28a2, 0xb14a, 0xd7f9, 0x0, 0x0);
        gbc.writeMem(0xa812, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xbe86, gbc.sp());
        EXPECT(0xa814, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa812));
        EXPECT(0x15, gbc.readMem(0xa813));
        // CB 15 01C6
        gbc.setState(0xda26, 0x8850, 0xbfb0, 0xd2ee, 0xa256, 0x37e, 0x0, 0x0);
        gbc.writeMem(0xda26, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x8850, gbc.sp());
        EXPECT(0xda28, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda26));
        EXPECT(0x15, gbc.readMem(0xda27));
        // CB 15 01C7
        gbc.setState(0xb8bc, 0x2af7, 0x5790, 0xc66d, 0x2fa0, 0x1d1f, 0x1, 0x0);
        gbc.writeMem(0xb8bc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x2af7, gbc.sp());
        EXPECT(0xb8be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8bc));
        EXPECT(0x15, gbc.readMem(0xb8bd));
        // CB 15 01C8
        gbc.setState(0x1705, 0x2dad, 0xfc20, 0xa7c, 0x6775, 0xde95, 0x0, 0x0);
        gbc.writeMem(0x1705, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x2dad, gbc.sp());
        EXPECT(0x1707, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01C9
        gbc.setState(0xdb01, 0x7921, 0xbc50, 0x5305, 0x5c6e, 0x46d3, 0x0, 0x0);
        gbc.writeMem(0xdb01, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x7921, gbc.sp());
        EXPECT(0xdb03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb01));
        EXPECT(0x15, gbc.readMem(0xdb02));
        // CB 15 01CA
        gbc.setState(0x9a72, 0xfa2e, 0x2c00, 0xa294, 0xb6a0, 0x5c0f, 0x0, 0x0);
        gbc.writeMem(0x9a72, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xfa2e, gbc.sp());
        EXPECT(0x9a74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a72));
        EXPECT(0x15, gbc.readMem(0x9a73));
        // CB 15 01CB
        gbc.setState(0x5ad7, 0xd7f5, 0x300, 0x9e8a, 0xea16, 0xecf9, 0x0, 0x1);
        gbc.writeMem(0x5ad7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xd7f5, gbc.sp());
        EXPECT(0x5ad9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01CC
        gbc.setState(0x9ca9, 0xdd25, 0xb010, 0x71cd, 0x752a, 0x3231, 0x0, 0x0);
        gbc.writeMem(0x9ca9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xdd25, gbc.sp());
        EXPECT(0x9cab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ca9));
        EXPECT(0x15, gbc.readMem(0x9caa));
        // CB 15 01CD
        gbc.setState(0xf09, 0xa76b, 0xbc20, 0xb10, 0x4283, 0xef06, 0x0, 0x0);
        gbc.writeMem(0xf09, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xa76b, gbc.sp());
        EXPECT(0xf0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01CE
        gbc.setState(0x3b56, 0xe87e, 0xa910, 0xea92, 0x456f, 0x48af, 0x0, 0x0);
        gbc.writeMem(0x3b56, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xe87e, gbc.sp());
        EXPECT(0x3b58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01CF
        gbc.setState(0x9b8e, 0x49a2, 0x2f50, 0x8c3c, 0x7339, 0x37a2, 0x0, 0x1);
        gbc.writeMem(0x9b8e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x49a2, gbc.sp());
        EXPECT(0x9b90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b8e));
        EXPECT(0x15, gbc.readMem(0x9b8f));
        // CB 15 01D0
        gbc.setState(0xbafc, 0xc82f, 0xed00, 0xdadb, 0x646e, 0xdbc4, 0x1, 0x1);
        gbc.writeMem(0xbafc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xc82f, gbc.sp());
        EXPECT(0xbafe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbafc));
        EXPECT(0x15, gbc.readMem(0xbafd));
        // CB 15 01D1
        gbc.setState(0xdfd2, 0xb2de, 0x9060, 0x1198, 0x168e, 0xae83, 0x0, 0x0);
        gbc.writeMem(0xdfd2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xb2de, gbc.sp());
        EXPECT(0xdfd4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfd2));
        EXPECT(0x15, gbc.readMem(0xdfd3));
        // CB 15 01D2
        gbc.setState(0x57c8, 0xb082, 0x2ce0, 0x7efb, 0x2a95, 0x8c28, 0x0, 0x0);
        gbc.writeMem(0x57c8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xb082, gbc.sp());
        EXPECT(0x57ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01D3
        gbc.setState(0x6e00, 0x11b5, 0x1210, 0x94a4, 0x5afd, 0xe107, 0x1, 0x0);
        gbc.writeMem(0x6e00, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x11b5, gbc.sp());
        EXPECT(0x6e02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01D4
        gbc.setState(0x2125, 0x6975, 0x1820, 0x81d3, 0x438b, 0x33ff, 0x1, 0x1);
        gbc.writeMem(0x2125, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x6975, gbc.sp());
        EXPECT(0x2127, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01D5
        gbc.setState(0x49f3, 0x898e, 0x60e0, 0x7803, 0xa419, 0x34ba, 0x0, 0x1);
        gbc.writeMem(0x49f3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x898e, gbc.sp());
        EXPECT(0x49f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01D6
        gbc.setState(0x181a, 0x5245, 0x28f0, 0x4c63, 0x9f87, 0xc341, 0x1, 0x0);
        gbc.writeMem(0x181a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x5245, gbc.sp());
        EXPECT(0x181c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01D7
        gbc.setState(0xd6ca, 0x9873, 0xa680, 0x275e, 0x8b51, 0xd77e, 0x0, 0x1);
        gbc.writeMem(0xd6ca, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x9873, gbc.sp());
        EXPECT(0xd6cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6ca));
        EXPECT(0x15, gbc.readMem(0xd6cb));
        // CB 15 01D8
        gbc.setState(0x3c51, 0xb715, 0xe880, 0x1e95, 0xd0d8, 0xf2df, 0x1, 0x1);
        gbc.writeMem(0x3c51, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xb715, gbc.sp());
        EXPECT(0x3c53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01D9
        gbc.setState(0x5dcb, 0x4fd4, 0x7440, 0xfa20, 0x79ac, 0x20e4, 0x1, 0x1);
        gbc.writeMem(0x5dcb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x4fd4, gbc.sp());
        EXPECT(0x5dcd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01DA
        gbc.setState(0x88b0, 0xa471, 0x60e0, 0xaba8, 0x196d, 0x8ac7, 0x0, 0x1);
        gbc.writeMem(0x88b0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xa471, gbc.sp());
        EXPECT(0x88b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88b0));
        EXPECT(0x15, gbc.readMem(0x88b1));
        // CB 15 01DB
        gbc.setState(0xa942, 0x20c8, 0xd510, 0x3452, 0xad34, 0xa6c6, 0x1, 0x1);
        gbc.writeMem(0xa942, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x20c8, gbc.sp());
        EXPECT(0xa944, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa942));
        EXPECT(0x15, gbc.readMem(0xa943));
        // CB 15 01DC
        gbc.setState(0xd9d1, 0x93b7, 0x3020, 0x3c3a, 0xe2c1, 0xb755, 0x1, 0x0);
        gbc.writeMem(0xd9d1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x93b7, gbc.sp());
        EXPECT(0xd9d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9d1));
        EXPECT(0x15, gbc.readMem(0xd9d2));
        // CB 15 01DE
        gbc.setState(0x5d8b, 0xd7d1, 0x95a0, 0x975c, 0x27ce, 0x50b5, 0x0, 0x1);
        gbc.writeMem(0x5d8b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xd7d1, gbc.sp());
        EXPECT(0x5d8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01DF
        gbc.setState(0x7781, 0x985c, 0x9110, 0xd839, 0x2840, 0x44d6, 0x1, 0x0);
        gbc.writeMem(0x7781, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x985c, gbc.sp());
        EXPECT(0x7783, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01E0
        gbc.setState(0x4c86, 0xd091, 0xe9c0, 0xcb0c, 0x56fc, 0x5e1e, 0x1, 0x0);
        gbc.writeMem(0x4c86, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xd091, gbc.sp());
        EXPECT(0x4c88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01E1
        gbc.setState(0x11e8, 0xafa1, 0xe720, 0xa1d7, 0xcd00, 0x3f9, 0x1, 0x1);
        gbc.writeMem(0x11e8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xafa1, gbc.sp());
        EXPECT(0x11ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01E2
        gbc.setState(0x358b, 0x6086, 0x6980, 0xb251, 0xc0e1, 0x395e, 0x1, 0x0);
        gbc.writeMem(0x358b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x6086, gbc.sp());
        EXPECT(0x358d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01E3
        gbc.setState(0x1baa, 0xd07a, 0x5ed0, 0x2c1f, 0x4ff, 0xf8a1, 0x0, 0x1);
        gbc.writeMem(0x1baa, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xd07a, gbc.sp());
        EXPECT(0x1bac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01E4
        gbc.setState(0xa181, 0xc31d, 0x6cc0, 0xc76e, 0xbaf5, 0xfde2, 0x1, 0x0);
        gbc.writeMem(0xa181, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xc31d, gbc.sp());
        EXPECT(0xa183, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa181));
        EXPECT(0x15, gbc.readMem(0xa182));
        // CB 15 01E5
        gbc.setState(0xce4f, 0x8f59, 0x5990, 0xab3, 0x238d, 0x9da5, 0x1, 0x0);
        gbc.writeMem(0xce4f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x8f59, gbc.sp());
        EXPECT(0xce51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce4f));
        EXPECT(0x15, gbc.readMem(0xce50));
        // CB 15 01E6
        gbc.setState(0xd400, 0xd1ab, 0x40e0, 0xb00a, 0x9f08, 0x1144, 0x1, 0x0);
        gbc.writeMem(0xd400, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xd1ab, gbc.sp());
        EXPECT(0xd402, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd400));
        EXPECT(0x15, gbc.readMem(0xd401));
        // CB 15 01E7
        gbc.setState(0xdbab, 0x978e, 0xdcc0, 0xd8e2, 0x17c2, 0x13a2, 0x1, 0x0);
        gbc.writeMem(0xdbab, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x978e, gbc.sp());
        EXPECT(0xdbad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbab));
        EXPECT(0x15, gbc.readMem(0xdbac));
        // CB 15 01E8
        gbc.setState(0x609f, 0xf46d, 0xfe40, 0xc954, 0xf76, 0x76d6, 0x0, 0x1);
        gbc.writeMem(0x609f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xf46d, gbc.sp());
        EXPECT(0x60a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01E9
        gbc.setState(0xefbc, 0xb652, 0xb980, 0x7963, 0xde0c, 0xff5f, 0x1, 0x1);
        gbc.writeMem(0xefbc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xb652, gbc.sp());
        EXPECT(0xefbe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefbc));
        EXPECT(0x15, gbc.readMem(0xefbd));
        // CB 15 01EA
        gbc.setState(0x7903, 0x271e, 0xf990, 0x6058, 0x1be3, 0xdaae, 0x1, 0x1);
        gbc.writeMem(0x7903, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x271e, gbc.sp());
        EXPECT(0x7905, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01EB
        gbc.setState(0x275e, 0xdb66, 0xfd20, 0xfcde, 0x529f, 0x7fe0, 0x1, 0x1);
        gbc.writeMem(0x275e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xdb66, gbc.sp());
        EXPECT(0x2760, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01EC
        gbc.setState(0x7a46, 0x57fa, 0xe410, 0x6f9f, 0xa904, 0x89b3, 0x1, 0x1);
        gbc.writeMem(0x7a46, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x57fa, gbc.sp());
        EXPECT(0x7a48, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01ED
        gbc.setState(0x4d5a, 0x2a2, 0x110, 0x563, 0x6e5b, 0x5508, 0x0, 0x0);
        gbc.writeMem(0x4d5a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x2a2, gbc.sp());
        EXPECT(0x4d5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01EE
        gbc.setState(0x5b66, 0xfc64, 0x3980, 0x10c, 0x6300, 0xf659, 0x1, 0x0);
        gbc.writeMem(0x5b66, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xfc64, gbc.sp());
        EXPECT(0x5b68, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01EF
        gbc.setState(0x4276, 0x5ba1, 0xeb70, 0x58f1, 0xdcb0, 0xa045, 0x1, 0x1);
        gbc.writeMem(0x4276, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x5ba1, gbc.sp());
        EXPECT(0x4278, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01F0
        gbc.setState(0x61b1, 0xff41, 0x30d0, 0x68e5, 0x1c46, 0x5b30, 0x0, 0x0);
        gbc.writeMem(0x61b1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xff41, gbc.sp());
        EXPECT(0x61b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01F2
        gbc.setState(0xbd74, 0x132f, 0xb3f0, 0xf889, 0x1a33, 0x94dd, 0x0, 0x1);
        gbc.writeMem(0xbd74, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x132f, gbc.sp());
        EXPECT(0xbd76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd74));
        EXPECT(0x15, gbc.readMem(0xbd75));
        // CB 15 01F3
        gbc.setState(0x2893, 0x31ff, 0x3a50, 0x7185, 0x5279, 0xfd56, 0x1, 0x1);
        gbc.writeMem(0x2893, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x31ff, gbc.sp());
        EXPECT(0x2895, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01F4
        gbc.setState(0x8869, 0xb5e5, 0x6b40, 0x9224, 0x94ce, 0xb847, 0x1, 0x0);
        gbc.writeMem(0x8869, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xb5e5, gbc.sp());
        EXPECT(0x886b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8869));
        EXPECT(0x15, gbc.readMem(0x886a));
        // CB 15 01F5
        gbc.setState(0xb741, 0x6bbc, 0x58e0, 0xb80b, 0x5dd2, 0x37d2, 0x0, 0x1);
        gbc.writeMem(0xb741, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x6bbc, gbc.sp());
        EXPECT(0xb743, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb741));
        EXPECT(0x15, gbc.readMem(0xb742));
        // CB 15 01F6
        gbc.setState(0xdfaf, 0x5c71, 0x8a50, 0xa4e2, 0x43b1, 0xfcea, 0x0, 0x0);
        gbc.writeMem(0xdfaf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x5c71, gbc.sp());
        EXPECT(0xdfb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfaf));
        EXPECT(0x15, gbc.readMem(0xdfb0));
        // CB 15 01F7
        gbc.setState(0x7aed, 0x18e, 0xf140, 0xa56d, 0x944d, 0x2324, 0x1, 0x0);
        gbc.writeMem(0x7aed, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x18e, gbc.sp());
        EXPECT(0x7aef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01F8
        gbc.setState(0x186a, 0xe527, 0xd5d0, 0x550e, 0xf512, 0xc7ab, 0x1, 0x0);
        gbc.writeMem(0x186a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xe527, gbc.sp());
        EXPECT(0x186c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01F9
        gbc.setState(0xc91d, 0x4139, 0x6220, 0x8747, 0x6798, 0xcbf1, 0x1, 0x1);
        gbc.writeMem(0xc91d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x4139, gbc.sp());
        EXPECT(0xc91f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc91d));
        EXPECT(0x15, gbc.readMem(0xc91e));
        // CB 15 01FA
        gbc.setState(0xa313, 0xc6dc, 0x5cd0, 0xf243, 0x7f30, 0xb329, 0x0, 0x0);
        gbc.writeMem(0xa313, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xc6dc, gbc.sp());
        EXPECT(0xa315, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa313));
        EXPECT(0x15, gbc.readMem(0xa314));
        // CB 15 01FB
        gbc.setState(0x1336, 0xca14, 0xa2a0, 0x8fe6, 0xfbf8, 0x184b, 0x1, 0x1);
        gbc.writeMem(0x1336, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xca14, gbc.sp());
        EXPECT(0x1338, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01FC
        gbc.setState(0x5705, 0xe23d, 0x8060, 0x20bc, 0x27b3, 0x61fa, 0x1, 0x1);
        gbc.writeMem(0x5705, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xe23d, gbc.sp());
        EXPECT(0x5707, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 01FD
        gbc.setState(0x6444, 0xbc65, 0x37a0, 0x4965, 0x5abd, 0x9b61, 0x0, 0x1);
        gbc.writeMem(0x6444, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xbc65, gbc.sp());
        EXPECT(0x6446, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 01FE
        gbc.setState(0xdc84, 0x86f0, 0x1f70, 0xc815, 0x90dd, 0x1bb, 0x1, 0x1);
        gbc.writeMem(0xdc84, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x86f0, gbc.sp());
        EXPECT(0xdc86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc84));
        EXPECT(0x15, gbc.readMem(0xdc85));
        // CB 15 01FF
        gbc.setState(0x4b8e, 0xd285, 0x7d20, 0x96b9, 0xf7f, 0x6597, 0x1, 0x0);
        gbc.writeMem(0x4b8e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xd285, gbc.sp());
        EXPECT(0x4b90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0200
        gbc.setState(0x9d9, 0xb4f7, 0x860, 0x3639, 0x9cd, 0x4a12, 0x1, 0x1);
        gbc.writeMem(0x9d9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xb4f7, gbc.sp());
        EXPECT(0x9db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0201
        gbc.setState(0x2d2c, 0x64e, 0x6940, 0x8af7, 0x66ce, 0xeb5a, 0x1, 0x0);
        gbc.writeMem(0x2d2c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x64e, gbc.sp());
        EXPECT(0x2d2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0202
        gbc.setState(0xea41, 0x4720, 0x6630, 0xa61, 0x18af, 0x9272, 0x0, 0x0);
        gbc.writeMem(0xea41, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x4720, gbc.sp());
        EXPECT(0xea43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea41));
        EXPECT(0x15, gbc.readMem(0xea42));
        // CB 15 0203
        gbc.setState(0x74da, 0xf179, 0xd90, 0x912c, 0xbf8e, 0x70d1, 0x1, 0x1);
        gbc.writeMem(0x74da, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xf179, gbc.sp());
        EXPECT(0x74dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0204
        gbc.setState(0x6d3d, 0xd4dd, 0x5950, 0x3bb0, 0x7e34, 0x2af4, 0x0, 0x1);
        gbc.writeMem(0x6d3d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xd4dd, gbc.sp());
        EXPECT(0x6d3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0205
        gbc.setState(0x2f5e, 0x9090, 0x5d50, 0xedce, 0xe482, 0xc24c, 0x1, 0x0);
        gbc.writeMem(0x2f5e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x9090, gbc.sp());
        EXPECT(0x2f60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0206
        gbc.setState(0xacbd, 0xb941, 0x9200, 0x8d7e, 0xd396, 0xd2a8, 0x1, 0x1);
        gbc.writeMem(0xacbd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xb941, gbc.sp());
        EXPECT(0xacbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacbd));
        EXPECT(0x15, gbc.readMem(0xacbe));
        // CB 15 0207
        gbc.setState(0x294, 0xc53a, 0xdc0, 0x675b, 0xade8, 0x26eb, 0x1, 0x1);
        gbc.writeMem(0x294, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xc53a, gbc.sp());
        EXPECT(0x296, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0208
        gbc.setState(0xa65b, 0x83b5, 0xcbf0, 0x108, 0x2538, 0xcab7, 0x1, 0x1);
        gbc.writeMem(0xa65b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x83b5, gbc.sp());
        EXPECT(0xa65d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa65b));
        EXPECT(0x15, gbc.readMem(0xa65c));
        // CB 15 0209
        gbc.setState(0xdf72, 0xe142, 0xd4b0, 0x6f0d, 0xfe44, 0xbd84, 0x1, 0x1);
        gbc.writeMem(0xdf72, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xe142, gbc.sp());
        EXPECT(0xdf74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf72));
        EXPECT(0x15, gbc.readMem(0xdf73));
        // CB 15 020A
        gbc.setState(0x3015, 0xbee2, 0xed60, 0xd377, 0x5d58, 0xe69c, 0x1, 0x0);
        gbc.writeMem(0x3015, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xbee2, gbc.sp());
        EXPECT(0x3017, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 020B
        gbc.setState(0xbccf, 0x2ec7, 0x7f0, 0x92b7, 0xd60f, 0xfe66, 0x0, 0x0);
        gbc.writeMem(0xbccf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x2ec7, gbc.sp());
        EXPECT(0xbcd1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbccf));
        EXPECT(0x15, gbc.readMem(0xbcd0));
        // CB 15 020D
        gbc.setState(0x2435, 0xca72, 0xda60, 0x2860, 0x3255, 0x288d, 0x0, 0x1);
        gbc.writeMem(0x2435, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xca72, gbc.sp());
        EXPECT(0x2437, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 020E
        gbc.setState(0xdb88, 0x4049, 0x5a80, 0x113d, 0xeb22, 0x9575, 0x0, 0x0);
        gbc.writeMem(0xdb88, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x4049, gbc.sp());
        EXPECT(0xdb8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb88));
        EXPECT(0x15, gbc.readMem(0xdb89));
        // CB 15 020F
        gbc.setState(0xa111, 0x1104, 0x4ae0, 0x7305, 0xfbc3, 0xb61e, 0x1, 0x1);
        gbc.writeMem(0xa111, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x1104, gbc.sp());
        EXPECT(0xa113, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa111));
        EXPECT(0x15, gbc.readMem(0xa112));
        // CB 15 0210
        gbc.setState(0x2ae2, 0xdcef, 0xa4a0, 0x9457, 0x451e, 0x9124, 0x1, 0x0);
        gbc.writeMem(0x2ae2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xdcef, gbc.sp());
        EXPECT(0x2ae4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0211
        gbc.setState(0x7674, 0x3126, 0xd4f0, 0x6c81, 0xd1e4, 0xc431, 0x1, 0x0);
        gbc.writeMem(0x7674, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x3126, gbc.sp());
        EXPECT(0x7676, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0212
        gbc.setState(0x4cb, 0x7ece, 0x74b0, 0xe91f, 0xf17f, 0xa62a, 0x0, 0x0);
        gbc.writeMem(0x4cb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x7ece, gbc.sp());
        EXPECT(0x4cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0213
        gbc.setState(0x72d5, 0x1f2f, 0x3650, 0x62c1, 0xb029, 0x5cf4, 0x1, 0x0);
        gbc.writeMem(0x72d5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x1f2f, gbc.sp());
        EXPECT(0x72d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0214
        gbc.setState(0x3472, 0x33d2, 0xadb0, 0x77ad, 0xee48, 0xd19e, 0x1, 0x0);
        gbc.writeMem(0x3472, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x33d2, gbc.sp());
        EXPECT(0x3474, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0215
        gbc.setState(0x1388, 0xc0b7, 0x6050, 0xad37, 0xfd27, 0x9353, 0x1, 0x1);
        gbc.writeMem(0x1388, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xc0b7, gbc.sp());
        EXPECT(0x138a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0216
        gbc.setState(0xc262, 0x6cc1, 0x7760, 0xbcbc, 0x5627, 0x3155, 0x0, 0x1);
        gbc.writeMem(0xc262, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x6cc1, gbc.sp());
        EXPECT(0xc264, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc262));
        EXPECT(0x15, gbc.readMem(0xc263));
        // CB 15 0217
        gbc.setState(0x5112, 0x6b4b, 0x1b00, 0xee2d, 0x8525, 0xeaf, 0x0, 0x0);
        gbc.writeMem(0x5112, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x6b4b, gbc.sp());
        EXPECT(0x5114, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0218
        gbc.setState(0x539, 0x22f9, 0x5510, 0x65b5, 0xa376, 0x228f, 0x1, 0x0);
        gbc.writeMem(0x539, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x22f9, gbc.sp());
        EXPECT(0x53b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0219
        gbc.setState(0x1e6d, 0xf264, 0x2410, 0x4a24, 0x9c25, 0x4563, 0x0, 0x0);
        gbc.writeMem(0x1e6d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xf264, gbc.sp());
        EXPECT(0x1e6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 021A
        gbc.setState(0xc07e, 0x25c0, 0xc3f0, 0x9564, 0xda24, 0xb15a, 0x0, 0x0);
        gbc.writeMem(0xc07e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x25c0, gbc.sp());
        EXPECT(0xc080, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc07e));
        EXPECT(0x15, gbc.readMem(0xc07f));
        // CB 15 021B
        gbc.setState(0x65fc, 0x7ec0, 0xcd50, 0x1371, 0xf301, 0x9883, 0x0, 0x0);
        gbc.writeMem(0x65fc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x7ec0, gbc.sp());
        EXPECT(0x65fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 021C
        gbc.setState(0x72b9, 0xf1c7, 0xd810, 0xeefb, 0xa4fe, 0x9872, 0x1, 0x0);
        gbc.writeMem(0x72b9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xf1c7, gbc.sp());
        EXPECT(0x72bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 021D
        gbc.setState(0x2aa4, 0x2322, 0xb290, 0x84d2, 0xfb60, 0x8989, 0x1, 0x1);
        gbc.writeMem(0x2aa4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x2322, gbc.sp());
        EXPECT(0x2aa6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 021E
        gbc.setState(0xc886, 0x4544, 0x2e10, 0x8301, 0xf833, 0x94de, 0x0, 0x0);
        gbc.writeMem(0xc886, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x4544, gbc.sp());
        EXPECT(0xc888, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc886));
        EXPECT(0x15, gbc.readMem(0xc887));
        // CB 15 021F
        gbc.setState(0x5e44, 0x36fa, 0x8330, 0x29a9, 0xfbdb, 0xcd1a, 0x1, 0x1);
        gbc.writeMem(0x5e44, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x36fa, gbc.sp());
        EXPECT(0x5e46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0220
        gbc.setState(0x3c15, 0x2c6d, 0x2ba0, 0x6755, 0xf7c0, 0xa7e, 0x0, 0x0);
        gbc.writeMem(0x3c15, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x2c6d, gbc.sp());
        EXPECT(0x3c17, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0221
        gbc.setState(0x9d1c, 0x1833, 0xadb0, 0x3b2b, 0x7705, 0x605e, 0x0, 0x0);
        gbc.writeMem(0x9d1c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x1833, gbc.sp());
        EXPECT(0x9d1e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d1c));
        EXPECT(0x15, gbc.readMem(0x9d1d));
        // CB 15 0222
        gbc.setState(0x13c8, 0xc958, 0x1690, 0xee81, 0x6454, 0x21c0, 0x0, 0x1);
        gbc.writeMem(0x13c8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xc958, gbc.sp());
        EXPECT(0x13ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0223
        gbc.setState(0xc528, 0xa840, 0xce60, 0xc783, 0xbc52, 0x4226, 0x0, 0x0);
        gbc.writeMem(0xc528, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xa840, gbc.sp());
        EXPECT(0xc52a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc528));
        EXPECT(0x15, gbc.readMem(0xc529));
        // CB 15 0224
        gbc.setState(0x4047, 0x4470, 0xd8f0, 0xd374, 0xa54, 0xc613, 0x1, 0x1);
        gbc.writeMem(0x4047, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x4470, gbc.sp());
        EXPECT(0x4049, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0225
        gbc.setState(0x1d1d, 0x7bd5, 0xed80, 0xc7d3, 0x2e6f, 0x16b6, 0x0, 0x1);
        gbc.writeMem(0x1d1d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x7bd5, gbc.sp());
        EXPECT(0x1d1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0226
        gbc.setState(0x348, 0xb779, 0x5980, 0x4a0e, 0xa897, 0x8f85, 0x1, 0x1);
        gbc.writeMem(0x348, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xb779, gbc.sp());
        EXPECT(0x34a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0227
        gbc.setState(0x22bf, 0x3d00, 0x3310, 0xc85f, 0x927c, 0x9264, 0x0, 0x0);
        gbc.writeMem(0x22bf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x3d00, gbc.sp());
        EXPECT(0x22c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0228
        gbc.setState(0xc488, 0x1ea2, 0xf020, 0x24d9, 0x9f8e, 0x7889, 0x0, 0x1);
        gbc.writeMem(0xc488, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x1ea2, gbc.sp());
        EXPECT(0xc48a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc488));
        EXPECT(0x15, gbc.readMem(0xc489));
        // CB 15 0229
        gbc.setState(0xfcc, 0x90d8, 0xa400, 0x383b, 0x727d, 0xbe55, 0x0, 0x1);
        gbc.writeMem(0xfcc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x90d8, gbc.sp());
        EXPECT(0xfce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 022A
        gbc.setState(0x7c0f, 0xd488, 0xa720, 0x1eac, 0xf2b9, 0xbd7a, 0x0, 0x0);
        gbc.writeMem(0x7c0f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xd488, gbc.sp());
        EXPECT(0x7c11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 022B
        gbc.setState(0x670f, 0xac4d, 0xf830, 0x57d3, 0xc179, 0xcdaa, 0x1, 0x1);
        gbc.writeMem(0x670f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xac4d, gbc.sp());
        EXPECT(0x6711, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 022C
        gbc.setState(0x9939, 0x5f42, 0xd280, 0xef24, 0xf9c1, 0xbc41, 0x1, 0x0);
        gbc.writeMem(0x9939, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x5f42, gbc.sp());
        EXPECT(0x993b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9939));
        EXPECT(0x15, gbc.readMem(0x993a));
        // CB 15 022D
        gbc.setState(0x9bb6, 0x326c, 0xbba0, 0x1fae, 0xd73a, 0xc6f7, 0x1, 0x1);
        gbc.writeMem(0x9bb6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x326c, gbc.sp());
        EXPECT(0x9bb8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bb6));
        EXPECT(0x15, gbc.readMem(0x9bb7));
        // CB 15 022E
        gbc.setState(0xb255, 0xf100, 0xde0, 0x54e8, 0x912a, 0xe979, 0x0, 0x1);
        gbc.writeMem(0xb255, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xf100, gbc.sp());
        EXPECT(0xb257, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb255));
        EXPECT(0x15, gbc.readMem(0xb256));
        // CB 15 022F
        gbc.setState(0x5e2e, 0x20bc, 0x7d10, 0x5c90, 0xc7c4, 0x3d97, 0x1, 0x1);
        gbc.writeMem(0x5e2e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x20bc, gbc.sp());
        EXPECT(0x5e30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0230
        gbc.setState(0x8fd4, 0xc489, 0x7f90, 0xf2ee, 0x7912, 0x24a9, 0x0, 0x1);
        gbc.writeMem(0x8fd4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xc489, gbc.sp());
        EXPECT(0x8fd6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fd4));
        EXPECT(0x15, gbc.readMem(0x8fd5));
        // CB 15 0231
        gbc.setState(0x410c, 0xd657, 0x5930, 0x6d44, 0x9e50, 0x7947, 0x1, 0x0);
        gbc.writeMem(0x410c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xd657, gbc.sp());
        EXPECT(0x410e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0232
        gbc.setState(0xe7c3, 0xe61b, 0x6090, 0x5611, 0x4ce5, 0x40e8, 0x0, 0x1);
        gbc.writeMem(0xe7c3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xe61b, gbc.sp());
        EXPECT(0xe7c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7c3));
        EXPECT(0x15, gbc.readMem(0xe7c4));
        // CB 15 0233
        gbc.setState(0xb936, 0x44f5, 0xa030, 0x6d2c, 0xeb6, 0x2dbd, 0x1, 0x1);
        gbc.writeMem(0xb936, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x44f5, gbc.sp());
        EXPECT(0xb938, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb936));
        EXPECT(0x15, gbc.readMem(0xb937));
        // CB 15 0234
        gbc.setState(0x46c7, 0xd0e2, 0xc850, 0x88b0, 0x9a24, 0x25cf, 0x0, 0x0);
        gbc.writeMem(0x46c7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xd0e2, gbc.sp());
        EXPECT(0x46c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0235
        gbc.setState(0x2185, 0x473c, 0xaa50, 0x4d81, 0x2d7d, 0x3481, 0x1, 0x0);
        gbc.writeMem(0x2185, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x473c, gbc.sp());
        EXPECT(0x2187, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0236
        gbc.setState(0x27b7, 0xbbf2, 0x8490, 0xfec3, 0x92a9, 0x49d8, 0x1, 0x0);
        gbc.writeMem(0x27b7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xbbf2, gbc.sp());
        EXPECT(0x27b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0237
        gbc.setState(0xd5b1, 0x46bb, 0xd3e0, 0xc22d, 0x8a33, 0xbb83, 0x1, 0x0);
        gbc.writeMem(0xd5b1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x46bb, gbc.sp());
        EXPECT(0xd5b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5b1));
        EXPECT(0x15, gbc.readMem(0xd5b2));
        // CB 15 0238
        gbc.setState(0xb3a8, 0xa9b3, 0x43e0, 0xecaa, 0x7fcc, 0xdb25, 0x1, 0x1);
        gbc.writeMem(0xb3a8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xa9b3, gbc.sp());
        EXPECT(0xb3aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3a8));
        EXPECT(0x15, gbc.readMem(0xb3a9));
        // CB 15 0239
        gbc.setState(0x366a, 0x1601, 0xfe70, 0x6a1d, 0x7658, 0x73e7, 0x0, 0x1);
        gbc.writeMem(0x366a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x1601, gbc.sp());
        EXPECT(0x366c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 023A
        gbc.setState(0xe648, 0xce1, 0x2d00, 0x5514, 0x891c, 0x9193, 0x1, 0x0);
        gbc.writeMem(0xe648, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xce1, gbc.sp());
        EXPECT(0xe64a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe648));
        EXPECT(0x15, gbc.readMem(0xe649));
        // CB 15 023B
        gbc.setState(0x2465, 0xac03, 0x9960, 0xa1c0, 0xf725, 0x7ad0, 0x0, 0x1);
        gbc.writeMem(0x2465, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xac03, gbc.sp());
        EXPECT(0x2467, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 023C
        gbc.setState(0xd223, 0x8755, 0x7420, 0x886c, 0xb3fe, 0xfb21, 0x1, 0x0);
        gbc.writeMem(0xd223, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x8755, gbc.sp());
        EXPECT(0xd225, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd223));
        EXPECT(0x15, gbc.readMem(0xd224));
        // CB 15 023D
        gbc.setState(0x1c03, 0x9743, 0x5dd0, 0xcc3e, 0x9aae, 0x3262, 0x0, 0x0);
        gbc.writeMem(0x1c03, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x9743, gbc.sp());
        EXPECT(0x1c05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 023E
        gbc.setState(0x3d64, 0x11c8, 0xd920, 0x1aa5, 0xd27f, 0x157e, 0x1, 0x1);
        gbc.writeMem(0x3d64, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x11c8, gbc.sp());
        EXPECT(0x3d66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0240
        gbc.setState(0xead9, 0x8365, 0xd440, 0x987b, 0x1cf3, 0xd31f, 0x1, 0x0);
        gbc.writeMem(0xead9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x8365, gbc.sp());
        EXPECT(0xeadb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xead9));
        EXPECT(0x15, gbc.readMem(0xeada));
        // CB 15 0241
        gbc.setState(0xb350, 0xfa6a, 0x77c0, 0x515a, 0xb589, 0x7cb8, 0x0, 0x0);
        gbc.writeMem(0xb350, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xfa6a, gbc.sp());
        EXPECT(0xb352, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb350));
        EXPECT(0x15, gbc.readMem(0xb351));
        // CB 15 0242
        gbc.setState(0x235b, 0xc9ff, 0x6be0, 0x2a0b, 0x2266, 0x2e0, 0x0, 0x1);
        gbc.writeMem(0x235b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xc9ff, gbc.sp());
        EXPECT(0x235d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0243
        gbc.setState(0x19, 0xa5b1, 0x2390, 0x3f24, 0x7a11, 0xbcdc, 0x1, 0x1);
        gbc.writeMem(0x19, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xa5b1, gbc.sp());
        EXPECT(0x1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0244
        gbc.setState(0x3efc, 0x298b, 0xef20, 0x2f8d, 0x1fb5, 0x5327, 0x0, 0x0);
        gbc.writeMem(0x3efc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x298b, gbc.sp());
        EXPECT(0x3efe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0245
        gbc.setState(0x75a5, 0x1bc8, 0x5640, 0x11ee, 0x7ade, 0x8ccb, 0x0, 0x1);
        gbc.writeMem(0x75a5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x1bc8, gbc.sp());
        EXPECT(0x75a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0246
        gbc.setState(0x6448, 0xc333, 0xa820, 0x7cb6, 0xbd91, 0x79e9, 0x0, 0x1);
        gbc.writeMem(0x6448, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xc333, gbc.sp());
        EXPECT(0x644a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0247
        gbc.setState(0x189a, 0xe2c9, 0x4400, 0x31d, 0xbf60, 0x3283, 0x1, 0x1);
        gbc.writeMem(0x189a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xe2c9, gbc.sp());
        EXPECT(0x189c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0248
        gbc.setState(0xae36, 0xe672, 0x8240, 0x7945, 0x4243, 0x61f, 0x1, 0x1);
        gbc.writeMem(0xae36, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xe672, gbc.sp());
        EXPECT(0xae38, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae36));
        EXPECT(0x15, gbc.readMem(0xae37));
        // CB 15 0249
        gbc.setState(0x25aa, 0xb7e5, 0xaa00, 0x27aa, 0xe9ff, 0x5add, 0x0, 0x1);
        gbc.writeMem(0x25aa, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xb7e5, gbc.sp());
        EXPECT(0x25ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 024A
        gbc.setState(0xb209, 0xd09e, 0x8c10, 0x495a, 0xaa7a, 0x64be, 0x1, 0x1);
        gbc.writeMem(0xb209, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xd09e, gbc.sp());
        EXPECT(0xb20b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb209));
        EXPECT(0x15, gbc.readMem(0xb20a));
        // CB 15 024B
        gbc.setState(0x3abf, 0xd442, 0x6050, 0x56d, 0x6902, 0x9e9e, 0x1, 0x0);
        gbc.writeMem(0x3abf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xd442, gbc.sp());
        EXPECT(0x3ac1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 024C
        gbc.setState(0x9c01, 0xe944, 0x5000, 0x3cf1, 0xf5a4, 0x85cf, 0x1, 0x1);
        gbc.writeMem(0x9c01, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xe944, gbc.sp());
        EXPECT(0x9c03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c01));
        EXPECT(0x15, gbc.readMem(0x9c02));
        // CB 15 024D
        gbc.setState(0xe32d, 0x9fdf, 0x1a70, 0x55e7, 0x3af1, 0x96b6, 0x1, 0x0);
        gbc.writeMem(0xe32d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x9fdf, gbc.sp());
        EXPECT(0xe32f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe32d));
        EXPECT(0x15, gbc.readMem(0xe32e));
        // CB 15 024E
        gbc.setState(0x782c, 0x7495, 0xecf0, 0xcbbd, 0xb16, 0x6b08, 0x0, 0x1);
        gbc.writeMem(0x782c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x7495, gbc.sp());
        EXPECT(0x782e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 024F
        gbc.setState(0xcff5, 0xf8da, 0xcec0, 0x3cbb, 0xa5a5, 0x3c92, 0x1, 0x0);
        gbc.writeMem(0xcff5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xf8da, gbc.sp());
        EXPECT(0xcff7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcff5));
        EXPECT(0x15, gbc.readMem(0xcff6));
        // CB 15 0250
        gbc.setState(0x6426, 0x4af4, 0x3d10, 0x8990, 0xc5c2, 0x4660, 0x0, 0x0);
        gbc.writeMem(0x6426, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x4af4, gbc.sp());
        EXPECT(0x6428, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0251
        gbc.setState(0x9af, 0xe94b, 0x4920, 0x6924, 0x476c, 0xdfed, 0x0, 0x0);
        gbc.writeMem(0x9af, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xe94b, gbc.sp());
        EXPECT(0x9b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0252
        gbc.setState(0x5a94, 0xd44a, 0xbc0, 0x206b, 0x610, 0xb4d6, 0x0, 0x1);
        gbc.writeMem(0x5a94, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xd44a, gbc.sp());
        EXPECT(0x5a96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0253
        gbc.setState(0x768d, 0x7ddd, 0xa9e0, 0xa190, 0xb428, 0x500a, 0x0, 0x1);
        gbc.writeMem(0x768d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x7ddd, gbc.sp());
        EXPECT(0x768f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0255
        gbc.setState(0xd174, 0x307b, 0xd070, 0xfbd3, 0x5b57, 0x4488, 0x1, 0x1);
        gbc.writeMem(0xd174, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x307b, gbc.sp());
        EXPECT(0xd176, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd174));
        EXPECT(0x15, gbc.readMem(0xd175));
        // CB 15 0256
        gbc.setState(0xefbd, 0xa159, 0x7bd0, 0x412e, 0x797, 0x481a, 0x1, 0x1);
        gbc.writeMem(0xefbd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xa159, gbc.sp());
        EXPECT(0xefbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefbd));
        EXPECT(0x15, gbc.readMem(0xefbe));
        // CB 15 0257
        gbc.setState(0x8c7a, 0xd2d6, 0xb70, 0x45ec, 0x7aed, 0x90f, 0x0, 0x1);
        gbc.writeMem(0x8c7a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xd2d6, gbc.sp());
        EXPECT(0x8c7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c7a));
        EXPECT(0x15, gbc.readMem(0x8c7b));
        // CB 15 0258
        gbc.setState(0xba9f, 0xca49, 0x4a50, 0xdd66, 0x1973, 0x4f1, 0x0, 0x0);
        gbc.writeMem(0xba9f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xca49, gbc.sp());
        EXPECT(0xbaa1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba9f));
        EXPECT(0x15, gbc.readMem(0xbaa0));
        // CB 15 0259
        gbc.setState(0x1e76, 0x3023, 0xf450, 0x3a33, 0x55b7, 0xda0d, 0x1, 0x1);
        gbc.writeMem(0x1e76, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x3023, gbc.sp());
        EXPECT(0x1e78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 025B
        gbc.setState(0xb7ad, 0x7ea6, 0xc260, 0xae27, 0x8729, 0x1054, 0x1, 0x1);
        gbc.writeMem(0xb7ad, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x7ea6, gbc.sp());
        EXPECT(0xb7af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7ad));
        EXPECT(0x15, gbc.readMem(0xb7ae));
        // CB 15 025D
        gbc.setState(0x3959, 0x43ac, 0xa450, 0xa996, 0x37a7, 0x9dd4, 0x1, 0x1);
        gbc.writeMem(0x3959, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x43ac, gbc.sp());
        EXPECT(0x395b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 025E
        gbc.setState(0xa5be, 0xa9d0, 0x63f0, 0x267e, 0x6307, 0x6f3a, 0x1, 0x0);
        gbc.writeMem(0xa5be, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xa9d0, gbc.sp());
        EXPECT(0xa5c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5be));
        EXPECT(0x15, gbc.readMem(0xa5bf));
        // CB 15 025F
        gbc.setState(0x8c72, 0x36be, 0x92d0, 0x84e8, 0xf403, 0xb47e, 0x0, 0x0);
        gbc.writeMem(0x8c72, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x36be, gbc.sp());
        EXPECT(0x8c74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c72));
        EXPECT(0x15, gbc.readMem(0x8c73));
        // CB 15 0260
        gbc.setState(0x2f3b, 0x5287, 0xbda0, 0x3646, 0xd097, 0x3685, 0x0, 0x0);
        gbc.writeMem(0x2f3b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x5287, gbc.sp());
        EXPECT(0x2f3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0261
        gbc.setState(0x4049, 0x89b0, 0x5a30, 0x8a62, 0xf6e0, 0x6024, 0x1, 0x0);
        gbc.writeMem(0x4049, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x89b0, gbc.sp());
        EXPECT(0x404b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0262
        gbc.setState(0x4a04, 0x97fe, 0xafd0, 0x1b58, 0x4792, 0xa0db, 0x1, 0x1);
        gbc.writeMem(0x4a04, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x97fe, gbc.sp());
        EXPECT(0x4a06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0263
        gbc.setState(0xca71, 0x8287, 0xc570, 0x2133, 0x8476, 0x514b, 0x0, 0x1);
        gbc.writeMem(0xca71, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x8287, gbc.sp());
        EXPECT(0xca73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca71));
        EXPECT(0x15, gbc.readMem(0xca72));
        // CB 15 0264
        gbc.setState(0xdd98, 0xe16a, 0x1860, 0x205f, 0xecac, 0x1155, 0x1, 0x1);
        gbc.writeMem(0xdd98, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xe16a, gbc.sp());
        EXPECT(0xdd9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd98));
        EXPECT(0x15, gbc.readMem(0xdd99));
        // CB 15 0265
        gbc.setState(0x4160, 0x3567, 0x9b00, 0x3129, 0xcb1c, 0x28b5, 0x1, 0x0);
        gbc.writeMem(0x4160, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x3567, gbc.sp());
        EXPECT(0x4162, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0266
        gbc.setState(0x3795, 0xb28c, 0xa870, 0x623, 0xeea1, 0x3be9, 0x0, 0x1);
        gbc.writeMem(0x3795, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xb28c, gbc.sp());
        EXPECT(0x3797, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0267
        gbc.setState(0x7bc8, 0x61b3, 0x1040, 0x79a7, 0x61ec, 0xb060, 0x0, 0x0);
        gbc.writeMem(0x7bc8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x61b3, gbc.sp());
        EXPECT(0x7bca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0268
        gbc.setState(0xbf17, 0x2188, 0x82d0, 0xa7ae, 0x3511, 0xf398, 0x1, 0x0);
        gbc.writeMem(0xbf17, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x2188, gbc.sp());
        EXPECT(0xbf19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf17));
        EXPECT(0x15, gbc.readMem(0xbf18));
        // CB 15 0269
        gbc.setState(0xe3b, 0xac8, 0xbfc0, 0x79b7, 0x9c9e, 0xf5bb, 0x0, 0x1);
        gbc.writeMem(0xe3b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xac8, gbc.sp());
        EXPECT(0xe3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 026A
        gbc.setState(0x67cf, 0xd14c, 0xb060, 0x45c3, 0x6850, 0x642a, 0x0, 0x0);
        gbc.writeMem(0x67cf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xd14c, gbc.sp());
        EXPECT(0x67d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 026B
        gbc.setState(0xcfb2, 0xf25e, 0xa560, 0xe200, 0xe468, 0x79fe, 0x1, 0x1);
        gbc.writeMem(0xcfb2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xf25e, gbc.sp());
        EXPECT(0xcfb4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfb2));
        EXPECT(0x15, gbc.readMem(0xcfb3));
        // CB 15 026C
        gbc.setState(0x34c5, 0xf9d, 0x40b0, 0x1857, 0x9f40, 0x3476, 0x0, 0x0);
        gbc.writeMem(0x34c5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xf9d, gbc.sp());
        EXPECT(0x34c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 026D
        gbc.setState(0x9110, 0xe559, 0xd3c0, 0x6a96, 0xaaef, 0x2b4, 0x1, 0x1);
        gbc.writeMem(0x9110, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xe559, gbc.sp());
        EXPECT(0x9112, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9110));
        EXPECT(0x15, gbc.readMem(0x9111));
        // CB 15 026E
        gbc.setState(0x9516, 0x5a0b, 0x6630, 0xec4a, 0x548, 0x8bcf, 0x0, 0x1);
        gbc.writeMem(0x9516, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x5a0b, gbc.sp());
        EXPECT(0x9518, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9516));
        EXPECT(0x15, gbc.readMem(0x9517));
        // CB 15 0270
        gbc.setState(0x4638, 0x9f69, 0xe0a0, 0x75ef, 0x85ff, 0x97b7, 0x0, 0x1);
        gbc.writeMem(0x4638, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x9f69, gbc.sp());
        EXPECT(0x463a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0271
        gbc.setState(0x6b43, 0x26c7, 0x6aa0, 0x74c7, 0x368f, 0x4c6a, 0x1, 0x0);
        gbc.writeMem(0x6b43, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x26c7, gbc.sp());
        EXPECT(0x6b45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0272
        gbc.setState(0xb767, 0x88cd, 0x47f0, 0x6f16, 0x9b84, 0x77d5, 0x0, 0x0);
        gbc.writeMem(0xb767, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x88cd, gbc.sp());
        EXPECT(0xb769, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb767));
        EXPECT(0x15, gbc.readMem(0xb768));
        // CB 15 0273
        gbc.setState(0xb78a, 0x5ddb, 0x7700, 0xeca1, 0x6f1c, 0xe9be, 0x1, 0x0);
        gbc.writeMem(0xb78a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x5ddb, gbc.sp());
        EXPECT(0xb78c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb78a));
        EXPECT(0x15, gbc.readMem(0xb78b));
        // CB 15 0274
        gbc.setState(0x81a9, 0x8188, 0xbb50, 0x9d25, 0x6d7, 0x65e6, 0x1, 0x1);
        gbc.writeMem(0x81a9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x8188, gbc.sp());
        EXPECT(0x81ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81a9));
        EXPECT(0x15, gbc.readMem(0x81aa));
        // CB 15 0275
        gbc.setState(0x711b, 0x38b, 0xa260, 0x5f3e, 0xefb5, 0x7a42, 0x1, 0x0);
        gbc.writeMem(0x711b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x38b, gbc.sp());
        EXPECT(0x711d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0276
        gbc.setState(0x7c8, 0xfba8, 0x37a0, 0x7a80, 0x8ce4, 0xacf9, 0x1, 0x1);
        gbc.writeMem(0x7c8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xfba8, gbc.sp());
        EXPECT(0x7ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0277
        gbc.setState(0x3e77, 0x19bc, 0xe070, 0x6dd5, 0x3058, 0xa5a, 0x1, 0x1);
        gbc.writeMem(0x3e77, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x19bc, gbc.sp());
        EXPECT(0x3e79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0278
        gbc.setState(0x77d4, 0xba5a, 0xf00, 0xf76e, 0xd1e4, 0x7547, 0x0, 0x0);
        gbc.writeMem(0x77d4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xba5a, gbc.sp());
        EXPECT(0x77d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0279
        gbc.setState(0x9f00, 0xda27, 0x50d0, 0x338c, 0xa553, 0x12c3, 0x1, 0x0);
        gbc.writeMem(0x9f00, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xda27, gbc.sp());
        EXPECT(0x9f02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f00));
        EXPECT(0x15, gbc.readMem(0x9f01));
        // CB 15 027A
        gbc.setState(0xd00a, 0xba7e, 0x690, 0x109b, 0x6fc0, 0x91f4, 0x1, 0x1);
        gbc.writeMem(0xd00a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xba7e, gbc.sp());
        EXPECT(0xd00c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd00a));
        EXPECT(0x15, gbc.readMem(0xd00b));
        // CB 15 027B
        gbc.setState(0x4578, 0xbd06, 0x5510, 0xf7a4, 0x1211, 0x3403, 0x1, 0x0);
        gbc.writeMem(0x4578, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xbd06, gbc.sp());
        EXPECT(0x457a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 027C
        gbc.setState(0x9e08, 0xede0, 0xa400, 0x2907, 0xee59, 0x6f8, 0x0, 0x1);
        gbc.writeMem(0x9e08, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xede0, gbc.sp());
        EXPECT(0x9e0a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e08));
        EXPECT(0x15, gbc.readMem(0x9e09));
        // CB 15 027D
        gbc.setState(0x9135, 0x1f79, 0xc2a0, 0x1891, 0x2632, 0x3090, 0x0, 0x1);
        gbc.writeMem(0x9135, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x1f79, gbc.sp());
        EXPECT(0x9137, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9135));
        EXPECT(0x15, gbc.readMem(0x9136));
        // CB 15 027E
        gbc.setState(0x82df, 0xdcf2, 0x6d70, 0xe99c, 0xb740, 0x3349, 0x1, 0x0);
        gbc.writeMem(0x82df, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xdcf2, gbc.sp());
        EXPECT(0x82e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82df));
        EXPECT(0x15, gbc.readMem(0x82e0));
        // CB 15 027F
        gbc.setState(0x7c93, 0x2061, 0xadd0, 0xa1d3, 0xe64a, 0xeefe, 0x0, 0x1);
        gbc.writeMem(0x7c93, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x2061, gbc.sp());
        EXPECT(0x7c95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0280
        gbc.setState(0x9676, 0x7589, 0x410, 0x5b9c, 0x7406, 0xf004, 0x1, 0x0);
        gbc.writeMem(0x9676, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x7589, gbc.sp());
        EXPECT(0x9678, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9676));
        EXPECT(0x15, gbc.readMem(0x9677));
        // CB 15 0281
        gbc.setState(0xa90, 0x24f9, 0xa8b0, 0xaf2c, 0xb70b, 0x656d, 0x0, 0x1);
        gbc.writeMem(0xa90, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x24f9, gbc.sp());
        EXPECT(0xa92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0282
        gbc.setState(0x752f, 0x38a2, 0xe8d0, 0x1e7f, 0xea5, 0xee87, 0x1, 0x0);
        gbc.writeMem(0x752f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x38a2, gbc.sp());
        EXPECT(0x7531, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0283
        gbc.setState(0xcd12, 0x2843, 0x5510, 0xd7e2, 0xd11f, 0x5c8, 0x1, 0x1);
        gbc.writeMem(0xcd12, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x2843, gbc.sp());
        EXPECT(0xcd14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd12));
        EXPECT(0x15, gbc.readMem(0xcd13));
        // CB 15 0284
        gbc.setState(0x3e8, 0x39ce, 0x6d00, 0xe054, 0x80ce, 0xe477, 0x1, 0x1);
        gbc.writeMem(0x3e8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x39ce, gbc.sp());
        EXPECT(0x3ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0285
        gbc.setState(0xd8e1, 0xd182, 0x3360, 0xdb, 0xb625, 0xd8c1, 0x1, 0x1);
        gbc.writeMem(0xd8e1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xd182, gbc.sp());
        EXPECT(0xd8e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8e1));
        EXPECT(0x15, gbc.readMem(0xd8e2));
        // CB 15 0286
        gbc.setState(0x83ea, 0x7212, 0xbd60, 0xf10, 0xddc8, 0x1d9, 0x1, 0x1);
        gbc.writeMem(0x83ea, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x7212, gbc.sp());
        EXPECT(0x83ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83ea));
        EXPECT(0x15, gbc.readMem(0x83eb));
        // CB 15 0287
        gbc.setState(0xbbb0, 0xfb14, 0x7740, 0x4303, 0x8801, 0x4f61, 0x0, 0x1);
        gbc.writeMem(0xbbb0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xfb14, gbc.sp());
        EXPECT(0xbbb2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbb0));
        EXPECT(0x15, gbc.readMem(0xbbb1));
        // CB 15 0288
        gbc.setState(0x10d7, 0x80e3, 0x3ff0, 0xf6fb, 0x7230, 0xfbd8, 0x0, 0x1);
        gbc.writeMem(0x10d7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x80e3, gbc.sp());
        EXPECT(0x10d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0289
        gbc.setState(0x3cf8, 0x51, 0xbee0, 0x4657, 0x60db, 0xcec7, 0x1, 0x0);
        gbc.writeMem(0x3cf8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x51, gbc.sp());
        EXPECT(0x3cfa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 028A
        gbc.setState(0x3953, 0x5e4c, 0x4190, 0xde05, 0xd211, 0xca12, 0x0, 0x0);
        gbc.writeMem(0x3953, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x5e4c, gbc.sp());
        EXPECT(0x3955, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 028B
        gbc.setState(0x38a7, 0xcfb5, 0x4800, 0xec7c, 0x6aa4, 0xeef8, 0x0, 0x1);
        gbc.writeMem(0x38a7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xcfb5, gbc.sp());
        EXPECT(0x38a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 028C
        gbc.setState(0xdf27, 0x282c, 0x4710, 0x5a91, 0x5cae, 0x180, 0x1, 0x1);
        gbc.writeMem(0xdf27, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x282c, gbc.sp());
        EXPECT(0xdf29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf27));
        EXPECT(0x15, gbc.readMem(0xdf28));
        // CB 15 028D
        gbc.setState(0x8bb5, 0xb4ca, 0xdb00, 0x1a23, 0xb310, 0xefee, 0x1, 0x0);
        gbc.writeMem(0x8bb5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xb4ca, gbc.sp());
        EXPECT(0x8bb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bb5));
        EXPECT(0x15, gbc.readMem(0x8bb6));
        // CB 15 028E
        gbc.setState(0x4d4a, 0xf15d, 0xbd0, 0xb2a3, 0x8b32, 0x5b5b, 0x0, 0x0);
        gbc.writeMem(0x4d4a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xf15d, gbc.sp());
        EXPECT(0x4d4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 028F
        gbc.setState(0xc1d5, 0x2dfd, 0x2b70, 0x98d, 0xc51c, 0x20c7, 0x1, 0x1);
        gbc.writeMem(0xc1d5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x2dfd, gbc.sp());
        EXPECT(0xc1d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1d5));
        EXPECT(0x15, gbc.readMem(0xc1d6));
        // CB 15 0290
        gbc.setState(0xbef8, 0x6415, 0x7620, 0x66d6, 0xda83, 0x45ae, 0x0, 0x1);
        gbc.writeMem(0xbef8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x6415, gbc.sp());
        EXPECT(0xbefa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbef8));
        EXPECT(0x15, gbc.readMem(0xbef9));
        // CB 15 0291
        gbc.setState(0x22ed, 0xf0be, 0x2d20, 0xca0, 0x36b1, 0x99b2, 0x1, 0x0);
        gbc.writeMem(0x22ed, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xf0be, gbc.sp());
        EXPECT(0x22ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0292
        gbc.setState(0x7bab, 0xd239, 0x7ca0, 0xfd4f, 0xfd75, 0xcd39, 0x0, 0x0);
        gbc.writeMem(0x7bab, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xd239, gbc.sp());
        EXPECT(0x7bad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0293
        gbc.setState(0xa7de, 0x4047, 0xa00, 0xd0df, 0x1acb, 0x3bf9, 0x1, 0x1);
        gbc.writeMem(0xa7de, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x4047, gbc.sp());
        EXPECT(0xa7e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7de));
        EXPECT(0x15, gbc.readMem(0xa7df));
        // CB 15 0294
        gbc.setState(0xed0b, 0x79f7, 0x9380, 0xdf9, 0xc5fb, 0x96ad, 0x1, 0x0);
        gbc.writeMem(0xed0b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x79f7, gbc.sp());
        EXPECT(0xed0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed0b));
        EXPECT(0x15, gbc.readMem(0xed0c));
        // CB 15 0295
        gbc.setState(0x734b, 0x33a1, 0xaf70, 0xd6d0, 0x5f5c, 0xbbd3, 0x0, 0x1);
        gbc.writeMem(0x734b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x33a1, gbc.sp());
        EXPECT(0x734d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0296
        gbc.setState(0x4b19, 0xc7ff, 0x4a70, 0xd89b, 0x937e, 0xec14, 0x1, 0x1);
        gbc.writeMem(0x4b19, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xc7ff, gbc.sp());
        EXPECT(0x4b1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0297
        gbc.setState(0x85f2, 0x2ad, 0x2df0, 0x991, 0x840c, 0xc715, 0x1, 0x1);
        gbc.writeMem(0x85f2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x2ad, gbc.sp());
        EXPECT(0x85f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85f2));
        EXPECT(0x15, gbc.readMem(0x85f3));
        // CB 15 0298
        gbc.setState(0x51fc, 0xa413, 0x22e0, 0x816a, 0xd8d1, 0x6ce3, 0x0, 0x1);
        gbc.writeMem(0x51fc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xa413, gbc.sp());
        EXPECT(0x51fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0299
        gbc.setState(0x300d, 0xf48d, 0xc040, 0x778e, 0x5725, 0x7bc2, 0x1, 0x0);
        gbc.writeMem(0x300d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xf48d, gbc.sp());
        EXPECT(0x300f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 029A
        gbc.setState(0xc304, 0x439d, 0x7650, 0xb476, 0x232c, 0x1de5, 0x1, 0x1);
        gbc.writeMem(0xc304, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x439d, gbc.sp());
        EXPECT(0xc306, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc304));
        EXPECT(0x15, gbc.readMem(0xc305));
        // CB 15 029B
        gbc.setState(0x2967, 0xe7a4, 0xe250, 0x59d2, 0xbd72, 0xf0bb, 0x0, 0x1);
        gbc.writeMem(0x2967, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xe7a4, gbc.sp());
        EXPECT(0x2969, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 029C
        gbc.setState(0xacdb, 0xca77, 0xd6b0, 0xd800, 0x47fc, 0x59a0, 0x0, 0x1);
        gbc.writeMem(0xacdb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xca77, gbc.sp());
        EXPECT(0xacdd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacdb));
        EXPECT(0x15, gbc.readMem(0xacdc));
        // CB 15 029D
        gbc.setState(0x6892, 0xce40, 0xb1a0, 0x5688, 0xf8db, 0x39bc, 0x0, 0x1);
        gbc.writeMem(0x6892, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xce40, gbc.sp());
        EXPECT(0x6894, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 029E
        gbc.setState(0xbffa, 0xc254, 0xd1e0, 0x9685, 0xbd9b, 0x1977, 0x1, 0x0);
        gbc.writeMem(0xbffa, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xc254, gbc.sp());
        EXPECT(0xbffc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbffa));
        EXPECT(0x15, gbc.readMem(0xbffb));
        // CB 15 029F
        gbc.setState(0x4c08, 0x3b4e, 0x6080, 0xdd23, 0x6a24, 0x2174, 0x1, 0x0);
        gbc.writeMem(0x4c08, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x3b4e, gbc.sp());
        EXPECT(0x4c0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02A0
        gbc.setState(0x8ac4, 0x45a1, 0x1e10, 0x2dae, 0xe6f8, 0x5ad3, 0x1, 0x1);
        gbc.writeMem(0x8ac4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x45a1, gbc.sp());
        EXPECT(0x8ac6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ac4));
        EXPECT(0x15, gbc.readMem(0x8ac5));
        // CB 15 02A1
        gbc.setState(0xde4, 0x6640, 0xa1c0, 0x5df, 0xa083, 0x12d4, 0x0, 0x0);
        gbc.writeMem(0xde4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x6640, gbc.sp());
        EXPECT(0xde6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02A2
        gbc.setState(0xed2e, 0x9f40, 0x5cc0, 0x41b3, 0xc062, 0xd33f, 0x1, 0x1);
        gbc.writeMem(0xed2e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x9f40, gbc.sp());
        EXPECT(0xed30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed2e));
        EXPECT(0x15, gbc.readMem(0xed2f));
        // CB 15 02A3
        gbc.setState(0xdac3, 0xfb26, 0x20b0, 0xfe90, 0x3e78, 0x3b4, 0x1, 0x0);
        gbc.writeMem(0xdac3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xfb26, gbc.sp());
        EXPECT(0xdac5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdac3));
        EXPECT(0x15, gbc.readMem(0xdac4));
        // CB 15 02A4
        gbc.setState(0x420f, 0xa242, 0xe8e0, 0xd341, 0x5e10, 0xf355, 0x0, 0x1);
        gbc.writeMem(0x420f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xa242, gbc.sp());
        EXPECT(0x4211, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02A5
        gbc.setState(0xc26d, 0x5221, 0xa7a0, 0xf4d1, 0xb7f0, 0x2b2f, 0x1, 0x1);
        gbc.writeMem(0xc26d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x5221, gbc.sp());
        EXPECT(0xc26f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc26d));
        EXPECT(0x15, gbc.readMem(0xc26e));
        // CB 15 02A6
        gbc.setState(0x8d1f, 0x7577, 0x85c0, 0x678a, 0x91ac, 0xe43c, 0x1, 0x1);
        gbc.writeMem(0x8d1f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x7577, gbc.sp());
        EXPECT(0x8d21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d1f));
        EXPECT(0x15, gbc.readMem(0x8d20));
        // CB 15 02A9
        gbc.setState(0x268f, 0xfe91, 0x4e60, 0xa74d, 0xf318, 0x7795, 0x0, 0x1);
        gbc.writeMem(0x268f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xfe91, gbc.sp());
        EXPECT(0x2691, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02AA
        gbc.setState(0x3afd, 0x37de, 0xa9d0, 0x879, 0x8b9f, 0xe79d, 0x1, 0x0);
        gbc.writeMem(0x3afd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x37de, gbc.sp());
        EXPECT(0x3aff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02AC
        gbc.setState(0xa962, 0xfcf7, 0xffa0, 0x3abf, 0x5452, 0xb5a9, 0x0, 0x1);
        gbc.writeMem(0xa962, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xfcf7, gbc.sp());
        EXPECT(0xa964, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa962));
        EXPECT(0x15, gbc.readMem(0xa963));
        // CB 15 02AD
        gbc.setState(0x72e8, 0x4cbf, 0x2b70, 0xca85, 0xa7b7, 0x70fc, 0x1, 0x1);
        gbc.writeMem(0x72e8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x4cbf, gbc.sp());
        EXPECT(0x72ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02B0
        gbc.setState(0x63df, 0xbadd, 0x96a0, 0x8daf, 0xb2cf, 0x2bd3, 0x1, 0x1);
        gbc.writeMem(0x63df, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xbadd, gbc.sp());
        EXPECT(0x63e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02B1
        gbc.setState(0x9c52, 0xfdbb, 0x2e90, 0x62c9, 0xb18b, 0x5d71, 0x0, 0x1);
        gbc.writeMem(0x9c52, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xfdbb, gbc.sp());
        EXPECT(0x9c54, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c52));
        EXPECT(0x15, gbc.readMem(0x9c53));
        // CB 15 02B2
        gbc.setState(0x6def, 0xe3d9, 0xafc0, 0x7b64, 0x691e, 0x72a3, 0x0, 0x0);
        gbc.writeMem(0x6def, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xe3d9, gbc.sp());
        EXPECT(0x6df1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02B3
        gbc.setState(0x681c, 0x52fc, 0x53d0, 0x801a, 0x610d, 0x4350, 0x1, 0x1);
        gbc.writeMem(0x681c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x52fc, gbc.sp());
        EXPECT(0x681e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02B4
        gbc.setState(0xd48f, 0x4ae9, 0xf0e0, 0x6c4d, 0xf1f2, 0x8a01, 0x0, 0x1);
        gbc.writeMem(0xd48f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x4ae9, gbc.sp());
        EXPECT(0xd491, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd48f));
        EXPECT(0x15, gbc.readMem(0xd490));
        // CB 15 02B5
        gbc.setState(0xd904, 0x2c8d, 0x89d0, 0x95b9, 0x344a, 0xeb5f, 0x1, 0x1);
        gbc.writeMem(0xd904, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x2c8d, gbc.sp());
        EXPECT(0xd906, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd904));
        EXPECT(0x15, gbc.readMem(0xd905));
        // CB 15 02B6
        gbc.setState(0x98b, 0xef03, 0x62e0, 0xd6ab, 0x271, 0xcf60, 0x1, 0x0);
        gbc.writeMem(0x98b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xef03, gbc.sp());
        EXPECT(0x98d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02B7
        gbc.setState(0x1da1, 0xd71e, 0x1210, 0x9626, 0xf841, 0x1971, 0x0, 0x1);
        gbc.writeMem(0x1da1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xd71e, gbc.sp());
        EXPECT(0x1da3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02B8
        gbc.setState(0xb692, 0x73d3, 0x6490, 0x158f, 0x6e94, 0xbf80, 0x0, 0x1);
        gbc.writeMem(0xb692, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x73d3, gbc.sp());
        EXPECT(0xb694, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb692));
        EXPECT(0x15, gbc.readMem(0xb693));
        // CB 15 02B9
        gbc.setState(0x1e26, 0x904e, 0x2040, 0xed15, 0xff9c, 0x8d78, 0x1, 0x0);
        gbc.writeMem(0x1e26, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x904e, gbc.sp());
        EXPECT(0x1e28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02BA
        gbc.setState(0x8a4, 0xe3af, 0xf7e0, 0xa175, 0xe1db, 0x4fdb, 0x1, 0x1);
        gbc.writeMem(0x8a4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xe3af, gbc.sp());
        EXPECT(0x8a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02BB
        gbc.setState(0x9a77, 0xbca3, 0x53c0, 0xe05f, 0x4d85, 0xdf6e, 0x1, 0x1);
        gbc.writeMem(0x9a77, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xbca3, gbc.sp());
        EXPECT(0x9a79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a77));
        EXPECT(0x15, gbc.readMem(0x9a78));
        // CB 15 02BC
        gbc.setState(0x204e, 0x5d09, 0xe620, 0xe2c4, 0x7fde, 0xa399, 0x0, 0x1);
        gbc.writeMem(0x204e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x5d09, gbc.sp());
        EXPECT(0x2050, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02BD
        gbc.setState(0xdd92, 0x7cdf, 0x59b0, 0x43de, 0x7cc6, 0x9aaa, 0x1, 0x1);
        gbc.writeMem(0xdd92, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x7cdf, gbc.sp());
        EXPECT(0xdd94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd92));
        EXPECT(0x15, gbc.readMem(0xdd93));
        // CB 15 02BE
        gbc.setState(0xbab6, 0xd9ee, 0xf3f0, 0xf83b, 0xd9e2, 0x1b6d, 0x0, 0x0);
        gbc.writeMem(0xbab6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xd9ee, gbc.sp());
        EXPECT(0xbab8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbab6));
        EXPECT(0x15, gbc.readMem(0xbab7));
        // CB 15 02BF
        gbc.setState(0x53d0, 0x51eb, 0x49d0, 0xc56, 0xb533, 0xf5be, 0x1, 0x0);
        gbc.writeMem(0x53d0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x51eb, gbc.sp());
        EXPECT(0x53d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02C0
        gbc.setState(0x861f, 0xb6b, 0x8090, 0x9f67, 0x22bb, 0x23f2, 0x0, 0x1);
        gbc.writeMem(0x861f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xb6b, gbc.sp());
        EXPECT(0x8621, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x861f));
        EXPECT(0x15, gbc.readMem(0x8620));
        // CB 15 02C1
        gbc.setState(0x77b6, 0xd5d0, 0xa350, 0x2f62, 0x8f1b, 0xad38, 0x0, 0x1);
        gbc.writeMem(0x77b6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xd5d0, gbc.sp());
        EXPECT(0x77b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02C2
        gbc.setState(0x9a17, 0x445d, 0xff90, 0x1869, 0xa944, 0xb70, 0x0, 0x0);
        gbc.writeMem(0x9a17, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x445d, gbc.sp());
        EXPECT(0x9a19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a17));
        EXPECT(0x15, gbc.readMem(0x9a18));
        // CB 15 02C3
        gbc.setState(0xe317, 0xee38, 0xc6c0, 0xe99c, 0xaa04, 0xfa44, 0x0, 0x1);
        gbc.writeMem(0xe317, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xee38, gbc.sp());
        EXPECT(0xe319, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe317));
        EXPECT(0x15, gbc.readMem(0xe318));
        // CB 15 02C4
        gbc.setState(0x2d0d, 0x7797, 0x25f0, 0xd015, 0xe59a, 0x4b21, 0x1, 0x0);
        gbc.writeMem(0x2d0d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x7797, gbc.sp());
        EXPECT(0x2d0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02C5
        gbc.setState(0x61da, 0xbec5, 0xbc00, 0xd469, 0xe632, 0xc281, 0x1, 0x1);
        gbc.writeMem(0x61da, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xbec5, gbc.sp());
        EXPECT(0x61dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02C6
        gbc.setState(0xbb94, 0x8130, 0x2aa0, 0x3758, 0xd9b, 0xb4df, 0x0, 0x0);
        gbc.writeMem(0xbb94, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x8130, gbc.sp());
        EXPECT(0xbb96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb94));
        EXPECT(0x15, gbc.readMem(0xbb95));
        // CB 15 02C8
        gbc.setState(0x5cd1, 0x14fe, 0x4f90, 0x103f, 0x38f0, 0x3b26, 0x1, 0x0);
        gbc.writeMem(0x5cd1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x14fe, gbc.sp());
        EXPECT(0x5cd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02C9
        gbc.setState(0x4412, 0x4192, 0x2250, 0x4a8d, 0x9497, 0xa54c, 0x1, 0x1);
        gbc.writeMem(0x4412, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x4192, gbc.sp());
        EXPECT(0x4414, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02CA
        gbc.setState(0x3cd3, 0x18bb, 0x89b0, 0x72a3, 0xded4, 0x9bef, 0x0, 0x1);
        gbc.writeMem(0x3cd3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x18bb, gbc.sp());
        EXPECT(0x3cd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02CB
        gbc.setState(0x11a7, 0xa145, 0xae00, 0x9b7, 0x28ea, 0xd8d3, 0x1, 0x1);
        gbc.writeMem(0x11a7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xa145, gbc.sp());
        EXPECT(0x11a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02CC
        gbc.setState(0x4a98, 0xebec, 0x29e0, 0x3a46, 0x303a, 0x9131, 0x1, 0x0);
        gbc.writeMem(0x4a98, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xebec, gbc.sp());
        EXPECT(0x4a9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02CD
        gbc.setState(0x1ff4, 0x78dd, 0x7920, 0x9ebe, 0x8bd1, 0xae4, 0x1, 0x1);
        gbc.writeMem(0x1ff4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x78dd, gbc.sp());
        EXPECT(0x1ff6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02CF
        gbc.setState(0xfc4, 0xc2a5, 0x4860, 0xcfd8, 0x5afe, 0x28df, 0x1, 0x1);
        gbc.writeMem(0xfc4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xc2a5, gbc.sp());
        EXPECT(0xfc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02D0
        gbc.setState(0xa3f3, 0x7b44, 0x14b0, 0x1456, 0xebc4, 0xed5d, 0x1, 0x1);
        gbc.writeMem(0xa3f3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x7b44, gbc.sp());
        EXPECT(0xa3f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3f3));
        EXPECT(0x15, gbc.readMem(0xa3f4));
        // CB 15 02D1
        gbc.setState(0x8dde, 0x7e22, 0xc840, 0x6372, 0xc088, 0x5397, 0x1, 0x0);
        gbc.writeMem(0x8dde, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x7e22, gbc.sp());
        EXPECT(0x8de0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dde));
        EXPECT(0x15, gbc.readMem(0x8ddf));
        // CB 15 02D2
        gbc.setState(0xbd8f, 0x4592, 0xee70, 0x469c, 0x6419, 0xa5d7, 0x0, 0x1);
        gbc.writeMem(0xbd8f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x4592, gbc.sp());
        EXPECT(0xbd91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd8f));
        EXPECT(0x15, gbc.readMem(0xbd90));
        // CB 15 02D3
        gbc.setState(0x63ce, 0x5292, 0x83b0, 0xc3cc, 0x9f14, 0x5929, 0x0, 0x1);
        gbc.writeMem(0x63ce, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x5292, gbc.sp());
        EXPECT(0x63d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02D4
        gbc.setState(0xd27a, 0x785, 0xd1d0, 0xb7f8, 0xa208, 0x5e6b, 0x0, 0x0);
        gbc.writeMem(0xd27a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x785, gbc.sp());
        EXPECT(0xd27c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd27a));
        EXPECT(0x15, gbc.readMem(0xd27b));
        // CB 15 02D5
        gbc.setState(0x5de0, 0xe5, 0xa10, 0xfde4, 0x145c, 0x8f0c, 0x1, 0x0);
        gbc.writeMem(0x5de0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xe5, gbc.sp());
        EXPECT(0x5de2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02D6
        gbc.setState(0xb0f8, 0x3b55, 0xe320, 0x8151, 0xdf03, 0x1d78, 0x0, 0x0);
        gbc.writeMem(0xb0f8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x3b55, gbc.sp());
        EXPECT(0xb0fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0f8));
        EXPECT(0x15, gbc.readMem(0xb0f9));
        // CB 15 02D7
        gbc.setState(0xe42c, 0xf882, 0x1240, 0x6160, 0xe366, 0x440c, 0x1, 0x1);
        gbc.writeMem(0xe42c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xf882, gbc.sp());
        EXPECT(0xe42e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe42c));
        EXPECT(0x15, gbc.readMem(0xe42d));
        // CB 15 02D8
        gbc.setState(0x3f0, 0xfe2e, 0xd0b0, 0xdebf, 0xd0da, 0x3b15, 0x1, 0x0);
        gbc.writeMem(0x3f0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xfe2e, gbc.sp());
        EXPECT(0x3f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02D9
        gbc.setState(0x53, 0x7702, 0xd660, 0x364f, 0x33e9, 0x240f, 0x1, 0x1);
        gbc.writeMem(0x53, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x7702, gbc.sp());
        EXPECT(0x55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02DA
        gbc.setState(0xa491, 0xc7fa, 0xb450, 0xe518, 0xb494, 0xbc0f, 0x1, 0x1);
        gbc.writeMem(0xa491, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xc7fa, gbc.sp());
        EXPECT(0xa493, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa491));
        EXPECT(0x15, gbc.readMem(0xa492));
        // CB 15 02DB
        gbc.setState(0x7676, 0x362b, 0x9af0, 0x152c, 0x326a, 0x9c7e, 0x1, 0x1);
        gbc.writeMem(0x7676, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x362b, gbc.sp());
        EXPECT(0x7678, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02DC
        gbc.setState(0xab0a, 0xd7ff, 0x3e60, 0xe2aa, 0xe872, 0x1d8e, 0x0, 0x0);
        gbc.writeMem(0xab0a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xd7ff, gbc.sp());
        EXPECT(0xab0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab0a));
        EXPECT(0x15, gbc.readMem(0xab0b));
        // CB 15 02DD
        gbc.setState(0x4143, 0x6ea6, 0xcf00, 0x401c, 0x86a4, 0x724b, 0x1, 0x1);
        gbc.writeMem(0x4143, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x6ea6, gbc.sp());
        EXPECT(0x4145, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02DE
        gbc.setState(0x1d19, 0x62c, 0xd2c0, 0x312c, 0x4d94, 0x80ac, 0x0, 0x0);
        gbc.writeMem(0x1d19, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x62c, gbc.sp());
        EXPECT(0x1d1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02DF
        gbc.setState(0x9621, 0xf3d, 0x5460, 0x58fd, 0x451f, 0xaf22, 0x0, 0x1);
        gbc.writeMem(0x9621, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xf3d, gbc.sp());
        EXPECT(0x9623, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9621));
        EXPECT(0x15, gbc.readMem(0x9622));
        // CB 15 02E0
        gbc.setState(0xe6c8, 0xdfdc, 0xecd0, 0x9861, 0x4423, 0x145b, 0x1, 0x1);
        gbc.writeMem(0xe6c8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xdfdc, gbc.sp());
        EXPECT(0xe6ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6c8));
        EXPECT(0x15, gbc.readMem(0xe6c9));
        // CB 15 02E1
        gbc.setState(0xe643, 0x1b23, 0x67e0, 0xe37a, 0x721, 0xa177, 0x0, 0x0);
        gbc.writeMem(0xe643, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x1b23, gbc.sp());
        EXPECT(0xe645, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe643));
        EXPECT(0x15, gbc.readMem(0xe644));
        // CB 15 02E2
        gbc.setState(0xea2f, 0x1220, 0x9e20, 0x22bc, 0x4cab, 0x7c9d, 0x1, 0x1);
        gbc.writeMem(0xea2f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x1220, gbc.sp());
        EXPECT(0xea31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea2f));
        EXPECT(0x15, gbc.readMem(0xea30));
        // CB 15 02E3
        gbc.setState(0x67d6, 0x5506, 0x93f0, 0x63d0, 0xec8f, 0x127e, 0x1, 0x1);
        gbc.writeMem(0x67d6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x5506, gbc.sp());
        EXPECT(0x67d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02E4
        gbc.setState(0xdcd, 0x2f05, 0x2830, 0x93a7, 0x86f4, 0xb7c7, 0x1, 0x1);
        gbc.writeMem(0xdcd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x2f05, gbc.sp());
        EXPECT(0xdcf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02E5
        gbc.setState(0x85d8, 0x93ce, 0x850, 0x3033, 0xe786, 0xe4a7, 0x0, 0x0);
        gbc.writeMem(0x85d8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x93ce, gbc.sp());
        EXPECT(0x85da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85d8));
        EXPECT(0x15, gbc.readMem(0x85d9));
        // CB 15 02E6
        gbc.setState(0x33f8, 0xfdbf, 0x5f50, 0x9368, 0x4d23, 0x9b29, 0x1, 0x0);
        gbc.writeMem(0x33f8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xfdbf, gbc.sp());
        EXPECT(0x33fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02E7
        gbc.setState(0x27f5, 0xe3b8, 0xfad0, 0x40de, 0x714, 0xc9ae, 0x0, 0x0);
        gbc.writeMem(0x27f5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xe3b8, gbc.sp());
        EXPECT(0x27f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02E8
        gbc.setState(0x2ba8, 0x20f0, 0xccb0, 0x73aa, 0x689e, 0x9ed3, 0x0, 0x0);
        gbc.writeMem(0x2ba8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x20f0, gbc.sp());
        EXPECT(0x2baa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02E9
        gbc.setState(0xc5bc, 0x9350, 0x2e30, 0x8693, 0xde90, 0x7c1b, 0x0, 0x0);
        gbc.writeMem(0xc5bc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x9350, gbc.sp());
        EXPECT(0xc5be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5bc));
        EXPECT(0x15, gbc.readMem(0xc5bd));
        // CB 15 02EA
        gbc.setState(0x1ade, 0xf304, 0xdc30, 0x2ac5, 0xc4ed, 0xb625, 0x0, 0x1);
        gbc.writeMem(0x1ade, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xf304, gbc.sp());
        EXPECT(0x1ae0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02EB
        gbc.setState(0x4b9e, 0x11f6, 0xc400, 0xe88f, 0xea80, 0xb099, 0x1, 0x1);
        gbc.writeMem(0x4b9e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x11f6, gbc.sp());
        EXPECT(0x4ba0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02EC
        gbc.setState(0x52a4, 0xe42d, 0x9800, 0x9a96, 0xaf, 0x7866, 0x0, 0x1);
        gbc.writeMem(0x52a4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xe42d, gbc.sp());
        EXPECT(0x52a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02ED
        gbc.setState(0x151f, 0x1c09, 0xd0, 0x61c0, 0xa7f6, 0xadd, 0x0, 0x1);
        gbc.writeMem(0x151f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x1c09, gbc.sp());
        EXPECT(0x1521, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02EE
        gbc.setState(0x5394, 0x529e, 0xe810, 0x7d56, 0x1b43, 0xde7a, 0x0, 0x0);
        gbc.writeMem(0x5394, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x529e, gbc.sp());
        EXPECT(0x5396, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02F0
        gbc.setState(0x5bc4, 0x3f83, 0x4510, 0x5e91, 0x6871, 0x1224, 0x1, 0x1);
        gbc.writeMem(0x5bc4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x3f83, gbc.sp());
        EXPECT(0x5bc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02F1
        gbc.setState(0x1939, 0x3aa2, 0xf4e0, 0xc33a, 0x153e, 0xbc8e, 0x0, 0x1);
        gbc.writeMem(0x1939, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x3aa2, gbc.sp());
        EXPECT(0x193b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02F2
        gbc.setState(0x11f1, 0xa9a4, 0x5590, 0xc07, 0xa536, 0x7cd1, 0x0, 0x1);
        gbc.writeMem(0x11f1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xa9a4, gbc.sp());
        EXPECT(0x11f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02F3
        gbc.setState(0x564e, 0x81f3, 0x37a0, 0xed5b, 0x667f, 0x2b1b, 0x0, 0x1);
        gbc.writeMem(0x564e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x81f3, gbc.sp());
        EXPECT(0x5650, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02F4
        gbc.setState(0x3f21, 0x3da9, 0xac80, 0x7c0a, 0xf0b1, 0xbb0, 0x1, 0x0);
        gbc.writeMem(0x3f21, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x3da9, gbc.sp());
        EXPECT(0x3f23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02F5
        gbc.setState(0x7a18, 0xe09e, 0xdcd0, 0x8fd6, 0xcbf5, 0x5d83, 0x1, 0x0);
        gbc.writeMem(0x7a18, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xe09e, gbc.sp());
        EXPECT(0x7a1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02F6
        gbc.setState(0x571a, 0x1f88, 0xfc80, 0x177b, 0x97c2, 0x7f23, 0x1, 0x0);
        gbc.writeMem(0x571a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x1f88, gbc.sp());
        EXPECT(0x571c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02F7
        gbc.setState(0x3310, 0xc18b, 0xf5c0, 0x32c2, 0xff7, 0xa777, 0x0, 0x1);
        gbc.writeMem(0x3310, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xc18b, gbc.sp());
        EXPECT(0x3312, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02F8
        gbc.setState(0xc13c, 0xabf5, 0xab80, 0xa8f9, 0xed34, 0x27fb, 0x1, 0x0);
        gbc.writeMem(0xc13c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xabf5, gbc.sp());
        EXPECT(0xc13e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc13c));
        EXPECT(0x15, gbc.readMem(0xc13d));
        // CB 15 02F9
        gbc.setState(0x9799, 0xc96f, 0x3150, 0x9ecc, 0xe7c7, 0xef7f, 0x0, 0x0);
        gbc.writeMem(0x9799, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xc96f, gbc.sp());
        EXPECT(0x979b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9799));
        EXPECT(0x15, gbc.readMem(0x979a));
        // CB 15 02FA
        gbc.setState(0x1c12, 0x99b9, 0x5550, 0x4a9e, 0xae1b, 0xc2f2, 0x0, 0x1);
        gbc.writeMem(0x1c12, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x99b9, gbc.sp());
        EXPECT(0x1c14, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 02FC
        gbc.setState(0x7a0a, 0x2e4, 0x14f0, 0x1f49, 0x374b, 0xad7e, 0x0, 0x1);
        gbc.writeMem(0x7a0a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x2e4, gbc.sp());
        EXPECT(0x7a0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02FD
        gbc.setState(0xbff, 0xcfd8, 0xe020, 0x3aa3, 0x3905, 0x164a, 0x1, 0x0);
        gbc.writeMem(0xbff, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xcfd8, gbc.sp());
        EXPECT(0xc01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 02FE
        gbc.setState(0xc78f, 0x1bd2, 0x5140, 0x1785, 0x4be0, 0x7e4a, 0x1, 0x0);
        gbc.writeMem(0xc78f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x1bd2, gbc.sp());
        EXPECT(0xc791, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc78f));
        EXPECT(0x15, gbc.readMem(0xc790));
        // CB 15 02FF
        gbc.setState(0xc1c1, 0x9379, 0x5690, 0x938f, 0x124d, 0x9363, 0x1, 0x1);
        gbc.writeMem(0xc1c1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x9379, gbc.sp());
        EXPECT(0xc1c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1c1));
        EXPECT(0x15, gbc.readMem(0xc1c2));
        // CB 15 0300
        gbc.setState(0xe0a1, 0x3761, 0x61c0, 0x16df, 0xf150, 0x7afd, 0x0, 0x0);
        gbc.writeMem(0xe0a1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x3761, gbc.sp());
        EXPECT(0xe0a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0a1));
        EXPECT(0x15, gbc.readMem(0xe0a2));
        // CB 15 0301
        gbc.setState(0x58ef, 0xfca9, 0x4bc0, 0x6a4b, 0x646d, 0x217, 0x0, 0x0);
        gbc.writeMem(0x58ef, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xfca9, gbc.sp());
        EXPECT(0x58f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0302
        gbc.setState(0x73bd, 0xbf6b, 0x60c0, 0x1be0, 0x4fa8, 0xde, 0x0, 0x1);
        gbc.writeMem(0x73bd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xbf6b, gbc.sp());
        EXPECT(0x73bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0303
        gbc.setState(0xde4f, 0x4f1e, 0xd610, 0xb5da, 0xca5f, 0x2931, 0x0, 0x1);
        gbc.writeMem(0xde4f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x4f1e, gbc.sp());
        EXPECT(0xde51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde4f));
        EXPECT(0x15, gbc.readMem(0xde50));
        // CB 15 0304
        gbc.setState(0xe9ba, 0x3454, 0x1dc0, 0x2be0, 0x2693, 0x4ced, 0x0, 0x0);
        gbc.writeMem(0xe9ba, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x3454, gbc.sp());
        EXPECT(0xe9bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9ba));
        EXPECT(0x15, gbc.readMem(0xe9bb));
        // CB 15 0305
        gbc.setState(0xa5e5, 0xf59a, 0xf220, 0x3473, 0xfe35, 0xcfc4, 0x0, 0x1);
        gbc.writeMem(0xa5e5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xf59a, gbc.sp());
        EXPECT(0xa5e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5e5));
        EXPECT(0x15, gbc.readMem(0xa5e6));
        // CB 15 0306
        gbc.setState(0x17db, 0xf8f, 0x9530, 0xc34b, 0x51b9, 0x9354, 0x1, 0x1);
        gbc.writeMem(0x17db, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xf8f, gbc.sp());
        EXPECT(0x17dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0307
        gbc.setState(0xc84d, 0x94a0, 0x2ff0, 0x2bc8, 0x922f, 0x9ddd, 0x0, 0x1);
        gbc.writeMem(0xc84d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x94a0, gbc.sp());
        EXPECT(0xc84f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc84d));
        EXPECT(0x15, gbc.readMem(0xc84e));
        // CB 15 0308
        gbc.setState(0x8e59, 0x817d, 0xc10, 0xf920, 0xe397, 0x334b, 0x1, 0x0);
        gbc.writeMem(0x8e59, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x817d, gbc.sp());
        EXPECT(0x8e5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e59));
        EXPECT(0x15, gbc.readMem(0x8e5a));
        // CB 15 0309
        gbc.setState(0xd7be, 0xce2d, 0x6520, 0xc8b3, 0xc226, 0x78cf, 0x0, 0x1);
        gbc.writeMem(0xd7be, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xce2d, gbc.sp());
        EXPECT(0xd7c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7be));
        EXPECT(0x15, gbc.readMem(0xd7bf));
        // CB 15 030A
        gbc.setState(0x77c6, 0xaede, 0xf70, 0x20cd, 0x7c1d, 0xa811, 0x1, 0x0);
        gbc.writeMem(0x77c6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xaede, gbc.sp());
        EXPECT(0x77c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 030B
        gbc.setState(0xeb1c, 0xc993, 0x7690, 0xaeda, 0x1d79, 0x6207, 0x0, 0x1);
        gbc.writeMem(0xeb1c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xc993, gbc.sp());
        EXPECT(0xeb1e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb1c));
        EXPECT(0x15, gbc.readMem(0xeb1d));
        // CB 15 030D
        gbc.setState(0x2f29, 0x5f91, 0x41f0, 0xcea9, 0x19d3, 0xd62f, 0x1, 0x0);
        gbc.writeMem(0x2f29, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x5f91, gbc.sp());
        EXPECT(0x2f2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 030E
        gbc.setState(0xcff1, 0x356f, 0xb70, 0x437e, 0xa951, 0xe2d9, 0x0, 0x1);
        gbc.writeMem(0xcff1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x356f, gbc.sp());
        EXPECT(0xcff3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcff1));
        EXPECT(0x15, gbc.readMem(0xcff2));
        // CB 15 030F
        gbc.setState(0x85ad, 0xd4cf, 0xd640, 0x50f0, 0x6163, 0xdded, 0x0, 0x1);
        gbc.writeMem(0x85ad, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xd4cf, gbc.sp());
        EXPECT(0x85af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85ad));
        EXPECT(0x15, gbc.readMem(0x85ae));
        // CB 15 0310
        gbc.setState(0xaf87, 0xe2cb, 0x6060, 0xba4d, 0xd2c3, 0xa79a, 0x0, 0x1);
        gbc.writeMem(0xaf87, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xe2cb, gbc.sp());
        EXPECT(0xaf89, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf87));
        EXPECT(0x15, gbc.readMem(0xaf88));
        // CB 15 0311
        gbc.setState(0x8b2a, 0xaa3a, 0xbcb0, 0xf5d, 0xd9b2, 0xa97b, 0x1, 0x1);
        gbc.writeMem(0x8b2a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xaa3a, gbc.sp());
        EXPECT(0x8b2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b2a));
        EXPECT(0x15, gbc.readMem(0x8b2b));
        // CB 15 0312
        gbc.setState(0xb67e, 0x809a, 0x7db0, 0x77c, 0x2e, 0x13ff, 0x0, 0x0);
        gbc.writeMem(0xb67e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x809a, gbc.sp());
        EXPECT(0xb680, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb67e));
        EXPECT(0x15, gbc.readMem(0xb67f));
        // CB 15 0313
        gbc.setState(0xb69a, 0xc585, 0xdd00, 0xc464, 0xe048, 0x4d00, 0x1, 0x0);
        gbc.writeMem(0xb69a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xc585, gbc.sp());
        EXPECT(0xb69c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb69a));
        EXPECT(0x15, gbc.readMem(0xb69b));
        // CB 15 0314
        gbc.setState(0xba7, 0xe5ba, 0x3dd0, 0xc2cb, 0x287c, 0x7fd1, 0x0, 0x0);
        gbc.writeMem(0xba7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xe5ba, gbc.sp());
        EXPECT(0xba9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0315
        gbc.setState(0x23c7, 0x3e59, 0xf770, 0xe257, 0xe7ce, 0x5672, 0x1, 0x0);
        gbc.writeMem(0x23c7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x3e59, gbc.sp());
        EXPECT(0x23c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0316
        gbc.setState(0x683d, 0xeaef, 0xbe30, 0xc27b, 0x8425, 0x195a, 0x0, 0x0);
        gbc.writeMem(0x683d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xeaef, gbc.sp());
        EXPECT(0x683f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0317
        gbc.setState(0x83f7, 0x60fc, 0x7fc0, 0xe291, 0x9f08, 0x8add, 0x0, 0x0);
        gbc.writeMem(0x83f7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x60fc, gbc.sp());
        EXPECT(0x83f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83f7));
        EXPECT(0x15, gbc.readMem(0x83f8));
        // CB 15 0318
        gbc.setState(0xb75d, 0x4a1d, 0xd0, 0x79ed, 0x9725, 0x30a9, 0x0, 0x1);
        gbc.writeMem(0xb75d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x4a1d, gbc.sp());
        EXPECT(0xb75f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb75d));
        EXPECT(0x15, gbc.readMem(0xb75e));
        // CB 15 0319
        gbc.setState(0xd899, 0x8f7b, 0x8040, 0xdc8f, 0xc8e1, 0xf004, 0x0, 0x1);
        gbc.writeMem(0xd899, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x8f7b, gbc.sp());
        EXPECT(0xd89b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd899));
        EXPECT(0x15, gbc.readMem(0xd89a));
        // CB 15 031A
        gbc.setState(0x26d8, 0x82ad, 0x36a0, 0x8362, 0x590d, 0xb58e, 0x1, 0x1);
        gbc.writeMem(0x26d8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x82ad, gbc.sp());
        EXPECT(0x26da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 031B
        gbc.setState(0xa22e, 0x39d9, 0x20d0, 0xe04, 0x9881, 0xd4ae, 0x0, 0x0);
        gbc.writeMem(0xa22e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x39d9, gbc.sp());
        EXPECT(0xa230, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa22e));
        EXPECT(0x15, gbc.readMem(0xa22f));
        // CB 15 031C
        gbc.setState(0x159, 0xbdf0, 0x1310, 0xef06, 0x89b, 0xcc65, 0x0, 0x0);
        gbc.writeMem(0x159, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xbdf0, gbc.sp());
        EXPECT(0x15b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 031D
        gbc.setState(0x9feb, 0xae29, 0x7fc0, 0x3be8, 0x2209, 0xc39e, 0x1, 0x0);
        gbc.writeMem(0x9feb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xae29, gbc.sp());
        EXPECT(0x9fed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9feb));
        EXPECT(0x15, gbc.readMem(0x9fec));
        // CB 15 031E
        gbc.setState(0xa65c, 0x13d2, 0x70d0, 0xeb1b, 0x38f4, 0x5f91, 0x0, 0x1);
        gbc.writeMem(0xa65c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x13d2, gbc.sp());
        EXPECT(0xa65e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa65c));
        EXPECT(0x15, gbc.readMem(0xa65d));
        // CB 15 031F
        gbc.setState(0x6e79, 0x3ba, 0xc480, 0x8c1f, 0x9e0a, 0x7981, 0x0, 0x1);
        gbc.writeMem(0x6e79, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x3ba, gbc.sp());
        EXPECT(0x6e7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0320
        gbc.setState(0x7ff8, 0x9dca, 0xf630, 0x17e5, 0x3024, 0x5317, 0x0, 0x1);
        gbc.writeMem(0x7ff8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x9dca, gbc.sp());
        EXPECT(0x7ffa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0321
        gbc.setState(0xc42d, 0x19d4, 0xc4b0, 0xd459, 0xff06, 0x2bdc, 0x1, 0x0);
        gbc.writeMem(0xc42d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x19d4, gbc.sp());
        EXPECT(0xc42f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc42d));
        EXPECT(0x15, gbc.readMem(0xc42e));
        // CB 15 0322
        gbc.setState(0x8bcf, 0x2607, 0x3130, 0x8257, 0xdc3f, 0xd4fd, 0x0, 0x0);
        gbc.writeMem(0x8bcf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x2607, gbc.sp());
        EXPECT(0x8bd1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bcf));
        EXPECT(0x15, gbc.readMem(0x8bd0));
        // CB 15 0323
        gbc.setState(0xc701, 0x3192, 0x18a0, 0xed8, 0xe7bc, 0x45ef, 0x0, 0x0);
        gbc.writeMem(0xc701, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x3192, gbc.sp());
        EXPECT(0xc703, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc701));
        EXPECT(0x15, gbc.readMem(0xc702));
        // CB 15 0324
        gbc.setState(0xbaf6, 0xc9c0, 0x4bd0, 0x5df, 0x2154, 0x29b6, 0x0, 0x1);
        gbc.writeMem(0xbaf6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xc9c0, gbc.sp());
        EXPECT(0xbaf8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaf6));
        EXPECT(0x15, gbc.readMem(0xbaf7));
        // CB 15 0325
        gbc.setState(0x8ece, 0xcfcb, 0x6b0, 0xbeda, 0x607d, 0x6e, 0x0, 0x0);
        gbc.writeMem(0x8ece, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xcfcb, gbc.sp());
        EXPECT(0x8ed0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ece));
        EXPECT(0x15, gbc.readMem(0x8ecf));
        // CB 15 0326
        gbc.setState(0x9da1, 0x756f, 0x3bf0, 0xab41, 0xb57, 0x854b, 0x0, 0x1);
        gbc.writeMem(0x9da1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x756f, gbc.sp());
        EXPECT(0x9da3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9da1));
        EXPECT(0x15, gbc.readMem(0x9da2));
        // CB 15 0327
        gbc.setState(0xadf6, 0x1732, 0xbb80, 0x6882, 0x9533, 0x3cf2, 0x1, 0x1);
        gbc.writeMem(0xadf6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x1732, gbc.sp());
        EXPECT(0xadf8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadf6));
        EXPECT(0x15, gbc.readMem(0xadf7));
        // CB 15 0328
        gbc.setState(0x21db, 0x6361, 0x200, 0xce9e, 0xfc73, 0x2a8c, 0x1, 0x1);
        gbc.writeMem(0x21db, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x6361, gbc.sp());
        EXPECT(0x21dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0329
        gbc.setState(0x15e7, 0x4a8c, 0xa050, 0xd118, 0x1248, 0xad98, 0x1, 0x1);
        gbc.writeMem(0x15e7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x4a8c, gbc.sp());
        EXPECT(0x15e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 032A
        gbc.setState(0x3688, 0xe46f, 0xab00, 0xf2a2, 0x3077, 0x7963, 0x1, 0x1);
        gbc.writeMem(0x3688, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xe46f, gbc.sp());
        EXPECT(0x368a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 032B
        gbc.setState(0xe97e, 0xa20c, 0xa6e0, 0x460c, 0x6e09, 0xe2e1, 0x0, 0x0);
        gbc.writeMem(0xe97e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xa20c, gbc.sp());
        EXPECT(0xe980, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe97e));
        EXPECT(0x15, gbc.readMem(0xe97f));
        // CB 15 032C
        gbc.setState(0x227c, 0x93ad, 0x7b40, 0x26f6, 0xe1ac, 0xa957, 0x1, 0x0);
        gbc.writeMem(0x227c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x93ad, gbc.sp());
        EXPECT(0x227e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 032D
        gbc.setState(0x8368, 0x855e, 0xc2e0, 0xc9cd, 0xff90, 0x1869, 0x0, 0x1);
        gbc.writeMem(0x8368, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x855e, gbc.sp());
        EXPECT(0x836a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8368));
        EXPECT(0x15, gbc.readMem(0x8369));
        // CB 15 032E
        gbc.setState(0x4066, 0x1512, 0x8c0, 0xb37, 0x20c2, 0x2ec6, 0x0, 0x0);
        gbc.writeMem(0x4066, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x1512, gbc.sp());
        EXPECT(0x4068, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 032F
        gbc.setState(0x2f6b, 0xc46a, 0xb2b0, 0x7476, 0xe27d, 0x329d, 0x1, 0x0);
        gbc.writeMem(0x2f6b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xc46a, gbc.sp());
        EXPECT(0x2f6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0330
        gbc.setState(0xe979, 0xda, 0xdad0, 0x39d2, 0x2ea, 0xaa72, 0x1, 0x0);
        gbc.writeMem(0xe979, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xda, gbc.sp());
        EXPECT(0xe97b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe979));
        EXPECT(0x15, gbc.readMem(0xe97a));
        // CB 15 0331
        gbc.setState(0xc2f3, 0x809c, 0x4400, 0x266f, 0x3aa1, 0xbb52, 0x0, 0x1);
        gbc.writeMem(0xc2f3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x809c, gbc.sp());
        EXPECT(0xc2f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2f3));
        EXPECT(0x15, gbc.readMem(0xc2f4));
        // CB 15 0332
        gbc.setState(0x5078, 0xe8b4, 0x36c0, 0x7608, 0xe8d0, 0xba0b, 0x0, 0x1);
        gbc.writeMem(0x5078, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xe8b4, gbc.sp());
        EXPECT(0x507a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0333
        gbc.setState(0xbddb, 0xd0e9, 0x2680, 0x4a50, 0xbad2, 0x77f7, 0x1, 0x1);
        gbc.writeMem(0xbddb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xd0e9, gbc.sp());
        EXPECT(0xbddd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbddb));
        EXPECT(0x15, gbc.readMem(0xbddc));
        // CB 15 0334
        gbc.setState(0x98a3, 0xd5f4, 0xea50, 0x52de, 0x6451, 0x431, 0x1, 0x0);
        gbc.writeMem(0x98a3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xd5f4, gbc.sp());
        EXPECT(0x98a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98a3));
        EXPECT(0x15, gbc.readMem(0x98a4));
        // CB 15 0335
        gbc.setState(0xc8d5, 0x8c7a, 0x1860, 0x581c, 0x3a4a, 0x5bc2, 0x1, 0x0);
        gbc.writeMem(0xc8d5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x8c7a, gbc.sp());
        EXPECT(0xc8d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8d5));
        EXPECT(0x15, gbc.readMem(0xc8d6));
        // CB 15 0336
        gbc.setState(0x1ddd, 0x5d47, 0x9b0, 0xb3fc, 0x8950, 0xcdda, 0x1, 0x1);
        gbc.writeMem(0x1ddd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x5d47, gbc.sp());
        EXPECT(0x1ddf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0337
        gbc.setState(0x9e95, 0x6290, 0xe5f0, 0x4981, 0x76d9, 0xda9f, 0x0, 0x0);
        gbc.writeMem(0x9e95, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x6290, gbc.sp());
        EXPECT(0x9e97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e95));
        EXPECT(0x15, gbc.readMem(0x9e96));
        // CB 15 0338
        gbc.setState(0xdf34, 0x466e, 0x2690, 0xc1f8, 0xf3cb, 0x7354, 0x0, 0x1);
        gbc.writeMem(0xdf34, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x466e, gbc.sp());
        EXPECT(0xdf36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf34));
        EXPECT(0x15, gbc.readMem(0xdf35));
        // CB 15 0339
        gbc.setState(0x6464, 0x1362, 0x5720, 0x8601, 0x53d1, 0x63d0, 0x0, 0x1);
        gbc.writeMem(0x6464, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x1362, gbc.sp());
        EXPECT(0x6466, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 033A
        gbc.setState(0xd72b, 0xa349, 0x7050, 0x26f1, 0x1114, 0x86d0, 0x1, 0x0);
        gbc.writeMem(0xd72b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xa349, gbc.sp());
        EXPECT(0xd72d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd72b));
        EXPECT(0x15, gbc.readMem(0xd72c));
        // CB 15 033B
        gbc.setState(0x5e69, 0x6d08, 0xbf50, 0x84bc, 0x7cb2, 0x39c7, 0x1, 0x1);
        gbc.writeMem(0x5e69, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x6d08, gbc.sp());
        EXPECT(0x5e6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 033C
        gbc.setState(0x20fd, 0xc1fb, 0xe410, 0x4973, 0xd134, 0xa5a4, 0x1, 0x0);
        gbc.writeMem(0x20fd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xc1fb, gbc.sp());
        EXPECT(0x20ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 033D
        gbc.setState(0x1796, 0xd1b6, 0x3c50, 0x5650, 0x30b1, 0x43d3, 0x1, 0x0);
        gbc.writeMem(0x1796, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xd1b6, gbc.sp());
        EXPECT(0x1798, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 033E
        gbc.setState(0x94e7, 0x7007, 0x8990, 0x4a37, 0x180f, 0xabd, 0x1, 0x0);
        gbc.writeMem(0x94e7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x7007, gbc.sp());
        EXPECT(0x94e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94e7));
        EXPECT(0x15, gbc.readMem(0x94e8));
        // CB 15 033F
        gbc.setState(0xc8a, 0x7045, 0xf060, 0x832c, 0xafab, 0xb976, 0x1, 0x0);
        gbc.writeMem(0xc8a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x7045, gbc.sp());
        EXPECT(0xc8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0340
        gbc.setState(0x5f47, 0x7fa6, 0x1d20, 0x34d9, 0xeb65, 0x8a37, 0x0, 0x0);
        gbc.writeMem(0x5f47, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x7fa6, gbc.sp());
        EXPECT(0x5f49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0341
        gbc.setState(0x8171, 0x82cc, 0x62c0, 0x785f, 0xa3ef, 0x4bac, 0x0, 0x1);
        gbc.writeMem(0x8171, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x82cc, gbc.sp());
        EXPECT(0x8173, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8171));
        EXPECT(0x15, gbc.readMem(0x8172));
        // CB 15 0343
        gbc.setState(0xef59, 0x722d, 0x7f40, 0x2ab9, 0x4e30, 0x394a, 0x0, 0x0);
        gbc.writeMem(0xef59, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x722d, gbc.sp());
        EXPECT(0xef5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef59));
        EXPECT(0x15, gbc.readMem(0xef5a));
        // CB 15 0344
        gbc.setState(0x238b, 0xef91, 0xf170, 0x2e41, 0x660c, 0x3b76, 0x0, 0x1);
        gbc.writeMem(0x238b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xef91, gbc.sp());
        EXPECT(0x238d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0345
        gbc.setState(0xb371, 0xfb41, 0x6210, 0x7061, 0x33ba, 0xfe58, 0x0, 0x1);
        gbc.writeMem(0xb371, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xfb41, gbc.sp());
        EXPECT(0xb373, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb371));
        EXPECT(0x15, gbc.readMem(0xb372));
        // CB 15 0346
        gbc.setState(0x1702, 0x8d80, 0xaa40, 0xbdfc, 0x550e, 0x8620, 0x1, 0x1);
        gbc.writeMem(0x1702, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x8d80, gbc.sp());
        EXPECT(0x1704, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0348
        gbc.setState(0x6290, 0x4069, 0xc5b0, 0xc20, 0xc205, 0xecbb, 0x1, 0x0);
        gbc.writeMem(0x6290, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x4069, gbc.sp());
        EXPECT(0x6292, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0349
        gbc.setState(0x4f8b, 0xcbb1, 0xf810, 0xc303, 0x3052, 0x5019, 0x0, 0x1);
        gbc.writeMem(0x4f8b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xcbb1, gbc.sp());
        EXPECT(0x4f8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 034A
        gbc.setState(0x3ddf, 0x15fa, 0xd6e0, 0x7f34, 0x3ea8, 0x7340, 0x0, 0x0);
        gbc.writeMem(0x3ddf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x15fa, gbc.sp());
        EXPECT(0x3de1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 034B
        gbc.setState(0x2abb, 0x6c55, 0xaa30, 0x91f6, 0x37ab, 0x7210, 0x1, 0x0);
        gbc.writeMem(0x2abb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x6c55, gbc.sp());
        EXPECT(0x2abd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 034C
        gbc.setState(0xd757, 0x735, 0x1a0, 0x89ff, 0xef76, 0x5234, 0x0, 0x1);
        gbc.writeMem(0xd757, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x735, gbc.sp());
        EXPECT(0xd759, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd757));
        EXPECT(0x15, gbc.readMem(0xd758));
        // CB 15 034D
        gbc.setState(0x2bf1, 0x8160, 0x98b0, 0x91e4, 0xb441, 0xc7fc, 0x1, 0x0);
        gbc.writeMem(0x2bf1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x8160, gbc.sp());
        EXPECT(0x2bf3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 034E
        gbc.setState(0x63c1, 0x9268, 0xcfb0, 0x36a1, 0xa8dc, 0x431, 0x1, 0x0);
        gbc.writeMem(0x63c1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x9268, gbc.sp());
        EXPECT(0x63c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 034F
        gbc.setState(0x9992, 0xc71d, 0xdb90, 0x5a9c, 0x4d04, 0xcc46, 0x1, 0x0);
        gbc.writeMem(0x9992, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xc71d, gbc.sp());
        EXPECT(0x9994, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9992));
        EXPECT(0x15, gbc.readMem(0x9993));
        // CB 15 0350
        gbc.setState(0x855, 0x7cd1, 0x8d50, 0xe966, 0xff26, 0x1056, 0x0, 0x1);
        gbc.writeMem(0x855, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x7cd1, gbc.sp());
        EXPECT(0x857, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0351
        gbc.setState(0x1da5, 0x4cab, 0xb6e0, 0xc620, 0x4d, 0x93c8, 0x0, 0x1);
        gbc.writeMem(0x1da5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x4cab, gbc.sp());
        EXPECT(0x1da7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0352
        gbc.setState(0x59a0, 0x45dd, 0xb180, 0x6869, 0xf7fc, 0x3257, 0x1, 0x1);
        gbc.writeMem(0x59a0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x45dd, gbc.sp());
        EXPECT(0x59a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0353
        gbc.setState(0x39fb, 0x9f50, 0xe60, 0x6a88, 0x5811, 0x3990, 0x1, 0x1);
        gbc.writeMem(0x39fb, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x9f50, gbc.sp());
        EXPECT(0x39fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0354
        gbc.setState(0xb60a, 0xbf0e, 0xc300, 0xec3, 0x75be, 0x4f63, 0x1, 0x0);
        gbc.writeMem(0xb60a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xbf0e, gbc.sp());
        EXPECT(0xb60c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb60a));
        EXPECT(0x15, gbc.readMem(0xb60b));
        // CB 15 0355
        gbc.setState(0x840e, 0xed6b, 0x9b90, 0x8c7c, 0x78d6, 0xb44c, 0x1, 0x1);
        gbc.writeMem(0x840e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xed6b, gbc.sp());
        EXPECT(0x8410, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x840e));
        EXPECT(0x15, gbc.readMem(0x840f));
        // CB 15 0356
        gbc.setState(0xe056, 0x61d7, 0x160, 0x13f3, 0x492b, 0x1512, 0x0, 0x0);
        gbc.writeMem(0xe056, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x61d7, gbc.sp());
        EXPECT(0xe058, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe056));
        EXPECT(0x15, gbc.readMem(0xe057));
        // CB 15 0357
        gbc.setState(0x9658, 0x3e9a, 0x78a0, 0x2d94, 0xd9d5, 0xcf17, 0x1, 0x1);
        gbc.writeMem(0x9658, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x3e9a, gbc.sp());
        EXPECT(0x965a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9658));
        EXPECT(0x15, gbc.readMem(0x9659));
        // CB 15 0358
        gbc.setState(0xa543, 0xfb6c, 0xe580, 0x4d1f, 0x59f2, 0x6ef, 0x1, 0x0);
        gbc.writeMem(0xa543, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xfb6c, gbc.sp());
        EXPECT(0xa545, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa543));
        EXPECT(0x15, gbc.readMem(0xa544));
        // CB 15 035B
        gbc.setState(0x7b29, 0xdc86, 0x2890, 0xc6eb, 0xfb80, 0x6704, 0x1, 0x1);
        gbc.writeMem(0x7b29, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xdc86, gbc.sp());
        EXPECT(0x7b2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 035C
        gbc.setState(0xd251, 0x66e5, 0xe20, 0xe21f, 0xa7fd, 0xcc3b, 0x1, 0x1);
        gbc.writeMem(0xd251, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x66e5, gbc.sp());
        EXPECT(0xd253, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd251));
        EXPECT(0x15, gbc.readMem(0xd252));
        // CB 15 035D
        gbc.setState(0xec47, 0x56b7, 0x3360, 0x2583, 0x59fe, 0x3185, 0x0, 0x0);
        gbc.writeMem(0xec47, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x56b7, gbc.sp());
        EXPECT(0xec49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec47));
        EXPECT(0x15, gbc.readMem(0xec48));
        // CB 15 035E
        gbc.setState(0xafd5, 0x6456, 0x6700, 0x5335, 0x910f, 0xc3e5, 0x1, 0x0);
        gbc.writeMem(0xafd5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x6456, gbc.sp());
        EXPECT(0xafd7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafd5));
        EXPECT(0x15, gbc.readMem(0xafd6));
        // CB 15 0360
        gbc.setState(0xc481, 0x9d31, 0x6ff0, 0x6f6, 0x53e7, 0x5f88, 0x0, 0x0);
        gbc.writeMem(0xc481, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x9d31, gbc.sp());
        EXPECT(0xc483, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc481));
        EXPECT(0x15, gbc.readMem(0xc482));
        // CB 15 0361
        gbc.setState(0xa8c3, 0xe305, 0x8770, 0x421d, 0x3c61, 0xdf97, 0x0, 0x0);
        gbc.writeMem(0xa8c3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xe305, gbc.sp());
        EXPECT(0xa8c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8c3));
        EXPECT(0x15, gbc.readMem(0xa8c4));
        // CB 15 0362
        gbc.setState(0x84f5, 0x5898, 0xa680, 0xb518, 0xbfaa, 0x4198, 0x1, 0x0);
        gbc.writeMem(0x84f5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x5898, gbc.sp());
        EXPECT(0x84f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84f5));
        EXPECT(0x15, gbc.readMem(0x84f6));
        // CB 15 0363
        gbc.setState(0x8899, 0xf253, 0x4a00, 0xe10a, 0x29df, 0x6f95, 0x0, 0x0);
        gbc.writeMem(0x8899, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xf253, gbc.sp());
        EXPECT(0x889b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8899));
        EXPECT(0x15, gbc.readMem(0x889a));
        // CB 15 0364
        gbc.setState(0xce8a, 0x2aaf, 0x4240, 0x8b8b, 0x6c99, 0xf799, 0x1, 0x0);
        gbc.writeMem(0xce8a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x2aaf, gbc.sp());
        EXPECT(0xce8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce8a));
        EXPECT(0x15, gbc.readMem(0xce8b));
        // CB 15 0365
        gbc.setState(0x830e, 0x7734, 0xc720, 0x8222, 0x27f1, 0x93d4, 0x0, 0x0);
        gbc.writeMem(0x830e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x7734, gbc.sp());
        EXPECT(0x8310, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x830e));
        EXPECT(0x15, gbc.readMem(0x830f));
        // CB 15 0366
        gbc.setState(0x29a7, 0x1027, 0x8420, 0xffc5, 0xea5b, 0xf546, 0x1, 0x0);
        gbc.writeMem(0x29a7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x1027, gbc.sp());
        EXPECT(0x29a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0368
        gbc.setState(0xd9c, 0x88a2, 0x38a0, 0xe8c, 0x9254, 0x9408, 0x0, 0x0);
        gbc.writeMem(0xd9c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x88a2, gbc.sp());
        EXPECT(0xd9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0369
        gbc.setState(0x490c, 0x1c55, 0x7ba0, 0xe2a, 0xe167, 0xcf3f, 0x1, 0x1);
        gbc.writeMem(0x490c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x1c55, gbc.sp());
        EXPECT(0x490e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 036A
        gbc.setState(0x1eee, 0xb1e8, 0x20b0, 0xced9, 0xe889, 0x5d37, 0x0, 0x0);
        gbc.writeMem(0x1eee, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xb1e8, gbc.sp());
        EXPECT(0x1ef0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 036B
        gbc.setState(0xaed2, 0x88df, 0x7850, 0xa361, 0xe845, 0xeee7, 0x1, 0x0);
        gbc.writeMem(0xaed2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x88df, gbc.sp());
        EXPECT(0xaed4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaed2));
        EXPECT(0x15, gbc.readMem(0xaed3));
        // CB 15 036C
        gbc.setState(0x11dc, 0xa9de, 0x6d50, 0x5df8, 0x5ea9, 0x4feb, 0x1, 0x1);
        gbc.writeMem(0x11dc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xa9de, gbc.sp());
        EXPECT(0x11de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 036D
        gbc.setState(0xb602, 0x4d61, 0x5c20, 0xf157, 0xe472, 0x7708, 0x1, 0x0);
        gbc.writeMem(0xb602, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x4d61, gbc.sp());
        EXPECT(0xb604, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb602));
        EXPECT(0x15, gbc.readMem(0xb603));
        // CB 15 036E
        gbc.setState(0x1e79, 0xb4e7, 0x2070, 0x54ad, 0x15ab, 0x5d55, 0x1, 0x1);
        gbc.writeMem(0x1e79, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xb4e7, gbc.sp());
        EXPECT(0x1e7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 036F
        gbc.setState(0x51be, 0xcfe, 0x6730, 0x10c4, 0x8d77, 0x7f56, 0x0, 0x1);
        gbc.writeMem(0x51be, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xcfe, gbc.sp());
        EXPECT(0x51c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0370
        gbc.setState(0x1b54, 0xf581, 0xf1a0, 0x3305, 0x3cd5, 0x1f14, 0x1, 0x0);
        gbc.writeMem(0x1b54, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xf581, gbc.sp());
        EXPECT(0x1b56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0371
        gbc.setState(0x76ac, 0x185, 0x28c0, 0x2f10, 0x80bb, 0x43f8, 0x1, 0x1);
        gbc.writeMem(0x76ac, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x185, gbc.sp());
        EXPECT(0x76ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0372
        gbc.setState(0x65c1, 0x29b7, 0x3570, 0x43b5, 0xcd37, 0xc821, 0x1, 0x1);
        gbc.writeMem(0x65c1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x29b7, gbc.sp());
        EXPECT(0x65c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0373
        gbc.setState(0x1596, 0x514f, 0xdf50, 0xfff6, 0xf22a, 0x5cb4, 0x1, 0x1);
        gbc.writeMem(0x1596, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x514f, gbc.sp());
        EXPECT(0x1598, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0374
        gbc.setState(0x6b63, 0x647d, 0x5c30, 0xad3d, 0xd47f, 0x5594, 0x0, 0x0);
        gbc.writeMem(0x6b63, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x647d, gbc.sp());
        EXPECT(0x6b65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0375
        gbc.setState(0x2241, 0xb31a, 0x5d20, 0xbc3e, 0xd742, 0xf467, 0x1, 0x0);
        gbc.writeMem(0x2241, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xb31a, gbc.sp());
        EXPECT(0x2243, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0376
        gbc.setState(0xbc4f, 0xf86d, 0x5130, 0xac28, 0xd7f7, 0xf772, 0x0, 0x0);
        gbc.writeMem(0xbc4f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xf86d, gbc.sp());
        EXPECT(0xbc51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc4f));
        EXPECT(0x15, gbc.readMem(0xbc50));
        // CB 15 0377
        gbc.setState(0x55ac, 0x8c8a, 0x9710, 0x635b, 0x7fe9, 0x8eba, 0x1, 0x1);
        gbc.writeMem(0x55ac, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x8c8a, gbc.sp());
        EXPECT(0x55ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0378
        gbc.setState(0x9a51, 0x7de2, 0xfe40, 0xdf2, 0xd1f3, 0x76c3, 0x1, 0x0);
        gbc.writeMem(0x9a51, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x7de2, gbc.sp());
        EXPECT(0x9a53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a51));
        EXPECT(0x15, gbc.readMem(0x9a52));
        // CB 15 0379
        gbc.setState(0x4617, 0xb6a5, 0x1dd0, 0x80d0, 0x3b8, 0x4129, 0x1, 0x1);
        gbc.writeMem(0x4617, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xb6a5, gbc.sp());
        EXPECT(0x4619, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 037B
        gbc.setState(0x6280, 0x5876, 0x3a50, 0xee0c, 0x1b5d, 0x7695, 0x0, 0x1);
        gbc.writeMem(0x6280, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x5876, gbc.sp());
        EXPECT(0x6282, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 037C
        gbc.setState(0x7405, 0x26a2, 0x8160, 0x1ca5, 0x985, 0xa82, 0x0, 0x1);
        gbc.writeMem(0x7405, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x26a2, gbc.sp());
        EXPECT(0x7407, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 037D
        gbc.setState(0xae61, 0xf1db, 0x3170, 0x7740, 0x9145, 0x87de, 0x1, 0x1);
        gbc.writeMem(0xae61, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xf1db, gbc.sp());
        EXPECT(0xae63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae61));
        EXPECT(0x15, gbc.readMem(0xae62));
        // CB 15 037E
        gbc.setState(0x8b96, 0x5147, 0x42d0, 0x6e75, 0xaeeb, 0x68dc, 0x0, 0x0);
        gbc.writeMem(0x8b96, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x5147, gbc.sp());
        EXPECT(0x8b98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b96));
        EXPECT(0x15, gbc.readMem(0x8b97));
        // CB 15 037F
        gbc.setState(0x73e1, 0xd408, 0x58f0, 0x1473, 0x83ff, 0x6b82, 0x1, 0x1);
        gbc.writeMem(0x73e1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xd408, gbc.sp());
        EXPECT(0x73e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0380
        gbc.setState(0x8040, 0x97ed, 0xe7b0, 0x5db7, 0x216b, 0x3860, 0x0, 0x0);
        gbc.writeMem(0x8040, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x97ed, gbc.sp());
        EXPECT(0x8042, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8040));
        EXPECT(0x15, gbc.readMem(0x8041));
        // CB 15 0381
        gbc.setState(0x7510, 0xfae1, 0x3820, 0xcdd6, 0xaa60, 0x6277, 0x1, 0x0);
        gbc.writeMem(0x7510, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xfae1, gbc.sp());
        EXPECT(0x7512, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0383
        gbc.setState(0xde15, 0xfa50, 0x5300, 0xc9fd, 0xe519, 0xc56f, 0x1, 0x1);
        gbc.writeMem(0xde15, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xfa50, gbc.sp());
        EXPECT(0xde17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde15));
        EXPECT(0x15, gbc.readMem(0xde16));
        // CB 15 0384
        gbc.setState(0x2935, 0x4eef, 0xc9d0, 0x7e11, 0x6059, 0x4da2, 0x0, 0x1);
        gbc.writeMem(0x2935, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x4eef, gbc.sp());
        EXPECT(0x2937, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0385
        gbc.setState(0xd098, 0x387a, 0x1c50, 0xd35b, 0x290d, 0xd6ce, 0x0, 0x1);
        gbc.writeMem(0xd098, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x387a, gbc.sp());
        EXPECT(0xd09a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd098));
        EXPECT(0x15, gbc.readMem(0xd099));
        // CB 15 0386
        gbc.setState(0x99ec, 0xdfe, 0x7ce0, 0x72f1, 0x196d, 0xc817, 0x1, 0x1);
        gbc.writeMem(0x99ec, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xdfe, gbc.sp());
        EXPECT(0x99ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99ec));
        EXPECT(0x15, gbc.readMem(0x99ed));
        // CB 15 0387
        gbc.setState(0xec6c, 0xa73d, 0x4b00, 0x1f5b, 0x3e84, 0xcc6f, 0x1, 0x1);
        gbc.writeMem(0xec6c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xa73d, gbc.sp());
        EXPECT(0xec6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec6c));
        EXPECT(0x15, gbc.readMem(0xec6d));
        // CB 15 0388
        gbc.setState(0x7202, 0x7614, 0x91f0, 0xd386, 0x8a4d, 0x1307, 0x1, 0x0);
        gbc.writeMem(0x7202, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x7614, gbc.sp());
        EXPECT(0x7204, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0389
        gbc.setState(0xa584, 0x3887, 0xf150, 0x119c, 0x94d3, 0xc70a, 0x1, 0x1);
        gbc.writeMem(0xa584, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x3887, gbc.sp());
        EXPECT(0xa586, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa584));
        EXPECT(0x15, gbc.readMem(0xa585));
        // CB 15 038A
        gbc.setState(0x94d3, 0x114a, 0x4aa0, 0xd893, 0x32ec, 0x1fd5, 0x1, 0x0);
        gbc.writeMem(0x94d3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x114a, gbc.sp());
        EXPECT(0x94d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94d3));
        EXPECT(0x15, gbc.readMem(0x94d4));
        // CB 15 038B
        gbc.setState(0xa742, 0x66ea, 0x7f60, 0x91e7, 0x1042, 0xfb06, 0x0, 0x0);
        gbc.writeMem(0xa742, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x66ea, gbc.sp());
        EXPECT(0xa744, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa742));
        EXPECT(0x15, gbc.readMem(0xa743));
        // CB 15 038C
        gbc.setState(0x927, 0x58ec, 0x8d70, 0xebc7, 0x6d61, 0x615b, 0x0, 0x0);
        gbc.writeMem(0x927, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x58ec, gbc.sp());
        EXPECT(0x929, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 038E
        gbc.setState(0xc8c2, 0xd7ee, 0x61b0, 0x3626, 0x746d, 0x3054, 0x1, 0x0);
        gbc.writeMem(0xc8c2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xd7ee, gbc.sp());
        EXPECT(0xc8c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8c2));
        EXPECT(0x15, gbc.readMem(0xc8c3));
        // CB 15 0390
        gbc.setState(0x4ee4, 0x4db3, 0x6d60, 0x6642, 0xb8c9, 0x1f64, 0x0, 0x0);
        gbc.writeMem(0x4ee4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x4db3, gbc.sp());
        EXPECT(0x4ee6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0391
        gbc.setState(0x52f0, 0x9e73, 0xf380, 0x71b1, 0xecc, 0x7db0, 0x1, 0x0);
        gbc.writeMem(0x52f0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x9e73, gbc.sp());
        EXPECT(0x52f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0392
        gbc.setState(0x6dae, 0x605d, 0x6be0, 0x8471, 0xec72, 0xeba4, 0x0, 0x0);
        gbc.writeMem(0x6dae, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x605d, gbc.sp());
        EXPECT(0x6db0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 0393
        gbc.setState(0x3fba, 0xdf00, 0x3820, 0x3825, 0x2c76, 0x422c, 0x0, 0x0);
        gbc.writeMem(0x3fba, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xdf00, gbc.sp());
        EXPECT(0x3fbc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0394
        gbc.setState(0xbf41, 0x4d4e, 0x4750, 0x823, 0x3f91, 0x7480, 0x0, 0x1);
        gbc.writeMem(0xbf41, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x4d4e, gbc.sp());
        EXPECT(0xbf43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf41));
        EXPECT(0x15, gbc.readMem(0xbf42));
        // CB 15 0395
        gbc.setState(0xb586, 0x48ca, 0x9200, 0x352c, 0x5fbb, 0x6310, 0x0, 0x0);
        gbc.writeMem(0xb586, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x48ca, gbc.sp());
        EXPECT(0xb588, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb586));
        EXPECT(0x15, gbc.readMem(0xb587));
        // CB 15 0396
        gbc.setState(0xd5df, 0xe74f, 0x1990, 0xc25e, 0xbc25, 0x8f43, 0x1, 0x0);
        gbc.writeMem(0xd5df, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xe74f, gbc.sp());
        EXPECT(0xd5e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5df));
        EXPECT(0x15, gbc.readMem(0xd5e0));
        // CB 15 0397
        gbc.setState(0xcfa7, 0xb6f5, 0xdee0, 0x9d55, 0xefc5, 0x363a, 0x1, 0x1);
        gbc.writeMem(0xcfa7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xb6f5, gbc.sp());
        EXPECT(0xcfa9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfa7));
        EXPECT(0x15, gbc.readMem(0xcfa8));
        // CB 15 0398
        gbc.setState(0xbc, 0xd4ba, 0x98e0, 0x87ba, 0xd23b, 0x821, 0x1, 0x0);
        gbc.writeMem(0xbc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xd4ba, gbc.sp());
        EXPECT(0xbe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 0399
        gbc.setState(0x1e4, 0xbfdc, 0x74e0, 0x6ee4, 0x7f04, 0xc86c, 0x0, 0x1);
        gbc.writeMem(0x1e4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xbfdc, gbc.sp());
        EXPECT(0x1e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 039A
        gbc.setState(0x9ff7, 0xe75d, 0x8d30, 0x2ed9, 0x467a, 0x5b8, 0x1, 0x1);
        gbc.writeMem(0x9ff7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xe75d, gbc.sp());
        EXPECT(0x9ff9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ff7));
        EXPECT(0x15, gbc.readMem(0x9ff8));
        // CB 15 039B
        gbc.setState(0x2391, 0x20fa, 0x3b50, 0xf58a, 0x7f5c, 0x96b8, 0x1, 0x1);
        gbc.writeMem(0x2391, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x20fa, gbc.sp());
        EXPECT(0x2393, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 039C
        gbc.setState(0x9108, 0xaf8e, 0xc0b0, 0x72d4, 0x8c0e, 0x4329, 0x0, 0x1);
        gbc.writeMem(0x9108, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xaf8e, gbc.sp());
        EXPECT(0x910a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9108));
        EXPECT(0x15, gbc.readMem(0x9109));
        // CB 15 039D
        gbc.setState(0x1c2a, 0x2a9a, 0xafe0, 0x8c97, 0x596f, 0x4c4a, 0x0, 0x1);
        gbc.writeMem(0x1c2a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x2a9a, gbc.sp());
        EXPECT(0x1c2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 039E
        gbc.setState(0x6fdf, 0x16f7, 0xd260, 0x3ae3, 0x1910, 0xfc2d, 0x0, 0x1);
        gbc.writeMem(0x6fdf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x16f7, gbc.sp());
        EXPECT(0x6fe1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 039F
        gbc.setState(0xbedc, 0xaf29, 0xe780, 0x74dc, 0x585a, 0xb68, 0x1, 0x0);
        gbc.writeMem(0xbedc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xaf29, gbc.sp());
        EXPECT(0xbede, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbedc));
        EXPECT(0x15, gbc.readMem(0xbedd));
        // CB 15 03A0
        gbc.setState(0xbd5a, 0xcf9a, 0xe5b0, 0x4351, 0x3ba6, 0xbb8b, 0x0, 0x1);
        gbc.writeMem(0xbd5a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xcf9a, gbc.sp());
        EXPECT(0xbd5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd5a));
        EXPECT(0x15, gbc.readMem(0xbd5b));
        // CB 15 03A1
        gbc.setState(0x8165, 0x5380, 0x9f40, 0x4ffc, 0x721a, 0xd903, 0x1, 0x1);
        gbc.writeMem(0x8165, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x5380, gbc.sp());
        EXPECT(0x8167, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8165));
        EXPECT(0x15, gbc.readMem(0x8166));
        // CB 15 03A2
        gbc.setState(0xdcf2, 0x38b4, 0x1840, 0xe46f, 0xf79, 0xa93e, 0x1, 0x0);
        gbc.writeMem(0xdcf2, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x38b4, gbc.sp());
        EXPECT(0xdcf4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcf2));
        EXPECT(0x15, gbc.readMem(0xdcf3));
        // CB 15 03A3
        gbc.setState(0x2a4e, 0x4997, 0xba30, 0xaf37, 0xcc44, 0xf5b2, 0x1, 0x0);
        gbc.writeMem(0x2a4e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x4997, gbc.sp());
        EXPECT(0x2a50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03A4
        gbc.setState(0x422d, 0x7cfd, 0x39b0, 0xb983, 0x7c39, 0x4884, 0x0, 0x1);
        gbc.writeMem(0x422d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x7cfd, gbc.sp());
        EXPECT(0x422f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03A5
        gbc.setState(0xb966, 0x3fc5, 0x1660, 0x1329, 0xa1a7, 0x97ac, 0x1, 0x1);
        gbc.writeMem(0xb966, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x3fc5, gbc.sp());
        EXPECT(0xb968, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb966));
        EXPECT(0x15, gbc.readMem(0xb967));
        // CB 15 03A6
        gbc.setState(0xe6a6, 0xbc5, 0x3ec0, 0xe10d, 0x1f88, 0x15eb, 0x0, 0x1);
        gbc.writeMem(0xe6a6, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xbc5, gbc.sp());
        EXPECT(0xe6a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6a6));
        EXPECT(0x15, gbc.readMem(0xe6a7));
        // CB 15 03A7
        gbc.setState(0xa8f0, 0x8dd0, 0xb770, 0xd61c, 0x5811, 0xffd2, 0x1, 0x0);
        gbc.writeMem(0xa8f0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x8dd0, gbc.sp());
        EXPECT(0xa8f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8f0));
        EXPECT(0x15, gbc.readMem(0xa8f1));
        // CB 15 03A8
        gbc.setState(0x4961, 0xe4d8, 0x2f40, 0xf0ca, 0x5271, 0x17c6, 0x0, 0x0);
        gbc.writeMem(0x4961, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xe4d8, gbc.sp());
        EXPECT(0x4963, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03A9
        gbc.setState(0xb9f0, 0x4e5f, 0x6110, 0xf54b, 0xf5f6, 0x69c7, 0x1, 0x0);
        gbc.writeMem(0xb9f0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x4e5f, gbc.sp());
        EXPECT(0xb9f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9f0));
        EXPECT(0x15, gbc.readMem(0xb9f1));
        // CB 15 03AA
        gbc.setState(0x7bf4, 0x714a, 0xca60, 0x4efd, 0x19e3, 0xe182, 0x1, 0x0);
        gbc.writeMem(0x7bf4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x714a, gbc.sp());
        EXPECT(0x7bf6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03AB
        gbc.setState(0x6016, 0xacf1, 0x7f30, 0x824f, 0x7554, 0x93bd, 0x1, 0x0);
        gbc.writeMem(0x6016, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xacf1, gbc.sp());
        EXPECT(0x6018, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03AC
        gbc.setState(0x2847, 0x61fd, 0xfd30, 0x3152, 0xaec9, 0xbca6, 0x0, 0x0);
        gbc.writeMem(0x2847, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x61fd, gbc.sp());
        EXPECT(0x2849, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03AD
        gbc.setState(0x4218, 0xb5a3, 0x7fb0, 0x1f72, 0x5c9c, 0xe7d7, 0x0, 0x1);
        gbc.writeMem(0x4218, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xb5a3, gbc.sp());
        EXPECT(0x421a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03AE
        gbc.setState(0xd383, 0xa7e9, 0x2030, 0x237e, 0x921e, 0x6ae4, 0x0, 0x0);
        gbc.writeMem(0xd383, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xa7e9, gbc.sp());
        EXPECT(0xd385, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd383));
        EXPECT(0x15, gbc.readMem(0xd384));
        // CB 15 03B1
        gbc.setState(0x4e58, 0xa1de, 0x9ec0, 0xdaf, 0x51a7, 0xcdd5, 0x0, 0x1);
        gbc.writeMem(0x4e58, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xa1de, gbc.sp());
        EXPECT(0x4e5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03B2
        gbc.setState(0xe2f4, 0xed36, 0xb0b0, 0xe295, 0x257e, 0x407b, 0x0, 0x1);
        gbc.writeMem(0xe2f4, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xed36, gbc.sp());
        EXPECT(0xe2f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2f4));
        EXPECT(0x15, gbc.readMem(0xe2f5));
        // CB 15 03B4
        gbc.setState(0x11a9, 0x17da, 0x7aa0, 0x69d8, 0x483, 0x1937, 0x1, 0x0);
        gbc.writeMem(0x11a9, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x17da, gbc.sp());
        EXPECT(0x11ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03B5
        gbc.setState(0x5674, 0x81f7, 0xd210, 0x3747, 0xf7e, 0xbab4, 0x1, 0x0);
        gbc.writeMem(0x5674, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x81f7, gbc.sp());
        EXPECT(0x5676, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03B6
        gbc.setState(0x1278, 0x3551, 0x3ef0, 0xcdba, 0x84cb, 0xa348, 0x0, 0x1);
        gbc.writeMem(0x1278, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x3551, gbc.sp());
        EXPECT(0x127a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03B7
        gbc.setState(0xc03c, 0x31f5, 0xfab0, 0x3af, 0x2a1, 0x9128, 0x1, 0x0);
        gbc.writeMem(0xc03c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x31f5, gbc.sp());
        EXPECT(0xc03e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc03c));
        EXPECT(0x15, gbc.readMem(0xc03d));
        // CB 15 03B8
        gbc.setState(0x4cd3, 0x44db, 0x4a60, 0xe468, 0xd1bf, 0x15dd, 0x1, 0x1);
        gbc.writeMem(0x4cd3, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x44db, gbc.sp());
        EXPECT(0x4cd5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03B9
        gbc.setState(0xcbde, 0x1ff9, 0xe4c0, 0x388f, 0xd9cd, 0x53f1, 0x0, 0x0);
        gbc.writeMem(0xcbde, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x1ff9, gbc.sp());
        EXPECT(0xcbe0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbde));
        EXPECT(0x15, gbc.readMem(0xcbdf));
        // CB 15 03BA
        gbc.setState(0xec5e, 0xb95, 0x1770, 0xdbac, 0x613e, 0xf7e7, 0x1, 0x1);
        gbc.writeMem(0xec5e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xb95, gbc.sp());
        EXPECT(0xec60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec5e));
        EXPECT(0x15, gbc.readMem(0xec5f));
        // CB 15 03BB
        gbc.setState(0x3cde, 0xab6e, 0xb350, 0xbe58, 0xb10f, 0x4a16, 0x0, 0x1);
        gbc.writeMem(0x3cde, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xab6e, gbc.sp());
        EXPECT(0x3ce0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03BC
        gbc.setState(0x1f5d, 0x5f4d, 0x6900, 0x3c36, 0x5421, 0x65e1, 0x0, 0x1);
        gbc.writeMem(0x1f5d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x5f4d, gbc.sp());
        EXPECT(0x1f5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03BD
        gbc.setState(0xe925, 0x6505, 0x1310, 0xd9f9, 0xc3e8, 0x7c7a, 0x0, 0x1);
        gbc.writeMem(0xe925, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x6505, gbc.sp());
        EXPECT(0xe927, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe925));
        EXPECT(0x15, gbc.readMem(0xe926));
        // CB 15 03BE
        gbc.setState(0xbc6e, 0x48ff, 0x11f0, 0x1832, 0xa482, 0xef82, 0x0, 0x1);
        gbc.writeMem(0xbc6e, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x48ff, gbc.sp());
        EXPECT(0xbc70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc6e));
        EXPECT(0x15, gbc.readMem(0xbc6f));
        // CB 15 03BF
        gbc.setState(0x6f90, 0x5e4b, 0x7a0, 0x154c, 0x43c9, 0xf1b8, 0x0, 0x0);
        gbc.writeMem(0x6f90, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x5e4b, gbc.sp());
        EXPECT(0x6f92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03C0
        gbc.setState(0xdbea, 0x1185, 0xa3a0, 0xbf9b, 0x566e, 0x46e1, 0x1, 0x1);
        gbc.writeMem(0xdbea, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x1185, gbc.sp());
        EXPECT(0xdbec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbea));
        EXPECT(0x15, gbc.readMem(0xdbeb));
        // CB 15 03C1
        gbc.setState(0x1b95, 0xe921, 0x3fb0, 0x8887, 0x8724, 0x49d5, 0x1, 0x0);
        gbc.writeMem(0x1b95, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xe921, gbc.sp());
        EXPECT(0x1b97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03C2
        gbc.setState(0x51cc, 0x72b1, 0x6c20, 0x8f02, 0xe312, 0x6594, 0x1, 0x1);
        gbc.writeMem(0x51cc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x72b1, gbc.sp());
        EXPECT(0x51ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03C3
        gbc.setState(0x776c, 0xe707, 0x58b0, 0xf28c, 0xfffe, 0xa0b3, 0x1, 0x1);
        gbc.writeMem(0x776c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xe707, gbc.sp());
        EXPECT(0x776e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03C5
        gbc.setState(0xcf51, 0xba56, 0x1c50, 0xd9, 0xbdd2, 0xaa03, 0x0, 0x1);
        gbc.writeMem(0xcf51, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xba56, gbc.sp());
        EXPECT(0xcf53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf51));
        EXPECT(0x15, gbc.readMem(0xcf52));
        // CB 15 03C6
        gbc.setState(0xcfcf, 0xe9dc, 0x81c0, 0x2ed9, 0x33a7, 0xa7df, 0x1, 0x0);
        gbc.writeMem(0xcfcf, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xe9dc, gbc.sp());
        EXPECT(0xcfd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfcf));
        EXPECT(0x15, gbc.readMem(0xcfd0));
        // CB 15 03C7
        gbc.setState(0xa3d1, 0x91b1, 0x4520, 0x73f8, 0x4af7, 0x325c, 0x0, 0x0);
        gbc.writeMem(0xa3d1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x91b1, gbc.sp());
        EXPECT(0xa3d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3d1));
        EXPECT(0x15, gbc.readMem(0xa3d2));
        // CB 15 03C8
        gbc.setState(0x608f, 0x4842, 0x5ea0, 0xb945, 0x93df, 0xa829, 0x1, 0x0);
        gbc.writeMem(0x608f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x4842, gbc.sp());
        EXPECT(0x6091, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03C9
        gbc.setState(0xb13a, 0x950a, 0xcc80, 0x5f01, 0xa139, 0x3a74, 0x0, 0x1);
        gbc.writeMem(0xb13a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x950a, gbc.sp());
        EXPECT(0xb13c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb13a));
        EXPECT(0x15, gbc.readMem(0xb13b));
        // CB 15 03CA
        gbc.setState(0x1057, 0x89bc, 0x1c90, 0x8cb8, 0x8ff7, 0xae2, 0x1, 0x1);
        gbc.writeMem(0x1057, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x89bc, gbc.sp());
        EXPECT(0x1059, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03CB
        gbc.setState(0x5097, 0xe6c6, 0x7640, 0x458d, 0x6541, 0xa8c2, 0x0, 0x0);
        gbc.writeMem(0x5097, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xe6c6, gbc.sp());
        EXPECT(0x5099, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03CC
        gbc.setState(0x2cf1, 0xe781, 0x5760, 0xe890, 0x645, 0xa8b8, 0x1, 0x1);
        gbc.writeMem(0x2cf1, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xe781, gbc.sp());
        EXPECT(0x2cf3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03CD
        gbc.setState(0xc2df, 0x1313, 0x6550, 0x6dd2, 0xacb6, 0x2c3c, 0x1, 0x1);
        gbc.writeMem(0xc2df, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x1313, gbc.sp());
        EXPECT(0xc2e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2df));
        EXPECT(0x15, gbc.readMem(0xc2e0));
        // CB 15 03CE
        gbc.setState(0x285a, 0x6850, 0xc3f0, 0xbae3, 0xa9a8, 0xcc5b, 0x1, 0x0);
        gbc.writeMem(0x285a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x6850, gbc.sp());
        EXPECT(0x285c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03D0
        gbc.setState(0x8166, 0x9c8b, 0x23b0, 0xe596, 0xa27, 0x434f, 0x1, 0x0);
        gbc.writeMem(0x8166, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x9c8b, gbc.sp());
        EXPECT(0x8168, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8166));
        EXPECT(0x15, gbc.readMem(0x8167));
        // CB 15 03D1
        gbc.setState(0xa7f7, 0xf5e7, 0x7530, 0x9dee, 0x4fb7, 0xa3d7, 0x0, 0x0);
        gbc.writeMem(0xa7f7, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xf5e7, gbc.sp());
        EXPECT(0xa7f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7f7));
        EXPECT(0x15, gbc.readMem(0xa7f8));
        // CB 15 03D3
        gbc.setState(0x11f0, 0x6e46, 0x78a0, 0x2362, 0x31ea, 0x9b08, 0x0, 0x0);
        gbc.writeMem(0x11f0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x6e46, gbc.sp());
        EXPECT(0x11f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03D4
        gbc.setState(0x497c, 0x3184, 0xbb40, 0x485c, 0x1254, 0x66b2, 0x0, 0x0);
        gbc.writeMem(0x497c, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x3184, gbc.sp());
        EXPECT(0x497e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03D5
        gbc.setState(0x46bd, 0xc2f4, 0x7a00, 0xc85c, 0x5bf5, 0xba6c, 0x1, 0x0);
        gbc.writeMem(0x46bd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xc2f4, gbc.sp());
        EXPECT(0x46bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03D6
        gbc.setState(0xd76f, 0x296, 0x13e0, 0x4623, 0x1794, 0xf852, 0x1, 0x1);
        gbc.writeMem(0xd76f, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x296, gbc.sp());
        EXPECT(0xd771, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd76f));
        EXPECT(0x15, gbc.readMem(0xd770));
        // CB 15 03D7
        gbc.setState(0x40fc, 0xcb08, 0xb8f0, 0x457f, 0x71e1, 0x5f2a, 0x0, 0x1);
        gbc.writeMem(0x40fc, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xcb08, gbc.sp());
        EXPECT(0x40fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03D8
        gbc.setState(0x5575, 0x3989, 0xbfd0, 0xc6da, 0x7836, 0x6387, 0x0, 0x1);
        gbc.writeMem(0x5575, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x3989, gbc.sp());
        EXPECT(0x5577, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03D9
        gbc.setState(0x9234, 0x600c, 0x9b70, 0x9e3a, 0x4ca, 0xa70a, 0x0, 0x0);
        gbc.writeMem(0x9234, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x600c, gbc.sp());
        EXPECT(0x9236, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9234));
        EXPECT(0x15, gbc.readMem(0x9235));
        // CB 15 03DA
        gbc.setState(0x6f8d, 0xf700, 0xcaf0, 0x4fce, 0xe20d, 0x7b47, 0x0, 0x0);
        gbc.writeMem(0x6f8d, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xf700, gbc.sp());
        EXPECT(0x6f8f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03DB
        gbc.setState(0xea7b, 0xfcf5, 0xbb20, 0x3042, 0x6f35, 0xf380, 0x0, 0x0);
        gbc.writeMem(0xea7b, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xfcf5, gbc.sp());
        EXPECT(0xea7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea7b));
        EXPECT(0x15, gbc.readMem(0xea7c));
        // CB 15 03DD
        gbc.setState(0x2ace, 0xeb7e, 0x1b50, 0xa460, 0xb7ee, 0x289b, 0x0, 0x1);
        gbc.writeMem(0x2ace, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xeb7e, gbc.sp());
        EXPECT(0x2ad0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03DE
        gbc.setState(0x6873, 0xcd6b, 0x5320, 0xa4c1, 0x18d4, 0x6e16, 0x1, 0x1);
        gbc.writeMem(0x6873, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xcd6b, gbc.sp());
        EXPECT(0x6875, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03DF
        gbc.setState(0x38bd, 0x8ddc, 0x5630, 0x4514, 0xb04c, 0x754b, 0x0, 0x0);
        gbc.writeMem(0x38bd, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x8ddc, gbc.sp());
        EXPECT(0x38bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03E0
        gbc.setState(0x9660, 0x5b46, 0x3290, 0x19e0, 0x9fad, 0x2b35, 0x1, 0x1);
        gbc.writeMem(0x9660, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x5b46, gbc.sp());
        EXPECT(0x9662, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9660));
        EXPECT(0x15, gbc.readMem(0x9661));
        // CB 15 03E1
        gbc.setState(0xb1d0, 0xd980, 0xc530, 0x133, 0x397f, 0x90a9, 0x0, 0x1);
        gbc.writeMem(0xb1d0, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xd980, gbc.sp());
        EXPECT(0xb1d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1d0));
        EXPECT(0x15, gbc.readMem(0xb1d1));
        // CB 15 03E2
        gbc.setState(0x70d5, 0x9571, 0xc450, 0x9e00, 0x3e29, 0xe1d, 0x0, 0x0);
        gbc.writeMem(0x70d5, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x9571, gbc.sp());
        EXPECT(0x70d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 15 03E3
        gbc.setState(0xdc68, 0xed2d, 0x3a30, 0x8a6b, 0xa9eb, 0xf900, 0x0, 0x1);
        gbc.writeMem(0xdc68, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xed2d, gbc.sp());
        EXPECT(0xdc6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc68));
        EXPECT(0x15, gbc.readMem(0xdc69));
        // CB 15 03E4
        gbc.setState(0xab31, 0x751e, 0xd3c0, 0x5246, 0x425e, 0xf1f, 0x0, 0x0);
        gbc.writeMem(0xab31, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x751e, gbc.sp());
        EXPECT(0xab33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab31));
        EXPECT(0x15, gbc.readMem(0xab32));
        // CB 15 03E5
        gbc.setState(0x9f80, 0x9562, 0x7120, 0xe3f8, 0x3f38, 0xe776, 0x1, 0x0);
        gbc.writeMem(0x9f80, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x9562, gbc.sp());
        EXPECT(0x9f82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f80));
        EXPECT(0x15, gbc.readMem(0x9f81));
        // CB 15 03E6
        gbc.setState(0x8f8, 0x9ff5, 0x3350, 0xb78b, 0xd9b7, 0x55a0, 0x0, 0x1);
        gbc.writeMem(0x8f8, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x9ff5, gbc.sp());
        EXPECT(0x8fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 15 03E7
        gbc.setState(0xe52a, 0x17c6, 0xdd10, 0x5e6c, 0xab00, 0x5337, 0x1, 0x1);
        gbc.writeMem(0xe52a, { 0xcb, 0x15 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x17c6, gbc.sp());
        EXPECT(0xe52c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe52a));
        EXPECT(0x15, gbc.readMem(0xe52b));
    }
