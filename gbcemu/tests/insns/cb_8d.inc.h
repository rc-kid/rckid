    TEST(gbcemu, opcode_cb_8d) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 8D 0001
        gbc.setState(0xdcd5, 0x371, 0x9550, 0xb810, 0x6174, 0x1e98, 0x1, 0x1);
        gbc.writeMem(0xdcd5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x371, gbc.sp());
        EXPECT(0xdcd7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcd5));
        EXPECT(0x8d, gbc.readMem(0xdcd6));
        // CB 8D 0002
        gbc.setState(0xe4bc, 0x8b51, 0x64e0, 0xa018, 0x1632, 0x54f, 0x0, 0x0);
        gbc.writeMem(0xe4bc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x8b51, gbc.sp());
        EXPECT(0xe4be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4bc));
        EXPECT(0x8d, gbc.readMem(0xe4bd));
        // CB 8D 0003
        gbc.setState(0x43ee, 0x68d8, 0xfe70, 0x5da5, 0x5efa, 0xae1d, 0x0, 0x0);
        gbc.writeMem(0x43ee, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x68d8, gbc.sp());
        EXPECT(0x43f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0004
        gbc.setState(0xc1be, 0x5320, 0x43f0, 0x7c51, 0x6b2b, 0x831d, 0x1, 0x1);
        gbc.writeMem(0xc1be, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x5320, gbc.sp());
        EXPECT(0xc1c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1be));
        EXPECT(0x8d, gbc.readMem(0xc1bf));
        // CB 8D 0006
        gbc.setState(0x3085, 0xc940, 0xa690, 0xa8ba, 0xb616, 0x5449, 0x1, 0x1);
        gbc.writeMem(0x3085, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xc940, gbc.sp());
        EXPECT(0x3087, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0007
        gbc.setState(0xd32, 0xfc60, 0x4930, 0xfd9a, 0x30c4, 0x760a, 0x1, 0x0);
        gbc.writeMem(0xd32, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xfc60, gbc.sp());
        EXPECT(0xd34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0008
        gbc.setState(0x3a6d, 0x1baa, 0x7330, 0x2b03, 0xac7b, 0xeae3, 0x0, 0x0);
        gbc.writeMem(0x3a6d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x1baa, gbc.sp());
        EXPECT(0x3a6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 000A
        gbc.setState(0xac36, 0x4368, 0x3280, 0x279f, 0x9ea6, 0xcf40, 0x1, 0x1);
        gbc.writeMem(0xac36, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x4368, gbc.sp());
        EXPECT(0xac38, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac36));
        EXPECT(0x8d, gbc.readMem(0xac37));
        // CB 8D 000B
        gbc.setState(0x3168, 0x30e2, 0x8320, 0x2333, 0xb5c1, 0x3612, 0x1, 0x0);
        gbc.writeMem(0x3168, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x30e2, gbc.sp());
        EXPECT(0x316a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 000C
        gbc.setState(0xb41d, 0xdbbd, 0xa640, 0x1863, 0x340c, 0x235c, 0x0, 0x1);
        gbc.writeMem(0xb41d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xdbbd, gbc.sp());
        EXPECT(0xb41f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb41d));
        EXPECT(0x8d, gbc.readMem(0xb41e));
        // CB 8D 000D
        gbc.setState(0x501c, 0xf156, 0xb280, 0xe5da, 0x17f2, 0xe8a0, 0x0, 0x0);
        gbc.writeMem(0x501c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xf156, gbc.sp());
        EXPECT(0x501e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 000E
        gbc.setState(0xea60, 0xecfc, 0xa7a0, 0xce75, 0x5a21, 0x4b3b, 0x1, 0x0);
        gbc.writeMem(0xea60, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xecfc, gbc.sp());
        EXPECT(0xea62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea60));
        EXPECT(0x8d, gbc.readMem(0xea61));
        // CB 8D 000F
        gbc.setState(0xd9d3, 0x39c, 0x9010, 0x80b7, 0xe6ab, 0x83c3, 0x0, 0x0);
        gbc.writeMem(0xd9d3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x39c, gbc.sp());
        EXPECT(0xd9d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9d3));
        EXPECT(0x8d, gbc.readMem(0xd9d4));
        // CB 8D 0010
        gbc.setState(0xbe88, 0x6cee, 0x4340, 0x6067, 0xd48c, 0x39ac, 0x0, 0x0);
        gbc.writeMem(0xbe88, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x6cee, gbc.sp());
        EXPECT(0xbe8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe88));
        EXPECT(0x8d, gbc.readMem(0xbe89));
        // CB 8D 0011
        gbc.setState(0x67c2, 0x52b3, 0xad20, 0xa3e9, 0xa1ac, 0xa739, 0x0, 0x1);
        gbc.writeMem(0x67c2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x52b3, gbc.sp());
        EXPECT(0x67c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0012
        gbc.setState(0x5fff, 0x2ab5, 0x4da0, 0xb7b7, 0x4cbd, 0x15d2, 0x1, 0x1);
        gbc.writeMem(0x5fff, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x2ab5, gbc.sp());
        EXPECT(0x6001, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0013
        gbc.setState(0xd3db, 0x3fdf, 0xd730, 0x3927, 0x3e12, 0xb454, 0x0, 0x0);
        gbc.writeMem(0xd3db, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x3fdf, gbc.sp());
        EXPECT(0xd3dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3db));
        EXPECT(0x8d, gbc.readMem(0xd3dc));
        // CB 8D 0014
        gbc.setState(0x6f13, 0xc561, 0x9c70, 0x8956, 0x6505, 0x1ea0, 0x1, 0x0);
        gbc.writeMem(0x6f13, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xc561, gbc.sp());
        EXPECT(0x6f15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0015
        gbc.setState(0x4d2e, 0x23cd, 0xc410, 0x9076, 0x81de, 0x4b4f, 0x0, 0x0);
        gbc.writeMem(0x4d2e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x23cd, gbc.sp());
        EXPECT(0x4d30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0016
        gbc.setState(0xd2f3, 0x1923, 0xeeb0, 0x145b, 0x6562, 0x1b5d, 0x1, 0x0);
        gbc.writeMem(0xd2f3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x1923, gbc.sp());
        EXPECT(0xd2f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2f3));
        EXPECT(0x8d, gbc.readMem(0xd2f4));
        // CB 8D 0017
        gbc.setState(0x7831, 0x7474, 0x3790, 0x10f6, 0x2818, 0x3c27, 0x0, 0x0);
        gbc.writeMem(0x7831, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x7474, gbc.sp());
        EXPECT(0x7833, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0018
        gbc.setState(0x19e0, 0xe31e, 0x9a70, 0xbd8b, 0xa9ea, 0x3c33, 0x1, 0x0);
        gbc.writeMem(0x19e0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xe31e, gbc.sp());
        EXPECT(0x19e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0019
        gbc.setState(0xa889, 0xdaae, 0xdd20, 0x8f10, 0x895e, 0x225a, 0x1, 0x0);
        gbc.writeMem(0xa889, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xdaae, gbc.sp());
        EXPECT(0xa88b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa889));
        EXPECT(0x8d, gbc.readMem(0xa88a));
        // CB 8D 001A
        gbc.setState(0x443b, 0x55de, 0x4100, 0x7b90, 0x9631, 0x9696, 0x1, 0x1);
        gbc.writeMem(0x443b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x55de, gbc.sp());
        EXPECT(0x443d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 001B
        gbc.setState(0x55e8, 0xfde0, 0x44f0, 0xe296, 0x7ae0, 0xd864, 0x1, 0x0);
        gbc.writeMem(0x55e8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xfde0, gbc.sp());
        EXPECT(0x55ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 001C
        gbc.setState(0x4095, 0xf1c1, 0x10a0, 0xa3c0, 0xb023, 0xcdfa, 0x1, 0x0);
        gbc.writeMem(0x4095, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xf1c1, gbc.sp());
        EXPECT(0x4097, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 001D
        gbc.setState(0x5009, 0x3be8, 0xa350, 0x3686, 0x46c7, 0x275, 0x1, 0x1);
        gbc.writeMem(0x5009, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x3be8, gbc.sp());
        EXPECT(0x500b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 001E
        gbc.setState(0x27af, 0x2695, 0xcf40, 0x52b6, 0x7d61, 0x286, 0x0, 0x0);
        gbc.writeMem(0x27af, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x2695, gbc.sp());
        EXPECT(0x27b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 001F
        gbc.setState(0x2ba3, 0x3154, 0x67e0, 0x58f1, 0xd26, 0xa607, 0x0, 0x1);
        gbc.writeMem(0x2ba3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x3154, gbc.sp());
        EXPECT(0x2ba5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0020
        gbc.setState(0xaf9d, 0x94e9, 0x7550, 0x3b84, 0x14ff, 0xe175, 0x0, 0x0);
        gbc.writeMem(0xaf9d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x94e9, gbc.sp());
        EXPECT(0xaf9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf9d));
        EXPECT(0x8d, gbc.readMem(0xaf9e));
        // CB 8D 0021
        gbc.setState(0x444f, 0x30a9, 0xa420, 0x8858, 0xc224, 0xb9fc, 0x1, 0x1);
        gbc.writeMem(0x444f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x30a9, gbc.sp());
        EXPECT(0x4451, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0022
        gbc.setState(0x325f, 0xa684, 0xffc0, 0xa63b, 0x1aa6, 0xbe89, 0x0, 0x1);
        gbc.writeMem(0x325f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xa684, gbc.sp());
        EXPECT(0x3261, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0023
        gbc.setState(0x68be, 0x4469, 0xd1c0, 0xda5f, 0x40df, 0x7833, 0x0, 0x1);
        gbc.writeMem(0x68be, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x4469, gbc.sp());
        EXPECT(0x68c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0025
        gbc.setState(0x2a35, 0x90a, 0x48c0, 0x9a06, 0xa699, 0xe3e4, 0x0, 0x1);
        gbc.writeMem(0x2a35, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x90a, gbc.sp());
        EXPECT(0x2a37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0026
        gbc.setState(0x1b38, 0x9027, 0x4690, 0xee4c, 0x5d48, 0xb18d, 0x0, 0x0);
        gbc.writeMem(0x1b38, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x9027, gbc.sp());
        EXPECT(0x1b3a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0027
        gbc.setState(0x2c07, 0x151d, 0xe120, 0xe53, 0x2b9b, 0x3774, 0x1, 0x0);
        gbc.writeMem(0x2c07, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x151d, gbc.sp());
        EXPECT(0x2c09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0028
        gbc.setState(0x2ea2, 0x1067, 0x14c0, 0x408, 0x9dfb, 0xf6e8, 0x1, 0x0);
        gbc.writeMem(0x2ea2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x1067, gbc.sp());
        EXPECT(0x2ea4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0029
        gbc.setState(0x27b1, 0x6ebe, 0x7690, 0xf037, 0xaf89, 0x4026, 0x1, 0x0);
        gbc.writeMem(0x27b1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x6ebe, gbc.sp());
        EXPECT(0x27b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 002A
        gbc.setState(0x27, 0xdd78, 0x8a30, 0x7c92, 0x734c, 0xdf01, 0x0, 0x1);
        gbc.writeMem(0x27, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xdd78, gbc.sp());
        EXPECT(0x29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 002B
        gbc.setState(0x68e6, 0xb6b3, 0xa300, 0x9bb7, 0xa91a, 0x8d3a, 0x1, 0x1);
        gbc.writeMem(0x68e6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xb6b3, gbc.sp());
        EXPECT(0x68e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 002C
        gbc.setState(0x769c, 0xbe53, 0x6630, 0x7843, 0x60cb, 0x7cad, 0x0, 0x1);
        gbc.writeMem(0x769c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xbe53, gbc.sp());
        EXPECT(0x769e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 002D
        gbc.setState(0x4a62, 0xd11b, 0x34d0, 0x6516, 0x8100, 0x2249, 0x1, 0x0);
        gbc.writeMem(0x4a62, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xd11b, gbc.sp());
        EXPECT(0x4a64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 002E
        gbc.setState(0xd070, 0x9b6a, 0xdc0, 0x5e51, 0x5ed7, 0x6004, 0x1, 0x1);
        gbc.writeMem(0xd070, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x9b6a, gbc.sp());
        EXPECT(0xd072, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd070));
        EXPECT(0x8d, gbc.readMem(0xd071));
        // CB 8D 002F
        gbc.setState(0x516, 0x5add, 0x1970, 0xdbaa, 0xce01, 0x631f, 0x0, 0x0);
        gbc.writeMem(0x516, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x5add, gbc.sp());
        EXPECT(0x518, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0030
        gbc.setState(0x8f9b, 0xfcf6, 0xccf0, 0xa89b, 0xda5f, 0x3b91, 0x1, 0x1);
        gbc.writeMem(0x8f9b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xfcf6, gbc.sp());
        EXPECT(0x8f9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f9b));
        EXPECT(0x8d, gbc.readMem(0x8f9c));
        // CB 8D 0031
        gbc.setState(0x2625, 0x7bc7, 0x9b10, 0xcf49, 0xb4fc, 0x660d, 0x0, 0x1);
        gbc.writeMem(0x2625, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x7bc7, gbc.sp());
        EXPECT(0x2627, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0032
        gbc.setState(0xa98f, 0x86b3, 0x8fc0, 0x5256, 0xd6e6, 0x7d1, 0x0, 0x0);
        gbc.writeMem(0xa98f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x86b3, gbc.sp());
        EXPECT(0xa991, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa98f));
        EXPECT(0x8d, gbc.readMem(0xa990));
        // CB 8D 0033
        gbc.setState(0xdc63, 0x40c4, 0x1550, 0x6e35, 0xcc22, 0x6cd4, 0x0, 0x0);
        gbc.writeMem(0xdc63, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x40c4, gbc.sp());
        EXPECT(0xdc65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc63));
        EXPECT(0x8d, gbc.readMem(0xdc64));
        // CB 8D 0034
        gbc.setState(0xc7fe, 0x9d2f, 0xfc00, 0x59f8, 0x4e9, 0xc285, 0x0, 0x0);
        gbc.writeMem(0xc7fe, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x9d2f, gbc.sp());
        EXPECT(0xc800, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7fe));
        EXPECT(0x8d, gbc.readMem(0xc7ff));
        // CB 8D 0035
        gbc.setState(0xad30, 0x18eb, 0x7f00, 0x4d8b, 0xc308, 0xf5a9, 0x1, 0x1);
        gbc.writeMem(0xad30, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x18eb, gbc.sp());
        EXPECT(0xad32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad30));
        EXPECT(0x8d, gbc.readMem(0xad31));
        // CB 8D 0036
        gbc.setState(0x515d, 0xf70, 0x7340, 0xcaa7, 0x973f, 0xa887, 0x0, 0x0);
        gbc.writeMem(0x515d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xf70, gbc.sp());
        EXPECT(0x515f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0038
        gbc.setState(0x412e, 0x1bd2, 0x7570, 0x5a4b, 0xa630, 0xa810, 0x1, 0x0);
        gbc.writeMem(0x412e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x1bd2, gbc.sp());
        EXPECT(0x4130, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0039
        gbc.setState(0x2678, 0xd4a2, 0xfc0, 0x5f38, 0x1984, 0xbaa5, 0x0, 0x1);
        gbc.writeMem(0x2678, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xd4a2, gbc.sp());
        EXPECT(0x267a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 003A
        gbc.setState(0x7041, 0xb9d, 0xd700, 0x6a14, 0x4a89, 0xcdc0, 0x1, 0x1);
        gbc.writeMem(0x7041, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xb9d, gbc.sp());
        EXPECT(0x7043, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 003B
        gbc.setState(0x9be5, 0x4a57, 0x4f0, 0x2164, 0xfa22, 0x9148, 0x1, 0x0);
        gbc.writeMem(0x9be5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x4a57, gbc.sp());
        EXPECT(0x9be7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9be5));
        EXPECT(0x8d, gbc.readMem(0x9be6));
        // CB 8D 003C
        gbc.setState(0x3e63, 0x5fa, 0x4750, 0x552d, 0x5483, 0x8992, 0x0, 0x1);
        gbc.writeMem(0x3e63, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x5fa, gbc.sp());
        EXPECT(0x3e65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 003D
        gbc.setState(0x12f8, 0x53c2, 0x6950, 0x31b4, 0xceae, 0xa44b, 0x0, 0x0);
        gbc.writeMem(0x12f8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x53c2, gbc.sp());
        EXPECT(0x12fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 003E
        gbc.setState(0x164c, 0x73be, 0xea0, 0xe2fe, 0x427, 0x60e1, 0x1, 0x0);
        gbc.writeMem(0x164c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x73be, gbc.sp());
        EXPECT(0x164e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0040
        gbc.setState(0x21cf, 0x5b81, 0xf290, 0x17ff, 0x9be3, 0xe90c, 0x0, 0x1);
        gbc.writeMem(0x21cf, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x5b81, gbc.sp());
        EXPECT(0x21d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0041
        gbc.setState(0x9db3, 0xa96c, 0x93f0, 0x51f7, 0xca02, 0x1316, 0x1, 0x0);
        gbc.writeMem(0x9db3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xa96c, gbc.sp());
        EXPECT(0x9db5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9db3));
        EXPECT(0x8d, gbc.readMem(0x9db4));
        // CB 8D 0042
        gbc.setState(0xa355, 0xe698, 0xf090, 0xad92, 0x4ba7, 0x49d2, 0x0, 0x0);
        gbc.writeMem(0xa355, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xe698, gbc.sp());
        EXPECT(0xa357, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa355));
        EXPECT(0x8d, gbc.readMem(0xa356));
        // CB 8D 0043
        gbc.setState(0x54db, 0x3c8b, 0x19d0, 0x695a, 0x264c, 0x4888, 0x1, 0x0);
        gbc.writeMem(0x54db, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x3c8b, gbc.sp());
        EXPECT(0x54dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0044
        gbc.setState(0x844c, 0x864f, 0x2950, 0xe8e0, 0xed0e, 0x600f, 0x0, 0x0);
        gbc.writeMem(0x844c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x864f, gbc.sp());
        EXPECT(0x844e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x844c));
        EXPECT(0x8d, gbc.readMem(0x844d));
        // CB 8D 0045
        gbc.setState(0x3d66, 0x523c, 0x5b20, 0xb367, 0xef48, 0x98c9, 0x0, 0x1);
        gbc.writeMem(0x3d66, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x523c, gbc.sp());
        EXPECT(0x3d68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0046
        gbc.setState(0x615, 0xad71, 0x8c80, 0x838f, 0x4ebe, 0x96c2, 0x0, 0x0);
        gbc.writeMem(0x615, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xad71, gbc.sp());
        EXPECT(0x617, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0047
        gbc.setState(0xc452, 0xd501, 0xec0, 0xa29c, 0x7c45, 0x1edf, 0x1, 0x0);
        gbc.writeMem(0xc452, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xd501, gbc.sp());
        EXPECT(0xc454, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc452));
        EXPECT(0x8d, gbc.readMem(0xc453));
        // CB 8D 0048
        gbc.setState(0x13a, 0xd8bd, 0xe670, 0xcbbd, 0x6fd2, 0x829c, 0x0, 0x0);
        gbc.writeMem(0x13a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xd8bd, gbc.sp());
        EXPECT(0x13c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0049
        gbc.setState(0x7890, 0xb0bf, 0x74a0, 0x75fc, 0x32e4, 0x65d5, 0x0, 0x0);
        gbc.writeMem(0x7890, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xb0bf, gbc.sp());
        EXPECT(0x7892, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 004A
        gbc.setState(0x7c8a, 0xb8a, 0x4c60, 0xb1e6, 0xae5c, 0x3e7, 0x1, 0x0);
        gbc.writeMem(0x7c8a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xb8a, gbc.sp());
        EXPECT(0x7c8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 004B
        gbc.setState(0x5ece, 0xb6d8, 0xe090, 0x5fcb, 0x1de8, 0x64d7, 0x0, 0x0);
        gbc.writeMem(0x5ece, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xb6d8, gbc.sp());
        EXPECT(0x5ed0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 004C
        gbc.setState(0x365d, 0x1431, 0xd000, 0x6d79, 0x8247, 0x30f2, 0x0, 0x1);
        gbc.writeMem(0x365d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x1431, gbc.sp());
        EXPECT(0x365f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 004D
        gbc.setState(0xae, 0xc978, 0x6160, 0xcd87, 0xc4e6, 0x24d3, 0x0, 0x1);
        gbc.writeMem(0xae, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xc978, gbc.sp());
        EXPECT(0xb0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 004E
        gbc.setState(0x3705, 0x83cc, 0xdca0, 0xb6d3, 0x221d, 0x7bcd, 0x1, 0x1);
        gbc.writeMem(0x3705, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x83cc, gbc.sp());
        EXPECT(0x3707, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 004F
        gbc.setState(0x5dc9, 0x6a51, 0xba10, 0x1445, 0x586f, 0xe962, 0x1, 0x0);
        gbc.writeMem(0x5dc9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x6a51, gbc.sp());
        EXPECT(0x5dcb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0050
        gbc.setState(0xd56a, 0x3f45, 0x1100, 0x668f, 0xb67d, 0x53e7, 0x1, 0x0);
        gbc.writeMem(0xd56a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x3f45, gbc.sp());
        EXPECT(0xd56c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd56a));
        EXPECT(0x8d, gbc.readMem(0xd56b));
        // CB 8D 0051
        gbc.setState(0xd9c0, 0xd743, 0x1c50, 0xc1e, 0x1d1f, 0xce2c, 0x0, 0x1);
        gbc.writeMem(0xd9c0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xd743, gbc.sp());
        EXPECT(0xd9c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9c0));
        EXPECT(0x8d, gbc.readMem(0xd9c1));
        // CB 8D 0052
        gbc.setState(0xcc05, 0x5ff3, 0x7220, 0x49b9, 0x507, 0xd05f, 0x1, 0x0);
        gbc.writeMem(0xcc05, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x5ff3, gbc.sp());
        EXPECT(0xcc07, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc05));
        EXPECT(0x8d, gbc.readMem(0xcc06));
        // CB 8D 0055
        gbc.setState(0xd838, 0x564, 0xfcd0, 0x13e9, 0xce6e, 0xfe67, 0x1, 0x0);
        gbc.writeMem(0xd838, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x564, gbc.sp());
        EXPECT(0xd83a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd838));
        EXPECT(0x8d, gbc.readMem(0xd839));
        // CB 8D 0056
        gbc.setState(0x558d, 0xe80, 0x61b0, 0xbcbd, 0x3407, 0xa376, 0x0, 0x0);
        gbc.writeMem(0x558d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xe80, gbc.sp());
        EXPECT(0x558f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0057
        gbc.setState(0x75cf, 0xe408, 0x70, 0xa358, 0xe5de, 0x3dad, 0x0, 0x0);
        gbc.writeMem(0x75cf, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xe408, gbc.sp());
        EXPECT(0x75d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0059
        gbc.setState(0xd83c, 0xb7dc, 0x2d30, 0x8b5f, 0xee57, 0x15bf, 0x1, 0x1);
        gbc.writeMem(0xd83c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xb7dc, gbc.sp());
        EXPECT(0xd83e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd83c));
        EXPECT(0x8d, gbc.readMem(0xd83d));
        // CB 8D 005A
        gbc.setState(0x7377, 0x962f, 0xb490, 0x9f86, 0xfcab, 0xc260, 0x0, 0x0);
        gbc.writeMem(0x7377, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x962f, gbc.sp());
        EXPECT(0x7379, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 005B
        gbc.setState(0x3487, 0x6417, 0x1b10, 0x827a, 0x54d, 0xa1cd, 0x1, 0x0);
        gbc.writeMem(0x3487, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x6417, gbc.sp());
        EXPECT(0x3489, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 005C
        gbc.setState(0x380, 0x660c, 0x4650, 0x7d93, 0x9740, 0x28d6, 0x1, 0x1);
        gbc.writeMem(0x380, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x660c, gbc.sp());
        EXPECT(0x382, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 005D
        gbc.setState(0x77bb, 0x6b4d, 0x1430, 0x19bd, 0xcdd5, 0x7d5a, 0x0, 0x0);
        gbc.writeMem(0x77bb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x6b4d, gbc.sp());
        EXPECT(0x77bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 005E
        gbc.setState(0x66f0, 0xb47d, 0xcf60, 0x29e9, 0xe4c8, 0x26a3, 0x1, 0x1);
        gbc.writeMem(0x66f0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xb47d, gbc.sp());
        EXPECT(0x66f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 005F
        gbc.setState(0x2ab7, 0xd6bc, 0x1100, 0x5948, 0x8f82, 0x6778, 0x1, 0x1);
        gbc.writeMem(0x2ab7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xd6bc, gbc.sp());
        EXPECT(0x2ab9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0060
        gbc.setState(0x56f6, 0xea03, 0xf810, 0x6a7, 0xb68c, 0x1aee, 0x0, 0x1);
        gbc.writeMem(0x56f6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xea03, gbc.sp());
        EXPECT(0x56f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0061
        gbc.setState(0xacba, 0x4d95, 0xbb50, 0x37e4, 0x3c73, 0xc96, 0x1, 0x1);
        gbc.writeMem(0xacba, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x4d95, gbc.sp());
        EXPECT(0xacbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacba));
        EXPECT(0x8d, gbc.readMem(0xacbb));
        // CB 8D 0062
        gbc.setState(0x6d08, 0xc5e2, 0xf3c0, 0xbfea, 0x5371, 0x139, 0x1, 0x0);
        gbc.writeMem(0x6d08, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xc5e2, gbc.sp());
        EXPECT(0x6d0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0063
        gbc.setState(0x62b7, 0x5352, 0x40e0, 0x14da, 0x5bcd, 0xf0df, 0x1, 0x1);
        gbc.writeMem(0x62b7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x5352, gbc.sp());
        EXPECT(0x62b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0065
        gbc.setState(0x3acf, 0xbc2f, 0x7aa0, 0xd5a8, 0x9a08, 0x5164, 0x1, 0x0);
        gbc.writeMem(0x3acf, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xbc2f, gbc.sp());
        EXPECT(0x3ad1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0066
        gbc.setState(0x6e2d, 0x6c9a, 0xa200, 0xfca6, 0x682f, 0xd6ee, 0x1, 0x1);
        gbc.writeMem(0x6e2d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x6c9a, gbc.sp());
        EXPECT(0x6e2f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0067
        gbc.setState(0x381f, 0x5e11, 0x6a00, 0x434b, 0xdc34, 0xa822, 0x0, 0x1);
        gbc.writeMem(0x381f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x5e11, gbc.sp());
        EXPECT(0x3821, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0068
        gbc.setState(0xd61c, 0xf016, 0x3540, 0xeb17, 0xdeed, 0xcb89, 0x1, 0x1);
        gbc.writeMem(0xd61c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xf016, gbc.sp());
        EXPECT(0xd61e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd61c));
        EXPECT(0x8d, gbc.readMem(0xd61d));
        // CB 8D 006A
        gbc.setState(0x54dc, 0x2f94, 0x3490, 0x98ff, 0x2ade, 0xcd2b, 0x0, 0x1);
        gbc.writeMem(0x54dc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x2f94, gbc.sp());
        EXPECT(0x54de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 006B
        gbc.setState(0x74f0, 0xa3d3, 0xe8a0, 0x150c, 0xd63a, 0xf307, 0x0, 0x0);
        gbc.writeMem(0x74f0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xa3d3, gbc.sp());
        EXPECT(0x74f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 006C
        gbc.setState(0xaa9c, 0x8d90, 0xe090, 0x201a, 0x69d7, 0xb8c4, 0x0, 0x0);
        gbc.writeMem(0xaa9c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x8d90, gbc.sp());
        EXPECT(0xaa9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa9c));
        EXPECT(0x8d, gbc.readMem(0xaa9d));
        // CB 8D 006D
        gbc.setState(0x777a, 0x293c, 0x1e60, 0x74f8, 0xe8f7, 0xc4c3, 0x0, 0x1);
        gbc.writeMem(0x777a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x293c, gbc.sp());
        EXPECT(0x777c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 006F
        gbc.setState(0x2904, 0x727e, 0x50f0, 0x3e89, 0xeff6, 0xd178, 0x0, 0x0);
        gbc.writeMem(0x2904, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x727e, gbc.sp());
        EXPECT(0x2906, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0070
        gbc.setState(0x2fe0, 0x5a1d, 0x3020, 0x69c3, 0xd35c, 0xe5fd, 0x1, 0x1);
        gbc.writeMem(0x2fe0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x5a1d, gbc.sp());
        EXPECT(0x2fe2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0071
        gbc.setState(0x2593, 0x7ecb, 0x4920, 0xd508, 0xed37, 0x4b3f, 0x1, 0x1);
        gbc.writeMem(0x2593, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x7ecb, gbc.sp());
        EXPECT(0x2595, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0072
        gbc.setState(0x1f20, 0x35a4, 0x2b90, 0xf1d7, 0x5f43, 0xf40a, 0x1, 0x1);
        gbc.writeMem(0x1f20, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x35a4, gbc.sp());
        EXPECT(0x1f22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0073
        gbc.setState(0x418d, 0xdc3a, 0x71a0, 0x7e35, 0x5a06, 0x5b21, 0x0, 0x0);
        gbc.writeMem(0x418d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xdc3a, gbc.sp());
        EXPECT(0x418f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0074
        gbc.setState(0xa31d, 0x150, 0xfa60, 0x63b, 0xc189, 0x9558, 0x1, 0x1);
        gbc.writeMem(0xa31d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x150, gbc.sp());
        EXPECT(0xa31f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa31d));
        EXPECT(0x8d, gbc.readMem(0xa31e));
        // CB 8D 0075
        gbc.setState(0x4ba4, 0xeed, 0xc190, 0x908a, 0xad1a, 0xd477, 0x1, 0x1);
        gbc.writeMem(0x4ba4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xeed, gbc.sp());
        EXPECT(0x4ba6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0076
        gbc.setState(0x4f7a, 0x866e, 0xfa40, 0x917d, 0xaa1, 0x5534, 0x1, 0x0);
        gbc.writeMem(0x4f7a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x866e, gbc.sp());
        EXPECT(0x4f7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0077
        gbc.setState(0x71f4, 0x76a0, 0xdd50, 0x5264, 0xadfb, 0xda33, 0x0, 0x0);
        gbc.writeMem(0x71f4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x76a0, gbc.sp());
        EXPECT(0x71f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0078
        gbc.setState(0x4540, 0xaa54, 0xc690, 0x797f, 0xf2b0, 0xd0ce, 0x1, 0x1);
        gbc.writeMem(0x4540, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xaa54, gbc.sp());
        EXPECT(0x4542, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0079
        gbc.setState(0xe2ed, 0xc56a, 0xce60, 0x38f4, 0xf400, 0x4266, 0x1, 0x0);
        gbc.writeMem(0xe2ed, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xc56a, gbc.sp());
        EXPECT(0xe2ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2ed));
        EXPECT(0x8d, gbc.readMem(0xe2ee));
        // CB 8D 007A
        gbc.setState(0x6a02, 0x582f, 0xb440, 0xe468, 0xee83, 0x9c91, 0x0, 0x1);
        gbc.writeMem(0x6a02, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x582f, gbc.sp());
        EXPECT(0x6a04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 007B
        gbc.setState(0x2581, 0xaedc, 0x20, 0xcc27, 0x332c, 0x6b4, 0x1, 0x1);
        gbc.writeMem(0x2581, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xaedc, gbc.sp());
        EXPECT(0x2583, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 007C
        gbc.setState(0xcd8d, 0x61db, 0xd940, 0x49c2, 0x8543, 0x28a1, 0x1, 0x0);
        gbc.writeMem(0xcd8d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x61db, gbc.sp());
        EXPECT(0xcd8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd8d));
        EXPECT(0x8d, gbc.readMem(0xcd8e));
        // CB 8D 007E
        gbc.setState(0xa4b, 0x9e77, 0x8dd0, 0x41f8, 0x3b01, 0xf808, 0x0, 0x1);
        gbc.writeMem(0xa4b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x9e77, gbc.sp());
        EXPECT(0xa4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 007F
        gbc.setState(0xcf1, 0x5e31, 0x6eb0, 0xfbee, 0xcabd, 0x8e64, 0x0, 0x0);
        gbc.writeMem(0xcf1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x5e31, gbc.sp());
        EXPECT(0xcf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0080
        gbc.setState(0x7b83, 0x717b, 0xeb20, 0x3a1e, 0x472e, 0x88c9, 0x1, 0x1);
        gbc.writeMem(0x7b83, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x717b, gbc.sp());
        EXPECT(0x7b85, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0081
        gbc.setState(0x1755, 0xf185, 0x4aa0, 0x30f, 0x39e0, 0xeb89, 0x0, 0x0);
        gbc.writeMem(0x1755, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xf185, gbc.sp());
        EXPECT(0x1757, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0082
        gbc.setState(0x7e6c, 0x72ca, 0xadd0, 0x1be5, 0x8084, 0xd1c, 0x1, 0x1);
        gbc.writeMem(0x7e6c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x72ca, gbc.sp());
        EXPECT(0x7e6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0083
        gbc.setState(0x1090, 0xf89, 0xb550, 0xeed4, 0xc79e, 0x84a9, 0x0, 0x1);
        gbc.writeMem(0x1090, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xf89, gbc.sp());
        EXPECT(0x1092, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0084
        gbc.setState(0x845, 0x3804, 0x9840, 0xa99b, 0xcc25, 0x4abb, 0x0, 0x1);
        gbc.writeMem(0x845, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x3804, gbc.sp());
        EXPECT(0x847, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0085
        gbc.setState(0xc828, 0xfbcf, 0xbb10, 0x68ea, 0xfbf4, 0xf411, 0x0, 0x1);
        gbc.writeMem(0xc828, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xfbcf, gbc.sp());
        EXPECT(0xc82a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc828));
        EXPECT(0x8d, gbc.readMem(0xc829));
        // CB 8D 0086
        gbc.setState(0x234a, 0x3d53, 0xc700, 0x70f6, 0xc662, 0x7cd1, 0x1, 0x0);
        gbc.writeMem(0x234a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x3d53, gbc.sp());
        EXPECT(0x234c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0087
        gbc.setState(0x5fd6, 0x6062, 0xb070, 0x672c, 0xe179, 0x7ecd, 0x1, 0x0);
        gbc.writeMem(0x5fd6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x6062, gbc.sp());
        EXPECT(0x5fd8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0089
        gbc.setState(0xd55a, 0x961d, 0x68a0, 0xb8f9, 0x4b86, 0x7189, 0x0, 0x0);
        gbc.writeMem(0xd55a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x961d, gbc.sp());
        EXPECT(0xd55c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd55a));
        EXPECT(0x8d, gbc.readMem(0xd55b));
        // CB 8D 008B
        gbc.setState(0xa2a5, 0x6b03, 0x76a0, 0x1706, 0xf6d5, 0xed9f, 0x0, 0x0);
        gbc.writeMem(0xa2a5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x6b03, gbc.sp());
        EXPECT(0xa2a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2a5));
        EXPECT(0x8d, gbc.readMem(0xa2a6));
        // CB 8D 008C
        gbc.setState(0x1fbb, 0xaa41, 0x8710, 0x6869, 0x1a65, 0xe82e, 0x1, 0x0);
        gbc.writeMem(0x1fbb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xaa41, gbc.sp());
        EXPECT(0x1fbd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 008D
        gbc.setState(0x6dce, 0x4a79, 0x1090, 0x63de, 0x5fad, 0x4909, 0x0, 0x0);
        gbc.writeMem(0x6dce, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x4a79, gbc.sp());
        EXPECT(0x6dd0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 008E
        gbc.setState(0x5dd, 0xe35, 0x7ac0, 0xc9a5, 0x8dd6, 0x27cb, 0x0, 0x0);
        gbc.writeMem(0x5dd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xe35, gbc.sp());
        EXPECT(0x5df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 008F
        gbc.setState(0x2039, 0x8ef3, 0x3a90, 0xe49c, 0x582c, 0x485d, 0x1, 0x0);
        gbc.writeMem(0x2039, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x8ef3, gbc.sp());
        EXPECT(0x203b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0090
        gbc.setState(0x1a88, 0x43be, 0xf420, 0x2a94, 0x605f, 0xdce8, 0x1, 0x1);
        gbc.writeMem(0x1a88, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x43be, gbc.sp());
        EXPECT(0x1a8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0091
        gbc.setState(0x86b5, 0x7a14, 0x2380, 0x2dd7, 0xc09f, 0x3f6a, 0x1, 0x0);
        gbc.writeMem(0x86b5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x7a14, gbc.sp());
        EXPECT(0x86b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86b5));
        EXPECT(0x8d, gbc.readMem(0x86b6));
        // CB 8D 0092
        gbc.setState(0x8b6d, 0x2426, 0x4dd0, 0x2c38, 0x5653, 0xe7cd, 0x0, 0x1);
        gbc.writeMem(0x8b6d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x2426, gbc.sp());
        EXPECT(0x8b6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b6d));
        EXPECT(0x8d, gbc.readMem(0x8b6e));
        // CB 8D 0093
        gbc.setState(0x9e13, 0x8372, 0x1190, 0xc7bc, 0x2d46, 0x62fe, 0x0, 0x0);
        gbc.writeMem(0x9e13, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x8372, gbc.sp());
        EXPECT(0x9e15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e13));
        EXPECT(0x8d, gbc.readMem(0x9e14));
        // CB 8D 0094
        gbc.setState(0xc124, 0x3584, 0xd000, 0xbea6, 0x1476, 0x861a, 0x1, 0x0);
        gbc.writeMem(0xc124, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x3584, gbc.sp());
        EXPECT(0xc126, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc124));
        EXPECT(0x8d, gbc.readMem(0xc125));
        // CB 8D 0095
        gbc.setState(0xcf48, 0x6644, 0x8320, 0x1122, 0x10e6, 0x5e42, 0x1, 0x1);
        gbc.writeMem(0xcf48, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x6644, gbc.sp());
        EXPECT(0xcf4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf48));
        EXPECT(0x8d, gbc.readMem(0xcf49));
        // CB 8D 0096
        gbc.setState(0x4e5a, 0x9ceb, 0xff70, 0x9b45, 0xca5b, 0x54ab, 0x1, 0x0);
        gbc.writeMem(0x4e5a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x9ceb, gbc.sp());
        EXPECT(0x4e5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0097
        gbc.setState(0x2927, 0x1753, 0xca0, 0xe29d, 0x6126, 0xcac9, 0x0, 0x0);
        gbc.writeMem(0x2927, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x1753, gbc.sp());
        EXPECT(0x2929, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0098
        gbc.setState(0xcaf1, 0x7be4, 0x58f0, 0x229b, 0x5f1e, 0xc468, 0x0, 0x1);
        gbc.writeMem(0xcaf1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x7be4, gbc.sp());
        EXPECT(0xcaf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaf1));
        EXPECT(0x8d, gbc.readMem(0xcaf2));
        // CB 8D 0099
        gbc.setState(0x2941, 0xb4b6, 0x3cd0, 0x6544, 0x7132, 0x6827, 0x1, 0x1);
        gbc.writeMem(0x2941, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xb4b6, gbc.sp());
        EXPECT(0x2943, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 009A
        gbc.setState(0x4158, 0xf88c, 0x62f0, 0xb4a3, 0x84e3, 0xd11b, 0x0, 0x0);
        gbc.writeMem(0x4158, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xf88c, gbc.sp());
        EXPECT(0x415a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 009B
        gbc.setState(0x7a1c, 0xcead, 0x8fe0, 0x5337, 0xbd9a, 0xad2d, 0x1, 0x0);
        gbc.writeMem(0x7a1c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xcead, gbc.sp());
        EXPECT(0x7a1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 009C
        gbc.setState(0x3ff0, 0x29bd, 0x37c0, 0x4583, 0xc3ec, 0x53c2, 0x1, 0x1);
        gbc.writeMem(0x3ff0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x29bd, gbc.sp());
        EXPECT(0x3ff2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 009D
        gbc.setState(0x1db6, 0x543e, 0x9af0, 0x9839, 0x37a1, 0xbd14, 0x0, 0x0);
        gbc.writeMem(0x1db6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x543e, gbc.sp());
        EXPECT(0x1db8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 009E
        gbc.setState(0x5c33, 0x5de6, 0xac40, 0xf0b0, 0x536e, 0xd3, 0x1, 0x0);
        gbc.writeMem(0x5c33, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x5de6, gbc.sp());
        EXPECT(0x5c35, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 009F
        gbc.setState(0x277f, 0xf64c, 0x8640, 0x141b, 0x55c4, 0xaf38, 0x0, 0x1);
        gbc.writeMem(0x277f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xf64c, gbc.sp());
        EXPECT(0x2781, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00A1
        gbc.setState(0x7c6, 0xe362, 0xb70, 0x2bdf, 0x2f3d, 0xf68f, 0x0, 0x1);
        gbc.writeMem(0x7c6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xe362, gbc.sp());
        EXPECT(0x7c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00A3
        gbc.setState(0x9da1, 0xd02c, 0x9740, 0x1f77, 0x5c08, 0x82a5, 0x0, 0x0);
        gbc.writeMem(0x9da1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xd02c, gbc.sp());
        EXPECT(0x9da3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9da1));
        EXPECT(0x8d, gbc.readMem(0x9da2));
        // CB 8D 00A4
        gbc.setState(0xd808, 0xadb7, 0xf070, 0x71df, 0x4b9c, 0x8c60, 0x0, 0x1);
        gbc.writeMem(0xd808, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xadb7, gbc.sp());
        EXPECT(0xd80a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd808));
        EXPECT(0x8d, gbc.readMem(0xd809));
        // CB 8D 00A5
        gbc.setState(0x65fc, 0xc33, 0xa30, 0xcdab, 0x4f44, 0xdf6c, 0x0, 0x0);
        gbc.writeMem(0x65fc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xc33, gbc.sp());
        EXPECT(0x65fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00A6
        gbc.setState(0x499f, 0x2bd, 0xaab0, 0xe7d5, 0xb7de, 0xfaf5, 0x0, 0x1);
        gbc.writeMem(0x499f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x2bd, gbc.sp());
        EXPECT(0x49a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00A7
        gbc.setState(0x6f00, 0x4947, 0xd0c0, 0xa338, 0xed95, 0x5250, 0x1, 0x1);
        gbc.writeMem(0x6f00, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x4947, gbc.sp());
        EXPECT(0x6f02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00A8
        gbc.setState(0x77da, 0x5feb, 0x1f70, 0x92af, 0xf763, 0x2526, 0x0, 0x0);
        gbc.writeMem(0x77da, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x5feb, gbc.sp());
        EXPECT(0x77dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00A9
        gbc.setState(0x2872, 0xb589, 0x15e0, 0x8208, 0x9271, 0xa5e0, 0x1, 0x1);
        gbc.writeMem(0x2872, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xb589, gbc.sp());
        EXPECT(0x2874, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00AA
        gbc.setState(0xba6b, 0x7221, 0x9d90, 0xd109, 0x3357, 0x5ba2, 0x1, 0x1);
        gbc.writeMem(0xba6b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x7221, gbc.sp());
        EXPECT(0xba6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba6b));
        EXPECT(0x8d, gbc.readMem(0xba6c));
        // CB 8D 00AB
        gbc.setState(0xd3f, 0x2687, 0x5760, 0x1da2, 0x77dd, 0xdebc, 0x0, 0x1);
        gbc.writeMem(0xd3f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x2687, gbc.sp());
        EXPECT(0xd41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00AC
        gbc.setState(0x4eae, 0x9d70, 0xdb90, 0xc4dd, 0x8fd0, 0x729e, 0x1, 0x0);
        gbc.writeMem(0x4eae, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x9d70, gbc.sp());
        EXPECT(0x4eb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00AD
        gbc.setState(0x818e, 0x4425, 0x6720, 0x412a, 0x5a8c, 0x55d1, 0x1, 0x0);
        gbc.writeMem(0x818e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x4425, gbc.sp());
        EXPECT(0x8190, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x818e));
        EXPECT(0x8d, gbc.readMem(0x818f));
        // CB 8D 00AE
        gbc.setState(0xd4a1, 0x7236, 0xc880, 0x7e65, 0x477f, 0xf469, 0x1, 0x0);
        gbc.writeMem(0xd4a1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x7236, gbc.sp());
        EXPECT(0xd4a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4a1));
        EXPECT(0x8d, gbc.readMem(0xd4a2));
        // CB 8D 00AF
        gbc.setState(0xadaa, 0x9964, 0x6060, 0x3979, 0x26f6, 0x6e76, 0x1, 0x0);
        gbc.writeMem(0xadaa, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x9964, gbc.sp());
        EXPECT(0xadac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadaa));
        EXPECT(0x8d, gbc.readMem(0xadab));
        // CB 8D 00B0
        gbc.setState(0xded6, 0x87e3, 0x41d0, 0xdb50, 0x2999, 0xe7b5, 0x0, 0x0);
        gbc.writeMem(0xded6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x87e3, gbc.sp());
        EXPECT(0xded8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xded6));
        EXPECT(0x8d, gbc.readMem(0xded7));
        // CB 8D 00B1
        gbc.setState(0x930, 0xe206, 0x9490, 0x2826, 0x21c3, 0xfc3e, 0x1, 0x0);
        gbc.writeMem(0x930, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xe206, gbc.sp());
        EXPECT(0x932, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00B2
        gbc.setState(0x5d94, 0x5f79, 0xe140, 0xb242, 0x468b, 0xf1e6, 0x0, 0x0);
        gbc.writeMem(0x5d94, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x5f79, gbc.sp());
        EXPECT(0x5d96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00B3
        gbc.setState(0xea03, 0xf2c1, 0xa590, 0x44d6, 0xe644, 0xd518, 0x1, 0x1);
        gbc.writeMem(0xea03, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xf2c1, gbc.sp());
        EXPECT(0xea05, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea03));
        EXPECT(0x8d, gbc.readMem(0xea04));
        // CB 8D 00B4
        gbc.setState(0x128c, 0xaed0, 0x39e0, 0xf808, 0x117b, 0x748, 0x0, 0x0);
        gbc.writeMem(0x128c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xaed0, gbc.sp());
        EXPECT(0x128e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00B5
        gbc.setState(0x8be, 0xa85f, 0x53e0, 0xf721, 0x7e30, 0x75fe, 0x1, 0x1);
        gbc.writeMem(0x8be, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xa85f, gbc.sp());
        EXPECT(0x8c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00B6
        gbc.setState(0xd601, 0x4cb5, 0x4d50, 0xe3ae, 0x8246, 0xde20, 0x1, 0x0);
        gbc.writeMem(0xd601, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x4cb5, gbc.sp());
        EXPECT(0xd603, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd601));
        EXPECT(0x8d, gbc.readMem(0xd602));
        // CB 8D 00B7
        gbc.setState(0xd43e, 0xf494, 0x9010, 0xb3b8, 0x3c3f, 0xb539, 0x0, 0x1);
        gbc.writeMem(0xd43e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xf494, gbc.sp());
        EXPECT(0xd440, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd43e));
        EXPECT(0x8d, gbc.readMem(0xd43f));
        // CB 8D 00B8
        gbc.setState(0x1e03, 0xb81f, 0xf480, 0x9fb1, 0x9678, 0x89b6, 0x1, 0x0);
        gbc.writeMem(0x1e03, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xb81f, gbc.sp());
        EXPECT(0x1e05, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00B9
        gbc.setState(0xd247, 0xd7d7, 0xd720, 0x29a3, 0x52f7, 0xfab6, 0x1, 0x0);
        gbc.writeMem(0xd247, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xd7d7, gbc.sp());
        EXPECT(0xd249, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd247));
        EXPECT(0x8d, gbc.readMem(0xd248));
        // CB 8D 00BA
        gbc.setState(0x95f2, 0xa18e, 0x5740, 0x87ff, 0xe701, 0x1b6f, 0x0, 0x0);
        gbc.writeMem(0x95f2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xa18e, gbc.sp());
        EXPECT(0x95f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95f2));
        EXPECT(0x8d, gbc.readMem(0x95f3));
        // CB 8D 00BC
        gbc.setState(0x3349, 0x1557, 0x30c0, 0xb839, 0x99d7, 0x71ba, 0x1, 0x0);
        gbc.writeMem(0x3349, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x1557, gbc.sp());
        EXPECT(0x334b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00BD
        gbc.setState(0x27ca, 0xdc67, 0x9580, 0x424a, 0x3b34, 0xea29, 0x1, 0x0);
        gbc.writeMem(0x27ca, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xdc67, gbc.sp());
        EXPECT(0x27cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00BE
        gbc.setState(0x8ae2, 0x43d7, 0xce0, 0x3231, 0xfa11, 0xed73, 0x1, 0x0);
        gbc.writeMem(0x8ae2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x43d7, gbc.sp());
        EXPECT(0x8ae4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ae2));
        EXPECT(0x8d, gbc.readMem(0x8ae3));
        // CB 8D 00BF
        gbc.setState(0xa93b, 0x1829, 0x48d0, 0x7b04, 0x3436, 0xf4d5, 0x0, 0x0);
        gbc.writeMem(0xa93b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x1829, gbc.sp());
        EXPECT(0xa93d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa93b));
        EXPECT(0x8d, gbc.readMem(0xa93c));
        // CB 8D 00C0
        gbc.setState(0x7a45, 0x1a60, 0x1f20, 0x35ab, 0x61de, 0x9e2, 0x1, 0x0);
        gbc.writeMem(0x7a45, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x1a60, gbc.sp());
        EXPECT(0x7a47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00C1
        gbc.setState(0xad5e, 0xc5d1, 0x8f80, 0xdcc8, 0xbd7d, 0x985f, 0x1, 0x0);
        gbc.writeMem(0xad5e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xc5d1, gbc.sp());
        EXPECT(0xad60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad5e));
        EXPECT(0x8d, gbc.readMem(0xad5f));
        // CB 8D 00C3
        gbc.setState(0xeb8a, 0x9fa7, 0xdff0, 0xc0fe, 0x119f, 0xa436, 0x0, 0x0);
        gbc.writeMem(0xeb8a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x9fa7, gbc.sp());
        EXPECT(0xeb8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb8a));
        EXPECT(0x8d, gbc.readMem(0xeb8b));
        // CB 8D 00C4
        gbc.setState(0x5c7e, 0x7b5, 0x7ed0, 0x7428, 0xd71, 0x86db, 0x1, 0x0);
        gbc.writeMem(0x5c7e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x7b5, gbc.sp());
        EXPECT(0x5c80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00C5
        gbc.setState(0xe070, 0xc0c8, 0x2420, 0x2585, 0x6dcf, 0x13ff, 0x0, 0x1);
        gbc.writeMem(0xe070, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xc0c8, gbc.sp());
        EXPECT(0xe072, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe070));
        EXPECT(0x8d, gbc.readMem(0xe071));
        // CB 8D 00C6
        gbc.setState(0x6395, 0xa59d, 0x9e40, 0xc3bb, 0x65a5, 0xb241, 0x0, 0x1);
        gbc.writeMem(0x6395, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xa59d, gbc.sp());
        EXPECT(0x6397, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00C8
        gbc.setState(0xd8eb, 0x70bf, 0xeda0, 0xf612, 0xf268, 0x426a, 0x0, 0x1);
        gbc.writeMem(0xd8eb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x70bf, gbc.sp());
        EXPECT(0xd8ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8eb));
        EXPECT(0x8d, gbc.readMem(0xd8ec));
        // CB 8D 00C9
        gbc.setState(0x97bb, 0xae2b, 0x3e80, 0xc684, 0xb719, 0x47b4, 0x1, 0x1);
        gbc.writeMem(0x97bb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xae2b, gbc.sp());
        EXPECT(0x97bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97bb));
        EXPECT(0x8d, gbc.readMem(0x97bc));
        // CB 8D 00CA
        gbc.setState(0xc7fd, 0x82b8, 0x23b0, 0x3648, 0x3596, 0xbcb2, 0x1, 0x1);
        gbc.writeMem(0xc7fd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x82b8, gbc.sp());
        EXPECT(0xc7ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7fd));
        EXPECT(0x8d, gbc.readMem(0xc7fe));
        // CB 8D 00CB
        gbc.setState(0xcf84, 0xb8aa, 0xdd50, 0xc9ad, 0x41e9, 0x483e, 0x0, 0x1);
        gbc.writeMem(0xcf84, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xb8aa, gbc.sp());
        EXPECT(0xcf86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf84));
        EXPECT(0x8d, gbc.readMem(0xcf85));
        // CB 8D 00CC
        gbc.setState(0x4437, 0x332c, 0x6b50, 0x3bd1, 0x451d, 0x1763, 0x1, 0x0);
        gbc.writeMem(0x4437, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x332c, gbc.sp());
        EXPECT(0x4439, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00CD
        gbc.setState(0x63d8, 0x853b, 0xbee0, 0xc263, 0xd2fb, 0xab70, 0x0, 0x1);
        gbc.writeMem(0x63d8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x853b, gbc.sp());
        EXPECT(0x63da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00CE
        gbc.setState(0xc550, 0x76d1, 0x58b0, 0x55cb, 0xa993, 0xd644, 0x1, 0x0);
        gbc.writeMem(0xc550, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x76d1, gbc.sp());
        EXPECT(0xc552, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc550));
        EXPECT(0x8d, gbc.readMem(0xc551));
        // CB 8D 00CF
        gbc.setState(0x73f5, 0xc6b2, 0xf800, 0x8040, 0xc965, 0xdba, 0x1, 0x0);
        gbc.writeMem(0x73f5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xc6b2, gbc.sp());
        EXPECT(0x73f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00D0
        gbc.setState(0x5c5, 0xe5d9, 0x3dd0, 0x393b, 0x100f, 0x4593, 0x0, 0x1);
        gbc.writeMem(0x5c5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xe5d9, gbc.sp());
        EXPECT(0x5c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00D1
        gbc.setState(0x6e9c, 0x7ee5, 0x5f0, 0x5163, 0xdf87, 0xda04, 0x1, 0x1);
        gbc.writeMem(0x6e9c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x7ee5, gbc.sp());
        EXPECT(0x6e9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00D2
        gbc.setState(0x3db0, 0xf8d5, 0xb150, 0xa735, 0x2371, 0x677, 0x1, 0x1);
        gbc.writeMem(0x3db0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xf8d5, gbc.sp());
        EXPECT(0x3db2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00D3
        gbc.setState(0x8d75, 0x2c04, 0xc7a0, 0x48ba, 0x3e1c, 0xc755, 0x0, 0x1);
        gbc.writeMem(0x8d75, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x2c04, gbc.sp());
        EXPECT(0x8d77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d75));
        EXPECT(0x8d, gbc.readMem(0x8d76));
        // CB 8D 00D4
        gbc.setState(0x6bd2, 0x9625, 0xc320, 0x5ba8, 0x83dd, 0xe5ee, 0x0, 0x1);
        gbc.writeMem(0x6bd2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x9625, gbc.sp());
        EXPECT(0x6bd4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00D5
        gbc.setState(0xdebe, 0x8c78, 0x3160, 0xe5a7, 0x4a7d, 0xca5, 0x0, 0x1);
        gbc.writeMem(0xdebe, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x8c78, gbc.sp());
        EXPECT(0xdec0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdebe));
        EXPECT(0x8d, gbc.readMem(0xdebf));
        // CB 8D 00D6
        gbc.setState(0x4bcb, 0x126f, 0xe20, 0x1c70, 0xbbb3, 0x6ad5, 0x0, 0x1);
        gbc.writeMem(0x4bcb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x126f, gbc.sp());
        EXPECT(0x4bcd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00D7
        gbc.setState(0xc2e8, 0x3695, 0x66c0, 0xef10, 0xbd2e, 0x36cf, 0x0, 0x0);
        gbc.writeMem(0xc2e8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x3695, gbc.sp());
        EXPECT(0xc2ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2e8));
        EXPECT(0x8d, gbc.readMem(0xc2e9));
        // CB 8D 00D8
        gbc.setState(0x1225, 0xcf8b, 0xb910, 0xf47e, 0x260f, 0xc203, 0x1, 0x0);
        gbc.writeMem(0x1225, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xcf8b, gbc.sp());
        EXPECT(0x1227, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00D9
        gbc.setState(0xccf6, 0x5a2, 0x8cf0, 0xb828, 0xb8b4, 0x5309, 0x1, 0x0);
        gbc.writeMem(0xccf6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x5a2, gbc.sp());
        EXPECT(0xccf8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccf6));
        EXPECT(0x8d, gbc.readMem(0xccf7));
        // CB 8D 00DA
        gbc.setState(0x569f, 0xf1e2, 0x74a0, 0x686, 0xb830, 0x4e8e, 0x0, 0x0);
        gbc.writeMem(0x569f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xf1e2, gbc.sp());
        EXPECT(0x56a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00DB
        gbc.setState(0x9262, 0x7817, 0x1800, 0x362d, 0x970d, 0xa65c, 0x0, 0x0);
        gbc.writeMem(0x9262, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x7817, gbc.sp());
        EXPECT(0x9264, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9262));
        EXPECT(0x8d, gbc.readMem(0x9263));
        // CB 8D 00DC
        gbc.setState(0x9d2a, 0xaedc, 0x11b0, 0x2e36, 0xc52d, 0xd514, 0x1, 0x0);
        gbc.writeMem(0x9d2a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xaedc, gbc.sp());
        EXPECT(0x9d2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d2a));
        EXPECT(0x8d, gbc.readMem(0x9d2b));
        // CB 8D 00DD
        gbc.setState(0x2d22, 0x54b7, 0xeb70, 0x71f7, 0xd2f2, 0x2317, 0x0, 0x1);
        gbc.writeMem(0x2d22, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x54b7, gbc.sp());
        EXPECT(0x2d24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00DE
        gbc.setState(0x2b64, 0xc033, 0x1c40, 0x90ee, 0xd2dd, 0xbdff, 0x0, 0x0);
        gbc.writeMem(0x2b64, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xc033, gbc.sp());
        EXPECT(0x2b66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00DF
        gbc.setState(0xcb11, 0xc8bc, 0x2010, 0xa042, 0xdf2b, 0xa2e8, 0x0, 0x1);
        gbc.writeMem(0xcb11, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xc8bc, gbc.sp());
        EXPECT(0xcb13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb11));
        EXPECT(0x8d, gbc.readMem(0xcb12));
        // CB 8D 00E0
        gbc.setState(0xb9c, 0xcce1, 0xa5a0, 0x284f, 0x9de6, 0xa764, 0x0, 0x0);
        gbc.writeMem(0xb9c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xcce1, gbc.sp());
        EXPECT(0xb9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00E1
        gbc.setState(0x272e, 0x555a, 0x3870, 0xb83c, 0xe652, 0x99f7, 0x0, 0x1);
        gbc.writeMem(0x272e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x555a, gbc.sp());
        EXPECT(0x2730, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00E2
        gbc.setState(0xb26e, 0x622a, 0x8870, 0xfa77, 0xabea, 0xc8b7, 0x1, 0x1);
        gbc.writeMem(0xb26e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x622a, gbc.sp());
        EXPECT(0xb270, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb26e));
        EXPECT(0x8d, gbc.readMem(0xb26f));
        // CB 8D 00E3
        gbc.setState(0x1102, 0xcf05, 0x4b80, 0x5461, 0x55e3, 0xb768, 0x1, 0x1);
        gbc.writeMem(0x1102, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xcf05, gbc.sp());
        EXPECT(0x1104, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00E4
        gbc.setState(0xa252, 0xb1a5, 0xd230, 0x4825, 0xbc47, 0x68d1, 0x0, 0x0);
        gbc.writeMem(0xa252, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xb1a5, gbc.sp());
        EXPECT(0xa254, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa252));
        EXPECT(0x8d, gbc.readMem(0xa253));
        // CB 8D 00E5
        gbc.setState(0x9d9b, 0xfb41, 0xd3b0, 0xb455, 0x78c4, 0x9ea9, 0x1, 0x0);
        gbc.writeMem(0x9d9b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xfb41, gbc.sp());
        EXPECT(0x9d9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d9b));
        EXPECT(0x8d, gbc.readMem(0x9d9c));
        // CB 8D 00E6
        gbc.setState(0xd76, 0x51f3, 0x3c00, 0x3730, 0x148f, 0x19fd, 0x0, 0x0);
        gbc.writeMem(0xd76, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x51f3, gbc.sp());
        EXPECT(0xd78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00E7
        gbc.setState(0x2349, 0xff0b, 0xd990, 0x263a, 0x4640, 0x9960, 0x1, 0x0);
        gbc.writeMem(0x2349, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xff0b, gbc.sp());
        EXPECT(0x234b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00E8
        gbc.setState(0x6e53, 0xe12c, 0x8930, 0xaebd, 0x7c66, 0x6c47, 0x0, 0x1);
        gbc.writeMem(0x6e53, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xe12c, gbc.sp());
        EXPECT(0x6e55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00E9
        gbc.setState(0xea6e, 0x43a0, 0x6960, 0x237b, 0xf4d4, 0xb145, 0x1, 0x0);
        gbc.writeMem(0xea6e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x43a0, gbc.sp());
        EXPECT(0xea70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea6e));
        EXPECT(0x8d, gbc.readMem(0xea6f));
        // CB 8D 00EA
        gbc.setState(0xdb91, 0xf888, 0xd600, 0x81ec, 0xc07d, 0x7fb4, 0x1, 0x1);
        gbc.writeMem(0xdb91, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xf888, gbc.sp());
        EXPECT(0xdb93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb91));
        EXPECT(0x8d, gbc.readMem(0xdb92));
        // CB 8D 00EB
        gbc.setState(0x28df, 0xa55e, 0xe100, 0x414c, 0x4f87, 0x9048, 0x0, 0x0);
        gbc.writeMem(0x28df, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xa55e, gbc.sp());
        EXPECT(0x28e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00EC
        gbc.setState(0x7459, 0xc741, 0xbb40, 0xa719, 0xf2d7, 0x8383, 0x0, 0x0);
        gbc.writeMem(0x7459, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xc741, gbc.sp());
        EXPECT(0x745b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00EE
        gbc.setState(0x424c, 0x13ed, 0xed20, 0x4c92, 0x48c7, 0x39b0, 0x1, 0x1);
        gbc.writeMem(0x424c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x13ed, gbc.sp());
        EXPECT(0x424e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00EF
        gbc.setState(0x75d1, 0xcdcf, 0x4100, 0xec5f, 0xf672, 0x37f4, 0x0, 0x0);
        gbc.writeMem(0x75d1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xcdcf, gbc.sp());
        EXPECT(0x75d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00F1
        gbc.setState(0x9c73, 0x684a, 0xe3b0, 0x9162, 0xc544, 0xa892, 0x0, 0x0);
        gbc.writeMem(0x9c73, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x684a, gbc.sp());
        EXPECT(0x9c75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c73));
        EXPECT(0x8d, gbc.readMem(0x9c74));
        // CB 8D 00F2
        gbc.setState(0x4cd8, 0x5268, 0xf680, 0xca5f, 0x517b, 0xa845, 0x0, 0x1);
        gbc.writeMem(0x4cd8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x5268, gbc.sp());
        EXPECT(0x4cda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00F3
        gbc.setState(0xecb9, 0x7bfd, 0x4100, 0x6ddc, 0xb119, 0xe456, 0x1, 0x1);
        gbc.writeMem(0xecb9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x7bfd, gbc.sp());
        EXPECT(0xecbb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecb9));
        EXPECT(0x8d, gbc.readMem(0xecba));
        // CB 8D 00F4
        gbc.setState(0x517f, 0x5694, 0x3740, 0xb535, 0xced6, 0x6446, 0x0, 0x0);
        gbc.writeMem(0x517f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x5694, gbc.sp());
        EXPECT(0x5181, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00F5
        gbc.setState(0xa975, 0xe580, 0xefc0, 0x11f8, 0x1a73, 0x3664, 0x0, 0x0);
        gbc.writeMem(0xa975, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xe580, gbc.sp());
        EXPECT(0xa977, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa975));
        EXPECT(0x8d, gbc.readMem(0xa976));
        // CB 8D 00F6
        gbc.setState(0xefee, 0xe70a, 0x9830, 0x33bf, 0xc5ae, 0x507, 0x1, 0x0);
        gbc.writeMem(0xefee, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xe70a, gbc.sp());
        EXPECT(0xeff0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefee));
        EXPECT(0x8d, gbc.readMem(0xefef));
        // CB 8D 00F7
        gbc.setState(0xfc6, 0x6874, 0xf240, 0x9a05, 0xc36b, 0x96a5, 0x1, 0x1);
        gbc.writeMem(0xfc6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x6874, gbc.sp());
        EXPECT(0xfc8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00F8
        gbc.setState(0x457a, 0x4228, 0x5d50, 0x931, 0x33c9, 0xc161, 0x1, 0x0);
        gbc.writeMem(0x457a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x4228, gbc.sp());
        EXPECT(0x457c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00F9
        gbc.setState(0x9344, 0x3a1f, 0xc2f0, 0x445c, 0x2aa, 0xfa86, 0x0, 0x0);
        gbc.writeMem(0x9344, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x3a1f, gbc.sp());
        EXPECT(0x9346, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9344));
        EXPECT(0x8d, gbc.readMem(0x9345));
        // CB 8D 00FA
        gbc.setState(0xee1, 0xd082, 0xb1a0, 0x7377, 0xa50d, 0x6b38, 0x1, 0x1);
        gbc.writeMem(0xee1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xd082, gbc.sp());
        EXPECT(0xee3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00FB
        gbc.setState(0x5df1, 0xa10e, 0x23e0, 0x513a, 0xb453, 0xfbe4, 0x1, 0x1);
        gbc.writeMem(0x5df1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xa10e, gbc.sp());
        EXPECT(0x5df3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 00FC
        gbc.setState(0xef48, 0x33ad, 0xdd20, 0xc6e2, 0x1e4a, 0x4eeb, 0x1, 0x1);
        gbc.writeMem(0xef48, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x33ad, gbc.sp());
        EXPECT(0xef4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef48));
        EXPECT(0x8d, gbc.readMem(0xef49));
        // CB 8D 00FD
        gbc.setState(0x6ca3, 0xb38f, 0x6670, 0x2f1b, 0x7c99, 0x2a24, 0x1, 0x1);
        gbc.writeMem(0x6ca3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xb38f, gbc.sp());
        EXPECT(0x6ca5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 00FE
        gbc.setState(0xa232, 0x756f, 0xab60, 0xc73d, 0xc41d, 0x3b0a, 0x0, 0x1);
        gbc.writeMem(0xa232, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x756f, gbc.sp());
        EXPECT(0xa234, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa232));
        EXPECT(0x8d, gbc.readMem(0xa233));
        // CB 8D 00FF
        gbc.setState(0xd066, 0xca58, 0x8b90, 0xa960, 0x1bfb, 0x908b, 0x0, 0x1);
        gbc.writeMem(0xd066, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xca58, gbc.sp());
        EXPECT(0xd068, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd066));
        EXPECT(0x8d, gbc.readMem(0xd067));
        // CB 8D 0100
        gbc.setState(0xe01, 0xdd65, 0x47f0, 0x50f3, 0xc06a, 0xd51d, 0x0, 0x0);
        gbc.writeMem(0xe01, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xdd65, gbc.sp());
        EXPECT(0xe03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0101
        gbc.setState(0x8064, 0x921a, 0xbf0, 0xd24e, 0xca0a, 0xc7dc, 0x1, 0x0);
        gbc.writeMem(0x8064, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x921a, gbc.sp());
        EXPECT(0x8066, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8064));
        EXPECT(0x8d, gbc.readMem(0x8065));
        // CB 8D 0102
        gbc.setState(0xc62b, 0xa838, 0xcc0, 0xef4c, 0xea9d, 0x7d8, 0x0, 0x0);
        gbc.writeMem(0xc62b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xa838, gbc.sp());
        EXPECT(0xc62d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc62b));
        EXPECT(0x8d, gbc.readMem(0xc62c));
        // CB 8D 0103
        gbc.setState(0xc156, 0xafad, 0xf460, 0x8a89, 0x8c23, 0xc525, 0x1, 0x1);
        gbc.writeMem(0xc156, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xafad, gbc.sp());
        EXPECT(0xc158, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc156));
        EXPECT(0x8d, gbc.readMem(0xc157));
        // CB 8D 0104
        gbc.setState(0xcc4b, 0x434a, 0x8160, 0x2ace, 0x3ae7, 0xae6d, 0x1, 0x1);
        gbc.writeMem(0xcc4b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x434a, gbc.sp());
        EXPECT(0xcc4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc4b));
        EXPECT(0x8d, gbc.readMem(0xcc4c));
        // CB 8D 0105
        gbc.setState(0x1872, 0xbd0, 0xd080, 0xf607, 0x8a2a, 0xfefa, 0x1, 0x1);
        gbc.writeMem(0x1872, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xbd0, gbc.sp());
        EXPECT(0x1874, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0106
        gbc.setState(0x983, 0x16e8, 0x8a90, 0xd4b, 0xf7ea, 0xa982, 0x1, 0x1);
        gbc.writeMem(0x983, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x16e8, gbc.sp());
        EXPECT(0x985, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0107
        gbc.setState(0x30ea, 0x6339, 0x5dd0, 0xe55f, 0x7f8, 0x2f8b, 0x1, 0x1);
        gbc.writeMem(0x30ea, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x6339, gbc.sp());
        EXPECT(0x30ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0108
        gbc.setState(0xd969, 0xfd23, 0x5e30, 0xf821, 0x507d, 0x17c3, 0x0, 0x1);
        gbc.writeMem(0xd969, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xfd23, gbc.sp());
        EXPECT(0xd96b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd969));
        EXPECT(0x8d, gbc.readMem(0xd96a));
        // CB 8D 010A
        gbc.setState(0x106b, 0xc783, 0x3a10, 0xdfe3, 0x68fa, 0x556f, 0x0, 0x1);
        gbc.writeMem(0x106b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xc783, gbc.sp());
        EXPECT(0x106d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 010B
        gbc.setState(0xc42c, 0x84b5, 0xa420, 0xf301, 0xcd2f, 0x531f, 0x0, 0x1);
        gbc.writeMem(0xc42c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x84b5, gbc.sp());
        EXPECT(0xc42e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc42c));
        EXPECT(0x8d, gbc.readMem(0xc42d));
        // CB 8D 010C
        gbc.setState(0x3ee0, 0x70df, 0x9a10, 0x27c, 0xa96d, 0xe03b, 0x0, 0x1);
        gbc.writeMem(0x3ee0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x70df, gbc.sp());
        EXPECT(0x3ee2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 010D
        gbc.setState(0x9e38, 0xa8ba, 0x1460, 0x6c5d, 0x1cbf, 0xdc44, 0x1, 0x1);
        gbc.writeMem(0x9e38, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xa8ba, gbc.sp());
        EXPECT(0x9e3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e38));
        EXPECT(0x8d, gbc.readMem(0x9e39));
        // CB 8D 010E
        gbc.setState(0x87d, 0x8bee, 0xa560, 0xa32a, 0x2d1e, 0x7670, 0x1, 0x1);
        gbc.writeMem(0x87d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x8bee, gbc.sp());
        EXPECT(0x87f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 010F
        gbc.setState(0xb898, 0x563f, 0x2530, 0x28ad, 0x6dec, 0x856b, 0x0, 0x1);
        gbc.writeMem(0xb898, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x563f, gbc.sp());
        EXPECT(0xb89a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb898));
        EXPECT(0x8d, gbc.readMem(0xb899));
        // CB 8D 0110
        gbc.setState(0xd1c, 0xd582, 0x3b40, 0x3426, 0x3d5a, 0xbeb0, 0x0, 0x1);
        gbc.writeMem(0xd1c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xd582, gbc.sp());
        EXPECT(0xd1e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0111
        gbc.setState(0xb2b2, 0x428, 0x1d00, 0xc52a, 0x6a3b, 0x1293, 0x0, 0x1);
        gbc.writeMem(0xb2b2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x428, gbc.sp());
        EXPECT(0xb2b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2b2));
        EXPECT(0x8d, gbc.readMem(0xb2b3));
        // CB 8D 0112
        gbc.setState(0x9d7c, 0x7c24, 0x4e80, 0xd6f0, 0x30b6, 0xfc9d, 0x0, 0x1);
        gbc.writeMem(0x9d7c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x7c24, gbc.sp());
        EXPECT(0x9d7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d7c));
        EXPECT(0x8d, gbc.readMem(0x9d7d));
        // CB 8D 0113
        gbc.setState(0x51ed, 0x7f88, 0x2f50, 0x7a05, 0x9754, 0xd7b8, 0x0, 0x0);
        gbc.writeMem(0x51ed, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x7f88, gbc.sp());
        EXPECT(0x51ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0114
        gbc.setState(0x480, 0x2fe3, 0x4700, 0x19f8, 0x2fa3, 0xa1fa, 0x1, 0x0);
        gbc.writeMem(0x480, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x2fe3, gbc.sp());
        EXPECT(0x482, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0115
        gbc.setState(0x78c8, 0xcece, 0xebf0, 0x7456, 0x18a5, 0x45c9, 0x1, 0x0);
        gbc.writeMem(0x78c8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xcece, gbc.sp());
        EXPECT(0x78ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0116
        gbc.setState(0xb5e0, 0x17fd, 0x6770, 0xcbf7, 0x8feb, 0xd776, 0x1, 0x0);
        gbc.writeMem(0xb5e0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x17fd, gbc.sp());
        EXPECT(0xb5e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5e0));
        EXPECT(0x8d, gbc.readMem(0xb5e1));
        // CB 8D 0117
        gbc.setState(0x485d, 0x7382, 0xc0b0, 0x45a0, 0xa2c2, 0xac76, 0x1, 0x0);
        gbc.writeMem(0x485d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x7382, gbc.sp());
        EXPECT(0x485f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0118
        gbc.setState(0x1bea, 0x3a4, 0xd840, 0x8d06, 0xdfe8, 0xe866, 0x1, 0x1);
        gbc.writeMem(0x1bea, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x3a4, gbc.sp());
        EXPECT(0x1bec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0119
        gbc.setState(0x1239, 0xdfd8, 0x2240, 0x52c7, 0xc802, 0xc02b, 0x1, 0x1);
        gbc.writeMem(0x1239, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xdfd8, gbc.sp());
        EXPECT(0x123b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 011B
        gbc.setState(0xd833, 0x15fe, 0x7300, 0xc88f, 0xa41f, 0x7f7b, 0x0, 0x0);
        gbc.writeMem(0xd833, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x15fe, gbc.sp());
        EXPECT(0xd835, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd833));
        EXPECT(0x8d, gbc.readMem(0xd834));
        // CB 8D 011C
        gbc.setState(0xe54c, 0x506c, 0x8e40, 0xc37b, 0xddbc, 0x2c2a, 0x0, 0x0);
        gbc.writeMem(0xe54c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x506c, gbc.sp());
        EXPECT(0xe54e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe54c));
        EXPECT(0x8d, gbc.readMem(0xe54d));
        // CB 8D 011D
        gbc.setState(0xea03, 0x59f4, 0xe840, 0x631d, 0x1cf9, 0x1c2e, 0x0, 0x1);
        gbc.writeMem(0xea03, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x59f4, gbc.sp());
        EXPECT(0xea05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea03));
        EXPECT(0x8d, gbc.readMem(0xea04));
        // CB 8D 011E
        gbc.setState(0xa76c, 0xe640, 0x1170, 0x3d52, 0x581a, 0xe1d4, 0x0, 0x1);
        gbc.writeMem(0xa76c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xe640, gbc.sp());
        EXPECT(0xa76e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa76c));
        EXPECT(0x8d, gbc.readMem(0xa76d));
        // CB 8D 011F
        gbc.setState(0x53bd, 0x2203, 0x4b70, 0x398, 0xe160, 0xe3d2, 0x0, 0x1);
        gbc.writeMem(0x53bd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x2203, gbc.sp());
        EXPECT(0x53bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0120
        gbc.setState(0xb69c, 0xcc76, 0xf910, 0x4c95, 0x8be3, 0xf43e, 0x1, 0x0);
        gbc.writeMem(0xb69c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xcc76, gbc.sp());
        EXPECT(0xb69e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb69c));
        EXPECT(0x8d, gbc.readMem(0xb69d));
        // CB 8D 0121
        gbc.setState(0xb3de, 0x4fae, 0x9ec0, 0xacda, 0x208, 0xccf4, 0x1, 0x0);
        gbc.writeMem(0xb3de, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x4fae, gbc.sp());
        EXPECT(0xb3e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3de));
        EXPECT(0x8d, gbc.readMem(0xb3df));
        // CB 8D 0122
        gbc.setState(0xd9d, 0x581c, 0xa870, 0x6a4, 0x45fc, 0xde71, 0x0, 0x1);
        gbc.writeMem(0xd9d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x581c, gbc.sp());
        EXPECT(0xd9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0123
        gbc.setState(0xcaf4, 0xcc8f, 0xde60, 0xe94f, 0x522a, 0xa35, 0x0, 0x1);
        gbc.writeMem(0xcaf4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xcc8f, gbc.sp());
        EXPECT(0xcaf6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaf4));
        EXPECT(0x8d, gbc.readMem(0xcaf5));
        // CB 8D 0124
        gbc.setState(0x1371, 0xf809, 0x6400, 0xab55, 0xc16d, 0x2613, 0x0, 0x1);
        gbc.writeMem(0x1371, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xf809, gbc.sp());
        EXPECT(0x1373, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0125
        gbc.setState(0x472f, 0xee4, 0x8930, 0xe48a, 0xaee7, 0xa9bf, 0x0, 0x1);
        gbc.writeMem(0x472f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xee4, gbc.sp());
        EXPECT(0x4731, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0126
        gbc.setState(0x8281, 0x523f, 0xb110, 0x3869, 0x4d0b, 0x36d2, 0x1, 0x1);
        gbc.writeMem(0x8281, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x523f, gbc.sp());
        EXPECT(0x8283, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8281));
        EXPECT(0x8d, gbc.readMem(0x8282));
        // CB 8D 0127
        gbc.setState(0x17fc, 0xd5f0, 0x2c20, 0x2623, 0x2097, 0x662a, 0x1, 0x1);
        gbc.writeMem(0x17fc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xd5f0, gbc.sp());
        EXPECT(0x17fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0128
        gbc.setState(0x46aa, 0x356e, 0xa4c0, 0xf118, 0x7410, 0x5569, 0x0, 0x0);
        gbc.writeMem(0x46aa, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x356e, gbc.sp());
        EXPECT(0x46ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0129
        gbc.setState(0xdb65, 0xcc4d, 0x5f30, 0xc18a, 0xec2f, 0x2129, 0x1, 0x0);
        gbc.writeMem(0xdb65, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xcc4d, gbc.sp());
        EXPECT(0xdb67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb65));
        EXPECT(0x8d, gbc.readMem(0xdb66));
        // CB 8D 012A
        gbc.setState(0x4a60, 0xfde1, 0xd200, 0x4897, 0x24e2, 0xcd18, 0x0, 0x0);
        gbc.writeMem(0x4a60, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xfde1, gbc.sp());
        EXPECT(0x4a62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 012B
        gbc.setState(0x381d, 0x763, 0xe550, 0xdaa1, 0x7043, 0xd5b9, 0x1, 0x1);
        gbc.writeMem(0x381d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x763, gbc.sp());
        EXPECT(0x381f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 012C
        gbc.setState(0x6cb6, 0xf0ef, 0x9e0, 0xf367, 0x2e08, 0xae0a, 0x0, 0x0);
        gbc.writeMem(0x6cb6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xf0ef, gbc.sp());
        EXPECT(0x6cb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 012D
        gbc.setState(0x7d05, 0x2021, 0xc20, 0x2c, 0xd78, 0x67ba, 0x1, 0x0);
        gbc.writeMem(0x7d05, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x2021, gbc.sp());
        EXPECT(0x7d07, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 012E
        gbc.setState(0x399a, 0x92c2, 0xddb0, 0xf69a, 0x284, 0xd575, 0x1, 0x0);
        gbc.writeMem(0x399a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x92c2, gbc.sp());
        EXPECT(0x399c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 012F
        gbc.setState(0xe125, 0xd5cd, 0x5af0, 0xf029, 0x740b, 0x546c, 0x1, 0x1);
        gbc.writeMem(0xe125, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xd5cd, gbc.sp());
        EXPECT(0xe127, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe125));
        EXPECT(0x8d, gbc.readMem(0xe126));
        // CB 8D 0130
        gbc.setState(0x6092, 0xd61e, 0x92b0, 0xe38e, 0x802f, 0xfe64, 0x1, 0x0);
        gbc.writeMem(0x6092, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xd61e, gbc.sp());
        EXPECT(0x6094, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0131
        gbc.setState(0xaaa, 0xcf99, 0x1770, 0xe57f, 0xa3d8, 0xe3f7, 0x1, 0x1);
        gbc.writeMem(0xaaa, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xcf99, gbc.sp());
        EXPECT(0xaac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0132
        gbc.setState(0xb36c, 0xa84e, 0x1e90, 0x88f5, 0x2492, 0x94dd, 0x1, 0x1);
        gbc.writeMem(0xb36c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xa84e, gbc.sp());
        EXPECT(0xb36e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb36c));
        EXPECT(0x8d, gbc.readMem(0xb36d));
        // CB 8D 0133
        gbc.setState(0x5d80, 0x49f2, 0x5530, 0x4abd, 0xd5b0, 0x5ce7, 0x1, 0x0);
        gbc.writeMem(0x5d80, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x49f2, gbc.sp());
        EXPECT(0x5d82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0134
        gbc.setState(0x806c, 0x397, 0x3c70, 0xb702, 0x90f6, 0x7eb8, 0x1, 0x1);
        gbc.writeMem(0x806c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x397, gbc.sp());
        EXPECT(0x806e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x806c));
        EXPECT(0x8d, gbc.readMem(0x806d));
        // CB 8D 0135
        gbc.setState(0x16dd, 0xcfad, 0x13a0, 0xb3af, 0x14af, 0x3418, 0x1, 0x0);
        gbc.writeMem(0x16dd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xcfad, gbc.sp());
        EXPECT(0x16df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0136
        gbc.setState(0xed3a, 0x1178, 0x2720, 0x4ed1, 0xbb23, 0x2392, 0x0, 0x0);
        gbc.writeMem(0xed3a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x1178, gbc.sp());
        EXPECT(0xed3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed3a));
        EXPECT(0x8d, gbc.readMem(0xed3b));
        // CB 8D 0137
        gbc.setState(0x997b, 0xdbbb, 0x57b0, 0x34cd, 0xf830, 0xa776, 0x1, 0x1);
        gbc.writeMem(0x997b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xdbbb, gbc.sp());
        EXPECT(0x997d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x997b));
        EXPECT(0x8d, gbc.readMem(0x997c));
        // CB 8D 0138
        gbc.setState(0x1287, 0xffb2, 0xe640, 0x43ed, 0x4dd0, 0x7cbb, 0x1, 0x1);
        gbc.writeMem(0x1287, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xffb2, gbc.sp());
        EXPECT(0x1289, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0139
        gbc.setState(0x2fb8, 0x7c16, 0xa600, 0xeff6, 0xac1, 0x17e0, 0x0, 0x0);
        gbc.writeMem(0x2fb8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x7c16, gbc.sp());
        EXPECT(0x2fba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 013A
        gbc.setState(0x59a0, 0x603d, 0xec60, 0xf1b0, 0x1201, 0xf5, 0x0, 0x0);
        gbc.writeMem(0x59a0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x603d, gbc.sp());
        EXPECT(0x59a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 013B
        gbc.setState(0x934a, 0x1565, 0xb400, 0x4547, 0xa932, 0x5bf9, 0x1, 0x0);
        gbc.writeMem(0x934a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x1565, gbc.sp());
        EXPECT(0x934c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x934a));
        EXPECT(0x8d, gbc.readMem(0x934b));
        // CB 8D 013C
        gbc.setState(0xd563, 0xc9d6, 0x3850, 0xea12, 0xc32b, 0x77ec, 0x1, 0x1);
        gbc.writeMem(0xd563, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xc9d6, gbc.sp());
        EXPECT(0xd565, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd563));
        EXPECT(0x8d, gbc.readMem(0xd564));
        // CB 8D 013D
        gbc.setState(0xaef2, 0xf020, 0x2700, 0x7268, 0x164a, 0x2fa3, 0x1, 0x1);
        gbc.writeMem(0xaef2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xf020, gbc.sp());
        EXPECT(0xaef4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaef2));
        EXPECT(0x8d, gbc.readMem(0xaef3));
        // CB 8D 013E
        gbc.setState(0x1da5, 0x3c67, 0x320, 0x58e3, 0x6af4, 0x5499, 0x1, 0x0);
        gbc.writeMem(0x1da5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x3c67, gbc.sp());
        EXPECT(0x1da7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 013F
        gbc.setState(0xae73, 0x2090, 0xc3b0, 0xd665, 0x658, 0x576f, 0x0, 0x0);
        gbc.writeMem(0xae73, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x2090, gbc.sp());
        EXPECT(0xae75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae73));
        EXPECT(0x8d, gbc.readMem(0xae74));
        // CB 8D 0140
        gbc.setState(0x29f, 0xd7f2, 0x9c40, 0x5ed5, 0xd456, 0x8783, 0x0, 0x1);
        gbc.writeMem(0x29f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xd7f2, gbc.sp());
        EXPECT(0x2a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0141
        gbc.setState(0x444f, 0xdf55, 0x69f0, 0x8f66, 0x584f, 0x1836, 0x0, 0x0);
        gbc.writeMem(0x444f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xdf55, gbc.sp());
        EXPECT(0x4451, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0142
        gbc.setState(0xc3c5, 0x5de2, 0x5f0, 0x984a, 0xad86, 0x6a42, 0x1, 0x1);
        gbc.writeMem(0xc3c5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x5de2, gbc.sp());
        EXPECT(0xc3c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3c5));
        EXPECT(0x8d, gbc.readMem(0xc3c6));
        // CB 8D 0143
        gbc.setState(0x3d03, 0xb067, 0xc450, 0x3f, 0x3a98, 0xde2e, 0x0, 0x0);
        gbc.writeMem(0x3d03, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xb067, gbc.sp());
        EXPECT(0x3d05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0144
        gbc.setState(0x5718, 0x1489, 0x92c0, 0xeb3f, 0x5cb1, 0x15c4, 0x0, 0x0);
        gbc.writeMem(0x5718, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x1489, gbc.sp());
        EXPECT(0x571a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0145
        gbc.setState(0xa1b0, 0xa40c, 0xdef0, 0xbb8c, 0x1cd2, 0x809e, 0x0, 0x1);
        gbc.writeMem(0xa1b0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xa40c, gbc.sp());
        EXPECT(0xa1b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1b0));
        EXPECT(0x8d, gbc.readMem(0xa1b1));
        // CB 8D 0146
        gbc.setState(0xcb40, 0x8e12, 0x9eb0, 0x2b6e, 0x669f, 0x8774, 0x1, 0x1);
        gbc.writeMem(0xcb40, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x8e12, gbc.sp());
        EXPECT(0xcb42, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb40));
        EXPECT(0x8d, gbc.readMem(0xcb41));
        // CB 8D 0147
        gbc.setState(0xd2fc, 0x192f, 0x1e70, 0xdee4, 0x51d9, 0x1d36, 0x1, 0x1);
        gbc.writeMem(0xd2fc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x192f, gbc.sp());
        EXPECT(0xd2fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2fc));
        EXPECT(0x8d, gbc.readMem(0xd2fd));
        // CB 8D 0148
        gbc.setState(0x6d95, 0x80, 0x85e0, 0x698d, 0x74ca, 0x3b99, 0x0, 0x0);
        gbc.writeMem(0x6d95, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x80, gbc.sp());
        EXPECT(0x6d97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0149
        gbc.setState(0xa59, 0x2a03, 0xfbb0, 0xdf96, 0x5383, 0xa6bb, 0x1, 0x0);
        gbc.writeMem(0xa59, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x2a03, gbc.sp());
        EXPECT(0xa5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 014A
        gbc.setState(0xc5f4, 0x8b60, 0x5920, 0x1bde, 0xaed8, 0xcd5b, 0x0, 0x1);
        gbc.writeMem(0xc5f4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x8b60, gbc.sp());
        EXPECT(0xc5f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5f4));
        EXPECT(0x8d, gbc.readMem(0xc5f5));
        // CB 8D 014B
        gbc.setState(0x67fc, 0xc5f1, 0x24d0, 0xea90, 0xf501, 0x1b98, 0x0, 0x0);
        gbc.writeMem(0x67fc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xc5f1, gbc.sp());
        EXPECT(0x67fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 014C
        gbc.setState(0xa698, 0x3fb6, 0x2310, 0x5e8d, 0xcad0, 0xd614, 0x0, 0x0);
        gbc.writeMem(0xa698, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x3fb6, gbc.sp());
        EXPECT(0xa69a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa698));
        EXPECT(0x8d, gbc.readMem(0xa699));
        // CB 8D 014D
        gbc.setState(0x5ac9, 0x4981, 0x23c0, 0x6ec9, 0xfde0, 0x1547, 0x0, 0x0);
        gbc.writeMem(0x5ac9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x4981, gbc.sp());
        EXPECT(0x5acb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 014F
        gbc.setState(0xe458, 0x4f3a, 0xff30, 0x7622, 0x75a4, 0x5ef2, 0x1, 0x1);
        gbc.writeMem(0xe458, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x4f3a, gbc.sp());
        EXPECT(0xe45a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe458));
        EXPECT(0x8d, gbc.readMem(0xe459));
        // CB 8D 0150
        gbc.setState(0x5f5e, 0x778c, 0x1fe0, 0xfa8d, 0xaa4e, 0x922, 0x1, 0x1);
        gbc.writeMem(0x5f5e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x778c, gbc.sp());
        EXPECT(0x5f60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0151
        gbc.setState(0x66f1, 0x9f78, 0x8ab0, 0xb461, 0xaf4d, 0xd676, 0x1, 0x0);
        gbc.writeMem(0x66f1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x9f78, gbc.sp());
        EXPECT(0x66f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0152
        gbc.setState(0xdea5, 0x4c72, 0xd200, 0xa546, 0xd41, 0xcbfa, 0x0, 0x0);
        gbc.writeMem(0xdea5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x4c72, gbc.sp());
        EXPECT(0xdea7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdea5));
        EXPECT(0x8d, gbc.readMem(0xdea6));
        // CB 8D 0153
        gbc.setState(0xdd80, 0x27af, 0x6b00, 0x54ad, 0x8a94, 0x6776, 0x1, 0x0);
        gbc.writeMem(0xdd80, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x27af, gbc.sp());
        EXPECT(0xdd82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd80));
        EXPECT(0x8d, gbc.readMem(0xdd81));
        // CB 8D 0154
        gbc.setState(0x56b0, 0x7048, 0xfcf0, 0xd9bd, 0xd6d, 0x6181, 0x0, 0x1);
        gbc.writeMem(0x56b0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x7048, gbc.sp());
        EXPECT(0x56b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0155
        gbc.setState(0x7665, 0x718f, 0x6cd0, 0x79dc, 0xfa75, 0x9491, 0x1, 0x1);
        gbc.writeMem(0x7665, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x718f, gbc.sp());
        EXPECT(0x7667, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0156
        gbc.setState(0xdfb3, 0x1402, 0xa190, 0x12da, 0xf0a0, 0x227d, 0x0, 0x1);
        gbc.writeMem(0xdfb3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x1402, gbc.sp());
        EXPECT(0xdfb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfb3));
        EXPECT(0x8d, gbc.readMem(0xdfb4));
        // CB 8D 0157
        gbc.setState(0x85fb, 0xa81f, 0x4b90, 0x9b74, 0x5b43, 0x3d26, 0x1, 0x0);
        gbc.writeMem(0x85fb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xa81f, gbc.sp());
        EXPECT(0x85fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85fb));
        EXPECT(0x8d, gbc.readMem(0x85fc));
        // CB 8D 0158
        gbc.setState(0x1d35, 0x25dd, 0x3060, 0xfe8e, 0xf278, 0xe78, 0x1, 0x0);
        gbc.writeMem(0x1d35, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x25dd, gbc.sp());
        EXPECT(0x1d37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0159
        gbc.setState(0xef37, 0x99a3, 0xf330, 0xb94f, 0xb10c, 0xab47, 0x0, 0x1);
        gbc.writeMem(0xef37, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x99a3, gbc.sp());
        EXPECT(0xef39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef37));
        EXPECT(0x8d, gbc.readMem(0xef38));
        // CB 8D 015A
        gbc.setState(0xbea, 0x2026, 0x3440, 0x4370, 0xb6ef, 0x2930, 0x0, 0x1);
        gbc.writeMem(0xbea, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x2026, gbc.sp());
        EXPECT(0xbec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 015B
        gbc.setState(0x4af5, 0x8a8e, 0xe0f0, 0x727c, 0xd39, 0x8313, 0x0, 0x0);
        gbc.writeMem(0x4af5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x8a8e, gbc.sp());
        EXPECT(0x4af7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 015C
        gbc.setState(0xa8ce, 0xcbe2, 0x9630, 0xfee, 0xe191, 0xb874, 0x1, 0x0);
        gbc.writeMem(0xa8ce, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xcbe2, gbc.sp());
        EXPECT(0xa8d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8ce));
        EXPECT(0x8d, gbc.readMem(0xa8cf));
        // CB 8D 015D
        gbc.setState(0xa583, 0x1cbb, 0x18f0, 0x27c3, 0xab5e, 0x2311, 0x0, 0x0);
        gbc.writeMem(0xa583, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x1cbb, gbc.sp());
        EXPECT(0xa585, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa583));
        EXPECT(0x8d, gbc.readMem(0xa584));
        // CB 8D 015E
        gbc.setState(0x4496, 0x182c, 0x85d0, 0xcccd, 0x780d, 0x7e30, 0x0, 0x1);
        gbc.writeMem(0x4496, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x182c, gbc.sp());
        EXPECT(0x4498, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 015F
        gbc.setState(0x14fe, 0x2d07, 0x7ce0, 0xab35, 0x4e9a, 0x1dc5, 0x1, 0x1);
        gbc.writeMem(0x14fe, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x2d07, gbc.sp());
        EXPECT(0x1500, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0160
        gbc.setState(0x7b7c, 0xa68a, 0x9d50, 0xcc43, 0x72f0, 0x26db, 0x0, 0x1);
        gbc.writeMem(0x7b7c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xa68a, gbc.sp());
        EXPECT(0x7b7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0161
        gbc.setState(0x137d, 0xb8ae, 0xa0d0, 0x2cf7, 0xaede, 0x5640, 0x1, 0x0);
        gbc.writeMem(0x137d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xb8ae, gbc.sp());
        EXPECT(0x137f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0162
        gbc.setState(0x45d0, 0xbba5, 0x69c0, 0x83a2, 0x10ee, 0x8c16, 0x0, 0x0);
        gbc.writeMem(0x45d0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xbba5, gbc.sp());
        EXPECT(0x45d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0163
        gbc.setState(0x7441, 0x1063, 0x64b0, 0x91a0, 0xf57, 0x2770, 0x0, 0x1);
        gbc.writeMem(0x7441, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x1063, gbc.sp());
        EXPECT(0x7443, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0164
        gbc.setState(0xdea3, 0xa2e4, 0x6ae0, 0x6dca, 0x5f1, 0xfa75, 0x1, 0x0);
        gbc.writeMem(0xdea3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xa2e4, gbc.sp());
        EXPECT(0xdea5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdea3));
        EXPECT(0x8d, gbc.readMem(0xdea4));
        // CB 8D 0165
        gbc.setState(0xf9, 0x7f8d, 0xbde0, 0xc039, 0x1b8e, 0x1f97, 0x1, 0x1);
        gbc.writeMem(0xf9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x7f8d, gbc.sp());
        EXPECT(0xfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0166
        gbc.setState(0x828d, 0x3c6a, 0x95b0, 0x5b97, 0x4ad4, 0xd237, 0x1, 0x0);
        gbc.writeMem(0x828d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x3c6a, gbc.sp());
        EXPECT(0x828f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x828d));
        EXPECT(0x8d, gbc.readMem(0x828e));
        // CB 8D 0167
        gbc.setState(0xd73f, 0x6a8b, 0xc9a0, 0x4179, 0xabe8, 0xfcdf, 0x1, 0x1);
        gbc.writeMem(0xd73f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x6a8b, gbc.sp());
        EXPECT(0xd741, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd73f));
        EXPECT(0x8d, gbc.readMem(0xd740));
        // CB 8D 0168
        gbc.setState(0x4ab8, 0x805b, 0x5ea0, 0x5eb9, 0x245e, 0x297f, 0x0, 0x0);
        gbc.writeMem(0x4ab8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x805b, gbc.sp());
        EXPECT(0x4aba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0169
        gbc.setState(0x7c1f, 0x160d, 0xa990, 0xd013, 0x4770, 0x5c88, 0x1, 0x1);
        gbc.writeMem(0x7c1f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x160d, gbc.sp());
        EXPECT(0x7c21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 016A
        gbc.setState(0x3a88, 0x2f6f, 0x70c0, 0x367c, 0xff9, 0xd29, 0x0, 0x1);
        gbc.writeMem(0x3a88, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x2f6f, gbc.sp());
        EXPECT(0x3a8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 016B
        gbc.setState(0x5a4, 0x1173, 0x89d0, 0x9465, 0x2513, 0x7342, 0x1, 0x0);
        gbc.writeMem(0x5a4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x1173, gbc.sp());
        EXPECT(0x5a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 016C
        gbc.setState(0xe926, 0xd9a8, 0x7f60, 0xc87e, 0xa15d, 0x442b, 0x1, 0x1);
        gbc.writeMem(0xe926, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xd9a8, gbc.sp());
        EXPECT(0xe928, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe926));
        EXPECT(0x8d, gbc.readMem(0xe927));
        // CB 8D 016E
        gbc.setState(0xc4d0, 0x5201, 0x3b60, 0x8750, 0x5ee6, 0xe103, 0x0, 0x0);
        gbc.writeMem(0xc4d0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x5201, gbc.sp());
        EXPECT(0xc4d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4d0));
        EXPECT(0x8d, gbc.readMem(0xc4d1));
        // CB 8D 016F
        gbc.setState(0x5014, 0xd5ba, 0x9230, 0xe591, 0xd228, 0x7656, 0x1, 0x1);
        gbc.writeMem(0x5014, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xd5ba, gbc.sp());
        EXPECT(0x5016, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0170
        gbc.setState(0x99f5, 0x48c8, 0x6ea0, 0xb6b2, 0xae67, 0xb8e8, 0x1, 0x0);
        gbc.writeMem(0x99f5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x48c8, gbc.sp());
        EXPECT(0x99f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99f5));
        EXPECT(0x8d, gbc.readMem(0x99f6));
        // CB 8D 0171
        gbc.setState(0x3bf4, 0x1020, 0x97b0, 0x41a0, 0x7c8e, 0xee25, 0x0, 0x1);
        gbc.writeMem(0x3bf4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x1020, gbc.sp());
        EXPECT(0x3bf6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0172
        gbc.setState(0x8fc9, 0xb02, 0x3960, 0x5fb8, 0x9cc5, 0x137b, 0x1, 0x1);
        gbc.writeMem(0x8fc9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xb02, gbc.sp());
        EXPECT(0x8fcb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fc9));
        EXPECT(0x8d, gbc.readMem(0x8fca));
        // CB 8D 0173
        gbc.setState(0x1340, 0x2364, 0xde00, 0xebc8, 0x1b65, 0x8709, 0x0, 0x1);
        gbc.writeMem(0x1340, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x2364, gbc.sp());
        EXPECT(0x1342, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0174
        gbc.setState(0x8d95, 0x31c1, 0x4fc0, 0xda3d, 0xf399, 0xe24e, 0x0, 0x0);
        gbc.writeMem(0x8d95, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x31c1, gbc.sp());
        EXPECT(0x8d97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d95));
        EXPECT(0x8d, gbc.readMem(0x8d96));
        // CB 8D 0175
        gbc.setState(0xece6, 0xe0b6, 0xf5a0, 0xf64e, 0x64c2, 0xb123, 0x0, 0x0);
        gbc.writeMem(0xece6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xe0b6, gbc.sp());
        EXPECT(0xece8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xece6));
        EXPECT(0x8d, gbc.readMem(0xece7));
        // CB 8D 0176
        gbc.setState(0xd6fa, 0x5a4, 0xaba0, 0x788c, 0x604d, 0xbda1, 0x0, 0x1);
        gbc.writeMem(0xd6fa, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x5a4, gbc.sp());
        EXPECT(0xd6fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6fa));
        EXPECT(0x8d, gbc.readMem(0xd6fb));
        // CB 8D 0177
        gbc.setState(0xad7c, 0x6ac, 0xf220, 0x92d6, 0x140d, 0x9c5a, 0x0, 0x0);
        gbc.writeMem(0xad7c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x6ac, gbc.sp());
        EXPECT(0xad7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad7c));
        EXPECT(0x8d, gbc.readMem(0xad7d));
        // CB 8D 0178
        gbc.setState(0xc1e5, 0x832, 0xf640, 0xc215, 0xc404, 0xf1d0, 0x0, 0x0);
        gbc.writeMem(0xc1e5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x832, gbc.sp());
        EXPECT(0xc1e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1e5));
        EXPECT(0x8d, gbc.readMem(0xc1e6));
        // CB 8D 0179
        gbc.setState(0x1150, 0x623f, 0x1850, 0x3197, 0xe22e, 0x14ea, 0x1, 0x0);
        gbc.writeMem(0x1150, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x623f, gbc.sp());
        EXPECT(0x1152, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 017A
        gbc.setState(0x2e13, 0x9f42, 0xcc30, 0xdd3c, 0xfd1e, 0x9e3e, 0x0, 0x0);
        gbc.writeMem(0x2e13, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x9f42, gbc.sp());
        EXPECT(0x2e15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 017C
        gbc.setState(0xebcd, 0xb8ff, 0x46c0, 0xf0f, 0x2931, 0xd3c8, 0x1, 0x1);
        gbc.writeMem(0xebcd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xb8ff, gbc.sp());
        EXPECT(0xebcf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebcd));
        EXPECT(0x8d, gbc.readMem(0xebce));
        // CB 8D 017D
        gbc.setState(0x1fe6, 0x4b67, 0xc580, 0x7487, 0x6ebd, 0x5e87, 0x0, 0x1);
        gbc.writeMem(0x1fe6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x4b67, gbc.sp());
        EXPECT(0x1fe8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 017E
        gbc.setState(0xd5c7, 0x6e38, 0x1cb0, 0xd99, 0x4e62, 0x779b, 0x0, 0x1);
        gbc.writeMem(0xd5c7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x6e38, gbc.sp());
        EXPECT(0xd5c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5c7));
        EXPECT(0x8d, gbc.readMem(0xd5c8));
        // CB 8D 017F
        gbc.setState(0xb709, 0xc3ed, 0xf2c0, 0x3105, 0x4d18, 0xce6b, 0x0, 0x0);
        gbc.writeMem(0xb709, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xc3ed, gbc.sp());
        EXPECT(0xb70b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb709));
        EXPECT(0x8d, gbc.readMem(0xb70a));
        // CB 8D 0180
        gbc.setState(0x13bb, 0x2695, 0x7f50, 0xfab1, 0x63ed, 0xd1f3, 0x0, 0x0);
        gbc.writeMem(0x13bb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x2695, gbc.sp());
        EXPECT(0x13bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0181
        gbc.setState(0x1b6f, 0x58bc, 0x3990, 0xda2, 0xaee0, 0x8f28, 0x0, 0x0);
        gbc.writeMem(0x1b6f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x58bc, gbc.sp());
        EXPECT(0x1b71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0182
        gbc.setState(0x77f7, 0xea1c, 0x8af0, 0xfb52, 0xbc73, 0x3a76, 0x0, 0x1);
        gbc.writeMem(0x77f7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xea1c, gbc.sp());
        EXPECT(0x77f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0183
        gbc.setState(0x7d2e, 0x9fca, 0x1be0, 0xd38d, 0x616e, 0x9f9a, 0x0, 0x0);
        gbc.writeMem(0x7d2e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x9fca, gbc.sp());
        EXPECT(0x7d30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0184
        gbc.setState(0xa63d, 0x1ff9, 0x6020, 0xdab1, 0x4c20, 0x840, 0x1, 0x1);
        gbc.writeMem(0xa63d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x1ff9, gbc.sp());
        EXPECT(0xa63f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa63d));
        EXPECT(0x8d, gbc.readMem(0xa63e));
        // CB 8D 0185
        gbc.setState(0x8a2d, 0x41fe, 0x29d0, 0x3952, 0x7201, 0x83c2, 0x0, 0x1);
        gbc.writeMem(0x8a2d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x41fe, gbc.sp());
        EXPECT(0x8a2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a2d));
        EXPECT(0x8d, gbc.readMem(0x8a2e));
        // CB 8D 0186
        gbc.setState(0xf3e, 0xfa29, 0x7b20, 0xa789, 0x4341, 0x341f, 0x1, 0x0);
        gbc.writeMem(0xf3e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xfa29, gbc.sp());
        EXPECT(0xf40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0187
        gbc.setState(0x35ab, 0x5b95, 0xee50, 0xeab, 0x41b0, 0xaf47, 0x1, 0x1);
        gbc.writeMem(0x35ab, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x5b95, gbc.sp());
        EXPECT(0x35ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0188
        gbc.setState(0xbaf4, 0xb4fc, 0x22e0, 0x7982, 0x8501, 0x373, 0x1, 0x1);
        gbc.writeMem(0xbaf4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xb4fc, gbc.sp());
        EXPECT(0xbaf6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaf4));
        EXPECT(0x8d, gbc.readMem(0xbaf5));
        // CB 8D 0189
        gbc.setState(0x959b, 0x9b37, 0xb080, 0xd61e, 0x8f68, 0x5f99, 0x1, 0x1);
        gbc.writeMem(0x959b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x9b37, gbc.sp());
        EXPECT(0x959d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x959b));
        EXPECT(0x8d, gbc.readMem(0x959c));
        // CB 8D 018A
        gbc.setState(0xc83b, 0xd6e3, 0x2300, 0x8e1e, 0x6de4, 0xb7a7, 0x1, 0x1);
        gbc.writeMem(0xc83b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xd6e3, gbc.sp());
        EXPECT(0xc83d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc83b));
        EXPECT(0x8d, gbc.readMem(0xc83c));
        // CB 8D 018B
        gbc.setState(0x361, 0x50d8, 0x83b0, 0xf038, 0x74ab, 0xbfc1, 0x0, 0x0);
        gbc.writeMem(0x361, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x50d8, gbc.sp());
        EXPECT(0x363, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 018C
        gbc.setState(0x28ab, 0x7b2a, 0x2ce0, 0x1b4a, 0xbe3e, 0xb674, 0x0, 0x1);
        gbc.writeMem(0x28ab, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x7b2a, gbc.sp());
        EXPECT(0x28ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 018D
        gbc.setState(0x44d0, 0xdfd1, 0xa570, 0xfea5, 0x5ff9, 0xcde9, 0x1, 0x0);
        gbc.writeMem(0x44d0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xdfd1, gbc.sp());
        EXPECT(0x44d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 018F
        gbc.setState(0xe541, 0x8375, 0xc880, 0xbac2, 0xbd7c, 0xa731, 0x1, 0x1);
        gbc.writeMem(0xe541, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x8375, gbc.sp());
        EXPECT(0xe543, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe541));
        EXPECT(0x8d, gbc.readMem(0xe542));
        // CB 8D 0191
        gbc.setState(0x73, 0x96f3, 0x1fb0, 0x1ade, 0x29fe, 0x1c82, 0x0, 0x1);
        gbc.writeMem(0x73, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x96f3, gbc.sp());
        EXPECT(0x75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0192
        gbc.setState(0xab4e, 0xc450, 0xad30, 0xcbbc, 0x5587, 0xadc0, 0x0, 0x0);
        gbc.writeMem(0xab4e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xc450, gbc.sp());
        EXPECT(0xab50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab4e));
        EXPECT(0x8d, gbc.readMem(0xab4f));
        // CB 8D 0193
        gbc.setState(0x85c2, 0x4af2, 0xd90, 0x501f, 0x7d27, 0xc4ce, 0x1, 0x1);
        gbc.writeMem(0x85c2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x4af2, gbc.sp());
        EXPECT(0x85c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85c2));
        EXPECT(0x8d, gbc.readMem(0x85c3));
        // CB 8D 0195
        gbc.setState(0x330b, 0x850b, 0xe580, 0xe347, 0xc5ed, 0x4956, 0x1, 0x1);
        gbc.writeMem(0x330b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x850b, gbc.sp());
        EXPECT(0x330d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0196
        gbc.setState(0x194a, 0x7025, 0xbd60, 0x9ff8, 0x6434, 0x8be1, 0x1, 0x0);
        gbc.writeMem(0x194a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x7025, gbc.sp());
        EXPECT(0x194c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0197
        gbc.setState(0xdd8e, 0x4291, 0xfbe0, 0x282a, 0x4e7a, 0x819d, 0x0, 0x1);
        gbc.writeMem(0xdd8e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x4291, gbc.sp());
        EXPECT(0xdd90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd8e));
        EXPECT(0x8d, gbc.readMem(0xdd8f));
        // CB 8D 0198
        gbc.setState(0xa1c3, 0xf799, 0x15c0, 0x2c58, 0xefc0, 0x42aa, 0x1, 0x0);
        gbc.writeMem(0xa1c3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xf799, gbc.sp());
        EXPECT(0xa1c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1c3));
        EXPECT(0x8d, gbc.readMem(0xa1c4));
        // CB 8D 0199
        gbc.setState(0x3d25, 0xcf93, 0x39c0, 0xf092, 0x49d7, 0x74f4, 0x1, 0x0);
        gbc.writeMem(0x3d25, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xcf93, gbc.sp());
        EXPECT(0x3d27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 019A
        gbc.setState(0x93b4, 0x7938, 0x68a0, 0x93d5, 0x4c27, 0xc8f, 0x0, 0x0);
        gbc.writeMem(0x93b4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x7938, gbc.sp());
        EXPECT(0x93b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93b4));
        EXPECT(0x8d, gbc.readMem(0x93b5));
        // CB 8D 019B
        gbc.setState(0x5285, 0xdc2d, 0xf9a0, 0xad15, 0x49bc, 0xedae, 0x1, 0x0);
        gbc.writeMem(0x5285, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xdc2d, gbc.sp());
        EXPECT(0x5287, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 019C
        gbc.setState(0xa507, 0xe221, 0x250, 0xd02, 0xfa58, 0x7d71, 0x1, 0x0);
        gbc.writeMem(0xa507, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xe221, gbc.sp());
        EXPECT(0xa509, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa507));
        EXPECT(0x8d, gbc.readMem(0xa508));
        // CB 8D 019D
        gbc.setState(0xcf4c, 0xddd8, 0x14c0, 0xce12, 0x3135, 0x3f30, 0x1, 0x1);
        gbc.writeMem(0xcf4c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xddd8, gbc.sp());
        EXPECT(0xcf4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf4c));
        EXPECT(0x8d, gbc.readMem(0xcf4d));
        // CB 8D 019E
        gbc.setState(0x973f, 0x1184, 0xfa40, 0x8e1a, 0x1885, 0x8880, 0x1, 0x1);
        gbc.writeMem(0x973f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x1184, gbc.sp());
        EXPECT(0x9741, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x973f));
        EXPECT(0x8d, gbc.readMem(0x9740));
        // CB 8D 019F
        gbc.setState(0x5fa9, 0x6dc5, 0xad40, 0x4aff, 0x24f6, 0x759b, 0x1, 0x1);
        gbc.writeMem(0x5fa9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x6dc5, gbc.sp());
        EXPECT(0x5fab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01A0
        gbc.setState(0x9391, 0x3c2e, 0xa2f0, 0xfb2d, 0x8e79, 0x8607, 0x0, 0x1);
        gbc.writeMem(0x9391, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x3c2e, gbc.sp());
        EXPECT(0x9393, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9391));
        EXPECT(0x8d, gbc.readMem(0x9392));
        // CB 8D 01A1
        gbc.setState(0x4946, 0x6162, 0x6c10, 0x59ab, 0xde41, 0xd3b2, 0x1, 0x0);
        gbc.writeMem(0x4946, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x6162, gbc.sp());
        EXPECT(0x4948, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01A2
        gbc.setState(0x4f98, 0x4880, 0xe9b0, 0x49da, 0x93c4, 0x2274, 0x1, 0x0);
        gbc.writeMem(0x4f98, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x4880, gbc.sp());
        EXPECT(0x4f9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01A3
        gbc.setState(0xe4d6, 0x178a, 0xd4b0, 0xe7b2, 0x57a6, 0xeb32, 0x1, 0x1);
        gbc.writeMem(0xe4d6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x178a, gbc.sp());
        EXPECT(0xe4d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4d6));
        EXPECT(0x8d, gbc.readMem(0xe4d7));
        // CB 8D 01A4
        gbc.setState(0xa006, 0x9216, 0x1a40, 0xcdb8, 0xe07d, 0x9d97, 0x0, 0x0);
        gbc.writeMem(0xa006, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x9216, gbc.sp());
        EXPECT(0xa008, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa006));
        EXPECT(0x8d, gbc.readMem(0xa007));
        // CB 8D 01A5
        gbc.setState(0x61d4, 0x4111, 0x4380, 0xde72, 0x92d5, 0x2c5b, 0x1, 0x1);
        gbc.writeMem(0x61d4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x4111, gbc.sp());
        EXPECT(0x61d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01A6
        gbc.setState(0xdd57, 0xa7c5, 0xc8c0, 0xeb09, 0x68d1, 0xae0b, 0x0, 0x1);
        gbc.writeMem(0xdd57, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xa7c5, gbc.sp());
        EXPECT(0xdd59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd57));
        EXPECT(0x8d, gbc.readMem(0xdd58));
        // CB 8D 01A7
        gbc.setState(0xcdd8, 0xbd75, 0x8940, 0xd27, 0x9037, 0x7df5, 0x0, 0x0);
        gbc.writeMem(0xcdd8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xbd75, gbc.sp());
        EXPECT(0xcdda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdd8));
        EXPECT(0x8d, gbc.readMem(0xcdd9));
        // CB 8D 01A8
        gbc.setState(0x1acb, 0xc6a4, 0xdc70, 0xbd60, 0x7101, 0x6eb2, 0x1, 0x1);
        gbc.writeMem(0x1acb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xc6a4, gbc.sp());
        EXPECT(0x1acd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01A9
        gbc.setState(0x22bf, 0x98a8, 0x8db0, 0x25d3, 0x597a, 0x6e03, 0x0, 0x1);
        gbc.writeMem(0x22bf, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x98a8, gbc.sp());
        EXPECT(0x22c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01AA
        gbc.setState(0x58cc, 0xb62f, 0x7220, 0x2af4, 0x43df, 0x92eb, 0x1, 0x0);
        gbc.writeMem(0x58cc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xb62f, gbc.sp());
        EXPECT(0x58ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01AB
        gbc.setState(0x6080, 0xab24, 0x9120, 0xb70, 0x36b1, 0xe71a, 0x0, 0x1);
        gbc.writeMem(0x6080, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xab24, gbc.sp());
        EXPECT(0x6082, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01AC
        gbc.setState(0xc89d, 0x33fe, 0x1e40, 0x4d31, 0xfcef, 0xa61b, 0x1, 0x1);
        gbc.writeMem(0xc89d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x33fe, gbc.sp());
        EXPECT(0xc89f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc89d));
        EXPECT(0x8d, gbc.readMem(0xc89e));
        // CB 8D 01AD
        gbc.setState(0xb5ee, 0xca9b, 0x9110, 0xa5e1, 0x9115, 0x7b75, 0x0, 0x0);
        gbc.writeMem(0xb5ee, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xca9b, gbc.sp());
        EXPECT(0xb5f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5ee));
        EXPECT(0x8d, gbc.readMem(0xb5ef));
        // CB 8D 01AE
        gbc.setState(0x6b97, 0x98a1, 0x220, 0x8456, 0xe555, 0xfe4b, 0x1, 0x0);
        gbc.writeMem(0x6b97, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x98a1, gbc.sp());
        EXPECT(0x6b99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01AF
        gbc.setState(0xbce4, 0xb75e, 0x55f0, 0x98a8, 0x41a6, 0x1c88, 0x1, 0x1);
        gbc.writeMem(0xbce4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xb75e, gbc.sp());
        EXPECT(0xbce6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbce4));
        EXPECT(0x8d, gbc.readMem(0xbce5));
        // CB 8D 01B0
        gbc.setState(0xaa83, 0x5183, 0x4d40, 0x2573, 0xcb2, 0xfe8b, 0x1, 0x1);
        gbc.writeMem(0xaa83, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x5183, gbc.sp());
        EXPECT(0xaa85, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa83));
        EXPECT(0x8d, gbc.readMem(0xaa84));
        // CB 8D 01B1
        gbc.setState(0xa8a9, 0x318f, 0x7c30, 0x3d92, 0x1517, 0xf350, 0x1, 0x1);
        gbc.writeMem(0xa8a9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x318f, gbc.sp());
        EXPECT(0xa8ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8a9));
        EXPECT(0x8d, gbc.readMem(0xa8aa));
        // CB 8D 01B2
        gbc.setState(0x2d16, 0x8d83, 0xd8c0, 0xe2b8, 0xe4d8, 0x9ebf, 0x0, 0x0);
        gbc.writeMem(0x2d16, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x8d83, gbc.sp());
        EXPECT(0x2d18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01B3
        gbc.setState(0x925d, 0x5848, 0x20c0, 0xe526, 0x639a, 0xc3cd, 0x1, 0x1);
        gbc.writeMem(0x925d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x5848, gbc.sp());
        EXPECT(0x925f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x925d));
        EXPECT(0x8d, gbc.readMem(0x925e));
        // CB 8D 01B4
        gbc.setState(0xe572, 0xc895, 0x4fd0, 0xb6f7, 0x565, 0x731, 0x1, 0x0);
        gbc.writeMem(0xe572, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xc895, gbc.sp());
        EXPECT(0xe574, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe572));
        EXPECT(0x8d, gbc.readMem(0xe573));
        // CB 8D 01B5
        gbc.setState(0x89b1, 0x1490, 0x2a70, 0xb233, 0x386f, 0xf22a, 0x1, 0x0);
        gbc.writeMem(0x89b1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x1490, gbc.sp());
        EXPECT(0x89b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89b1));
        EXPECT(0x8d, gbc.readMem(0x89b2));
        // CB 8D 01B6
        gbc.setState(0x11c1, 0x1026, 0x7570, 0x830, 0xfaf, 0x4d31, 0x0, 0x1);
        gbc.writeMem(0x11c1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x1026, gbc.sp());
        EXPECT(0x11c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01B7
        gbc.setState(0x3442, 0x1322, 0xae50, 0x46a0, 0x10ad, 0x2ae2, 0x0, 0x1);
        gbc.writeMem(0x3442, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x1322, gbc.sp());
        EXPECT(0x3444, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01B8
        gbc.setState(0xa853, 0xf525, 0x1580, 0xaab4, 0x3324, 0x2bd0, 0x0, 0x1);
        gbc.writeMem(0xa853, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xf525, gbc.sp());
        EXPECT(0xa855, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa853));
        EXPECT(0x8d, gbc.readMem(0xa854));
        // CB 8D 01B9
        gbc.setState(0xf5c, 0x2b6b, 0x42a0, 0xe8dd, 0xf292, 0x2a47, 0x1, 0x0);
        gbc.writeMem(0xf5c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x2b6b, gbc.sp());
        EXPECT(0xf5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01BA
        gbc.setState(0xd23, 0xcba3, 0x26b0, 0x3465, 0x903a, 0xd78c, 0x1, 0x1);
        gbc.writeMem(0xd23, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xcba3, gbc.sp());
        EXPECT(0xd25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01BB
        gbc.setState(0x951f, 0xeac0, 0x7870, 0xa5aa, 0x345e, 0xb3ba, 0x0, 0x0);
        gbc.writeMem(0x951f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xeac0, gbc.sp());
        EXPECT(0x9521, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x951f));
        EXPECT(0x8d, gbc.readMem(0x9520));
        // CB 8D 01BC
        gbc.setState(0x7f27, 0x56f4, 0x7650, 0x8b18, 0x9cc3, 0xa16e, 0x1, 0x0);
        gbc.writeMem(0x7f27, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x56f4, gbc.sp());
        EXPECT(0x7f29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01BD
        gbc.setState(0xc971, 0x5274, 0x6c60, 0x7122, 0x890, 0xf071, 0x0, 0x1);
        gbc.writeMem(0xc971, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x5274, gbc.sp());
        EXPECT(0xc973, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc971));
        EXPECT(0x8d, gbc.readMem(0xc972));
        // CB 8D 01BE
        gbc.setState(0x464b, 0x7c97, 0xf120, 0xf06, 0xd128, 0xe9d8, 0x1, 0x0);
        gbc.writeMem(0x464b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x7c97, gbc.sp());
        EXPECT(0x464d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01BF
        gbc.setState(0xda14, 0x2ac3, 0xea80, 0xd078, 0xb72c, 0xfd3c, 0x1, 0x0);
        gbc.writeMem(0xda14, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x2ac3, gbc.sp());
        EXPECT(0xda16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda14));
        EXPECT(0x8d, gbc.readMem(0xda15));
        // CB 8D 01C1
        gbc.setState(0x3b21, 0x9460, 0xf830, 0x8106, 0x8af3, 0x8da0, 0x1, 0x0);
        gbc.writeMem(0x3b21, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x9460, gbc.sp());
        EXPECT(0x3b23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01C2
        gbc.setState(0x297, 0x3752, 0x59a0, 0x614f, 0xb0ac, 0xfaa5, 0x0, 0x1);
        gbc.writeMem(0x297, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x3752, gbc.sp());
        EXPECT(0x299, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01C3
        gbc.setState(0x82a4, 0x9710, 0xdba0, 0x178a, 0xeecc, 0x9d8a, 0x0, 0x1);
        gbc.writeMem(0x82a4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x9710, gbc.sp());
        EXPECT(0x82a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82a4));
        EXPECT(0x8d, gbc.readMem(0x82a5));
        // CB 8D 01C4
        gbc.setState(0x6ab6, 0x82d3, 0xa1e0, 0x7ee, 0xbae, 0xc219, 0x1, 0x0);
        gbc.writeMem(0x6ab6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x82d3, gbc.sp());
        EXPECT(0x6ab8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01C5
        gbc.setState(0x4092, 0xe21d, 0xb270, 0xc938, 0x9835, 0xe848, 0x1, 0x0);
        gbc.writeMem(0x4092, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xe21d, gbc.sp());
        EXPECT(0x4094, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01C6
        gbc.setState(0x81d5, 0x288e, 0x7150, 0x15ab, 0x9c16, 0x896, 0x1, 0x1);
        gbc.writeMem(0x81d5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x288e, gbc.sp());
        EXPECT(0x81d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81d5));
        EXPECT(0x8d, gbc.readMem(0x81d6));
        // CB 8D 01C7
        gbc.setState(0xc88a, 0x1612, 0xe6e0, 0x6025, 0x4835, 0xb154, 0x0, 0x1);
        gbc.writeMem(0xc88a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x1612, gbc.sp());
        EXPECT(0xc88c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc88a));
        EXPECT(0x8d, gbc.readMem(0xc88b));
        // CB 8D 01C8
        gbc.setState(0x123, 0xb984, 0x210, 0x9533, 0x3cde, 0x31cb, 0x0, 0x1);
        gbc.writeMem(0x123, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xb984, gbc.sp());
        EXPECT(0x125, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01C9
        gbc.setState(0x54cd, 0xacb, 0x4270, 0xa465, 0xe76f, 0xf9c7, 0x0, 0x1);
        gbc.writeMem(0x54cd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xacb, gbc.sp());
        EXPECT(0x54cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01CA
        gbc.setState(0x2e0c, 0xd7f3, 0xc740, 0x7a28, 0xaf7b, 0xe324, 0x1, 0x1);
        gbc.writeMem(0x2e0c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xd7f3, gbc.sp());
        EXPECT(0x2e0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01CB
        gbc.setState(0x2400, 0x42e1, 0xf2d0, 0x63f9, 0xa556, 0x7bb0, 0x1, 0x0);
        gbc.writeMem(0x2400, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x42e1, gbc.sp());
        EXPECT(0x2402, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01CC
        gbc.setState(0xa726, 0x9507, 0xafe0, 0x806e, 0x1570, 0x7bed, 0x0, 0x1);
        gbc.writeMem(0xa726, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x9507, gbc.sp());
        EXPECT(0xa728, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa726));
        EXPECT(0x8d, gbc.readMem(0xa727));
        // CB 8D 01CD
        gbc.setState(0xb96f, 0x45b8, 0x3790, 0x4337, 0x84a5, 0x7a57, 0x1, 0x1);
        gbc.writeMem(0xb96f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x45b8, gbc.sp());
        EXPECT(0xb971, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb96f));
        EXPECT(0x8d, gbc.readMem(0xb970));
        // CB 8D 01CE
        gbc.setState(0xceb0, 0xd895, 0x5040, 0x9869, 0x89c, 0x1e39, 0x1, 0x1);
        gbc.writeMem(0xceb0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xd895, gbc.sp());
        EXPECT(0xceb2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xceb0));
        EXPECT(0x8d, gbc.readMem(0xceb1));
        // CB 8D 01CF
        gbc.setState(0xaa32, 0x7935, 0x7320, 0x2e5a, 0x366e, 0x487c, 0x1, 0x1);
        gbc.writeMem(0xaa32, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x7935, gbc.sp());
        EXPECT(0xaa34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa32));
        EXPECT(0x8d, gbc.readMem(0xaa33));
        // CB 8D 01D0
        gbc.setState(0x4246, 0x8cb5, 0x7d40, 0x3cda, 0xf335, 0xd953, 0x1, 0x1);
        gbc.writeMem(0x4246, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x8cb5, gbc.sp());
        EXPECT(0x4248, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01D1
        gbc.setState(0xe0bd, 0x70da, 0xb2b0, 0x5656, 0xc891, 0x785e, 0x0, 0x0);
        gbc.writeMem(0xe0bd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x70da, gbc.sp());
        EXPECT(0xe0bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0bd));
        EXPECT(0x8d, gbc.readMem(0xe0be));
        // CB 8D 01D2
        gbc.setState(0xdce, 0xf3e0, 0xc780, 0xd4b9, 0x3176, 0x5efb, 0x1, 0x1);
        gbc.writeMem(0xdce, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xf3e0, gbc.sp());
        EXPECT(0xdd0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01D3
        gbc.setState(0x7127, 0x34bb, 0xb980, 0x392e, 0xb721, 0x3ca1, 0x1, 0x0);
        gbc.writeMem(0x7127, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x34bb, gbc.sp());
        EXPECT(0x7129, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01D4
        gbc.setState(0x1598, 0xfa25, 0x9690, 0xea96, 0x826, 0x833f, 0x0, 0x1);
        gbc.writeMem(0x1598, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xfa25, gbc.sp());
        EXPECT(0x159a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01D5
        gbc.setState(0x7dd3, 0x7007, 0x3230, 0xf787, 0xc198, 0x34e6, 0x1, 0x0);
        gbc.writeMem(0x7dd3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x7007, gbc.sp());
        EXPECT(0x7dd5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01D6
        gbc.setState(0x688a, 0x909b, 0x8020, 0x4907, 0x9f8f, 0x1da8, 0x0, 0x0);
        gbc.writeMem(0x688a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x909b, gbc.sp());
        EXPECT(0x688c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01D7
        gbc.setState(0x3f71, 0x1831, 0x6790, 0xcd51, 0x1adb, 0x63a2, 0x1, 0x0);
        gbc.writeMem(0x3f71, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x1831, gbc.sp());
        EXPECT(0x3f73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01D8
        gbc.setState(0x441a, 0x41d, 0x12d0, 0x8ff6, 0x1e31, 0xa34c, 0x0, 0x0);
        gbc.writeMem(0x441a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x41d, gbc.sp());
        EXPECT(0x441c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01D9
        gbc.setState(0x8c4e, 0xdbbb, 0xc1c0, 0x5e66, 0xd608, 0x3551, 0x0, 0x0);
        gbc.writeMem(0x8c4e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xdbbb, gbc.sp());
        EXPECT(0x8c50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c4e));
        EXPECT(0x8d, gbc.readMem(0x8c4f));
        // CB 8D 01DA
        gbc.setState(0xe341, 0xad5, 0x6400, 0x3347, 0xc943, 0xde79, 0x1, 0x0);
        gbc.writeMem(0xe341, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xad5, gbc.sp());
        EXPECT(0xe343, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe341));
        EXPECT(0x8d, gbc.readMem(0xe342));
        // CB 8D 01DB
        gbc.setState(0xc760, 0x9f35, 0x4a80, 0xee1c, 0x3b44, 0x269c, 0x1, 0x1);
        gbc.writeMem(0xc760, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x9f35, gbc.sp());
        EXPECT(0xc762, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc760));
        EXPECT(0x8d, gbc.readMem(0xc761));
        // CB 8D 01DC
        gbc.setState(0x4c0c, 0x8b2e, 0x3a00, 0xed7b, 0xe31c, 0xa386, 0x0, 0x0);
        gbc.writeMem(0x4c0c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x8b2e, gbc.sp());
        EXPECT(0x4c0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01DD
        gbc.setState(0xb148, 0x92a5, 0xa500, 0x6f22, 0x582a, 0xc96c, 0x0, 0x1);
        gbc.writeMem(0xb148, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x92a5, gbc.sp());
        EXPECT(0xb14a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb148));
        EXPECT(0x8d, gbc.readMem(0xb149));
        // CB 8D 01DE
        gbc.setState(0x77dd, 0x2ded, 0x8610, 0x6f9f, 0x84e7, 0x8000, 0x0, 0x0);
        gbc.writeMem(0x77dd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x2ded, gbc.sp());
        EXPECT(0x77df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01DF
        gbc.setState(0x20fc, 0xc416, 0x1650, 0xaeed, 0x379c, 0x2c82, 0x1, 0x1);
        gbc.writeMem(0x20fc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xc416, gbc.sp());
        EXPECT(0x20fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01E0
        gbc.setState(0x5944, 0x1dd6, 0x6340, 0x5e4c, 0x3065, 0xb6aa, 0x0, 0x0);
        gbc.writeMem(0x5944, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x1dd6, gbc.sp());
        EXPECT(0x5946, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01E1
        gbc.setState(0xd4dc, 0x76ed, 0x44f0, 0xbe7c, 0xf081, 0x5da7, 0x0, 0x1);
        gbc.writeMem(0xd4dc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x76ed, gbc.sp());
        EXPECT(0xd4de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4dc));
        EXPECT(0x8d, gbc.readMem(0xd4dd));
        // CB 8D 01E2
        gbc.setState(0x17f5, 0xc7ab, 0x46e0, 0xb98a, 0xc8d9, 0x24d5, 0x1, 0x0);
        gbc.writeMem(0x17f5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xc7ab, gbc.sp());
        EXPECT(0x17f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01E3
        gbc.setState(0x9f28, 0x31d5, 0x51f0, 0x61f4, 0x8746, 0xfce5, 0x0, 0x1);
        gbc.writeMem(0x9f28, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x31d5, gbc.sp());
        EXPECT(0x9f2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f28));
        EXPECT(0x8d, gbc.readMem(0x9f29));
        // CB 8D 01E4
        gbc.setState(0x64a3, 0x165f, 0xc6e0, 0x7d50, 0x63c2, 0xdbb, 0x0, 0x1);
        gbc.writeMem(0x64a3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x165f, gbc.sp());
        EXPECT(0x64a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01E5
        gbc.setState(0x2653, 0xccf, 0xcd10, 0x34c5, 0xb1ca, 0xb22, 0x1, 0x1);
        gbc.writeMem(0x2653, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xccf, gbc.sp());
        EXPECT(0x2655, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01E6
        gbc.setState(0x3028, 0xbe06, 0x7aa0, 0x28b5, 0xf330, 0xa0fc, 0x1, 0x1);
        gbc.writeMem(0x3028, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xbe06, gbc.sp());
        EXPECT(0x302a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01E8
        gbc.setState(0x7ada, 0x775f, 0xbe50, 0xc987, 0xd922, 0xfa93, 0x1, 0x0);
        gbc.writeMem(0x7ada, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x775f, gbc.sp());
        EXPECT(0x7adc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01E9
        gbc.setState(0x4e96, 0xa698, 0x4640, 0x8266, 0x9a48, 0xa3a0, 0x0, 0x0);
        gbc.writeMem(0x4e96, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xa698, gbc.sp());
        EXPECT(0x4e98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01EA
        gbc.setState(0xc607, 0x3752, 0xb260, 0x764b, 0x9472, 0x2b07, 0x1, 0x0);
        gbc.writeMem(0xc607, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x3752, gbc.sp());
        EXPECT(0xc609, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc607));
        EXPECT(0x8d, gbc.readMem(0xc608));
        // CB 8D 01EB
        gbc.setState(0xe1e7, 0xb4ae, 0xf6c0, 0x1ff4, 0x17e0, 0xff2d, 0x0, 0x0);
        gbc.writeMem(0xe1e7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xb4ae, gbc.sp());
        EXPECT(0xe1e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1e7));
        EXPECT(0x8d, gbc.readMem(0xe1e8));
        // CB 8D 01EC
        gbc.setState(0xaaa8, 0xb17b, 0x6700, 0x8bb6, 0xf732, 0xe8fc, 0x1, 0x0);
        gbc.writeMem(0xaaa8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xb17b, gbc.sp());
        EXPECT(0xaaaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaaa8));
        EXPECT(0x8d, gbc.readMem(0xaaa9));
        // CB 8D 01ED
        gbc.setState(0xb8ce, 0xa350, 0xdb0, 0xa681, 0xa6a1, 0x8fb5, 0x1, 0x0);
        gbc.writeMem(0xb8ce, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xa350, gbc.sp());
        EXPECT(0xb8d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8ce));
        EXPECT(0x8d, gbc.readMem(0xb8cf));
        // CB 8D 01EE
        gbc.setState(0xd0be, 0xa0c9, 0x520, 0xae9e, 0xe2ad, 0xa4d6, 0x0, 0x1);
        gbc.writeMem(0xd0be, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xa0c9, gbc.sp());
        EXPECT(0xd0c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0be));
        EXPECT(0x8d, gbc.readMem(0xd0bf));
        // CB 8D 01EF
        gbc.setState(0x1651, 0xd5e8, 0xc350, 0xa08f, 0x3b5c, 0x2321, 0x0, 0x0);
        gbc.writeMem(0x1651, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xd5e8, gbc.sp());
        EXPECT(0x1653, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01F0
        gbc.setState(0x5f6a, 0x1e30, 0x6e30, 0x84f9, 0x93ac, 0xc134, 0x1, 0x0);
        gbc.writeMem(0x5f6a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x1e30, gbc.sp());
        EXPECT(0x5f6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01F1
        gbc.setState(0x1801, 0x3911, 0x7430, 0xca59, 0x7fb, 0xb89d, 0x1, 0x1);
        gbc.writeMem(0x1801, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x3911, gbc.sp());
        EXPECT(0x1803, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01F2
        gbc.setState(0x79, 0x7a68, 0x75f0, 0x5944, 0xb5ca, 0x8619, 0x1, 0x1);
        gbc.writeMem(0x79, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x7a68, gbc.sp());
        EXPECT(0x7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01F3
        gbc.setState(0xda31, 0x2f85, 0xa910, 0x8967, 0xf18b, 0x41b6, 0x1, 0x0);
        gbc.writeMem(0xda31, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x2f85, gbc.sp());
        EXPECT(0xda33, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda31));
        EXPECT(0x8d, gbc.readMem(0xda32));
        // CB 8D 01F4
        gbc.setState(0x4943, 0xbd, 0xf6d0, 0x5bc8, 0x65ba, 0xd656, 0x0, 0x0);
        gbc.writeMem(0x4943, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xbd, gbc.sp());
        EXPECT(0x4945, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01F5
        gbc.setState(0x7cf2, 0x3875, 0xc9e0, 0x23a5, 0xf1c6, 0xf19, 0x0, 0x0);
        gbc.writeMem(0x7cf2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x3875, gbc.sp());
        EXPECT(0x7cf4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01F6
        gbc.setState(0xa1ae, 0x9698, 0xc8d0, 0xc6d3, 0xaf8a, 0xed21, 0x1, 0x0);
        gbc.writeMem(0xa1ae, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x9698, gbc.sp());
        EXPECT(0xa1b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1ae));
        EXPECT(0x8d, gbc.readMem(0xa1af));
        // CB 8D 01F7
        gbc.setState(0x5ebc, 0x5114, 0xb870, 0x81af, 0xdac7, 0x7891, 0x0, 0x0);
        gbc.writeMem(0x5ebc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x5114, gbc.sp());
        EXPECT(0x5ebe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01F8
        gbc.setState(0x5db6, 0xb7c7, 0x8bd0, 0x860d, 0xc847, 0x5259, 0x1, 0x0);
        gbc.writeMem(0x5db6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xb7c7, gbc.sp());
        EXPECT(0x5db8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01F9
        gbc.setState(0xe50c, 0x8832, 0x1410, 0x7a37, 0xc932, 0xd9b0, 0x0, 0x0);
        gbc.writeMem(0xe50c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x8832, gbc.sp());
        EXPECT(0xe50e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe50c));
        EXPECT(0x8d, gbc.readMem(0xe50d));
        // CB 8D 01FA
        gbc.setState(0x4e93, 0x57d5, 0x360, 0x8094, 0x1852, 0xa665, 0x0, 0x0);
        gbc.writeMem(0x4e93, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x57d5, gbc.sp());
        EXPECT(0x4e95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01FB
        gbc.setState(0x6c54, 0xe100, 0x61b0, 0xd041, 0xd88b, 0x4754, 0x1, 0x0);
        gbc.writeMem(0x6c54, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xe100, gbc.sp());
        EXPECT(0x6c56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 01FD
        gbc.setState(0xb359, 0xd9fe, 0x43d0, 0xc5ed, 0xecb4, 0xd21e, 0x1, 0x1);
        gbc.writeMem(0xb359, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xd9fe, gbc.sp());
        EXPECT(0xb35b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb359));
        EXPECT(0x8d, gbc.readMem(0xb35a));
        // CB 8D 01FE
        gbc.setState(0x44bd, 0xcb6a, 0x8b80, 0xc3f7, 0x2ab, 0x253a, 0x1, 0x1);
        gbc.writeMem(0x44bd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xcb6a, gbc.sp());
        EXPECT(0x44bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 01FF
        gbc.setState(0xe125, 0x5f8, 0x8bf0, 0xc18b, 0x4464, 0x43eb, 0x0, 0x0);
        gbc.writeMem(0xe125, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x5f8, gbc.sp());
        EXPECT(0xe127, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe125));
        EXPECT(0x8d, gbc.readMem(0xe126));
        // CB 8D 0200
        gbc.setState(0x6a94, 0xe01c, 0x9410, 0x5741, 0xfd38, 0x6bda, 0x1, 0x1);
        gbc.writeMem(0x6a94, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xe01c, gbc.sp());
        EXPECT(0x6a96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0201
        gbc.setState(0x590e, 0x1520, 0xfad0, 0xbb68, 0x11af, 0x254b, 0x0, 0x1);
        gbc.writeMem(0x590e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x1520, gbc.sp());
        EXPECT(0x5910, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0202
        gbc.setState(0x4834, 0xb63f, 0x4510, 0x485, 0x38aa, 0x2b01, 0x1, 0x0);
        gbc.writeMem(0x4834, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xb63f, gbc.sp());
        EXPECT(0x4836, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0203
        gbc.setState(0x7612, 0x6a37, 0x4db0, 0x89e2, 0xe2d3, 0xdfc3, 0x0, 0x0);
        gbc.writeMem(0x7612, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x6a37, gbc.sp());
        EXPECT(0x7614, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0204
        gbc.setState(0xb8c3, 0x27, 0xee90, 0x42ed, 0x72bf, 0x38d7, 0x0, 0x1);
        gbc.writeMem(0xb8c3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x27, gbc.sp());
        EXPECT(0xb8c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8c3));
        EXPECT(0x8d, gbc.readMem(0xb8c4));
        // CB 8D 0205
        gbc.setState(0x722, 0xf432, 0x4d40, 0x707c, 0xf40, 0xaa17, 0x0, 0x1);
        gbc.writeMem(0x722, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xf432, gbc.sp());
        EXPECT(0x724, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0206
        gbc.setState(0xd487, 0x94ce, 0xfc70, 0x4be7, 0xe24, 0xaada, 0x1, 0x1);
        gbc.writeMem(0xd487, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x94ce, gbc.sp());
        EXPECT(0xd489, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd487));
        EXPECT(0x8d, gbc.readMem(0xd488));
        // CB 8D 0207
        gbc.setState(0x4c43, 0xe212, 0x1770, 0x7b3b, 0x4d7d, 0x2a25, 0x0, 0x1);
        gbc.writeMem(0x4c43, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xe212, gbc.sp());
        EXPECT(0x4c45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 020A
        gbc.setState(0x8240, 0xccab, 0xe560, 0x497c, 0x5da0, 0xc1b9, 0x0, 0x0);
        gbc.writeMem(0x8240, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xccab, gbc.sp());
        EXPECT(0x8242, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8240));
        EXPECT(0x8d, gbc.readMem(0x8241));
        // CB 8D 020B
        gbc.setState(0x931b, 0xb0e0, 0x5300, 0xdfc1, 0x168b, 0xfbd3, 0x1, 0x0);
        gbc.writeMem(0x931b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xb0e0, gbc.sp());
        EXPECT(0x931d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x931b));
        EXPECT(0x8d, gbc.readMem(0x931c));
        // CB 8D 020C
        gbc.setState(0xd44a, 0x8c86, 0xca00, 0x3136, 0xa8ef, 0x9be2, 0x0, 0x1);
        gbc.writeMem(0xd44a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x8c86, gbc.sp());
        EXPECT(0xd44c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd44a));
        EXPECT(0x8d, gbc.readMem(0xd44b));
        // CB 8D 020D
        gbc.setState(0xc9fc, 0x510c, 0xa160, 0x4b74, 0x81fc, 0x26d0, 0x1, 0x1);
        gbc.writeMem(0xc9fc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x510c, gbc.sp());
        EXPECT(0xc9fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9fc));
        EXPECT(0x8d, gbc.readMem(0xc9fd));
        // CB 8D 020F
        gbc.setState(0x4f44, 0x92e0, 0x5160, 0x957a, 0xa95c, 0x811e, 0x1, 0x0);
        gbc.writeMem(0x4f44, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x92e0, gbc.sp());
        EXPECT(0x4f46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0210
        gbc.setState(0x65b1, 0x37bc, 0xa000, 0xf369, 0x1c7c, 0x683d, 0x1, 0x0);
        gbc.writeMem(0x65b1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x37bc, gbc.sp());
        EXPECT(0x65b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0211
        gbc.setState(0x96cc, 0xa293, 0xe690, 0x333f, 0xecc2, 0x20cc, 0x1, 0x0);
        gbc.writeMem(0x96cc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xa293, gbc.sp());
        EXPECT(0x96ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96cc));
        EXPECT(0x8d, gbc.readMem(0x96cd));
        // CB 8D 0212
        gbc.setState(0x185a, 0x298e, 0x6d0, 0x3f29, 0xba6c, 0x65ed, 0x0, 0x1);
        gbc.writeMem(0x185a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x298e, gbc.sp());
        EXPECT(0x185c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0213
        gbc.setState(0x51bf, 0xcd32, 0x5840, 0x3bb, 0x6b90, 0x2aa0, 0x1, 0x0);
        gbc.writeMem(0x51bf, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xcd32, gbc.sp());
        EXPECT(0x51c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0214
        gbc.setState(0xaa28, 0x3be0, 0xc340, 0x9bd9, 0xd8a, 0x5c92, 0x0, 0x1);
        gbc.writeMem(0xaa28, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x3be0, gbc.sp());
        EXPECT(0xaa2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa28));
        EXPECT(0x8d, gbc.readMem(0xaa29));
        // CB 8D 0215
        gbc.setState(0x420f, 0x4d0f, 0xa460, 0xe52f, 0x3453, 0xa042, 0x0, 0x0);
        gbc.writeMem(0x420f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x4d0f, gbc.sp());
        EXPECT(0x4211, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0216
        gbc.setState(0x5737, 0x23bb, 0xa600, 0x22aa, 0x7e14, 0xb0dc, 0x0, 0x1);
        gbc.writeMem(0x5737, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x23bb, gbc.sp());
        EXPECT(0x5739, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0217
        gbc.setState(0x284a, 0x11b2, 0x72b0, 0x74ee, 0xf44f, 0xd262, 0x1, 0x0);
        gbc.writeMem(0x284a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x11b2, gbc.sp());
        EXPECT(0x284c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0218
        gbc.setState(0xc81f, 0x6ada, 0x85b0, 0x6ac4, 0x8d92, 0xaa32, 0x0, 0x1);
        gbc.writeMem(0xc81f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x6ada, gbc.sp());
        EXPECT(0xc821, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc81f));
        EXPECT(0x8d, gbc.readMem(0xc820));
        // CB 8D 0219
        gbc.setState(0x89c1, 0xdd7, 0xf5e0, 0xd2a1, 0xd503, 0x74a0, 0x0, 0x0);
        gbc.writeMem(0x89c1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xdd7, gbc.sp());
        EXPECT(0x89c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89c1));
        EXPECT(0x8d, gbc.readMem(0x89c2));
        // CB 8D 021A
        gbc.setState(0x9ee5, 0xc294, 0x7710, 0x8a6f, 0xeb42, 0x8db4, 0x0, 0x0);
        gbc.writeMem(0x9ee5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xc294, gbc.sp());
        EXPECT(0x9ee7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ee5));
        EXPECT(0x8d, gbc.readMem(0x9ee6));
        // CB 8D 021B
        gbc.setState(0x6a69, 0x5c6, 0x7520, 0xa99d, 0x4677, 0x11c8, 0x1, 0x1);
        gbc.writeMem(0x6a69, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x5c6, gbc.sp());
        EXPECT(0x6a6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 021C
        gbc.setState(0x941a, 0xa5a7, 0x7520, 0x4e3d, 0xc4bb, 0xfc78, 0x0, 0x1);
        gbc.writeMem(0x941a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xa5a7, gbc.sp());
        EXPECT(0x941c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x941a));
        EXPECT(0x8d, gbc.readMem(0x941b));
        // CB 8D 021D
        gbc.setState(0xcf8, 0xf3ad, 0x6b50, 0xaa5d, 0x3156, 0x4e0e, 0x0, 0x1);
        gbc.writeMem(0xcf8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xf3ad, gbc.sp());
        EXPECT(0xcfa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 021F
        gbc.setState(0x9a10, 0x6cf9, 0x8860, 0xb013, 0xdffb, 0x7078, 0x1, 0x0);
        gbc.writeMem(0x9a10, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x6cf9, gbc.sp());
        EXPECT(0x9a12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a10));
        EXPECT(0x8d, gbc.readMem(0x9a11));
        // CB 8D 0220
        gbc.setState(0x72b2, 0xcda0, 0xfc0, 0xbc8d, 0xc818, 0xddb5, 0x1, 0x0);
        gbc.writeMem(0x72b2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xcda0, gbc.sp());
        EXPECT(0x72b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0221
        gbc.setState(0x3d08, 0xc60a, 0x5b00, 0x74, 0x9c1, 0xd694, 0x0, 0x0);
        gbc.writeMem(0x3d08, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xc60a, gbc.sp());
        EXPECT(0x3d0a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0222
        gbc.setState(0x3d55, 0x2a45, 0x91d0, 0x89c0, 0x432e, 0xd25f, 0x1, 0x1);
        gbc.writeMem(0x3d55, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x2a45, gbc.sp());
        EXPECT(0x3d57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0223
        gbc.setState(0x5486, 0x298c, 0x3280, 0x359a, 0xaacb, 0x85f5, 0x0, 0x1);
        gbc.writeMem(0x5486, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x298c, gbc.sp());
        EXPECT(0x5488, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0225
        gbc.setState(0xb276, 0xd67f, 0x7e20, 0x56fe, 0x3fbb, 0x85c1, 0x1, 0x1);
        gbc.writeMem(0xb276, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xd67f, gbc.sp());
        EXPECT(0xb278, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb276));
        EXPECT(0x8d, gbc.readMem(0xb277));
        // CB 8D 0226
        gbc.setState(0xd3d3, 0xef87, 0x2db0, 0x1afb, 0x3c70, 0x1d7b, 0x1, 0x0);
        gbc.writeMem(0xd3d3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xef87, gbc.sp());
        EXPECT(0xd3d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3d3));
        EXPECT(0x8d, gbc.readMem(0xd3d4));
        // CB 8D 0227
        gbc.setState(0x120e, 0x9162, 0xaad0, 0x23df, 0xed40, 0x76a4, 0x0, 0x1);
        gbc.writeMem(0x120e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x9162, gbc.sp());
        EXPECT(0x1210, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0228
        gbc.setState(0x525, 0xfa6a, 0xed40, 0x8f44, 0x97c3, 0x4cc7, 0x0, 0x0);
        gbc.writeMem(0x525, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xfa6a, gbc.sp());
        EXPECT(0x527, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0229
        gbc.setState(0x61c2, 0xff31, 0x9f50, 0x8495, 0x1a94, 0x224f, 0x0, 0x1);
        gbc.writeMem(0x61c2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xff31, gbc.sp());
        EXPECT(0x61c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 022A
        gbc.setState(0x49f1, 0x62fa, 0xbac0, 0x75a9, 0x9ae1, 0x53f3, 0x1, 0x1);
        gbc.writeMem(0x49f1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x62fa, gbc.sp());
        EXPECT(0x49f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 022B
        gbc.setState(0x3a09, 0x4ba7, 0x9cc0, 0xe078, 0x5e48, 0x909e, 0x0, 0x1);
        gbc.writeMem(0x3a09, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x4ba7, gbc.sp());
        EXPECT(0x3a0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 022C
        gbc.setState(0x4574, 0xe41c, 0x99b0, 0x6793, 0x398d, 0xe098, 0x0, 0x1);
        gbc.writeMem(0x4574, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xe41c, gbc.sp());
        EXPECT(0x4576, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 022D
        gbc.setState(0xe3b9, 0x5c18, 0xa230, 0x17c1, 0xdc71, 0x4f4e, 0x1, 0x0);
        gbc.writeMem(0xe3b9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x5c18, gbc.sp());
        EXPECT(0xe3bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3b9));
        EXPECT(0x8d, gbc.readMem(0xe3ba));
        // CB 8D 022E
        gbc.setState(0x541b, 0xdf20, 0x4ca0, 0x809, 0x1cd9, 0x64cc, 0x0, 0x0);
        gbc.writeMem(0x541b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xdf20, gbc.sp());
        EXPECT(0x541d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 022F
        gbc.setState(0x1796, 0x20f6, 0x8050, 0x72f7, 0x1bf8, 0x5c91, 0x0, 0x1);
        gbc.writeMem(0x1796, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x20f6, gbc.sp());
        EXPECT(0x1798, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0230
        gbc.setState(0x4bb5, 0xbcad, 0xdda0, 0x31bc, 0xc1f7, 0xec, 0x1, 0x1);
        gbc.writeMem(0x4bb5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xbcad, gbc.sp());
        EXPECT(0x4bb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0231
        gbc.setState(0x7808, 0x1ca2, 0x8150, 0xd0f5, 0xfa3d, 0x4449, 0x0, 0x1);
        gbc.writeMem(0x7808, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x1ca2, gbc.sp());
        EXPECT(0x780a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0232
        gbc.setState(0x555c, 0x5ec8, 0xb400, 0x1a89, 0x2470, 0xd050, 0x1, 0x0);
        gbc.writeMem(0x555c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x5ec8, gbc.sp());
        EXPECT(0x555e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0233
        gbc.setState(0xa35f, 0x984a, 0x4450, 0x9f45, 0xb68d, 0x770b, 0x1, 0x1);
        gbc.writeMem(0xa35f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x984a, gbc.sp());
        EXPECT(0xa361, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa35f));
        EXPECT(0x8d, gbc.readMem(0xa360));
        // CB 8D 0234
        gbc.setState(0xeb6c, 0xba62, 0xa2a0, 0x99bb, 0x5bd1, 0x3e17, 0x1, 0x1);
        gbc.writeMem(0xeb6c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xba62, gbc.sp());
        EXPECT(0xeb6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb6c));
        EXPECT(0x8d, gbc.readMem(0xeb6d));
        // CB 8D 0235
        gbc.setState(0x33bd, 0x8e8c, 0xe940, 0x7a4b, 0xf111, 0x45b0, 0x0, 0x1);
        gbc.writeMem(0x33bd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x8e8c, gbc.sp());
        EXPECT(0x33bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0236
        gbc.setState(0x6aff, 0x1d3e, 0x400, 0xd560, 0xbba0, 0xe806, 0x1, 0x0);
        gbc.writeMem(0x6aff, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x1d3e, gbc.sp());
        EXPECT(0x6b01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0237
        gbc.setState(0xc38f, 0x8202, 0xe410, 0x5867, 0x1131, 0xd4e6, 0x1, 0x1);
        gbc.writeMem(0xc38f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x8202, gbc.sp());
        EXPECT(0xc391, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc38f));
        EXPECT(0x8d, gbc.readMem(0xc390));
        // CB 8D 0238
        gbc.setState(0xb967, 0xd41, 0xfac0, 0x589f, 0xf8c8, 0x22e5, 0x0, 0x0);
        gbc.writeMem(0xb967, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xd41, gbc.sp());
        EXPECT(0xb969, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb967));
        EXPECT(0x8d, gbc.readMem(0xb968));
        // CB 8D 0239
        gbc.setState(0x82e5, 0x47e8, 0x8aa0, 0x2a2b, 0xb, 0xf6df, 0x0, 0x0);
        gbc.writeMem(0x82e5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x47e8, gbc.sp());
        EXPECT(0x82e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82e5));
        EXPECT(0x8d, gbc.readMem(0x82e6));
        // CB 8D 023A
        gbc.setState(0x1c36, 0xbe0f, 0x3470, 0x334e, 0xae43, 0xd381, 0x0, 0x0);
        gbc.writeMem(0x1c36, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xbe0f, gbc.sp());
        EXPECT(0x1c38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 023B
        gbc.setState(0x9994, 0xe333, 0x5960, 0xb80a, 0x52c1, 0x8dce, 0x0, 0x1);
        gbc.writeMem(0x9994, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xe333, gbc.sp());
        EXPECT(0x9996, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9994));
        EXPECT(0x8d, gbc.readMem(0x9995));
        // CB 8D 023C
        gbc.setState(0x5f03, 0x642f, 0x5d40, 0x1d32, 0xd5e2, 0x7496, 0x0, 0x1);
        gbc.writeMem(0x5f03, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x642f, gbc.sp());
        EXPECT(0x5f05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 023D
        gbc.setState(0xd0f7, 0x6eaf, 0x8ee0, 0x37ac, 0xb575, 0x2e4b, 0x0, 0x0);
        gbc.writeMem(0xd0f7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x6eaf, gbc.sp());
        EXPECT(0xd0f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0f7));
        EXPECT(0x8d, gbc.readMem(0xd0f8));
        // CB 8D 023E
        gbc.setState(0x56b0, 0x9893, 0x9fb0, 0x7f6a, 0x13f9, 0x3625, 0x0, 0x0);
        gbc.writeMem(0x56b0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x9893, gbc.sp());
        EXPECT(0x56b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 023F
        gbc.setState(0xe81c, 0x56f7, 0x8ed0, 0xc532, 0xdbfe, 0xb3ed, 0x1, 0x0);
        gbc.writeMem(0xe81c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x56f7, gbc.sp());
        EXPECT(0xe81e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe81c));
        EXPECT(0x8d, gbc.readMem(0xe81d));
        // CB 8D 0240
        gbc.setState(0x7d07, 0x3f39, 0xf530, 0x3412, 0xe51d, 0x43e2, 0x0, 0x1);
        gbc.writeMem(0x7d07, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x3f39, gbc.sp());
        EXPECT(0x7d09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0241
        gbc.setState(0x7c33, 0xbf08, 0x33c0, 0xd5e9, 0xc673, 0x8a5b, 0x1, 0x1);
        gbc.writeMem(0x7c33, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xbf08, gbc.sp());
        EXPECT(0x7c35, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0242
        gbc.setState(0x7f6f, 0xf2e0, 0xdf00, 0x1a25, 0xcaa5, 0x652b, 0x0, 0x0);
        gbc.writeMem(0x7f6f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xf2e0, gbc.sp());
        EXPECT(0x7f71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0243
        gbc.setState(0x9980, 0x5467, 0x7420, 0x65ef, 0xba36, 0x6811, 0x1, 0x1);
        gbc.writeMem(0x9980, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x5467, gbc.sp());
        EXPECT(0x9982, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9980));
        EXPECT(0x8d, gbc.readMem(0x9981));
        // CB 8D 0244
        gbc.setState(0xa31e, 0x7933, 0x3e00, 0x2bdc, 0x871d, 0xb0, 0x1, 0x1);
        gbc.writeMem(0xa31e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x7933, gbc.sp());
        EXPECT(0xa320, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa31e));
        EXPECT(0x8d, gbc.readMem(0xa31f));
        // CB 8D 0245
        gbc.setState(0xcf78, 0xea6d, 0x5990, 0xfe75, 0x7ecd, 0x9212, 0x1, 0x1);
        gbc.writeMem(0xcf78, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xea6d, gbc.sp());
        EXPECT(0xcf7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf78));
        EXPECT(0x8d, gbc.readMem(0xcf79));
        // CB 8D 0247
        gbc.setState(0x65eb, 0xeaaa, 0x4a00, 0x7867, 0x49b5, 0x7f5c, 0x0, 0x1);
        gbc.writeMem(0x65eb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xeaaa, gbc.sp());
        EXPECT(0x65ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0248
        gbc.setState(0x4cf2, 0x5e68, 0x8810, 0xd1f, 0x5b31, 0x7521, 0x1, 0x1);
        gbc.writeMem(0x4cf2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x5e68, gbc.sp());
        EXPECT(0x4cf4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0249
        gbc.setState(0x9e8a, 0xa173, 0xf9b0, 0x8042, 0xed2e, 0xe901, 0x0, 0x1);
        gbc.writeMem(0x9e8a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xa173, gbc.sp());
        EXPECT(0x9e8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e8a));
        EXPECT(0x8d, gbc.readMem(0x9e8b));
        // CB 8D 024B
        gbc.setState(0x7d03, 0xa47e, 0x43e0, 0xd7af, 0x1858, 0xfd64, 0x0, 0x1);
        gbc.writeMem(0x7d03, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xa47e, gbc.sp());
        EXPECT(0x7d05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 024C
        gbc.setState(0xb598, 0xb994, 0x6280, 0x1b7d, 0x310a, 0xee6d, 0x1, 0x1);
        gbc.writeMem(0xb598, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xb994, gbc.sp());
        EXPECT(0xb59a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb598));
        EXPECT(0x8d, gbc.readMem(0xb599));
        // CB 8D 024D
        gbc.setState(0x9683, 0x250, 0xe450, 0x387, 0x1658, 0xfa03, 0x0, 0x1);
        gbc.writeMem(0x9683, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x250, gbc.sp());
        EXPECT(0x9685, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9683));
        EXPECT(0x8d, gbc.readMem(0x9684));
        // CB 8D 024E
        gbc.setState(0xcc85, 0x5568, 0xf4b0, 0xf791, 0x95a1, 0xecdc, 0x0, 0x0);
        gbc.writeMem(0xcc85, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x5568, gbc.sp());
        EXPECT(0xcc87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc85));
        EXPECT(0x8d, gbc.readMem(0xcc86));
        // CB 8D 024F
        gbc.setState(0x9ea1, 0x644, 0x2f30, 0x84ac, 0x2403, 0x4bfa, 0x0, 0x0);
        gbc.writeMem(0x9ea1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x644, gbc.sp());
        EXPECT(0x9ea3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ea1));
        EXPECT(0x8d, gbc.readMem(0x9ea2));
        // CB 8D 0250
        gbc.setState(0xba6, 0xc99, 0xc070, 0x713a, 0xb00d, 0x769b, 0x1, 0x0);
        gbc.writeMem(0xba6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xc99, gbc.sp());
        EXPECT(0xba8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0251
        gbc.setState(0x172c, 0xde09, 0x9970, 0xa7ff, 0xb0af, 0xa532, 0x0, 0x0);
        gbc.writeMem(0x172c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xde09, gbc.sp());
        EXPECT(0x172e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0252
        gbc.setState(0x8190, 0x2966, 0xfbf0, 0x426a, 0xf5bc, 0x22, 0x1, 0x1);
        gbc.writeMem(0x8190, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x2966, gbc.sp());
        EXPECT(0x8192, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8190));
        EXPECT(0x8d, gbc.readMem(0x8191));
        // CB 8D 0253
        gbc.setState(0x2d14, 0xf3da, 0x73c0, 0x81e5, 0x360e, 0xde87, 0x1, 0x1);
        gbc.writeMem(0x2d14, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xf3da, gbc.sp());
        EXPECT(0x2d16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0254
        gbc.setState(0x8a7a, 0x7692, 0xfd70, 0x47e2, 0xcb17, 0x3a0a, 0x1, 0x0);
        gbc.writeMem(0x8a7a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x7692, gbc.sp());
        EXPECT(0x8a7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a7a));
        EXPECT(0x8d, gbc.readMem(0x8a7b));
        // CB 8D 0255
        gbc.setState(0xacb1, 0x9698, 0x7cf0, 0x2115, 0x8234, 0xecbf, 0x0, 0x0);
        gbc.writeMem(0xacb1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x9698, gbc.sp());
        EXPECT(0xacb3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacb1));
        EXPECT(0x8d, gbc.readMem(0xacb2));
        // CB 8D 0257
        gbc.setState(0x126b, 0x358, 0xc220, 0x20a8, 0x3bfc, 0x5912, 0x1, 0x1);
        gbc.writeMem(0x126b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x358, gbc.sp());
        EXPECT(0x126d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0258
        gbc.setState(0x3c2a, 0x975d, 0x2260, 0x310, 0x4de3, 0xdcdd, 0x0, 0x1);
        gbc.writeMem(0x3c2a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x975d, gbc.sp());
        EXPECT(0x3c2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0259
        gbc.setState(0x513b, 0xc829, 0x3ed0, 0xc10b, 0xb23b, 0x4908, 0x1, 0x0);
        gbc.writeMem(0x513b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xc829, gbc.sp());
        EXPECT(0x513d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 025A
        gbc.setState(0x8277, 0xf7ad, 0x2f30, 0x66b5, 0xba0c, 0xb367, 0x0, 0x0);
        gbc.writeMem(0x8277, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xf7ad, gbc.sp());
        EXPECT(0x8279, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8277));
        EXPECT(0x8d, gbc.readMem(0x8278));
        // CB 8D 025B
        gbc.setState(0x4155, 0x2761, 0x9ff0, 0xdcce, 0x7604, 0xa808, 0x0, 0x0);
        gbc.writeMem(0x4155, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x2761, gbc.sp());
        EXPECT(0x4157, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 025C
        gbc.setState(0xc563, 0xd2d8, 0xd060, 0xf320, 0xe5c5, 0xfe72, 0x1, 0x0);
        gbc.writeMem(0xc563, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xd2d8, gbc.sp());
        EXPECT(0xc565, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc563));
        EXPECT(0x8d, gbc.readMem(0xc564));
        // CB 8D 025D
        gbc.setState(0x9d1c, 0xe805, 0x68c0, 0xfc64, 0x169, 0x9563, 0x1, 0x1);
        gbc.writeMem(0x9d1c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xe805, gbc.sp());
        EXPECT(0x9d1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d1c));
        EXPECT(0x8d, gbc.readMem(0x9d1d));
        // CB 8D 025E
        gbc.setState(0x274a, 0x112f, 0x9c0, 0xb061, 0xd742, 0xd94c, 0x1, 0x1);
        gbc.writeMem(0x274a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x112f, gbc.sp());
        EXPECT(0x274c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 025F
        gbc.setState(0xd98f, 0xaceb, 0x8670, 0xf7dc, 0x3119, 0xd39a, 0x0, 0x0);
        gbc.writeMem(0xd98f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xaceb, gbc.sp());
        EXPECT(0xd991, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd98f));
        EXPECT(0x8d, gbc.readMem(0xd990));
        // CB 8D 0260
        gbc.setState(0x20b1, 0xbe4b, 0x54f0, 0x9d9e, 0x7b2c, 0x8817, 0x0, 0x1);
        gbc.writeMem(0x20b1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xbe4b, gbc.sp());
        EXPECT(0x20b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0261
        gbc.setState(0xd176, 0x30f9, 0x6f20, 0x481b, 0x5249, 0x9994, 0x1, 0x1);
        gbc.writeMem(0xd176, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x30f9, gbc.sp());
        EXPECT(0xd178, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd176));
        EXPECT(0x8d, gbc.readMem(0xd177));
        // CB 8D 0262
        gbc.setState(0xa72e, 0xa6ee, 0xb590, 0x7f2f, 0x288d, 0xfb65, 0x0, 0x1);
        gbc.writeMem(0xa72e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xa6ee, gbc.sp());
        EXPECT(0xa730, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa72e));
        EXPECT(0x8d, gbc.readMem(0xa72f));
        // CB 8D 0263
        gbc.setState(0x23ef, 0xdd8d, 0x4d50, 0xf0b7, 0x2b4e, 0x1bc1, 0x1, 0x1);
        gbc.writeMem(0x23ef, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xdd8d, gbc.sp());
        EXPECT(0x23f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0264
        gbc.setState(0x75de, 0x60ab, 0x1340, 0x6d18, 0xe229, 0xfa71, 0x1, 0x0);
        gbc.writeMem(0x75de, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x60ab, gbc.sp());
        EXPECT(0x75e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0265
        gbc.setState(0xc01a, 0xc50f, 0x5140, 0x71b6, 0xfd75, 0x128, 0x0, 0x0);
        gbc.writeMem(0xc01a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xc50f, gbc.sp());
        EXPECT(0xc01c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc01a));
        EXPECT(0x8d, gbc.readMem(0xc01b));
        // CB 8D 0266
        gbc.setState(0x2f21, 0x587f, 0x7ee0, 0x67d6, 0x5c52, 0x306a, 0x0, 0x0);
        gbc.writeMem(0x2f21, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x587f, gbc.sp());
        EXPECT(0x2f23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0267
        gbc.setState(0x697f, 0xd8c9, 0x4a40, 0xc4ed, 0x8e9c, 0x8084, 0x0, 0x1);
        gbc.writeMem(0x697f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xd8c9, gbc.sp());
        EXPECT(0x6981, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0268
        gbc.setState(0x31be, 0x3a44, 0x1ed0, 0x2c2c, 0x9c04, 0x6236, 0x0, 0x1);
        gbc.writeMem(0x31be, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x3a44, gbc.sp());
        EXPECT(0x31c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0269
        gbc.setState(0xc06e, 0xc9eb, 0xd4b0, 0xc6d0, 0x481f, 0xec84, 0x1, 0x0);
        gbc.writeMem(0xc06e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xc9eb, gbc.sp());
        EXPECT(0xc070, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc06e));
        EXPECT(0x8d, gbc.readMem(0xc06f));
        // CB 8D 026A
        gbc.setState(0xc5eb, 0x381a, 0x1e0, 0x1f25, 0x1e31, 0x5b5f, 0x0, 0x0);
        gbc.writeMem(0xc5eb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x381a, gbc.sp());
        EXPECT(0xc5ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5eb));
        EXPECT(0x8d, gbc.readMem(0xc5ec));
        // CB 8D 026B
        gbc.setState(0x4785, 0x2690, 0xf030, 0x2eaa, 0xacde, 0x321e, 0x1, 0x1);
        gbc.writeMem(0x4785, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x2690, gbc.sp());
        EXPECT(0x4787, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 026C
        gbc.setState(0x58e2, 0x7157, 0xe990, 0x1530, 0x5539, 0x9048, 0x0, 0x1);
        gbc.writeMem(0x58e2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x7157, gbc.sp());
        EXPECT(0x58e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 026D
        gbc.setState(0xdfd4, 0x981, 0x9260, 0xcbf7, 0x1eed, 0x6488, 0x1, 0x1);
        gbc.writeMem(0xdfd4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x981, gbc.sp());
        EXPECT(0xdfd6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfd4));
        EXPECT(0x8d, gbc.readMem(0xdfd5));
        // CB 8D 026E
        gbc.setState(0x6918, 0x45d9, 0x5320, 0x2471, 0xd213, 0xc1cb, 0x1, 0x1);
        gbc.writeMem(0x6918, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x45d9, gbc.sp());
        EXPECT(0x691a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 026F
        gbc.setState(0x5dfa, 0x4529, 0xa110, 0x2883, 0x2368, 0x16ac, 0x0, 0x0);
        gbc.writeMem(0x5dfa, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x4529, gbc.sp());
        EXPECT(0x5dfc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0271
        gbc.setState(0xc2cf, 0xca90, 0x9bb0, 0x23a7, 0x552d, 0xcfe6, 0x0, 0x1);
        gbc.writeMem(0xc2cf, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xca90, gbc.sp());
        EXPECT(0xc2d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2cf));
        EXPECT(0x8d, gbc.readMem(0xc2d0));
        // CB 8D 0272
        gbc.setState(0xab8b, 0x7b6c, 0xea50, 0x40dc, 0x536a, 0x1700, 0x1, 0x0);
        gbc.writeMem(0xab8b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x7b6c, gbc.sp());
        EXPECT(0xab8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab8b));
        EXPECT(0x8d, gbc.readMem(0xab8c));
        // CB 8D 0273
        gbc.setState(0xd149, 0xcac2, 0xe480, 0xaac9, 0x90e9, 0x1c9b, 0x0, 0x1);
        gbc.writeMem(0xd149, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xcac2, gbc.sp());
        EXPECT(0xd14b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd149));
        EXPECT(0x8d, gbc.readMem(0xd14a));
        // CB 8D 0274
        gbc.setState(0xf58, 0x53f2, 0xf3e0, 0x57f4, 0x8a50, 0x92cc, 0x0, 0x1);
        gbc.writeMem(0xf58, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x53f2, gbc.sp());
        EXPECT(0xf5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0275
        gbc.setState(0xc909, 0xc01, 0xe920, 0x61ba, 0x15c, 0xc41d, 0x0, 0x0);
        gbc.writeMem(0xc909, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xc01, gbc.sp());
        EXPECT(0xc90b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc909));
        EXPECT(0x8d, gbc.readMem(0xc90a));
        // CB 8D 0276
        gbc.setState(0x3246, 0x3850, 0x64a0, 0xf4ab, 0x630e, 0x3165, 0x0, 0x1);
        gbc.writeMem(0x3246, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x3850, gbc.sp());
        EXPECT(0x3248, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0277
        gbc.setState(0x6153, 0x2f4e, 0xec50, 0xc4c7, 0xae61, 0x93cc, 0x0, 0x1);
        gbc.writeMem(0x6153, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x2f4e, gbc.sp());
        EXPECT(0x6155, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0278
        gbc.setState(0x3414, 0xb929, 0x3da0, 0xab34, 0x1e94, 0x571b, 0x1, 0x0);
        gbc.writeMem(0x3414, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xb929, gbc.sp());
        EXPECT(0x3416, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0279
        gbc.setState(0x176e, 0xb26d, 0xc40, 0xb70a, 0xab61, 0x2457, 0x0, 0x1);
        gbc.writeMem(0x176e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xb26d, gbc.sp());
        EXPECT(0x1770, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 027A
        gbc.setState(0x6590, 0x1f19, 0x2f40, 0xc68b, 0x2f96, 0xb3be, 0x0, 0x0);
        gbc.writeMem(0x6590, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x1f19, gbc.sp());
        EXPECT(0x6592, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 027B
        gbc.setState(0x2bf2, 0x71a0, 0x5370, 0x6c75, 0xc368, 0xbc0e, 0x0, 0x1);
        gbc.writeMem(0x2bf2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x71a0, gbc.sp());
        EXPECT(0x2bf4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 027C
        gbc.setState(0xc302, 0x357e, 0xac90, 0x40d0, 0xfb0f, 0xd46, 0x1, 0x0);
        gbc.writeMem(0xc302, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x357e, gbc.sp());
        EXPECT(0xc304, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc302));
        EXPECT(0x8d, gbc.readMem(0xc303));
        // CB 8D 027D
        gbc.setState(0x4240, 0x756a, 0xeee0, 0xf6b7, 0xcf93, 0x32ab, 0x0, 0x1);
        gbc.writeMem(0x4240, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x756a, gbc.sp());
        EXPECT(0x4242, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 027E
        gbc.setState(0x453b, 0x7927, 0xd400, 0x8da, 0x4f06, 0x4962, 0x0, 0x1);
        gbc.writeMem(0x453b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x7927, gbc.sp());
        EXPECT(0x453d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 027F
        gbc.setState(0xcad1, 0xb1d1, 0xcbe0, 0x65ae, 0xe0f0, 0x5d7c, 0x0, 0x0);
        gbc.writeMem(0xcad1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xb1d1, gbc.sp());
        EXPECT(0xcad3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcad1));
        EXPECT(0x8d, gbc.readMem(0xcad2));
        // CB 8D 0280
        gbc.setState(0x7c16, 0x1d8c, 0xef60, 0x3264, 0x72b9, 0xb2c4, 0x1, 0x0);
        gbc.writeMem(0x7c16, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x1d8c, gbc.sp());
        EXPECT(0x7c18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0281
        gbc.setState(0xdcfa, 0x163c, 0xaf20, 0xcdff, 0x798a, 0xeb71, 0x1, 0x1);
        gbc.writeMem(0xdcfa, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x163c, gbc.sp());
        EXPECT(0xdcfc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcfa));
        EXPECT(0x8d, gbc.readMem(0xdcfb));
        // CB 8D 0282
        gbc.setState(0x7f03, 0xcb5, 0x5050, 0x51db, 0x518e, 0xe8dc, 0x0, 0x1);
        gbc.writeMem(0x7f03, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xcb5, gbc.sp());
        EXPECT(0x7f05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0283
        gbc.setState(0xb132, 0x515d, 0xba40, 0x895f, 0x779b, 0xdce8, 0x0, 0x1);
        gbc.writeMem(0xb132, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x515d, gbc.sp());
        EXPECT(0xb134, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb132));
        EXPECT(0x8d, gbc.readMem(0xb133));
        // CB 8D 0284
        gbc.setState(0x7bf9, 0x4d2a, 0xf500, 0x558b, 0x79a7, 0x7bb2, 0x0, 0x0);
        gbc.writeMem(0x7bf9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x4d2a, gbc.sp());
        EXPECT(0x7bfb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0285
        gbc.setState(0xcb45, 0xc032, 0x69c0, 0xedfd, 0xf505, 0x7f29, 0x0, 0x1);
        gbc.writeMem(0xcb45, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xc032, gbc.sp());
        EXPECT(0xcb47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb45));
        EXPECT(0x8d, gbc.readMem(0xcb46));
        // CB 8D 0286
        gbc.setState(0x652, 0xb44c, 0x480, 0xe8b6, 0x1fcd, 0x8da0, 0x0, 0x0);
        gbc.writeMem(0x652, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xb44c, gbc.sp());
        EXPECT(0x654, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0287
        gbc.setState(0xd333, 0x9fb8, 0xbf50, 0x6fb, 0x214f, 0xf018, 0x1, 0x0);
        gbc.writeMem(0xd333, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x9fb8, gbc.sp());
        EXPECT(0xd335, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd333));
        EXPECT(0x8d, gbc.readMem(0xd334));
        // CB 8D 0288
        gbc.setState(0x7eca, 0xae91, 0xb820, 0xd001, 0x63ed, 0x19f3, 0x0, 0x1);
        gbc.writeMem(0x7eca, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xae91, gbc.sp());
        EXPECT(0x7ecc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0289
        gbc.setState(0xd44d, 0xaf3b, 0x2c60, 0xefbd, 0x5050, 0x4cfb, 0x1, 0x0);
        gbc.writeMem(0xd44d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xaf3b, gbc.sp());
        EXPECT(0xd44f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd44d));
        EXPECT(0x8d, gbc.readMem(0xd44e));
        // CB 8D 028A
        gbc.setState(0x9a29, 0xb418, 0xaf70, 0x4eff, 0x2161, 0xdeb5, 0x0, 0x0);
        gbc.writeMem(0x9a29, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xb418, gbc.sp());
        EXPECT(0x9a2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a29));
        EXPECT(0x8d, gbc.readMem(0x9a2a));
        // CB 8D 028B
        gbc.setState(0x9fd3, 0x949c, 0xbc90, 0x1321, 0xffd4, 0xa028, 0x0, 0x1);
        gbc.writeMem(0x9fd3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x949c, gbc.sp());
        EXPECT(0x9fd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fd3));
        EXPECT(0x8d, gbc.readMem(0x9fd4));
        // CB 8D 028C
        gbc.setState(0x1adb, 0x4e4c, 0x5d70, 0x18cb, 0xb18c, 0xa983, 0x1, 0x0);
        gbc.writeMem(0x1adb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x4e4c, gbc.sp());
        EXPECT(0x1add, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 028D
        gbc.setState(0x7bc5, 0xe8c0, 0x4f00, 0xd01f, 0xb612, 0x66b5, 0x0, 0x1);
        gbc.writeMem(0x7bc5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xe8c0, gbc.sp());
        EXPECT(0x7bc7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 028E
        gbc.setState(0x73b7, 0x7efc, 0xe160, 0x1e85, 0xe1df, 0x72b7, 0x1, 0x0);
        gbc.writeMem(0x73b7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x7efc, gbc.sp());
        EXPECT(0x73b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 028F
        gbc.setState(0x39db, 0x6e2e, 0x7250, 0x709d, 0x1721, 0xda57, 0x0, 0x1);
        gbc.writeMem(0x39db, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x6e2e, gbc.sp());
        EXPECT(0x39dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0290
        gbc.setState(0x105f, 0xb0f9, 0x7670, 0x8c77, 0x6c5b, 0x9572, 0x0, 0x1);
        gbc.writeMem(0x105f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xb0f9, gbc.sp());
        EXPECT(0x1061, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0292
        gbc.setState(0x572f, 0x173d, 0x7a60, 0x65ca, 0xee6c, 0x2ba9, 0x0, 0x0);
        gbc.writeMem(0x572f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x173d, gbc.sp());
        EXPECT(0x5731, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0293
        gbc.setState(0x7d48, 0x6683, 0x2220, 0x8660, 0x5b8c, 0xa6e1, 0x0, 0x0);
        gbc.writeMem(0x7d48, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x6683, gbc.sp());
        EXPECT(0x7d4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0294
        gbc.setState(0x2e67, 0xc802, 0x6d50, 0xd2a, 0x5678, 0xbbba, 0x1, 0x0);
        gbc.writeMem(0x2e67, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xc802, gbc.sp());
        EXPECT(0x2e69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0295
        gbc.setState(0x1c14, 0x7f1, 0xca40, 0xbaf4, 0x52f7, 0x81d5, 0x0, 0x0);
        gbc.writeMem(0x1c14, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x7f1, gbc.sp());
        EXPECT(0x1c16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0296
        gbc.setState(0xb350, 0xe241, 0x10a0, 0x7e61, 0x25d8, 0x1de3, 0x0, 0x1);
        gbc.writeMem(0xb350, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xe241, gbc.sp());
        EXPECT(0xb352, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb350));
        EXPECT(0x8d, gbc.readMem(0xb351));
        // CB 8D 0297
        gbc.setState(0x8b9f, 0x84a4, 0x93c0, 0xb658, 0x2b6c, 0xc4f3, 0x1, 0x0);
        gbc.writeMem(0x8b9f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x84a4, gbc.sp());
        EXPECT(0x8ba1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b9f));
        EXPECT(0x8d, gbc.readMem(0x8ba0));
        // CB 8D 0298
        gbc.setState(0x52b, 0x481b, 0x4500, 0xb533, 0x2c67, 0xd253, 0x1, 0x0);
        gbc.writeMem(0x52b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x481b, gbc.sp());
        EXPECT(0x52d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0299
        gbc.setState(0xb4c, 0x81eb, 0xb7f0, 0x28fd, 0x50e8, 0xe46, 0x1, 0x1);
        gbc.writeMem(0xb4c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x81eb, gbc.sp());
        EXPECT(0xb4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 029A
        gbc.setState(0x6bc9, 0x7bf9, 0xbcf0, 0xebe2, 0x8e25, 0x57a0, 0x0, 0x0);
        gbc.writeMem(0x6bc9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x7bf9, gbc.sp());
        EXPECT(0x6bcb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 029B
        gbc.setState(0xefb1, 0xe539, 0x7710, 0xdfe9, 0x693a, 0x5687, 0x0, 0x1);
        gbc.writeMem(0xefb1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xe539, gbc.sp());
        EXPECT(0xefb3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefb1));
        EXPECT(0x8d, gbc.readMem(0xefb2));
        // CB 8D 029C
        gbc.setState(0x9c89, 0xc478, 0xa160, 0x88ee, 0x6ab7, 0x1471, 0x1, 0x0);
        gbc.writeMem(0x9c89, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xc478, gbc.sp());
        EXPECT(0x9c8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c89));
        EXPECT(0x8d, gbc.readMem(0x9c8a));
        // CB 8D 029D
        gbc.setState(0x4ea, 0xacbf, 0xcbd0, 0xa216, 0x5738, 0xf1fe, 0x0, 0x1);
        gbc.writeMem(0x4ea, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xacbf, gbc.sp());
        EXPECT(0x4ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 029E
        gbc.setState(0x995b, 0x8630, 0x37c0, 0xeba7, 0x999e, 0x50db, 0x0, 0x1);
        gbc.writeMem(0x995b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x8630, gbc.sp());
        EXPECT(0x995d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x995b));
        EXPECT(0x8d, gbc.readMem(0x995c));
        // CB 8D 029F
        gbc.setState(0x95df, 0xfb69, 0x40, 0x70b, 0x1437, 0x4ffe, 0x1, 0x0);
        gbc.writeMem(0x95df, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xfb69, gbc.sp());
        EXPECT(0x95e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95df));
        EXPECT(0x8d, gbc.readMem(0x95e0));
        // CB 8D 02A0
        gbc.setState(0x8d4f, 0xa5c9, 0x8bc0, 0xa90e, 0x3455, 0xfb71, 0x0, 0x1);
        gbc.writeMem(0x8d4f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xa5c9, gbc.sp());
        EXPECT(0x8d51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d4f));
        EXPECT(0x8d, gbc.readMem(0x8d50));
        // CB 8D 02A1
        gbc.setState(0x1a6a, 0x69a6, 0x9470, 0x14c, 0x7521, 0x88d7, 0x0, 0x1);
        gbc.writeMem(0x1a6a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x69a6, gbc.sp());
        EXPECT(0x1a6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02A2
        gbc.setState(0x87c5, 0xe7fb, 0x3910, 0xb4cf, 0x2784, 0xa041, 0x1, 0x1);
        gbc.writeMem(0x87c5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xe7fb, gbc.sp());
        EXPECT(0x87c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87c5));
        EXPECT(0x8d, gbc.readMem(0x87c6));
        // CB 8D 02A3
        gbc.setState(0xb58f, 0x8828, 0x3c20, 0x2b27, 0x315c, 0x3c2b, 0x1, 0x1);
        gbc.writeMem(0xb58f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x8828, gbc.sp());
        EXPECT(0xb591, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb58f));
        EXPECT(0x8d, gbc.readMem(0xb590));
        // CB 8D 02A4
        gbc.setState(0x1ed9, 0x9a5b, 0x49e0, 0x9ba3, 0x631c, 0x86a5, 0x0, 0x1);
        gbc.writeMem(0x1ed9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x9a5b, gbc.sp());
        EXPECT(0x1edb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02A5
        gbc.setState(0xd32, 0x2cd8, 0x65b0, 0x6962, 0xdd76, 0xe0ca, 0x0, 0x0);
        gbc.writeMem(0xd32, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x2cd8, gbc.sp());
        EXPECT(0xd34, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02A6
        gbc.setState(0xb950, 0xfde2, 0x18f0, 0x4c57, 0x9c55, 0x2256, 0x1, 0x1);
        gbc.writeMem(0xb950, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xfde2, gbc.sp());
        EXPECT(0xb952, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb950));
        EXPECT(0x8d, gbc.readMem(0xb951));
        // CB 8D 02A7
        gbc.setState(0x9a2f, 0x96a6, 0xace0, 0x5726, 0x608, 0xe87f, 0x1, 0x0);
        gbc.writeMem(0x9a2f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x96a6, gbc.sp());
        EXPECT(0x9a31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a2f));
        EXPECT(0x8d, gbc.readMem(0x9a30));
        // CB 8D 02A8
        gbc.setState(0x612a, 0x13e9, 0x1620, 0xf31c, 0x3327, 0x733a, 0x1, 0x0);
        gbc.writeMem(0x612a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x13e9, gbc.sp());
        EXPECT(0x612c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02A9
        gbc.setState(0x4e8b, 0x4e4c, 0x1400, 0xe0d2, 0xfd6f, 0xd452, 0x1, 0x1);
        gbc.writeMem(0x4e8b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x4e4c, gbc.sp());
        EXPECT(0x4e8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02AA
        gbc.setState(0x54cb, 0x4423, 0x15b0, 0xba5a, 0x80bb, 0x407a, 0x1, 0x1);
        gbc.writeMem(0x54cb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x4423, gbc.sp());
        EXPECT(0x54cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02AB
        gbc.setState(0xe292, 0x51d0, 0xafa0, 0xd98a, 0x4513, 0xb43, 0x1, 0x1);
        gbc.writeMem(0xe292, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x51d0, gbc.sp());
        EXPECT(0xe294, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe292));
        EXPECT(0x8d, gbc.readMem(0xe293));
        // CB 8D 02AC
        gbc.setState(0xabad, 0x824a, 0xbf90, 0xfe92, 0x7868, 0x7000, 0x0, 0x1);
        gbc.writeMem(0xabad, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x824a, gbc.sp());
        EXPECT(0xabaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabad));
        EXPECT(0x8d, gbc.readMem(0xabae));
        // CB 8D 02AD
        gbc.setState(0xc8cc, 0xb751, 0x4710, 0x2506, 0x7198, 0x2817, 0x0, 0x1);
        gbc.writeMem(0xc8cc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xb751, gbc.sp());
        EXPECT(0xc8ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8cc));
        EXPECT(0x8d, gbc.readMem(0xc8cd));
        // CB 8D 02AE
        gbc.setState(0x4caf, 0xd77a, 0x2360, 0x1a48, 0x452b, 0x8aa7, 0x0, 0x0);
        gbc.writeMem(0x4caf, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xd77a, gbc.sp());
        EXPECT(0x4cb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02AF
        gbc.setState(0x7a45, 0x8796, 0x4bc0, 0x874d, 0x8a9a, 0xa08, 0x0, 0x0);
        gbc.writeMem(0x7a45, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x8796, gbc.sp());
        EXPECT(0x7a47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02B1
        gbc.setState(0x8872, 0x7702, 0xd8c0, 0x3977, 0x4935, 0x593f, 0x0, 0x1);
        gbc.writeMem(0x8872, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x7702, gbc.sp());
        EXPECT(0x8874, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8872));
        EXPECT(0x8d, gbc.readMem(0x8873));
        // CB 8D 02B2
        gbc.setState(0xdf1e, 0x1cd5, 0xa0f0, 0xd7d3, 0x6feb, 0xe5fb, 0x0, 0x1);
        gbc.writeMem(0xdf1e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x1cd5, gbc.sp());
        EXPECT(0xdf20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf1e));
        EXPECT(0x8d, gbc.readMem(0xdf1f));
        // CB 8D 02B3
        gbc.setState(0x32b0, 0xab4f, 0xa5e0, 0xd8f3, 0x66ae, 0x212c, 0x0, 0x1);
        gbc.writeMem(0x32b0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xab4f, gbc.sp());
        EXPECT(0x32b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02B4
        gbc.setState(0x3bc8, 0x1565, 0xe370, 0x28bb, 0xb5b5, 0xe418, 0x1, 0x1);
        gbc.writeMem(0x3bc8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x1565, gbc.sp());
        EXPECT(0x3bca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02B5
        gbc.setState(0xc282, 0x4632, 0x8b90, 0x65a0, 0x9ba4, 0x792b, 0x0, 0x0);
        gbc.writeMem(0xc282, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x4632, gbc.sp());
        EXPECT(0xc284, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc282));
        EXPECT(0x8d, gbc.readMem(0xc283));
        // CB 8D 02B6
        gbc.setState(0x99f7, 0xa845, 0xf5c0, 0xd27c, 0xbe31, 0x66b7, 0x0, 0x0);
        gbc.writeMem(0x99f7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xa845, gbc.sp());
        EXPECT(0x99f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99f7));
        EXPECT(0x8d, gbc.readMem(0x99f8));
        // CB 8D 02B7
        gbc.setState(0x5b30, 0xf27d, 0x6710, 0x6e51, 0xe48, 0xfa5c, 0x1, 0x1);
        gbc.writeMem(0x5b30, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xf27d, gbc.sp());
        EXPECT(0x5b32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02B8
        gbc.setState(0xe9a0, 0xda2c, 0x23b0, 0x642b, 0x9c92, 0x5d06, 0x1, 0x0);
        gbc.writeMem(0xe9a0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xda2c, gbc.sp());
        EXPECT(0xe9a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9a0));
        EXPECT(0x8d, gbc.readMem(0xe9a1));
        // CB 8D 02B9
        gbc.setState(0x6927, 0xea60, 0xa570, 0xa694, 0x9521, 0x53bd, 0x1, 0x0);
        gbc.writeMem(0x6927, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xea60, gbc.sp());
        EXPECT(0x6929, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02BA
        gbc.setState(0xe550, 0xdb49, 0x5d80, 0xfd50, 0x2163, 0x9422, 0x0, 0x0);
        gbc.writeMem(0xe550, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xdb49, gbc.sp());
        EXPECT(0xe552, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe550));
        EXPECT(0x8d, gbc.readMem(0xe551));
        // CB 8D 02BB
        gbc.setState(0xaa21, 0x11c4, 0xea70, 0xbc4a, 0xe2d0, 0xc68, 0x0, 0x1);
        gbc.writeMem(0xaa21, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x11c4, gbc.sp());
        EXPECT(0xaa23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa21));
        EXPECT(0x8d, gbc.readMem(0xaa22));
        // CB 8D 02BC
        gbc.setState(0xacf2, 0xf8d6, 0xd850, 0xf178, 0xd0ca, 0xc678, 0x1, 0x0);
        gbc.writeMem(0xacf2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xf8d6, gbc.sp());
        EXPECT(0xacf4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacf2));
        EXPECT(0x8d, gbc.readMem(0xacf3));
        // CB 8D 02BD
        gbc.setState(0xb759, 0xdc45, 0x8740, 0xe4fd, 0xa7a3, 0xd79e, 0x1, 0x0);
        gbc.writeMem(0xb759, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xdc45, gbc.sp());
        EXPECT(0xb75b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb759));
        EXPECT(0x8d, gbc.readMem(0xb75a));
        // CB 8D 02BE
        gbc.setState(0x9a5d, 0x936c, 0xeeb0, 0xbab, 0xccef, 0x9a36, 0x0, 0x0);
        gbc.writeMem(0x9a5d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x936c, gbc.sp());
        EXPECT(0x9a5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a5d));
        EXPECT(0x8d, gbc.readMem(0x9a5e));
        // CB 8D 02BF
        gbc.setState(0xb134, 0xf80b, 0x19d0, 0x5280, 0x6721, 0x2ded, 0x0, 0x0);
        gbc.writeMem(0xb134, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xf80b, gbc.sp());
        EXPECT(0xb136, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb134));
        EXPECT(0x8d, gbc.readMem(0xb135));
        // CB 8D 02C0
        gbc.setState(0x7198, 0xeba9, 0xb1a0, 0x501c, 0xe4b, 0xf019, 0x0, 0x1);
        gbc.writeMem(0x7198, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xeba9, gbc.sp());
        EXPECT(0x719a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02C1
        gbc.setState(0x2e4e, 0x996e, 0x8d80, 0x22ea, 0xd8d4, 0x21a3, 0x0, 0x0);
        gbc.writeMem(0x2e4e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x996e, gbc.sp());
        EXPECT(0x2e50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02C2
        gbc.setState(0x966c, 0x708b, 0x9990, 0x483f, 0x1f9a, 0xcc8d, 0x0, 0x1);
        gbc.writeMem(0x966c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x708b, gbc.sp());
        EXPECT(0x966e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x966c));
        EXPECT(0x8d, gbc.readMem(0x966d));
        // CB 8D 02C3
        gbc.setState(0x5ac0, 0x7bfe, 0xa3c0, 0x6a2, 0x16b3, 0x842b, 0x1, 0x1);
        gbc.writeMem(0x5ac0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x7bfe, gbc.sp());
        EXPECT(0x5ac2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02C4
        gbc.setState(0x2ef8, 0xf6ae, 0xad90, 0xa8cc, 0xce40, 0x37e0, 0x0, 0x0);
        gbc.writeMem(0x2ef8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xf6ae, gbc.sp());
        EXPECT(0x2efa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02C5
        gbc.setState(0xc24, 0x192e, 0xdee0, 0xb7b7, 0x758d, 0xf6a8, 0x0, 0x1);
        gbc.writeMem(0xc24, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x192e, gbc.sp());
        EXPECT(0xc26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02C6
        gbc.setState(0x85a8, 0x69d0, 0xa070, 0xcfcb, 0x5995, 0xdd33, 0x0, 0x0);
        gbc.writeMem(0x85a8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x69d0, gbc.sp());
        EXPECT(0x85aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85a8));
        EXPECT(0x8d, gbc.readMem(0x85a9));
        // CB 8D 02C7
        gbc.setState(0x9f6b, 0x7917, 0x9460, 0x1448, 0x9999, 0x8db1, 0x0, 0x1);
        gbc.writeMem(0x9f6b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x7917, gbc.sp());
        EXPECT(0x9f6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f6b));
        EXPECT(0x8d, gbc.readMem(0x9f6c));
        // CB 8D 02C8
        gbc.setState(0x776b, 0x7bb3, 0xba20, 0x85c3, 0xd462, 0x79ff, 0x1, 0x0);
        gbc.writeMem(0x776b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x7bb3, gbc.sp());
        EXPECT(0x776d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02C9
        gbc.setState(0x9467, 0xbf79, 0xa440, 0xb7d6, 0x7db7, 0x5072, 0x1, 0x1);
        gbc.writeMem(0x9467, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xbf79, gbc.sp());
        EXPECT(0x9469, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9467));
        EXPECT(0x8d, gbc.readMem(0x9468));
        // CB 8D 02CA
        gbc.setState(0x82b8, 0x6561, 0x2320, 0xcea, 0x2d3c, 0x5fdb, 0x1, 0x0);
        gbc.writeMem(0x82b8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x6561, gbc.sp());
        EXPECT(0x82ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82b8));
        EXPECT(0x8d, gbc.readMem(0x82b9));
        // CB 8D 02CB
        gbc.setState(0xe0fc, 0xbac0, 0x4690, 0xf786, 0xe3e3, 0x2c40, 0x0, 0x1);
        gbc.writeMem(0xe0fc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xbac0, gbc.sp());
        EXPECT(0xe0fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0fc));
        EXPECT(0x8d, gbc.readMem(0xe0fd));
        // CB 8D 02CC
        gbc.setState(0xb3df, 0x3b3b, 0x79d0, 0x4b80, 0x7b5, 0xa516, 0x0, 0x0);
        gbc.writeMem(0xb3df, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x3b3b, gbc.sp());
        EXPECT(0xb3e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3df));
        EXPECT(0x8d, gbc.readMem(0xb3e0));
        // CB 8D 02CE
        gbc.setState(0xc8c0, 0x1a94, 0x2b50, 0xe1d5, 0xfaa1, 0x751a, 0x1, 0x0);
        gbc.writeMem(0xc8c0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x1a94, gbc.sp());
        EXPECT(0xc8c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8c0));
        EXPECT(0x8d, gbc.readMem(0xc8c1));
        // CB 8D 02CF
        gbc.setState(0x71db, 0x3509, 0x3ea0, 0xd22a, 0xea04, 0xe991, 0x1, 0x0);
        gbc.writeMem(0x71db, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x3509, gbc.sp());
        EXPECT(0x71dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02D0
        gbc.setState(0x9c3e, 0x8d93, 0x7610, 0x8527, 0xa226, 0x24fa, 0x1, 0x0);
        gbc.writeMem(0x9c3e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x8d93, gbc.sp());
        EXPECT(0x9c40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c3e));
        EXPECT(0x8d, gbc.readMem(0x9c3f));
        // CB 8D 02D1
        gbc.setState(0x37a3, 0x2bb4, 0xe550, 0x6503, 0xff83, 0xf0a1, 0x0, 0x0);
        gbc.writeMem(0x37a3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x2bb4, gbc.sp());
        EXPECT(0x37a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02D2
        gbc.setState(0xc77e, 0xc67, 0xbf30, 0xea9f, 0x5e1b, 0x6c36, 0x0, 0x1);
        gbc.writeMem(0xc77e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xc67, gbc.sp());
        EXPECT(0xc780, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc77e));
        EXPECT(0x8d, gbc.readMem(0xc77f));
        // CB 8D 02D3
        gbc.setState(0x634a, 0xd908, 0x82c0, 0x39a6, 0xe738, 0x1425, 0x1, 0x0);
        gbc.writeMem(0x634a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xd908, gbc.sp());
        EXPECT(0x634c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02D4
        gbc.setState(0x9d8a, 0xb864, 0x4030, 0xa549, 0x53fa, 0x8a0c, 0x0, 0x1);
        gbc.writeMem(0x9d8a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xb864, gbc.sp());
        EXPECT(0x9d8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d8a));
        EXPECT(0x8d, gbc.readMem(0x9d8b));
        // CB 8D 02D5
        gbc.setState(0x668c, 0x265b, 0xb90, 0x362d, 0x51f0, 0x8c42, 0x1, 0x0);
        gbc.writeMem(0x668c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x265b, gbc.sp());
        EXPECT(0x668e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02D6
        gbc.setState(0x3fd9, 0x7c40, 0xef50, 0x127, 0xef26, 0x23d9, 0x0, 0x1);
        gbc.writeMem(0x3fd9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x7c40, gbc.sp());
        EXPECT(0x3fdb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02D7
        gbc.setState(0xe17b, 0x6d68, 0xc1f0, 0xb362, 0x69cd, 0xa927, 0x1, 0x1);
        gbc.writeMem(0xe17b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x6d68, gbc.sp());
        EXPECT(0xe17d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe17b));
        EXPECT(0x8d, gbc.readMem(0xe17c));
        // CB 8D 02D8
        gbc.setState(0xa391, 0x7f00, 0x83d0, 0x73b9, 0x7cc7, 0xa168, 0x1, 0x0);
        gbc.writeMem(0xa391, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x7f00, gbc.sp());
        EXPECT(0xa393, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa391));
        EXPECT(0x8d, gbc.readMem(0xa392));
        // CB 8D 02DA
        gbc.setState(0xa17b, 0x5578, 0x8b80, 0x57f6, 0x6325, 0xc3aa, 0x0, 0x1);
        gbc.writeMem(0xa17b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x5578, gbc.sp());
        EXPECT(0xa17d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa17b));
        EXPECT(0x8d, gbc.readMem(0xa17c));
        // CB 8D 02DC
        gbc.setState(0xd595, 0xeccc, 0xb110, 0x5231, 0xd2a3, 0xa024, 0x1, 0x0);
        gbc.writeMem(0xd595, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xeccc, gbc.sp());
        EXPECT(0xd597, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd595));
        EXPECT(0x8d, gbc.readMem(0xd596));
        // CB 8D 02DD
        gbc.setState(0x991b, 0x4824, 0x1b40, 0x157f, 0x84b5, 0x2c94, 0x0, 0x1);
        gbc.writeMem(0x991b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x4824, gbc.sp());
        EXPECT(0x991d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x991b));
        EXPECT(0x8d, gbc.readMem(0x991c));
        // CB 8D 02DE
        gbc.setState(0xc100, 0xb490, 0x2bc0, 0xff52, 0x4ff3, 0x14fc, 0x0, 0x0);
        gbc.writeMem(0xc100, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xb490, gbc.sp());
        EXPECT(0xc102, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc100));
        EXPECT(0x8d, gbc.readMem(0xc101));
        // CB 8D 02DF
        gbc.setState(0x6b3e, 0xb970, 0x5da0, 0xafdc, 0xaf7d, 0xc098, 0x0, 0x0);
        gbc.writeMem(0x6b3e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xb970, gbc.sp());
        EXPECT(0x6b40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02E0
        gbc.setState(0x8870, 0xdb17, 0x2e70, 0x4e72, 0x1116, 0xadb1, 0x1, 0x0);
        gbc.writeMem(0x8870, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xdb17, gbc.sp());
        EXPECT(0x8872, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8870));
        EXPECT(0x8d, gbc.readMem(0x8871));
        // CB 8D 02E1
        gbc.setState(0x80b9, 0x3361, 0x8b90, 0x2b6a, 0x6618, 0x24e7, 0x0, 0x1);
        gbc.writeMem(0x80b9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x3361, gbc.sp());
        EXPECT(0x80bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80b9));
        EXPECT(0x8d, gbc.readMem(0x80ba));
        // CB 8D 02E2
        gbc.setState(0xc3a, 0xd2ec, 0xf870, 0x9ec0, 0x2170, 0x8dfc, 0x1, 0x1);
        gbc.writeMem(0xc3a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xd2ec, gbc.sp());
        EXPECT(0xc3c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02E3
        gbc.setState(0xc112, 0x6041, 0x6360, 0x393b, 0x8500, 0x1f2f, 0x1, 0x1);
        gbc.writeMem(0xc112, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x6041, gbc.sp());
        EXPECT(0xc114, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc112));
        EXPECT(0x8d, gbc.readMem(0xc113));
        // CB 8D 02E4
        gbc.setState(0x23f0, 0xf915, 0x34e0, 0x6154, 0xfd5, 0xb85a, 0x1, 0x0);
        gbc.writeMem(0x23f0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xf915, gbc.sp());
        EXPECT(0x23f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02E5
        gbc.setState(0xb233, 0x541b, 0xb130, 0xb7c4, 0x587e, 0xee52, 0x1, 0x1);
        gbc.writeMem(0xb233, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x541b, gbc.sp());
        EXPECT(0xb235, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb233));
        EXPECT(0x8d, gbc.readMem(0xb234));
        // CB 8D 02E6
        gbc.setState(0x71a5, 0xd2a2, 0x1b40, 0x239b, 0x6ac, 0xf77f, 0x0, 0x0);
        gbc.writeMem(0x71a5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xd2a2, gbc.sp());
        EXPECT(0x71a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02E7
        gbc.setState(0xa7fc, 0xf295, 0x8a10, 0x5245, 0x77d3, 0x5023, 0x0, 0x1);
        gbc.writeMem(0xa7fc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xf295, gbc.sp());
        EXPECT(0xa7fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7fc));
        EXPECT(0x8d, gbc.readMem(0xa7fd));
        // CB 8D 02E8
        gbc.setState(0x412e, 0x96ee, 0x5c40, 0x57cc, 0x338d, 0xb247, 0x1, 0x1);
        gbc.writeMem(0x412e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x96ee, gbc.sp());
        EXPECT(0x4130, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02E9
        gbc.setState(0x7316, 0xdc12, 0x9f60, 0xd09d, 0x991, 0x1fc0, 0x0, 0x0);
        gbc.writeMem(0x7316, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xdc12, gbc.sp());
        EXPECT(0x7318, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02EA
        gbc.setState(0x702e, 0xc7d5, 0x6a50, 0xae38, 0x622a, 0xdde6, 0x1, 0x0);
        gbc.writeMem(0x702e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xc7d5, gbc.sp());
        EXPECT(0x7030, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02EB
        gbc.setState(0x3b7b, 0x3193, 0xec10, 0x2a48, 0x65c4, 0x8560, 0x0, 0x0);
        gbc.writeMem(0x3b7b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x3193, gbc.sp());
        EXPECT(0x3b7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02EC
        gbc.setState(0x52e7, 0x2ccc, 0x1dd0, 0x2f, 0x2d42, 0x72fd, 0x0, 0x1);
        gbc.writeMem(0x52e7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x2ccc, gbc.sp());
        EXPECT(0x52e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02ED
        gbc.setState(0x8a15, 0xcd9b, 0x6cc0, 0x3ac8, 0xb812, 0x34d4, 0x1, 0x1);
        gbc.writeMem(0x8a15, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xcd9b, gbc.sp());
        EXPECT(0x8a17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a15));
        EXPECT(0x8d, gbc.readMem(0x8a16));
        // CB 8D 02EE
        gbc.setState(0x2add, 0xa789, 0x3c30, 0x6cba, 0xf5c8, 0xaf4b, 0x0, 0x0);
        gbc.writeMem(0x2add, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xa789, gbc.sp());
        EXPECT(0x2adf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02EF
        gbc.setState(0xcb8, 0x6b69, 0x2910, 0xab92, 0x8f46, 0x29f4, 0x1, 0x0);
        gbc.writeMem(0xcb8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x6b69, gbc.sp());
        EXPECT(0xcba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02F0
        gbc.setState(0x2871, 0xf7ec, 0x6bc0, 0x35dd, 0x2b1e, 0xe3c3, 0x0, 0x1);
        gbc.writeMem(0x2871, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xf7ec, gbc.sp());
        EXPECT(0x2873, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02F1
        gbc.setState(0xed1f, 0xa2a6, 0x6d40, 0xab4, 0x40bd, 0x48b2, 0x1, 0x0);
        gbc.writeMem(0xed1f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xa2a6, gbc.sp());
        EXPECT(0xed21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed1f));
        EXPECT(0x8d, gbc.readMem(0xed20));
        // CB 8D 02F2
        gbc.setState(0x1a59, 0xe116, 0xc5f0, 0xbde3, 0xe657, 0xd68, 0x0, 0x1);
        gbc.writeMem(0x1a59, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xe116, gbc.sp());
        EXPECT(0x1a5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02F3
        gbc.setState(0x96ba, 0x8631, 0xaa50, 0x13ff, 0x3711, 0x4b41, 0x1, 0x1);
        gbc.writeMem(0x96ba, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x8631, gbc.sp());
        EXPECT(0x96bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96ba));
        EXPECT(0x8d, gbc.readMem(0x96bb));
        // CB 8D 02F4
        gbc.setState(0x79f4, 0x781e, 0xd890, 0x3d03, 0xfdff, 0x301d, 0x1, 0x1);
        gbc.writeMem(0x79f4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x781e, gbc.sp());
        EXPECT(0x79f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02F5
        gbc.setState(0x5197, 0x2793, 0x33c0, 0x35bb, 0x9215, 0x5187, 0x0, 0x1);
        gbc.writeMem(0x5197, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x2793, gbc.sp());
        EXPECT(0x5199, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02F6
        gbc.setState(0x72b2, 0x49de, 0xbdc0, 0x6f4f, 0x1c6a, 0x344a, 0x0, 0x1);
        gbc.writeMem(0x72b2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x49de, gbc.sp());
        EXPECT(0x72b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02F7
        gbc.setState(0xd30f, 0xf889, 0xd2d0, 0x5cf9, 0x7d6b, 0x463b, 0x0, 0x1);
        gbc.writeMem(0xd30f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xf889, gbc.sp());
        EXPECT(0xd311, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd30f));
        EXPECT(0x8d, gbc.readMem(0xd310));
        // CB 8D 02F8
        gbc.setState(0x9617, 0x69eb, 0x2a20, 0x161a, 0x1ee9, 0xe4e2, 0x1, 0x0);
        gbc.writeMem(0x9617, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x69eb, gbc.sp());
        EXPECT(0x9619, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9617));
        EXPECT(0x8d, gbc.readMem(0x9618));
        // CB 8D 02FA
        gbc.setState(0x7364, 0x2a24, 0x35c0, 0xc470, 0x86f6, 0x5dbf, 0x1, 0x1);
        gbc.writeMem(0x7364, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x2a24, gbc.sp());
        EXPECT(0x7366, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02FB
        gbc.setState(0xd896, 0x86b8, 0x4b0, 0xf3bd, 0x4cb5, 0x4f97, 0x1, 0x0);
        gbc.writeMem(0xd896, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x86b8, gbc.sp());
        EXPECT(0xd898, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd896));
        EXPECT(0x8d, gbc.readMem(0xd897));
        // CB 8D 02FC
        gbc.setState(0x3377, 0x3654, 0x460, 0x84fd, 0x6dbf, 0xad33, 0x0, 0x0);
        gbc.writeMem(0x3377, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x3654, gbc.sp());
        EXPECT(0x3379, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 02FD
        gbc.setState(0x3f15, 0x4d99, 0xebf0, 0xe389, 0xc1e5, 0xe353, 0x0, 0x0);
        gbc.writeMem(0x3f15, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x4d99, gbc.sp());
        EXPECT(0x3f17, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02FE
        gbc.setState(0x6349, 0xb15f, 0x5db0, 0x6997, 0xd11d, 0xd956, 0x0, 0x0);
        gbc.writeMem(0x6349, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xb15f, gbc.sp());
        EXPECT(0x634b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 02FF
        gbc.setState(0xba79, 0xaf43, 0x9650, 0x7e75, 0xa677, 0xde0d, 0x1, 0x1);
        gbc.writeMem(0xba79, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xaf43, gbc.sp());
        EXPECT(0xba7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba79));
        EXPECT(0x8d, gbc.readMem(0xba7a));
        // CB 8D 0300
        gbc.setState(0xd9f1, 0xb8a9, 0x11e0, 0xfe7, 0x59dc, 0x8f4b, 0x1, 0x1);
        gbc.writeMem(0xd9f1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xb8a9, gbc.sp());
        EXPECT(0xd9f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9f1));
        EXPECT(0x8d, gbc.readMem(0xd9f2));
        // CB 8D 0301
        gbc.setState(0x6ec4, 0x5d77, 0xe1e0, 0x2a57, 0xbe95, 0x5c4e, 0x1, 0x1);
        gbc.writeMem(0x6ec4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x5d77, gbc.sp());
        EXPECT(0x6ec6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0302
        gbc.setState(0x50e7, 0x530b, 0x54f0, 0x956a, 0x87b9, 0xb999, 0x1, 0x0);
        gbc.writeMem(0x50e7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x530b, gbc.sp());
        EXPECT(0x50e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0303
        gbc.setState(0xd41f, 0xf6f2, 0x4520, 0x8938, 0x7153, 0xd02, 0x0, 0x1);
        gbc.writeMem(0xd41f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xf6f2, gbc.sp());
        EXPECT(0xd421, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd41f));
        EXPECT(0x8d, gbc.readMem(0xd420));
        // CB 8D 0304
        gbc.setState(0xddac, 0x1f0f, 0xcd20, 0x85d1, 0xece2, 0x6d71, 0x1, 0x0);
        gbc.writeMem(0xddac, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x1f0f, gbc.sp());
        EXPECT(0xddae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddac));
        EXPECT(0x8d, gbc.readMem(0xddad));
        // CB 8D 0305
        gbc.setState(0x6f61, 0xa52d, 0xfa20, 0x9e03, 0x6e3b, 0x34cf, 0x0, 0x1);
        gbc.writeMem(0x6f61, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xa52d, gbc.sp());
        EXPECT(0x6f63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0306
        gbc.setState(0x4f31, 0xdd5a, 0x5da0, 0x109a, 0x226b, 0xc131, 0x0, 0x1);
        gbc.writeMem(0x4f31, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xdd5a, gbc.sp());
        EXPECT(0x4f33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0307
        gbc.setState(0x981d, 0x8acb, 0x8f70, 0x37cd, 0x2630, 0x549, 0x1, 0x0);
        gbc.writeMem(0x981d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x8acb, gbc.sp());
        EXPECT(0x981f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x981d));
        EXPECT(0x8d, gbc.readMem(0x981e));
        // CB 8D 0308
        gbc.setState(0x3a37, 0x8eab, 0xc9f0, 0x2183, 0xa9ab, 0xdd63, 0x1, 0x1);
        gbc.writeMem(0x3a37, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x8eab, gbc.sp());
        EXPECT(0x3a39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0309
        gbc.setState(0x5932, 0xf11a, 0x61b0, 0x23d2, 0x4c1, 0xff06, 0x1, 0x1);
        gbc.writeMem(0x5932, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xf11a, gbc.sp());
        EXPECT(0x5934, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 030A
        gbc.setState(0xe40c, 0x7fa2, 0x4680, 0x1823, 0xb28c, 0x9d9e, 0x1, 0x1);
        gbc.writeMem(0xe40c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x7fa2, gbc.sp());
        EXPECT(0xe40e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe40c));
        EXPECT(0x8d, gbc.readMem(0xe40d));
        // CB 8D 030B
        gbc.setState(0xc5ef, 0x88d4, 0xad70, 0x5aa8, 0x478c, 0x4d68, 0x0, 0x0);
        gbc.writeMem(0xc5ef, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x88d4, gbc.sp());
        EXPECT(0xc5f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5ef));
        EXPECT(0x8d, gbc.readMem(0xc5f0));
        // CB 8D 030C
        gbc.setState(0xb79, 0xfa40, 0xa290, 0x871e, 0x79a, 0xc862, 0x0, 0x1);
        gbc.writeMem(0xb79, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xfa40, gbc.sp());
        EXPECT(0xb7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 030D
        gbc.setState(0x481e, 0xe5b3, 0x6f40, 0x4b87, 0xb2ad, 0x19c, 0x0, 0x0);
        gbc.writeMem(0x481e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xe5b3, gbc.sp());
        EXPECT(0x4820, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 030E
        gbc.setState(0x921e, 0xd0fc, 0x8f70, 0x5c4, 0x71a0, 0xb1b2, 0x1, 0x1);
        gbc.writeMem(0x921e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xd0fc, gbc.sp());
        EXPECT(0x9220, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x921e));
        EXPECT(0x8d, gbc.readMem(0x921f));
        // CB 8D 030F
        gbc.setState(0x85ef, 0x9e2f, 0xe170, 0x70dc, 0xbc24, 0x6b2b, 0x0, 0x1);
        gbc.writeMem(0x85ef, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x9e2f, gbc.sp());
        EXPECT(0x85f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85ef));
        EXPECT(0x8d, gbc.readMem(0x85f0));
        // CB 8D 0311
        gbc.setState(0x8b7d, 0x527e, 0xc890, 0x608b, 0x6b5c, 0x576, 0x0, 0x1);
        gbc.writeMem(0x8b7d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x527e, gbc.sp());
        EXPECT(0x8b7f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b7d));
        EXPECT(0x8d, gbc.readMem(0x8b7e));
        // CB 8D 0312
        gbc.setState(0x4dcb, 0x8277, 0x1cb0, 0xe98e, 0x4b4f, 0x8539, 0x1, 0x0);
        gbc.writeMem(0x4dcb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x8277, gbc.sp());
        EXPECT(0x4dcd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0313
        gbc.setState(0x727a, 0xc68f, 0x4a20, 0xd6fc, 0xce64, 0x70ac, 0x0, 0x1);
        gbc.writeMem(0x727a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xc68f, gbc.sp());
        EXPECT(0x727c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0314
        gbc.setState(0xcf8d, 0xaa4d, 0xe40, 0xa88c, 0x46dc, 0xa654, 0x0, 0x1);
        gbc.writeMem(0xcf8d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xaa4d, gbc.sp());
        EXPECT(0xcf8f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf8d));
        EXPECT(0x8d, gbc.readMem(0xcf8e));
        // CB 8D 0315
        gbc.setState(0x4dd4, 0x59f0, 0x46d0, 0xe8c, 0x27dc, 0xa38b, 0x0, 0x1);
        gbc.writeMem(0x4dd4, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x59f0, gbc.sp());
        EXPECT(0x4dd6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0316
        gbc.setState(0x446b, 0x910c, 0x87b0, 0x6e61, 0x9423, 0x4e85, 0x0, 0x1);
        gbc.writeMem(0x446b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x910c, gbc.sp());
        EXPECT(0x446d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0317
        gbc.setState(0x396c, 0x34e4, 0x25a0, 0xef94, 0xa175, 0x4acd, 0x1, 0x0);
        gbc.writeMem(0x396c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x34e4, gbc.sp());
        EXPECT(0x396e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0318
        gbc.setState(0xad85, 0xc6e2, 0xc790, 0x1aae, 0x3401, 0x46a4, 0x1, 0x0);
        gbc.writeMem(0xad85, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xc6e2, gbc.sp());
        EXPECT(0xad87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad85));
        EXPECT(0x8d, gbc.readMem(0xad86));
        // CB 8D 031A
        gbc.setState(0x3cdf, 0x2f11, 0xa360, 0xdd5b, 0x1a60, 0x18ee, 0x0, 0x0);
        gbc.writeMem(0x3cdf, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x2f11, gbc.sp());
        EXPECT(0x3ce1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 031B
        gbc.setState(0xed93, 0x6e1a, 0x9d80, 0xaee5, 0x4228, 0x35e2, 0x0, 0x0);
        gbc.writeMem(0xed93, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x6e1a, gbc.sp());
        EXPECT(0xed95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed93));
        EXPECT(0x8d, gbc.readMem(0xed94));
        // CB 8D 031C
        gbc.setState(0xc3f2, 0xd051, 0x2b90, 0xe2d7, 0xc07d, 0x1184, 0x0, 0x0);
        gbc.writeMem(0xc3f2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xd051, gbc.sp());
        EXPECT(0xc3f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3f2));
        EXPECT(0x8d, gbc.readMem(0xc3f3));
        // CB 8D 031D
        gbc.setState(0x2ef6, 0x90f9, 0x94c0, 0xfc7b, 0xac27, 0xa9da, 0x0, 0x1);
        gbc.writeMem(0x2ef6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x90f9, gbc.sp());
        EXPECT(0x2ef8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 031E
        gbc.setState(0xc453, 0x9c7a, 0x9ff0, 0xef0f, 0x3957, 0x79a4, 0x0, 0x1);
        gbc.writeMem(0xc453, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x9c7a, gbc.sp());
        EXPECT(0xc455, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc453));
        EXPECT(0x8d, gbc.readMem(0xc454));
        // CB 8D 031F
        gbc.setState(0x6a10, 0x711, 0x2f0, 0xb597, 0x9779, 0xc80f, 0x0, 0x1);
        gbc.writeMem(0x6a10, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x711, gbc.sp());
        EXPECT(0x6a12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0320
        gbc.setState(0x2dd3, 0x64d2, 0xd9c0, 0xac12, 0x3c9d, 0xeb94, 0x0, 0x0);
        gbc.writeMem(0x2dd3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x64d2, gbc.sp());
        EXPECT(0x2dd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0321
        gbc.setState(0x683b, 0x38eb, 0xe3b0, 0x9b0c, 0x4ee4, 0x1d7e, 0x1, 0x0);
        gbc.writeMem(0x683b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x38eb, gbc.sp());
        EXPECT(0x683d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0322
        gbc.setState(0xc756, 0x1080, 0x19b0, 0x9f19, 0xa167, 0x3513, 0x0, 0x1);
        gbc.writeMem(0xc756, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x1080, gbc.sp());
        EXPECT(0xc758, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc756));
        EXPECT(0x8d, gbc.readMem(0xc757));
        // CB 8D 0323
        gbc.setState(0x959e, 0x47fc, 0x5700, 0x60c5, 0x56bb, 0xf06e, 0x0, 0x1);
        gbc.writeMem(0x959e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x47fc, gbc.sp());
        EXPECT(0x95a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x959e));
        EXPECT(0x8d, gbc.readMem(0x959f));
        // CB 8D 0324
        gbc.setState(0x9e5f, 0x6d7b, 0x2d40, 0xeabd, 0xaa71, 0x20e6, 0x0, 0x0);
        gbc.writeMem(0x9e5f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x6d7b, gbc.sp());
        EXPECT(0x9e61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e5f));
        EXPECT(0x8d, gbc.readMem(0x9e60));
        // CB 8D 0325
        gbc.setState(0x63d7, 0xe246, 0x8690, 0x1458, 0xc3a7, 0xc23, 0x1, 0x0);
        gbc.writeMem(0x63d7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xe246, gbc.sp());
        EXPECT(0x63d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0326
        gbc.setState(0x4b4c, 0x3ecb, 0x85c0, 0x533e, 0x9b, 0xdf2b, 0x0, 0x0);
        gbc.writeMem(0x4b4c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x3ecb, gbc.sp());
        EXPECT(0x4b4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0327
        gbc.setState(0xa5cc, 0x5935, 0x5350, 0x9082, 0x1954, 0x15bb, 0x1, 0x1);
        gbc.writeMem(0xa5cc, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x5935, gbc.sp());
        EXPECT(0xa5ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5cc));
        EXPECT(0x8d, gbc.readMem(0xa5cd));
        // CB 8D 0328
        gbc.setState(0x4633, 0x10a6, 0x3740, 0xd0bc, 0x61b4, 0xbb49, 0x1, 0x0);
        gbc.writeMem(0x4633, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x10a6, gbc.sp());
        EXPECT(0x4635, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0329
        gbc.setState(0x73f, 0x741, 0x90e0, 0x514a, 0xb74b, 0x8ea8, 0x0, 0x0);
        gbc.writeMem(0x73f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x741, gbc.sp());
        EXPECT(0x741, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 032A
        gbc.setState(0xc53f, 0x48db, 0xc570, 0xa601, 0x14a7, 0xc633, 0x1, 0x0);
        gbc.writeMem(0xc53f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x48db, gbc.sp());
        EXPECT(0xc541, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc53f));
        EXPECT(0x8d, gbc.readMem(0xc540));
        // CB 8D 032B
        gbc.setState(0x70df, 0xb305, 0x7a20, 0x70c7, 0x1a8, 0xe74a, 0x0, 0x1);
        gbc.writeMem(0x70df, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xb305, gbc.sp());
        EXPECT(0x70e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 032C
        gbc.setState(0x3bcd, 0x3469, 0x9a10, 0xf25, 0xd3a1, 0x3073, 0x1, 0x1);
        gbc.writeMem(0x3bcd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x3469, gbc.sp());
        EXPECT(0x3bcf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 032D
        gbc.setState(0x1ca, 0x8a07, 0xbca0, 0x8ea9, 0x9088, 0x1e, 0x1, 0x0);
        gbc.writeMem(0x1ca, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x8a07, gbc.sp());
        EXPECT(0x1cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 032E
        gbc.setState(0x5b54, 0x9f86, 0x4630, 0xe524, 0x3149, 0x4bc8, 0x0, 0x0);
        gbc.writeMem(0x5b54, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x9f86, gbc.sp());
        EXPECT(0x5b56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 032F
        gbc.setState(0x7890, 0x9b6e, 0x6a80, 0xf057, 0xa547, 0xd5e, 0x1, 0x0);
        gbc.writeMem(0x7890, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x9b6e, gbc.sp());
        EXPECT(0x7892, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0331
        gbc.setState(0xe2c7, 0xa935, 0xa760, 0xb947, 0x74b3, 0x5200, 0x0, 0x1);
        gbc.writeMem(0xe2c7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xa935, gbc.sp());
        EXPECT(0xe2c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2c7));
        EXPECT(0x8d, gbc.readMem(0xe2c8));
        // CB 8D 0332
        gbc.setState(0x13d2, 0x3fca, 0xe610, 0xe8d9, 0x62cd, 0x50f3, 0x0, 0x0);
        gbc.writeMem(0x13d2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x3fca, gbc.sp());
        EXPECT(0x13d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0334
        gbc.setState(0x2cb6, 0xd4bd, 0x1f30, 0x9925, 0x78ce, 0xf5d, 0x0, 0x0);
        gbc.writeMem(0x2cb6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xd4bd, gbc.sp());
        EXPECT(0x2cb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0335
        gbc.setState(0xd343, 0x8de8, 0x3600, 0xeb69, 0x1102, 0x6489, 0x0, 0x0);
        gbc.writeMem(0xd343, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x8de8, gbc.sp());
        EXPECT(0xd345, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd343));
        EXPECT(0x8d, gbc.readMem(0xd344));
        // CB 8D 0336
        gbc.setState(0x7e8a, 0xd1cc, 0x410, 0x8c8e, 0x6174, 0xc4b2, 0x1, 0x1);
        gbc.writeMem(0x7e8a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xd1cc, gbc.sp());
        EXPECT(0x7e8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0338
        gbc.setState(0xe8ea, 0x65d2, 0xaff0, 0xb61a, 0xf1d6, 0x3a05, 0x0, 0x1);
        gbc.writeMem(0xe8ea, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x65d2, gbc.sp());
        EXPECT(0xe8ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8ea));
        EXPECT(0x8d, gbc.readMem(0xe8eb));
        // CB 8D 0339
        gbc.setState(0xbfbb, 0xec9e, 0xb480, 0x751, 0x31ab, 0x4a2, 0x0, 0x0);
        gbc.writeMem(0xbfbb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xec9e, gbc.sp());
        EXPECT(0xbfbd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfbb));
        EXPECT(0x8d, gbc.readMem(0xbfbc));
        // CB 8D 033A
        gbc.setState(0xea07, 0xa264, 0x7040, 0x5a22, 0xa4b8, 0x82f2, 0x1, 0x0);
        gbc.writeMem(0xea07, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xa264, gbc.sp());
        EXPECT(0xea09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea07));
        EXPECT(0x8d, gbc.readMem(0xea08));
        // CB 8D 033B
        gbc.setState(0xc552, 0x7964, 0x7ca0, 0x9e95, 0x4de8, 0xc1c2, 0x1, 0x0);
        gbc.writeMem(0xc552, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x7964, gbc.sp());
        EXPECT(0xc554, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc552));
        EXPECT(0x8d, gbc.readMem(0xc553));
        // CB 8D 033C
        gbc.setState(0x1292, 0x2e0a, 0x3070, 0xf391, 0xf33, 0x952c, 0x0, 0x1);
        gbc.writeMem(0x1292, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x2e0a, gbc.sp());
        EXPECT(0x1294, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 033D
        gbc.setState(0x30e8, 0xe5b2, 0xb320, 0xe60, 0xa0e4, 0xaac7, 0x0, 0x1);
        gbc.writeMem(0x30e8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xe5b2, gbc.sp());
        EXPECT(0x30ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 033E
        gbc.setState(0xe59e, 0x561f, 0xb620, 0x2eed, 0x2573, 0x5769, 0x1, 0x0);
        gbc.writeMem(0xe59e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x561f, gbc.sp());
        EXPECT(0xe5a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe59e));
        EXPECT(0x8d, gbc.readMem(0xe59f));
        // CB 8D 033F
        gbc.setState(0x8199, 0x28b6, 0x5dc0, 0x36df, 0x279a, 0x5096, 0x1, 0x1);
        gbc.writeMem(0x8199, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x28b6, gbc.sp());
        EXPECT(0x819b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8199));
        EXPECT(0x8d, gbc.readMem(0x819a));
        // CB 8D 0340
        gbc.setState(0x8fad, 0x1fed, 0xa150, 0x803, 0xa484, 0xb290, 0x1, 0x0);
        gbc.writeMem(0x8fad, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x1fed, gbc.sp());
        EXPECT(0x8faf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fad));
        EXPECT(0x8d, gbc.readMem(0x8fae));
        // CB 8D 0341
        gbc.setState(0x3182, 0xd11b, 0xca00, 0x5e2, 0xaf2c, 0xf8c0, 0x0, 0x0);
        gbc.writeMem(0x3182, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xd11b, gbc.sp());
        EXPECT(0x3184, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0342
        gbc.setState(0xd8a7, 0x9eea, 0xa460, 0x364a, 0x1dff, 0xecf2, 0x0, 0x1);
        gbc.writeMem(0xd8a7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x9eea, gbc.sp());
        EXPECT(0xd8a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8a7));
        EXPECT(0x8d, gbc.readMem(0xd8a8));
        // CB 8D 0343
        gbc.setState(0x82be, 0xd08, 0x7c0, 0x4e84, 0x2bae, 0xe1a9, 0x1, 0x1);
        gbc.writeMem(0x82be, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xd08, gbc.sp());
        EXPECT(0x82c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82be));
        EXPECT(0x8d, gbc.readMem(0x82bf));
        // CB 8D 0344
        gbc.setState(0x911b, 0xd76a, 0x44c0, 0xf51a, 0xacdf, 0x7e77, 0x1, 0x0);
        gbc.writeMem(0x911b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xd76a, gbc.sp());
        EXPECT(0x911d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x911b));
        EXPECT(0x8d, gbc.readMem(0x911c));
        // CB 8D 0345
        gbc.setState(0xa720, 0x554b, 0x8f90, 0x6e71, 0x8081, 0x7a37, 0x0, 0x1);
        gbc.writeMem(0xa720, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x554b, gbc.sp());
        EXPECT(0xa722, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa720));
        EXPECT(0x8d, gbc.readMem(0xa721));
        // CB 8D 0346
        gbc.setState(0x47ba, 0xeccb, 0xd110, 0xd2f1, 0x1423, 0x4db8, 0x1, 0x1);
        gbc.writeMem(0x47ba, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xeccb, gbc.sp());
        EXPECT(0x47bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0347
        gbc.setState(0x54f9, 0xf738, 0xcbf0, 0xc167, 0xe4bb, 0xcf51, 0x1, 0x0);
        gbc.writeMem(0x54f9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xf738, gbc.sp());
        EXPECT(0x54fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0348
        gbc.setState(0xa3e7, 0x9d64, 0x6de0, 0xfcd1, 0x3dd, 0x5c4c, 0x1, 0x1);
        gbc.writeMem(0xa3e7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x9d64, gbc.sp());
        EXPECT(0xa3e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3e7));
        EXPECT(0x8d, gbc.readMem(0xa3e8));
        // CB 8D 0349
        gbc.setState(0x42b2, 0x8aa9, 0x87f0, 0xd2f0, 0x5789, 0x6a90, 0x0, 0x1);
        gbc.writeMem(0x42b2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x8aa9, gbc.sp());
        EXPECT(0x42b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 034A
        gbc.setState(0xb8e2, 0x6d36, 0xfd40, 0xec06, 0x68ad, 0xf7a7, 0x1, 0x1);
        gbc.writeMem(0xb8e2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x6d36, gbc.sp());
        EXPECT(0xb8e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8e2));
        EXPECT(0x8d, gbc.readMem(0xb8e3));
        // CB 8D 034B
        gbc.setState(0x6f28, 0x270e, 0xd890, 0xb928, 0x211a, 0x15ba, 0x0, 0x1);
        gbc.writeMem(0x6f28, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x270e, gbc.sp());
        EXPECT(0x6f2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 034C
        gbc.setState(0x74c, 0xf293, 0x4000, 0x845e, 0xd73b, 0xe558, 0x0, 0x0);
        gbc.writeMem(0x74c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xf293, gbc.sp());
        EXPECT(0x74e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 034D
        gbc.setState(0x8a1c, 0x59c3, 0x4e10, 0xc1c8, 0x3df8, 0xfe00, 0x1, 0x0);
        gbc.writeMem(0x8a1c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x59c3, gbc.sp());
        EXPECT(0x8a1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a1c));
        EXPECT(0x8d, gbc.readMem(0x8a1d));
        // CB 8D 034E
        gbc.setState(0x8dc9, 0xa468, 0xc010, 0x397a, 0x7d6c, 0x2138, 0x1, 0x1);
        gbc.writeMem(0x8dc9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xa468, gbc.sp());
        EXPECT(0x8dcb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dc9));
        EXPECT(0x8d, gbc.readMem(0x8dca));
        // CB 8D 034F
        gbc.setState(0xccb3, 0x8a7d, 0x4a90, 0x93ef, 0x12ae, 0xa22a, 0x1, 0x0);
        gbc.writeMem(0xccb3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x8a7d, gbc.sp());
        EXPECT(0xccb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccb3));
        EXPECT(0x8d, gbc.readMem(0xccb4));
        // CB 8D 0350
        gbc.setState(0xc52e, 0xd511, 0xad50, 0xfd89, 0xe266, 0x2268, 0x0, 0x1);
        gbc.writeMem(0xc52e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xd511, gbc.sp());
        EXPECT(0xc530, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc52e));
        EXPECT(0x8d, gbc.readMem(0xc52f));
        // CB 8D 0351
        gbc.setState(0xad7c, 0x4d94, 0xcf60, 0x4190, 0xdc60, 0xbfa3, 0x1, 0x1);
        gbc.writeMem(0xad7c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x4d94, gbc.sp());
        EXPECT(0xad7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad7c));
        EXPECT(0x8d, gbc.readMem(0xad7d));
        // CB 8D 0352
        gbc.setState(0x3068, 0xbfe8, 0x9c60, 0x7ba5, 0x586a, 0x2605, 0x1, 0x1);
        gbc.writeMem(0x3068, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xbfe8, gbc.sp());
        EXPECT(0x306a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0353
        gbc.setState(0xa5e, 0xaee7, 0x4e90, 0x8378, 0xb94a, 0x3668, 0x1, 0x1);
        gbc.writeMem(0xa5e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xaee7, gbc.sp());
        EXPECT(0xa60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0354
        gbc.setState(0xe17b, 0x5ba9, 0x34c0, 0xa04e, 0x217c, 0xfbde, 0x0, 0x1);
        gbc.writeMem(0xe17b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x5ba9, gbc.sp());
        EXPECT(0xe17d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe17b));
        EXPECT(0x8d, gbc.readMem(0xe17c));
        // CB 8D 0355
        gbc.setState(0x8748, 0x8811, 0xe7c0, 0x1eeb, 0x6f77, 0xdd80, 0x0, 0x1);
        gbc.writeMem(0x8748, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x8811, gbc.sp());
        EXPECT(0x874a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8748));
        EXPECT(0x8d, gbc.readMem(0x8749));
        // CB 8D 0356
        gbc.setState(0x9583, 0xa41a, 0x7d70, 0x55fb, 0x1596, 0x3844, 0x1, 0x1);
        gbc.writeMem(0x9583, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xa41a, gbc.sp());
        EXPECT(0x9585, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9583));
        EXPECT(0x8d, gbc.readMem(0x9584));
        // CB 8D 0357
        gbc.setState(0x67e8, 0x558c, 0xd710, 0x4da9, 0xa0f0, 0xcb69, 0x1, 0x1);
        gbc.writeMem(0x67e8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x558c, gbc.sp());
        EXPECT(0x67ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0358
        gbc.setState(0x85a, 0x1459, 0x2c60, 0xf760, 0xfdcc, 0x3270, 0x0, 0x1);
        gbc.writeMem(0x85a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x1459, gbc.sp());
        EXPECT(0x85c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0359
        gbc.setState(0xa3bf, 0x61cf, 0xa760, 0x44ea, 0x3fad, 0xa241, 0x0, 0x0);
        gbc.writeMem(0xa3bf, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x61cf, gbc.sp());
        EXPECT(0xa3c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3bf));
        EXPECT(0x8d, gbc.readMem(0xa3c0));
        // CB 8D 035A
        gbc.setState(0x82b2, 0x3320, 0xc9b0, 0x6c0f, 0xb9e7, 0x1645, 0x1, 0x0);
        gbc.writeMem(0x82b2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x3320, gbc.sp());
        EXPECT(0x82b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82b2));
        EXPECT(0x8d, gbc.readMem(0x82b3));
        // CB 8D 035C
        gbc.setState(0x9c98, 0xb92e, 0x1e30, 0x919b, 0xb05c, 0xdfdf, 0x0, 0x0);
        gbc.writeMem(0x9c98, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xb92e, gbc.sp());
        EXPECT(0x9c9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c98));
        EXPECT(0x8d, gbc.readMem(0x9c99));
        // CB 8D 035D
        gbc.setState(0x5f83, 0xadd6, 0x7cc0, 0x44b9, 0x5515, 0xfa04, 0x0, 0x1);
        gbc.writeMem(0x5f83, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xadd6, gbc.sp());
        EXPECT(0x5f85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 035E
        gbc.setState(0x3ad6, 0x2160, 0xe4e0, 0x2af, 0xc5fd, 0x68e7, 0x1, 0x0);
        gbc.writeMem(0x3ad6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x2160, gbc.sp());
        EXPECT(0x3ad8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 035F
        gbc.setState(0xcdd1, 0xe42c, 0xae0, 0x1bfd, 0x3e89, 0x3142, 0x0, 0x0);
        gbc.writeMem(0xcdd1, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xe42c, gbc.sp());
        EXPECT(0xcdd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdd1));
        EXPECT(0x8d, gbc.readMem(0xcdd2));
        // CB 8D 0361
        gbc.setState(0x921e, 0xf159, 0x140, 0xc6e6, 0xb086, 0x4707, 0x0, 0x1);
        gbc.writeMem(0x921e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xf159, gbc.sp());
        EXPECT(0x9220, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x921e));
        EXPECT(0x8d, gbc.readMem(0x921f));
        // CB 8D 0362
        gbc.setState(0xeb3a, 0xa7da, 0xfc70, 0xad1f, 0x2d8a, 0x256e, 0x0, 0x0);
        gbc.writeMem(0xeb3a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xa7da, gbc.sp());
        EXPECT(0xeb3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb3a));
        EXPECT(0x8d, gbc.readMem(0xeb3b));
        // CB 8D 0363
        gbc.setState(0xb244, 0x740b, 0x5ec0, 0x46be, 0xaf9d, 0x45a7, 0x1, 0x0);
        gbc.writeMem(0xb244, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x740b, gbc.sp());
        EXPECT(0xb246, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb244));
        EXPECT(0x8d, gbc.readMem(0xb245));
        // CB 8D 0364
        gbc.setState(0x2185, 0x23dd, 0x34f0, 0xd791, 0x79aa, 0xccc5, 0x1, 0x0);
        gbc.writeMem(0x2185, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x23dd, gbc.sp());
        EXPECT(0x2187, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0365
        gbc.setState(0xdbb7, 0xb6c8, 0xd940, 0x61c4, 0x89b0, 0x85eb, 0x1, 0x0);
        gbc.writeMem(0xdbb7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xb6c8, gbc.sp());
        EXPECT(0xdbb9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbb7));
        EXPECT(0x8d, gbc.readMem(0xdbb8));
        // CB 8D 0366
        gbc.setState(0x52b9, 0xe3b2, 0x1dd0, 0xaa82, 0xf727, 0x743d, 0x0, 0x1);
        gbc.writeMem(0x52b9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xe3b2, gbc.sp());
        EXPECT(0x52bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0367
        gbc.setState(0xc393, 0x8f37, 0xeab0, 0x6616, 0xfd29, 0x4540, 0x0, 0x0);
        gbc.writeMem(0xc393, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x8f37, gbc.sp());
        EXPECT(0xc395, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc393));
        EXPECT(0x8d, gbc.readMem(0xc394));
        // CB 8D 0368
        gbc.setState(0x18cd, 0x47e4, 0xd720, 0x6f8a, 0xa448, 0xd34c, 0x1, 0x0);
        gbc.writeMem(0x18cd, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x47e4, gbc.sp());
        EXPECT(0x18cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0369
        gbc.setState(0x6d8b, 0xc1f3, 0x9690, 0x4a9b, 0xfd97, 0xba90, 0x0, 0x0);
        gbc.writeMem(0x6d8b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xc1f3, gbc.sp());
        EXPECT(0x6d8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 036A
        gbc.setState(0x2119, 0x35d9, 0x5050, 0x1839, 0xfbcd, 0x71e, 0x0, 0x0);
        gbc.writeMem(0x2119, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x35d9, gbc.sp());
        EXPECT(0x211b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 036B
        gbc.setState(0xda21, 0xfa4e, 0x3900, 0xa4fa, 0x90a7, 0x9e1c, 0x1, 0x0);
        gbc.writeMem(0xda21, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xfa4e, gbc.sp());
        EXPECT(0xda23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda21));
        EXPECT(0x8d, gbc.readMem(0xda22));
        // CB 8D 036D
        gbc.setState(0x900f, 0xdbf, 0xf860, 0x8960, 0x704d, 0xac9, 0x0, 0x0);
        gbc.writeMem(0x900f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xdbf, gbc.sp());
        EXPECT(0x9011, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x900f));
        EXPECT(0x8d, gbc.readMem(0x9010));
        // CB 8D 036E
        gbc.setState(0xc5ca, 0x4817, 0x5cc0, 0xf08e, 0xf9d7, 0x7af1, 0x0, 0x0);
        gbc.writeMem(0xc5ca, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x4817, gbc.sp());
        EXPECT(0xc5cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5ca));
        EXPECT(0x8d, gbc.readMem(0xc5cb));
        // CB 8D 036F
        gbc.setState(0xb1f6, 0xab5d, 0x6770, 0xba2d, 0xcaf, 0xff10, 0x0, 0x0);
        gbc.writeMem(0xb1f6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xab5d, gbc.sp());
        EXPECT(0xb1f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1f6));
        EXPECT(0x8d, gbc.readMem(0xb1f7));
        // CB 8D 0370
        gbc.setState(0xe634, 0xb3d5, 0x14c0, 0xcd5e, 0x389e, 0x16e0, 0x1, 0x0);
        gbc.writeMem(0xe634, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xb3d5, gbc.sp());
        EXPECT(0xe636, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe634));
        EXPECT(0x8d, gbc.readMem(0xe635));
        // CB 8D 0371
        gbc.setState(0x3139, 0xc9d0, 0x2830, 0x9114, 0xc1d, 0xb1c1, 0x0, 0x1);
        gbc.writeMem(0x3139, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xc9d0, gbc.sp());
        EXPECT(0x313b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0372
        gbc.setState(0x8ce5, 0x9fe1, 0xced0, 0xdc0c, 0x384c, 0x14d9, 0x1, 0x1);
        gbc.writeMem(0x8ce5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x9fe1, gbc.sp());
        EXPECT(0x8ce7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ce5));
        EXPECT(0x8d, gbc.readMem(0x8ce6));
        // CB 8D 0373
        gbc.setState(0xa53e, 0x723c, 0xea70, 0x7efc, 0x9070, 0x26ff, 0x0, 0x1);
        gbc.writeMem(0xa53e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x723c, gbc.sp());
        EXPECT(0xa540, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa53e));
        EXPECT(0x8d, gbc.readMem(0xa53f));
        // CB 8D 0374
        gbc.setState(0x4ea3, 0x965, 0xd2f0, 0x215a, 0x5983, 0xef97, 0x0, 0x1);
        gbc.writeMem(0x4ea3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x965, gbc.sp());
        EXPECT(0x4ea5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0375
        gbc.setState(0x99e0, 0x76fb, 0x8b40, 0x39e6, 0x6d92, 0x5e45, 0x1, 0x0);
        gbc.writeMem(0x99e0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x76fb, gbc.sp());
        EXPECT(0x99e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99e0));
        EXPECT(0x8d, gbc.readMem(0x99e1));
        // CB 8D 0376
        gbc.setState(0x9d55, 0x7e, 0xcd30, 0xfdbc, 0xd634, 0x4dc6, 0x1, 0x0);
        gbc.writeMem(0x9d55, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x7e, gbc.sp());
        EXPECT(0x9d57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d55));
        EXPECT(0x8d, gbc.readMem(0x9d56));
        // CB 8D 0378
        gbc.setState(0x9b03, 0xe0c1, 0x7080, 0xdd, 0x727a, 0xa02c, 0x0, 0x0);
        gbc.writeMem(0x9b03, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xe0c1, gbc.sp());
        EXPECT(0x9b05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b03));
        EXPECT(0x8d, gbc.readMem(0x9b04));
        // CB 8D 037A
        gbc.setState(0xc077, 0x88ba, 0xbef0, 0x8e05, 0x30bd, 0x67c9, 0x0, 0x1);
        gbc.writeMem(0xc077, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x88ba, gbc.sp());
        EXPECT(0xc079, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc077));
        EXPECT(0x8d, gbc.readMem(0xc078));
        // CB 8D 037B
        gbc.setState(0xa57a, 0x739f, 0x4480, 0xe30c, 0xef49, 0x7990, 0x1, 0x1);
        gbc.writeMem(0xa57a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x739f, gbc.sp());
        EXPECT(0xa57c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa57a));
        EXPECT(0x8d, gbc.readMem(0xa57b));
        // CB 8D 037C
        gbc.setState(0xc496, 0x76c, 0x84e0, 0x1520, 0x7aa1, 0x7718, 0x0, 0x1);
        gbc.writeMem(0xc496, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x76c, gbc.sp());
        EXPECT(0xc498, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc496));
        EXPECT(0x8d, gbc.readMem(0xc497));
        // CB 8D 037D
        gbc.setState(0x384c, 0x833, 0x6b90, 0x223a, 0x6554, 0x25dd, 0x0, 0x0);
        gbc.writeMem(0x384c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x833, gbc.sp());
        EXPECT(0x384e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 037E
        gbc.setState(0xef27, 0x21da, 0x79e0, 0xae38, 0xc8f1, 0xa7b, 0x0, 0x1);
        gbc.writeMem(0xef27, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x21da, gbc.sp());
        EXPECT(0xef29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef27));
        EXPECT(0x8d, gbc.readMem(0xef28));
        // CB 8D 037F
        gbc.setState(0xa725, 0x88fa, 0x2120, 0xf474, 0x6b30, 0x369, 0x0, 0x0);
        gbc.writeMem(0xa725, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x88fa, gbc.sp());
        EXPECT(0xa727, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa725));
        EXPECT(0x8d, gbc.readMem(0xa726));
        // CB 8D 0380
        gbc.setState(0x4e39, 0x3431, 0xe480, 0x82c9, 0x4fc8, 0xb657, 0x1, 0x1);
        gbc.writeMem(0x4e39, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x3431, gbc.sp());
        EXPECT(0x4e3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0382
        gbc.setState(0xbc2, 0x3724, 0x3770, 0x185c, 0x41bb, 0x610d, 0x1, 0x1);
        gbc.writeMem(0xbc2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x3724, gbc.sp());
        EXPECT(0xbc4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0383
        gbc.setState(0x935b, 0x202a, 0xfa80, 0xa301, 0x23b7, 0xdecb, 0x1, 0x1);
        gbc.writeMem(0x935b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x202a, gbc.sp());
        EXPECT(0x935d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x935b));
        EXPECT(0x8d, gbc.readMem(0x935c));
        // CB 8D 0384
        gbc.setState(0x5937, 0xd7d7, 0x9280, 0x3f13, 0xfde0, 0x1ec5, 0x0, 0x1);
        gbc.writeMem(0x5937, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xd7d7, gbc.sp());
        EXPECT(0x5939, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0385
        gbc.setState(0x5a9d, 0x15bb, 0x1500, 0xb534, 0xa9e4, 0x2116, 0x0, 0x1);
        gbc.writeMem(0x5a9d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x15bb, gbc.sp());
        EXPECT(0x5a9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0386
        gbc.setState(0xeef8, 0xe666, 0x9dc0, 0x96e6, 0x6eac, 0x2d08, 0x1, 0x0);
        gbc.writeMem(0xeef8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xe666, gbc.sp());
        EXPECT(0xeefa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeef8));
        EXPECT(0x8d, gbc.readMem(0xeef9));
        // CB 8D 0388
        gbc.setState(0x2f75, 0xf7b6, 0xfbf0, 0xefa8, 0x7d6b, 0x19b, 0x0, 0x0);
        gbc.writeMem(0x2f75, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xf7b6, gbc.sp());
        EXPECT(0x2f77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0389
        gbc.setState(0x1273, 0xf5a1, 0x12d0, 0x7da0, 0x56b7, 0x4d23, 0x1, 0x1);
        gbc.writeMem(0x1273, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xf5a1, gbc.sp());
        EXPECT(0x1275, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 038A
        gbc.setState(0xb1f2, 0xfb52, 0xa520, 0x70d4, 0x8a5e, 0xbc6b, 0x0, 0x1);
        gbc.writeMem(0xb1f2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xfb52, gbc.sp());
        EXPECT(0xb1f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1f2));
        EXPECT(0x8d, gbc.readMem(0xb1f3));
        // CB 8D 038B
        gbc.setState(0x94ee, 0x2d42, 0x1700, 0xb2f9, 0x2b8d, 0x19aa, 0x0, 0x0);
        gbc.writeMem(0x94ee, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x2d42, gbc.sp());
        EXPECT(0x94f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94ee));
        EXPECT(0x8d, gbc.readMem(0x94ef));
        // CB 8D 038C
        gbc.setState(0x193a, 0x217a, 0x7c10, 0x9c23, 0x9ab3, 0x8d59, 0x1, 0x1);
        gbc.writeMem(0x193a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x217a, gbc.sp());
        EXPECT(0x193c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 038D
        gbc.setState(0xeca5, 0x7eed, 0x420, 0x44d6, 0xdaa8, 0x4d79, 0x1, 0x0);
        gbc.writeMem(0xeca5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x7eed, gbc.sp());
        EXPECT(0xeca7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeca5));
        EXPECT(0x8d, gbc.readMem(0xeca6));
        // CB 8D 038E
        gbc.setState(0x17e2, 0x8893, 0x6240, 0x43fe, 0x7888, 0xaa8f, 0x1, 0x1);
        gbc.writeMem(0x17e2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x8893, gbc.sp());
        EXPECT(0x17e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 038F
        gbc.setState(0xe2fb, 0x1dfb, 0x580, 0x2621, 0x4a21, 0xc492, 0x1, 0x1);
        gbc.writeMem(0xe2fb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x1dfb, gbc.sp());
        EXPECT(0xe2fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2fb));
        EXPECT(0x8d, gbc.readMem(0xe2fc));
        // CB 8D 0390
        gbc.setState(0x3248, 0x5bb6, 0xe520, 0x3f18, 0x25c1, 0xf315, 0x0, 0x1);
        gbc.writeMem(0x3248, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x5bb6, gbc.sp());
        EXPECT(0x324a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0391
        gbc.setState(0x287e, 0x27cb, 0xf950, 0xa55, 0xa53, 0xeddc, 0x1, 0x1);
        gbc.writeMem(0x287e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x27cb, gbc.sp());
        EXPECT(0x2880, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0392
        gbc.setState(0x1bd3, 0x8aed, 0x2940, 0xa2da, 0x94b, 0x242b, 0x0, 0x0);
        gbc.writeMem(0x1bd3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x8aed, gbc.sp());
        EXPECT(0x1bd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0393
        gbc.setState(0xcead, 0x2472, 0x18c0, 0xadc6, 0xaf65, 0x9295, 0x0, 0x1);
        gbc.writeMem(0xcead, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x2472, gbc.sp());
        EXPECT(0xceaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcead));
        EXPECT(0x8d, gbc.readMem(0xceae));
        // CB 8D 0394
        gbc.setState(0xec35, 0xbbd, 0x4220, 0x42ea, 0x25f3, 0xaa11, 0x1, 0x1);
        gbc.writeMem(0xec35, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xbbd, gbc.sp());
        EXPECT(0xec37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec35));
        EXPECT(0x8d, gbc.readMem(0xec36));
        // CB 8D 0395
        gbc.setState(0x4013, 0xb57f, 0x42f0, 0x3bd7, 0x8d78, 0xe7e0, 0x0, 0x1);
        gbc.writeMem(0x4013, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xb57f, gbc.sp());
        EXPECT(0x4015, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0396
        gbc.setState(0x47d0, 0x2283, 0x6620, 0x603c, 0xf701, 0xd4af, 0x0, 0x0);
        gbc.writeMem(0x47d0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x2283, gbc.sp());
        EXPECT(0x47d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0397
        gbc.setState(0x132, 0xd31d, 0x9c00, 0xaf11, 0x25e0, 0xfbae, 0x0, 0x1);
        gbc.writeMem(0x132, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xd31d, gbc.sp());
        EXPECT(0x134, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 0398
        gbc.setState(0xf27, 0xc40, 0x8b0, 0x1f50, 0x616d, 0x5a62, 0x0, 0x0);
        gbc.writeMem(0xf27, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xc40, gbc.sp());
        EXPECT(0xf29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 0399
        gbc.setState(0x64d2, 0xb2a0, 0xfe0, 0x7f78, 0x3ca, 0x9c4d, 0x0, 0x0);
        gbc.writeMem(0x64d2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xb2a0, gbc.sp());
        EXPECT(0x64d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 039A
        gbc.setState(0xd7df, 0xd785, 0xdda0, 0xeb30, 0x2294, 0x924f, 0x1, 0x1);
        gbc.writeMem(0xd7df, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xd785, gbc.sp());
        EXPECT(0xd7e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7df));
        EXPECT(0x8d, gbc.readMem(0xd7e0));
        // CB 8D 039B
        gbc.setState(0xb85c, 0x6d02, 0xba40, 0xb6d7, 0x34e9, 0xf0a1, 0x1, 0x1);
        gbc.writeMem(0xb85c, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x6d02, gbc.sp());
        EXPECT(0xb85e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb85c));
        EXPECT(0x8d, gbc.readMem(0xb85d));
        // CB 8D 039C
        gbc.setState(0x19c6, 0xa333, 0xcb90, 0x1230, 0xff0b, 0x18ce, 0x1, 0x0);
        gbc.writeMem(0x19c6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xa333, gbc.sp());
        EXPECT(0x19c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 039D
        gbc.setState(0xdf52, 0xa4, 0x6830, 0x979c, 0x61a7, 0x52c5, 0x1, 0x0);
        gbc.writeMem(0xdf52, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xa4, gbc.sp());
        EXPECT(0xdf54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf52));
        EXPECT(0x8d, gbc.readMem(0xdf53));
        // CB 8D 039E
        gbc.setState(0x75a3, 0x9e4a, 0xdb60, 0x35b0, 0xe6a9, 0x987b, 0x1, 0x0);
        gbc.writeMem(0x75a3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x9e4a, gbc.sp());
        EXPECT(0x75a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 039F
        gbc.setState(0x5684, 0x9ba5, 0xf380, 0x5f28, 0x60b7, 0xf9e, 0x0, 0x1);
        gbc.writeMem(0x5684, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x9ba5, gbc.sp());
        EXPECT(0x5686, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03A0
        gbc.setState(0xe3f, 0xf683, 0xb900, 0xd1fa, 0x1268, 0x7c76, 0x0, 0x1);
        gbc.writeMem(0xe3f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xf683, gbc.sp());
        EXPECT(0xe41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03A2
        gbc.setState(0xcf6a, 0x2d90, 0x67a0, 0xfad4, 0xf7b8, 0x3c25, 0x0, 0x0);
        gbc.writeMem(0xcf6a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x2d90, gbc.sp());
        EXPECT(0xcf6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf6a));
        EXPECT(0x8d, gbc.readMem(0xcf6b));
        // CB 8D 03A3
        gbc.setState(0xbec0, 0x34dc, 0x7bb0, 0x72e2, 0x6398, 0x11c0, 0x0, 0x0);
        gbc.writeMem(0xbec0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x34dc, gbc.sp());
        EXPECT(0xbec2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbec0));
        EXPECT(0x8d, gbc.readMem(0xbec1));
        // CB 8D 03A4
        gbc.setState(0x5a0, 0x8b8a, 0x5740, 0xd70d, 0xd775, 0x8f39, 0x1, 0x1);
        gbc.writeMem(0x5a0, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x8b8a, gbc.sp());
        EXPECT(0x5a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03A5
        gbc.setState(0x2d6e, 0xf5d5, 0x6e60, 0x85d, 0xdb05, 0x302c, 0x0, 0x0);
        gbc.writeMem(0x2d6e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xf5d5, gbc.sp());
        EXPECT(0x2d70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03A6
        gbc.setState(0x4992, 0xe890, 0x8670, 0x3f3b, 0x29a4, 0x2ff5, 0x0, 0x1);
        gbc.writeMem(0x4992, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xe890, gbc.sp());
        EXPECT(0x4994, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03A7
        gbc.setState(0x299f, 0x97bc, 0xf000, 0xad4d, 0x485b, 0x406a, 0x0, 0x1);
        gbc.writeMem(0x299f, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x97bc, gbc.sp());
        EXPECT(0x29a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03A8
        gbc.setState(0xabf9, 0x9b20, 0x7530, 0x547a, 0xcd45, 0x9a74, 0x1, 0x0);
        gbc.writeMem(0xabf9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x9b20, gbc.sp());
        EXPECT(0xabfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabf9));
        EXPECT(0x8d, gbc.readMem(0xabfa));
        // CB 8D 03A9
        gbc.setState(0xbad6, 0x94a3, 0xa610, 0xa646, 0xddaf, 0x3d0e, 0x0, 0x0);
        gbc.writeMem(0xbad6, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x94a3, gbc.sp());
        EXPECT(0xbad8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbad6));
        EXPECT(0x8d, gbc.readMem(0xbad7));
        // CB 8D 03AA
        gbc.setState(0x6744, 0xd342, 0xc3a0, 0x3667, 0x3da9, 0xd2a4, 0x0, 0x1);
        gbc.writeMem(0x6744, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xd342, gbc.sp());
        EXPECT(0x6746, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03AC
        gbc.setState(0x9901, 0x5688, 0x26e0, 0x5f6c, 0xed5d, 0xdf2b, 0x0, 0x1);
        gbc.writeMem(0x9901, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x5688, gbc.sp());
        EXPECT(0x9903, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9901));
        EXPECT(0x8d, gbc.readMem(0x9902));
        // CB 8D 03AD
        gbc.setState(0x3e1e, 0xf0a9, 0x8420, 0x70be, 0xbb0c, 0x93b0, 0x0, 0x0);
        gbc.writeMem(0x3e1e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xf0a9, gbc.sp());
        EXPECT(0x3e20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03AE
        gbc.setState(0x569, 0xcfc2, 0x5390, 0xc95a, 0x16b, 0x3be4, 0x0, 0x1);
        gbc.writeMem(0x569, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xcfc2, gbc.sp());
        EXPECT(0x56b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03AF
        gbc.setState(0x48d9, 0x7113, 0x1f90, 0x332b, 0xd6ec, 0xf92c, 0x1, 0x1);
        gbc.writeMem(0x48d9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x7113, gbc.sp());
        EXPECT(0x48db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03B0
        gbc.setState(0x5b, 0x9a39, 0x7d00, 0xcaa5, 0x703b, 0x154d, 0x1, 0x1);
        gbc.writeMem(0x5b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x9a39, gbc.sp());
        EXPECT(0x5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03B1
        gbc.setState(0xb16b, 0x3a2e, 0x51f0, 0xa44a, 0x617e, 0xdbcb, 0x0, 0x0);
        gbc.writeMem(0xb16b, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x3a2e, gbc.sp());
        EXPECT(0xb16d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb16b));
        EXPECT(0x8d, gbc.readMem(0xb16c));
        // CB 8D 03B2
        gbc.setState(0x7c2, 0x18c0, 0x4920, 0xb247, 0xc64, 0x75d0, 0x0, 0x0);
        gbc.writeMem(0x7c2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x18c0, gbc.sp());
        EXPECT(0x7c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03B3
        gbc.setState(0xab94, 0x4362, 0x1b20, 0x54d0, 0xfe88, 0xb7b2, 0x0, 0x1);
        gbc.writeMem(0xab94, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x4362, gbc.sp());
        EXPECT(0xab96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab94));
        EXPECT(0x8d, gbc.readMem(0xab95));
        // CB 8D 03B4
        gbc.setState(0x8ea3, 0x2e4e, 0x1e0, 0x1db6, 0x6a26, 0xce7c, 0x0, 0x1);
        gbc.writeMem(0x8ea3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x2e4e, gbc.sp());
        EXPECT(0x8ea5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ea3));
        EXPECT(0x8d, gbc.readMem(0x8ea4));
        // CB 8D 03B5
        gbc.setState(0xe696, 0xf588, 0x6c10, 0x51da, 0xc062, 0x6a1e, 0x1, 0x1);
        gbc.writeMem(0xe696, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xf588, gbc.sp());
        EXPECT(0xe698, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe696));
        EXPECT(0x8d, gbc.readMem(0xe697));
        // CB 8D 03B6
        gbc.setState(0x5ad3, 0x23d9, 0xc360, 0x15b9, 0x2c0e, 0x6347, 0x1, 0x0);
        gbc.writeMem(0x5ad3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x23d9, gbc.sp());
        EXPECT(0x5ad5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03B7
        gbc.setState(0x999d, 0x4f8, 0x7b90, 0x42d1, 0x7566, 0xb9bb, 0x0, 0x1);
        gbc.writeMem(0x999d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x4f8, gbc.sp());
        EXPECT(0x999f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x999d));
        EXPECT(0x8d, gbc.readMem(0x999e));
        // CB 8D 03B8
        gbc.setState(0xa4ab, 0xda64, 0xa240, 0xe9e8, 0x634e, 0x8a5e, 0x0, 0x0);
        gbc.writeMem(0xa4ab, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xda64, gbc.sp());
        EXPECT(0xa4ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4ab));
        EXPECT(0x8d, gbc.readMem(0xa4ac));
        // CB 8D 03B9
        gbc.setState(0x8a63, 0x772b, 0x5d90, 0xa8a9, 0xfa8e, 0x9d2f, 0x0, 0x0);
        gbc.writeMem(0x8a63, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x772b, gbc.sp());
        EXPECT(0x8a65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a63));
        EXPECT(0x8d, gbc.readMem(0x8a64));
        // CB 8D 03BA
        gbc.setState(0x1399, 0xc385, 0x2cb0, 0x67d0, 0x3744, 0xf9a9, 0x0, 0x0);
        gbc.writeMem(0x1399, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xc385, gbc.sp());
        EXPECT(0x139b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03BB
        gbc.setState(0x3c99, 0x5184, 0xa940, 0x68e, 0x3cc6, 0x7b17, 0x1, 0x0);
        gbc.writeMem(0x3c99, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x5184, gbc.sp());
        EXPECT(0x3c9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03BC
        gbc.setState(0xc30a, 0x473d, 0x82a0, 0xbba, 0x573, 0x62e1, 0x0, 0x1);
        gbc.writeMem(0xc30a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x473d, gbc.sp());
        EXPECT(0xc30c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc30a));
        EXPECT(0x8d, gbc.readMem(0xc30b));
        // CB 8D 03BD
        gbc.setState(0x3ebf, 0xa2aa, 0x2820, 0x4d99, 0xca9c, 0xe7ea, 0x0, 0x1);
        gbc.writeMem(0x3ebf, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xa2aa, gbc.sp());
        EXPECT(0x3ec1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03BE
        gbc.setState(0x25d2, 0x9542, 0x3c10, 0x3892, 0xe273, 0x9d1e, 0x1, 0x1);
        gbc.writeMem(0x25d2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x9542, gbc.sp());
        EXPECT(0x25d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03BF
        gbc.setState(0xa16e, 0xfa0f, 0x2070, 0xf684, 0xfbd1, 0xfeaa, 0x0, 0x0);
        gbc.writeMem(0xa16e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xfa0f, gbc.sp());
        EXPECT(0xa170, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa16e));
        EXPECT(0x8d, gbc.readMem(0xa16f));
        // CB 8D 03C0
        gbc.setState(0x43f3, 0xcfe5, 0x7150, 0x6e01, 0x8dd9, 0x2212, 0x1, 0x0);
        gbc.writeMem(0x43f3, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xcfe5, gbc.sp());
        EXPECT(0x43f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03C1
        gbc.setState(0x1cd8, 0x5ab, 0x2d20, 0x35a8, 0x8486, 0x6961, 0x0, 0x0);
        gbc.writeMem(0x1cd8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x5ab, gbc.sp());
        EXPECT(0x1cda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03C2
        gbc.setState(0x2b9a, 0x53e3, 0xa8a0, 0x9348, 0x73d1, 0x7517, 0x0, 0x0);
        gbc.writeMem(0x2b9a, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x53e3, gbc.sp());
        EXPECT(0x2b9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03C3
        gbc.setState(0x5a24, 0x234, 0x2e70, 0x7373, 0x9179, 0xd41b, 0x0, 0x1);
        gbc.writeMem(0x5a24, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x234, gbc.sp());
        EXPECT(0x5a26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03C4
        gbc.setState(0xa1cb, 0x5391, 0x3d0, 0x853, 0xb918, 0xfe41, 0x0, 0x0);
        gbc.writeMem(0xa1cb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x5391, gbc.sp());
        EXPECT(0xa1cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1cb));
        EXPECT(0x8d, gbc.readMem(0xa1cc));
        // CB 8D 03C5
        gbc.setState(0x22fa, 0x96ea, 0xe390, 0x29eb, 0x144b, 0xb795, 0x0, 0x0);
        gbc.writeMem(0x22fa, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x96ea, gbc.sp());
        EXPECT(0x22fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03C6
        gbc.setState(0x4d27, 0xbdc7, 0x8850, 0x3552, 0x8866, 0xe8b6, 0x0, 0x1);
        gbc.writeMem(0x4d27, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xbdc7, gbc.sp());
        EXPECT(0x4d29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03C7
        gbc.setState(0x70fb, 0x29bf, 0x17c0, 0xff06, 0xde3d, 0x14af, 0x0, 0x1);
        gbc.writeMem(0x70fb, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x29bf, gbc.sp());
        EXPECT(0x70fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03C8
        gbc.setState(0x2154, 0x7b7c, 0x2d0, 0x5e2, 0xdeb8, 0xccbe, 0x0, 0x0);
        gbc.writeMem(0x2154, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x7b7c, gbc.sp());
        EXPECT(0x2156, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03C9
        gbc.setState(0x1129, 0xb850, 0x410, 0xcde2, 0x3a1d, 0xc8ae, 0x0, 0x0);
        gbc.writeMem(0x1129, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xb850, gbc.sp());
        EXPECT(0x112b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03CA
        gbc.setState(0x9315, 0xb8a9, 0xf910, 0x2d0b, 0xcbd2, 0x230e, 0x0, 0x0);
        gbc.writeMem(0x9315, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xb8a9, gbc.sp());
        EXPECT(0x9317, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9315));
        EXPECT(0x8d, gbc.readMem(0x9316));
        // CB 8D 03CB
        gbc.setState(0xc32d, 0xa52, 0xff40, 0x5a56, 0xd67b, 0x81c6, 0x0, 0x0);
        gbc.writeMem(0xc32d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xa52, gbc.sp());
        EXPECT(0xc32f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc32d));
        EXPECT(0x8d, gbc.readMem(0xc32e));
        // CB 8D 03CC
        gbc.setState(0xab60, 0x98cd, 0x5680, 0x98c5, 0x1a3a, 0xe729, 0x0, 0x0);
        gbc.writeMem(0xab60, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x98cd, gbc.sp());
        EXPECT(0xab62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab60));
        EXPECT(0x8d, gbc.readMem(0xab61));
        // CB 8D 03CD
        gbc.setState(0x2020, 0x1661, 0x8ba0, 0xa533, 0xeae1, 0x29d9, 0x1, 0x1);
        gbc.writeMem(0x2020, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x1661, gbc.sp());
        EXPECT(0x2022, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03CE
        gbc.setState(0x91e7, 0x58b8, 0xe690, 0x480c, 0x975a, 0xc5f9, 0x0, 0x1);
        gbc.writeMem(0x91e7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x58b8, gbc.sp());
        EXPECT(0x91e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91e7));
        EXPECT(0x8d, gbc.readMem(0x91e8));
        // CB 8D 03CF
        gbc.setState(0xdd80, 0x7a2e, 0x7970, 0x8282, 0x5d4d, 0x11c0, 0x0, 0x1);
        gbc.writeMem(0xdd80, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x7a2e, gbc.sp());
        EXPECT(0xdd82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd80));
        EXPECT(0x8d, gbc.readMem(0xdd81));
        // CB 8D 03D0
        gbc.setState(0x11a5, 0xa645, 0x9ef0, 0x47a7, 0xadb8, 0x31a2, 0x1, 0x1);
        gbc.writeMem(0x11a5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xa645, gbc.sp());
        EXPECT(0x11a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03D1
        gbc.setState(0xb0e5, 0x2d44, 0xcc10, 0x731, 0x4594, 0x75e9, 0x1, 0x0);
        gbc.writeMem(0xb0e5, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x2d44, gbc.sp());
        EXPECT(0xb0e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0e5));
        EXPECT(0x8d, gbc.readMem(0xb0e6));
        // CB 8D 03D2
        gbc.setState(0x6ed7, 0xdd05, 0x7dc0, 0xc9d3, 0xbf48, 0x62ff, 0x0, 0x0);
        gbc.writeMem(0x6ed7, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xdd05, gbc.sp());
        EXPECT(0x6ed9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03D3
        gbc.setState(0xab22, 0x88b1, 0x72a0, 0x1ff4, 0x16c9, 0x3a59, 0x0, 0x0);
        gbc.writeMem(0xab22, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x88b1, gbc.sp());
        EXPECT(0xab24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab22));
        EXPECT(0x8d, gbc.readMem(0xab23));
        // CB 8D 03D4
        gbc.setState(0xdd31, 0x881a, 0x9f50, 0x58c7, 0x6515, 0xc8e9, 0x1, 0x0);
        gbc.writeMem(0xdd31, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x881a, gbc.sp());
        EXPECT(0xdd33, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd31));
        EXPECT(0x8d, gbc.readMem(0xdd32));
        // CB 8D 03D5
        gbc.setState(0xc6fa, 0x3d4b, 0x41e0, 0x70bc, 0xf2df, 0xdb81, 0x0, 0x1);
        gbc.writeMem(0xc6fa, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x3d4b, gbc.sp());
        EXPECT(0xc6fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6fa));
        EXPECT(0x8d, gbc.readMem(0xc6fb));
        // CB 8D 03D6
        gbc.setState(0xec79, 0x746d, 0xaa10, 0xb204, 0xc322, 0xf42e, 0x0, 0x0);
        gbc.writeMem(0xec79, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x746d, gbc.sp());
        EXPECT(0xec7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec79));
        EXPECT(0x8d, gbc.readMem(0xec7a));
        // CB 8D 03D7
        gbc.setState(0x810d, 0xafa4, 0x5e80, 0xc386, 0x652f, 0x87c7, 0x0, 0x1);
        gbc.writeMem(0x810d, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xafa4, gbc.sp());
        EXPECT(0x810f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x810d));
        EXPECT(0x8d, gbc.readMem(0x810e));
        // CB 8D 03D8
        gbc.setState(0x97ae, 0xc3ab, 0x9cf0, 0xd085, 0x2ccb, 0xa79a, 0x1, 0x0);
        gbc.writeMem(0x97ae, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xc3ab, gbc.sp());
        EXPECT(0x97b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97ae));
        EXPECT(0x8d, gbc.readMem(0x97af));
        // CB 8D 03D9
        gbc.setState(0x7b85, 0x9e80, 0x4fc0, 0x8174, 0x736b, 0xc4fa, 0x1, 0x1);
        gbc.writeMem(0x7b85, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x9e80, gbc.sp());
        EXPECT(0x7b87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03DA
        gbc.setState(0x8bb8, 0x6a85, 0x90d0, 0x5a58, 0x294a, 0xb2af, 0x0, 0x0);
        gbc.writeMem(0x8bb8, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x6a85, gbc.sp());
        EXPECT(0x8bba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bb8));
        EXPECT(0x8d, gbc.readMem(0x8bb9));
        // CB 8D 03DB
        gbc.setState(0x2f93, 0x1034, 0xb6b0, 0xb316, 0x7cb0, 0x3759, 0x0, 0x1);
        gbc.writeMem(0x2f93, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x1034, gbc.sp());
        EXPECT(0x2f95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03DC
        gbc.setState(0xca44, 0x6be0, 0xdc70, 0x4548, 0xa27b, 0xe42a, 0x0, 0x1);
        gbc.writeMem(0xca44, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x6be0, gbc.sp());
        EXPECT(0xca46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca44));
        EXPECT(0x8d, gbc.readMem(0xca45));
        // CB 8D 03DD
        gbc.setState(0x9a94, 0xa66c, 0x860, 0x7718, 0xfc18, 0xbf09, 0x1, 0x0);
        gbc.writeMem(0x9a94, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xa66c, gbc.sp());
        EXPECT(0x9a96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a94));
        EXPECT(0x8d, gbc.readMem(0x9a95));
        // CB 8D 03DE
        gbc.setState(0x4023, 0xcac0, 0x38e0, 0x92eb, 0xd72, 0xfdf7, 0x0, 0x1);
        gbc.writeMem(0x4023, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xcac0, gbc.sp());
        EXPECT(0x4025, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03DF
        gbc.setState(0xd4a2, 0x2008, 0x8e20, 0xc967, 0x13ba, 0x9e59, 0x1, 0x0);
        gbc.writeMem(0xd4a2, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x2008, gbc.sp());
        EXPECT(0xd4a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4a2));
        EXPECT(0x8d, gbc.readMem(0xd4a3));
        // CB 8D 03E0
        gbc.setState(0xb21, 0x6620, 0xbfd0, 0x99d7, 0xb386, 0x9a93, 0x1, 0x0);
        gbc.writeMem(0xb21, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x6620, gbc.sp());
        EXPECT(0xb23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03E1
        gbc.setState(0x4820, 0xdfd6, 0xa2c0, 0xe9b8, 0x1cf5, 0x9375, 0x0, 0x1);
        gbc.writeMem(0x4820, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xdfd6, gbc.sp());
        EXPECT(0x4822, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03E2
        gbc.setState(0xb157, 0x158f, 0x9c70, 0xb58b, 0x4d9e, 0x8a77, 0x1, 0x0);
        gbc.writeMem(0xb157, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x158f, gbc.sp());
        EXPECT(0xb159, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb157));
        EXPECT(0x8d, gbc.readMem(0xb158));
        // CB 8D 03E3
        gbc.setState(0x17d9, 0x8bc5, 0x48f0, 0xddac, 0xf57e, 0xf780, 0x0, 0x0);
        gbc.writeMem(0x17d9, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x8bc5, gbc.sp());
        EXPECT(0x17db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8D 03E4
        gbc.setState(0x18ef, 0x8eb3, 0x5920, 0xafb9, 0xc3f7, 0xa7f5, 0x1, 0x0);
        gbc.writeMem(0x18ef, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x8eb3, gbc.sp());
        EXPECT(0x18f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03E5
        gbc.setState(0x4b76, 0x9e89, 0xc180, 0x1e3b, 0x8d5f, 0xa4cf, 0x0, 0x1);
        gbc.writeMem(0x4b76, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x9e89, gbc.sp());
        EXPECT(0x4b78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8D 03E6
        gbc.setState(0xda4e, 0xa42d, 0xd150, 0xe7fe, 0x3d1c, 0xa47d, 0x1, 0x1);
        gbc.writeMem(0xda4e, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xa42d, gbc.sp());
        EXPECT(0xda50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda4e));
        EXPECT(0x8d, gbc.readMem(0xda4f));
        // CB 8D 03E7
        gbc.setState(0x8c41, 0xc6ef, 0x1dc0, 0x383a, 0x8c7e, 0x7b6e, 0x0, 0x0);
        gbc.writeMem(0x8c41, { 0xcb, 0x8d });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xc6ef, gbc.sp());
        EXPECT(0x8c43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c41));
        EXPECT(0x8d, gbc.readMem(0x8c42));
    }
