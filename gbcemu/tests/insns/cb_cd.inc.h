    TEST(gbcemu, opcode_cb_cd) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB CD 0000
        gbc.setState(0x6a6e, 0x8ab9, 0x3a70, 0x99c3, 0x8acf, 0xc1e, 0x0, 0x0);
        gbc.writeMem(0x6a6e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x8ab9, gbc.sp());
        EXPECT(0x6a70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0001
        gbc.setState(0x7a64, 0x95f6, 0x6230, 0x3914, 0x4fb, 0x825a, 0x0, 0x1);
        gbc.writeMem(0x7a64, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x95f6, gbc.sp());
        EXPECT(0x7a66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0002
        gbc.setState(0xbfa2, 0x6496, 0x5a80, 0xcae5, 0x8a4f, 0xca4c, 0x1, 0x1);
        gbc.writeMem(0xbfa2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x6496, gbc.sp());
        EXPECT(0xbfa4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfa2));
        EXPECT(0xcd, gbc.readMem(0xbfa3));
        // CB CD 0003
        gbc.setState(0x3440, 0x7ac9, 0x4540, 0x8bb0, 0x66cf, 0xec7e, 0x1, 0x0);
        gbc.writeMem(0x3440, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x7ac9, gbc.sp());
        EXPECT(0x3442, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0004
        gbc.setState(0xaaed, 0x2d4d, 0xfaa0, 0x3f25, 0x2313, 0x1680, 0x0, 0x0);
        gbc.writeMem(0xaaed, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x2d4d, gbc.sp());
        EXPECT(0xaaef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaaed));
        EXPECT(0xcd, gbc.readMem(0xaaee));
        // CB CD 0005
        gbc.setState(0xef25, 0x7af9, 0x9070, 0x5732, 0x94ac, 0xbac5, 0x0, 0x0);
        gbc.writeMem(0xef25, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x7af9, gbc.sp());
        EXPECT(0xef27, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef25));
        EXPECT(0xcd, gbc.readMem(0xef26));
        // CB CD 0006
        gbc.setState(0xb468, 0x5d04, 0x8f30, 0xf1d8, 0x817c, 0x68c2, 0x0, 0x1);
        gbc.writeMem(0xb468, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x5d04, gbc.sp());
        EXPECT(0xb46a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb468));
        EXPECT(0xcd, gbc.readMem(0xb469));
        // CB CD 0007
        gbc.setState(0x728a, 0x6a87, 0xe510, 0xa40, 0xa22f, 0x9a57, 0x1, 0x0);
        gbc.writeMem(0x728a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x6a87, gbc.sp());
        EXPECT(0x728c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0008
        gbc.setState(0x4c02, 0x20fe, 0x3250, 0xe295, 0x1a76, 0xd966, 0x1, 0x1);
        gbc.writeMem(0x4c02, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x20fe, gbc.sp());
        EXPECT(0x4c04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0009
        gbc.setState(0x54bf, 0x3a7d, 0x1b10, 0x725a, 0xf1af, 0x6fa0, 0x1, 0x0);
        gbc.writeMem(0x54bf, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x3a7d, gbc.sp());
        EXPECT(0x54c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 000A
        gbc.setState(0xda7a, 0xce47, 0x4140, 0x2d76, 0x4a98, 0xfc4d, 0x1, 0x0);
        gbc.writeMem(0xda7a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xce47, gbc.sp());
        EXPECT(0xda7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda7a));
        EXPECT(0xcd, gbc.readMem(0xda7b));
        // CB CD 000B
        gbc.setState(0xcafa, 0x5ffd, 0x3140, 0xf33e, 0xeeef, 0xf32f, 0x0, 0x1);
        gbc.writeMem(0xcafa, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x5ffd, gbc.sp());
        EXPECT(0xcafc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcafa));
        EXPECT(0xcd, gbc.readMem(0xcafb));
        // CB CD 000C
        gbc.setState(0x50d3, 0xac00, 0xe030, 0xea3e, 0x351a, 0x7c1c, 0x0, 0x0);
        gbc.writeMem(0x50d3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xac00, gbc.sp());
        EXPECT(0x50d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 000E
        gbc.setState(0x54e9, 0x224d, 0xf720, 0x5754, 0xbaeb, 0x88fa, 0x0, 0x0);
        gbc.writeMem(0x54e9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x224d, gbc.sp());
        EXPECT(0x54eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 000F
        gbc.setState(0x8826, 0x8503, 0x3310, 0xa865, 0xc90d, 0x5a22, 0x1, 0x0);
        gbc.writeMem(0x8826, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x8503, gbc.sp());
        EXPECT(0x8828, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8826));
        EXPECT(0xcd, gbc.readMem(0x8827));
        // CB CD 0010
        gbc.setState(0x2436, 0x985f, 0x1f00, 0x7684, 0xf05e, 0xdc05, 0x0, 0x0);
        gbc.writeMem(0x2436, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x985f, gbc.sp());
        EXPECT(0x2438, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0011
        gbc.setState(0xc5c7, 0x22c4, 0x26c0, 0xf198, 0x1210, 0xd8a2, 0x1, 0x1);
        gbc.writeMem(0xc5c7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x22c4, gbc.sp());
        EXPECT(0xc5c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5c7));
        EXPECT(0xcd, gbc.readMem(0xc5c8));
        // CB CD 0012
        gbc.setState(0x3c53, 0x7a9f, 0x470, 0x1e08, 0xa60d, 0x1b0e, 0x1, 0x0);
        gbc.writeMem(0x3c53, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x7a9f, gbc.sp());
        EXPECT(0x3c55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0013
        gbc.setState(0xc7b2, 0x7a52, 0x2c80, 0x77df, 0x2d89, 0xf94d, 0x0, 0x1);
        gbc.writeMem(0xc7b2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x7a52, gbc.sp());
        EXPECT(0xc7b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7b2));
        EXPECT(0xcd, gbc.readMem(0xc7b3));
        // CB CD 0014
        gbc.setState(0x5696, 0x1c35, 0xeb70, 0x748e, 0x4f15, 0x4ffd, 0x1, 0x0);
        gbc.writeMem(0x5696, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x1c35, gbc.sp());
        EXPECT(0x5698, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0015
        gbc.setState(0x9f41, 0xa468, 0x4e20, 0xeddf, 0xc052, 0xec31, 0x0, 0x0);
        gbc.writeMem(0x9f41, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xa468, gbc.sp());
        EXPECT(0x9f43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f41));
        EXPECT(0xcd, gbc.readMem(0x9f42));
        // CB CD 0016
        gbc.setState(0x1a6f, 0x45e5, 0xc250, 0x922a, 0x418f, 0xb509, 0x0, 0x1);
        gbc.writeMem(0x1a6f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x45e5, gbc.sp());
        EXPECT(0x1a71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0017
        gbc.setState(0xcc82, 0x24f3, 0x43e0, 0x4c84, 0x9ed7, 0x5c6a, 0x1, 0x1);
        gbc.writeMem(0xcc82, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x24f3, gbc.sp());
        EXPECT(0xcc84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc82));
        EXPECT(0xcd, gbc.readMem(0xcc83));
        // CB CD 0018
        gbc.setState(0xc64e, 0xbfa5, 0xd9f0, 0xcfd6, 0x80e3, 0x36d9, 0x1, 0x1);
        gbc.writeMem(0xc64e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xbfa5, gbc.sp());
        EXPECT(0xc650, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc64e));
        EXPECT(0xcd, gbc.readMem(0xc64f));
        // CB CD 0019
        gbc.setState(0x8a18, 0xf733, 0x6540, 0x43ec, 0x2d26, 0xc5c5, 0x1, 0x0);
        gbc.writeMem(0x8a18, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xf733, gbc.sp());
        EXPECT(0x8a1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a18));
        EXPECT(0xcd, gbc.readMem(0x8a19));
        // CB CD 001A
        gbc.setState(0x2b22, 0x334e, 0x9770, 0x652c, 0x2207, 0xd848, 0x1, 0x1);
        gbc.writeMem(0x2b22, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x334e, gbc.sp());
        EXPECT(0x2b24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 001B
        gbc.setState(0x2c8f, 0xc5f, 0x4d10, 0xc6b9, 0xc879, 0xc9f1, 0x0, 0x1);
        gbc.writeMem(0x2c8f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xc5f, gbc.sp());
        EXPECT(0x2c91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 001C
        gbc.setState(0x324c, 0xd66, 0xf0f0, 0xe327, 0xfdcc, 0x692c, 0x1, 0x0);
        gbc.writeMem(0x324c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xd66, gbc.sp());
        EXPECT(0x324e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 001D
        gbc.setState(0x3f50, 0x52f9, 0xe510, 0x2bf6, 0x23b7, 0x1fbf, 0x1, 0x0);
        gbc.writeMem(0x3f50, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x52f9, gbc.sp());
        EXPECT(0x3f52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 001E
        gbc.setState(0x5359, 0x8b3e, 0x79b0, 0xa1b5, 0x4048, 0xba1c, 0x1, 0x1);
        gbc.writeMem(0x5359, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x8b3e, gbc.sp());
        EXPECT(0x535b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 001F
        gbc.setState(0x257e, 0x3dd0, 0x540, 0x981d, 0xd6ba, 0xf145, 0x1, 0x0);
        gbc.writeMem(0x257e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x3dd0, gbc.sp());
        EXPECT(0x2580, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0020
        gbc.setState(0x9124, 0x71e3, 0x9020, 0x9dbe, 0x4b85, 0x762b, 0x0, 0x1);
        gbc.writeMem(0x9124, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x71e3, gbc.sp());
        EXPECT(0x9126, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9124));
        EXPECT(0xcd, gbc.readMem(0x9125));
        // CB CD 0021
        gbc.setState(0xe9b9, 0xdfa2, 0xfcc0, 0x83a0, 0xa008, 0x1c5f, 0x0, 0x1);
        gbc.writeMem(0xe9b9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xdfa2, gbc.sp());
        EXPECT(0xe9bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9b9));
        EXPECT(0xcd, gbc.readMem(0xe9ba));
        // CB CD 0022
        gbc.setState(0x3e1b, 0xd8cb, 0xd040, 0x1822, 0x8550, 0x6e67, 0x1, 0x1);
        gbc.writeMem(0x3e1b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xd8cb, gbc.sp());
        EXPECT(0x3e1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0023
        gbc.setState(0x6865, 0x5f24, 0x4ea0, 0x8bb, 0xc265, 0x86c1, 0x1, 0x0);
        gbc.writeMem(0x6865, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x5f24, gbc.sp());
        EXPECT(0x6867, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0024
        gbc.setState(0x4a10, 0xf909, 0x3a30, 0x7b65, 0x6dd8, 0x60e5, 0x1, 0x0);
        gbc.writeMem(0x4a10, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xf909, gbc.sp());
        EXPECT(0x4a12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0025
        gbc.setState(0xd580, 0xfe23, 0x9a50, 0xe1e0, 0x4515, 0x831d, 0x0, 0x0);
        gbc.writeMem(0xd580, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xfe23, gbc.sp());
        EXPECT(0xd582, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd580));
        EXPECT(0xcd, gbc.readMem(0xd581));
        // CB CD 0026
        gbc.setState(0x4f6a, 0x43e7, 0x78d0, 0xe7d1, 0x8940, 0x44c6, 0x1, 0x0);
        gbc.writeMem(0x4f6a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x43e7, gbc.sp());
        EXPECT(0x4f6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0027
        gbc.setState(0x154, 0x3037, 0xb660, 0x6ff8, 0xe676, 0x7d09, 0x1, 0x0);
        gbc.writeMem(0x154, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x3037, gbc.sp());
        EXPECT(0x156, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0028
        gbc.setState(0xc3bb, 0x4a2b, 0x1380, 0xd8ad, 0x500b, 0x9864, 0x1, 0x0);
        gbc.writeMem(0xc3bb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x4a2b, gbc.sp());
        EXPECT(0xc3bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3bb));
        EXPECT(0xcd, gbc.readMem(0xc3bc));
        // CB CD 0029
        gbc.setState(0x2617, 0x9b2e, 0xd20, 0x70c9, 0x9068, 0xba7e, 0x0, 0x0);
        gbc.writeMem(0x2617, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x9b2e, gbc.sp());
        EXPECT(0x2619, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 002A
        gbc.setState(0x4662, 0x2cef, 0x9cc0, 0x24d6, 0x64a2, 0x3e5b, 0x0, 0x1);
        gbc.writeMem(0x4662, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x2cef, gbc.sp());
        EXPECT(0x4664, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 002B
        gbc.setState(0xa9e8, 0x4cfe, 0x22a0, 0xcd1b, 0x6bca, 0x7155, 0x1, 0x0);
        gbc.writeMem(0xa9e8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x4cfe, gbc.sp());
        EXPECT(0xa9ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9e8));
        EXPECT(0xcd, gbc.readMem(0xa9e9));
        // CB CD 002C
        gbc.setState(0x64c5, 0xb0f4, 0xafc0, 0xa757, 0xc06a, 0x52ea, 0x0, 0x0);
        gbc.writeMem(0x64c5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xb0f4, gbc.sp());
        EXPECT(0x64c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 002D
        gbc.setState(0xe7f5, 0xcc86, 0xe1e0, 0xbff1, 0x664, 0x565f, 0x1, 0x0);
        gbc.writeMem(0xe7f5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xcc86, gbc.sp());
        EXPECT(0xe7f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7f5));
        EXPECT(0xcd, gbc.readMem(0xe7f6));
        // CB CD 002E
        gbc.setState(0x6b53, 0xd8e, 0x78e0, 0x75ed, 0x67f4, 0x1421, 0x1, 0x0);
        gbc.writeMem(0x6b53, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xd8e, gbc.sp());
        EXPECT(0x6b55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 002F
        gbc.setState(0xaea5, 0xceec, 0x9e50, 0x1d1e, 0x9731, 0xabd0, 0x1, 0x1);
        gbc.writeMem(0xaea5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xceec, gbc.sp());
        EXPECT(0xaea7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaea5));
        EXPECT(0xcd, gbc.readMem(0xaea6));
        // CB CD 0030
        gbc.setState(0x82b0, 0x2159, 0xe50, 0x950, 0xedd9, 0x9047, 0x0, 0x0);
        gbc.writeMem(0x82b0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x2159, gbc.sp());
        EXPECT(0x82b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82b0));
        EXPECT(0xcd, gbc.readMem(0x82b1));
        // CB CD 0031
        gbc.setState(0xe8f0, 0x26bf, 0x6900, 0x5e09, 0x161, 0xc7c, 0x1, 0x0);
        gbc.writeMem(0xe8f0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x26bf, gbc.sp());
        EXPECT(0xe8f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8f0));
        EXPECT(0xcd, gbc.readMem(0xe8f1));
        // CB CD 0032
        gbc.setState(0xe57f, 0x863c, 0x1620, 0x9287, 0xacd9, 0x6013, 0x1, 0x0);
        gbc.writeMem(0xe57f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x863c, gbc.sp());
        EXPECT(0xe581, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe57f));
        EXPECT(0xcd, gbc.readMem(0xe580));
        // CB CD 0033
        gbc.setState(0x4d3, 0xe3dc, 0x3c90, 0xe9f4, 0x8316, 0x93d0, 0x0, 0x1);
        gbc.writeMem(0x4d3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xe3dc, gbc.sp());
        EXPECT(0x4d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0034
        gbc.setState(0xb1fa, 0x2459, 0x1710, 0xd0fb, 0x7aa3, 0x9a3c, 0x0, 0x0);
        gbc.writeMem(0xb1fa, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x2459, gbc.sp());
        EXPECT(0xb1fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1fa));
        EXPECT(0xcd, gbc.readMem(0xb1fb));
        // CB CD 0036
        gbc.setState(0xaa1d, 0x3f2b, 0x3c70, 0xc16a, 0xa2d4, 0xd2f1, 0x0, 0x0);
        gbc.writeMem(0xaa1d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x3f2b, gbc.sp());
        EXPECT(0xaa1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa1d));
        EXPECT(0xcd, gbc.readMem(0xaa1e));
        // CB CD 0037
        gbc.setState(0x1e5e, 0x79f7, 0x80e0, 0x2aad, 0xd2c1, 0xd8cb, 0x0, 0x0);
        gbc.writeMem(0x1e5e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x79f7, gbc.sp());
        EXPECT(0x1e60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0038
        gbc.setState(0xa0b8, 0x5cfb, 0x3080, 0x1013, 0x9d16, 0xb691, 0x0, 0x0);
        gbc.writeMem(0xa0b8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x5cfb, gbc.sp());
        EXPECT(0xa0ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0b8));
        EXPECT(0xcd, gbc.readMem(0xa0b9));
        // CB CD 0039
        gbc.setState(0x2aad, 0x9f26, 0xd760, 0xe016, 0x7aee, 0xcd4d, 0x0, 0x0);
        gbc.writeMem(0x2aad, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x9f26, gbc.sp());
        EXPECT(0x2aaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 003A
        gbc.setState(0x1da4, 0x1d93, 0x1690, 0xbe76, 0x7b0f, 0x6ad3, 0x0, 0x1);
        gbc.writeMem(0x1da4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x1d93, gbc.sp());
        EXPECT(0x1da6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 003B
        gbc.setState(0xd16f, 0xa1d, 0x1510, 0xc088, 0xbf51, 0xa7, 0x0, 0x1);
        gbc.writeMem(0xd16f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xa1d, gbc.sp());
        EXPECT(0xd171, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd16f));
        EXPECT(0xcd, gbc.readMem(0xd170));
        // CB CD 003C
        gbc.setState(0x8e37, 0x789b, 0x3a60, 0xa723, 0x875f, 0xa5bd, 0x1, 0x1);
        gbc.writeMem(0x8e37, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x789b, gbc.sp());
        EXPECT(0x8e39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e37));
        EXPECT(0xcd, gbc.readMem(0x8e38));
        // CB CD 003D
        gbc.setState(0x2982, 0xdba, 0x27c0, 0x7ee6, 0x4422, 0x1cfd, 0x1, 0x1);
        gbc.writeMem(0x2982, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xdba, gbc.sp());
        EXPECT(0x2984, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 003E
        gbc.setState(0x65a1, 0xb59, 0x190, 0x696, 0xae88, 0xa5cb, 0x0, 0x1);
        gbc.writeMem(0x65a1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xb59, gbc.sp());
        EXPECT(0x65a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 003F
        gbc.setState(0x2942, 0x4bb3, 0x7060, 0x80c3, 0x2b32, 0xe407, 0x0, 0x0);
        gbc.writeMem(0x2942, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x4bb3, gbc.sp());
        EXPECT(0x2944, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0040
        gbc.setState(0x3c8f, 0xdb04, 0x4760, 0xfe54, 0x6d90, 0xb932, 0x1, 0x0);
        gbc.writeMem(0x3c8f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xdb04, gbc.sp());
        EXPECT(0x3c91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0041
        gbc.setState(0x8d09, 0xdf1f, 0xa860, 0x7705, 0xa540, 0x9a6b, 0x0, 0x0);
        gbc.writeMem(0x8d09, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xdf1f, gbc.sp());
        EXPECT(0x8d0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d09));
        EXPECT(0xcd, gbc.readMem(0x8d0a));
        // CB CD 0043
        gbc.setState(0x3dfc, 0x9477, 0x19d0, 0x9072, 0x8aea, 0xa399, 0x0, 0x1);
        gbc.writeMem(0x3dfc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x9477, gbc.sp());
        EXPECT(0x3dfe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0044
        gbc.setState(0x6114, 0x42da, 0x4ad0, 0x3bd7, 0x76d9, 0x8b4a, 0x0, 0x0);
        gbc.writeMem(0x6114, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x42da, gbc.sp());
        EXPECT(0x6116, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0045
        gbc.setState(0x1cd5, 0x6d3c, 0x9b50, 0xed30, 0xb324, 0xcdfb, 0x1, 0x1);
        gbc.writeMem(0x1cd5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x6d3c, gbc.sp());
        EXPECT(0x1cd7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0047
        gbc.setState(0x9e3f, 0x868, 0x5d00, 0xa383, 0x105b, 0x3c0, 0x1, 0x0);
        gbc.writeMem(0x9e3f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x868, gbc.sp());
        EXPECT(0x9e41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e3f));
        EXPECT(0xcd, gbc.readMem(0x9e40));
        // CB CD 0048
        gbc.setState(0x32b2, 0x91fe, 0xf8c0, 0xace5, 0xba92, 0xd5da, 0x0, 0x1);
        gbc.writeMem(0x32b2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x91fe, gbc.sp());
        EXPECT(0x32b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0049
        gbc.setState(0x3e6, 0xcfa9, 0xca70, 0x4c36, 0xcde3, 0xf61a, 0x1, 0x1);
        gbc.writeMem(0x3e6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xcfa9, gbc.sp());
        EXPECT(0x3e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 004A
        gbc.setState(0x8cba, 0x6fbe, 0xe720, 0x46e2, 0x7ae5, 0x3bde, 0x1, 0x1);
        gbc.writeMem(0x8cba, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x6fbe, gbc.sp());
        EXPECT(0x8cbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cba));
        EXPECT(0xcd, gbc.readMem(0x8cbb));
        // CB CD 004B
        gbc.setState(0xc318, 0x9cca, 0x46f0, 0x8144, 0x5344, 0xc01f, 0x0, 0x1);
        gbc.writeMem(0xc318, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x9cca, gbc.sp());
        EXPECT(0xc31a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc318));
        EXPECT(0xcd, gbc.readMem(0xc319));
        // CB CD 004C
        gbc.setState(0x7d78, 0xd2e8, 0x1610, 0x4e40, 0x7a93, 0xd3f5, 0x1, 0x0);
        gbc.writeMem(0x7d78, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xd2e8, gbc.sp());
        EXPECT(0x7d7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 004D
        gbc.setState(0xcc2c, 0xbc57, 0x9f0, 0xa2cf, 0x9a9f, 0xfe81, 0x0, 0x1);
        gbc.writeMem(0xcc2c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xbc57, gbc.sp());
        EXPECT(0xcc2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc2c));
        EXPECT(0xcd, gbc.readMem(0xcc2d));
        // CB CD 004E
        gbc.setState(0x89c1, 0x496a, 0x6460, 0x30af, 0x37c2, 0x8d8b, 0x1, 0x1);
        gbc.writeMem(0x89c1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x496a, gbc.sp());
        EXPECT(0x89c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89c1));
        EXPECT(0xcd, gbc.readMem(0x89c2));
        // CB CD 004F
        gbc.setState(0xc377, 0x9173, 0xe400, 0x4d98, 0x5019, 0x3e00, 0x1, 0x0);
        gbc.writeMem(0xc377, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x9173, gbc.sp());
        EXPECT(0xc379, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc377));
        EXPECT(0xcd, gbc.readMem(0xc378));
        // CB CD 0050
        gbc.setState(0xedc9, 0x77c5, 0x6d90, 0xcf15, 0x11, 0x5dfc, 0x0, 0x1);
        gbc.writeMem(0xedc9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x77c5, gbc.sp());
        EXPECT(0xedcb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedc9));
        EXPECT(0xcd, gbc.readMem(0xedca));
        // CB CD 0051
        gbc.setState(0xe409, 0x1c90, 0x1eb0, 0x55a2, 0xde55, 0xa142, 0x0, 0x0);
        gbc.writeMem(0xe409, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x1c90, gbc.sp());
        EXPECT(0xe40b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe409));
        EXPECT(0xcd, gbc.readMem(0xe40a));
        // CB CD 0052
        gbc.setState(0xa610, 0x5308, 0x5e60, 0x90f6, 0x3c1c, 0xc32, 0x1, 0x1);
        gbc.writeMem(0xa610, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x5308, gbc.sp());
        EXPECT(0xa612, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa610));
        EXPECT(0xcd, gbc.readMem(0xa611));
        // CB CD 0053
        gbc.setState(0xc3e, 0x4588, 0x8400, 0xcd6c, 0x4975, 0x43cd, 0x0, 0x0);
        gbc.writeMem(0xc3e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x4588, gbc.sp());
        EXPECT(0xc40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0054
        gbc.setState(0x65b2, 0x7892, 0x9740, 0x9b9f, 0x4ec4, 0xd1c2, 0x0, 0x0);
        gbc.writeMem(0x65b2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x7892, gbc.sp());
        EXPECT(0x65b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0055
        gbc.setState(0x2ca6, 0xeeae, 0xabb0, 0xadce, 0x36b7, 0x99fc, 0x1, 0x1);
        gbc.writeMem(0x2ca6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xeeae, gbc.sp());
        EXPECT(0x2ca8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0056
        gbc.setState(0xbabc, 0x4d5b, 0x2220, 0x57e7, 0x9dcd, 0xcc50, 0x0, 0x1);
        gbc.writeMem(0xbabc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x4d5b, gbc.sp());
        EXPECT(0xbabe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbabc));
        EXPECT(0xcd, gbc.readMem(0xbabd));
        // CB CD 0057
        gbc.setState(0x5b42, 0xbd74, 0xb1b0, 0xd93a, 0xa8be, 0x92a2, 0x1, 0x1);
        gbc.writeMem(0x5b42, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xbd74, gbc.sp());
        EXPECT(0x5b44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0058
        gbc.setState(0x5fee, 0x3e36, 0x3430, 0xbd6, 0xe952, 0xa45a, 0x1, 0x1);
        gbc.writeMem(0x5fee, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x3e36, gbc.sp());
        EXPECT(0x5ff0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0059
        gbc.setState(0x7174, 0xebe8, 0x9d50, 0xa42b, 0xb1d, 0xf7b, 0x1, 0x0);
        gbc.writeMem(0x7174, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xebe8, gbc.sp());
        EXPECT(0x7176, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 005A
        gbc.setState(0xee37, 0xc929, 0x4bc0, 0x166a, 0x54be, 0x23c9, 0x0, 0x0);
        gbc.writeMem(0xee37, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xc929, gbc.sp());
        EXPECT(0xee39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee37));
        EXPECT(0xcd, gbc.readMem(0xee38));
        // CB CD 005B
        gbc.setState(0x238f, 0xaaf9, 0x8780, 0xa0a2, 0x8e47, 0xcb01, 0x1, 0x0);
        gbc.writeMem(0x238f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xaaf9, gbc.sp());
        EXPECT(0x2391, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 005C
        gbc.setState(0xa6f5, 0x9009, 0x6be0, 0xabfa, 0x985a, 0x115d, 0x1, 0x0);
        gbc.writeMem(0xa6f5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x9009, gbc.sp());
        EXPECT(0xa6f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6f5));
        EXPECT(0xcd, gbc.readMem(0xa6f6));
        // CB CD 005D
        gbc.setState(0x2f29, 0xaacd, 0xf920, 0x385c, 0xf7c9, 0xdf2e, 0x1, 0x1);
        gbc.writeMem(0x2f29, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xaacd, gbc.sp());
        EXPECT(0x2f2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 005E
        gbc.setState(0x9a46, 0xf15e, 0x9eb0, 0x40d9, 0xc3e1, 0x30bc, 0x0, 0x1);
        gbc.writeMem(0x9a46, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xf15e, gbc.sp());
        EXPECT(0x9a48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a46));
        EXPECT(0xcd, gbc.readMem(0x9a47));
        // CB CD 005F
        gbc.setState(0xd6e, 0x2814, 0x36f0, 0x93fd, 0x6d61, 0x819f, 0x1, 0x1);
        gbc.writeMem(0xd6e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x2814, gbc.sp());
        EXPECT(0xd70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0060
        gbc.setState(0x8373, 0xfbee, 0x6ad0, 0xb432, 0xa4d2, 0xd52a, 0x0, 0x0);
        gbc.writeMem(0x8373, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xfbee, gbc.sp());
        EXPECT(0x8375, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8373));
        EXPECT(0xcd, gbc.readMem(0x8374));
        // CB CD 0061
        gbc.setState(0xd7f5, 0xb165, 0x2530, 0xdf1d, 0xcc0, 0xb396, 0x0, 0x1);
        gbc.writeMem(0xd7f5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xb165, gbc.sp());
        EXPECT(0xd7f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7f5));
        EXPECT(0xcd, gbc.readMem(0xd7f6));
        // CB CD 0062
        gbc.setState(0x5d, 0x5092, 0xd100, 0x647a, 0x2941, 0xeda, 0x0, 0x1);
        gbc.writeMem(0x5d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x5092, gbc.sp());
        EXPECT(0x5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0063
        gbc.setState(0xc83e, 0xcac7, 0x8550, 0x9f8c, 0x6a10, 0xbbc8, 0x1, 0x1);
        gbc.writeMem(0xc83e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xcac7, gbc.sp());
        EXPECT(0xc840, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc83e));
        EXPECT(0xcd, gbc.readMem(0xc83f));
        // CB CD 0064
        gbc.setState(0xc84c, 0x491, 0x82f0, 0x883, 0xf803, 0xb21b, 0x0, 0x1);
        gbc.writeMem(0xc84c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x491, gbc.sp());
        EXPECT(0xc84e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc84c));
        EXPECT(0xcd, gbc.readMem(0xc84d));
        // CB CD 0065
        gbc.setState(0xb922, 0xb42a, 0xd730, 0x795b, 0xfbab, 0x3800, 0x0, 0x1);
        gbc.writeMem(0xb922, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xb42a, gbc.sp());
        EXPECT(0xb924, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb922));
        EXPECT(0xcd, gbc.readMem(0xb923));
        // CB CD 0066
        gbc.setState(0x7b7b, 0x6897, 0x5c40, 0x2ee5, 0xf72b, 0xd0ec, 0x1, 0x1);
        gbc.writeMem(0x7b7b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x6897, gbc.sp());
        EXPECT(0x7b7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0067
        gbc.setState(0x8c35, 0x4f51, 0x3470, 0x3d7a, 0xf747, 0x9e3e, 0x0, 0x1);
        gbc.writeMem(0x8c35, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x4f51, gbc.sp());
        EXPECT(0x8c37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c35));
        EXPECT(0xcd, gbc.readMem(0x8c36));
        // CB CD 0068
        gbc.setState(0xe7fe, 0x6423, 0xbd90, 0xfcc9, 0xa561, 0x61f2, 0x1, 0x1);
        gbc.writeMem(0xe7fe, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x6423, gbc.sp());
        EXPECT(0xe800, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7fe));
        EXPECT(0xcd, gbc.readMem(0xe7ff));
        // CB CD 006A
        gbc.setState(0x70c8, 0x9b1a, 0x1a10, 0x203d, 0x8a0b, 0x86f5, 0x1, 0x0);
        gbc.writeMem(0x70c8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x9b1a, gbc.sp());
        EXPECT(0x70ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 006B
        gbc.setState(0xbb41, 0x9259, 0x5fd0, 0xaf15, 0xcf5a, 0xdff0, 0x0, 0x0);
        gbc.writeMem(0xbb41, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x9259, gbc.sp());
        EXPECT(0xbb43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb41));
        EXPECT(0xcd, gbc.readMem(0xbb42));
        // CB CD 006C
        gbc.setState(0x290a, 0x9532, 0x8540, 0x335f, 0x2127, 0xb482, 0x0, 0x0);
        gbc.writeMem(0x290a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x9532, gbc.sp());
        EXPECT(0x290c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 006D
        gbc.setState(0x7645, 0xaee, 0xf8a0, 0xcee3, 0xfd17, 0xa80f, 0x1, 0x0);
        gbc.writeMem(0x7645, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xaee, gbc.sp());
        EXPECT(0x7647, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 006E
        gbc.setState(0xa3a7, 0x787f, 0x80c0, 0xee1b, 0x32fe, 0x5a75, 0x1, 0x0);
        gbc.writeMem(0xa3a7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x787f, gbc.sp());
        EXPECT(0xa3a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3a7));
        EXPECT(0xcd, gbc.readMem(0xa3a8));
        // CB CD 006F
        gbc.setState(0x29cd, 0xae1a, 0xec0, 0x4572, 0x4be3, 0xa93d, 0x1, 0x0);
        gbc.writeMem(0x29cd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xae1a, gbc.sp());
        EXPECT(0x29cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0070
        gbc.setState(0x21b3, 0xfdae, 0xbfc0, 0xd479, 0x8db8, 0xc7e1, 0x0, 0x0);
        gbc.writeMem(0x21b3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xfdae, gbc.sp());
        EXPECT(0x21b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0071
        gbc.setState(0xd123, 0x23c1, 0x4ad0, 0xcff7, 0xc30e, 0x89fc, 0x1, 0x0);
        gbc.writeMem(0xd123, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x23c1, gbc.sp());
        EXPECT(0xd125, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd123));
        EXPECT(0xcd, gbc.readMem(0xd124));
        // CB CD 0072
        gbc.setState(0xddf0, 0x44d0, 0x9a20, 0xad6a, 0x3989, 0x5630, 0x1, 0x0);
        gbc.writeMem(0xddf0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x44d0, gbc.sp());
        EXPECT(0xddf2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddf0));
        EXPECT(0xcd, gbc.readMem(0xddf1));
        // CB CD 0073
        gbc.setState(0x4973, 0xc28, 0x2da0, 0x3b20, 0x95b8, 0x149a, 0x0, 0x1);
        gbc.writeMem(0x4973, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xc28, gbc.sp());
        EXPECT(0x4975, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0074
        gbc.setState(0x6a46, 0x7770, 0xb840, 0xb784, 0x3488, 0x48ce, 0x0, 0x0);
        gbc.writeMem(0x6a46, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x7770, gbc.sp());
        EXPECT(0x6a48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0075
        gbc.setState(0x5bf0, 0xa0ce, 0xc440, 0x9fac, 0xbdc8, 0xc93d, 0x1, 0x0);
        gbc.writeMem(0x5bf0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xa0ce, gbc.sp());
        EXPECT(0x5bf2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0076
        gbc.setState(0xaa38, 0x30be, 0xce60, 0xd201, 0xf224, 0x7a2f, 0x1, 0x1);
        gbc.writeMem(0xaa38, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x30be, gbc.sp());
        EXPECT(0xaa3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa38));
        EXPECT(0xcd, gbc.readMem(0xaa39));
        // CB CD 0077
        gbc.setState(0xe4a0, 0x54e1, 0xdfa0, 0x29ac, 0x532a, 0xd13, 0x0, 0x1);
        gbc.writeMem(0xe4a0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x54e1, gbc.sp());
        EXPECT(0xe4a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4a0));
        EXPECT(0xcd, gbc.readMem(0xe4a1));
        // CB CD 0078
        gbc.setState(0x83a, 0xc6e5, 0xfc40, 0xefd2, 0x4c5, 0x1a33, 0x0, 0x0);
        gbc.writeMem(0x83a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xc6e5, gbc.sp());
        EXPECT(0x83c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0079
        gbc.setState(0x51f1, 0x46f1, 0xa750, 0x632, 0x9143, 0x5876, 0x0, 0x1);
        gbc.writeMem(0x51f1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x46f1, gbc.sp());
        EXPECT(0x51f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 007A
        gbc.setState(0xda85, 0x4f4b, 0xd880, 0x1dfc, 0xbf25, 0x537d, 0x0, 0x1);
        gbc.writeMem(0xda85, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x4f4b, gbc.sp());
        EXPECT(0xda87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda85));
        EXPECT(0xcd, gbc.readMem(0xda86));
        // CB CD 007B
        gbc.setState(0xc82c, 0x7aa6, 0x63c0, 0xc25a, 0xf09c, 0x4b9b, 0x1, 0x0);
        gbc.writeMem(0xc82c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x7aa6, gbc.sp());
        EXPECT(0xc82e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc82c));
        EXPECT(0xcd, gbc.readMem(0xc82d));
        // CB CD 007C
        gbc.setState(0xb479, 0x3f61, 0x3af0, 0xaed0, 0xacff, 0x9cb6, 0x1, 0x1);
        gbc.writeMem(0xb479, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x3f61, gbc.sp());
        EXPECT(0xb47b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb479));
        EXPECT(0xcd, gbc.readMem(0xb47a));
        // CB CD 007D
        gbc.setState(0xd560, 0x2836, 0xee80, 0xbab0, 0xe9d3, 0xf713, 0x0, 0x1);
        gbc.writeMem(0xd560, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x2836, gbc.sp());
        EXPECT(0xd562, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd560));
        EXPECT(0xcd, gbc.readMem(0xd561));
        // CB CD 007E
        gbc.setState(0xd6a3, 0x1a66, 0x11c0, 0xcd29, 0x6514, 0x9c2e, 0x0, 0x1);
        gbc.writeMem(0xd6a3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x1a66, gbc.sp());
        EXPECT(0xd6a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6a3));
        EXPECT(0xcd, gbc.readMem(0xd6a4));
        // CB CD 007F
        gbc.setState(0xad84, 0x749, 0xc180, 0x9258, 0xf9fc, 0x4d98, 0x1, 0x0);
        gbc.writeMem(0xad84, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x749, gbc.sp());
        EXPECT(0xad86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad84));
        EXPECT(0xcd, gbc.readMem(0xad85));
        // CB CD 0080
        gbc.setState(0xc5cc, 0x2c6d, 0x93b0, 0x55d1, 0x76c4, 0x9cab, 0x0, 0x0);
        gbc.writeMem(0xc5cc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x2c6d, gbc.sp());
        EXPECT(0xc5ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5cc));
        EXPECT(0xcd, gbc.readMem(0xc5cd));
        // CB CD 0081
        gbc.setState(0xc7db, 0xc81e, 0xd250, 0x7e33, 0x43cc, 0x47c2, 0x0, 0x0);
        gbc.writeMem(0xc7db, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xc81e, gbc.sp());
        EXPECT(0xc7dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7db));
        EXPECT(0xcd, gbc.readMem(0xc7dc));
        // CB CD 0082
        gbc.setState(0xcdaa, 0x911a, 0xcd00, 0xf9d8, 0xae12, 0xdae8, 0x1, 0x1);
        gbc.writeMem(0xcdaa, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x911a, gbc.sp());
        EXPECT(0xcdac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdaa));
        EXPECT(0xcd, gbc.readMem(0xcdab));
        // CB CD 0083
        gbc.setState(0x71f7, 0xf4c1, 0x3b0, 0xbc13, 0xee91, 0x3a4b, 0x0, 0x1);
        gbc.writeMem(0x71f7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xf4c1, gbc.sp());
        EXPECT(0x71f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0084
        gbc.setState(0xde69, 0x88e9, 0x9d60, 0xd247, 0x732a, 0x3f46, 0x0, 0x1);
        gbc.writeMem(0xde69, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x88e9, gbc.sp());
        EXPECT(0xde6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde69));
        EXPECT(0xcd, gbc.readMem(0xde6a));
        // CB CD 0085
        gbc.setState(0xb664, 0x6a78, 0xf040, 0x3d, 0x8315, 0x38a1, 0x1, 0x0);
        gbc.writeMem(0xb664, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x6a78, gbc.sp());
        EXPECT(0xb666, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb664));
        EXPECT(0xcd, gbc.readMem(0xb665));
        // CB CD 0086
        gbc.setState(0x4753, 0x9159, 0xc8c0, 0x14c4, 0x54c7, 0x39d5, 0x0, 0x0);
        gbc.writeMem(0x4753, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x9159, gbc.sp());
        EXPECT(0x4755, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0087
        gbc.setState(0x7051, 0xc84a, 0x8660, 0x741a, 0x27c1, 0x2611, 0x1, 0x1);
        gbc.writeMem(0x7051, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xc84a, gbc.sp());
        EXPECT(0x7053, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0088
        gbc.setState(0x74fd, 0x3a04, 0x2dd0, 0x7e1c, 0xa3bd, 0xedef, 0x1, 0x0);
        gbc.writeMem(0x74fd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x3a04, gbc.sp());
        EXPECT(0x74ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0089
        gbc.setState(0xc79b, 0xf632, 0xa510, 0x6ff8, 0xa16b, 0xa9f3, 0x0, 0x1);
        gbc.writeMem(0xc79b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xf632, gbc.sp());
        EXPECT(0xc79d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc79b));
        EXPECT(0xcd, gbc.readMem(0xc79c));
        // CB CD 008B
        gbc.setState(0xc7d4, 0x5f2, 0x100, 0xb5b9, 0xa14b, 0xfcbc, 0x1, 0x1);
        gbc.writeMem(0xc7d4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x5f2, gbc.sp());
        EXPECT(0xc7d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7d4));
        EXPECT(0xcd, gbc.readMem(0xc7d5));
        // CB CD 008C
        gbc.setState(0xc0c5, 0x4845, 0x47d0, 0x1ad6, 0xa981, 0x1d13, 0x0, 0x0);
        gbc.writeMem(0xc0c5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x4845, gbc.sp());
        EXPECT(0xc0c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0c5));
        EXPECT(0xcd, gbc.readMem(0xc0c6));
        // CB CD 008D
        gbc.setState(0x12b1, 0xa4b6, 0x4030, 0x6376, 0x750e, 0xe4fa, 0x0, 0x0);
        gbc.writeMem(0x12b1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xa4b6, gbc.sp());
        EXPECT(0x12b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 008E
        gbc.setState(0xda3e, 0x3b0c, 0xbe50, 0x6058, 0xff5, 0x85a0, 0x1, 0x0);
        gbc.writeMem(0xda3e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x3b0c, gbc.sp());
        EXPECT(0xda40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda3e));
        EXPECT(0xcd, gbc.readMem(0xda3f));
        // CB CD 008F
        gbc.setState(0x303b, 0x3622, 0xf290, 0xdc91, 0x45d1, 0x34bb, 0x0, 0x0);
        gbc.writeMem(0x303b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x3622, gbc.sp());
        EXPECT(0x303d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0090
        gbc.setState(0x3f4c, 0x202b, 0xc570, 0xce5d, 0x30cf, 0xb02a, 0x0, 0x1);
        gbc.writeMem(0x3f4c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x202b, gbc.sp());
        EXPECT(0x3f4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0091
        gbc.setState(0xd5d1, 0x6948, 0x48a0, 0xb73b, 0x70e, 0xe689, 0x0, 0x1);
        gbc.writeMem(0xd5d1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x6948, gbc.sp());
        EXPECT(0xd5d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5d1));
        EXPECT(0xcd, gbc.readMem(0xd5d2));
        // CB CD 0092
        gbc.setState(0xacdd, 0xc7c9, 0x50a0, 0x4756, 0x8630, 0x6d30, 0x0, 0x1);
        gbc.writeMem(0xacdd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xc7c9, gbc.sp());
        EXPECT(0xacdf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacdd));
        EXPECT(0xcd, gbc.readMem(0xacde));
        // CB CD 0093
        gbc.setState(0x3098, 0xc4, 0x7020, 0xef4c, 0xe7, 0xc20f, 0x0, 0x1);
        gbc.writeMem(0x3098, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xc4, gbc.sp());
        EXPECT(0x309a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0094
        gbc.setState(0x9f98, 0xe0dd, 0x8510, 0x1ea3, 0xe48f, 0x959f, 0x0, 0x1);
        gbc.writeMem(0x9f98, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xe0dd, gbc.sp());
        EXPECT(0x9f9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f98));
        EXPECT(0xcd, gbc.readMem(0x9f99));
        // CB CD 0095
        gbc.setState(0x2c8a, 0xff7d, 0xbae0, 0xdb97, 0x5340, 0xd60d, 0x0, 0x0);
        gbc.writeMem(0x2c8a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xff7d, gbc.sp());
        EXPECT(0x2c8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0097
        gbc.setState(0x26e0, 0x2da2, 0x41f0, 0xa7d0, 0xd5b6, 0x4689, 0x1, 0x0);
        gbc.writeMem(0x26e0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x2da2, gbc.sp());
        EXPECT(0x26e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0098
        gbc.setState(0x4a25, 0x72f1, 0x4970, 0x616e, 0xdb61, 0xca4a, 0x1, 0x0);
        gbc.writeMem(0x4a25, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x72f1, gbc.sp());
        EXPECT(0x4a27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 009A
        gbc.setState(0x3536, 0xb680, 0xaeb0, 0xe5d2, 0xf677, 0xc887, 0x0, 0x1);
        gbc.writeMem(0x3536, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xb680, gbc.sp());
        EXPECT(0x3538, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 009B
        gbc.setState(0x6023, 0x4998, 0xc920, 0xa0f5, 0x17, 0xe7da, 0x1, 0x0);
        gbc.writeMem(0x6023, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x4998, gbc.sp());
        EXPECT(0x6025, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 009C
        gbc.setState(0xb02b, 0x796d, 0x97f0, 0xbd2d, 0x6407, 0xe6fb, 0x1, 0x0);
        gbc.writeMem(0xb02b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x796d, gbc.sp());
        EXPECT(0xb02d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb02b));
        EXPECT(0xcd, gbc.readMem(0xb02c));
        // CB CD 009D
        gbc.setState(0x8b12, 0x9e36, 0x10, 0xb260, 0x6585, 0x160e, 0x0, 0x1);
        gbc.writeMem(0x8b12, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x9e36, gbc.sp());
        EXPECT(0x8b14, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b12));
        EXPECT(0xcd, gbc.readMem(0x8b13));
        // CB CD 009E
        gbc.setState(0xc546, 0xa446, 0xbc10, 0x7115, 0xabd3, 0x8bfa, 0x1, 0x0);
        gbc.writeMem(0xc546, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xa446, gbc.sp());
        EXPECT(0xc548, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc546));
        EXPECT(0xcd, gbc.readMem(0xc547));
        // CB CD 009F
        gbc.setState(0xe38f, 0x9a04, 0x7c0, 0xfbfd, 0x54bc, 0xc66e, 0x0, 0x0);
        gbc.writeMem(0xe38f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x9a04, gbc.sp());
        EXPECT(0xe391, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe38f));
        EXPECT(0xcd, gbc.readMem(0xe390));
        // CB CD 00A0
        gbc.setState(0x6579, 0x236b, 0x6d00, 0x1d43, 0x5862, 0x6eca, 0x0, 0x1);
        gbc.writeMem(0x6579, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x236b, gbc.sp());
        EXPECT(0x657b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00A1
        gbc.setState(0x4a5d, 0x250c, 0xa470, 0xd89d, 0x5f22, 0xf348, 0x0, 0x0);
        gbc.writeMem(0x4a5d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x250c, gbc.sp());
        EXPECT(0x4a5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00A2
        gbc.setState(0x2c51, 0x4514, 0xcae0, 0xe07, 0xb47d, 0xd367, 0x0, 0x1);
        gbc.writeMem(0x2c51, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x4514, gbc.sp());
        EXPECT(0x2c53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00A3
        gbc.setState(0x954f, 0x76a1, 0x8da0, 0x1361, 0x89d8, 0xed31, 0x1, 0x0);
        gbc.writeMem(0x954f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x76a1, gbc.sp());
        EXPECT(0x9551, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x954f));
        EXPECT(0xcd, gbc.readMem(0x9550));
        // CB CD 00A4
        gbc.setState(0xd500, 0x8804, 0xb610, 0x7832, 0xb8f6, 0x3f33, 0x0, 0x0);
        gbc.writeMem(0xd500, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x8804, gbc.sp());
        EXPECT(0xd502, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd500));
        EXPECT(0xcd, gbc.readMem(0xd501));
        // CB CD 00A5
        gbc.setState(0x5728, 0x262c, 0x2ce0, 0x973d, 0xe42b, 0x8b85, 0x1, 0x1);
        gbc.writeMem(0x5728, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x262c, gbc.sp());
        EXPECT(0x572a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00A6
        gbc.setState(0x6a5c, 0x6ec2, 0x15d0, 0xfc60, 0x64f8, 0xecc5, 0x1, 0x1);
        gbc.writeMem(0x6a5c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x6ec2, gbc.sp());
        EXPECT(0x6a5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00A7
        gbc.setState(0xe164, 0x6508, 0x4930, 0x780c, 0xa45d, 0xc5c, 0x0, 0x1);
        gbc.writeMem(0xe164, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x6508, gbc.sp());
        EXPECT(0xe166, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe164));
        EXPECT(0xcd, gbc.readMem(0xe165));
        // CB CD 00A8
        gbc.setState(0x2336, 0xccbb, 0x6700, 0x43fb, 0xfec9, 0xcd0e, 0x1, 0x0);
        gbc.writeMem(0x2336, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xccbb, gbc.sp());
        EXPECT(0x2338, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00A9
        gbc.setState(0x7c67, 0x52f6, 0xb180, 0x673, 0x2d5c, 0x5207, 0x0, 0x0);
        gbc.writeMem(0x7c67, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x52f6, gbc.sp());
        EXPECT(0x7c69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00AA
        gbc.setState(0x5a18, 0xcecd, 0x7340, 0x3d7d, 0xba15, 0x2c92, 0x0, 0x0);
        gbc.writeMem(0x5a18, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xcecd, gbc.sp());
        EXPECT(0x5a1a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00AB
        gbc.setState(0x730a, 0x1289, 0x8830, 0x2fbc, 0xf5de, 0x1bc5, 0x1, 0x1);
        gbc.writeMem(0x730a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x1289, gbc.sp());
        EXPECT(0x730c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00AC
        gbc.setState(0x4589, 0x7b50, 0x3f70, 0x6af1, 0x497b, 0x9661, 0x0, 0x0);
        gbc.writeMem(0x4589, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x7b50, gbc.sp());
        EXPECT(0x458b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00AD
        gbc.setState(0xb114, 0xa5f4, 0x9ef0, 0xd210, 0xa73e, 0x7702, 0x1, 0x1);
        gbc.writeMem(0xb114, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xa5f4, gbc.sp());
        EXPECT(0xb116, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb114));
        EXPECT(0xcd, gbc.readMem(0xb115));
        // CB CD 00AE
        gbc.setState(0xb895, 0x64c5, 0xc0e0, 0xdf74, 0x8668, 0x92f6, 0x0, 0x1);
        gbc.writeMem(0xb895, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x64c5, gbc.sp());
        EXPECT(0xb897, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb895));
        EXPECT(0xcd, gbc.readMem(0xb896));
        // CB CD 00AF
        gbc.setState(0x7bc7, 0xcf00, 0x78a0, 0x717d, 0x9237, 0xbb6a, 0x0, 0x0);
        gbc.writeMem(0x7bc7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xcf00, gbc.sp());
        EXPECT(0x7bc9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00B0
        gbc.setState(0xceed, 0x4eb8, 0xf170, 0xab90, 0x2091, 0xb886, 0x1, 0x1);
        gbc.writeMem(0xceed, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x4eb8, gbc.sp());
        EXPECT(0xceef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xceed));
        EXPECT(0xcd, gbc.readMem(0xceee));
        // CB CD 00B1
        gbc.setState(0x857f, 0x8ec6, 0xbc50, 0xd737, 0xfa09, 0xaacb, 0x1, 0x0);
        gbc.writeMem(0x857f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x8ec6, gbc.sp());
        EXPECT(0x8581, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x857f));
        EXPECT(0xcd, gbc.readMem(0x8580));
        // CB CD 00B2
        gbc.setState(0x6e1c, 0x771f, 0x2fa0, 0xcde3, 0x4ea8, 0x3237, 0x1, 0x0);
        gbc.writeMem(0x6e1c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x771f, gbc.sp());
        EXPECT(0x6e1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00B3
        gbc.setState(0x883e, 0xf8e9, 0x4390, 0xd05f, 0xc3fe, 0xa5be, 0x0, 0x1);
        gbc.writeMem(0x883e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xf8e9, gbc.sp());
        EXPECT(0x8840, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x883e));
        EXPECT(0xcd, gbc.readMem(0x883f));
        // CB CD 00B4
        gbc.setState(0x4fee, 0xf35f, 0x9000, 0xf4cc, 0x4dda, 0xd871, 0x1, 0x0);
        gbc.writeMem(0x4fee, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xf35f, gbc.sp());
        EXPECT(0x4ff0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00B5
        gbc.setState(0x79d5, 0xe9d1, 0x31a0, 0xfb60, 0xe933, 0x725a, 0x1, 0x0);
        gbc.writeMem(0x79d5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xe9d1, gbc.sp());
        EXPECT(0x79d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00B6
        gbc.setState(0x9ae3, 0xdef9, 0x14c0, 0x505a, 0x58c1, 0x7959, 0x1, 0x1);
        gbc.writeMem(0x9ae3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xdef9, gbc.sp());
        EXPECT(0x9ae5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ae3));
        EXPECT(0xcd, gbc.readMem(0x9ae4));
        // CB CD 00B7
        gbc.setState(0x4618, 0xe55a, 0xcf60, 0x2775, 0xea3e, 0xcdd6, 0x0, 0x0);
        gbc.writeMem(0x4618, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xe55a, gbc.sp());
        EXPECT(0x461a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00B8
        gbc.setState(0x2ef4, 0xb25f, 0xfdf0, 0x48e7, 0xbcd3, 0xc27d, 0x1, 0x1);
        gbc.writeMem(0x2ef4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xb25f, gbc.sp());
        EXPECT(0x2ef6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00B9
        gbc.setState(0x8388, 0xf46c, 0x8bf0, 0x10b4, 0x42d3, 0x6fbf, 0x0, 0x0);
        gbc.writeMem(0x8388, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xf46c, gbc.sp());
        EXPECT(0x838a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8388));
        EXPECT(0xcd, gbc.readMem(0x8389));
        // CB CD 00BA
        gbc.setState(0x55a0, 0xa949, 0x9290, 0x8dde, 0x2227, 0xb7c7, 0x1, 0x0);
        gbc.writeMem(0x55a0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xa949, gbc.sp());
        EXPECT(0x55a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00BB
        gbc.setState(0x9c81, 0xce40, 0xf1e0, 0xdccb, 0xa62, 0xf99, 0x0, 0x0);
        gbc.writeMem(0x9c81, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xce40, gbc.sp());
        EXPECT(0x9c83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c81));
        EXPECT(0xcd, gbc.readMem(0x9c82));
        // CB CD 00BC
        gbc.setState(0xeec, 0x5e64, 0x2990, 0xeb99, 0x7371, 0x9bef, 0x0, 0x1);
        gbc.writeMem(0xeec, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x5e64, gbc.sp());
        EXPECT(0xeee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00BD
        gbc.setState(0x9ecc, 0xaf75, 0x4010, 0x6724, 0xbd81, 0x1003, 0x1, 0x0);
        gbc.writeMem(0x9ecc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xaf75, gbc.sp());
        EXPECT(0x9ece, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ecc));
        EXPECT(0xcd, gbc.readMem(0x9ecd));
        // CB CD 00BE
        gbc.setState(0x715b, 0xcbca, 0x2660, 0xf0d5, 0x7c97, 0x82a8, 0x1, 0x1);
        gbc.writeMem(0x715b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xcbca, gbc.sp());
        EXPECT(0x715d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00BF
        gbc.setState(0x592a, 0x70c8, 0xe640, 0x5ff3, 0x5abe, 0xb03a, 0x1, 0x0);
        gbc.writeMem(0x592a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x70c8, gbc.sp());
        EXPECT(0x592c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00C0
        gbc.setState(0x742e, 0xb8a5, 0x8cc0, 0xa634, 0x2395, 0xc8, 0x0, 0x0);
        gbc.writeMem(0x742e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xb8a5, gbc.sp());
        EXPECT(0x7430, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00C1
        gbc.setState(0xd9f3, 0x10f7, 0x6a20, 0xb534, 0x282b, 0xbb49, 0x1, 0x1);
        gbc.writeMem(0xd9f3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x10f7, gbc.sp());
        EXPECT(0xd9f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9f3));
        EXPECT(0xcd, gbc.readMem(0xd9f4));
        // CB CD 00C2
        gbc.setState(0xa5b, 0xc254, 0x3bf0, 0x9b76, 0xf739, 0x752a, 0x1, 0x0);
        gbc.writeMem(0xa5b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xc254, gbc.sp());
        EXPECT(0xa5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00C3
        gbc.setState(0x5957, 0xcbeb, 0x7df0, 0xec, 0x5297, 0x7bce, 0x1, 0x0);
        gbc.writeMem(0x5957, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xcbeb, gbc.sp());
        EXPECT(0x5959, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00C4
        gbc.setState(0x6088, 0x915d, 0x6c80, 0x35d2, 0x841e, 0x48d, 0x1, 0x1);
        gbc.writeMem(0x6088, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x915d, gbc.sp());
        EXPECT(0x608a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00C5
        gbc.setState(0x3234, 0xc89e, 0x39e0, 0x6b05, 0xdad4, 0x291a, 0x1, 0x0);
        gbc.writeMem(0x3234, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xc89e, gbc.sp());
        EXPECT(0x3236, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00C6
        gbc.setState(0x89ac, 0xb1af, 0x8ba0, 0x8c8b, 0xc9e3, 0x6b3a, 0x0, 0x1);
        gbc.writeMem(0x89ac, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xb1af, gbc.sp());
        EXPECT(0x89ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89ac));
        EXPECT(0xcd, gbc.readMem(0x89ad));
        // CB CD 00C7
        gbc.setState(0xd2f7, 0x3219, 0x2920, 0x346e, 0x9b5c, 0xa9c1, 0x0, 0x1);
        gbc.writeMem(0xd2f7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x3219, gbc.sp());
        EXPECT(0xd2f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2f7));
        EXPECT(0xcd, gbc.readMem(0xd2f8));
        // CB CD 00C8
        gbc.setState(0x42a7, 0xea2e, 0xcff0, 0xc83, 0x4bec, 0x659f, 0x1, 0x0);
        gbc.writeMem(0x42a7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xea2e, gbc.sp());
        EXPECT(0x42a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00C9
        gbc.setState(0x2ca6, 0xf97e, 0x22b0, 0xfb1, 0xcfed, 0xf81, 0x1, 0x0);
        gbc.writeMem(0x2ca6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xf97e, gbc.sp());
        EXPECT(0x2ca8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00CA
        gbc.setState(0xb281, 0x5f6c, 0xb120, 0xaa9, 0x8e3c, 0xd31, 0x1, 0x0);
        gbc.writeMem(0xb281, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x5f6c, gbc.sp());
        EXPECT(0xb283, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb281));
        EXPECT(0xcd, gbc.readMem(0xb282));
        // CB CD 00CB
        gbc.setState(0xb435, 0x7dfd, 0x6120, 0xe069, 0x5d39, 0x2f8a, 0x0, 0x0);
        gbc.writeMem(0xb435, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x7dfd, gbc.sp());
        EXPECT(0xb437, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb435));
        EXPECT(0xcd, gbc.readMem(0xb436));
        // CB CD 00CC
        gbc.setState(0x956b, 0xd85a, 0xba0, 0xca1c, 0xaa4, 0x9f2f, 0x1, 0x0);
        gbc.writeMem(0x956b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xd85a, gbc.sp());
        EXPECT(0x956d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x956b));
        EXPECT(0xcd, gbc.readMem(0x956c));
        // CB CD 00CD
        gbc.setState(0x69b3, 0xa040, 0xb240, 0xf044, 0x4742, 0x4150, 0x1, 0x1);
        gbc.writeMem(0x69b3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xa040, gbc.sp());
        EXPECT(0x69b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00CE
        gbc.setState(0x6257, 0x3a8b, 0xbbb0, 0x7f07, 0x582, 0x9509, 0x0, 0x0);
        gbc.writeMem(0x6257, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x3a8b, gbc.sp());
        EXPECT(0x6259, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00CF
        gbc.setState(0x4e87, 0xc781, 0x1320, 0xd2a0, 0xf39c, 0x4cf1, 0x1, 0x1);
        gbc.writeMem(0x4e87, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xc781, gbc.sp());
        EXPECT(0x4e89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00D0
        gbc.setState(0xcf02, 0x4bb5, 0x150, 0xeb1, 0x145e, 0xb689, 0x0, 0x0);
        gbc.writeMem(0xcf02, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x4bb5, gbc.sp());
        EXPECT(0xcf04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf02));
        EXPECT(0xcd, gbc.readMem(0xcf03));
        // CB CD 00D1
        gbc.setState(0x3ee3, 0x6484, 0x5710, 0x2031, 0x5e73, 0xb54, 0x1, 0x0);
        gbc.writeMem(0x3ee3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x6484, gbc.sp());
        EXPECT(0x3ee5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00D2
        gbc.setState(0xb33e, 0xad4c, 0xf250, 0xb6fa, 0x6484, 0x8b50, 0x0, 0x0);
        gbc.writeMem(0xb33e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xad4c, gbc.sp());
        EXPECT(0xb340, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb33e));
        EXPECT(0xcd, gbc.readMem(0xb33f));
        // CB CD 00D3
        gbc.setState(0xb703, 0x441b, 0x2540, 0x88f6, 0x9642, 0x4ce0, 0x1, 0x1);
        gbc.writeMem(0xb703, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x441b, gbc.sp());
        EXPECT(0xb705, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb703));
        EXPECT(0xcd, gbc.readMem(0xb704));
        // CB CD 00D4
        gbc.setState(0x7246, 0xa759, 0x6b20, 0x49bd, 0x9d14, 0x761c, 0x0, 0x1);
        gbc.writeMem(0x7246, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xa759, gbc.sp());
        EXPECT(0x7248, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00D5
        gbc.setState(0x817c, 0x6781, 0x6a40, 0x3eca, 0x257, 0x220a, 0x1, 0x1);
        gbc.writeMem(0x817c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x6781, gbc.sp());
        EXPECT(0x817e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x817c));
        EXPECT(0xcd, gbc.readMem(0x817d));
        // CB CD 00D6
        gbc.setState(0x1fa1, 0x12d5, 0x6e40, 0x61f2, 0x2e28, 0x2693, 0x1, 0x0);
        gbc.writeMem(0x1fa1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x12d5, gbc.sp());
        EXPECT(0x1fa3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00D7
        gbc.setState(0xff3, 0x9eb4, 0x83d0, 0x7b9b, 0x26f, 0x9423, 0x0, 0x0);
        gbc.writeMem(0xff3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x9eb4, gbc.sp());
        EXPECT(0xff5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00D8
        gbc.setState(0xc249, 0xcf6b, 0xd150, 0xd238, 0xa0a1, 0x2142, 0x1, 0x1);
        gbc.writeMem(0xc249, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xcf6b, gbc.sp());
        EXPECT(0xc24b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc249));
        EXPECT(0xcd, gbc.readMem(0xc24a));
        // CB CD 00D9
        gbc.setState(0xc3f5, 0x375b, 0xfd20, 0xea69, 0xec6a, 0xa313, 0x1, 0x1);
        gbc.writeMem(0xc3f5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x375b, gbc.sp());
        EXPECT(0xc3f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3f5));
        EXPECT(0xcd, gbc.readMem(0xc3f6));
        // CB CD 00DA
        gbc.setState(0x12cf, 0xde06, 0xa030, 0x5bb3, 0x3762, 0x3e3c, 0x1, 0x0);
        gbc.writeMem(0x12cf, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xde06, gbc.sp());
        EXPECT(0x12d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00DB
        gbc.setState(0x73c1, 0x11d9, 0xbd20, 0x55a0, 0xbab0, 0xc422, 0x0, 0x1);
        gbc.writeMem(0x73c1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x11d9, gbc.sp());
        EXPECT(0x73c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00DC
        gbc.setState(0x5446, 0x33ec, 0x51c0, 0xf9eb, 0xa6, 0xe943, 0x1, 0x1);
        gbc.writeMem(0x5446, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x33ec, gbc.sp());
        EXPECT(0x5448, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00DE
        gbc.setState(0xa9a0, 0x3832, 0xad80, 0x8d83, 0x3ff8, 0xa294, 0x1, 0x1);
        gbc.writeMem(0xa9a0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x3832, gbc.sp());
        EXPECT(0xa9a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9a0));
        EXPECT(0xcd, gbc.readMem(0xa9a1));
        // CB CD 00DF
        gbc.setState(0x8a0a, 0x583a, 0x6e50, 0x289b, 0x38ec, 0x9315, 0x1, 0x1);
        gbc.writeMem(0x8a0a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x583a, gbc.sp());
        EXPECT(0x8a0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a0a));
        EXPECT(0xcd, gbc.readMem(0x8a0b));
        // CB CD 00E0
        gbc.setState(0x49cd, 0xe9b2, 0xf530, 0x6b89, 0x70c1, 0x23fa, 0x0, 0x1);
        gbc.writeMem(0x49cd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xe9b2, gbc.sp());
        EXPECT(0x49cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00E1
        gbc.setState(0xbec8, 0xdbc4, 0x59a0, 0xff7e, 0x947a, 0xf4e, 0x0, 0x1);
        gbc.writeMem(0xbec8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xdbc4, gbc.sp());
        EXPECT(0xbeca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbec8));
        EXPECT(0xcd, gbc.readMem(0xbec9));
        // CB CD 00E2
        gbc.setState(0xe2ff, 0x6c87, 0xfa70, 0xea7a, 0x9103, 0x4bfc, 0x0, 0x1);
        gbc.writeMem(0xe2ff, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x6c87, gbc.sp());
        EXPECT(0xe301, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2ff));
        EXPECT(0xcd, gbc.readMem(0xe300));
        // CB CD 00E3
        gbc.setState(0x70ed, 0x19af, 0xa0b0, 0x8c7d, 0xd2ec, 0xa470, 0x1, 0x1);
        gbc.writeMem(0x70ed, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x19af, gbc.sp());
        EXPECT(0x70ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00E5
        gbc.setState(0xc952, 0x1cb4, 0x45d0, 0xfd23, 0xc6f9, 0x65e4, 0x0, 0x0);
        gbc.writeMem(0xc952, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x1cb4, gbc.sp());
        EXPECT(0xc954, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc952));
        EXPECT(0xcd, gbc.readMem(0xc953));
        // CB CD 00E6
        gbc.setState(0x4064, 0x197f, 0xbdd0, 0xe9fd, 0x4f6d, 0x7b16, 0x1, 0x0);
        gbc.writeMem(0x4064, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x197f, gbc.sp());
        EXPECT(0x4066, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00E7
        gbc.setState(0xba01, 0x4d2d, 0x8b90, 0x496d, 0x4dcd, 0x75dd, 0x0, 0x0);
        gbc.writeMem(0xba01, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x4d2d, gbc.sp());
        EXPECT(0xba03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba01));
        EXPECT(0xcd, gbc.readMem(0xba02));
        // CB CD 00E8
        gbc.setState(0x9e57, 0x813a, 0xb530, 0x1cce, 0x3a01, 0x20a9, 0x0, 0x1);
        gbc.writeMem(0x9e57, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x813a, gbc.sp());
        EXPECT(0x9e59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e57));
        EXPECT(0xcd, gbc.readMem(0x9e58));
        // CB CD 00E9
        gbc.setState(0x7f28, 0xa46b, 0x970, 0xbb94, 0xa0a7, 0x94fb, 0x1, 0x0);
        gbc.writeMem(0x7f28, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xa46b, gbc.sp());
        EXPECT(0x7f2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00EC
        gbc.setState(0x6f0c, 0x38e9, 0xd860, 0xb85d, 0x5aa3, 0xe65c, 0x1, 0x1);
        gbc.writeMem(0x6f0c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x38e9, gbc.sp());
        EXPECT(0x6f0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00ED
        gbc.setState(0x7ef6, 0x6b2c, 0x2c90, 0xe363, 0xf0c2, 0x62e6, 0x0, 0x0);
        gbc.writeMem(0x7ef6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x6b2c, gbc.sp());
        EXPECT(0x7ef8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00EE
        gbc.setState(0x3f5a, 0x177d, 0x6930, 0x66c2, 0x7245, 0x5279, 0x1, 0x0);
        gbc.writeMem(0x3f5a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x177d, gbc.sp());
        EXPECT(0x3f5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00EF
        gbc.setState(0x5777, 0xd2b4, 0x3a90, 0x6b31, 0xe776, 0xbda, 0x0, 0x0);
        gbc.writeMem(0x5777, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xd2b4, gbc.sp());
        EXPECT(0x5779, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00F0
        gbc.setState(0x8d62, 0x923d, 0xb4e0, 0xea95, 0xc8d6, 0x5cf, 0x1, 0x1);
        gbc.writeMem(0x8d62, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x923d, gbc.sp());
        EXPECT(0x8d64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d62));
        EXPECT(0xcd, gbc.readMem(0x8d63));
        // CB CD 00F1
        gbc.setState(0x4d13, 0x3ce6, 0xf130, 0xf9f6, 0x84c9, 0xff2b, 0x1, 0x1);
        gbc.writeMem(0x4d13, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x3ce6, gbc.sp());
        EXPECT(0x4d15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00F2
        gbc.setState(0x92cd, 0xe39b, 0x46e0, 0x6d95, 0xdb4e, 0x91d5, 0x1, 0x1);
        gbc.writeMem(0x92cd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xe39b, gbc.sp());
        EXPECT(0x92cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92cd));
        EXPECT(0xcd, gbc.readMem(0x92ce));
        // CB CD 00F4
        gbc.setState(0x4898, 0xb202, 0x5b0, 0xf30e, 0xeaf, 0x9b80, 0x0, 0x1);
        gbc.writeMem(0x4898, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xb202, gbc.sp());
        EXPECT(0x489a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00F5
        gbc.setState(0x4717, 0xc3bc, 0x6f10, 0xd68d, 0x2b58, 0xa9fd, 0x1, 0x1);
        gbc.writeMem(0x4717, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xc3bc, gbc.sp());
        EXPECT(0x4719, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00F6
        gbc.setState(0x6929, 0x4b7b, 0x98f0, 0xc91d, 0x22c6, 0x9afe, 0x0, 0x1);
        gbc.writeMem(0x6929, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x4b7b, gbc.sp());
        EXPECT(0x692b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00F7
        gbc.setState(0x4f22, 0x1548, 0xa670, 0x7da7, 0x8680, 0x2f74, 0x1, 0x1);
        gbc.writeMem(0x4f22, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x1548, gbc.sp());
        EXPECT(0x4f24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 00F8
        gbc.setState(0xac8b, 0x6774, 0xb780, 0x773c, 0xe73a, 0xdc23, 0x1, 0x1);
        gbc.writeMem(0xac8b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x6774, gbc.sp());
        EXPECT(0xac8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac8b));
        EXPECT(0xcd, gbc.readMem(0xac8c));
        // CB CD 00F9
        gbc.setState(0x7c87, 0x94f5, 0x5380, 0xf264, 0xacd8, 0xd68, 0x0, 0x0);
        gbc.writeMem(0x7c87, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x94f5, gbc.sp());
        EXPECT(0x7c89, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00FA
        gbc.setState(0x2e78, 0x7779, 0xa980, 0xc91d, 0x5e0f, 0x4521, 0x1, 0x0);
        gbc.writeMem(0x2e78, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x7779, gbc.sp());
        EXPECT(0x2e7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 00FB
        gbc.setState(0xe871, 0x4f, 0x33b0, 0x3618, 0x9b73, 0xf3f9, 0x1, 0x0);
        gbc.writeMem(0xe871, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x4f, gbc.sp());
        EXPECT(0xe873, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe871));
        EXPECT(0xcd, gbc.readMem(0xe872));
        // CB CD 00FC
        gbc.setState(0x86fb, 0x5fc1, 0x8300, 0x2e5a, 0x57e1, 0xdcb0, 0x0, 0x1);
        gbc.writeMem(0x86fb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x5fc1, gbc.sp());
        EXPECT(0x86fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86fb));
        EXPECT(0xcd, gbc.readMem(0x86fc));
        // CB CD 00FD
        gbc.setState(0x9b15, 0x7832, 0xa270, 0x4ce4, 0xf5d8, 0xe53e, 0x0, 0x0);
        gbc.writeMem(0x9b15, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x7832, gbc.sp());
        EXPECT(0x9b17, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b15));
        EXPECT(0xcd, gbc.readMem(0x9b16));
        // CB CD 00FE
        gbc.setState(0x8112, 0xac5b, 0x490, 0x6d14, 0x6d12, 0xd942, 0x1, 0x0);
        gbc.writeMem(0x8112, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xac5b, gbc.sp());
        EXPECT(0x8114, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8112));
        EXPECT(0xcd, gbc.readMem(0x8113));
        // CB CD 00FF
        gbc.setState(0xbd3e, 0xaed5, 0xe330, 0x20b1, 0xe7cc, 0x1a98, 0x1, 0x0);
        gbc.writeMem(0xbd3e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xaed5, gbc.sp());
        EXPECT(0xbd40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd3e));
        EXPECT(0xcd, gbc.readMem(0xbd3f));
        // CB CD 0100
        gbc.setState(0x8d77, 0xe242, 0x3af0, 0x65b1, 0xd238, 0x2f42, 0x1, 0x0);
        gbc.writeMem(0x8d77, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xe242, gbc.sp());
        EXPECT(0x8d79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d77));
        EXPECT(0xcd, gbc.readMem(0x8d78));
        // CB CD 0101
        gbc.setState(0x2bf6, 0xc705, 0x19b0, 0xde78, 0x6def, 0xd0f8, 0x0, 0x1);
        gbc.writeMem(0x2bf6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xc705, gbc.sp());
        EXPECT(0x2bf8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0102
        gbc.setState(0xcac4, 0x526d, 0x8490, 0x5627, 0x15ab, 0xfd4f, 0x1, 0x0);
        gbc.writeMem(0xcac4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x526d, gbc.sp());
        EXPECT(0xcac6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcac4));
        EXPECT(0xcd, gbc.readMem(0xcac5));
        // CB CD 0104
        gbc.setState(0xc02f, 0xc471, 0x4340, 0x73a6, 0x4003, 0x5dbc, 0x0, 0x0);
        gbc.writeMem(0xc02f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xc471, gbc.sp());
        EXPECT(0xc031, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc02f));
        EXPECT(0xcd, gbc.readMem(0xc030));
        // CB CD 0105
        gbc.setState(0x34db, 0xe944, 0x9290, 0x39ee, 0xb5e4, 0x85cf, 0x0, 0x0);
        gbc.writeMem(0x34db, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xe944, gbc.sp());
        EXPECT(0x34dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0106
        gbc.setState(0xbdc0, 0xda9a, 0xe800, 0x1289, 0x49b3, 0xd854, 0x0, 0x1);
        gbc.writeMem(0xbdc0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xda9a, gbc.sp());
        EXPECT(0xbdc2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdc0));
        EXPECT(0xcd, gbc.readMem(0xbdc1));
        // CB CD 0107
        gbc.setState(0x4f97, 0xe650, 0xe170, 0x3527, 0xad10, 0x819, 0x0, 0x1);
        gbc.writeMem(0x4f97, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xe650, gbc.sp());
        EXPECT(0x4f99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0108
        gbc.setState(0xd2f4, 0x8419, 0x44a0, 0xfc4a, 0xd5e2, 0xf235, 0x1, 0x1);
        gbc.writeMem(0xd2f4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x8419, gbc.sp());
        EXPECT(0xd2f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2f4));
        EXPECT(0xcd, gbc.readMem(0xd2f5));
        // CB CD 0109
        gbc.setState(0x2660, 0xbb0e, 0xae20, 0x5c1b, 0x760b, 0xe9d8, 0x0, 0x0);
        gbc.writeMem(0x2660, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xbb0e, gbc.sp());
        EXPECT(0x2662, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 010A
        gbc.setState(0xc972, 0x799, 0xfeb0, 0xbc9b, 0x9092, 0x7309, 0x0, 0x0);
        gbc.writeMem(0xc972, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x799, gbc.sp());
        EXPECT(0xc974, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc972));
        EXPECT(0xcd, gbc.readMem(0xc973));
        // CB CD 010B
        gbc.setState(0xad42, 0xadcf, 0xdf30, 0xe732, 0x3455, 0xf6d9, 0x0, 0x1);
        gbc.writeMem(0xad42, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xadcf, gbc.sp());
        EXPECT(0xad44, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad42));
        EXPECT(0xcd, gbc.readMem(0xad43));
        // CB CD 010D
        gbc.setState(0x6d1b, 0xf192, 0xc30, 0xe70c, 0x8023, 0x4ce8, 0x1, 0x0);
        gbc.writeMem(0x6d1b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xf192, gbc.sp());
        EXPECT(0x6d1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 010E
        gbc.setState(0x7c29, 0xf88f, 0x7510, 0xb5cc, 0xf5e4, 0xa506, 0x1, 0x1);
        gbc.writeMem(0x7c29, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xf88f, gbc.sp());
        EXPECT(0x7c2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 010F
        gbc.setState(0xdffe, 0x6733, 0x1f80, 0x795e, 0x2e12, 0x8a23, 0x1, 0x0);
        gbc.writeMem(0xdffe, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x6733, gbc.sp());
        EXPECT(0xe000, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdffe));
        EXPECT(0xcd, gbc.readMem(0xdfff));
        // CB CD 0110
        gbc.setState(0xe72e, 0x8e40, 0x3fb0, 0xf9b7, 0x94a4, 0xe7a1, 0x0, 0x1);
        gbc.writeMem(0xe72e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x8e40, gbc.sp());
        EXPECT(0xe730, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe72e));
        EXPECT(0xcd, gbc.readMem(0xe72f));
        // CB CD 0111
        gbc.setState(0x5a0a, 0x29df, 0x4080, 0x5d0b, 0x67f8, 0x2bbb, 0x1, 0x0);
        gbc.writeMem(0x5a0a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x29df, gbc.sp());
        EXPECT(0x5a0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0112
        gbc.setState(0x750b, 0xcc3c, 0xc2d0, 0xb729, 0x2c12, 0x5c1, 0x0, 0x1);
        gbc.writeMem(0x750b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xcc3c, gbc.sp());
        EXPECT(0x750d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0113
        gbc.setState(0x8a19, 0x7cd5, 0x1b30, 0xf3ed, 0xc497, 0x7302, 0x0, 0x0);
        gbc.writeMem(0x8a19, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x7cd5, gbc.sp());
        EXPECT(0x8a1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a19));
        EXPECT(0xcd, gbc.readMem(0x8a1a));
        // CB CD 0114
        gbc.setState(0xd272, 0xf9c4, 0x2a10, 0x69ad, 0xd351, 0x1d83, 0x1, 0x1);
        gbc.writeMem(0xd272, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xf9c4, gbc.sp());
        EXPECT(0xd274, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd272));
        EXPECT(0xcd, gbc.readMem(0xd273));
        // CB CD 0115
        gbc.setState(0xe5fc, 0x9ddc, 0xfec0, 0x1e58, 0x4e1e, 0xfa94, 0x0, 0x1);
        gbc.writeMem(0xe5fc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x9ddc, gbc.sp());
        EXPECT(0xe5fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5fc));
        EXPECT(0xcd, gbc.readMem(0xe5fd));
        // CB CD 0116
        gbc.setState(0x5a74, 0xa11d, 0x7350, 0x5a10, 0x3e7d, 0xc3a0, 0x0, 0x1);
        gbc.writeMem(0x5a74, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xa11d, gbc.sp());
        EXPECT(0x5a76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0117
        gbc.setState(0xb78e, 0xbfea, 0x8bb0, 0xd22b, 0x6f8a, 0x46fc, 0x0, 0x1);
        gbc.writeMem(0xb78e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xbfea, gbc.sp());
        EXPECT(0xb790, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb78e));
        EXPECT(0xcd, gbc.readMem(0xb78f));
        // CB CD 0118
        gbc.setState(0x4337, 0x7c02, 0xcdd0, 0xcbde, 0xd8fb, 0xce54, 0x0, 0x0);
        gbc.writeMem(0x4337, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x7c02, gbc.sp());
        EXPECT(0x4339, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0119
        gbc.setState(0xeff6, 0xcfdc, 0xd930, 0x6806, 0x8f73, 0xfb92, 0x0, 0x0);
        gbc.writeMem(0xeff6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xcfdc, gbc.sp());
        EXPECT(0xeff8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeff6));
        EXPECT(0xcd, gbc.readMem(0xeff7));
        // CB CD 011A
        gbc.setState(0x9fa5, 0xe1e4, 0x1230, 0x177b, 0x9c5, 0x17b4, 0x0, 0x0);
        gbc.writeMem(0x9fa5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xe1e4, gbc.sp());
        EXPECT(0x9fa7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fa5));
        EXPECT(0xcd, gbc.readMem(0x9fa6));
        // CB CD 011B
        gbc.setState(0x9c3, 0x95bf, 0x2c70, 0x3df7, 0x7fb6, 0x3d10, 0x0, 0x1);
        gbc.writeMem(0x9c3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x95bf, gbc.sp());
        EXPECT(0x9c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 011C
        gbc.setState(0x249a, 0xb615, 0x5c20, 0x2710, 0xd53b, 0xb307, 0x1, 0x0);
        gbc.writeMem(0x249a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xb615, gbc.sp());
        EXPECT(0x249c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 011D
        gbc.setState(0xc054, 0x2687, 0x9170, 0x925, 0xa391, 0xba05, 0x1, 0x0);
        gbc.writeMem(0xc054, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x2687, gbc.sp());
        EXPECT(0xc056, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc054));
        EXPECT(0xcd, gbc.readMem(0xc055));
        // CB CD 011E
        gbc.setState(0x6a5b, 0x6d78, 0xe730, 0x2d62, 0x6dfb, 0x5002, 0x0, 0x0);
        gbc.writeMem(0x6a5b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x6d78, gbc.sp());
        EXPECT(0x6a5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 011F
        gbc.setState(0x6285, 0x4fe1, 0xdca0, 0x6cd6, 0x70ac, 0xbf1a, 0x1, 0x0);
        gbc.writeMem(0x6285, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x4fe1, gbc.sp());
        EXPECT(0x6287, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0120
        gbc.setState(0x1987, 0x1eac, 0xb8d0, 0xe465, 0xc3, 0xe5a, 0x1, 0x0);
        gbc.writeMem(0x1987, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x1eac, gbc.sp());
        EXPECT(0x1989, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0121
        gbc.setState(0x32b, 0x7386, 0xf220, 0xbf1, 0xdb56, 0xed8, 0x1, 0x0);
        gbc.writeMem(0x32b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x7386, gbc.sp());
        EXPECT(0x32d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0122
        gbc.setState(0x79c7, 0xeef9, 0x52a0, 0x7f2e, 0x4092, 0xe62d, 0x0, 0x1);
        gbc.writeMem(0x79c7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xeef9, gbc.sp());
        EXPECT(0x79c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0123
        gbc.setState(0x69de, 0x688e, 0xc040, 0xc24a, 0x153b, 0xcee9, 0x1, 0x1);
        gbc.writeMem(0x69de, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x688e, gbc.sp());
        EXPECT(0x69e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0124
        gbc.setState(0xebf8, 0x4074, 0xa620, 0x4199, 0xf0fa, 0x3989, 0x0, 0x1);
        gbc.writeMem(0xebf8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x4074, gbc.sp());
        EXPECT(0xebfa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebf8));
        EXPECT(0xcd, gbc.readMem(0xebf9));
        // CB CD 0125
        gbc.setState(0xd343, 0x89e5, 0x35a0, 0x5c87, 0x16b0, 0x6350, 0x1, 0x0);
        gbc.writeMem(0xd343, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x89e5, gbc.sp());
        EXPECT(0xd345, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd343));
        EXPECT(0xcd, gbc.readMem(0xd344));
        // CB CD 0126
        gbc.setState(0x9af9, 0x3981, 0xb330, 0xde52, 0x50ac, 0xae02, 0x1, 0x1);
        gbc.writeMem(0x9af9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x3981, gbc.sp());
        EXPECT(0x9afb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9af9));
        EXPECT(0xcd, gbc.readMem(0x9afa));
        // CB CD 0127
        gbc.setState(0x47f, 0x73a1, 0xaff0, 0x2018, 0x5730, 0x9f4a, 0x1, 0x0);
        gbc.writeMem(0x47f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x73a1, gbc.sp());
        EXPECT(0x481, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0128
        gbc.setState(0x834b, 0x18f6, 0x1ba0, 0x5189, 0x49fb, 0x3d0, 0x0, 0x1);
        gbc.writeMem(0x834b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x18f6, gbc.sp());
        EXPECT(0x834d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x834b));
        EXPECT(0xcd, gbc.readMem(0x834c));
        // CB CD 0129
        gbc.setState(0x5b3b, 0x9525, 0xb8a0, 0x1f92, 0x4d5d, 0xd964, 0x0, 0x1);
        gbc.writeMem(0x5b3b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x9525, gbc.sp());
        EXPECT(0x5b3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 012A
        gbc.setState(0xd265, 0xdf86, 0x7fa0, 0xd3b7, 0x5226, 0x36cc, 0x0, 0x0);
        gbc.writeMem(0xd265, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xdf86, gbc.sp());
        EXPECT(0xd267, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd265));
        EXPECT(0xcd, gbc.readMem(0xd266));
        // CB CD 012B
        gbc.setState(0xe69c, 0x429d, 0xf270, 0x7415, 0xb542, 0xb139, 0x1, 0x0);
        gbc.writeMem(0xe69c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x429d, gbc.sp());
        EXPECT(0xe69e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe69c));
        EXPECT(0xcd, gbc.readMem(0xe69d));
        // CB CD 012C
        gbc.setState(0x7d5b, 0x6820, 0x4c90, 0x698e, 0x46cc, 0xe81b, 0x0, 0x0);
        gbc.writeMem(0x7d5b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x6820, gbc.sp());
        EXPECT(0x7d5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 012D
        gbc.setState(0x8c16, 0x8992, 0x8820, 0xb0fc, 0x47b5, 0x3856, 0x0, 0x1);
        gbc.writeMem(0x8c16, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x8992, gbc.sp());
        EXPECT(0x8c18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c16));
        EXPECT(0xcd, gbc.readMem(0x8c17));
        // CB CD 012E
        gbc.setState(0xebb5, 0x8525, 0xa0f0, 0x3701, 0x23db, 0xe7c9, 0x1, 0x1);
        gbc.writeMem(0xebb5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x8525, gbc.sp());
        EXPECT(0xebb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebb5));
        EXPECT(0xcd, gbc.readMem(0xebb6));
        // CB CD 012F
        gbc.setState(0x2472, 0x8c76, 0x4ba0, 0xe3e, 0xfc12, 0x351b, 0x1, 0x1);
        gbc.writeMem(0x2472, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x8c76, gbc.sp());
        EXPECT(0x2474, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0130
        gbc.setState(0x8fff, 0x4b04, 0xb7b0, 0x7c9e, 0xde73, 0xb5b0, 0x0, 0x1);
        gbc.writeMem(0x8fff, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x4b04, gbc.sp());
        EXPECT(0x9001, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fff));
        EXPECT(0xcd, gbc.readMem(0x9000));
        // CB CD 0131
        gbc.setState(0x638c, 0x53b2, 0x91c0, 0x53b, 0xc8c0, 0xf753, 0x1, 0x1);
        gbc.writeMem(0x638c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x53b2, gbc.sp());
        EXPECT(0x638e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0132
        gbc.setState(0x8563, 0x24f1, 0xa430, 0xafa6, 0x186b, 0xd32b, 0x1, 0x0);
        gbc.writeMem(0x8563, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x24f1, gbc.sp());
        EXPECT(0x8565, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8563));
        EXPECT(0xcd, gbc.readMem(0x8564));
        // CB CD 0133
        gbc.setState(0x7e69, 0x1474, 0x22b0, 0x6f6e, 0x73a5, 0xf484, 0x0, 0x1);
        gbc.writeMem(0x7e69, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x1474, gbc.sp());
        EXPECT(0x7e6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0134
        gbc.setState(0x3842, 0x9038, 0x3990, 0x4619, 0x7c2c, 0x2b11, 0x0, 0x0);
        gbc.writeMem(0x3842, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x9038, gbc.sp());
        EXPECT(0x3844, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0135
        gbc.setState(0x35d, 0xa002, 0x6790, 0xa2a3, 0xd6dc, 0x9c48, 0x0, 0x1);
        gbc.writeMem(0x35d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xa002, gbc.sp());
        EXPECT(0x35f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0136
        gbc.setState(0x9a0d, 0xa98, 0x5060, 0xc005, 0xe98f, 0xc622, 0x0, 0x0);
        gbc.writeMem(0x9a0d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xa98, gbc.sp());
        EXPECT(0x9a0f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a0d));
        EXPECT(0xcd, gbc.readMem(0x9a0e));
        // CB CD 0137
        gbc.setState(0x734, 0xf50, 0xbfe0, 0x70ae, 0xf883, 0x8bed, 0x0, 0x1);
        gbc.writeMem(0x734, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xf50, gbc.sp());
        EXPECT(0x736, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0138
        gbc.setState(0x999c, 0x3d88, 0x2640, 0x1922, 0x521a, 0x9262, 0x0, 0x1);
        gbc.writeMem(0x999c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x3d88, gbc.sp());
        EXPECT(0x999e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x999c));
        EXPECT(0xcd, gbc.readMem(0x999d));
        // CB CD 0139
        gbc.setState(0x63e, 0xa41b, 0x7530, 0xe5e2, 0x79c7, 0xacca, 0x0, 0x1);
        gbc.writeMem(0x63e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xa41b, gbc.sp());
        EXPECT(0x640, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 013A
        gbc.setState(0xe842, 0xcaba, 0xd200, 0xea29, 0x26bb, 0x143c, 0x1, 0x0);
        gbc.writeMem(0xe842, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xcaba, gbc.sp());
        EXPECT(0xe844, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe842));
        EXPECT(0xcd, gbc.readMem(0xe843));
        // CB CD 013B
        gbc.setState(0x233a, 0x6dc1, 0x9720, 0x3e94, 0xee0e, 0x583c, 0x1, 0x1);
        gbc.writeMem(0x233a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x6dc1, gbc.sp());
        EXPECT(0x233c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 013C
        gbc.setState(0x58b3, 0x9da5, 0x1d20, 0x14, 0x3a58, 0x6dec, 0x0, 0x0);
        gbc.writeMem(0x58b3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x9da5, gbc.sp());
        EXPECT(0x58b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 013D
        gbc.setState(0xe07d, 0x7928, 0x4730, 0x343e, 0xcb17, 0x34a3, 0x1, 0x0);
        gbc.writeMem(0xe07d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x7928, gbc.sp());
        EXPECT(0xe07f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe07d));
        EXPECT(0xcd, gbc.readMem(0xe07e));
        // CB CD 013E
        gbc.setState(0xcc07, 0xef36, 0xaef0, 0xfcb2, 0x10c2, 0xc0e4, 0x1, 0x0);
        gbc.writeMem(0xcc07, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xef36, gbc.sp());
        EXPECT(0xcc09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc07));
        EXPECT(0xcd, gbc.readMem(0xcc08));
        // CB CD 0141
        gbc.setState(0x5850, 0xec1d, 0x3500, 0x5c13, 0x5c2d, 0xcd4d, 0x1, 0x1);
        gbc.writeMem(0x5850, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xec1d, gbc.sp());
        EXPECT(0x5852, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0142
        gbc.setState(0xc00a, 0x3ccf, 0xcbb0, 0x4264, 0x7773, 0x522b, 0x1, 0x1);
        gbc.writeMem(0xc00a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x3ccf, gbc.sp());
        EXPECT(0xc00c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc00a));
        EXPECT(0xcd, gbc.readMem(0xc00b));
        // CB CD 0143
        gbc.setState(0x8306, 0xfca0, 0x6d0, 0xd9eb, 0xa616, 0x2487, 0x0, 0x1);
        gbc.writeMem(0x8306, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xfca0, gbc.sp());
        EXPECT(0x8308, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8306));
        EXPECT(0xcd, gbc.readMem(0x8307));
        // CB CD 0144
        gbc.setState(0xc7e3, 0x919b, 0x37a0, 0x22be, 0xe18d, 0xa8cb, 0x1, 0x0);
        gbc.writeMem(0xc7e3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x919b, gbc.sp());
        EXPECT(0xc7e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7e3));
        EXPECT(0xcd, gbc.readMem(0xc7e4));
        // CB CD 0146
        gbc.setState(0xb78, 0xf562, 0x7cf0, 0x6129, 0x65f4, 0x289a, 0x1, 0x1);
        gbc.writeMem(0xb78, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xf562, gbc.sp());
        EXPECT(0xb7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0147
        gbc.setState(0xe3df, 0x4dbe, 0x8710, 0x8985, 0x9eea, 0x8f7f, 0x0, 0x0);
        gbc.writeMem(0xe3df, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x4dbe, gbc.sp());
        EXPECT(0xe3e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3df));
        EXPECT(0xcd, gbc.readMem(0xe3e0));
        // CB CD 0148
        gbc.setState(0x32bf, 0xdf9d, 0xda0, 0x3794, 0xfcc5, 0xce15, 0x1, 0x1);
        gbc.writeMem(0x32bf, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xdf9d, gbc.sp());
        EXPECT(0x32c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0149
        gbc.setState(0x19a3, 0x2af0, 0x35d0, 0x2ea2, 0xb7dd, 0xed6f, 0x0, 0x0);
        gbc.writeMem(0x19a3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x2af0, gbc.sp());
        EXPECT(0x19a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 014A
        gbc.setState(0x88dc, 0xbb87, 0x94d0, 0xbb2d, 0xfd0c, 0x187f, 0x1, 0x0);
        gbc.writeMem(0x88dc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xbb87, gbc.sp());
        EXPECT(0x88de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88dc));
        EXPECT(0xcd, gbc.readMem(0x88dd));
        // CB CD 014B
        gbc.setState(0x93ae, 0xf726, 0x5e50, 0x4c79, 0xa12e, 0x581e, 0x1, 0x0);
        gbc.writeMem(0x93ae, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xf726, gbc.sp());
        EXPECT(0x93b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93ae));
        EXPECT(0xcd, gbc.readMem(0x93af));
        // CB CD 014C
        gbc.setState(0xa35c, 0x4f62, 0x7940, 0x7e2, 0x66e4, 0xbe8c, 0x0, 0x1);
        gbc.writeMem(0xa35c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x4f62, gbc.sp());
        EXPECT(0xa35e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa35c));
        EXPECT(0xcd, gbc.readMem(0xa35d));
        // CB CD 014D
        gbc.setState(0x43c4, 0x70ae, 0x9230, 0x5a28, 0x34b5, 0xd63b, 0x1, 0x0);
        gbc.writeMem(0x43c4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x70ae, gbc.sp());
        EXPECT(0x43c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 014E
        gbc.setState(0x7af8, 0x5ba9, 0x7280, 0x7eb7, 0xc556, 0x24d9, 0x1, 0x0);
        gbc.writeMem(0x7af8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x5ba9, gbc.sp());
        EXPECT(0x7afa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 014F
        gbc.setState(0x7d3b, 0x8587, 0x96d0, 0x8395, 0x61b9, 0x6acf, 0x1, 0x1);
        gbc.writeMem(0x7d3b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x8587, gbc.sp());
        EXPECT(0x7d3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0150
        gbc.setState(0x3033, 0x6cfc, 0x1be0, 0x88ab, 0xb67c, 0x395a, 0x0, 0x1);
        gbc.writeMem(0x3033, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x6cfc, gbc.sp());
        EXPECT(0x3035, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0151
        gbc.setState(0x5439, 0xdd76, 0x3950, 0x2b56, 0x7275, 0x2457, 0x1, 0x1);
        gbc.writeMem(0x5439, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xdd76, gbc.sp());
        EXPECT(0x543b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0152
        gbc.setState(0x1544, 0x34d1, 0xdc60, 0xfdc5, 0xd53d, 0x9a4b, 0x0, 0x1);
        gbc.writeMem(0x1544, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x34d1, gbc.sp());
        EXPECT(0x1546, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0154
        gbc.setState(0x5820, 0xecf7, 0x9350, 0xa872, 0xc312, 0x4d11, 0x0, 0x0);
        gbc.writeMem(0x5820, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xecf7, gbc.sp());
        EXPECT(0x5822, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0155
        gbc.setState(0x44d7, 0x2541, 0x1f90, 0x4621, 0x4171, 0x46a, 0x0, 0x0);
        gbc.writeMem(0x44d7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x2541, gbc.sp());
        EXPECT(0x44d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0156
        gbc.setState(0x5d80, 0x57b5, 0xa520, 0xfdb9, 0x3b85, 0xdbc2, 0x0, 0x1);
        gbc.writeMem(0x5d80, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x57b5, gbc.sp());
        EXPECT(0x5d82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0157
        gbc.setState(0xdfe1, 0x359f, 0xd760, 0x368b, 0x6a65, 0x1232, 0x1, 0x0);
        gbc.writeMem(0xdfe1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x359f, gbc.sp());
        EXPECT(0xdfe3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfe1));
        EXPECT(0xcd, gbc.readMem(0xdfe2));
        // CB CD 0158
        gbc.setState(0x2b5, 0x8f9a, 0xc590, 0x8de1, 0x83a2, 0x6156, 0x1, 0x1);
        gbc.writeMem(0x2b5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x8f9a, gbc.sp());
        EXPECT(0x2b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0159
        gbc.setState(0x2cea, 0xe318, 0xc70, 0x74aa, 0x160a, 0x494b, 0x1, 0x1);
        gbc.writeMem(0x2cea, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xe318, gbc.sp());
        EXPECT(0x2cec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 015A
        gbc.setState(0x56b0, 0x46d3, 0x6330, 0xf232, 0x23c1, 0x8287, 0x1, 0x1);
        gbc.writeMem(0x56b0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x46d3, gbc.sp());
        EXPECT(0x56b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 015B
        gbc.setState(0x2dd7, 0x87ef, 0xc7b0, 0x5f8e, 0x44d4, 0x5a24, 0x0, 0x1);
        gbc.writeMem(0x2dd7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x87ef, gbc.sp());
        EXPECT(0x2dd9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 015C
        gbc.setState(0x981a, 0x85ba, 0xd7e0, 0x1bee, 0x2790, 0xb130, 0x1, 0x0);
        gbc.writeMem(0x981a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x85ba, gbc.sp());
        EXPECT(0x981c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x981a));
        EXPECT(0xcd, gbc.readMem(0x981b));
        // CB CD 015D
        gbc.setState(0x55b5, 0x839e, 0x1d60, 0x96af, 0x8f93, 0xe982, 0x0, 0x1);
        gbc.writeMem(0x55b5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x839e, gbc.sp());
        EXPECT(0x55b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 015E
        gbc.setState(0x2667, 0xe500, 0xc550, 0xf0bb, 0xcaa8, 0x1194, 0x1, 0x1);
        gbc.writeMem(0x2667, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xe500, gbc.sp());
        EXPECT(0x2669, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 015F
        gbc.setState(0x97b8, 0x76eb, 0xc510, 0x355d, 0x38b3, 0xd2c5, 0x0, 0x1);
        gbc.writeMem(0x97b8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x76eb, gbc.sp());
        EXPECT(0x97ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97b8));
        EXPECT(0xcd, gbc.readMem(0x97b9));
        // CB CD 0160
        gbc.setState(0x75ec, 0x3392, 0x4090, 0x2a42, 0x1f7d, 0x3c5c, 0x0, 0x1);
        gbc.writeMem(0x75ec, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x3392, gbc.sp());
        EXPECT(0x75ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0162
        gbc.setState(0x7452, 0x32cc, 0xefb0, 0x3628, 0xff81, 0x39ed, 0x0, 0x0);
        gbc.writeMem(0x7452, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x32cc, gbc.sp());
        EXPECT(0x7454, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0163
        gbc.setState(0x37a1, 0x974d, 0x88f0, 0xc3bb, 0x5e55, 0xe8d6, 0x0, 0x0);
        gbc.writeMem(0x37a1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x974d, gbc.sp());
        EXPECT(0x37a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0164
        gbc.setState(0x3055, 0xaa62, 0x7250, 0xe24a, 0xde7e, 0xf674, 0x0, 0x1);
        gbc.writeMem(0x3055, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xaa62, gbc.sp());
        EXPECT(0x3057, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0165
        gbc.setState(0x39d4, 0x8bca, 0xbf30, 0xca8b, 0x28b1, 0xa297, 0x1, 0x1);
        gbc.writeMem(0x39d4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x8bca, gbc.sp());
        EXPECT(0x39d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0166
        gbc.setState(0x42c3, 0xa224, 0x8a80, 0xe84, 0xdfa1, 0xd298, 0x1, 0x0);
        gbc.writeMem(0x42c3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xa224, gbc.sp());
        EXPECT(0x42c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0167
        gbc.setState(0x683e, 0xaeff, 0xb650, 0x2c93, 0xaf41, 0x3ef0, 0x0, 0x0);
        gbc.writeMem(0x683e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xaeff, gbc.sp());
        EXPECT(0x6840, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0168
        gbc.setState(0xb601, 0xa7c9, 0xcd0, 0xd30f, 0x160c, 0x9e6e, 0x0, 0x1);
        gbc.writeMem(0xb601, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xa7c9, gbc.sp());
        EXPECT(0xb603, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb601));
        EXPECT(0xcd, gbc.readMem(0xb602));
        // CB CD 0169
        gbc.setState(0x3d44, 0x5244, 0x7ef0, 0xb7eb, 0xf2b9, 0x9f14, 0x0, 0x0);
        gbc.writeMem(0x3d44, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x5244, gbc.sp());
        EXPECT(0x3d46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 016A
        gbc.setState(0x2335, 0x361, 0x9890, 0xe747, 0x7cd0, 0x5954, 0x0, 0x0);
        gbc.writeMem(0x2335, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x361, gbc.sp());
        EXPECT(0x2337, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 016B
        gbc.setState(0x2988, 0x2d5e, 0xc550, 0x3cca, 0x4942, 0x9f7, 0x0, 0x1);
        gbc.writeMem(0x2988, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x2d5e, gbc.sp());
        EXPECT(0x298a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 016E
        gbc.setState(0x4b1c, 0xabbc, 0xa8c0, 0x6f0d, 0x3a83, 0x7b33, 0x1, 0x0);
        gbc.writeMem(0x4b1c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xabbc, gbc.sp());
        EXPECT(0x4b1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 016F
        gbc.setState(0x4c35, 0x4fe5, 0xab0, 0x145, 0x23ce, 0xaf7e, 0x0, 0x0);
        gbc.writeMem(0x4c35, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x4fe5, gbc.sp());
        EXPECT(0x4c37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0170
        gbc.setState(0xaeb7, 0xb9a7, 0xd40, 0x6e29, 0xa13c, 0xf23d, 0x0, 0x1);
        gbc.writeMem(0xaeb7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xb9a7, gbc.sp());
        EXPECT(0xaeb9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaeb7));
        EXPECT(0xcd, gbc.readMem(0xaeb8));
        // CB CD 0171
        gbc.setState(0x7080, 0x6351, 0x64c0, 0x57fd, 0xcfc4, 0x8590, 0x1, 0x1);
        gbc.writeMem(0x7080, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x6351, gbc.sp());
        EXPECT(0x7082, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0172
        gbc.setState(0x520c, 0x2ccf, 0x1600, 0xdf59, 0xb290, 0xcfa6, 0x0, 0x1);
        gbc.writeMem(0x520c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x2ccf, gbc.sp());
        EXPECT(0x520e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0173
        gbc.setState(0x1031, 0xbec, 0xd4c0, 0x28c8, 0xb705, 0x667f, 0x0, 0x1);
        gbc.writeMem(0x1031, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xbec, gbc.sp());
        EXPECT(0x1033, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0174
        gbc.setState(0x3400, 0xecdd, 0x3830, 0xe791, 0xc4fc, 0xa1fd, 0x0, 0x1);
        gbc.writeMem(0x3400, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xecdd, gbc.sp());
        EXPECT(0x3402, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0176
        gbc.setState(0x198, 0x8e9d, 0x11f0, 0x490a, 0x6223, 0xec39, 0x0, 0x1);
        gbc.writeMem(0x198, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x8e9d, gbc.sp());
        EXPECT(0x19a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0177
        gbc.setState(0xe00e, 0x880, 0x4400, 0xded, 0x6d49, 0x77d3, 0x0, 0x0);
        gbc.writeMem(0xe00e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x880, gbc.sp());
        EXPECT(0xe010, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe00e));
        EXPECT(0xcd, gbc.readMem(0xe00f));
        // CB CD 0178
        gbc.setState(0xabe0, 0x63f1, 0xf9b0, 0x68cb, 0x2269, 0x7700, 0x1, 0x0);
        gbc.writeMem(0xabe0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x63f1, gbc.sp());
        EXPECT(0xabe2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabe0));
        EXPECT(0xcd, gbc.readMem(0xabe1));
        // CB CD 0179
        gbc.setState(0xdf7f, 0x2753, 0x4290, 0x8863, 0x1d2b, 0xe2e7, 0x0, 0x0);
        gbc.writeMem(0xdf7f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x2753, gbc.sp());
        EXPECT(0xdf81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf7f));
        EXPECT(0xcd, gbc.readMem(0xdf80));
        // CB CD 017A
        gbc.setState(0x859, 0x61b7, 0xb250, 0xb3dd, 0x11ce, 0x2ba9, 0x0, 0x1);
        gbc.writeMem(0x859, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x61b7, gbc.sp());
        EXPECT(0x85b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 017B
        gbc.setState(0x333e, 0xd0e5, 0x5450, 0xeb08, 0xfc92, 0x9f3e, 0x0, 0x1);
        gbc.writeMem(0x333e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xd0e5, gbc.sp());
        EXPECT(0x3340, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 017C
        gbc.setState(0x5b0a, 0xbb19, 0xb9d0, 0x9979, 0x851e, 0x122b, 0x1, 0x1);
        gbc.writeMem(0x5b0a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xbb19, gbc.sp());
        EXPECT(0x5b0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 017D
        gbc.setState(0xa110, 0x5a11, 0x46c0, 0xbb08, 0x6de9, 0xad5d, 0x0, 0x0);
        gbc.writeMem(0xa110, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x5a11, gbc.sp());
        EXPECT(0xa112, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa110));
        EXPECT(0xcd, gbc.readMem(0xa111));
        // CB CD 017E
        gbc.setState(0x90f1, 0x7154, 0x8e10, 0xfb63, 0x323b, 0x5e74, 0x0, 0x1);
        gbc.writeMem(0x90f1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x7154, gbc.sp());
        EXPECT(0x90f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90f1));
        EXPECT(0xcd, gbc.readMem(0x90f2));
        // CB CD 017F
        gbc.setState(0x3736, 0x30e8, 0xa1f0, 0x221a, 0x347f, 0x2967, 0x0, 0x0);
        gbc.writeMem(0x3736, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x30e8, gbc.sp());
        EXPECT(0x3738, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0180
        gbc.setState(0x5e5e, 0x1fe3, 0x7560, 0x471c, 0x289, 0x58a3, 0x0, 0x1);
        gbc.writeMem(0x5e5e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x1fe3, gbc.sp());
        EXPECT(0x5e60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0181
        gbc.setState(0x4e12, 0x8172, 0xec10, 0xb91, 0x7616, 0x3d92, 0x1, 0x0);
        gbc.writeMem(0x4e12, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x8172, gbc.sp());
        EXPECT(0x4e14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0182
        gbc.setState(0x78de, 0xf46b, 0xfb0, 0x1100, 0xa66a, 0xecea, 0x1, 0x1);
        gbc.writeMem(0x78de, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xf46b, gbc.sp());
        EXPECT(0x78e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0183
        gbc.setState(0x5ea6, 0xb73a, 0x5260, 0x4ff, 0x3a41, 0xbdcb, 0x0, 0x0);
        gbc.writeMem(0x5ea6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xb73a, gbc.sp());
        EXPECT(0x5ea8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0184
        gbc.setState(0xa387, 0x955c, 0x2ab0, 0xabea, 0x1bdd, 0x8261, 0x0, 0x0);
        gbc.writeMem(0xa387, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x955c, gbc.sp());
        EXPECT(0xa389, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa387));
        EXPECT(0xcd, gbc.readMem(0xa388));
        // CB CD 0185
        gbc.setState(0x59b6, 0xca3, 0xd610, 0x9a28, 0x10fc, 0x27b3, 0x1, 0x1);
        gbc.writeMem(0x59b6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xca3, gbc.sp());
        EXPECT(0x59b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0186
        gbc.setState(0x36e8, 0xa56e, 0xd50, 0xb0a1, 0xbfcb, 0x93f6, 0x1, 0x1);
        gbc.writeMem(0x36e8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xa56e, gbc.sp());
        EXPECT(0x36ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0187
        gbc.setState(0xe285, 0xc0a6, 0x4c30, 0xbcfa, 0xcce0, 0xd540, 0x0, 0x1);
        gbc.writeMem(0xe285, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xc0a6, gbc.sp());
        EXPECT(0xe287, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe285));
        EXPECT(0xcd, gbc.readMem(0xe286));
        // CB CD 0188
        gbc.setState(0x82fb, 0x12b8, 0x5520, 0x3d9b, 0x4fbc, 0x5da, 0x1, 0x1);
        gbc.writeMem(0x82fb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x12b8, gbc.sp());
        EXPECT(0x82fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82fb));
        EXPECT(0xcd, gbc.readMem(0x82fc));
        // CB CD 0189
        gbc.setState(0x485a, 0xbe6a, 0x190, 0x54eb, 0x502e, 0x82cd, 0x1, 0x0);
        gbc.writeMem(0x485a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xbe6a, gbc.sp());
        EXPECT(0x485c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 018A
        gbc.setState(0x7ee8, 0x7846, 0xa7e0, 0x5d31, 0x5bd1, 0xfcdb, 0x0, 0x0);
        gbc.writeMem(0x7ee8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x7846, gbc.sp());
        EXPECT(0x7eea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 018B
        gbc.setState(0xd849, 0x4873, 0x9400, 0xef4c, 0x37d, 0xb5e0, 0x1, 0x0);
        gbc.writeMem(0xd849, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x4873, gbc.sp());
        EXPECT(0xd84b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd849));
        EXPECT(0xcd, gbc.readMem(0xd84a));
        // CB CD 018C
        gbc.setState(0x6d6a, 0xe107, 0xdac0, 0xcd3b, 0xcf24, 0x8f3f, 0x0, 0x1);
        gbc.writeMem(0x6d6a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xe107, gbc.sp());
        EXPECT(0x6d6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 018D
        gbc.setState(0x3344, 0xb62e, 0x8790, 0x1ada, 0x6ead, 0x8763, 0x1, 0x1);
        gbc.writeMem(0x3344, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xb62e, gbc.sp());
        EXPECT(0x3346, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 018E
        gbc.setState(0xa1e2, 0xdf99, 0xc590, 0xee5, 0x2338, 0x31a6, 0x1, 0x1);
        gbc.writeMem(0xa1e2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xdf99, gbc.sp());
        EXPECT(0xa1e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1e2));
        EXPECT(0xcd, gbc.readMem(0xa1e3));
        // CB CD 018F
        gbc.setState(0x840, 0x705d, 0x8100, 0xb0c2, 0x50a1, 0xe53e, 0x0, 0x1);
        gbc.writeMem(0x840, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x705d, gbc.sp());
        EXPECT(0x842, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0190
        gbc.setState(0x7a73, 0xab3b, 0x7f0, 0x588a, 0x63db, 0xdb79, 0x0, 0x0);
        gbc.writeMem(0x7a73, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xab3b, gbc.sp());
        EXPECT(0x7a75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0191
        gbc.setState(0x6f30, 0xa849, 0xfb80, 0x45ea, 0x5ff8, 0xbf61, 0x1, 0x0);
        gbc.writeMem(0x6f30, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xa849, gbc.sp());
        EXPECT(0x6f32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0192
        gbc.setState(0x5eb6, 0xb6c1, 0x1040, 0x1a15, 0x91e5, 0x1df0, 0x1, 0x1);
        gbc.writeMem(0x5eb6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xb6c1, gbc.sp());
        EXPECT(0x5eb8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0193
        gbc.setState(0xe109, 0x6864, 0xe3d0, 0xde86, 0xdcb2, 0x916f, 0x0, 0x0);
        gbc.writeMem(0xe109, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x6864, gbc.sp());
        EXPECT(0xe10b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe109));
        EXPECT(0xcd, gbc.readMem(0xe10a));
        // CB CD 0194
        gbc.setState(0x4903, 0x5e63, 0x4e80, 0xe6ac, 0x12ce, 0xba74, 0x0, 0x0);
        gbc.writeMem(0x4903, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x5e63, gbc.sp());
        EXPECT(0x4905, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0195
        gbc.setState(0x3de, 0xbd55, 0xffe0, 0xd07d, 0x27f1, 0xd850, 0x1, 0x1);
        gbc.writeMem(0x3de, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xbd55, gbc.sp());
        EXPECT(0x3e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0196
        gbc.setState(0x5274, 0x96dc, 0xa180, 0x61e1, 0xf42, 0x2db3, 0x1, 0x1);
        gbc.writeMem(0x5274, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x96dc, gbc.sp());
        EXPECT(0x5276, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0197
        gbc.setState(0x787d, 0x5a87, 0x4410, 0xd53a, 0x8f02, 0xfc2, 0x1, 0x0);
        gbc.writeMem(0x787d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x5a87, gbc.sp());
        EXPECT(0x787f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0198
        gbc.setState(0xa5be, 0x8e38, 0x2230, 0x9b7b, 0x5a87, 0x4e7e, 0x1, 0x0);
        gbc.writeMem(0xa5be, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x8e38, gbc.sp());
        EXPECT(0xa5c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5be));
        EXPECT(0xcd, gbc.readMem(0xa5bf));
        // CB CD 0199
        gbc.setState(0x7c7e, 0xc433, 0xc390, 0xe1e9, 0x4bd2, 0xcdb3, 0x1, 0x1);
        gbc.writeMem(0x7c7e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xc433, gbc.sp());
        EXPECT(0x7c80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 019A
        gbc.setState(0xa29c, 0xb365, 0xc170, 0xc0c9, 0xb72d, 0x9881, 0x0, 0x1);
        gbc.writeMem(0xa29c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xb365, gbc.sp());
        EXPECT(0xa29e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa29c));
        EXPECT(0xcd, gbc.readMem(0xa29d));
        // CB CD 019B
        gbc.setState(0x2e55, 0xe824, 0x1e30, 0x1c26, 0x59e9, 0xed12, 0x1, 0x1);
        gbc.writeMem(0x2e55, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xe824, gbc.sp());
        EXPECT(0x2e57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 019C
        gbc.setState(0x9992, 0xfb9b, 0x8a70, 0x2a68, 0x6a8, 0x561a, 0x1, 0x1);
        gbc.writeMem(0x9992, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xfb9b, gbc.sp());
        EXPECT(0x9994, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9992));
        EXPECT(0xcd, gbc.readMem(0x9993));
        // CB CD 019D
        gbc.setState(0x8465, 0x8ebf, 0xad80, 0x4498, 0x2e19, 0x1be0, 0x1, 0x0);
        gbc.writeMem(0x8465, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x8ebf, gbc.sp());
        EXPECT(0x8467, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8465));
        EXPECT(0xcd, gbc.readMem(0x8466));
        // CB CD 019E
        gbc.setState(0x9d8c, 0x7382, 0xbc0, 0xa4d4, 0x880f, 0x4ab7, 0x0, 0x1);
        gbc.writeMem(0x9d8c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x7382, gbc.sp());
        EXPECT(0x9d8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d8c));
        EXPECT(0xcd, gbc.readMem(0x9d8d));
        // CB CD 019F
        gbc.setState(0x86a2, 0xc632, 0x8850, 0xa055, 0x6963, 0x9132, 0x0, 0x0);
        gbc.writeMem(0x86a2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xc632, gbc.sp());
        EXPECT(0x86a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86a2));
        EXPECT(0xcd, gbc.readMem(0x86a3));
        // CB CD 01A0
        gbc.setState(0x4a87, 0xaef, 0x9b60, 0x4c1b, 0x8b72, 0xaa19, 0x0, 0x0);
        gbc.writeMem(0x4a87, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xaef, gbc.sp());
        EXPECT(0x4a89, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01A1
        gbc.setState(0x34db, 0x574f, 0x1bf0, 0x9982, 0x23b6, 0x9c1f, 0x1, 0x1);
        gbc.writeMem(0x34db, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x574f, gbc.sp());
        EXPECT(0x34dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01A2
        gbc.setState(0x4c5, 0x5492, 0xba90, 0x4bee, 0xc1a7, 0xd6d6, 0x0, 0x1);
        gbc.writeMem(0x4c5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x5492, gbc.sp());
        EXPECT(0x4c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01A3
        gbc.setState(0x90, 0x3b94, 0x9ea0, 0x4de7, 0x2659, 0xf4e7, 0x0, 0x0);
        gbc.writeMem(0x90, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x3b94, gbc.sp());
        EXPECT(0x92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01A4
        gbc.setState(0xe8d0, 0x288e, 0x11e0, 0xbea3, 0x9301, 0x5ae9, 0x1, 0x1);
        gbc.writeMem(0xe8d0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x288e, gbc.sp());
        EXPECT(0xe8d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8d0));
        EXPECT(0xcd, gbc.readMem(0xe8d1));
        // CB CD 01A5
        gbc.setState(0x6839, 0xe080, 0x9e10, 0xabe4, 0xde54, 0x4382, 0x1, 0x1);
        gbc.writeMem(0x6839, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xe080, gbc.sp());
        EXPECT(0x683b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01A6
        gbc.setState(0x418e, 0x90c, 0xe3d0, 0x2def, 0x1d1c, 0x2128, 0x0, 0x0);
        gbc.writeMem(0x418e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x90c, gbc.sp());
        EXPECT(0x4190, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01A7
        gbc.setState(0x911c, 0x2162, 0xd70, 0xe05, 0xcab7, 0x6ee0, 0x1, 0x1);
        gbc.writeMem(0x911c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x2162, gbc.sp());
        EXPECT(0x911e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x911c));
        EXPECT(0xcd, gbc.readMem(0x911d));
        // CB CD 01A8
        gbc.setState(0xa0e0, 0xce9c, 0x3110, 0x3b0a, 0xd042, 0x739a, 0x0, 0x1);
        gbc.writeMem(0xa0e0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xce9c, gbc.sp());
        EXPECT(0xa0e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0e0));
        EXPECT(0xcd, gbc.readMem(0xa0e1));
        // CB CD 01A9
        gbc.setState(0xb98d, 0x6dd2, 0x81f0, 0xc21a, 0x28ff, 0x8ad1, 0x0, 0x1);
        gbc.writeMem(0xb98d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x6dd2, gbc.sp());
        EXPECT(0xb98f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb98d));
        EXPECT(0xcd, gbc.readMem(0xb98e));
        // CB CD 01AA
        gbc.setState(0xc279, 0xe5b, 0x1860, 0x5a01, 0x3737, 0x6ca0, 0x0, 0x0);
        gbc.writeMem(0xc279, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xe5b, gbc.sp());
        EXPECT(0xc27b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc279));
        EXPECT(0xcd, gbc.readMem(0xc27a));
        // CB CD 01AB
        gbc.setState(0x2c7f, 0xa4c8, 0xa8d0, 0xd508, 0x150d, 0x1555, 0x1, 0x1);
        gbc.writeMem(0x2c7f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xa4c8, gbc.sp());
        EXPECT(0x2c81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01AC
        gbc.setState(0x55c0, 0x5fb6, 0x1ae0, 0x6cbf, 0xa8a5, 0x626b, 0x0, 0x0);
        gbc.writeMem(0x55c0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x5fb6, gbc.sp());
        EXPECT(0x55c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01AD
        gbc.setState(0xc7fa, 0xa0ef, 0x9990, 0xdd59, 0xd598, 0x3397, 0x0, 0x1);
        gbc.writeMem(0xc7fa, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xa0ef, gbc.sp());
        EXPECT(0xc7fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7fa));
        EXPECT(0xcd, gbc.readMem(0xc7fb));
        // CB CD 01AE
        gbc.setState(0xa2e1, 0xf275, 0x3b20, 0xa2bc, 0x15f6, 0x2b5e, 0x1, 0x0);
        gbc.writeMem(0xa2e1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xf275, gbc.sp());
        EXPECT(0xa2e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2e1));
        EXPECT(0xcd, gbc.readMem(0xa2e2));
        // CB CD 01AF
        gbc.setState(0x8b2d, 0xb536, 0x2ad0, 0xba73, 0x6cc0, 0x8fc5, 0x1, 0x1);
        gbc.writeMem(0x8b2d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xb536, gbc.sp());
        EXPECT(0x8b2f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b2d));
        EXPECT(0xcd, gbc.readMem(0x8b2e));
        // CB CD 01B0
        gbc.setState(0x3d68, 0x8a3d, 0xb0c0, 0xdf, 0xb071, 0x5c75, 0x0, 0x1);
        gbc.writeMem(0x3d68, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x8a3d, gbc.sp());
        EXPECT(0x3d6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01B1
        gbc.setState(0x21b6, 0xbb80, 0x1520, 0xb8b1, 0x7317, 0x53a2, 0x1, 0x1);
        gbc.writeMem(0x21b6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xbb80, gbc.sp());
        EXPECT(0x21b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01B2
        gbc.setState(0x5e51, 0x3aab, 0x7eb0, 0x8201, 0xe2b9, 0xc404, 0x0, 0x0);
        gbc.writeMem(0x5e51, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x3aab, gbc.sp());
        EXPECT(0x5e53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01B3
        gbc.setState(0x3d58, 0x76d, 0x8990, 0x6615, 0xa8b3, 0x4cb7, 0x1, 0x0);
        gbc.writeMem(0x3d58, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x76d, gbc.sp());
        EXPECT(0x3d5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01B4
        gbc.setState(0x4ca3, 0xe885, 0x9d20, 0xf9cc, 0xef24, 0x7c05, 0x0, 0x1);
        gbc.writeMem(0x4ca3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xe885, gbc.sp());
        EXPECT(0x4ca5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01B5
        gbc.setState(0xcdfb, 0xc921, 0x9ca0, 0x168a, 0x5c24, 0x1cd2, 0x1, 0x0);
        gbc.writeMem(0xcdfb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xc921, gbc.sp());
        EXPECT(0xcdfd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdfb));
        EXPECT(0xcd, gbc.readMem(0xcdfc));
        // CB CD 01B6
        gbc.setState(0x44d6, 0x7cb9, 0x4b20, 0xbcb1, 0x7cd7, 0xb4a5, 0x1, 0x0);
        gbc.writeMem(0x44d6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x7cb9, gbc.sp());
        EXPECT(0x44d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01B7
        gbc.setState(0xce9, 0xdb3a, 0xcb90, 0x63e3, 0x5457, 0xbd5f, 0x0, 0x1);
        gbc.writeMem(0xce9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xdb3a, gbc.sp());
        EXPECT(0xceb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01B8
        gbc.setState(0x5fc5, 0x9f95, 0xe580, 0x7c0f, 0x20f7, 0xb268, 0x1, 0x1);
        gbc.writeMem(0x5fc5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x9f95, gbc.sp());
        EXPECT(0x5fc7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01B9
        gbc.setState(0x8cc9, 0x4681, 0x46e0, 0x6ab8, 0x82d0, 0x9224, 0x1, 0x0);
        gbc.writeMem(0x8cc9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x4681, gbc.sp());
        EXPECT(0x8ccb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cc9));
        EXPECT(0xcd, gbc.readMem(0x8cca));
        // CB CD 01BA
        gbc.setState(0xbe13, 0xac63, 0xabe0, 0xa1ec, 0xb02f, 0xbc68, 0x1, 0x0);
        gbc.writeMem(0xbe13, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xac63, gbc.sp());
        EXPECT(0xbe15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe13));
        EXPECT(0xcd, gbc.readMem(0xbe14));
        // CB CD 01BB
        gbc.setState(0x2375, 0xe9bb, 0x61f0, 0xeebb, 0xaf1b, 0xa0f1, 0x1, 0x1);
        gbc.writeMem(0x2375, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xe9bb, gbc.sp());
        EXPECT(0x2377, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01BC
        gbc.setState(0xcc0e, 0x2e7b, 0xfd50, 0x5690, 0xf098, 0x8123, 0x0, 0x0);
        gbc.writeMem(0xcc0e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x2e7b, gbc.sp());
        EXPECT(0xcc10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc0e));
        EXPECT(0xcd, gbc.readMem(0xcc0f));
        // CB CD 01BD
        gbc.setState(0x5e38, 0x21cf, 0x3d80, 0x783b, 0x1ed, 0x1ae8, 0x1, 0x1);
        gbc.writeMem(0x5e38, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x21cf, gbc.sp());
        EXPECT(0x5e3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01BE
        gbc.setState(0xe696, 0x22b1, 0xfee0, 0x6400, 0x5584, 0x7e71, 0x1, 0x1);
        gbc.writeMem(0xe696, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x22b1, gbc.sp());
        EXPECT(0xe698, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe696));
        EXPECT(0xcd, gbc.readMem(0xe697));
        // CB CD 01BF
        gbc.setState(0x5ce7, 0xcf08, 0xce30, 0x298e, 0xcb98, 0x7d89, 0x0, 0x1);
        gbc.writeMem(0x5ce7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xcf08, gbc.sp());
        EXPECT(0x5ce9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01C0
        gbc.setState(0xa6df, 0x189e, 0x2050, 0x8967, 0x245d, 0x5a6b, 0x0, 0x1);
        gbc.writeMem(0xa6df, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x189e, gbc.sp());
        EXPECT(0xa6e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6df));
        EXPECT(0xcd, gbc.readMem(0xa6e0));
        // CB CD 01C1
        gbc.setState(0x271f, 0x3924, 0x9ae0, 0x9b87, 0x8fcc, 0x32f0, 0x0, 0x0);
        gbc.writeMem(0x271f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x3924, gbc.sp());
        EXPECT(0x2721, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01C3
        gbc.setState(0x54c9, 0xd483, 0xb600, 0x54a, 0xaa09, 0x500d, 0x0, 0x0);
        gbc.writeMem(0x54c9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xd483, gbc.sp());
        EXPECT(0x54cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01C4
        gbc.setState(0x1818, 0xae40, 0x9c70, 0x756e, 0xa8f9, 0x1a4b, 0x1, 0x1);
        gbc.writeMem(0x1818, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xae40, gbc.sp());
        EXPECT(0x181a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01C5
        gbc.setState(0x4991, 0xe159, 0x4b70, 0x4bce, 0xa4ce, 0x4d78, 0x0, 0x1);
        gbc.writeMem(0x4991, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xe159, gbc.sp());
        EXPECT(0x4993, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01C6
        gbc.setState(0x1e71, 0x6cef, 0xac90, 0x32ab, 0x77b5, 0xf21d, 0x1, 0x1);
        gbc.writeMem(0x1e71, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x6cef, gbc.sp());
        EXPECT(0x1e73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01C7
        gbc.setState(0x25a5, 0xb7b1, 0xed20, 0x5153, 0xbcce, 0xbb60, 0x0, 0x1);
        gbc.writeMem(0x25a5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xb7b1, gbc.sp());
        EXPECT(0x25a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01C8
        gbc.setState(0xdf2a, 0x1290, 0x5560, 0x9b07, 0x9d11, 0x1182, 0x1, 0x0);
        gbc.writeMem(0xdf2a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x1290, gbc.sp());
        EXPECT(0xdf2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf2a));
        EXPECT(0xcd, gbc.readMem(0xdf2b));
        // CB CD 01C9
        gbc.setState(0xc55b, 0x277, 0xeff0, 0xa5a2, 0x969b, 0x7d43, 0x0, 0x0);
        gbc.writeMem(0xc55b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x277, gbc.sp());
        EXPECT(0xc55d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc55b));
        EXPECT(0xcd, gbc.readMem(0xc55c));
        // CB CD 01CA
        gbc.setState(0xa0a1, 0xd068, 0x7670, 0x23c6, 0x5f44, 0x6985, 0x1, 0x0);
        gbc.writeMem(0xa0a1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xd068, gbc.sp());
        EXPECT(0xa0a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0a1));
        EXPECT(0xcd, gbc.readMem(0xa0a2));
        // CB CD 01CB
        gbc.setState(0x5cbb, 0xecaf, 0x41b0, 0xafaf, 0x363e, 0xd764, 0x0, 0x1);
        gbc.writeMem(0x5cbb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xecaf, gbc.sp());
        EXPECT(0x5cbd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01CC
        gbc.setState(0x3149, 0xd572, 0x2ff0, 0xa020, 0x2c32, 0xcc16, 0x1, 0x1);
        gbc.writeMem(0x3149, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xd572, gbc.sp());
        EXPECT(0x314b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01CD
        gbc.setState(0xea4d, 0x28db, 0x33d0, 0x16fe, 0x9a6f, 0xf26, 0x0, 0x0);
        gbc.writeMem(0xea4d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x28db, gbc.sp());
        EXPECT(0xea4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea4d));
        EXPECT(0xcd, gbc.readMem(0xea4e));
        // CB CD 01CE
        gbc.setState(0x888d, 0xabed, 0x78e0, 0x64f2, 0x3179, 0x7ed0, 0x0, 0x0);
        gbc.writeMem(0x888d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xabed, gbc.sp());
        EXPECT(0x888f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x888d));
        EXPECT(0xcd, gbc.readMem(0x888e));
        // CB CD 01CF
        gbc.setState(0x936c, 0x2ce7, 0xb190, 0x3731, 0xa1cb, 0x3535, 0x0, 0x1);
        gbc.writeMem(0x936c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x2ce7, gbc.sp());
        EXPECT(0x936e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x936c));
        EXPECT(0xcd, gbc.readMem(0x936d));
        // CB CD 01D0
        gbc.setState(0xc7c5, 0x4134, 0x6b60, 0x8fa3, 0xcfbd, 0xae2, 0x1, 0x0);
        gbc.writeMem(0xc7c5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x4134, gbc.sp());
        EXPECT(0xc7c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7c5));
        EXPECT(0xcd, gbc.readMem(0xc7c6));
        // CB CD 01D1
        gbc.setState(0xaa98, 0xed48, 0xfca0, 0x7938, 0x189b, 0x5558, 0x1, 0x1);
        gbc.writeMem(0xaa98, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xed48, gbc.sp());
        EXPECT(0xaa9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa98));
        EXPECT(0xcd, gbc.readMem(0xaa99));
        // CB CD 01D2
        gbc.setState(0xe5, 0xcea, 0xa3f0, 0xf8a0, 0x80ea, 0x65a5, 0x0, 0x1);
        gbc.writeMem(0xe5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xcea, gbc.sp());
        EXPECT(0xe7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01D3
        gbc.setState(0x258d, 0xaeaa, 0xb130, 0x9a7f, 0x90a5, 0x9a1a, 0x0, 0x1);
        gbc.writeMem(0x258d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xaeaa, gbc.sp());
        EXPECT(0x258f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01D4
        gbc.setState(0xa749, 0x9ab3, 0xc0f0, 0x4ae1, 0xbdd6, 0x2a95, 0x0, 0x0);
        gbc.writeMem(0xa749, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x9ab3, gbc.sp());
        EXPECT(0xa74b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa749));
        EXPECT(0xcd, gbc.readMem(0xa74a));
        // CB CD 01D5
        gbc.setState(0x57ff, 0xdd0, 0x2ab0, 0xb8d6, 0x4ee7, 0x817c, 0x1, 0x0);
        gbc.writeMem(0x57ff, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xdd0, gbc.sp());
        EXPECT(0x5801, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01D6
        gbc.setState(0x8f4b, 0xa29e, 0xd2b0, 0x1edb, 0x2e6f, 0x85a3, 0x1, 0x0);
        gbc.writeMem(0x8f4b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xa29e, gbc.sp());
        EXPECT(0x8f4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f4b));
        EXPECT(0xcd, gbc.readMem(0x8f4c));
        // CB CD 01D7
        gbc.setState(0x7ea, 0xcac5, 0x27c0, 0x5ec, 0xad21, 0xbc07, 0x1, 0x1);
        gbc.writeMem(0x7ea, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xcac5, gbc.sp());
        EXPECT(0x7ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01D8
        gbc.setState(0xce35, 0xfffb, 0x2680, 0x54d9, 0x5a56, 0xbc47, 0x0, 0x1);
        gbc.writeMem(0xce35, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xfffb, gbc.sp());
        EXPECT(0xce37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce35));
        EXPECT(0xcd, gbc.readMem(0xce36));
        // CB CD 01D9
        gbc.setState(0x5c0e, 0x78d0, 0x42a0, 0x982b, 0x8ba, 0x4b15, 0x0, 0x0);
        gbc.writeMem(0x5c0e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x78d0, gbc.sp());
        EXPECT(0x5c10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01DA
        gbc.setState(0x547, 0x1034, 0xea70, 0x5b8c, 0x573a, 0x1980, 0x0, 0x1);
        gbc.writeMem(0x547, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x1034, gbc.sp());
        EXPECT(0x549, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01DB
        gbc.setState(0x1ed1, 0xc45f, 0x9a00, 0x5475, 0xca0c, 0xb79a, 0x0, 0x0);
        gbc.writeMem(0x1ed1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xc45f, gbc.sp());
        EXPECT(0x1ed3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01DD
        gbc.setState(0x4a2c, 0xeaa1, 0xf2f0, 0x548c, 0x15a2, 0x63b3, 0x1, 0x1);
        gbc.writeMem(0x4a2c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xeaa1, gbc.sp());
        EXPECT(0x4a2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01DE
        gbc.setState(0x7574, 0xd99b, 0xa8c0, 0x882, 0x2716, 0x22ed, 0x1, 0x1);
        gbc.writeMem(0x7574, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xd99b, gbc.sp());
        EXPECT(0x7576, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01DF
        gbc.setState(0xb6b1, 0x3e0, 0x41f0, 0x49c2, 0x5fb3, 0xf080, 0x1, 0x1);
        gbc.writeMem(0xb6b1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x3e0, gbc.sp());
        EXPECT(0xb6b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6b1));
        EXPECT(0xcd, gbc.readMem(0xb6b2));
        // CB CD 01E0
        gbc.setState(0x7b94, 0xe23d, 0x2170, 0x55a0, 0xa444, 0x5570, 0x0, 0x0);
        gbc.writeMem(0x7b94, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xe23d, gbc.sp());
        EXPECT(0x7b96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01E1
        gbc.setState(0x8524, 0xea48, 0x9860, 0xd186, 0x31ef, 0xf572, 0x0, 0x1);
        gbc.writeMem(0x8524, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xea48, gbc.sp());
        EXPECT(0x8526, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8524));
        EXPECT(0xcd, gbc.readMem(0x8525));
        // CB CD 01E2
        gbc.setState(0x5c42, 0x6774, 0xd10, 0x9c14, 0x7c11, 0x4f59, 0x1, 0x0);
        gbc.writeMem(0x5c42, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x6774, gbc.sp());
        EXPECT(0x5c44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01E3
        gbc.setState(0xd9a4, 0x7eaa, 0x5370, 0x38cf, 0xdfaa, 0x8545, 0x1, 0x1);
        gbc.writeMem(0xd9a4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x7eaa, gbc.sp());
        EXPECT(0xd9a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9a4));
        EXPECT(0xcd, gbc.readMem(0xd9a5));
        // CB CD 01E4
        gbc.setState(0xc094, 0x5a26, 0x55f0, 0x9550, 0xfcc9, 0x685, 0x0, 0x0);
        gbc.writeMem(0xc094, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x5a26, gbc.sp());
        EXPECT(0xc096, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc094));
        EXPECT(0xcd, gbc.readMem(0xc095));
        // CB CD 01E5
        gbc.setState(0x76cf, 0xdb00, 0xc4e0, 0x4aee, 0x75ba, 0xbc67, 0x1, 0x0);
        gbc.writeMem(0x76cf, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xdb00, gbc.sp());
        EXPECT(0x76d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01E6
        gbc.setState(0x9348, 0x97e8, 0xc230, 0xaac9, 0x8f6d, 0x909f, 0x1, 0x1);
        gbc.writeMem(0x9348, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x97e8, gbc.sp());
        EXPECT(0x934a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9348));
        EXPECT(0xcd, gbc.readMem(0x9349));
        // CB CD 01E7
        gbc.setState(0x568d, 0xc330, 0xd180, 0x7884, 0x128, 0xd71b, 0x1, 0x1);
        gbc.writeMem(0x568d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xc330, gbc.sp());
        EXPECT(0x568f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01E8
        gbc.setState(0x75e8, 0x1970, 0x3980, 0x4910, 0x186f, 0xa496, 0x0, 0x0);
        gbc.writeMem(0x75e8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x1970, gbc.sp());
        EXPECT(0x75ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01E9
        gbc.setState(0x9cc8, 0xb495, 0x1150, 0xf459, 0x384d, 0x7f6, 0x1, 0x1);
        gbc.writeMem(0x9cc8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xb495, gbc.sp());
        EXPECT(0x9cca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cc8));
        EXPECT(0xcd, gbc.readMem(0x9cc9));
        // CB CD 01EA
        gbc.setState(0x85a5, 0x34b1, 0x5cd0, 0x7c6d, 0x44c3, 0x8203, 0x1, 0x1);
        gbc.writeMem(0x85a5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x34b1, gbc.sp());
        EXPECT(0x85a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85a5));
        EXPECT(0xcd, gbc.readMem(0x85a6));
        // CB CD 01EB
        gbc.setState(0xef29, 0x8c5e, 0xcbd0, 0xa3fd, 0x55d6, 0x3e0a, 0x1, 0x0);
        gbc.writeMem(0xef29, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x8c5e, gbc.sp());
        EXPECT(0xef2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef29));
        EXPECT(0xcd, gbc.readMem(0xef2a));
        // CB CD 01EC
        gbc.setState(0xabb3, 0xd009, 0x3eb0, 0x6c67, 0x1427, 0x727f, 0x1, 0x1);
        gbc.writeMem(0xabb3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xd009, gbc.sp());
        EXPECT(0xabb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabb3));
        EXPECT(0xcd, gbc.readMem(0xabb4));
        // CB CD 01ED
        gbc.setState(0x6f47, 0xd5c9, 0x1c00, 0x5219, 0xfb7a, 0x7238, 0x0, 0x0);
        gbc.writeMem(0x6f47, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xd5c9, gbc.sp());
        EXPECT(0x6f49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01EE
        gbc.setState(0x6b37, 0xd7ca, 0xdc80, 0xc86e, 0xf85c, 0xb116, 0x0, 0x0);
        gbc.writeMem(0x6b37, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xd7ca, gbc.sp());
        EXPECT(0x6b39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01EF
        gbc.setState(0x1104, 0xcc28, 0x6420, 0x649b, 0x24f, 0x8259, 0x0, 0x0);
        gbc.writeMem(0x1104, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xcc28, gbc.sp());
        EXPECT(0x1106, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01F0
        gbc.setState(0x32ce, 0x4cab, 0x93c0, 0x2207, 0x47d8, 0x48fe, 0x1, 0x1);
        gbc.writeMem(0x32ce, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x4cab, gbc.sp());
        EXPECT(0x32d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01F1
        gbc.setState(0x22da, 0xb158, 0x6540, 0xcdac, 0xaff8, 0xa563, 0x0, 0x1);
        gbc.writeMem(0x22da, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xb158, gbc.sp());
        EXPECT(0x22dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01F3
        gbc.setState(0x6c60, 0xc0f5, 0xd4e0, 0x125d, 0x1ad6, 0xe614, 0x1, 0x1);
        gbc.writeMem(0x6c60, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xc0f5, gbc.sp());
        EXPECT(0x6c62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01F4
        gbc.setState(0xa837, 0xb544, 0x74e0, 0xa182, 0x13e9, 0x7876, 0x1, 0x1);
        gbc.writeMem(0xa837, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xb544, gbc.sp());
        EXPECT(0xa839, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa837));
        EXPECT(0xcd, gbc.readMem(0xa838));
        // CB CD 01F5
        gbc.setState(0x182c, 0xc750, 0x9ad0, 0xd611, 0x2960, 0xd70e, 0x1, 0x1);
        gbc.writeMem(0x182c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xc750, gbc.sp());
        EXPECT(0x182e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01F6
        gbc.setState(0xd8f, 0xa464, 0x4ad0, 0x8792, 0xb4c1, 0xae84, 0x0, 0x1);
        gbc.writeMem(0xd8f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xa464, gbc.sp());
        EXPECT(0xd91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01F7
        gbc.setState(0x2383, 0xdb3b, 0xf720, 0x89fb, 0xe965, 0x954f, 0x0, 0x1);
        gbc.writeMem(0x2383, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xdb3b, gbc.sp());
        EXPECT(0x2385, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01F8
        gbc.setState(0xa78e, 0xb98e, 0xa4a0, 0xa515, 0x71d3, 0xa396, 0x1, 0x0);
        gbc.writeMem(0xa78e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xb98e, gbc.sp());
        EXPECT(0xa790, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa78e));
        EXPECT(0xcd, gbc.readMem(0xa78f));
        // CB CD 01F9
        gbc.setState(0x3acd, 0x1e8f, 0xd9e0, 0x6a65, 0x62ef, 0x2924, 0x1, 0x1);
        gbc.writeMem(0x3acd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x1e8f, gbc.sp());
        EXPECT(0x3acf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01FA
        gbc.setState(0xa93d, 0x433d, 0x8b70, 0x5881, 0x4b51, 0xf2dd, 0x0, 0x0);
        gbc.writeMem(0xa93d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x433d, gbc.sp());
        EXPECT(0xa93f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa93d));
        EXPECT(0xcd, gbc.readMem(0xa93e));
        // CB CD 01FB
        gbc.setState(0x1ccc, 0x41a5, 0x4610, 0xc513, 0xcff, 0xbbbb, 0x1, 0x0);
        gbc.writeMem(0x1ccc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x41a5, gbc.sp());
        EXPECT(0x1cce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01FC
        gbc.setState(0x4b85, 0x1c7, 0x2020, 0x99f4, 0x85f4, 0x9a78, 0x0, 0x1);
        gbc.writeMem(0x4b85, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x1c7, gbc.sp());
        EXPECT(0x4b87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 01FD
        gbc.setState(0xc8cf, 0x92e8, 0xc0a0, 0xffb2, 0xab5d, 0x5249, 0x1, 0x1);
        gbc.writeMem(0xc8cf, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x92e8, gbc.sp());
        EXPECT(0xc8d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8cf));
        EXPECT(0xcd, gbc.readMem(0xc8d0));
        // CB CD 01FE
        gbc.setState(0x140d, 0x2294, 0xdd30, 0x2983, 0x4989, 0x67cc, 0x0, 0x1);
        gbc.writeMem(0x140d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x2294, gbc.sp());
        EXPECT(0x140f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 01FF
        gbc.setState(0x92a5, 0xadeb, 0xf070, 0x3f6c, 0x1ff2, 0x425a, 0x1, 0x1);
        gbc.writeMem(0x92a5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xadeb, gbc.sp());
        EXPECT(0x92a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92a5));
        EXPECT(0xcd, gbc.readMem(0x92a6));
        // CB CD 0200
        gbc.setState(0x48ad, 0x504f, 0x2250, 0xc55a, 0x7f1e, 0xe202, 0x0, 0x0);
        gbc.writeMem(0x48ad, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x504f, gbc.sp());
        EXPECT(0x48af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0201
        gbc.setState(0xdb02, 0xc8c0, 0xe6b0, 0xb340, 0xb6bd, 0x3a58, 0x1, 0x1);
        gbc.writeMem(0xdb02, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xc8c0, gbc.sp());
        EXPECT(0xdb04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb02));
        EXPECT(0xcd, gbc.readMem(0xdb03));
        // CB CD 0202
        gbc.setState(0xe2c1, 0x62b4, 0x2a10, 0x7225, 0x4759, 0x72b5, 0x1, 0x0);
        gbc.writeMem(0xe2c1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x62b4, gbc.sp());
        EXPECT(0xe2c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2c1));
        EXPECT(0xcd, gbc.readMem(0xe2c2));
        // CB CD 0203
        gbc.setState(0x5d8, 0x377c, 0x7850, 0x2ea0, 0x7672, 0x3a04, 0x1, 0x1);
        gbc.writeMem(0x5d8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x377c, gbc.sp());
        EXPECT(0x5da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0204
        gbc.setState(0x1646, 0x2180, 0xde70, 0x645e, 0xa796, 0x6172, 0x0, 0x0);
        gbc.writeMem(0x1646, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x2180, gbc.sp());
        EXPECT(0x1648, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0205
        gbc.setState(0x9b0d, 0x2b34, 0x4780, 0xcb84, 0x51c5, 0x6043, 0x1, 0x1);
        gbc.writeMem(0x9b0d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x2b34, gbc.sp());
        EXPECT(0x9b0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b0d));
        EXPECT(0xcd, gbc.readMem(0x9b0e));
        // CB CD 0206
        gbc.setState(0x297d, 0x58e1, 0xdb10, 0x5f56, 0x7aaf, 0x21a7, 0x1, 0x0);
        gbc.writeMem(0x297d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x58e1, gbc.sp());
        EXPECT(0x297f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0207
        gbc.setState(0x4910, 0x53d3, 0xa1c0, 0xf4d3, 0xab1b, 0x7590, 0x0, 0x0);
        gbc.writeMem(0x4910, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x53d3, gbc.sp());
        EXPECT(0x4912, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0208
        gbc.setState(0x30a2, 0x4832, 0xdb90, 0x21e5, 0x13f7, 0x92e0, 0x1, 0x1);
        gbc.writeMem(0x30a2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x4832, gbc.sp());
        EXPECT(0x30a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 020A
        gbc.setState(0xe13, 0x25a0, 0x34c0, 0x68f6, 0xbebd, 0xfc9d, 0x1, 0x1);
        gbc.writeMem(0xe13, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x25a0, gbc.sp());
        EXPECT(0xe15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 020B
        gbc.setState(0x6d89, 0xf256, 0x3420, 0xbb4a, 0xc95b, 0x3eea, 0x0, 0x0);
        gbc.writeMem(0x6d89, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xf256, gbc.sp());
        EXPECT(0x6d8b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 020C
        gbc.setState(0xc56b, 0xc6db, 0x90d0, 0x6caf, 0xb28b, 0xc394, 0x0, 0x1);
        gbc.writeMem(0xc56b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xc6db, gbc.sp());
        EXPECT(0xc56d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc56b));
        EXPECT(0xcd, gbc.readMem(0xc56c));
        // CB CD 020D
        gbc.setState(0x5931, 0xeb7c, 0x9ac0, 0x8b2f, 0xe467, 0x2741, 0x0, 0x0);
        gbc.writeMem(0x5931, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xeb7c, gbc.sp());
        EXPECT(0x5933, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 020E
        gbc.setState(0xe371, 0x91ab, 0x4df0, 0x3a3d, 0xb1a8, 0x49a9, 0x1, 0x1);
        gbc.writeMem(0xe371, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x91ab, gbc.sp());
        EXPECT(0xe373, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe371));
        EXPECT(0xcd, gbc.readMem(0xe372));
        // CB CD 020F
        gbc.setState(0xbe98, 0xe95f, 0x3a80, 0xf1b5, 0xf8ca, 0xe979, 0x1, 0x0);
        gbc.writeMem(0xbe98, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xe95f, gbc.sp());
        EXPECT(0xbe9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe98));
        EXPECT(0xcd, gbc.readMem(0xbe99));
        // CB CD 0210
        gbc.setState(0x8bfb, 0x2012, 0x45a0, 0xfc87, 0x37d6, 0xdf2, 0x0, 0x0);
        gbc.writeMem(0x8bfb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x2012, gbc.sp());
        EXPECT(0x8bfd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bfb));
        EXPECT(0xcd, gbc.readMem(0x8bfc));
        // CB CD 0211
        gbc.setState(0x94f0, 0x812f, 0x7050, 0x1588, 0x71eb, 0xfaae, 0x0, 0x0);
        gbc.writeMem(0x94f0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x812f, gbc.sp());
        EXPECT(0x94f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94f0));
        EXPECT(0xcd, gbc.readMem(0x94f1));
        // CB CD 0212
        gbc.setState(0xb42f, 0xe8c, 0x94b0, 0x673b, 0x4fac, 0x1e19, 0x1, 0x1);
        gbc.writeMem(0xb42f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xe8c, gbc.sp());
        EXPECT(0xb431, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb42f));
        EXPECT(0xcd, gbc.readMem(0xb430));
        // CB CD 0213
        gbc.setState(0x1b99, 0x8332, 0x6ee0, 0x8454, 0x4f04, 0x4ac8, 0x1, 0x1);
        gbc.writeMem(0x1b99, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x8332, gbc.sp());
        EXPECT(0x1b9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0214
        gbc.setState(0x77bd, 0x354e, 0xa850, 0xc38d, 0x2a2d, 0x270, 0x1, 0x1);
        gbc.writeMem(0x77bd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x354e, gbc.sp());
        EXPECT(0x77bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0215
        gbc.setState(0xee81, 0x2b63, 0xafb0, 0x436f, 0x9401, 0x1ef4, 0x1, 0x1);
        gbc.writeMem(0xee81, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x2b63, gbc.sp());
        EXPECT(0xee83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee81));
        EXPECT(0xcd, gbc.readMem(0xee82));
        // CB CD 0216
        gbc.setState(0xbf0c, 0x2f3c, 0x30f0, 0x420c, 0x31a3, 0x70f1, 0x0, 0x1);
        gbc.writeMem(0xbf0c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x2f3c, gbc.sp());
        EXPECT(0xbf0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf0c));
        EXPECT(0xcd, gbc.readMem(0xbf0d));
        // CB CD 0218
        gbc.setState(0x140c, 0x582b, 0x1700, 0x1062, 0x453a, 0xba0b, 0x1, 0x1);
        gbc.writeMem(0x140c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x582b, gbc.sp());
        EXPECT(0x140e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0219
        gbc.setState(0xaf90, 0x282a, 0x36c0, 0x1691, 0x1245, 0xdc29, 0x1, 0x1);
        gbc.writeMem(0xaf90, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x282a, gbc.sp());
        EXPECT(0xaf92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf90));
        EXPECT(0xcd, gbc.readMem(0xaf91));
        // CB CD 021A
        gbc.setState(0xafe5, 0x7be8, 0x61c0, 0x7368, 0xd688, 0xdeb1, 0x1, 0x0);
        gbc.writeMem(0xafe5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x7be8, gbc.sp());
        EXPECT(0xafe7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafe5));
        EXPECT(0xcd, gbc.readMem(0xafe6));
        // CB CD 021B
        gbc.setState(0x534e, 0xb528, 0xed60, 0xde32, 0x5db3, 0xd543, 0x1, 0x1);
        gbc.writeMem(0x534e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xb528, gbc.sp());
        EXPECT(0x5350, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 021C
        gbc.setState(0xd51c, 0xc37c, 0x90a0, 0x71da, 0xe146, 0x5179, 0x1, 0x0);
        gbc.writeMem(0xd51c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xc37c, gbc.sp());
        EXPECT(0xd51e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd51c));
        EXPECT(0xcd, gbc.readMem(0xd51d));
        // CB CD 021D
        gbc.setState(0x3c1d, 0x1477, 0xd040, 0x7cac, 0x891c, 0xd2ff, 0x0, 0x0);
        gbc.writeMem(0x3c1d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x1477, gbc.sp());
        EXPECT(0x3c1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 021E
        gbc.setState(0x3bcc, 0x429d, 0xb7f0, 0x276e, 0xb3ad, 0x4d92, 0x1, 0x0);
        gbc.writeMem(0x3bcc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x429d, gbc.sp());
        EXPECT(0x3bce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 021F
        gbc.setState(0x136a, 0xf559, 0x3b50, 0xa180, 0x15df, 0xdb24, 0x1, 0x0);
        gbc.writeMem(0x136a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xf559, gbc.sp());
        EXPECT(0x136c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0220
        gbc.setState(0x9efe, 0x36f9, 0x4830, 0x91e9, 0x6949, 0x35bd, 0x0, 0x1);
        gbc.writeMem(0x9efe, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x36f9, gbc.sp());
        EXPECT(0x9f00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9efe));
        EXPECT(0xcd, gbc.readMem(0x9eff));
        // CB CD 0221
        gbc.setState(0x3c80, 0x511, 0xd660, 0x1d60, 0xa953, 0xb429, 0x0, 0x0);
        gbc.writeMem(0x3c80, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x511, gbc.sp());
        EXPECT(0x3c82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0222
        gbc.setState(0x8357, 0x1c54, 0x2010, 0x8f33, 0x5049, 0xf44e, 0x0, 0x0);
        gbc.writeMem(0x8357, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x1c54, gbc.sp());
        EXPECT(0x8359, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8357));
        EXPECT(0xcd, gbc.readMem(0x8358));
        // CB CD 0223
        gbc.setState(0x8a43, 0xa7d6, 0xa880, 0x1ac8, 0x500c, 0xf7a1, 0x1, 0x1);
        gbc.writeMem(0x8a43, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xa7d6, gbc.sp());
        EXPECT(0x8a45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a43));
        EXPECT(0xcd, gbc.readMem(0x8a44));
        // CB CD 0224
        gbc.setState(0xa2b1, 0x5062, 0x3e30, 0x97d3, 0x4233, 0x8a9a, 0x0, 0x0);
        gbc.writeMem(0xa2b1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x5062, gbc.sp());
        EXPECT(0xa2b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2b1));
        EXPECT(0xcd, gbc.readMem(0xa2b2));
        // CB CD 0225
        gbc.setState(0xcdcf, 0x1c68, 0xe840, 0x67aa, 0x5045, 0x5ad6, 0x0, 0x1);
        gbc.writeMem(0xcdcf, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x1c68, gbc.sp());
        EXPECT(0xcdd1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdcf));
        EXPECT(0xcd, gbc.readMem(0xcdd0));
        // CB CD 0226
        gbc.setState(0x8f9c, 0x6d75, 0x2e0, 0xcd89, 0x5419, 0x47ff, 0x1, 0x1);
        gbc.writeMem(0x8f9c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x6d75, gbc.sp());
        EXPECT(0x8f9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f9c));
        EXPECT(0xcd, gbc.readMem(0x8f9d));
        // CB CD 0227
        gbc.setState(0xe1ad, 0xa32d, 0x9920, 0xbb79, 0xd47a, 0x6e70, 0x0, 0x1);
        gbc.writeMem(0xe1ad, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xa32d, gbc.sp());
        EXPECT(0xe1af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1ad));
        EXPECT(0xcd, gbc.readMem(0xe1ae));
        // CB CD 0228
        gbc.setState(0x819e, 0xa6ff, 0x9d50, 0x3fbe, 0x3d96, 0xe31b, 0x1, 0x0);
        gbc.writeMem(0x819e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xa6ff, gbc.sp());
        EXPECT(0x81a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x819e));
        EXPECT(0xcd, gbc.readMem(0x819f));
        // CB CD 0229
        gbc.setState(0x5f09, 0x6b64, 0x4580, 0x5526, 0x504, 0x3cec, 0x0, 0x1);
        gbc.writeMem(0x5f09, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x6b64, gbc.sp());
        EXPECT(0x5f0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 022A
        gbc.setState(0x4187, 0x92d4, 0x3d70, 0x508a, 0xba45, 0x6f95, 0x0, 0x1);
        gbc.writeMem(0x4187, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x92d4, gbc.sp());
        EXPECT(0x4189, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 022B
        gbc.setState(0xe8eb, 0x7979, 0x3830, 0x36cf, 0x621a, 0x38a, 0x0, 0x1);
        gbc.writeMem(0xe8eb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x7979, gbc.sp());
        EXPECT(0xe8ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8eb));
        EXPECT(0xcd, gbc.readMem(0xe8ec));
        // CB CD 022C
        gbc.setState(0x8948, 0xcb46, 0xb010, 0xe8b1, 0xa84d, 0x8a98, 0x1, 0x1);
        gbc.writeMem(0x8948, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xcb46, gbc.sp());
        EXPECT(0x894a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8948));
        EXPECT(0xcd, gbc.readMem(0x8949));
        // CB CD 022D
        gbc.setState(0xe8f6, 0xf778, 0x17f0, 0xa1db, 0xceb9, 0x42a, 0x0, 0x1);
        gbc.writeMem(0xe8f6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xf778, gbc.sp());
        EXPECT(0xe8f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8f6));
        EXPECT(0xcd, gbc.readMem(0xe8f7));
        // CB CD 022E
        gbc.setState(0xd885, 0xa70d, 0xaf20, 0x6efe, 0xc956, 0xa248, 0x0, 0x0);
        gbc.writeMem(0xd885, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xa70d, gbc.sp());
        EXPECT(0xd887, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd885));
        EXPECT(0xcd, gbc.readMem(0xd886));
        // CB CD 022F
        gbc.setState(0xe6f, 0x8f09, 0x44c0, 0x23a1, 0xac17, 0xc2d3, 0x0, 0x1);
        gbc.writeMem(0xe6f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x8f09, gbc.sp());
        EXPECT(0xe71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0230
        gbc.setState(0xdff8, 0xda5e, 0xc640, 0xd812, 0xf3d6, 0x14d2, 0x1, 0x1);
        gbc.writeMem(0xdff8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xda5e, gbc.sp());
        EXPECT(0xdffa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdff8));
        EXPECT(0xcd, gbc.readMem(0xdff9));
        // CB CD 0231
        gbc.setState(0x2a51, 0x7a5, 0x8840, 0x4972, 0x67e3, 0x893c, 0x0, 0x0);
        gbc.writeMem(0x2a51, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x7a5, gbc.sp());
        EXPECT(0x2a53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0232
        gbc.setState(0x9f3f, 0xb2c9, 0x50b0, 0xdf3c, 0x523c, 0x4e82, 0x1, 0x1);
        gbc.writeMem(0x9f3f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xb2c9, gbc.sp());
        EXPECT(0x9f41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f3f));
        EXPECT(0xcd, gbc.readMem(0x9f40));
        // CB CD 0233
        gbc.setState(0x1057, 0xbc5b, 0xa560, 0xc7f2, 0xb3e, 0x9682, 0x1, 0x1);
        gbc.writeMem(0x1057, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xbc5b, gbc.sp());
        EXPECT(0x1059, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0234
        gbc.setState(0x15ec, 0xfd77, 0x2940, 0x84bc, 0x219c, 0x2a49, 0x1, 0x1);
        gbc.writeMem(0x15ec, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xfd77, gbc.sp());
        EXPECT(0x15ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0235
        gbc.setState(0xb43d, 0x9a80, 0x5510, 0x551a, 0xf024, 0x76b8, 0x1, 0x0);
        gbc.writeMem(0xb43d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x9a80, gbc.sp());
        EXPECT(0xb43f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb43d));
        EXPECT(0xcd, gbc.readMem(0xb43e));
        // CB CD 0236
        gbc.setState(0x1c1a, 0x57d6, 0x7150, 0x88bd, 0x86f7, 0xb3, 0x0, 0x0);
        gbc.writeMem(0x1c1a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x57d6, gbc.sp());
        EXPECT(0x1c1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0237
        gbc.setState(0x4241, 0x6487, 0x61d0, 0x384d, 0xc459, 0x8e08, 0x0, 0x1);
        gbc.writeMem(0x4241, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x6487, gbc.sp());
        EXPECT(0x4243, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0238
        gbc.setState(0x5d8f, 0x53af, 0x6b30, 0x8caf, 0x94b5, 0x9740, 0x1, 0x1);
        gbc.writeMem(0x5d8f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x53af, gbc.sp());
        EXPECT(0x5d91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0239
        gbc.setState(0xd7f0, 0x7d1a, 0xad10, 0xab05, 0x7814, 0xa9bc, 0x1, 0x1);
        gbc.writeMem(0xd7f0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x7d1a, gbc.sp());
        EXPECT(0xd7f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7f0));
        EXPECT(0xcd, gbc.readMem(0xd7f1));
        // CB CD 023A
        gbc.setState(0x7fd7, 0xeb46, 0x1800, 0xf5a5, 0x33b3, 0x67c0, 0x1, 0x1);
        gbc.writeMem(0x7fd7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xeb46, gbc.sp());
        EXPECT(0x7fd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 023B
        gbc.setState(0xa13b, 0x9acd, 0x9840, 0x65b3, 0x5fc6, 0x804d, 0x1, 0x1);
        gbc.writeMem(0xa13b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x9acd, gbc.sp());
        EXPECT(0xa13d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa13b));
        EXPECT(0xcd, gbc.readMem(0xa13c));
        // CB CD 023C
        gbc.setState(0xaf7c, 0xf532, 0xb060, 0xe070, 0xa3f7, 0x4821, 0x1, 0x1);
        gbc.writeMem(0xaf7c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xf532, gbc.sp());
        EXPECT(0xaf7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf7c));
        EXPECT(0xcd, gbc.readMem(0xaf7d));
        // CB CD 023D
        gbc.setState(0x2114, 0x7b22, 0x8510, 0x6b16, 0x6a8b, 0xfeb3, 0x1, 0x0);
        gbc.writeMem(0x2114, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x7b22, gbc.sp());
        EXPECT(0x2116, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 023E
        gbc.setState(0x1304, 0xfc93, 0xc670, 0x47f6, 0x528d, 0x725d, 0x1, 0x0);
        gbc.writeMem(0x1304, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xfc93, gbc.sp());
        EXPECT(0x1306, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 023F
        gbc.setState(0x2358, 0x18d0, 0xc040, 0xbe65, 0xc1de, 0x6bcf, 0x1, 0x0);
        gbc.writeMem(0x2358, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x18d0, gbc.sp());
        EXPECT(0x235a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0240
        gbc.setState(0xcaa2, 0x969, 0xcae0, 0xeb2, 0xca87, 0x24bc, 0x1, 0x1);
        gbc.writeMem(0xcaa2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x969, gbc.sp());
        EXPECT(0xcaa4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaa2));
        EXPECT(0xcd, gbc.readMem(0xcaa3));
        // CB CD 0241
        gbc.setState(0xae34, 0x88b4, 0x8b0, 0x880a, 0x7320, 0x4594, 0x0, 0x1);
        gbc.writeMem(0xae34, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x88b4, gbc.sp());
        EXPECT(0xae36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae34));
        EXPECT(0xcd, gbc.readMem(0xae35));
        // CB CD 0242
        gbc.setState(0xca57, 0xc7e8, 0x7e70, 0x6b82, 0x36d8, 0x7e6a, 0x0, 0x1);
        gbc.writeMem(0xca57, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xc7e8, gbc.sp());
        EXPECT(0xca59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca57));
        EXPECT(0xcd, gbc.readMem(0xca58));
        // CB CD 0243
        gbc.setState(0x31a7, 0xa337, 0x9520, 0xc91c, 0x3294, 0x6fd5, 0x0, 0x1);
        gbc.writeMem(0x31a7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xa337, gbc.sp());
        EXPECT(0x31a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0244
        gbc.setState(0xb825, 0xfc8a, 0x4100, 0x5818, 0xfea1, 0x5130, 0x1, 0x0);
        gbc.writeMem(0xb825, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xfc8a, gbc.sp());
        EXPECT(0xb827, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb825));
        EXPECT(0xcd, gbc.readMem(0xb826));
        // CB CD 0245
        gbc.setState(0xf73, 0x4644, 0xa710, 0xf0d3, 0x963d, 0x40e, 0x1, 0x1);
        gbc.writeMem(0xf73, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x4644, gbc.sp());
        EXPECT(0xf75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0246
        gbc.setState(0x71d7, 0xfda9, 0xcca0, 0x5465, 0xf5f2, 0x9f46, 0x1, 0x1);
        gbc.writeMem(0x71d7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xfda9, gbc.sp());
        EXPECT(0x71d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0247
        gbc.setState(0xd18d, 0xd06e, 0xc4f0, 0x2184, 0xc8cf, 0x87d3, 0x0, 0x1);
        gbc.writeMem(0xd18d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xd06e, gbc.sp());
        EXPECT(0xd18f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd18d));
        EXPECT(0xcd, gbc.readMem(0xd18e));
        // CB CD 0248
        gbc.setState(0x64d7, 0xf01f, 0xb9b0, 0xc3e5, 0x5b16, 0x11a0, 0x0, 0x1);
        gbc.writeMem(0x64d7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xf01f, gbc.sp());
        EXPECT(0x64d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0249
        gbc.setState(0x8dad, 0x8c49, 0x21a0, 0xfbe5, 0x46f3, 0x3ef5, 0x0, 0x1);
        gbc.writeMem(0x8dad, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x8c49, gbc.sp());
        EXPECT(0x8daf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dad));
        EXPECT(0xcd, gbc.readMem(0x8dae));
        // CB CD 024A
        gbc.setState(0x512e, 0xc33f, 0x86c0, 0xb7e1, 0x7d9c, 0x8585, 0x0, 0x1);
        gbc.writeMem(0x512e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xc33f, gbc.sp());
        EXPECT(0x5130, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 024B
        gbc.setState(0x5458, 0x52d0, 0x7bc0, 0x848a, 0xa4c4, 0x25ab, 0x1, 0x0);
        gbc.writeMem(0x5458, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x52d0, gbc.sp());
        EXPECT(0x545a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 024C
        gbc.setState(0xec37, 0xf45d, 0x1c30, 0x2650, 0xa93c, 0x8367, 0x0, 0x0);
        gbc.writeMem(0xec37, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xf45d, gbc.sp());
        EXPECT(0xec39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec37));
        EXPECT(0xcd, gbc.readMem(0xec38));
        // CB CD 024E
        gbc.setState(0x6c88, 0x1950, 0x6a80, 0x6a0c, 0x444e, 0x3204, 0x0, 0x1);
        gbc.writeMem(0x6c88, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x1950, gbc.sp());
        EXPECT(0x6c8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0250
        gbc.setState(0x3b3b, 0xe23f, 0x26d0, 0x9825, 0xde39, 0xac26, 0x0, 0x1);
        gbc.writeMem(0x3b3b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xe23f, gbc.sp());
        EXPECT(0x3b3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0251
        gbc.setState(0x7c48, 0x6878, 0xe530, 0x3318, 0x3694, 0x607b, 0x0, 0x0);
        gbc.writeMem(0x7c48, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x6878, gbc.sp());
        EXPECT(0x7c4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0252
        gbc.setState(0xc822, 0xfbe2, 0xae0, 0xb3f7, 0xe8b8, 0x67e6, 0x1, 0x0);
        gbc.writeMem(0xc822, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xfbe2, gbc.sp());
        EXPECT(0xc824, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc822));
        EXPECT(0xcd, gbc.readMem(0xc823));
        // CB CD 0253
        gbc.setState(0x3e78, 0x2c4b, 0x8900, 0xa963, 0xadf, 0x6584, 0x1, 0x0);
        gbc.writeMem(0x3e78, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x2c4b, gbc.sp());
        EXPECT(0x3e7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0254
        gbc.setState(0xe0ca, 0x4c1a, 0x6000, 0xb63e, 0x4396, 0xb589, 0x1, 0x1);
        gbc.writeMem(0xe0ca, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x4c1a, gbc.sp());
        EXPECT(0xe0cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0ca));
        EXPECT(0xcd, gbc.readMem(0xe0cb));
        // CB CD 0255
        gbc.setState(0x819, 0x42c2, 0x76c0, 0xd0c1, 0x4d6d, 0x6d56, 0x0, 0x0);
        gbc.writeMem(0x819, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x42c2, gbc.sp());
        EXPECT(0x81b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0256
        gbc.setState(0xbc2c, 0x99dc, 0x3ec0, 0x5042, 0xef71, 0x301d, 0x1, 0x0);
        gbc.writeMem(0xbc2c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x99dc, gbc.sp());
        EXPECT(0xbc2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc2c));
        EXPECT(0xcd, gbc.readMem(0xbc2d));
        // CB CD 0257
        gbc.setState(0xa2a6, 0x86f3, 0x720, 0x54b, 0x4c61, 0x906, 0x1, 0x0);
        gbc.writeMem(0xa2a6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x86f3, gbc.sp());
        EXPECT(0xa2a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2a6));
        EXPECT(0xcd, gbc.readMem(0xa2a7));
        // CB CD 0258
        gbc.setState(0x3ec5, 0xe47, 0xd620, 0xa144, 0xa640, 0x2fb0, 0x1, 0x1);
        gbc.writeMem(0x3ec5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xe47, gbc.sp());
        EXPECT(0x3ec7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0259
        gbc.setState(0x9b6, 0xd060, 0xa140, 0x110a, 0xb2fb, 0xa4c3, 0x1, 0x1);
        gbc.writeMem(0x9b6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xd060, gbc.sp());
        EXPECT(0x9b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 025B
        gbc.setState(0x8608, 0xd939, 0xf2e0, 0xefe1, 0x420a, 0xf97f, 0x0, 0x1);
        gbc.writeMem(0x8608, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xd939, gbc.sp());
        EXPECT(0x860a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8608));
        EXPECT(0xcd, gbc.readMem(0x8609));
        // CB CD 025D
        gbc.setState(0x244b, 0x8516, 0x23a0, 0x33ed, 0x3adc, 0xa1b4, 0x1, 0x0);
        gbc.writeMem(0x244b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x8516, gbc.sp());
        EXPECT(0x244d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 025E
        gbc.setState(0xa0d3, 0xdf3b, 0x2f10, 0xdc2e, 0xe322, 0x20a3, 0x0, 0x0);
        gbc.writeMem(0xa0d3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xdf3b, gbc.sp());
        EXPECT(0xa0d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0d3));
        EXPECT(0xcd, gbc.readMem(0xa0d4));
        // CB CD 025F
        gbc.setState(0x4132, 0x918e, 0xac50, 0x215d, 0x9b1d, 0x8623, 0x1, 0x1);
        gbc.writeMem(0x4132, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x918e, gbc.sp());
        EXPECT(0x4134, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0260
        gbc.setState(0x7e92, 0xc32f, 0x7400, 0x988b, 0x9d9a, 0xa58f, 0x0, 0x1);
        gbc.writeMem(0x7e92, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xc32f, gbc.sp());
        EXPECT(0x7e94, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0261
        gbc.setState(0x5791, 0xd746, 0xe4d0, 0xaeb1, 0x7c1f, 0x9d56, 0x1, 0x0);
        gbc.writeMem(0x5791, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xd746, gbc.sp());
        EXPECT(0x5793, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0262
        gbc.setState(0x5906, 0xcfe9, 0xd20, 0x4907, 0x1886, 0xff82, 0x1, 0x0);
        gbc.writeMem(0x5906, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xcfe9, gbc.sp());
        EXPECT(0x5908, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0263
        gbc.setState(0xee67, 0x10b8, 0x150, 0xea3d, 0x1086, 0xcc73, 0x0, 0x0);
        gbc.writeMem(0xee67, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x10b8, gbc.sp());
        EXPECT(0xee69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee67));
        EXPECT(0xcd, gbc.readMem(0xee68));
        // CB CD 0264
        gbc.setState(0x7324, 0x8574, 0xc50, 0xb9bf, 0x3f96, 0x5b75, 0x0, 0x0);
        gbc.writeMem(0x7324, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x8574, gbc.sp());
        EXPECT(0x7326, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0265
        gbc.setState(0x8e84, 0xbdbd, 0x6f40, 0xba7e, 0x303, 0x9d77, 0x1, 0x1);
        gbc.writeMem(0x8e84, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xbdbd, gbc.sp());
        EXPECT(0x8e86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e84));
        EXPECT(0xcd, gbc.readMem(0x8e85));
        // CB CD 0266
        gbc.setState(0xe7ce, 0x43f2, 0x6a10, 0x166b, 0xad7, 0xdf8e, 0x0, 0x1);
        gbc.writeMem(0xe7ce, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x43f2, gbc.sp());
        EXPECT(0xe7d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7ce));
        EXPECT(0xcd, gbc.readMem(0xe7cf));
        // CB CD 0267
        gbc.setState(0xbe47, 0x66, 0x3e90, 0xdd2a, 0xa973, 0xb453, 0x0, 0x1);
        gbc.writeMem(0xbe47, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x66, gbc.sp());
        EXPECT(0xbe49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe47));
        EXPECT(0xcd, gbc.readMem(0xbe48));
        // CB CD 0268
        gbc.setState(0x8152, 0x7842, 0x6600, 0xaa6f, 0xd150, 0x339c, 0x0, 0x0);
        gbc.writeMem(0x8152, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x7842, gbc.sp());
        EXPECT(0x8154, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8152));
        EXPECT(0xcd, gbc.readMem(0x8153));
        // CB CD 0269
        gbc.setState(0x3891, 0x651b, 0xcc00, 0x7a08, 0x6b3b, 0x4b06, 0x1, 0x1);
        gbc.writeMem(0x3891, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x651b, gbc.sp());
        EXPECT(0x3893, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 026A
        gbc.setState(0x947d, 0xbb7e, 0x5710, 0x5170, 0x49fe, 0xa21, 0x0, 0x0);
        gbc.writeMem(0x947d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xbb7e, gbc.sp());
        EXPECT(0x947f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x947d));
        EXPECT(0xcd, gbc.readMem(0x947e));
        // CB CD 026B
        gbc.setState(0x8175, 0xc2f3, 0x5e60, 0xf630, 0x89ce, 0x6a01, 0x1, 0x1);
        gbc.writeMem(0x8175, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xc2f3, gbc.sp());
        EXPECT(0x8177, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8175));
        EXPECT(0xcd, gbc.readMem(0x8176));
        // CB CD 026C
        gbc.setState(0x1465, 0x614d, 0x36f0, 0x8563, 0x3209, 0xf7f7, 0x1, 0x0);
        gbc.writeMem(0x1465, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x614d, gbc.sp());
        EXPECT(0x1467, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 026D
        gbc.setState(0xd4c9, 0x766a, 0x2c10, 0x1b95, 0x76eb, 0x81c1, 0x1, 0x0);
        gbc.writeMem(0xd4c9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x766a, gbc.sp());
        EXPECT(0xd4cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4c9));
        EXPECT(0xcd, gbc.readMem(0xd4ca));
        // CB CD 026E
        gbc.setState(0x843f, 0x6fd3, 0xb120, 0xaf29, 0x5d1e, 0xac69, 0x1, 0x1);
        gbc.writeMem(0x843f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x6fd3, gbc.sp());
        EXPECT(0x8441, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x843f));
        EXPECT(0xcd, gbc.readMem(0x8440));
        // CB CD 026F
        gbc.setState(0x152d, 0xcadf, 0xbf0, 0xea19, 0x88ac, 0xe958, 0x0, 0x1);
        gbc.writeMem(0x152d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xcadf, gbc.sp());
        EXPECT(0x152f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0270
        gbc.setState(0xa527, 0xe186, 0xda40, 0xd8b8, 0x3af5, 0x83cc, 0x0, 0x1);
        gbc.writeMem(0xa527, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xe186, gbc.sp());
        EXPECT(0xa529, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa527));
        EXPECT(0xcd, gbc.readMem(0xa528));
        // CB CD 0271
        gbc.setState(0x95cb, 0x9e2a, 0x66c0, 0x597d, 0xe969, 0xf083, 0x1, 0x0);
        gbc.writeMem(0x95cb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x9e2a, gbc.sp());
        EXPECT(0x95cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95cb));
        EXPECT(0xcd, gbc.readMem(0x95cc));
        // CB CD 0272
        gbc.setState(0x1f9c, 0x1c2d, 0x83d0, 0x81d1, 0x4048, 0x4094, 0x0, 0x1);
        gbc.writeMem(0x1f9c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x1c2d, gbc.sp());
        EXPECT(0x1f9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0273
        gbc.setState(0x5218, 0x2664, 0x9cb0, 0x4e1a, 0xb1e1, 0x4c82, 0x0, 0x0);
        gbc.writeMem(0x5218, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x2664, gbc.sp());
        EXPECT(0x521a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0275
        gbc.setState(0x3528, 0xedc, 0xf8d0, 0xebfa, 0xd6c8, 0x4a12, 0x1, 0x0);
        gbc.writeMem(0x3528, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xedc, gbc.sp());
        EXPECT(0x352a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0276
        gbc.setState(0x5c7e, 0xf91f, 0x2c90, 0x2a1c, 0x268e, 0xc5d1, 0x1, 0x0);
        gbc.writeMem(0x5c7e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xf91f, gbc.sp());
        EXPECT(0x5c80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0277
        gbc.setState(0xae92, 0x3d9d, 0x3c30, 0x208c, 0x74c2, 0x8eed, 0x1, 0x1);
        gbc.writeMem(0xae92, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x3d9d, gbc.sp());
        EXPECT(0xae94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae92));
        EXPECT(0xcd, gbc.readMem(0xae93));
        // CB CD 0278
        gbc.setState(0x63f7, 0x37cc, 0xe430, 0x2a03, 0xc594, 0xcc8c, 0x0, 0x0);
        gbc.writeMem(0x63f7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x37cc, gbc.sp());
        EXPECT(0x63f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0279
        gbc.setState(0xe55c, 0x2958, 0x88d0, 0xb42f, 0xea1d, 0x6492, 0x0, 0x0);
        gbc.writeMem(0xe55c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x2958, gbc.sp());
        EXPECT(0xe55e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe55c));
        EXPECT(0xcd, gbc.readMem(0xe55d));
        // CB CD 027A
        gbc.setState(0xed12, 0xf1ef, 0xc230, 0x2ef0, 0x2a5f, 0xcb47, 0x0, 0x0);
        gbc.writeMem(0xed12, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xf1ef, gbc.sp());
        EXPECT(0xed14, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed12));
        EXPECT(0xcd, gbc.readMem(0xed13));
        // CB CD 027B
        gbc.setState(0x26b7, 0xb7ec, 0x5ea0, 0x1bb3, 0xbc43, 0x5a09, 0x1, 0x1);
        gbc.writeMem(0x26b7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xb7ec, gbc.sp());
        EXPECT(0x26b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 027C
        gbc.setState(0x5599, 0x147, 0x1370, 0xae7e, 0x94b3, 0x8bf7, 0x0, 0x0);
        gbc.writeMem(0x5599, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x147, gbc.sp());
        EXPECT(0x559b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 027D
        gbc.setState(0xc89f, 0xad5, 0xab20, 0xa4f0, 0x2cb8, 0xc07b, 0x1, 0x1);
        gbc.writeMem(0xc89f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xad5, gbc.sp());
        EXPECT(0xc8a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc89f));
        EXPECT(0xcd, gbc.readMem(0xc8a0));
        // CB CD 027E
        gbc.setState(0xae78, 0x7345, 0xedf0, 0xc733, 0xfe92, 0x7d94, 0x0, 0x1);
        gbc.writeMem(0xae78, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x7345, gbc.sp());
        EXPECT(0xae7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae78));
        EXPECT(0xcd, gbc.readMem(0xae79));
        // CB CD 027F
        gbc.setState(0xf60, 0x1a36, 0xcaa0, 0x8e2c, 0xc381, 0x5bf6, 0x1, 0x0);
        gbc.writeMem(0xf60, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x1a36, gbc.sp());
        EXPECT(0xf62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0280
        gbc.setState(0x4a18, 0xa94b, 0x9550, 0x819e, 0x9bbf, 0x99fe, 0x1, 0x1);
        gbc.writeMem(0x4a18, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xa94b, gbc.sp());
        EXPECT(0x4a1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0281
        gbc.setState(0xb6f9, 0x6c58, 0x4c30, 0xdbf8, 0xefac, 0x86e9, 0x1, 0x0);
        gbc.writeMem(0xb6f9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x6c58, gbc.sp());
        EXPECT(0xb6fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6f9));
        EXPECT(0xcd, gbc.readMem(0xb6fa));
        // CB CD 0282
        gbc.setState(0x2369, 0xf626, 0x4e90, 0x8c1c, 0x7cea, 0x67e4, 0x1, 0x0);
        gbc.writeMem(0x2369, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xf626, gbc.sp());
        EXPECT(0x236b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0283
        gbc.setState(0x5669, 0xf1d, 0xe250, 0x8f92, 0xe9cc, 0xba9b, 0x1, 0x1);
        gbc.writeMem(0x5669, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xf1d, gbc.sp());
        EXPECT(0x566b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0284
        gbc.setState(0xd56c, 0xbc1a, 0x1ea0, 0x9266, 0x2355, 0x204c, 0x1, 0x0);
        gbc.writeMem(0xd56c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xbc1a, gbc.sp());
        EXPECT(0xd56e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd56c));
        EXPECT(0xcd, gbc.readMem(0xd56d));
        // CB CD 0286
        gbc.setState(0x2bc, 0xcf15, 0x1b40, 0x7c5f, 0x5c9, 0xe869, 0x0, 0x1);
        gbc.writeMem(0x2bc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xcf15, gbc.sp());
        EXPECT(0x2be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0287
        gbc.setState(0xd2ae, 0x5950, 0x8ed0, 0x1a16, 0x3fbb, 0x716, 0x0, 0x1);
        gbc.writeMem(0xd2ae, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x5950, gbc.sp());
        EXPECT(0xd2b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2ae));
        EXPECT(0xcd, gbc.readMem(0xd2af));
        // CB CD 0288
        gbc.setState(0x28b4, 0x44d7, 0xc5d0, 0x7d2, 0xa7c7, 0x2479, 0x1, 0x1);
        gbc.writeMem(0x28b4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x44d7, gbc.sp());
        EXPECT(0x28b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0289
        gbc.setState(0xbd86, 0x4ef6, 0x3e20, 0xc33f, 0x4b76, 0xefc7, 0x0, 0x1);
        gbc.writeMem(0xbd86, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x4ef6, gbc.sp());
        EXPECT(0xbd88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd86));
        EXPECT(0xcd, gbc.readMem(0xbd87));
        // CB CD 028A
        gbc.setState(0xe863, 0x331b, 0x1300, 0x8239, 0x97a, 0xeff6, 0x1, 0x1);
        gbc.writeMem(0xe863, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x331b, gbc.sp());
        EXPECT(0xe865, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe863));
        EXPECT(0xcd, gbc.readMem(0xe864));
        // CB CD 028B
        gbc.setState(0x2d9, 0x54e3, 0xe350, 0x59ea, 0x481a, 0x51a9, 0x0, 0x1);
        gbc.writeMem(0x2d9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x54e3, gbc.sp());
        EXPECT(0x2db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 028C
        gbc.setState(0xb934, 0x5888, 0xc140, 0xc184, 0x2665, 0x1fe3, 0x1, 0x1);
        gbc.writeMem(0xb934, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x5888, gbc.sp());
        EXPECT(0xb936, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb934));
        EXPECT(0xcd, gbc.readMem(0xb935));
        // CB CD 028D
        gbc.setState(0x710b, 0xc742, 0x4aa0, 0xf60c, 0x48e2, 0x2e7a, 0x1, 0x1);
        gbc.writeMem(0x710b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xc742, gbc.sp());
        EXPECT(0x710d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 028E
        gbc.setState(0x2885, 0x32c9, 0x71b0, 0x2567, 0x4333, 0x7703, 0x0, 0x0);
        gbc.writeMem(0x2885, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x32c9, gbc.sp());
        EXPECT(0x2887, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0291
        gbc.setState(0x7e7a, 0xb990, 0xbec0, 0xb68f, 0xa2c6, 0x34ed, 0x1, 0x1);
        gbc.writeMem(0x7e7a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xb990, gbc.sp());
        EXPECT(0x7e7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0292
        gbc.setState(0x6a59, 0x6443, 0x7b10, 0x6fa, 0xf62b, 0xe1cb, 0x0, 0x0);
        gbc.writeMem(0x6a59, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x6443, gbc.sp());
        EXPECT(0x6a5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0294
        gbc.setState(0xbb56, 0x2aad, 0x3640, 0xf4e2, 0xc646, 0x4dbf, 0x0, 0x0);
        gbc.writeMem(0xbb56, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x2aad, gbc.sp());
        EXPECT(0xbb58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb56));
        EXPECT(0xcd, gbc.readMem(0xbb57));
        // CB CD 0295
        gbc.setState(0xee64, 0x1c13, 0x7a60, 0x554, 0xb468, 0xe9e1, 0x1, 0x0);
        gbc.writeMem(0xee64, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x1c13, gbc.sp());
        EXPECT(0xee66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee64));
        EXPECT(0xcd, gbc.readMem(0xee65));
        // CB CD 0296
        gbc.setState(0x5adf, 0xf367, 0x3430, 0xc0be, 0xc404, 0x404d, 0x1, 0x1);
        gbc.writeMem(0x5adf, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xf367, gbc.sp());
        EXPECT(0x5ae1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0297
        gbc.setState(0xb6fa, 0xd3d6, 0xd520, 0xdee4, 0xc21e, 0xe251, 0x0, 0x1);
        gbc.writeMem(0xb6fa, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xd3d6, gbc.sp());
        EXPECT(0xb6fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6fa));
        EXPECT(0xcd, gbc.readMem(0xb6fb));
        // CB CD 0298
        gbc.setState(0xbbb4, 0xe807, 0x4640, 0xd2b8, 0x3113, 0x4231, 0x0, 0x1);
        gbc.writeMem(0xbbb4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xe807, gbc.sp());
        EXPECT(0xbbb6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbb4));
        EXPECT(0xcd, gbc.readMem(0xbbb5));
        // CB CD 0299
        gbc.setState(0x35e4, 0xde5e, 0x90c0, 0xd128, 0x88ed, 0xdf6c, 0x0, 0x0);
        gbc.writeMem(0x35e4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xde5e, gbc.sp());
        EXPECT(0x35e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 029A
        gbc.setState(0x5e94, 0x23ff, 0xfab0, 0xc741, 0xa0b, 0xa2d9, 0x1, 0x0);
        gbc.writeMem(0x5e94, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x23ff, gbc.sp());
        EXPECT(0x5e96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 029B
        gbc.setState(0xaaaf, 0xadb5, 0xf990, 0x3753, 0x4ba, 0x88ac, 0x0, 0x1);
        gbc.writeMem(0xaaaf, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xadb5, gbc.sp());
        EXPECT(0xaab1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaaaf));
        EXPECT(0xcd, gbc.readMem(0xaab0));
        // CB CD 029C
        gbc.setState(0x2fb1, 0x23a6, 0x8460, 0x4629, 0x2e07, 0xe1e1, 0x1, 0x1);
        gbc.writeMem(0x2fb1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x23a6, gbc.sp());
        EXPECT(0x2fb3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 029D
        gbc.setState(0x7176, 0x2a7b, 0x8f50, 0x3427, 0xc0ec, 0x2108, 0x1, 0x0);
        gbc.writeMem(0x7176, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x2a7b, gbc.sp());
        EXPECT(0x7178, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 029E
        gbc.setState(0xc74f, 0xd56a, 0xde70, 0x23ee, 0xcfa9, 0x2d67, 0x0, 0x0);
        gbc.writeMem(0xc74f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xd56a, gbc.sp());
        EXPECT(0xc751, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc74f));
        EXPECT(0xcd, gbc.readMem(0xc750));
        // CB CD 029F
        gbc.setState(0x6a00, 0x4bbd, 0x10c0, 0x44cf, 0x8888, 0x9d15, 0x0, 0x1);
        gbc.writeMem(0x6a00, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x4bbd, gbc.sp());
        EXPECT(0x6a02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02A0
        gbc.setState(0xc433, 0x74f0, 0xea90, 0xf7ed, 0x3a5, 0x422b, 0x0, 0x0);
        gbc.writeMem(0xc433, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x74f0, gbc.sp());
        EXPECT(0xc435, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc433));
        EXPECT(0xcd, gbc.readMem(0xc434));
        // CB CD 02A1
        gbc.setState(0x4332, 0x898f, 0x26d0, 0x834a, 0x9ac3, 0x4b27, 0x0, 0x0);
        gbc.writeMem(0x4332, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x898f, gbc.sp());
        EXPECT(0x4334, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02A2
        gbc.setState(0xad7d, 0x9b28, 0x6750, 0xfb41, 0x2d24, 0xa92f, 0x0, 0x0);
        gbc.writeMem(0xad7d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x9b28, gbc.sp());
        EXPECT(0xad7f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad7d));
        EXPECT(0xcd, gbc.readMem(0xad7e));
        // CB CD 02A3
        gbc.setState(0xe51, 0x3e0b, 0xb6f0, 0x1324, 0x50e6, 0xb1cd, 0x0, 0x0);
        gbc.writeMem(0xe51, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x3e0b, gbc.sp());
        EXPECT(0xe53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02A4
        gbc.setState(0x1200, 0xcf6, 0x4960, 0xe6a2, 0x4054, 0x90e2, 0x1, 0x1);
        gbc.writeMem(0x1200, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xcf6, gbc.sp());
        EXPECT(0x1202, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02A5
        gbc.setState(0x678a, 0xfad3, 0x20f0, 0x4131, 0xdcae, 0x2a11, 0x0, 0x0);
        gbc.writeMem(0x678a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xfad3, gbc.sp());
        EXPECT(0x678c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02A6
        gbc.setState(0x3f21, 0xf5b9, 0x65f0, 0xc25b, 0x2616, 0x2f84, 0x0, 0x0);
        gbc.writeMem(0x3f21, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xf5b9, gbc.sp());
        EXPECT(0x3f23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02A7
        gbc.setState(0x7b9d, 0x4fd8, 0xdf40, 0x22b5, 0xa49f, 0x7c32, 0x1, 0x1);
        gbc.writeMem(0x7b9d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x4fd8, gbc.sp());
        EXPECT(0x7b9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02A8
        gbc.setState(0x2bdc, 0x3893, 0x600, 0x767c, 0xc07b, 0xba1b, 0x1, 0x0);
        gbc.writeMem(0x2bdc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x3893, gbc.sp());
        EXPECT(0x2bde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02A9
        gbc.setState(0xc6db, 0xc11b, 0x27f0, 0xd15, 0xe186, 0x3032, 0x0, 0x0);
        gbc.writeMem(0xc6db, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xc11b, gbc.sp());
        EXPECT(0xc6dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6db));
        EXPECT(0xcd, gbc.readMem(0xc6dc));
        // CB CD 02AA
        gbc.setState(0xdbf7, 0xc3d, 0xe150, 0x8577, 0xdec2, 0xaaff, 0x1, 0x0);
        gbc.writeMem(0xdbf7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xc3d, gbc.sp());
        EXPECT(0xdbf9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbf7));
        EXPECT(0xcd, gbc.readMem(0xdbf8));
        // CB CD 02AB
        gbc.setState(0xe173, 0xe8e9, 0x6b0, 0x5017, 0x36f6, 0xead, 0x0, 0x1);
        gbc.writeMem(0xe173, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xe8e9, gbc.sp());
        EXPECT(0xe175, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe173));
        EXPECT(0xcd, gbc.readMem(0xe174));
        // CB CD 02AC
        gbc.setState(0x17d0, 0x530d, 0x15c0, 0xbbc0, 0xa9e5, 0x6711, 0x0, 0x1);
        gbc.writeMem(0x17d0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x530d, gbc.sp());
        EXPECT(0x17d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02AE
        gbc.setState(0x258f, 0x847d, 0x70c0, 0x653c, 0x2e79, 0x847, 0x0, 0x1);
        gbc.writeMem(0x258f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x847d, gbc.sp());
        EXPECT(0x2591, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02AF
        gbc.setState(0xb839, 0x8577, 0xde60, 0x3918, 0x9b7d, 0xb462, 0x0, 0x1);
        gbc.writeMem(0xb839, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x8577, gbc.sp());
        EXPECT(0xb83b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb839));
        EXPECT(0xcd, gbc.readMem(0xb83a));
        // CB CD 02B0
        gbc.setState(0x2410, 0x9bd5, 0x93e0, 0x1a84, 0xae62, 0xb02c, 0x1, 0x1);
        gbc.writeMem(0x2410, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x9bd5, gbc.sp());
        EXPECT(0x2412, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02B1
        gbc.setState(0xe043, 0x94dc, 0x4160, 0x2a2b, 0x7d14, 0xf3ab, 0x0, 0x0);
        gbc.writeMem(0xe043, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x94dc, gbc.sp());
        EXPECT(0xe045, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe043));
        EXPECT(0xcd, gbc.readMem(0xe044));
        // CB CD 02B2
        gbc.setState(0x752, 0x594, 0xf160, 0x3c52, 0xca98, 0x656f, 0x0, 0x1);
        gbc.writeMem(0x752, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x594, gbc.sp());
        EXPECT(0x754, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02B3
        gbc.setState(0x88e, 0x9232, 0xd1f0, 0x3b3e, 0xdb8c, 0xcc86, 0x1, 0x1);
        gbc.writeMem(0x88e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x9232, gbc.sp());
        EXPECT(0x890, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02B4
        gbc.setState(0x30f2, 0xc7bc, 0x7b60, 0x594c, 0x87a4, 0xe3c1, 0x1, 0x0);
        gbc.writeMem(0x30f2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xc7bc, gbc.sp());
        EXPECT(0x30f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02B5
        gbc.setState(0x8936, 0x27fe, 0xbe60, 0x184, 0x6b8c, 0xc182, 0x1, 0x0);
        gbc.writeMem(0x8936, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x27fe, gbc.sp());
        EXPECT(0x8938, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8936));
        EXPECT(0xcd, gbc.readMem(0x8937));
        // CB CD 02B6
        gbc.setState(0x8666, 0xa914, 0xbef0, 0xdc26, 0xd4fa, 0xffc2, 0x0, 0x0);
        gbc.writeMem(0x8666, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xa914, gbc.sp());
        EXPECT(0x8668, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8666));
        EXPECT(0xcd, gbc.readMem(0x8667));
        // CB CD 02B7
        gbc.setState(0x1c98, 0x1771, 0xec0, 0x604e, 0xdfac, 0x8858, 0x1, 0x1);
        gbc.writeMem(0x1c98, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x1771, gbc.sp());
        EXPECT(0x1c9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02B8
        gbc.setState(0x8f0d, 0xdfd8, 0xc730, 0xfa90, 0xdb82, 0x4297, 0x1, 0x1);
        gbc.writeMem(0x8f0d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xdfd8, gbc.sp());
        EXPECT(0x8f0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f0d));
        EXPECT(0xcd, gbc.readMem(0x8f0e));
        // CB CD 02B9
        gbc.setState(0x75a5, 0x2921, 0x4480, 0x21cc, 0xaed1, 0xc2b7, 0x1, 0x0);
        gbc.writeMem(0x75a5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x2921, gbc.sp());
        EXPECT(0x75a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02BA
        gbc.setState(0xca8a, 0x6855, 0xc030, 0xbe01, 0xf6c1, 0x9251, 0x0, 0x0);
        gbc.writeMem(0xca8a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x6855, gbc.sp());
        EXPECT(0xca8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca8a));
        EXPECT(0xcd, gbc.readMem(0xca8b));
        // CB CD 02BB
        gbc.setState(0xd948, 0x776d, 0x8da0, 0xf75, 0x99a6, 0xfb9a, 0x0, 0x1);
        gbc.writeMem(0xd948, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x776d, gbc.sp());
        EXPECT(0xd94a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd948));
        EXPECT(0xcd, gbc.readMem(0xd949));
        // CB CD 02BC
        gbc.setState(0x4667, 0x7719, 0xe650, 0x9b3d, 0x6de, 0xed3, 0x0, 0x1);
        gbc.writeMem(0x4667, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x7719, gbc.sp());
        EXPECT(0x4669, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02BD
        gbc.setState(0x61fd, 0x5b69, 0xbdd0, 0x24f1, 0x44b2, 0x2e53, 0x0, 0x1);
        gbc.writeMem(0x61fd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x5b69, gbc.sp());
        EXPECT(0x61ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02BE
        gbc.setState(0x7d0b, 0x453b, 0xd230, 0x65ed, 0x44a8, 0xb157, 0x1, 0x0);
        gbc.writeMem(0x7d0b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x453b, gbc.sp());
        EXPECT(0x7d0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02BF
        gbc.setState(0xa868, 0x84a0, 0x5330, 0xc469, 0xfc3, 0x9df9, 0x0, 0x1);
        gbc.writeMem(0xa868, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x84a0, gbc.sp());
        EXPECT(0xa86a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa868));
        EXPECT(0xcd, gbc.readMem(0xa869));
        // CB CD 02C0
        gbc.setState(0xa40b, 0x9e08, 0x3370, 0xbbc6, 0xc917, 0x7b99, 0x1, 0x0);
        gbc.writeMem(0xa40b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x9e08, gbc.sp());
        EXPECT(0xa40d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa40b));
        EXPECT(0xcd, gbc.readMem(0xa40c));
        // CB CD 02C1
        gbc.setState(0x6778, 0x8b9c, 0xa7d0, 0xaeff, 0x9c34, 0x9fba, 0x0, 0x0);
        gbc.writeMem(0x6778, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x8b9c, gbc.sp());
        EXPECT(0x677a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02C2
        gbc.setState(0x84cc, 0x54e6, 0x4e00, 0x4b9a, 0x2773, 0x5d6f, 0x1, 0x0);
        gbc.writeMem(0x84cc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x54e6, gbc.sp());
        EXPECT(0x84ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84cc));
        EXPECT(0xcd, gbc.readMem(0x84cd));
        // CB CD 02C3
        gbc.setState(0x26b, 0xd5dc, 0x8100, 0x75f2, 0x4dd8, 0x786, 0x0, 0x1);
        gbc.writeMem(0x26b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xd5dc, gbc.sp());
        EXPECT(0x26d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02C4
        gbc.setState(0xc561, 0x4f57, 0xbce0, 0x2741, 0x7182, 0xf7b4, 0x0, 0x1);
        gbc.writeMem(0xc561, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x4f57, gbc.sp());
        EXPECT(0xc563, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc561));
        EXPECT(0xcd, gbc.readMem(0xc562));
        // CB CD 02C5
        gbc.setState(0x234a, 0x58bd, 0xa4c0, 0xfedf, 0x794a, 0x1452, 0x1, 0x0);
        gbc.writeMem(0x234a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x58bd, gbc.sp());
        EXPECT(0x234c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02C6
        gbc.setState(0xcdb7, 0xaada, 0x6730, 0xf2e, 0x4680, 0xd831, 0x1, 0x1);
        gbc.writeMem(0xcdb7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xaada, gbc.sp());
        EXPECT(0xcdb9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdb7));
        EXPECT(0xcd, gbc.readMem(0xcdb8));
        // CB CD 02C7
        gbc.setState(0x5383, 0xdeb6, 0x4b60, 0x19fa, 0x12b1, 0xe3f9, 0x0, 0x0);
        gbc.writeMem(0x5383, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xdeb6, gbc.sp());
        EXPECT(0x5385, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02C8
        gbc.setState(0xc47c, 0xd13e, 0xb870, 0x374, 0x5d57, 0x62d, 0x1, 0x0);
        gbc.writeMem(0xc47c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xd13e, gbc.sp());
        EXPECT(0xc47e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc47c));
        EXPECT(0xcd, gbc.readMem(0xc47d));
        // CB CD 02C9
        gbc.setState(0x5fa2, 0xe298, 0x710, 0x1a42, 0xf22c, 0x6a2a, 0x1, 0x0);
        gbc.writeMem(0x5fa2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xe298, gbc.sp());
        EXPECT(0x5fa4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02CA
        gbc.setState(0x7ef8, 0x43cd, 0xa2d0, 0x3c4f, 0xaffb, 0xd037, 0x0, 0x0);
        gbc.writeMem(0x7ef8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x43cd, gbc.sp());
        EXPECT(0x7efa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02CB
        gbc.setState(0x8a27, 0xb219, 0x3ed0, 0xab95, 0xf94c, 0x36b, 0x0, 0x1);
        gbc.writeMem(0x8a27, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xb219, gbc.sp());
        EXPECT(0x8a29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a27));
        EXPECT(0xcd, gbc.readMem(0x8a28));
        // CB CD 02CC
        gbc.setState(0xaa48, 0xe744, 0x59a0, 0x1a2, 0x6802, 0x4a2f, 0x0, 0x1);
        gbc.writeMem(0xaa48, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xe744, gbc.sp());
        EXPECT(0xaa4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa48));
        EXPECT(0xcd, gbc.readMem(0xaa49));
        // CB CD 02CD
        gbc.setState(0x3c0b, 0x506c, 0xa300, 0x910c, 0x1999, 0x7f1c, 0x1, 0x0);
        gbc.writeMem(0x3c0b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x506c, gbc.sp());
        EXPECT(0x3c0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02CE
        gbc.setState(0x8d0a, 0xbd67, 0xc4f0, 0x6f35, 0xf003, 0xb873, 0x0, 0x0);
        gbc.writeMem(0x8d0a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xbd67, gbc.sp());
        EXPECT(0x8d0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d0a));
        EXPECT(0xcd, gbc.readMem(0x8d0b));
        // CB CD 02CF
        gbc.setState(0xcf5a, 0x13b0, 0x5560, 0x1544, 0x9370, 0xb26a, 0x0, 0x0);
        gbc.writeMem(0xcf5a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x13b0, gbc.sp());
        EXPECT(0xcf5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf5a));
        EXPECT(0xcd, gbc.readMem(0xcf5b));
        // CB CD 02D0
        gbc.setState(0xda64, 0xbebe, 0x18b0, 0xfa5a, 0x5da4, 0x8012, 0x0, 0x0);
        gbc.writeMem(0xda64, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xbebe, gbc.sp());
        EXPECT(0xda66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda64));
        EXPECT(0xcd, gbc.readMem(0xda65));
        // CB CD 02D1
        gbc.setState(0xc062, 0x3618, 0x6f80, 0xea15, 0x454a, 0x5c37, 0x0, 0x1);
        gbc.writeMem(0xc062, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x3618, gbc.sp());
        EXPECT(0xc064, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc062));
        EXPECT(0xcd, gbc.readMem(0xc063));
        // CB CD 02D2
        gbc.setState(0x463e, 0x2370, 0x6270, 0x7a9, 0xc961, 0x1ad1, 0x1, 0x0);
        gbc.writeMem(0x463e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x2370, gbc.sp());
        EXPECT(0x4640, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02D3
        gbc.setState(0x540c, 0x3c90, 0x6160, 0x80c0, 0x7f5f, 0xbb2, 0x1, 0x0);
        gbc.writeMem(0x540c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x3c90, gbc.sp());
        EXPECT(0x540e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02D4
        gbc.setState(0xa796, 0x400d, 0x42c0, 0x3343, 0x6947, 0x75fd, 0x0, 0x0);
        gbc.writeMem(0xa796, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x400d, gbc.sp());
        EXPECT(0xa798, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa796));
        EXPECT(0xcd, gbc.readMem(0xa797));
        // CB CD 02D5
        gbc.setState(0x32ec, 0xc0e7, 0x7e40, 0xa9ab, 0x3d2d, 0x4778, 0x0, 0x0);
        gbc.writeMem(0x32ec, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xc0e7, gbc.sp());
        EXPECT(0x32ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02D6
        gbc.setState(0x2412, 0xcefe, 0x3c0, 0x124e, 0xe08c, 0x3865, 0x1, 0x1);
        gbc.writeMem(0x2412, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xcefe, gbc.sp());
        EXPECT(0x2414, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02D7
        gbc.setState(0xb946, 0x1e25, 0xe200, 0x4a1d, 0xb936, 0x84e1, 0x1, 0x0);
        gbc.writeMem(0xb946, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x1e25, gbc.sp());
        EXPECT(0xb948, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb946));
        EXPECT(0xcd, gbc.readMem(0xb947));
        // CB CD 02D8
        gbc.setState(0x36de, 0x887e, 0xf560, 0xcee8, 0xfdbf, 0x78f3, 0x0, 0x1);
        gbc.writeMem(0x36de, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x887e, gbc.sp());
        EXPECT(0x36e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02D9
        gbc.setState(0x73ca, 0x60fb, 0x8a70, 0xc6b2, 0x3ee6, 0x2aa8, 0x0, 0x0);
        gbc.writeMem(0x73ca, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x60fb, gbc.sp());
        EXPECT(0x73cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02DA
        gbc.setState(0x705f, 0x5bf4, 0xd7b0, 0x1a26, 0xb75c, 0xe5f3, 0x1, 0x1);
        gbc.writeMem(0x705f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x5bf4, gbc.sp());
        EXPECT(0x7061, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02DB
        gbc.setState(0x996c, 0x8249, 0x70e0, 0xa659, 0x56de, 0xb76b, 0x1, 0x0);
        gbc.writeMem(0x996c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x8249, gbc.sp());
        EXPECT(0x996e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x996c));
        EXPECT(0xcd, gbc.readMem(0x996d));
        // CB CD 02DC
        gbc.setState(0x7b12, 0xa390, 0x9870, 0xafa0, 0x32de, 0x9589, 0x1, 0x1);
        gbc.writeMem(0x7b12, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xa390, gbc.sp());
        EXPECT(0x7b14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02DD
        gbc.setState(0xa26f, 0x1d83, 0x5b70, 0x7c57, 0xc0a, 0x8eab, 0x0, 0x0);
        gbc.writeMem(0xa26f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x1d83, gbc.sp());
        EXPECT(0xa271, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa26f));
        EXPECT(0xcd, gbc.readMem(0xa270));
        // CB CD 02DE
        gbc.setState(0x7c9c, 0x835e, 0xd70, 0x9513, 0x3eea, 0x43ca, 0x0, 0x1);
        gbc.writeMem(0x7c9c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x835e, gbc.sp());
        EXPECT(0x7c9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02DF
        gbc.setState(0x82ad, 0xbe19, 0x3ef0, 0xde5f, 0x849, 0x2e90, 0x0, 0x1);
        gbc.writeMem(0x82ad, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xbe19, gbc.sp());
        EXPECT(0x82af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82ad));
        EXPECT(0xcd, gbc.readMem(0x82ae));
        // CB CD 02E0
        gbc.setState(0xc9ee, 0xe7ce, 0x61c0, 0xa9, 0x207, 0x2791, 0x0, 0x0);
        gbc.writeMem(0xc9ee, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xe7ce, gbc.sp());
        EXPECT(0xc9f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9ee));
        EXPECT(0xcd, gbc.readMem(0xc9ef));
        // CB CD 02E1
        gbc.setState(0xcb5b, 0xb35e, 0x8510, 0xb70b, 0xd423, 0xb609, 0x0, 0x0);
        gbc.writeMem(0xcb5b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xb35e, gbc.sp());
        EXPECT(0xcb5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb5b));
        EXPECT(0xcd, gbc.readMem(0xcb5c));
        // CB CD 02E2
        gbc.setState(0x4633, 0x3183, 0x3b40, 0x2ae6, 0xe646, 0x9a74, 0x1, 0x1);
        gbc.writeMem(0x4633, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x3183, gbc.sp());
        EXPECT(0x4635, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02E3
        gbc.setState(0x2eb5, 0x868f, 0x3c90, 0x29c9, 0x6f75, 0xc528, 0x1, 0x1);
        gbc.writeMem(0x2eb5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x868f, gbc.sp());
        EXPECT(0x2eb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02E4
        gbc.setState(0x2d81, 0x36af, 0xd780, 0xdaca, 0x41c9, 0x4257, 0x1, 0x0);
        gbc.writeMem(0x2d81, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x36af, gbc.sp());
        EXPECT(0x2d83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02E5
        gbc.setState(0xe6b4, 0x6f64, 0x2630, 0x846, 0xeab2, 0xb386, 0x1, 0x1);
        gbc.writeMem(0xe6b4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x6f64, gbc.sp());
        EXPECT(0xe6b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6b4));
        EXPECT(0xcd, gbc.readMem(0xe6b5));
        // CB CD 02E6
        gbc.setState(0x7208, 0xa43f, 0x58c0, 0x3aa7, 0x2209, 0xb8cd, 0x0, 0x0);
        gbc.writeMem(0x7208, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xa43f, gbc.sp());
        EXPECT(0x720a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02E7
        gbc.setState(0x99db, 0x5a34, 0x4140, 0x1c05, 0x95c5, 0x6ba1, 0x1, 0x0);
        gbc.writeMem(0x99db, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x5a34, gbc.sp());
        EXPECT(0x99dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99db));
        EXPECT(0xcd, gbc.readMem(0x99dc));
        // CB CD 02E8
        gbc.setState(0xdea8, 0x97e2, 0x7f40, 0xc97d, 0x3f25, 0x1e7c, 0x1, 0x1);
        gbc.writeMem(0xdea8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x97e2, gbc.sp());
        EXPECT(0xdeaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdea8));
        EXPECT(0xcd, gbc.readMem(0xdea9));
        // CB CD 02E9
        gbc.setState(0xecd, 0xfced, 0x7ab0, 0xba9d, 0x2012, 0x678e, 0x1, 0x0);
        gbc.writeMem(0xecd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xfced, gbc.sp());
        EXPECT(0xecf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02EA
        gbc.setState(0xd375, 0x9a94, 0xbfd0, 0xe6ff, 0xee3c, 0x5ff3, 0x1, 0x0);
        gbc.writeMem(0xd375, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x9a94, gbc.sp());
        EXPECT(0xd377, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd375));
        EXPECT(0xcd, gbc.readMem(0xd376));
        // CB CD 02EB
        gbc.setState(0x7667, 0x1cd, 0x56a0, 0x16e6, 0x394e, 0x11a, 0x0, 0x1);
        gbc.writeMem(0x7667, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x1cd, gbc.sp());
        EXPECT(0x7669, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02EC
        gbc.setState(0x7bbb, 0x9167, 0x25f0, 0x59b2, 0x1b11, 0xe1d2, 0x0, 0x0);
        gbc.writeMem(0x7bbb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x9167, gbc.sp());
        EXPECT(0x7bbd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02ED
        gbc.setState(0xe888, 0x5342, 0x8dc0, 0xcd11, 0x1323, 0x64a3, 0x1, 0x0);
        gbc.writeMem(0xe888, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x5342, gbc.sp());
        EXPECT(0xe88a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe888));
        EXPECT(0xcd, gbc.readMem(0xe889));
        // CB CD 02EF
        gbc.setState(0x34d8, 0x77c7, 0x48c0, 0xb82e, 0xa4ad, 0x4c02, 0x0, 0x1);
        gbc.writeMem(0x34d8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x77c7, gbc.sp());
        EXPECT(0x34da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02F0
        gbc.setState(0xba95, 0x5b1b, 0xa2e0, 0xb463, 0x99e8, 0x110e, 0x0, 0x1);
        gbc.writeMem(0xba95, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x5b1b, gbc.sp());
        EXPECT(0xba97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba95));
        EXPECT(0xcd, gbc.readMem(0xba96));
        // CB CD 02F1
        gbc.setState(0x4ead, 0x5ee, 0xf630, 0x981a, 0xfa69, 0x82e1, 0x1, 0x1);
        gbc.writeMem(0x4ead, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x5ee, gbc.sp());
        EXPECT(0x4eaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02F2
        gbc.setState(0x5721, 0x148f, 0x630, 0xcbef, 0x6a88, 0x8888, 0x1, 0x0);
        gbc.writeMem(0x5721, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x148f, gbc.sp());
        EXPECT(0x5723, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02F3
        gbc.setState(0xa164, 0x5789, 0xfb00, 0xb308, 0x77d9, 0x6475, 0x0, 0x0);
        gbc.writeMem(0xa164, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x5789, gbc.sp());
        EXPECT(0xa166, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa164));
        EXPECT(0xcd, gbc.readMem(0xa165));
        // CB CD 02F4
        gbc.setState(0x8f85, 0x3473, 0xb310, 0xec10, 0x7c52, 0xd5d6, 0x1, 0x1);
        gbc.writeMem(0x8f85, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x3473, gbc.sp());
        EXPECT(0x8f87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f85));
        EXPECT(0xcd, gbc.readMem(0x8f86));
        // CB CD 02F5
        gbc.setState(0xe600, 0x9022, 0xfda0, 0x5489, 0x856, 0xf83e, 0x0, 0x1);
        gbc.writeMem(0xe600, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x9022, gbc.sp());
        EXPECT(0xe602, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe600));
        EXPECT(0xcd, gbc.readMem(0xe601));
        // CB CD 02F8
        gbc.setState(0x1f1b, 0x12, 0xfe40, 0xec78, 0x7a84, 0x4754, 0x0, 0x1);
        gbc.writeMem(0x1f1b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x12, gbc.sp());
        EXPECT(0x1f1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02F9
        gbc.setState(0x1eaf, 0xc7cc, 0x4f10, 0x1884, 0xf537, 0xb252, 0x0, 0x1);
        gbc.writeMem(0x1eaf, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xc7cc, gbc.sp());
        EXPECT(0x1eb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02FA
        gbc.setState(0x1ad2, 0x6bce, 0xde70, 0x28e0, 0x723, 0x4982, 0x0, 0x0);
        gbc.writeMem(0x1ad2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x6bce, gbc.sp());
        EXPECT(0x1ad4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02FB
        gbc.setState(0x97e3, 0x80b2, 0x8fe0, 0x926e, 0x400c, 0xa22c, 0x0, 0x0);
        gbc.writeMem(0x97e3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x80b2, gbc.sp());
        EXPECT(0x97e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97e3));
        EXPECT(0xcd, gbc.readMem(0x97e4));
        // CB CD 02FC
        gbc.setState(0x6ea7, 0xb288, 0xe600, 0x7c68, 0xf236, 0x55d0, 0x0, 0x0);
        gbc.writeMem(0x6ea7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xb288, gbc.sp());
        EXPECT(0x6ea9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 02FD
        gbc.setState(0xb44d, 0x45db, 0xf6c0, 0xffdc, 0x6fb0, 0x60f4, 0x0, 0x1);
        gbc.writeMem(0xb44d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x45db, gbc.sp());
        EXPECT(0xb44f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb44d));
        EXPECT(0xcd, gbc.readMem(0xb44e));
        // CB CD 02FE
        gbc.setState(0x557b, 0xc28c, 0x2930, 0x837e, 0x1cfb, 0xded0, 0x1, 0x0);
        gbc.writeMem(0x557b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xc28c, gbc.sp());
        EXPECT(0x557d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 02FF
        gbc.setState(0xa085, 0xafb0, 0x6470, 0xd7d1, 0x9cf5, 0xf759, 0x1, 0x1);
        gbc.writeMem(0xa085, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xafb0, gbc.sp());
        EXPECT(0xa087, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa085));
        EXPECT(0xcd, gbc.readMem(0xa086));
        // CB CD 0300
        gbc.setState(0xba24, 0x609e, 0xfb30, 0x38a4, 0x3884, 0x8af0, 0x0, 0x0);
        gbc.writeMem(0xba24, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x609e, gbc.sp());
        EXPECT(0xba26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba24));
        EXPECT(0xcd, gbc.readMem(0xba25));
        // CB CD 0301
        gbc.setState(0x883e, 0xcdc0, 0x9fb0, 0xd354, 0xe788, 0x980d, 0x1, 0x1);
        gbc.writeMem(0x883e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xcdc0, gbc.sp());
        EXPECT(0x8840, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x883e));
        EXPECT(0xcd, gbc.readMem(0x883f));
        // CB CD 0302
        gbc.setState(0x103f, 0xc2d, 0x82c0, 0xf9af, 0x95d5, 0xb937, 0x1, 0x0);
        gbc.writeMem(0x103f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xc2d, gbc.sp());
        EXPECT(0x1041, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0303
        gbc.setState(0xea1d, 0xc14a, 0x7470, 0x72e5, 0xc283, 0x4563, 0x1, 0x0);
        gbc.writeMem(0xea1d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xc14a, gbc.sp());
        EXPECT(0xea1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea1d));
        EXPECT(0xcd, gbc.readMem(0xea1e));
        // CB CD 0304
        gbc.setState(0x544, 0x4a32, 0x9750, 0x9707, 0x39e2, 0x2b6d, 0x1, 0x0);
        gbc.writeMem(0x544, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x4a32, gbc.sp());
        EXPECT(0x546, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0305
        gbc.setState(0xee51, 0xf95a, 0x6800, 0x7982, 0xeba3, 0x7981, 0x0, 0x1);
        gbc.writeMem(0xee51, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xf95a, gbc.sp());
        EXPECT(0xee53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee51));
        EXPECT(0xcd, gbc.readMem(0xee52));
        // CB CD 0306
        gbc.setState(0x3353, 0x2e96, 0x5480, 0x7c03, 0xd8f5, 0xae45, 0x0, 0x1);
        gbc.writeMem(0x3353, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x2e96, gbc.sp());
        EXPECT(0x3355, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0308
        gbc.setState(0x2c3d, 0x325f, 0x1150, 0xc1a7, 0x7758, 0x1945, 0x1, 0x0);
        gbc.writeMem(0x2c3d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x325f, gbc.sp());
        EXPECT(0x2c3f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0309
        gbc.setState(0x79f8, 0x5e14, 0x4950, 0xb090, 0xd0db, 0xa091, 0x0, 0x0);
        gbc.writeMem(0x79f8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x5e14, gbc.sp());
        EXPECT(0x79fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 030A
        gbc.setState(0x6464, 0x60cb, 0xea40, 0x6e45, 0xa5be, 0x18a3, 0x1, 0x1);
        gbc.writeMem(0x6464, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x60cb, gbc.sp());
        EXPECT(0x6466, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 030B
        gbc.setState(0x3210, 0xc286, 0x83f0, 0xc9ba, 0xd89, 0xd258, 0x0, 0x1);
        gbc.writeMem(0x3210, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xc286, gbc.sp());
        EXPECT(0x3212, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 030C
        gbc.setState(0x2fce, 0xc3fa, 0xbde0, 0xba2, 0xef5d, 0x666c, 0x0, 0x1);
        gbc.writeMem(0x2fce, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xc3fa, gbc.sp());
        EXPECT(0x2fd0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 030D
        gbc.setState(0x7d15, 0xdddf, 0x4130, 0x2f02, 0x24b9, 0x3cdd, 0x1, 0x0);
        gbc.writeMem(0x7d15, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xdddf, gbc.sp());
        EXPECT(0x7d17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 030E
        gbc.setState(0x316d, 0x4da3, 0x4ed0, 0x98a, 0xf730, 0x66a, 0x0, 0x1);
        gbc.writeMem(0x316d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x4da3, gbc.sp());
        EXPECT(0x316f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 030F
        gbc.setState(0x9d8, 0x310e, 0xf920, 0xb113, 0xc15f, 0x590f, 0x1, 0x1);
        gbc.writeMem(0x9d8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x310e, gbc.sp());
        EXPECT(0x9da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0310
        gbc.setState(0x517, 0x9738, 0xfb10, 0x57de, 0x5719, 0xb724, 0x1, 0x0);
        gbc.writeMem(0x517, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x9738, gbc.sp());
        EXPECT(0x519, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0311
        gbc.setState(0xdfce, 0x4cd4, 0x6d00, 0xcd35, 0xc3a, 0xf406, 0x1, 0x1);
        gbc.writeMem(0xdfce, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x4cd4, gbc.sp());
        EXPECT(0xdfd0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfce));
        EXPECT(0xcd, gbc.readMem(0xdfcf));
        // CB CD 0312
        gbc.setState(0xe473, 0x4e7, 0x5d10, 0x382a, 0x3c7, 0xb9f5, 0x1, 0x0);
        gbc.writeMem(0xe473, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x4e7, gbc.sp());
        EXPECT(0xe475, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe473));
        EXPECT(0xcd, gbc.readMem(0xe474));
        // CB CD 0313
        gbc.setState(0x1802, 0xd6b, 0x83b0, 0xdbb3, 0x2dcf, 0xd526, 0x1, 0x0);
        gbc.writeMem(0x1802, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xd6b, gbc.sp());
        EXPECT(0x1804, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0314
        gbc.setState(0x553b, 0xe592, 0x9c90, 0x36, 0x6c93, 0x7082, 0x1, 0x0);
        gbc.writeMem(0x553b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xe592, gbc.sp());
        EXPECT(0x553d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0315
        gbc.setState(0xc964, 0xa929, 0x760, 0x2485, 0xbe16, 0x3287, 0x1, 0x1);
        gbc.writeMem(0xc964, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xa929, gbc.sp());
        EXPECT(0xc966, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc964));
        EXPECT(0xcd, gbc.readMem(0xc965));
        // CB CD 0316
        gbc.setState(0xb611, 0x6244, 0x8ac0, 0x2f0f, 0x4345, 0x6b3c, 0x1, 0x1);
        gbc.writeMem(0xb611, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x6244, gbc.sp());
        EXPECT(0xb613, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb611));
        EXPECT(0xcd, gbc.readMem(0xb612));
        // CB CD 0317
        gbc.setState(0x5c1, 0xd079, 0xea60, 0x366e, 0xc8fc, 0x1287, 0x0, 0x0);
        gbc.writeMem(0x5c1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xd079, gbc.sp());
        EXPECT(0x5c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0318
        gbc.setState(0x9d17, 0xe32e, 0x8c00, 0xa129, 0xa87c, 0xfcd3, 0x0, 0x0);
        gbc.writeMem(0x9d17, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xe32e, gbc.sp());
        EXPECT(0x9d19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d17));
        EXPECT(0xcd, gbc.readMem(0x9d18));
        // CB CD 0319
        gbc.setState(0x3cd9, 0xc7e9, 0xdc30, 0xc423, 0xada8, 0x1ced, 0x0, 0x1);
        gbc.writeMem(0x3cd9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xc7e9, gbc.sp());
        EXPECT(0x3cdb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 031A
        gbc.setState(0x8379, 0x1cd7, 0x3eb0, 0xe468, 0xc419, 0x25c0, 0x0, 0x1);
        gbc.writeMem(0x8379, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x1cd7, gbc.sp());
        EXPECT(0x837b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8379));
        EXPECT(0xcd, gbc.readMem(0x837a));
        // CB CD 031B
        gbc.setState(0x2233, 0x4ab9, 0x96c0, 0xde09, 0x6f3b, 0xf36c, 0x0, 0x1);
        gbc.writeMem(0x2233, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x4ab9, gbc.sp());
        EXPECT(0x2235, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 031C
        gbc.setState(0x1c86, 0xa709, 0x9450, 0x8a04, 0x1abf, 0x9393, 0x1, 0x0);
        gbc.writeMem(0x1c86, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xa709, gbc.sp());
        EXPECT(0x1c88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 031D
        gbc.setState(0xe287, 0xc295, 0x6b40, 0x94f2, 0xc8c3, 0x6793, 0x1, 0x1);
        gbc.writeMem(0xe287, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xc295, gbc.sp());
        EXPECT(0xe289, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe287));
        EXPECT(0xcd, gbc.readMem(0xe288));
        // CB CD 031E
        gbc.setState(0xd34e, 0xd97a, 0xb9b0, 0x4373, 0xc3d9, 0x12fd, 0x0, 0x0);
        gbc.writeMem(0xd34e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xd97a, gbc.sp());
        EXPECT(0xd350, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd34e));
        EXPECT(0xcd, gbc.readMem(0xd34f));
        // CB CD 031F
        gbc.setState(0xb7b6, 0x5f32, 0xacf0, 0xe1a, 0x78fe, 0xaa9d, 0x0, 0x0);
        gbc.writeMem(0xb7b6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x5f32, gbc.sp());
        EXPECT(0xb7b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7b6));
        EXPECT(0xcd, gbc.readMem(0xb7b7));
        // CB CD 0320
        gbc.setState(0x3ecb, 0xd959, 0x91d0, 0xf37c, 0x3748, 0xcfc7, 0x1, 0x0);
        gbc.writeMem(0x3ecb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xd959, gbc.sp());
        EXPECT(0x3ecd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0321
        gbc.setState(0xaa74, 0x7e91, 0xb870, 0xb819, 0xe4b0, 0xe75b, 0x0, 0x0);
        gbc.writeMem(0xaa74, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x7e91, gbc.sp());
        EXPECT(0xaa76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa74));
        EXPECT(0xcd, gbc.readMem(0xaa75));
        // CB CD 0322
        gbc.setState(0xd395, 0xd08a, 0x82a0, 0xa62a, 0xb43d, 0x96b, 0x1, 0x1);
        gbc.writeMem(0xd395, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xd08a, gbc.sp());
        EXPECT(0xd397, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd395));
        EXPECT(0xcd, gbc.readMem(0xd396));
        // CB CD 0323
        gbc.setState(0x8d2b, 0xa86d, 0x7510, 0x59c1, 0xb772, 0x8ea3, 0x0, 0x0);
        gbc.writeMem(0x8d2b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xa86d, gbc.sp());
        EXPECT(0x8d2d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d2b));
        EXPECT(0xcd, gbc.readMem(0x8d2c));
        // CB CD 0324
        gbc.setState(0x3a89, 0x1b8e, 0x9a20, 0x4d85, 0xa039, 0x34e5, 0x0, 0x1);
        gbc.writeMem(0x3a89, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x1b8e, gbc.sp());
        EXPECT(0x3a8b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0326
        gbc.setState(0xa957, 0x91e5, 0xfa70, 0x264, 0x31f4, 0xab8c, 0x0, 0x0);
        gbc.writeMem(0xa957, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x91e5, gbc.sp());
        EXPECT(0xa959, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa957));
        EXPECT(0xcd, gbc.readMem(0xa958));
        // CB CD 0327
        gbc.setState(0x6735, 0x9b3b, 0xfc40, 0x3348, 0xe161, 0x1e59, 0x1, 0x0);
        gbc.writeMem(0x6735, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x9b3b, gbc.sp());
        EXPECT(0x6737, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0328
        gbc.setState(0x9f25, 0xe101, 0xe5b0, 0x284c, 0xea10, 0x4079, 0x1, 0x1);
        gbc.writeMem(0x9f25, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xe101, gbc.sp());
        EXPECT(0x9f27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f25));
        EXPECT(0xcd, gbc.readMem(0x9f26));
        // CB CD 0329
        gbc.setState(0x1319, 0xd16f, 0xf850, 0x64a2, 0xbfcf, 0x3bb3, 0x0, 0x1);
        gbc.writeMem(0x1319, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xd16f, gbc.sp());
        EXPECT(0x131b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 032A
        gbc.setState(0x828f, 0x6fef, 0x24f0, 0x99f5, 0x8a6a, 0x61fb, 0x1, 0x0);
        gbc.writeMem(0x828f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x6fef, gbc.sp());
        EXPECT(0x8291, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x828f));
        EXPECT(0xcd, gbc.readMem(0x8290));
        // CB CD 032B
        gbc.setState(0x5761, 0x8ab8, 0x2c70, 0xf4ed, 0x4f7, 0xc13b, 0x0, 0x1);
        gbc.writeMem(0x5761, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x8ab8, gbc.sp());
        EXPECT(0x5763, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 032C
        gbc.setState(0x6757, 0x2424, 0x1960, 0xdc84, 0xc813, 0x66cd, 0x0, 0x1);
        gbc.writeMem(0x6757, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x2424, gbc.sp());
        EXPECT(0x6759, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 032D
        gbc.setState(0x49e1, 0x31d6, 0xbe40, 0xfcf5, 0xefa2, 0x5910, 0x1, 0x1);
        gbc.writeMem(0x49e1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x31d6, gbc.sp());
        EXPECT(0x49e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 032E
        gbc.setState(0xa8a9, 0x8b7, 0x2140, 0x7aba, 0x2267, 0x80e1, 0x0, 0x1);
        gbc.writeMem(0xa8a9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x8b7, gbc.sp());
        EXPECT(0xa8ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8a9));
        EXPECT(0xcd, gbc.readMem(0xa8aa));
        // CB CD 032F
        gbc.setState(0x84f3, 0xaa75, 0x90d0, 0x7505, 0x3f9, 0xa1d5, 0x0, 0x0);
        gbc.writeMem(0x84f3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xaa75, gbc.sp());
        EXPECT(0x84f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84f3));
        EXPECT(0xcd, gbc.readMem(0x84f4));
        // CB CD 0330
        gbc.setState(0xd9bb, 0x3894, 0x3950, 0xf48, 0xaa4, 0xb9f6, 0x0, 0x0);
        gbc.writeMem(0xd9bb, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x3894, gbc.sp());
        EXPECT(0xd9bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9bb));
        EXPECT(0xcd, gbc.readMem(0xd9bc));
        // CB CD 0331
        gbc.setState(0x383c, 0x6b0d, 0x9df0, 0xdb93, 0xb2bc, 0x134a, 0x0, 0x0);
        gbc.writeMem(0x383c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x6b0d, gbc.sp());
        EXPECT(0x383e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0332
        gbc.setState(0xed4f, 0x3a9, 0xff20, 0x6f33, 0xebfd, 0x1db9, 0x1, 0x1);
        gbc.writeMem(0xed4f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x3a9, gbc.sp());
        EXPECT(0xed51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed4f));
        EXPECT(0xcd, gbc.readMem(0xed50));
        // CB CD 0333
        gbc.setState(0x91fc, 0xbc38, 0xadb0, 0x4483, 0xd8e7, 0x4bcc, 0x0, 0x1);
        gbc.writeMem(0x91fc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xbc38, gbc.sp());
        EXPECT(0x91fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91fc));
        EXPECT(0xcd, gbc.readMem(0x91fd));
        // CB CD 0334
        gbc.setState(0x513a, 0xe621, 0xb5b0, 0xb2ee, 0x4186, 0xc0bb, 0x1, 0x1);
        gbc.writeMem(0x513a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xe621, gbc.sp());
        EXPECT(0x513c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0335
        gbc.setState(0xea21, 0x90b, 0x4b80, 0x6597, 0x43db, 0x52da, 0x1, 0x1);
        gbc.writeMem(0xea21, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x90b, gbc.sp());
        EXPECT(0xea23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea21));
        EXPECT(0xcd, gbc.readMem(0xea22));
        // CB CD 0336
        gbc.setState(0x8646, 0x735b, 0xff80, 0xf676, 0x5e09, 0x6eba, 0x1, 0x1);
        gbc.writeMem(0x8646, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x735b, gbc.sp());
        EXPECT(0x8648, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8646));
        EXPECT(0xcd, gbc.readMem(0x8647));
        // CB CD 0337
        gbc.setState(0xba1a, 0x9862, 0x9a20, 0x10b9, 0xcc06, 0xbace, 0x0, 0x0);
        gbc.writeMem(0xba1a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x9862, gbc.sp());
        EXPECT(0xba1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba1a));
        EXPECT(0xcd, gbc.readMem(0xba1b));
        // CB CD 0338
        gbc.setState(0xef52, 0xcea7, 0xe0a0, 0x87bf, 0x33d8, 0xe203, 0x0, 0x0);
        gbc.writeMem(0xef52, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xcea7, gbc.sp());
        EXPECT(0xef54, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef52));
        EXPECT(0xcd, gbc.readMem(0xef53));
        // CB CD 0339
        gbc.setState(0x6a3c, 0x7de1, 0xe440, 0xd204, 0x1d76, 0x5cc8, 0x0, 0x0);
        gbc.writeMem(0x6a3c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x7de1, gbc.sp());
        EXPECT(0x6a3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 033A
        gbc.setState(0x29d2, 0x5030, 0x5710, 0xe01a, 0x353d, 0x8ba1, 0x0, 0x1);
        gbc.writeMem(0x29d2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x5030, gbc.sp());
        EXPECT(0x29d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 033B
        gbc.setState(0xaba8, 0xd7b8, 0xf70, 0x5be9, 0xfafa, 0xa124, 0x1, 0x1);
        gbc.writeMem(0xaba8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xd7b8, gbc.sp());
        EXPECT(0xabaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaba8));
        EXPECT(0xcd, gbc.readMem(0xaba9));
        // CB CD 033C
        gbc.setState(0x631e, 0x96ae, 0x62e0, 0xfd9e, 0xbc97, 0x624d, 0x0, 0x0);
        gbc.writeMem(0x631e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x96ae, gbc.sp());
        EXPECT(0x6320, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 033D
        gbc.setState(0x9b36, 0x9c53, 0xe280, 0xade1, 0x2dc, 0x4655, 0x0, 0x0);
        gbc.writeMem(0x9b36, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x9c53, gbc.sp());
        EXPECT(0x9b38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b36));
        EXPECT(0xcd, gbc.readMem(0x9b37));
        // CB CD 033E
        gbc.setState(0xfee, 0x4a4d, 0x35a0, 0xb3d, 0x1a96, 0x28b8, 0x1, 0x1);
        gbc.writeMem(0xfee, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x4a4d, gbc.sp());
        EXPECT(0xff0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 033F
        gbc.setState(0x7270, 0x933, 0xeef0, 0x2f80, 0x7adf, 0x4c12, 0x0, 0x1);
        gbc.writeMem(0x7270, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x933, gbc.sp());
        EXPECT(0x7272, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0340
        gbc.setState(0x9a, 0xa9a0, 0x4b50, 0x3f80, 0x33ac, 0x2cd2, 0x1, 0x1);
        gbc.writeMem(0x9a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xa9a0, gbc.sp());
        EXPECT(0x9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0341
        gbc.setState(0x8636, 0x9054, 0xb9f0, 0xdf94, 0xa390, 0x944f, 0x0, 0x1);
        gbc.writeMem(0x8636, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x9054, gbc.sp());
        EXPECT(0x8638, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8636));
        EXPECT(0xcd, gbc.readMem(0x8637));
        // CB CD 0342
        gbc.setState(0xaf80, 0x48e6, 0x1e0, 0x5e02, 0x4d8d, 0x7a83, 0x1, 0x0);
        gbc.writeMem(0xaf80, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x48e6, gbc.sp());
        EXPECT(0xaf82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf80));
        EXPECT(0xcd, gbc.readMem(0xaf81));
        // CB CD 0343
        gbc.setState(0xbe3b, 0xa861, 0xcd90, 0x1501, 0xe28, 0xf96e, 0x0, 0x1);
        gbc.writeMem(0xbe3b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xa861, gbc.sp());
        EXPECT(0xbe3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe3b));
        EXPECT(0xcd, gbc.readMem(0xbe3c));
        // CB CD 0344
        gbc.setState(0xb52b, 0x8c38, 0xa0c0, 0xb13f, 0x1db7, 0x7864, 0x0, 0x1);
        gbc.writeMem(0xb52b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x8c38, gbc.sp());
        EXPECT(0xb52d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb52b));
        EXPECT(0xcd, gbc.readMem(0xb52c));
        // CB CD 0346
        gbc.setState(0x144, 0xd14b, 0xeb0, 0x8751, 0x9af, 0x31f, 0x0, 0x0);
        gbc.writeMem(0x144, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xd14b, gbc.sp());
        EXPECT(0x146, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0347
        gbc.setState(0x5f80, 0x73d2, 0xc680, 0xd019, 0x8f71, 0x4f1d, 0x1, 0x0);
        gbc.writeMem(0x5f80, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x73d2, gbc.sp());
        EXPECT(0x5f82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0348
        gbc.setState(0x6de0, 0x1fd, 0xf40, 0xe144, 0x6735, 0xb14d, 0x0, 0x1);
        gbc.writeMem(0x6de0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x1fd, gbc.sp());
        EXPECT(0x6de2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0349
        gbc.setState(0x4a82, 0xeca6, 0x97d0, 0xf78b, 0xd72b, 0x5010, 0x1, 0x1);
        gbc.writeMem(0x4a82, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xeca6, gbc.sp());
        EXPECT(0x4a84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 034A
        gbc.setState(0xcf4e, 0x5dcd, 0xd4e0, 0x7fd6, 0x8961, 0xb3f1, 0x0, 0x1);
        gbc.writeMem(0xcf4e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x5dcd, gbc.sp());
        EXPECT(0xcf50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf4e));
        EXPECT(0xcd, gbc.readMem(0xcf4f));
        // CB CD 034B
        gbc.setState(0x736e, 0xcda6, 0xd740, 0x5503, 0x3d3e, 0x899d, 0x1, 0x1);
        gbc.writeMem(0x736e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xcda6, gbc.sp());
        EXPECT(0x7370, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 034C
        gbc.setState(0x9db0, 0xbafc, 0x4520, 0x2f97, 0x4763, 0xc07f, 0x1, 0x1);
        gbc.writeMem(0x9db0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xbafc, gbc.sp());
        EXPECT(0x9db2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9db0));
        EXPECT(0xcd, gbc.readMem(0x9db1));
        // CB CD 034D
        gbc.setState(0xb100, 0x2397, 0x6700, 0x29c6, 0xbc59, 0xd443, 0x0, 0x1);
        gbc.writeMem(0xb100, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x2397, gbc.sp());
        EXPECT(0xb102, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb100));
        EXPECT(0xcd, gbc.readMem(0xb101));
        // CB CD 034E
        gbc.setState(0x7396, 0xe0ab, 0x5b50, 0x5640, 0xb596, 0xf4a1, 0x1, 0x0);
        gbc.writeMem(0x7396, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xe0ab, gbc.sp());
        EXPECT(0x7398, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0350
        gbc.setState(0x796d, 0xd002, 0x8b80, 0xf6bf, 0xd130, 0xabac, 0x0, 0x1);
        gbc.writeMem(0x796d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xd002, gbc.sp());
        EXPECT(0x796f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0351
        gbc.setState(0xba75, 0xf881, 0xdff0, 0xd3f2, 0xeeb7, 0xd08d, 0x0, 0x0);
        gbc.writeMem(0xba75, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xf881, gbc.sp());
        EXPECT(0xba77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba75));
        EXPECT(0xcd, gbc.readMem(0xba76));
        // CB CD 0352
        gbc.setState(0x11a9, 0x654b, 0x2d00, 0x1a0f, 0x73c1, 0x8271, 0x1, 0x1);
        gbc.writeMem(0x11a9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x654b, gbc.sp());
        EXPECT(0x11ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0353
        gbc.setState(0xd5af, 0xcf86, 0x7490, 0xd376, 0xcc27, 0x5756, 0x0, 0x1);
        gbc.writeMem(0xd5af, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xcf86, gbc.sp());
        EXPECT(0xd5b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5af));
        EXPECT(0xcd, gbc.readMem(0xd5b0));
        // CB CD 0354
        gbc.setState(0x3e23, 0x13fb, 0xc820, 0xe539, 0x9418, 0x1f0a, 0x0, 0x1);
        gbc.writeMem(0x3e23, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x13fb, gbc.sp());
        EXPECT(0x3e25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0355
        gbc.setState(0xbeea, 0xf09b, 0x9d20, 0x5e7f, 0x867b, 0xbfdc, 0x1, 0x0);
        gbc.writeMem(0xbeea, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xf09b, gbc.sp());
        EXPECT(0xbeec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbeea));
        EXPECT(0xcd, gbc.readMem(0xbeeb));
        // CB CD 0356
        gbc.setState(0xce6f, 0x18b9, 0x8f70, 0x5cfb, 0xaecc, 0x3c30, 0x0, 0x0);
        gbc.writeMem(0xce6f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x18b9, gbc.sp());
        EXPECT(0xce71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce6f));
        EXPECT(0xcd, gbc.readMem(0xce70));
        // CB CD 0357
        gbc.setState(0x15ea, 0x9d66, 0x9f50, 0x168c, 0xfb27, 0x84be, 0x1, 0x0);
        gbc.writeMem(0x15ea, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x9d66, gbc.sp());
        EXPECT(0x15ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0358
        gbc.setState(0x9703, 0x5ceb, 0x4030, 0x4498, 0x43b5, 0xf2d4, 0x1, 0x0);
        gbc.writeMem(0x9703, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x5ceb, gbc.sp());
        EXPECT(0x9705, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9703));
        EXPECT(0xcd, gbc.readMem(0x9704));
        // CB CD 0359
        gbc.setState(0xa918, 0x81f6, 0x4330, 0x9628, 0x776b, 0x8f88, 0x0, 0x1);
        gbc.writeMem(0xa918, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x81f6, gbc.sp());
        EXPECT(0xa91a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa918));
        EXPECT(0xcd, gbc.readMem(0xa919));
        // CB CD 035A
        gbc.setState(0x6d46, 0xd690, 0xd9a0, 0xd7a1, 0xcc31, 0x7fc7, 0x0, 0x0);
        gbc.writeMem(0x6d46, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xd690, gbc.sp());
        EXPECT(0x6d48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 035C
        gbc.setState(0x9e78, 0x8cf1, 0xcbe0, 0xb660, 0xca20, 0x84a, 0x1, 0x0);
        gbc.writeMem(0x9e78, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x8cf1, gbc.sp());
        EXPECT(0x9e7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e78));
        EXPECT(0xcd, gbc.readMem(0x9e79));
        // CB CD 035D
        gbc.setState(0x31a, 0x200d, 0x82b0, 0x9830, 0x57, 0x6358, 0x1, 0x1);
        gbc.writeMem(0x31a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x200d, gbc.sp());
        EXPECT(0x31c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 035E
        gbc.setState(0x4338, 0xd8c3, 0xc280, 0x7ad4, 0x339f, 0xc390, 0x0, 0x1);
        gbc.writeMem(0x4338, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xd8c3, gbc.sp());
        EXPECT(0x433a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0360
        gbc.setState(0xb8c0, 0x94e2, 0x6910, 0x8ac1, 0x5f45, 0xdd8e, 0x1, 0x0);
        gbc.writeMem(0xb8c0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x94e2, gbc.sp());
        EXPECT(0xb8c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8c0));
        EXPECT(0xcd, gbc.readMem(0xb8c1));
        // CB CD 0361
        gbc.setState(0xaa60, 0xe51c, 0x8910, 0x1ea, 0xbb7d, 0x4edb, 0x1, 0x1);
        gbc.writeMem(0xaa60, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xe51c, gbc.sp());
        EXPECT(0xaa62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa60));
        EXPECT(0xcd, gbc.readMem(0xaa61));
        // CB CD 0362
        gbc.setState(0x7289, 0xab48, 0xf4d0, 0x178e, 0x30a2, 0x63d3, 0x1, 0x0);
        gbc.writeMem(0x7289, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xab48, gbc.sp());
        EXPECT(0x728b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0363
        gbc.setState(0xc090, 0xce5b, 0xe630, 0x7c5a, 0xd7ff, 0xec1e, 0x0, 0x0);
        gbc.writeMem(0xc090, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xce5b, gbc.sp());
        EXPECT(0xc092, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc090));
        EXPECT(0xcd, gbc.readMem(0xc091));
        // CB CD 0364
        gbc.setState(0xabb7, 0xfa7e, 0xf50, 0x3d5, 0xb94c, 0x7c30, 0x1, 0x1);
        gbc.writeMem(0xabb7, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xfa7e, gbc.sp());
        EXPECT(0xabb9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabb7));
        EXPECT(0xcd, gbc.readMem(0xabb8));
        // CB CD 0365
        gbc.setState(0x75dd, 0xec47, 0xa250, 0x43d1, 0x1edd, 0x968f, 0x1, 0x0);
        gbc.writeMem(0x75dd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xec47, gbc.sp());
        EXPECT(0x75df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0366
        gbc.setState(0x6302, 0xed6, 0x61e0, 0x65e, 0xdb8c, 0x5b4f, 0x1, 0x1);
        gbc.writeMem(0x6302, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xed6, gbc.sp());
        EXPECT(0x6304, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0367
        gbc.setState(0x5906, 0x87ba, 0xebc0, 0xf69f, 0xd6a7, 0xd44b, 0x0, 0x0);
        gbc.writeMem(0x5906, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x87ba, gbc.sp());
        EXPECT(0x5908, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0368
        gbc.setState(0x8802, 0x6aa3, 0xd860, 0x923f, 0xcfbc, 0xc49d, 0x1, 0x1);
        gbc.writeMem(0x8802, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x6aa3, gbc.sp());
        EXPECT(0x8804, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8802));
        EXPECT(0xcd, gbc.readMem(0x8803));
        // CB CD 0369
        gbc.setState(0xc1cf, 0x3558, 0x2960, 0x8cf1, 0xb965, 0x45a1, 0x1, 0x1);
        gbc.writeMem(0xc1cf, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x3558, gbc.sp());
        EXPECT(0xc1d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1cf));
        EXPECT(0xcd, gbc.readMem(0xc1d0));
        // CB CD 036A
        gbc.setState(0x4c3b, 0x62e5, 0x2a70, 0x5736, 0x445c, 0xde8f, 0x0, 0x1);
        gbc.writeMem(0x4c3b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x62e5, gbc.sp());
        EXPECT(0x4c3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 036B
        gbc.setState(0xcb49, 0xca7a, 0xc880, 0x9bb7, 0xfe79, 0x74c2, 0x1, 0x0);
        gbc.writeMem(0xcb49, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xca7a, gbc.sp());
        EXPECT(0xcb4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb49));
        EXPECT(0xcd, gbc.readMem(0xcb4a));
        // CB CD 036D
        gbc.setState(0x3e63, 0x524b, 0xae90, 0xe748, 0xf8e4, 0xdf67, 0x1, 0x0);
        gbc.writeMem(0x3e63, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x524b, gbc.sp());
        EXPECT(0x3e65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 036E
        gbc.setState(0x5419, 0xf250, 0xf1b0, 0xbb1e, 0x7173, 0x826e, 0x1, 0x0);
        gbc.writeMem(0x5419, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xf250, gbc.sp());
        EXPECT(0x541b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 036F
        gbc.setState(0x7943, 0x9b9a, 0xce70, 0xc272, 0x39d6, 0xc2da, 0x1, 0x0);
        gbc.writeMem(0x7943, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x9b9a, gbc.sp());
        EXPECT(0x7945, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0370
        gbc.setState(0xdf49, 0x276b, 0x95f0, 0xe7eb, 0x30d2, 0xa7e4, 0x0, 0x0);
        gbc.writeMem(0xdf49, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x276b, gbc.sp());
        EXPECT(0xdf4b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf49));
        EXPECT(0xcd, gbc.readMem(0xdf4a));
        // CB CD 0371
        gbc.setState(0x8a28, 0x15bd, 0xe340, 0xbf38, 0xf3cf, 0x5b67, 0x0, 0x0);
        gbc.writeMem(0x8a28, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x15bd, gbc.sp());
        EXPECT(0x8a2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a28));
        EXPECT(0xcd, gbc.readMem(0x8a29));
        // CB CD 0372
        gbc.setState(0xba6a, 0x710f, 0xa850, 0x8afe, 0x2f26, 0xbcb, 0x0, 0x0);
        gbc.writeMem(0xba6a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x710f, gbc.sp());
        EXPECT(0xba6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba6a));
        EXPECT(0xcd, gbc.readMem(0xba6b));
        // CB CD 0373
        gbc.setState(0x50c1, 0x9d3c, 0x1950, 0x2776, 0xa93, 0x9b60, 0x0, 0x1);
        gbc.writeMem(0x50c1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x9d3c, gbc.sp());
        EXPECT(0x50c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0374
        gbc.setState(0x5fb9, 0xd15, 0x2d90, 0xf68, 0x9762, 0x1b16, 0x0, 0x1);
        gbc.writeMem(0x5fb9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xd15, gbc.sp());
        EXPECT(0x5fbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0375
        gbc.setState(0x1338, 0xdb5c, 0xdd40, 0x7130, 0x612a, 0xefc0, 0x0, 0x1);
        gbc.writeMem(0x1338, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xdb5c, gbc.sp());
        EXPECT(0x133a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0376
        gbc.setState(0xaac3, 0xda05, 0xfd70, 0x9b7d, 0x31a5, 0x5bce, 0x0, 0x0);
        gbc.writeMem(0xaac3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xda05, gbc.sp());
        EXPECT(0xaac5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaac3));
        EXPECT(0xcd, gbc.readMem(0xaac4));
        // CB CD 0377
        gbc.setState(0x5d2d, 0xf783, 0x3070, 0x275b, 0x4d06, 0x9b7, 0x1, 0x0);
        gbc.writeMem(0x5d2d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xf783, gbc.sp());
        EXPECT(0x5d2f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0378
        gbc.setState(0x59e5, 0x553d, 0x9440, 0x6691, 0x3c92, 0x6943, 0x0, 0x0);
        gbc.writeMem(0x59e5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x553d, gbc.sp());
        EXPECT(0x59e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 037D
        gbc.setState(0xd380, 0xc749, 0x6110, 0x8670, 0x466a, 0x7537, 0x1, 0x0);
        gbc.writeMem(0xd380, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xc749, gbc.sp());
        EXPECT(0xd382, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd380));
        EXPECT(0xcd, gbc.readMem(0xd381));
        // CB CD 037E
        gbc.setState(0xec8d, 0x4278, 0xc390, 0xb537, 0x52bd, 0xa669, 0x1, 0x0);
        gbc.writeMem(0xec8d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x4278, gbc.sp());
        EXPECT(0xec8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec8d));
        EXPECT(0xcd, gbc.readMem(0xec8e));
        // CB CD 037F
        gbc.setState(0xb56d, 0xb2cf, 0xf7f0, 0x2c3b, 0xd3c4, 0x6182, 0x1, 0x0);
        gbc.writeMem(0xb56d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xb2cf, gbc.sp());
        EXPECT(0xb56f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb56d));
        EXPECT(0xcd, gbc.readMem(0xb56e));
        // CB CD 0380
        gbc.setState(0x1a9f, 0x4ce3, 0xe1d0, 0x6156, 0x53fa, 0xf230, 0x0, 0x1);
        gbc.writeMem(0x1a9f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x4ce3, gbc.sp());
        EXPECT(0x1aa1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0381
        gbc.setState(0x8247, 0xc14e, 0x1a40, 0x1917, 0xd5d4, 0x13c9, 0x1, 0x1);
        gbc.writeMem(0x8247, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xc14e, gbc.sp());
        EXPECT(0x8249, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8247));
        EXPECT(0xcd, gbc.readMem(0x8248));
        // CB CD 0382
        gbc.setState(0x4013, 0x40d0, 0xa840, 0x99fb, 0xb1b, 0xc80e, 0x0, 0x1);
        gbc.writeMem(0x4013, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x40d0, gbc.sp());
        EXPECT(0x4015, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0383
        gbc.setState(0xa609, 0x7931, 0x66f0, 0xca5e, 0x4536, 0xe449, 0x1, 0x1);
        gbc.writeMem(0xa609, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x7931, gbc.sp());
        EXPECT(0xa60b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa609));
        EXPECT(0xcd, gbc.readMem(0xa60a));
        // CB CD 0384
        gbc.setState(0x8b96, 0xab18, 0xafc0, 0xbd99, 0xf646, 0x334d, 0x1, 0x0);
        gbc.writeMem(0x8b96, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xab18, gbc.sp());
        EXPECT(0x8b98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b96));
        EXPECT(0xcd, gbc.readMem(0x8b97));
        // CB CD 0388
        gbc.setState(0x3ce1, 0x82f, 0x100, 0x2fec, 0x3ca3, 0x25c6, 0x1, 0x0);
        gbc.writeMem(0x3ce1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x82f, gbc.sp());
        EXPECT(0x3ce3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0389
        gbc.setState(0x7ab0, 0x8f3d, 0x6a40, 0x41c9, 0x6f5e, 0xf688, 0x1, 0x1);
        gbc.writeMem(0x7ab0, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x8f3d, gbc.sp());
        EXPECT(0x7ab2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 038A
        gbc.setState(0x8da2, 0xf209, 0x7a0, 0x6a32, 0xdf8e, 0xd37f, 0x0, 0x0);
        gbc.writeMem(0x8da2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xf209, gbc.sp());
        EXPECT(0x8da4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8da2));
        EXPECT(0xcd, gbc.readMem(0x8da3));
        // CB CD 038B
        gbc.setState(0xdd98, 0x661d, 0x8930, 0xe697, 0xba61, 0x308c, 0x0, 0x1);
        gbc.writeMem(0xdd98, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x661d, gbc.sp());
        EXPECT(0xdd9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd98));
        EXPECT(0xcd, gbc.readMem(0xdd99));
        // CB CD 038C
        gbc.setState(0x8c31, 0x1302, 0x56a0, 0xa869, 0xbedc, 0xddb5, 0x0, 0x0);
        gbc.writeMem(0x8c31, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x1302, gbc.sp());
        EXPECT(0x8c33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c31));
        EXPECT(0xcd, gbc.readMem(0x8c32));
        // CB CD 038D
        gbc.setState(0x9544, 0xe766, 0x9eb0, 0x3225, 0xde5a, 0x96ce, 0x1, 0x0);
        gbc.writeMem(0x9544, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xe766, gbc.sp());
        EXPECT(0x9546, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9544));
        EXPECT(0xcd, gbc.readMem(0x9545));
        // CB CD 038E
        gbc.setState(0xfbc, 0x90a3, 0x6f90, 0x9963, 0xef9a, 0x2308, 0x0, 0x1);
        gbc.writeMem(0xfbc, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x90a3, gbc.sp());
        EXPECT(0xfbe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 038F
        gbc.setState(0xbab5, 0xa788, 0xb20, 0xe699, 0xcdca, 0x6091, 0x1, 0x0);
        gbc.writeMem(0xbab5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xa788, gbc.sp());
        EXPECT(0xbab7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbab5));
        EXPECT(0xcd, gbc.readMem(0xbab6));
        // CB CD 0390
        gbc.setState(0xd66c, 0xc2b8, 0xba60, 0xb55a, 0x5612, 0xde0d, 0x1, 0x1);
        gbc.writeMem(0xd66c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xc2b8, gbc.sp());
        EXPECT(0xd66e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd66c));
        EXPECT(0xcd, gbc.readMem(0xd66d));
        // CB CD 0391
        gbc.setState(0x5da5, 0xe86e, 0x9590, 0xb07b, 0x7f8c, 0xbcbd, 0x0, 0x0);
        gbc.writeMem(0x5da5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xe86e, gbc.sp());
        EXPECT(0x5da7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0392
        gbc.setState(0x66d9, 0xf90, 0x2c50, 0xf113, 0xae43, 0x78a, 0x0, 0x0);
        gbc.writeMem(0x66d9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xf90, gbc.sp());
        EXPECT(0x66db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0393
        gbc.setState(0x61a2, 0xd87d, 0xaba0, 0x42f8, 0x351c, 0xbd48, 0x0, 0x1);
        gbc.writeMem(0x61a2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xd87d, gbc.sp());
        EXPECT(0x61a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0394
        gbc.setState(0xd4e6, 0xde81, 0xd060, 0xe55a, 0x80c4, 0xd114, 0x0, 0x0);
        gbc.writeMem(0xd4e6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xde81, gbc.sp());
        EXPECT(0xd4e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4e6));
        EXPECT(0xcd, gbc.readMem(0xd4e7));
        // CB CD 0397
        gbc.setState(0x6040, 0x29c, 0x4160, 0x3ee, 0xff7c, 0xf116, 0x1, 0x0);
        gbc.writeMem(0x6040, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x29c, gbc.sp());
        EXPECT(0x6042, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 0398
        gbc.setState(0x41ac, 0xefa0, 0x3710, 0xd6cb, 0x8614, 0xb026, 0x1, 0x0);
        gbc.writeMem(0x41ac, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xefa0, gbc.sp());
        EXPECT(0x41ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 0399
        gbc.setState(0x9b60, 0xa52d, 0x93c0, 0xebb4, 0xfa12, 0x1cc3, 0x1, 0x0);
        gbc.writeMem(0x9b60, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xa52d, gbc.sp());
        EXPECT(0x9b62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b60));
        EXPECT(0xcd, gbc.readMem(0x9b61));
        // CB CD 039A
        gbc.setState(0x3c5, 0x3a41, 0x9290, 0xa2ed, 0x2c4b, 0xc88b, 0x0, 0x1);
        gbc.writeMem(0x3c5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x3a41, gbc.sp());
        EXPECT(0x3c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 039B
        gbc.setState(0xb764, 0x3079, 0xc290, 0xe204, 0x5380, 0x8c64, 0x0, 0x0);
        gbc.writeMem(0xb764, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x3079, gbc.sp());
        EXPECT(0xb766, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb764));
        EXPECT(0xcd, gbc.readMem(0xb765));
        // CB CD 039D
        gbc.setState(0xccbe, 0x465d, 0x9fc0, 0xdaac, 0xda54, 0x52d3, 0x0, 0x0);
        gbc.writeMem(0xccbe, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x465d, gbc.sp());
        EXPECT(0xccc0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccbe));
        EXPECT(0xcd, gbc.readMem(0xccbf));
        // CB CD 039E
        gbc.setState(0xcf8f, 0xab5c, 0xcea0, 0xbd26, 0x84da, 0xa643, 0x0, 0x0);
        gbc.writeMem(0xcf8f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xab5c, gbc.sp());
        EXPECT(0xcf91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf8f));
        EXPECT(0xcd, gbc.readMem(0xcf90));
        // CB CD 039F
        gbc.setState(0xbad2, 0xd958, 0x60, 0x9594, 0xf450, 0x2194, 0x1, 0x1);
        gbc.writeMem(0xbad2, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xd958, gbc.sp());
        EXPECT(0xbad4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbad2));
        EXPECT(0xcd, gbc.readMem(0xbad3));
        // CB CD 03A1
        gbc.setState(0x4364, 0x6a78, 0xd330, 0xfaaa, 0x3296, 0x5c0b, 0x1, 0x1);
        gbc.writeMem(0x4364, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x6a78, gbc.sp());
        EXPECT(0x4366, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03A2
        gbc.setState(0xaff, 0xa5a9, 0xc5e0, 0xd87, 0x471d, 0x9fa7, 0x1, 0x0);
        gbc.writeMem(0xaff, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xa5a9, gbc.sp());
        EXPECT(0xb01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03A3
        gbc.setState(0x9f55, 0x749d, 0xbad0, 0x55f, 0x3949, 0xdf15, 0x1, 0x1);
        gbc.writeMem(0x9f55, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x749d, gbc.sp());
        EXPECT(0x9f57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f55));
        EXPECT(0xcd, gbc.readMem(0x9f56));
        // CB CD 03A4
        gbc.setState(0x2f34, 0xc3e1, 0x1430, 0x7f35, 0xa0e8, 0x8853, 0x0, 0x1);
        gbc.writeMem(0x2f34, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xc3e1, gbc.sp());
        EXPECT(0x2f36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03A5
        gbc.setState(0xd265, 0xb8c6, 0x57e0, 0x5990, 0x95a4, 0x8612, 0x0, 0x0);
        gbc.writeMem(0xd265, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xb8c6, gbc.sp());
        EXPECT(0xd267, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd265));
        EXPECT(0xcd, gbc.readMem(0xd266));
        // CB CD 03A6
        gbc.setState(0x552e, 0x680b, 0x79d0, 0x265d, 0xa48e, 0xcb01, 0x0, 0x1);
        gbc.writeMem(0x552e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x680b, gbc.sp());
        EXPECT(0x5530, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03A7
        gbc.setState(0x7c11, 0x98d9, 0x2720, 0x4606, 0x2e00, 0x4d09, 0x1, 0x1);
        gbc.writeMem(0x7c11, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x98d9, gbc.sp());
        EXPECT(0x7c13, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03A8
        gbc.setState(0x50de, 0x8ecc, 0x2740, 0xdfd4, 0xc9f6, 0xca26, 0x1, 0x1);
        gbc.writeMem(0x50de, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x8ecc, gbc.sp());
        EXPECT(0x50e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03A9
        gbc.setState(0x6c5, 0x7773, 0x60d0, 0xc086, 0x62ed, 0x4a4e, 0x1, 0x1);
        gbc.writeMem(0x6c5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x7773, gbc.sp());
        EXPECT(0x6c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03AA
        gbc.setState(0x71d, 0xc7cf, 0x7550, 0xfac4, 0x95fc, 0x587e, 0x1, 0x0);
        gbc.writeMem(0x71d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xc7cf, gbc.sp());
        EXPECT(0x71f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03AB
        gbc.setState(0xb736, 0x730b, 0xa540, 0xa646, 0x9d9c, 0x6fb7, 0x0, 0x0);
        gbc.writeMem(0xb736, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x730b, gbc.sp());
        EXPECT(0xb738, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb736));
        EXPECT(0xcd, gbc.readMem(0xb737));
        // CB CD 03AC
        gbc.setState(0x25ec, 0xfaae, 0x44c0, 0x9fa3, 0x9984, 0xc4cc, 0x1, 0x0);
        gbc.writeMem(0x25ec, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xfaae, gbc.sp());
        EXPECT(0x25ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03AD
        gbc.setState(0x1e14, 0xb549, 0xa3d0, 0x9564, 0xc85f, 0x9e51, 0x0, 0x1);
        gbc.writeMem(0x1e14, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xb549, gbc.sp());
        EXPECT(0x1e16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03AE
        gbc.setState(0x28f5, 0x202d, 0xbff0, 0x740b, 0xa597, 0xac92, 0x1, 0x0);
        gbc.writeMem(0x28f5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x202d, gbc.sp());
        EXPECT(0x28f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03AF
        gbc.setState(0x80b, 0xe5dd, 0x77c0, 0xda9d, 0xc51, 0x3c3d, 0x1, 0x1);
        gbc.writeMem(0x80b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xe5dd, gbc.sp());
        EXPECT(0x80d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03B0
        gbc.setState(0xd949, 0xc88, 0xb7a0, 0xb070, 0xeeb2, 0xeae1, 0x0, 0x0);
        gbc.writeMem(0xd949, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xc88, gbc.sp());
        EXPECT(0xd94b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd949));
        EXPECT(0xcd, gbc.readMem(0xd94a));
        // CB CD 03B1
        gbc.setState(0x398e, 0x7a57, 0x6300, 0xca26, 0x9a9e, 0x3a07, 0x0, 0x0);
        gbc.writeMem(0x398e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x7a57, gbc.sp());
        EXPECT(0x3990, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03B2
        gbc.setState(0x72d5, 0x74df, 0xaf20, 0x464d, 0x991d, 0x66f, 0x0, 0x0);
        gbc.writeMem(0x72d5, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x74df, gbc.sp());
        EXPECT(0x72d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03B3
        gbc.setState(0x6f39, 0x6b5b, 0x64f0, 0x237a, 0x8a24, 0x5780, 0x0, 0x1);
        gbc.writeMem(0x6f39, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x6b5b, gbc.sp());
        EXPECT(0x6f3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03B4
        gbc.setState(0x4a8a, 0x189f, 0xd8b0, 0xa225, 0x64a0, 0x13bf, 0x0, 0x1);
        gbc.writeMem(0x4a8a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x189f, gbc.sp());
        EXPECT(0x4a8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03B5
        gbc.setState(0x687c, 0x387e, 0xd5b0, 0x269, 0x85b4, 0x75f1, 0x0, 0x0);
        gbc.writeMem(0x687c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x387e, gbc.sp());
        EXPECT(0x687e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03B6
        gbc.setState(0x6bba, 0x2aee, 0xec30, 0xae89, 0x1b8d, 0xba22, 0x1, 0x1);
        gbc.writeMem(0x6bba, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x2aee, gbc.sp());
        EXPECT(0x6bbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03B7
        gbc.setState(0x9d6f, 0x9f88, 0xf9e0, 0x286f, 0x612a, 0x90d3, 0x1, 0x0);
        gbc.writeMem(0x9d6f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x9f88, gbc.sp());
        EXPECT(0x9d71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d6f));
        EXPECT(0xcd, gbc.readMem(0x9d70));
        // CB CD 03B8
        gbc.setState(0x1494, 0x1a17, 0x6480, 0x8864, 0xa127, 0x4a8b, 0x0, 0x0);
        gbc.writeMem(0x1494, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x1a17, gbc.sp());
        EXPECT(0x1496, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03B9
        gbc.setState(0xb747, 0x5aec, 0x3f20, 0x8828, 0x75d3, 0x51f0, 0x1, 0x0);
        gbc.writeMem(0xb747, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x5aec, gbc.sp());
        EXPECT(0xb749, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb747));
        EXPECT(0xcd, gbc.readMem(0xb748));
        // CB CD 03BA
        gbc.setState(0xbfd9, 0x7dfd, 0x3060, 0xa82b, 0xf93c, 0x9453, 0x0, 0x0);
        gbc.writeMem(0xbfd9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x7dfd, gbc.sp());
        EXPECT(0xbfdb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfd9));
        EXPECT(0xcd, gbc.readMem(0xbfda));
        // CB CD 03BB
        gbc.setState(0x6436, 0x9c41, 0xae20, 0xa7c3, 0x9bc5, 0xd3d6, 0x0, 0x0);
        gbc.writeMem(0x6436, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x9c41, gbc.sp());
        EXPECT(0x6438, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03BC
        gbc.setState(0x544a, 0x5315, 0xf750, 0xff7b, 0x98db, 0xdc65, 0x0, 0x1);
        gbc.writeMem(0x544a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x5315, gbc.sp());
        EXPECT(0x544c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03BD
        gbc.setState(0xa84d, 0xf7df, 0x6bd0, 0xfc1e, 0x5f9d, 0x1f40, 0x0, 0x1);
        gbc.writeMem(0xa84d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xf7df, gbc.sp());
        EXPECT(0xa84f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa84d));
        EXPECT(0xcd, gbc.readMem(0xa84e));
        // CB CD 03BE
        gbc.setState(0x79d6, 0xca96, 0xe550, 0xcd2b, 0x3f52, 0xb9f9, 0x1, 0x1);
        gbc.writeMem(0x79d6, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xca96, gbc.sp());
        EXPECT(0x79d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03BF
        gbc.setState(0xe562, 0xf7aa, 0x4b30, 0x48ef, 0x7fd9, 0x625d, 0x0, 0x0);
        gbc.writeMem(0xe562, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xf7aa, gbc.sp());
        EXPECT(0xe564, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe562));
        EXPECT(0xcd, gbc.readMem(0xe563));
        // CB CD 03C0
        gbc.setState(0xa71b, 0x9efc, 0x3f20, 0x728f, 0x7f62, 0xbe5, 0x0, 0x1);
        gbc.writeMem(0xa71b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x9efc, gbc.sp());
        EXPECT(0xa71d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa71b));
        EXPECT(0xcd, gbc.readMem(0xa71c));
        // CB CD 03C1
        gbc.setState(0x3c4a, 0xa99, 0xa040, 0xe88a, 0x52d5, 0xa69e, 0x0, 0x1);
        gbc.writeMem(0x3c4a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xa99, gbc.sp());
        EXPECT(0x3c4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03C2
        gbc.setState(0x695, 0xbacd, 0xe8a0, 0x87e5, 0x90e5, 0x4722, 0x0, 0x1);
        gbc.writeMem(0x695, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xbacd, gbc.sp());
        EXPECT(0x697, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03C3
        gbc.setState(0x7d2c, 0x17dc, 0xcb40, 0x1ded, 0x3a4f, 0xde22, 0x0, 0x0);
        gbc.writeMem(0x7d2c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x17dc, gbc.sp());
        EXPECT(0x7d2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03C4
        gbc.setState(0xca36, 0xb5f4, 0x29c0, 0x5732, 0x4e4e, 0x4a36, 0x0, 0x1);
        gbc.writeMem(0xca36, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xb5f4, gbc.sp());
        EXPECT(0xca38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca36));
        EXPECT(0xcd, gbc.readMem(0xca37));
        // CB CD 03C5
        gbc.setState(0x8e6d, 0x6a25, 0xd0, 0xfff0, 0xc826, 0x55a0, 0x1, 0x0);
        gbc.writeMem(0x8e6d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x6a25, gbc.sp());
        EXPECT(0x8e6f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e6d));
        EXPECT(0xcd, gbc.readMem(0x8e6e));
        // CB CD 03C6
        gbc.setState(0x4847, 0xf1b8, 0x69d0, 0xdaf2, 0xe9be, 0x1899, 0x0, 0x0);
        gbc.writeMem(0x4847, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xf1b8, gbc.sp());
        EXPECT(0x4849, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03C7
        gbc.setState(0x3908, 0xa42c, 0xc0b0, 0x7feb, 0x79f5, 0x2683, 0x0, 0x1);
        gbc.writeMem(0x3908, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xa42c, gbc.sp());
        EXPECT(0x390a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03C8
        gbc.setState(0x6b0e, 0x782f, 0xdab0, 0xa059, 0xedc5, 0x25e4, 0x0, 0x1);
        gbc.writeMem(0x6b0e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x782f, gbc.sp());
        EXPECT(0x6b10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03C9
        gbc.setState(0x86dd, 0x9186, 0x160, 0x6819, 0xafaf, 0x566c, 0x0, 0x0);
        gbc.writeMem(0x86dd, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x9186, gbc.sp());
        EXPECT(0x86df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86dd));
        EXPECT(0xcd, gbc.readMem(0x86de));
        // CB CD 03CA
        gbc.setState(0xa60d, 0xf002, 0x9790, 0xa013, 0x20df, 0x9bed, 0x0, 0x1);
        gbc.writeMem(0xa60d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xf002, gbc.sp());
        EXPECT(0xa60f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa60d));
        EXPECT(0xcd, gbc.readMem(0xa60e));
        // CB CD 03CB
        gbc.setState(0x546, 0x75ad, 0x41f0, 0x28c7, 0xb69a, 0xf2ea, 0x0, 0x0);
        gbc.writeMem(0x546, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x75ad, gbc.sp());
        EXPECT(0x548, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03CC
        gbc.setState(0xc9a, 0x95a9, 0xbaa0, 0x26f0, 0xa8df, 0xcd06, 0x0, 0x0);
        gbc.writeMem(0xc9a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x95a9, gbc.sp());
        EXPECT(0xc9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03CD
        gbc.setState(0xdbb4, 0xf1da, 0x2bc0, 0x7f26, 0x599b, 0x94b8, 0x0, 0x1);
        gbc.writeMem(0xdbb4, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xf1da, gbc.sp());
        EXPECT(0xdbb6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbb4));
        EXPECT(0xcd, gbc.readMem(0xdbb5));
        // CB CD 03CE
        gbc.setState(0x413b, 0x723f, 0x37b0, 0xcba, 0x1522, 0xc083, 0x0, 0x1);
        gbc.writeMem(0x413b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x723f, gbc.sp());
        EXPECT(0x413d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03D0
        gbc.setState(0x733a, 0x27e6, 0xe310, 0x2d68, 0x2d82, 0x8b9b, 0x0, 0x1);
        gbc.writeMem(0x733a, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x27e6, gbc.sp());
        EXPECT(0x733c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03D1
        gbc.setState(0x2c10, 0x62e2, 0x3f70, 0x5db0, 0x9f00, 0x3b03, 0x0, 0x0);
        gbc.writeMem(0x2c10, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x62e2, gbc.sp());
        EXPECT(0x2c12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03D2
        gbc.setState(0x55c8, 0xc40e, 0xf4d0, 0x90bf, 0x214b, 0xf740, 0x1, 0x0);
        gbc.writeMem(0x55c8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xc40e, gbc.sp());
        EXPECT(0x55ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CD 03D3
        gbc.setState(0xd98d, 0xc419, 0xc750, 0xfce6, 0xea12, 0x3cce, 0x1, 0x0);
        gbc.writeMem(0xd98d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xc419, gbc.sp());
        EXPECT(0xd98f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd98d));
        EXPECT(0xcd, gbc.readMem(0xd98e));
        // CB CD 03D4
        gbc.setState(0x76a8, 0x36c7, 0x6a00, 0x8938, 0xfcf3, 0x66c0, 0x0, 0x1);
        gbc.writeMem(0x76a8, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x36c7, gbc.sp());
        EXPECT(0x76aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03D5
        gbc.setState(0x35df, 0xebb1, 0xb820, 0xaa99, 0xda3b, 0x435c, 0x1, 0x1);
        gbc.writeMem(0x35df, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xebb1, gbc.sp());
        EXPECT(0x35e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03D6
        gbc.setState(0x6507, 0x1e3b, 0x1b40, 0xa1bb, 0x87f7, 0x4edb, 0x0, 0x0);
        gbc.writeMem(0x6507, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x1e3b, gbc.sp());
        EXPECT(0x6509, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03D7
        gbc.setState(0x2784, 0xf596, 0xdac0, 0xb4fc, 0x6604, 0x2a05, 0x1, 0x1);
        gbc.writeMem(0x2784, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xf596, gbc.sp());
        EXPECT(0x2786, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03D9
        gbc.setState(0xce2d, 0x5467, 0x1a20, 0xdf76, 0xadc8, 0xbd7, 0x0, 0x0);
        gbc.writeMem(0xce2d, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x5467, gbc.sp());
        EXPECT(0xce2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce2d));
        EXPECT(0xcd, gbc.readMem(0xce2e));
        // CB CD 03DA
        gbc.setState(0x95d9, 0xf9bf, 0x4680, 0x9f7e, 0x34b2, 0x51fd, 0x1, 0x1);
        gbc.writeMem(0x95d9, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xf9bf, gbc.sp());
        EXPECT(0x95db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95d9));
        EXPECT(0xcd, gbc.readMem(0x95da));
        // CB CD 03DB
        gbc.setState(0x6306, 0x9309, 0x1c20, 0x9aed, 0x576b, 0xb228, 0x1, 0x0);
        gbc.writeMem(0x6306, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x9309, gbc.sp());
        EXPECT(0x6308, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03DC
        gbc.setState(0x7240, 0xfa0a, 0x1b20, 0x2144, 0x9678, 0xc18, 0x0, 0x1);
        gbc.writeMem(0x7240, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xfa0a, gbc.sp());
        EXPECT(0x7242, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03DD
        gbc.setState(0xed02, 0x466e, 0xed60, 0x7d1, 0x8e63, 0x3464, 0x1, 0x1);
        gbc.writeMem(0xed02, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x466e, gbc.sp());
        EXPECT(0xed04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed02));
        EXPECT(0xcd, gbc.readMem(0xed03));
        // CB CD 03DE
        gbc.setState(0x288b, 0xeaca, 0x6820, 0x7a71, 0xfc01, 0x12d6, 0x0, 0x1);
        gbc.writeMem(0x288b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xeaca, gbc.sp());
        EXPECT(0x288d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03DF
        gbc.setState(0xb53e, 0x898, 0xd0c0, 0x8dbc, 0x48fb, 0x4b0a, 0x1, 0x1);
        gbc.writeMem(0xb53e, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x898, gbc.sp());
        EXPECT(0xb540, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb53e));
        EXPECT(0xcd, gbc.readMem(0xb53f));
        // CB CD 03E0
        gbc.setState(0x22a1, 0x3119, 0x6ce0, 0xc2c8, 0x52b3, 0xcf7d, 0x0, 0x1);
        gbc.writeMem(0x22a1, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x3119, gbc.sp());
        EXPECT(0x22a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03E1
        gbc.setState(0xd6aa, 0x88bf, 0xf970, 0x45e4, 0x3c6, 0xa24a, 0x0, 0x1);
        gbc.writeMem(0xd6aa, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x88bf, gbc.sp());
        EXPECT(0xd6ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6aa));
        EXPECT(0xcd, gbc.readMem(0xd6ab));
        // CB CD 03E2
        gbc.setState(0xd6d3, 0xcd49, 0xb150, 0xfa2d, 0x9b0e, 0x438d, 0x1, 0x0);
        gbc.writeMem(0xd6d3, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xcd49, gbc.sp());
        EXPECT(0xd6d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6d3));
        EXPECT(0xcd, gbc.readMem(0xd6d4));
        // CB CD 03E3
        gbc.setState(0x2b0b, 0x3adf, 0x9560, 0x7c21, 0xf729, 0xb976, 0x0, 0x0);
        gbc.writeMem(0x2b0b, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x3adf, gbc.sp());
        EXPECT(0x2b0d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CD 03E4
        gbc.setState(0xeb1f, 0xf123, 0x19e0, 0xd9fa, 0x73ed, 0x5cf, 0x1, 0x1);
        gbc.writeMem(0xeb1f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xf123, gbc.sp());
        EXPECT(0xeb21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb1f));
        EXPECT(0xcd, gbc.readMem(0xeb20));
        // CB CD 03E5
        gbc.setState(0x956f, 0x1279, 0x3600, 0xe8f7, 0xb796, 0xe0d0, 0x0, 0x1);
        gbc.writeMem(0x956f, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x1279, gbc.sp());
        EXPECT(0x9571, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x956f));
        EXPECT(0xcd, gbc.readMem(0x9570));
        // CB CD 03E6
        gbc.setState(0xa05c, 0x2f64, 0x7c80, 0x3e5b, 0xef29, 0xd11b, 0x0, 0x1);
        gbc.writeMem(0xa05c, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x2f64, gbc.sp());
        EXPECT(0xa05e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa05c));
        EXPECT(0xcd, gbc.readMem(0xa05d));
        // CB CD 03E7
        gbc.setState(0x2890, 0x6b5e, 0x78a0, 0xf50a, 0x3cdb, 0x9d49, 0x1, 0x0);
        gbc.writeMem(0x2890, { 0xcb, 0xcd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x6b5e, gbc.sp());
        EXPECT(0x2892, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
    }
