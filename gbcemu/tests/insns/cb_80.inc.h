    TEST(gbcemu, opcode_cb_80) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 80 0000
        gbc.setState(0xac63, 0x4055, 0xe4b0, 0x386f, 0x8aed, 0xeb8b, 0x1, 0x0);
        gbc.writeMem(0xac63, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x4055, gbc.sp());
        EXPECT(0xac65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac63));
        EXPECT(0x80, gbc.readMem(0xac64));
        // CB 80 0001
        gbc.setState(0xc819, 0x496e, 0xe9f0, 0x26a1, 0xcb22, 0x57dc, 0x0, 0x0);
        gbc.writeMem(0xc819, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x496e, gbc.sp());
        EXPECT(0xc81b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc819));
        EXPECT(0x80, gbc.readMem(0xc81a));
        // CB 80 0002
        gbc.setState(0x8e46, 0xcdf1, 0x32e0, 0xb775, 0x2d15, 0x4eee, 0x0, 0x0);
        gbc.writeMem(0x8e46, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xcdf1, gbc.sp());
        EXPECT(0x8e48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e46));
        EXPECT(0x80, gbc.readMem(0x8e47));
        // CB 80 0003
        gbc.setState(0xb018, 0x1780, 0xd670, 0x36f0, 0x6393, 0x84be, 0x0, 0x1);
        gbc.writeMem(0xb018, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x1780, gbc.sp());
        EXPECT(0xb01a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb018));
        EXPECT(0x80, gbc.readMem(0xb019));
        // CB 80 0004
        gbc.setState(0x332a, 0xb910, 0xdb00, 0x949b, 0xb3cd, 0x7efb, 0x1, 0x1);
        gbc.writeMem(0x332a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xb910, gbc.sp());
        EXPECT(0x332c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0005
        gbc.setState(0x3159, 0xe1ff, 0x4d20, 0xf34a, 0x2557, 0x20aa, 0x1, 0x0);
        gbc.writeMem(0x3159, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xe1ff, gbc.sp());
        EXPECT(0x315b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0006
        gbc.setState(0x9d6d, 0xe503, 0x4f10, 0xb460, 0xddca, 0xb9b7, 0x0, 0x1);
        gbc.writeMem(0x9d6d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xe503, gbc.sp());
        EXPECT(0x9d6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d6d));
        EXPECT(0x80, gbc.readMem(0x9d6e));
        // CB 80 0007
        gbc.setState(0x42e6, 0x8370, 0x2450, 0xb482, 0x7bf, 0x9d4f, 0x0, 0x1);
        gbc.writeMem(0x42e6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x8370, gbc.sp());
        EXPECT(0x42e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0008
        gbc.setState(0x3e64, 0xd213, 0xccd0, 0x70e6, 0x773f, 0x101a, 0x1, 0x0);
        gbc.writeMem(0x3e64, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xd213, gbc.sp());
        EXPECT(0x3e66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0009
        gbc.setState(0x78cd, 0xd5b3, 0xfe10, 0x35c6, 0xd172, 0x27ed, 0x1, 0x0);
        gbc.writeMem(0x78cd, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xd5b3, gbc.sp());
        EXPECT(0x78cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 000A
        gbc.setState(0x7978, 0xdbd6, 0xf3a0, 0xdfaa, 0x8e0c, 0x18e, 0x1, 0x1);
        gbc.writeMem(0x7978, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xdbd6, gbc.sp());
        EXPECT(0x797a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 000B
        gbc.setState(0x4e93, 0xf095, 0x65c0, 0xb576, 0xc88, 0x42d7, 0x1, 0x0);
        gbc.writeMem(0x4e93, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xf095, gbc.sp());
        EXPECT(0x4e95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 000C
        gbc.setState(0x9735, 0xa56a, 0xffe0, 0x443c, 0x4077, 0x28c3, 0x0, 0x1);
        gbc.writeMem(0x9735, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xa56a, gbc.sp());
        EXPECT(0x9737, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9735));
        EXPECT(0x80, gbc.readMem(0x9736));
        // CB 80 000D
        gbc.setState(0x2c97, 0xce4b, 0x4b90, 0x245c, 0xb7b5, 0x341a, 0x1, 0x0);
        gbc.writeMem(0x2c97, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xce4b, gbc.sp());
        EXPECT(0x2c99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 000E
        gbc.setState(0xae0, 0x149b, 0x6a30, 0x7d88, 0xc53, 0xd3fa, 0x0, 0x0);
        gbc.writeMem(0xae0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x149b, gbc.sp());
        EXPECT(0xae2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 000F
        gbc.setState(0xe943, 0xec12, 0x1690, 0x68df, 0xe391, 0x96cf, 0x1, 0x0);
        gbc.writeMem(0xe943, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xec12, gbc.sp());
        EXPECT(0xe945, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe943));
        EXPECT(0x80, gbc.readMem(0xe944));
        // CB 80 0010
        gbc.setState(0x736a, 0xfe89, 0x7990, 0x7adf, 0xb194, 0xc2f8, 0x0, 0x0);
        gbc.writeMem(0x736a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xfe89, gbc.sp());
        EXPECT(0x736c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0011
        gbc.setState(0x61c9, 0xcfa8, 0xa2b0, 0xff4b, 0x72a1, 0x7e6f, 0x1, 0x1);
        gbc.writeMem(0x61c9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xcfa8, gbc.sp());
        EXPECT(0x61cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0012
        gbc.setState(0x5fc5, 0x2f8a, 0xc6e0, 0x977a, 0xe481, 0x1665, 0x0, 0x0);
        gbc.writeMem(0x5fc5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x2f8a, gbc.sp());
        EXPECT(0x5fc7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0013
        gbc.setState(0xc566, 0xe532, 0x9320, 0xf550, 0x20, 0x70f3, 0x1, 0x1);
        gbc.writeMem(0xc566, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xe532, gbc.sp());
        EXPECT(0xc568, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc566));
        EXPECT(0x80, gbc.readMem(0xc567));
        // CB 80 0014
        gbc.setState(0x8e70, 0xd5d0, 0x8700, 0xfb0d, 0xb94f, 0x357, 0x1, 0x1);
        gbc.writeMem(0x8e70, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xd5d0, gbc.sp());
        EXPECT(0x8e72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e70));
        EXPECT(0x80, gbc.readMem(0x8e71));
        // CB 80 0015
        gbc.setState(0x7884, 0x55b6, 0x1a80, 0xc07c, 0x63c8, 0x60d1, 0x1, 0x1);
        gbc.writeMem(0x7884, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x55b6, gbc.sp());
        EXPECT(0x7886, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0016
        gbc.setState(0x5214, 0xd28c, 0x7d20, 0x8b3c, 0x9c03, 0x12e5, 0x1, 0x1);
        gbc.writeMem(0x5214, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xd28c, gbc.sp());
        EXPECT(0x5216, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0017
        gbc.setState(0x7982, 0xa66b, 0x8840, 0x651c, 0x631d, 0xe08, 0x0, 0x0);
        gbc.writeMem(0x7982, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xa66b, gbc.sp());
        EXPECT(0x7984, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0018
        gbc.setState(0xe122, 0x302a, 0x6ce0, 0x2bdd, 0xd939, 0xc9d6, 0x0, 0x1);
        gbc.writeMem(0xe122, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x302a, gbc.sp());
        EXPECT(0xe124, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe122));
        EXPECT(0x80, gbc.readMem(0xe123));
        // CB 80 0019
        gbc.setState(0xd3be, 0x3c8b, 0x5a90, 0xee6f, 0xedf8, 0xb3a0, 0x0, 0x0);
        gbc.writeMem(0xd3be, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x3c8b, gbc.sp());
        EXPECT(0xd3c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3be));
        EXPECT(0x80, gbc.readMem(0xd3bf));
        // CB 80 001A
        gbc.setState(0x392f, 0xdd1c, 0xe210, 0xfe7f, 0x6e9a, 0xe194, 0x1, 0x1);
        gbc.writeMem(0x392f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xdd1c, gbc.sp());
        EXPECT(0x3931, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 001B
        gbc.setState(0x42e8, 0x150a, 0x9e90, 0x1798, 0xb998, 0x354, 0x1, 0x0);
        gbc.writeMem(0x42e8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x150a, gbc.sp());
        EXPECT(0x42ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 001C
        gbc.setState(0x29c8, 0x2a8b, 0xb040, 0x9655, 0x3cfb, 0xc2e1, 0x1, 0x0);
        gbc.writeMem(0x29c8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x2a8b, gbc.sp());
        EXPECT(0x29ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 001D
        gbc.setState(0x44ca, 0xa098, 0x5900, 0x3a48, 0x230c, 0xd450, 0x1, 0x1);
        gbc.writeMem(0x44ca, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xa098, gbc.sp());
        EXPECT(0x44cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 001E
        gbc.setState(0x95df, 0x13ab, 0xa9b0, 0xc35b, 0xe5ff, 0x17a7, 0x1, 0x0);
        gbc.writeMem(0x95df, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x13ab, gbc.sp());
        EXPECT(0x95e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95df));
        EXPECT(0x80, gbc.readMem(0x95e0));
        // CB 80 001F
        gbc.setState(0x1729, 0x4693, 0x9240, 0x32e2, 0xfb48, 0xe248, 0x0, 0x0);
        gbc.writeMem(0x1729, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x4693, gbc.sp());
        EXPECT(0x172b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0020
        gbc.setState(0x2087, 0x1819, 0x9ad0, 0xf9f5, 0xba6b, 0x56a8, 0x0, 0x0);
        gbc.writeMem(0x2087, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x1819, gbc.sp());
        EXPECT(0x2089, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0021
        gbc.setState(0xc2b1, 0x5442, 0xc460, 0x827e, 0xc2e6, 0x4c33, 0x0, 0x0);
        gbc.writeMem(0xc2b1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x5442, gbc.sp());
        EXPECT(0xc2b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2b1));
        EXPECT(0x80, gbc.readMem(0xc2b2));
        // CB 80 0022
        gbc.setState(0xef0e, 0x279, 0xfd00, 0x6fc0, 0xd1b7, 0x1cca, 0x0, 0x0);
        gbc.writeMem(0xef0e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x279, gbc.sp());
        EXPECT(0xef10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef0e));
        EXPECT(0x80, gbc.readMem(0xef0f));
        // CB 80 0023
        gbc.setState(0x7fa, 0xfbef, 0xfc60, 0x6136, 0xb2ec, 0x9f64, 0x0, 0x1);
        gbc.writeMem(0x7fa, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xfbef, gbc.sp());
        EXPECT(0x7fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0024
        gbc.setState(0xa88b, 0x8bfc, 0xbc70, 0x87d5, 0x93d, 0xc458, 0x0, 0x0);
        gbc.writeMem(0xa88b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x8bfc, gbc.sp());
        EXPECT(0xa88d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa88b));
        EXPECT(0x80, gbc.readMem(0xa88c));
        // CB 80 0026
        gbc.setState(0x2ab6, 0x1c9a, 0x2530, 0xa7e3, 0x2963, 0x6675, 0x0, 0x1);
        gbc.writeMem(0x2ab6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x1c9a, gbc.sp());
        EXPECT(0x2ab8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0027
        gbc.setState(0x22c6, 0x46d5, 0x7270, 0x8207, 0xad21, 0x89ff, 0x1, 0x0);
        gbc.writeMem(0x22c6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x46d5, gbc.sp());
        EXPECT(0x22c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0028
        gbc.setState(0x1f7b, 0x1cf9, 0xcd10, 0xdfad, 0x9300, 0x18b4, 0x0, 0x0);
        gbc.writeMem(0x1f7b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x1cf9, gbc.sp());
        EXPECT(0x1f7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0029
        gbc.setState(0xbd25, 0x8010, 0x98e0, 0x3309, 0x6701, 0x7227, 0x1, 0x0);
        gbc.writeMem(0xbd25, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x8010, gbc.sp());
        EXPECT(0xbd27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd25));
        EXPECT(0x80, gbc.readMem(0xbd26));
        // CB 80 002A
        gbc.setState(0x4d73, 0xe749, 0xe9a0, 0x98e2, 0x35a, 0xbc08, 0x1, 0x0);
        gbc.writeMem(0x4d73, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xe749, gbc.sp());
        EXPECT(0x4d75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 002B
        gbc.setState(0x8e01, 0x97a, 0x72e0, 0x8f6d, 0x740c, 0xbfb1, 0x0, 0x0);
        gbc.writeMem(0x8e01, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x97a, gbc.sp());
        EXPECT(0x8e03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e01));
        EXPECT(0x80, gbc.readMem(0x8e02));
        // CB 80 002C
        gbc.setState(0x1389, 0x11f6, 0x1fa0, 0x9851, 0xd219, 0xb3ff, 0x1, 0x1);
        gbc.writeMem(0x1389, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x11f6, gbc.sp());
        EXPECT(0x138b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 002D
        gbc.setState(0x19d3, 0x8123, 0x6a00, 0xaa82, 0xa9, 0xc5a3, 0x0, 0x1);
        gbc.writeMem(0x19d3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x8123, gbc.sp());
        EXPECT(0x19d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 002E
        gbc.setState(0x17e1, 0x8fe0, 0x7400, 0xf664, 0x9779, 0xadf9, 0x1, 0x1);
        gbc.writeMem(0x17e1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x8fe0, gbc.sp());
        EXPECT(0x17e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 002F
        gbc.setState(0xa3dc, 0x4af2, 0x38b0, 0x1202, 0xf88a, 0xa915, 0x1, 0x0);
        gbc.writeMem(0xa3dc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x4af2, gbc.sp());
        EXPECT(0xa3de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3dc));
        EXPECT(0x80, gbc.readMem(0xa3dd));
        // CB 80 0030
        gbc.setState(0x921f, 0xa27d, 0x6080, 0xa2cf, 0xb9b6, 0x7dfa, 0x0, 0x0);
        gbc.writeMem(0x921f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xa27d, gbc.sp());
        EXPECT(0x9221, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x921f));
        EXPECT(0x80, gbc.readMem(0x9220));
        // CB 80 0031
        gbc.setState(0x2b64, 0x8fb, 0xd380, 0x8e0a, 0xfc6d, 0xcbc2, 0x0, 0x0);
        gbc.writeMem(0x2b64, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x8fb, gbc.sp());
        EXPECT(0x2b66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0032
        gbc.setState(0x7013, 0x10c1, 0xa1f0, 0x9f47, 0xae27, 0x103e, 0x0, 0x1);
        gbc.writeMem(0x7013, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x10c1, gbc.sp());
        EXPECT(0x7015, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0033
        gbc.setState(0x7c70, 0x5a2a, 0xaa80, 0x6186, 0x95c7, 0x93ae, 0x0, 0x0);
        gbc.writeMem(0x7c70, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x5a2a, gbc.sp());
        EXPECT(0x7c72, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0034
        gbc.setState(0x980f, 0x9d0e, 0xd2f0, 0x2a93, 0xb971, 0xe34c, 0x0, 0x1);
        gbc.writeMem(0x980f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x9d0e, gbc.sp());
        EXPECT(0x9811, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x980f));
        EXPECT(0x80, gbc.readMem(0x9810));
        // CB 80 0035
        gbc.setState(0x5979, 0x5e19, 0xf1f0, 0x5bd2, 0xf0fa, 0x7c5d, 0x0, 0x0);
        gbc.writeMem(0x5979, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x5e19, gbc.sp());
        EXPECT(0x597b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0036
        gbc.setState(0xbad1, 0xc89d, 0xace0, 0x7ca9, 0xcc89, 0x7daf, 0x1, 0x0);
        gbc.writeMem(0xbad1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xc89d, gbc.sp());
        EXPECT(0xbad3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbad1));
        EXPECT(0x80, gbc.readMem(0xbad2));
        // CB 80 0037
        gbc.setState(0x5686, 0xb300, 0x1b10, 0xb8b3, 0x736b, 0x3abe, 0x1, 0x0);
        gbc.writeMem(0x5686, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xb300, gbc.sp());
        EXPECT(0x5688, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0038
        gbc.setState(0x9c22, 0x9235, 0x120, 0x8c04, 0x39e1, 0x9528, 0x0, 0x1);
        gbc.writeMem(0x9c22, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x9235, gbc.sp());
        EXPECT(0x9c24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c22));
        EXPECT(0x80, gbc.readMem(0x9c23));
        // CB 80 0039
        gbc.setState(0xa537, 0xa5e2, 0x2520, 0xa0df, 0x22c7, 0x7b5c, 0x1, 0x1);
        gbc.writeMem(0xa537, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xa5e2, gbc.sp());
        EXPECT(0xa539, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa537));
        EXPECT(0x80, gbc.readMem(0xa538));
        // CB 80 003A
        gbc.setState(0x1c81, 0x98d7, 0xa3b0, 0x4b14, 0x63a8, 0x5008, 0x1, 0x0);
        gbc.writeMem(0x1c81, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x98d7, gbc.sp());
        EXPECT(0x1c83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 003B
        gbc.setState(0x1edd, 0xa0af, 0x7930, 0x266c, 0x8097, 0xa60b, 0x0, 0x0);
        gbc.writeMem(0x1edd, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xa0af, gbc.sp());
        EXPECT(0x1edf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 003C
        gbc.setState(0x333a, 0xb48f, 0xa7b0, 0x4c6e, 0x1366, 0xf4fd, 0x0, 0x1);
        gbc.writeMem(0x333a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xb48f, gbc.sp());
        EXPECT(0x333c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 003D
        gbc.setState(0x460a, 0x27f7, 0x5c30, 0xadb4, 0x7471, 0x5492, 0x1, 0x0);
        gbc.writeMem(0x460a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x27f7, gbc.sp());
        EXPECT(0x460c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 003E
        gbc.setState(0x3b9d, 0x940d, 0x8310, 0x2bd4, 0xdf56, 0x18bf, 0x1, 0x1);
        gbc.writeMem(0x3b9d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x940d, gbc.sp());
        EXPECT(0x3b9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 003F
        gbc.setState(0x24e8, 0xd3df, 0x3ba0, 0xdcb8, 0x519, 0xaccf, 0x0, 0x0);
        gbc.writeMem(0x24e8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xd3df, gbc.sp());
        EXPECT(0x24ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0040
        gbc.setState(0x8829, 0xa7f6, 0xe980, 0x85af, 0x6977, 0xf9ef, 0x1, 0x1);
        gbc.writeMem(0x8829, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xa7f6, gbc.sp());
        EXPECT(0x882b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8829));
        EXPECT(0x80, gbc.readMem(0x882a));
        // CB 80 0041
        gbc.setState(0x9e55, 0xa723, 0xcbd0, 0xf6f2, 0xef59, 0x5b68, 0x1, 0x0);
        gbc.writeMem(0x9e55, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xa723, gbc.sp());
        EXPECT(0x9e57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e55));
        EXPECT(0x80, gbc.readMem(0x9e56));
        // CB 80 0042
        gbc.setState(0x5f39, 0xb957, 0x9600, 0xf7d5, 0x51cd, 0x530b, 0x1, 0x1);
        gbc.writeMem(0x5f39, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xb957, gbc.sp());
        EXPECT(0x5f3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0043
        gbc.setState(0x624, 0x7ee4, 0x2610, 0x8461, 0x299a, 0xf576, 0x0, 0x1);
        gbc.writeMem(0x624, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x7ee4, gbc.sp());
        EXPECT(0x626, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0046
        gbc.setState(0x18ae, 0x5e1f, 0x8c10, 0x21bd, 0x6f88, 0x8188, 0x0, 0x0);
        gbc.writeMem(0x18ae, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x5e1f, gbc.sp());
        EXPECT(0x18b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0047
        gbc.setState(0x19be, 0x5db4, 0xb220, 0xf6ef, 0xf879, 0xde1a, 0x1, 0x0);
        gbc.writeMem(0x19be, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x5db4, gbc.sp());
        EXPECT(0x19c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0048
        gbc.setState(0xb2ab, 0xfbc3, 0xdf0, 0x40b, 0x4136, 0xa6f, 0x0, 0x0);
        gbc.writeMem(0xb2ab, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xfbc3, gbc.sp());
        EXPECT(0xb2ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2ab));
        EXPECT(0x80, gbc.readMem(0xb2ac));
        // CB 80 0049
        gbc.setState(0x1da3, 0x80c4, 0x8680, 0x45, 0xd5f4, 0x37a2, 0x1, 0x0);
        gbc.writeMem(0x1da3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x80c4, gbc.sp());
        EXPECT(0x1da5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 004A
        gbc.setState(0xb7ee, 0xec32, 0x2830, 0xdb67, 0xee71, 0x7baf, 0x1, 0x0);
        gbc.writeMem(0xb7ee, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xec32, gbc.sp());
        EXPECT(0xb7f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7ee));
        EXPECT(0x80, gbc.readMem(0xb7ef));
        // CB 80 004B
        gbc.setState(0x1ef8, 0xb4ae, 0xd6f0, 0xe794, 0xe8a4, 0x81cd, 0x1, 0x1);
        gbc.writeMem(0x1ef8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xb4ae, gbc.sp());
        EXPECT(0x1efa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 004C
        gbc.setState(0xcc3a, 0xfd94, 0x2150, 0x43e8, 0xa0a7, 0x9e52, 0x0, 0x1);
        gbc.writeMem(0xcc3a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xfd94, gbc.sp());
        EXPECT(0xcc3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc3a));
        EXPECT(0x80, gbc.readMem(0xcc3b));
        // CB 80 004D
        gbc.setState(0xcec3, 0xfa48, 0xf7e0, 0x3f66, 0xfa07, 0x7f48, 0x1, 0x0);
        gbc.writeMem(0xcec3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xfa48, gbc.sp());
        EXPECT(0xcec5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcec3));
        EXPECT(0x80, gbc.readMem(0xcec4));
        // CB 80 004E
        gbc.setState(0xb9da, 0x2580, 0xe4e0, 0xe9ad, 0x21f, 0x88e, 0x1, 0x1);
        gbc.writeMem(0xb9da, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x2580, gbc.sp());
        EXPECT(0xb9dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9da));
        EXPECT(0x80, gbc.readMem(0xb9db));
        // CB 80 004F
        gbc.setState(0x140e, 0x9efc, 0xbb90, 0x88c5, 0x8c81, 0xab5d, 0x0, 0x1);
        gbc.writeMem(0x140e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x9efc, gbc.sp());
        EXPECT(0x1410, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0050
        gbc.setState(0x2f00, 0x7809, 0x1820, 0xb9a8, 0x7e24, 0x621f, 0x1, 0x0);
        gbc.writeMem(0x2f00, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x7809, gbc.sp());
        EXPECT(0x2f02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0051
        gbc.setState(0x1a86, 0x5525, 0xcb60, 0xab33, 0x2a24, 0xf8d2, 0x0, 0x1);
        gbc.writeMem(0x1a86, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x5525, gbc.sp());
        EXPECT(0x1a88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0052
        gbc.setState(0xdfa4, 0x6fc5, 0x62f0, 0x1b3e, 0x6d03, 0x54cd, 0x1, 0x0);
        gbc.writeMem(0xdfa4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x6fc5, gbc.sp());
        EXPECT(0xdfa6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfa4));
        EXPECT(0x80, gbc.readMem(0xdfa5));
        // CB 80 0053
        gbc.setState(0x2feb, 0xe74, 0x97d0, 0x4637, 0x8f95, 0x6637, 0x1, 0x1);
        gbc.writeMem(0x2feb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xe74, gbc.sp());
        EXPECT(0x2fed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0054
        gbc.setState(0xe40a, 0x742e, 0x19a0, 0x81c0, 0x5e0a, 0x2417, 0x0, 0x1);
        gbc.writeMem(0xe40a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x742e, gbc.sp());
        EXPECT(0xe40c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe40a));
        EXPECT(0x80, gbc.readMem(0xe40b));
        // CB 80 0055
        gbc.setState(0x435f, 0x8fba, 0x8ab0, 0x9e88, 0x1ed7, 0x645e, 0x1, 0x1);
        gbc.writeMem(0x435f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x8fba, gbc.sp());
        EXPECT(0x4361, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0056
        gbc.setState(0x8d37, 0xdf5b, 0xc9e0, 0x45ea, 0x67ca, 0xd5ac, 0x1, 0x1);
        gbc.writeMem(0x8d37, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xdf5b, gbc.sp());
        EXPECT(0x8d39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d37));
        EXPECT(0x80, gbc.readMem(0x8d38));
        // CB 80 0057
        gbc.setState(0x7a84, 0x80d6, 0x2530, 0x8b93, 0xc871, 0x88e8, 0x1, 0x1);
        gbc.writeMem(0x7a84, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x80d6, gbc.sp());
        EXPECT(0x7a86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0058
        gbc.setState(0x977a, 0x541b, 0xf910, 0xba3b, 0x4c4d, 0x71a8, 0x1, 0x1);
        gbc.writeMem(0x977a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x541b, gbc.sp());
        EXPECT(0x977c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x977a));
        EXPECT(0x80, gbc.readMem(0x977b));
        // CB 80 0059
        gbc.setState(0x20b, 0xe0c5, 0xeb30, 0xbbcb, 0x1754, 0xd609, 0x0, 0x0);
        gbc.writeMem(0x20b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xe0c5, gbc.sp());
        EXPECT(0x20d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 005A
        gbc.setState(0xaee7, 0x2b87, 0xc680, 0x838c, 0xb00e, 0xd665, 0x1, 0x0);
        gbc.writeMem(0xaee7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x2b87, gbc.sp());
        EXPECT(0xaee9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaee7));
        EXPECT(0x80, gbc.readMem(0xaee8));
        // CB 80 005B
        gbc.setState(0x2784, 0xee2c, 0x9410, 0x2fdc, 0x6d8f, 0xd28d, 0x1, 0x1);
        gbc.writeMem(0x2784, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xee2c, gbc.sp());
        EXPECT(0x2786, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 005C
        gbc.setState(0xd403, 0xc, 0xaeb0, 0x8a4f, 0x316d, 0x8ec9, 0x1, 0x0);
        gbc.writeMem(0xd403, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xc, gbc.sp());
        EXPECT(0xd405, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd403));
        EXPECT(0x80, gbc.readMem(0xd404));
        // CB 80 005D
        gbc.setState(0xd064, 0xef0a, 0x2ac0, 0x291, 0x37ba, 0x9aeb, 0x1, 0x1);
        gbc.writeMem(0xd064, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xef0a, gbc.sp());
        EXPECT(0xd066, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd064));
        EXPECT(0x80, gbc.readMem(0xd065));
        // CB 80 005E
        gbc.setState(0x8bee, 0x2c21, 0xec90, 0x943b, 0x7cc, 0x7345, 0x1, 0x0);
        gbc.writeMem(0x8bee, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x2c21, gbc.sp());
        EXPECT(0x8bf0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bee));
        EXPECT(0x80, gbc.readMem(0x8bef));
        // CB 80 005F
        gbc.setState(0xe556, 0xf67d, 0x3470, 0x672c, 0xd180, 0x361e, 0x1, 0x1);
        gbc.writeMem(0xe556, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xf67d, gbc.sp());
        EXPECT(0xe558, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe556));
        EXPECT(0x80, gbc.readMem(0xe557));
        // CB 80 0060
        gbc.setState(0x22fb, 0x65c6, 0xff90, 0xa131, 0x6643, 0xadd5, 0x1, 0x1);
        gbc.writeMem(0x22fb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x65c6, gbc.sp());
        EXPECT(0x22fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0062
        gbc.setState(0x355c, 0x139f, 0x94a0, 0x11d9, 0x536, 0x7b2b, 0x0, 0x0);
        gbc.writeMem(0x355c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x139f, gbc.sp());
        EXPECT(0x355e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0063
        gbc.setState(0x125a, 0x42a7, 0x3900, 0xe2e0, 0xe53c, 0x8d2b, 0x0, 0x1);
        gbc.writeMem(0x125a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x42a7, gbc.sp());
        EXPECT(0x125c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0064
        gbc.setState(0x2a81, 0xec20, 0x8f90, 0xd565, 0xc4f5, 0x348f, 0x1, 0x0);
        gbc.writeMem(0x2a81, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xec20, gbc.sp());
        EXPECT(0x2a83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0066
        gbc.setState(0xcde6, 0x509d, 0x3360, 0x7fa4, 0x94c8, 0x3420, 0x0, 0x0);
        gbc.writeMem(0xcde6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x509d, gbc.sp());
        EXPECT(0xcde8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcde6));
        EXPECT(0x80, gbc.readMem(0xcde7));
        // CB 80 0068
        gbc.setState(0xe11, 0x20c2, 0x76c0, 0x9b6, 0xa6e8, 0x32af, 0x0, 0x0);
        gbc.writeMem(0xe11, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x20c2, gbc.sp());
        EXPECT(0xe13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0069
        gbc.setState(0x3234, 0x86f9, 0x2630, 0x6e52, 0x6812, 0x6f6b, 0x1, 0x1);
        gbc.writeMem(0x3234, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x86f9, gbc.sp());
        EXPECT(0x3236, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 006A
        gbc.setState(0x1b0, 0xeaff, 0x8dd0, 0x1c19, 0x3fa2, 0x7546, 0x0, 0x1);
        gbc.writeMem(0x1b0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xeaff, gbc.sp());
        EXPECT(0x1b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 006B
        gbc.setState(0x86a9, 0x56f0, 0xf020, 0xc1b2, 0x556e, 0x127e, 0x0, 0x0);
        gbc.writeMem(0x86a9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x56f0, gbc.sp());
        EXPECT(0x86ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86a9));
        EXPECT(0x80, gbc.readMem(0x86aa));
        // CB 80 006C
        gbc.setState(0x4b1d, 0x9429, 0x8620, 0xddbb, 0x6403, 0xfd18, 0x0, 0x0);
        gbc.writeMem(0x4b1d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x9429, gbc.sp());
        EXPECT(0x4b1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 006D
        gbc.setState(0x3db9, 0x3755, 0x54d0, 0xa67c, 0x8194, 0x97d2, 0x1, 0x1);
        gbc.writeMem(0x3db9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x3755, gbc.sp());
        EXPECT(0x3dbb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 006E
        gbc.setState(0xb645, 0xf269, 0xfc00, 0xfebe, 0xb4b4, 0x2d03, 0x0, 0x1);
        gbc.writeMem(0xb645, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xf269, gbc.sp());
        EXPECT(0xb647, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb645));
        EXPECT(0x80, gbc.readMem(0xb646));
        // CB 80 006F
        gbc.setState(0x3cfc, 0xf900, 0xe200, 0x8264, 0xb273, 0xa1ed, 0x1, 0x1);
        gbc.writeMem(0x3cfc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xf900, gbc.sp());
        EXPECT(0x3cfe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0070
        gbc.setState(0x6804, 0x81db, 0x8010, 0x433a, 0x2d1e, 0x97f8, 0x1, 0x0);
        gbc.writeMem(0x6804, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x81db, gbc.sp());
        EXPECT(0x6806, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0071
        gbc.setState(0xa14e, 0xde22, 0xf220, 0xfaeb, 0xc60d, 0x20f2, 0x0, 0x1);
        gbc.writeMem(0xa14e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xde22, gbc.sp());
        EXPECT(0xa150, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa14e));
        EXPECT(0x80, gbc.readMem(0xa14f));
        // CB 80 0072
        gbc.setState(0xd219, 0x53b, 0x2d00, 0xae22, 0x66cf, 0xc3ba, 0x0, 0x0);
        gbc.writeMem(0xd219, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x53b, gbc.sp());
        EXPECT(0xd21b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd219));
        EXPECT(0x80, gbc.readMem(0xd21a));
        // CB 80 0073
        gbc.setState(0xc7c5, 0x9054, 0xf2d0, 0x655f, 0xa09e, 0xce2a, 0x1, 0x1);
        gbc.writeMem(0xc7c5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x9054, gbc.sp());
        EXPECT(0xc7c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7c5));
        EXPECT(0x80, gbc.readMem(0xc7c6));
        // CB 80 0074
        gbc.setState(0x99a, 0x1c20, 0x8230, 0x59a9, 0xc13d, 0x8d3b, 0x0, 0x0);
        gbc.writeMem(0x99a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x1c20, gbc.sp());
        EXPECT(0x99c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0075
        gbc.setState(0x85fd, 0xf1ef, 0x440, 0xb437, 0xada8, 0x9ecf, 0x1, 0x0);
        gbc.writeMem(0x85fd, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xf1ef, gbc.sp());
        EXPECT(0x85ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85fd));
        EXPECT(0x80, gbc.readMem(0x85fe));
        // CB 80 0076
        gbc.setState(0x42d0, 0x175f, 0x96a0, 0x1a20, 0x1e5c, 0x87d5, 0x0, 0x0);
        gbc.writeMem(0x42d0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x175f, gbc.sp());
        EXPECT(0x42d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0077
        gbc.setState(0x8fe4, 0x1973, 0x8cb0, 0x7253, 0x352d, 0x91e6, 0x0, 0x1);
        gbc.writeMem(0x8fe4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x1973, gbc.sp());
        EXPECT(0x8fe6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fe4));
        EXPECT(0x80, gbc.readMem(0x8fe5));
        // CB 80 0078
        gbc.setState(0x4f6e, 0x64e5, 0xea80, 0x6508, 0x6244, 0xb72d, 0x0, 0x1);
        gbc.writeMem(0x4f6e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x64e5, gbc.sp());
        EXPECT(0x4f70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0079
        gbc.setState(0x6881, 0xa226, 0xd990, 0xb312, 0x6bef, 0xaa4d, 0x1, 0x0);
        gbc.writeMem(0x6881, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xa226, gbc.sp());
        EXPECT(0x6883, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 007A
        gbc.setState(0xb706, 0x1b83, 0xe5c0, 0xf313, 0x4077, 0xa3e8, 0x1, 0x0);
        gbc.writeMem(0xb706, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x1b83, gbc.sp());
        EXPECT(0xb708, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb706));
        EXPECT(0x80, gbc.readMem(0xb707));
        // CB 80 007B
        gbc.setState(0xac9d, 0x647, 0xa0a0, 0x25a3, 0x8272, 0xa85c, 0x1, 0x1);
        gbc.writeMem(0xac9d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x647, gbc.sp());
        EXPECT(0xac9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac9d));
        EXPECT(0x80, gbc.readMem(0xac9e));
        // CB 80 007C
        gbc.setState(0x7077, 0x33a9, 0xe000, 0xff2a, 0x4d79, 0x8d89, 0x0, 0x0);
        gbc.writeMem(0x7077, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x33a9, gbc.sp());
        EXPECT(0x7079, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 007D
        gbc.setState(0x2e9a, 0xb063, 0xf840, 0xd691, 0x6b5c, 0xed89, 0x1, 0x1);
        gbc.writeMem(0x2e9a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xb063, gbc.sp());
        EXPECT(0x2e9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 007E
        gbc.setState(0x6b75, 0x7601, 0xe860, 0x1482, 0xe349, 0xd73d, 0x0, 0x1);
        gbc.writeMem(0x6b75, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x7601, gbc.sp());
        EXPECT(0x6b77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 007F
        gbc.setState(0x6d70, 0x1956, 0xde00, 0x13bf, 0xf9d8, 0x4a53, 0x0, 0x0);
        gbc.writeMem(0x6d70, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x1956, gbc.sp());
        EXPECT(0x6d72, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0080
        gbc.setState(0xcd83, 0xd5b8, 0x7500, 0x67f7, 0x80e8, 0xb6f6, 0x1, 0x0);
        gbc.writeMem(0xcd83, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xd5b8, gbc.sp());
        EXPECT(0xcd85, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd83));
        EXPECT(0x80, gbc.readMem(0xcd84));
        // CB 80 0081
        gbc.setState(0xa36b, 0xb383, 0xd2d0, 0x8d26, 0xabe1, 0x1630, 0x0, 0x1);
        gbc.writeMem(0xa36b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xb383, gbc.sp());
        EXPECT(0xa36d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa36b));
        EXPECT(0x80, gbc.readMem(0xa36c));
        // CB 80 0082
        gbc.setState(0xb5b7, 0x5b57, 0x27a0, 0x4b3c, 0x4ae0, 0xd9cc, 0x0, 0x0);
        gbc.writeMem(0xb5b7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x5b57, gbc.sp());
        EXPECT(0xb5b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5b7));
        EXPECT(0x80, gbc.readMem(0xb5b8));
        // CB 80 0083
        gbc.setState(0x69fd, 0xa619, 0xa60, 0x12c0, 0x2617, 0xa59a, 0x0, 0x0);
        gbc.writeMem(0x69fd, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xa619, gbc.sp());
        EXPECT(0x69ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0084
        gbc.setState(0x3ec, 0xddbe, 0x5900, 0x40cb, 0x58f8, 0x9792, 0x0, 0x1);
        gbc.writeMem(0x3ec, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xddbe, gbc.sp());
        EXPECT(0x3ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0085
        gbc.setState(0x1814, 0x78df, 0x1420, 0xfa7e, 0x332a, 0x20ff, 0x1, 0x0);
        gbc.writeMem(0x1814, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x78df, gbc.sp());
        EXPECT(0x1816, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0086
        gbc.setState(0x6cb5, 0xe3e3, 0x9bf0, 0x5728, 0x6a42, 0x5120, 0x1, 0x0);
        gbc.writeMem(0x6cb5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xe3e3, gbc.sp());
        EXPECT(0x6cb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0087
        gbc.setState(0x5ac7, 0x13b3, 0xca90, 0xc54c, 0x2aca, 0x4db, 0x0, 0x1);
        gbc.writeMem(0x5ac7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x13b3, gbc.sp());
        EXPECT(0x5ac9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0089
        gbc.setState(0xd98e, 0x241f, 0x8db0, 0xb678, 0x7d54, 0x48bf, 0x0, 0x0);
        gbc.writeMem(0xd98e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x241f, gbc.sp());
        EXPECT(0xd990, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd98e));
        EXPECT(0x80, gbc.readMem(0xd98f));
        // CB 80 008A
        gbc.setState(0xb010, 0x56a8, 0x5210, 0x9cdd, 0xdc55, 0x5b20, 0x0, 0x0);
        gbc.writeMem(0xb010, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x56a8, gbc.sp());
        EXPECT(0xb012, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb010));
        EXPECT(0x80, gbc.readMem(0xb011));
        // CB 80 008B
        gbc.setState(0x40bf, 0x61b3, 0xb80, 0x7d37, 0xea64, 0x82a, 0x0, 0x1);
        gbc.writeMem(0x40bf, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x61b3, gbc.sp());
        EXPECT(0x40c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 008C
        gbc.setState(0xf04, 0xb392, 0x3170, 0xa262, 0x7930, 0xe134, 0x1, 0x0);
        gbc.writeMem(0xf04, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xb392, gbc.sp());
        EXPECT(0xf06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 008D
        gbc.setState(0x7a95, 0x55b, 0xb170, 0x71b7, 0x5b28, 0xa985, 0x0, 0x0);
        gbc.writeMem(0x7a95, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x55b, gbc.sp());
        EXPECT(0x7a97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 008E
        gbc.setState(0xdc05, 0xa14e, 0xaa80, 0x41ef, 0xcfbb, 0x4949, 0x1, 0x0);
        gbc.writeMem(0xdc05, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xa14e, gbc.sp());
        EXPECT(0xdc07, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc05));
        EXPECT(0x80, gbc.readMem(0xdc06));
        // CB 80 008F
        gbc.setState(0xdc5f, 0x7dc, 0xa8a0, 0x675d, 0xa8e2, 0xaa78, 0x0, 0x1);
        gbc.writeMem(0xdc5f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x7dc, gbc.sp());
        EXPECT(0xdc61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc5f));
        EXPECT(0x80, gbc.readMem(0xdc60));
        // CB 80 0090
        gbc.setState(0xac1, 0xb18e, 0xb8d0, 0x3a55, 0x1b19, 0x5d9f, 0x0, 0x1);
        gbc.writeMem(0xac1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xb18e, gbc.sp());
        EXPECT(0xac3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0091
        gbc.setState(0x4f26, 0xc5be, 0xbcc0, 0x15ec, 0x1fd3, 0x1382, 0x0, 0x1);
        gbc.writeMem(0x4f26, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xc5be, gbc.sp());
        EXPECT(0x4f28, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0093
        gbc.setState(0x8272, 0x3417, 0x45e0, 0xe682, 0x15b8, 0x896d, 0x1, 0x1);
        gbc.writeMem(0x8272, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x3417, gbc.sp());
        EXPECT(0x8274, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8272));
        EXPECT(0x80, gbc.readMem(0x8273));
        // CB 80 0094
        gbc.setState(0xca79, 0xbb07, 0xdda0, 0xb247, 0xb4d2, 0x465c, 0x0, 0x0);
        gbc.writeMem(0xca79, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xbb07, gbc.sp());
        EXPECT(0xca7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca79));
        EXPECT(0x80, gbc.readMem(0xca7a));
        // CB 80 0096
        gbc.setState(0x2df8, 0x72bc, 0x94b0, 0x9896, 0xeea4, 0x2480, 0x0, 0x1);
        gbc.writeMem(0x2df8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x72bc, gbc.sp());
        EXPECT(0x2dfa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0097
        gbc.setState(0x16f3, 0xf9b6, 0x9080, 0x7259, 0x3df9, 0x94b2, 0x0, 0x0);
        gbc.writeMem(0x16f3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xf9b6, gbc.sp());
        EXPECT(0x16f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0098
        gbc.setState(0xbf8, 0xc69a, 0xd760, 0x9f71, 0x9fcf, 0x42a2, 0x1, 0x1);
        gbc.writeMem(0xbf8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xc69a, gbc.sp());
        EXPECT(0xbfa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0099
        gbc.setState(0x5768, 0x688f, 0xfc10, 0x2010, 0x2269, 0x773e, 0x1, 0x1);
        gbc.writeMem(0x5768, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x688f, gbc.sp());
        EXPECT(0x576a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 009A
        gbc.setState(0x24fe, 0x1778, 0xb10, 0x711d, 0x4637, 0xcd13, 0x1, 0x0);
        gbc.writeMem(0x24fe, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x1778, gbc.sp());
        EXPECT(0x2500, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 009B
        gbc.setState(0x3bc2, 0x3bc7, 0x5e50, 0x4d27, 0x91e2, 0x13c7, 0x0, 0x0);
        gbc.writeMem(0x3bc2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x3bc7, gbc.sp());
        EXPECT(0x3bc4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 009C
        gbc.setState(0x8765, 0xf26d, 0x8f20, 0x414c, 0xbe8, 0x149c, 0x0, 0x1);
        gbc.writeMem(0x8765, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xf26d, gbc.sp());
        EXPECT(0x8767, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8765));
        EXPECT(0x80, gbc.readMem(0x8766));
        // CB 80 009D
        gbc.setState(0xddfb, 0x5d4e, 0x74b0, 0xf36b, 0xb317, 0x27c0, 0x1, 0x0);
        gbc.writeMem(0xddfb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x5d4e, gbc.sp());
        EXPECT(0xddfd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddfb));
        EXPECT(0x80, gbc.readMem(0xddfc));
        // CB 80 009E
        gbc.setState(0x9630, 0xd212, 0xad90, 0xceb2, 0xdae2, 0x87b4, 0x0, 0x0);
        gbc.writeMem(0x9630, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xd212, gbc.sp());
        EXPECT(0x9632, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9630));
        EXPECT(0x80, gbc.readMem(0x9631));
        // CB 80 00A0
        gbc.setState(0xba58, 0x9365, 0x4b50, 0x8eb3, 0xcebc, 0xd1cc, 0x0, 0x0);
        gbc.writeMem(0xba58, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x9365, gbc.sp());
        EXPECT(0xba5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba58));
        EXPECT(0x80, gbc.readMem(0xba59));
        // CB 80 00A1
        gbc.setState(0x4d3e, 0xb0f8, 0xc430, 0x6a0e, 0xc0fd, 0xfd09, 0x1, 0x0);
        gbc.writeMem(0x4d3e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xb0f8, gbc.sp());
        EXPECT(0x4d40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00A2
        gbc.setState(0x226f, 0xbf5d, 0xe670, 0x3afa, 0x74c3, 0x9e4, 0x0, 0x0);
        gbc.writeMem(0x226f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xbf5d, gbc.sp());
        EXPECT(0x2271, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00A3
        gbc.setState(0x97be, 0x5cc, 0x31a0, 0x17a, 0xcf62, 0xd54a, 0x0, 0x1);
        gbc.writeMem(0x97be, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x5cc, gbc.sp());
        EXPECT(0x97c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97be));
        EXPECT(0x80, gbc.readMem(0x97bf));
        // CB 80 00A5
        gbc.setState(0xe64c, 0x5f45, 0x90d0, 0xf1dd, 0x8ebc, 0xb6d, 0x1, 0x0);
        gbc.writeMem(0xe64c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x5f45, gbc.sp());
        EXPECT(0xe64e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe64c));
        EXPECT(0x80, gbc.readMem(0xe64d));
        // CB 80 00A6
        gbc.setState(0x7d7f, 0xe650, 0x2000, 0x67aa, 0x75a4, 0xe04a, 0x1, 0x1);
        gbc.writeMem(0x7d7f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xe650, gbc.sp());
        EXPECT(0x7d81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00A7
        gbc.setState(0x9597, 0xd044, 0x57d0, 0xbcfa, 0xd34e, 0x6fa2, 0x0, 0x1);
        gbc.writeMem(0x9597, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xd044, gbc.sp());
        EXPECT(0x9599, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9597));
        EXPECT(0x80, gbc.readMem(0x9598));
        // CB 80 00A8
        gbc.setState(0x5b30, 0xf502, 0x9750, 0x4944, 0x2e3b, 0x109e, 0x0, 0x1);
        gbc.writeMem(0x5b30, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xf502, gbc.sp());
        EXPECT(0x5b32, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00A9
        gbc.setState(0x907a, 0x52bf, 0x2300, 0x5c7a, 0xcb9, 0x4c40, 0x1, 0x0);
        gbc.writeMem(0x907a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x52bf, gbc.sp());
        EXPECT(0x907c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x907a));
        EXPECT(0x80, gbc.readMem(0x907b));
        // CB 80 00AA
        gbc.setState(0x6a9d, 0x6ccf, 0xde60, 0xf955, 0xca07, 0xb133, 0x0, 0x1);
        gbc.writeMem(0x6a9d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x6ccf, gbc.sp());
        EXPECT(0x6a9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00AB
        gbc.setState(0x6fa5, 0x2ae4, 0x9820, 0xb4d2, 0x272a, 0x5ff3, 0x1, 0x0);
        gbc.writeMem(0x6fa5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x2ae4, gbc.sp());
        EXPECT(0x6fa7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00AC
        gbc.setState(0xe9fb, 0xa9e3, 0xba0, 0xace4, 0xa9de, 0x67e0, 0x1, 0x1);
        gbc.writeMem(0xe9fb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xa9e3, gbc.sp());
        EXPECT(0xe9fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9fb));
        EXPECT(0x80, gbc.readMem(0xe9fc));
        // CB 80 00AD
        gbc.setState(0x3937, 0x8887, 0x3000, 0xb067, 0x39d6, 0xf4cf, 0x0, 0x1);
        gbc.writeMem(0x3937, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x8887, gbc.sp());
        EXPECT(0x3939, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00AE
        gbc.setState(0x5d19, 0x8c12, 0x66c0, 0xff9d, 0x7eab, 0xefa3, 0x0, 0x0);
        gbc.writeMem(0x5d19, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x8c12, gbc.sp());
        EXPECT(0x5d1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00AF
        gbc.setState(0x7fad, 0xa74a, 0x9b40, 0xfd87, 0x3052, 0x3626, 0x0, 0x0);
        gbc.writeMem(0x7fad, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xa74a, gbc.sp());
        EXPECT(0x7faf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00B0
        gbc.setState(0xe498, 0x6dfc, 0x9ae0, 0x219, 0xacc4, 0x9345, 0x1, 0x1);
        gbc.writeMem(0xe498, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x6dfc, gbc.sp());
        EXPECT(0xe49a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe498));
        EXPECT(0x80, gbc.readMem(0xe499));
        // CB 80 00B1
        gbc.setState(0x9e19, 0x191, 0xda00, 0x44d4, 0x57f8, 0x8a9b, 0x0, 0x1);
        gbc.writeMem(0x9e19, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x191, gbc.sp());
        EXPECT(0x9e1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e19));
        EXPECT(0x80, gbc.readMem(0x9e1a));
        // CB 80 00B2
        gbc.setState(0x37ab, 0xf6c3, 0x1640, 0x4e08, 0xa635, 0x88b2, 0x1, 0x1);
        gbc.writeMem(0x37ab, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xf6c3, gbc.sp());
        EXPECT(0x37ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00B4
        gbc.setState(0x2173, 0xd73d, 0x9770, 0xba9b, 0xcc89, 0xf913, 0x0, 0x0);
        gbc.writeMem(0x2173, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xd73d, gbc.sp());
        EXPECT(0x2175, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00B5
        gbc.setState(0x8b43, 0x6daa, 0xa240, 0x6e3c, 0xfe5d, 0xf4eb, 0x1, 0x0);
        gbc.writeMem(0x8b43, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x6daa, gbc.sp());
        EXPECT(0x8b45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b43));
        EXPECT(0x80, gbc.readMem(0x8b44));
        // CB 80 00B6
        gbc.setState(0x3ffa, 0x2280, 0xb660, 0x64bd, 0x7b91, 0xd106, 0x1, 0x0);
        gbc.writeMem(0x3ffa, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x2280, gbc.sp());
        EXPECT(0x3ffc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00B7
        gbc.setState(0x160d, 0x1fc4, 0x1610, 0xc6ec, 0x8c52, 0xb236, 0x0, 0x0);
        gbc.writeMem(0x160d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x1fc4, gbc.sp());
        EXPECT(0x160f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00B8
        gbc.setState(0x8ac0, 0x2a9c, 0x7e50, 0xb9b3, 0xd49f, 0xb6e5, 0x1, 0x1);
        gbc.writeMem(0x8ac0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x2a9c, gbc.sp());
        EXPECT(0x8ac2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ac0));
        EXPECT(0x80, gbc.readMem(0x8ac1));
        // CB 80 00B9
        gbc.setState(0x9846, 0xaab7, 0x20c0, 0x95aa, 0xdb4f, 0x76d1, 0x1, 0x0);
        gbc.writeMem(0x9846, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xaab7, gbc.sp());
        EXPECT(0x9848, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9846));
        EXPECT(0x80, gbc.readMem(0x9847));
        // CB 80 00BA
        gbc.setState(0x1580, 0x962e, 0xb910, 0x6f93, 0xc53, 0x7a80, 0x1, 0x0);
        gbc.writeMem(0x1580, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x962e, gbc.sp());
        EXPECT(0x1582, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00BB
        gbc.setState(0x137, 0x978d, 0x7390, 0x475d, 0x665b, 0x1e91, 0x1, 0x0);
        gbc.writeMem(0x137, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x978d, gbc.sp());
        EXPECT(0x139, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00BC
        gbc.setState(0x5205, 0xba09, 0x8760, 0x975a, 0x7602, 0x818, 0x0, 0x0);
        gbc.writeMem(0x5205, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xba09, gbc.sp());
        EXPECT(0x5207, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00BD
        gbc.setState(0x58aa, 0x1ada, 0x38b0, 0xa56f, 0xfb2, 0x447e, 0x0, 0x0);
        gbc.writeMem(0x58aa, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x1ada, gbc.sp());
        EXPECT(0x58ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00BE
        gbc.setState(0xa0e1, 0x516, 0xd9d0, 0xb73f, 0x4cc6, 0x4f53, 0x0, 0x0);
        gbc.writeMem(0xa0e1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x516, gbc.sp());
        EXPECT(0xa0e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0e1));
        EXPECT(0x80, gbc.readMem(0xa0e2));
        // CB 80 00BF
        gbc.setState(0x6592, 0xfdd, 0x1a0, 0xaa6e, 0xb665, 0xce3b, 0x0, 0x1);
        gbc.writeMem(0x6592, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xfdd, gbc.sp());
        EXPECT(0x6594, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00C0
        gbc.setState(0xc692, 0x5fe0, 0xe270, 0xb29e, 0x3a8e, 0x6542, 0x0, 0x0);
        gbc.writeMem(0xc692, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x5fe0, gbc.sp());
        EXPECT(0xc694, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc692));
        EXPECT(0x80, gbc.readMem(0xc693));
        // CB 80 00C1
        gbc.setState(0xbc3b, 0xd92e, 0xaf60, 0xdf87, 0x5862, 0x9426, 0x0, 0x0);
        gbc.writeMem(0xbc3b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xd92e, gbc.sp());
        EXPECT(0xbc3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc3b));
        EXPECT(0x80, gbc.readMem(0xbc3c));
        // CB 80 00C2
        gbc.setState(0x1b2a, 0xfed4, 0x2070, 0xe5e0, 0xd33b, 0x7f99, 0x0, 0x0);
        gbc.writeMem(0x1b2a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xfed4, gbc.sp());
        EXPECT(0x1b2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00C3
        gbc.setState(0x9d9a, 0x31b7, 0x2740, 0x9c5d, 0xba3, 0x5ac2, 0x0, 0x1);
        gbc.writeMem(0x9d9a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x31b7, gbc.sp());
        EXPECT(0x9d9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d9a));
        EXPECT(0x80, gbc.readMem(0x9d9b));
        // CB 80 00C4
        gbc.setState(0x13de, 0xcac6, 0x6de0, 0x3b71, 0x4664, 0xb157, 0x0, 0x1);
        gbc.writeMem(0x13de, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xcac6, gbc.sp());
        EXPECT(0x13e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00C5
        gbc.setState(0x9d8, 0x1ac0, 0xa720, 0x1369, 0x1855, 0x3289, 0x1, 0x0);
        gbc.writeMem(0x9d8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x1ac0, gbc.sp());
        EXPECT(0x9da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00C6
        gbc.setState(0x4a55, 0x951d, 0xd500, 0x46fc, 0xf870, 0xfab, 0x1, 0x0);
        gbc.writeMem(0x4a55, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x951d, gbc.sp());
        EXPECT(0x4a57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00C9
        gbc.setState(0x1578, 0x6b7e, 0xb540, 0xb922, 0x96ee, 0xe5db, 0x0, 0x0);
        gbc.writeMem(0x1578, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x6b7e, gbc.sp());
        EXPECT(0x157a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00CA
        gbc.setState(0x41c7, 0x5828, 0x25b0, 0xea97, 0xebc, 0xc78a, 0x0, 0x1);
        gbc.writeMem(0x41c7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x5828, gbc.sp());
        EXPECT(0x41c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00CB
        gbc.setState(0x1dc3, 0xc53c, 0xf390, 0xdef3, 0xebd6, 0x360a, 0x1, 0x1);
        gbc.writeMem(0x1dc3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xc53c, gbc.sp());
        EXPECT(0x1dc5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00CC
        gbc.setState(0xcdfb, 0xff04, 0xe6f0, 0x71c7, 0xae0c, 0xdb3b, 0x0, 0x1);
        gbc.writeMem(0xcdfb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xff04, gbc.sp());
        EXPECT(0xcdfd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdfb));
        EXPECT(0x80, gbc.readMem(0xcdfc));
        // CB 80 00CD
        gbc.setState(0xca8f, 0xef28, 0x1290, 0xfc7f, 0x8648, 0x9475, 0x1, 0x0);
        gbc.writeMem(0xca8f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xef28, gbc.sp());
        EXPECT(0xca91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca8f));
        EXPECT(0x80, gbc.readMem(0xca90));
        // CB 80 00CE
        gbc.setState(0xcde9, 0x248, 0x4d70, 0x56f8, 0x5fd0, 0x11e8, 0x0, 0x1);
        gbc.writeMem(0xcde9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x248, gbc.sp());
        EXPECT(0xcdeb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcde9));
        EXPECT(0x80, gbc.readMem(0xcdea));
        // CB 80 00CF
        gbc.setState(0x48b0, 0x70e2, 0xfd50, 0x1120, 0x3ce1, 0xcab6, 0x1, 0x1);
        gbc.writeMem(0x48b0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x70e2, gbc.sp());
        EXPECT(0x48b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00D0
        gbc.setState(0x6f91, 0xc6f2, 0x26f0, 0xadeb, 0x4574, 0x38b1, 0x0, 0x0);
        gbc.writeMem(0x6f91, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xc6f2, gbc.sp());
        EXPECT(0x6f93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00D1
        gbc.setState(0x378e, 0x2bf7, 0x6ec0, 0x6f83, 0xa9bb, 0x588, 0x0, 0x1);
        gbc.writeMem(0x378e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x2bf7, gbc.sp());
        EXPECT(0x3790, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00D2
        gbc.setState(0xb456, 0xf1c2, 0xa940, 0x31a0, 0xf892, 0xc414, 0x1, 0x1);
        gbc.writeMem(0xb456, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xf1c2, gbc.sp());
        EXPECT(0xb458, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb456));
        EXPECT(0x80, gbc.readMem(0xb457));
        // CB 80 00D3
        gbc.setState(0x8722, 0x9ed4, 0x5300, 0xffd1, 0xaf1d, 0x56ce, 0x0, 0x1);
        gbc.writeMem(0x8722, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x9ed4, gbc.sp());
        EXPECT(0x8724, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8722));
        EXPECT(0x80, gbc.readMem(0x8723));
        // CB 80 00D5
        gbc.setState(0x3c4a, 0x80e6, 0x8e10, 0x41fe, 0xcb19, 0x1864, 0x0, 0x1);
        gbc.writeMem(0x3c4a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x80e6, gbc.sp());
        EXPECT(0x3c4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00D6
        gbc.setState(0x2f69, 0xa1fa, 0xa860, 0x7c, 0x8989, 0xebd7, 0x0, 0x0);
        gbc.writeMem(0x2f69, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xa1fa, gbc.sp());
        EXPECT(0x2f6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00D7
        gbc.setState(0xc0e5, 0x60ac, 0x5040, 0x3a2b, 0x6d66, 0x81d7, 0x0, 0x0);
        gbc.writeMem(0xc0e5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x60ac, gbc.sp());
        EXPECT(0xc0e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0e5));
        EXPECT(0x80, gbc.readMem(0xc0e6));
        // CB 80 00D8
        gbc.setState(0x79ef, 0x11c6, 0x60e0, 0x334, 0x4997, 0xd767, 0x1, 0x0);
        gbc.writeMem(0x79ef, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x11c6, gbc.sp());
        EXPECT(0x79f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00D9
        gbc.setState(0xd70c, 0x42b7, 0x7fe0, 0xf538, 0x6e4a, 0x4fc3, 0x0, 0x0);
        gbc.writeMem(0xd70c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x42b7, gbc.sp());
        EXPECT(0xd70e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd70c));
        EXPECT(0x80, gbc.readMem(0xd70d));
        // CB 80 00DA
        gbc.setState(0x378a, 0x7321, 0xe340, 0xfe8f, 0x767, 0xfb31, 0x0, 0x1);
        gbc.writeMem(0x378a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x7321, gbc.sp());
        EXPECT(0x378c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00DB
        gbc.setState(0xb4e6, 0xa8ba, 0x6c50, 0xd28a, 0x3a46, 0xf271, 0x1, 0x0);
        gbc.writeMem(0xb4e6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xa8ba, gbc.sp());
        EXPECT(0xb4e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4e6));
        EXPECT(0x80, gbc.readMem(0xb4e7));
        // CB 80 00DC
        gbc.setState(0x2712, 0xee33, 0xae40, 0x80e0, 0x6df8, 0x8702, 0x0, 0x0);
        gbc.writeMem(0x2712, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xee33, gbc.sp());
        EXPECT(0x2714, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00DD
        gbc.setState(0xabb4, 0xbc90, 0xcc50, 0x2cef, 0x5d95, 0xf1bb, 0x0, 0x0);
        gbc.writeMem(0xabb4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xbc90, gbc.sp());
        EXPECT(0xabb6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabb4));
        EXPECT(0x80, gbc.readMem(0xabb5));
        // CB 80 00DE
        gbc.setState(0x4a9a, 0x4df7, 0x52c0, 0xd977, 0xc2ae, 0x428f, 0x0, 0x0);
        gbc.writeMem(0x4a9a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x4df7, gbc.sp());
        EXPECT(0x4a9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00DF
        gbc.setState(0xabee, 0x98e9, 0xbdc0, 0xa18e, 0x7b10, 0xc12e, 0x1, 0x1);
        gbc.writeMem(0xabee, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x98e9, gbc.sp());
        EXPECT(0xabf0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabee));
        EXPECT(0x80, gbc.readMem(0xabef));
        // CB 80 00E1
        gbc.setState(0x2a45, 0xff47, 0xee70, 0x6084, 0x513e, 0xb55a, 0x0, 0x0);
        gbc.writeMem(0x2a45, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xff47, gbc.sp());
        EXPECT(0x2a47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00E2
        gbc.setState(0x1dbf, 0x36a8, 0x6f20, 0xb343, 0xe473, 0x9311, 0x0, 0x1);
        gbc.writeMem(0x1dbf, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x36a8, gbc.sp());
        EXPECT(0x1dc1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00E3
        gbc.setState(0x4c11, 0xedeb, 0xa580, 0x72b4, 0x401b, 0xea2b, 0x0, 0x0);
        gbc.writeMem(0x4c11, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xedeb, gbc.sp());
        EXPECT(0x4c13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00E4
        gbc.setState(0x84bb, 0x9355, 0x3d20, 0x4512, 0xd471, 0xf542, 0x1, 0x0);
        gbc.writeMem(0x84bb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x9355, gbc.sp());
        EXPECT(0x84bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84bb));
        EXPECT(0x80, gbc.readMem(0x84bc));
        // CB 80 00E5
        gbc.setState(0xd12a, 0xa518, 0xdb20, 0xcb79, 0x8c7c, 0x19e3, 0x1, 0x1);
        gbc.writeMem(0xd12a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xa518, gbc.sp());
        EXPECT(0xd12c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd12a));
        EXPECT(0x80, gbc.readMem(0xd12b));
        // CB 80 00E6
        gbc.setState(0xc686, 0xbc3a, 0xe8c0, 0xcb12, 0xa20d, 0xf0e3, 0x0, 0x1);
        gbc.writeMem(0xc686, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xbc3a, gbc.sp());
        EXPECT(0xc688, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc686));
        EXPECT(0x80, gbc.readMem(0xc687));
        // CB 80 00E7
        gbc.setState(0x5f92, 0xf8b6, 0x4970, 0xb2ff, 0x122, 0xd506, 0x0, 0x1);
        gbc.writeMem(0x5f92, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xf8b6, gbc.sp());
        EXPECT(0x5f94, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00E8
        gbc.setState(0x9668, 0x704c, 0x6d50, 0xd104, 0x1459, 0xfacb, 0x0, 0x1);
        gbc.writeMem(0x9668, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x704c, gbc.sp());
        EXPECT(0x966a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9668));
        EXPECT(0x80, gbc.readMem(0x9669));
        // CB 80 00E9
        gbc.setState(0x79eb, 0x72dd, 0xec80, 0xeef7, 0xd5ca, 0x8200, 0x1, 0x1);
        gbc.writeMem(0x79eb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x72dd, gbc.sp());
        EXPECT(0x79ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00EA
        gbc.setState(0x48a3, 0x4556, 0x9920, 0xd373, 0x7165, 0x5efc, 0x0, 0x1);
        gbc.writeMem(0x48a3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x4556, gbc.sp());
        EXPECT(0x48a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00EB
        gbc.setState(0x9805, 0x5db0, 0x740, 0x5b51, 0x7d08, 0x3c4a, 0x0, 0x1);
        gbc.writeMem(0x9805, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x5db0, gbc.sp());
        EXPECT(0x9807, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9805));
        EXPECT(0x80, gbc.readMem(0x9806));
        // CB 80 00EC
        gbc.setState(0x2730, 0x9d85, 0x3200, 0xdd07, 0x8368, 0x290d, 0x1, 0x0);
        gbc.writeMem(0x2730, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x9d85, gbc.sp());
        EXPECT(0x2732, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00ED
        gbc.setState(0xd72c, 0x5a1c, 0x6020, 0x3616, 0x2ba4, 0x2f6b, 0x1, 0x1);
        gbc.writeMem(0xd72c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x5a1c, gbc.sp());
        EXPECT(0xd72e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd72c));
        EXPECT(0x80, gbc.readMem(0xd72d));
        // CB 80 00EE
        gbc.setState(0x19f1, 0x3f32, 0x37d0, 0x8a38, 0x21cc, 0xd53b, 0x1, 0x1);
        gbc.writeMem(0x19f1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x3f32, gbc.sp());
        EXPECT(0x19f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00EF
        gbc.setState(0xc8cf, 0x2ff8, 0x1890, 0xc295, 0xaef1, 0xefb5, 0x0, 0x0);
        gbc.writeMem(0xc8cf, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x2ff8, gbc.sp());
        EXPECT(0xc8d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8cf));
        EXPECT(0x80, gbc.readMem(0xc8d0));
        // CB 80 00F1
        gbc.setState(0xaea, 0x5fc1, 0xe0f0, 0x6179, 0xebdf, 0xac8a, 0x1, 0x1);
        gbc.writeMem(0xaea, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x5fc1, gbc.sp());
        EXPECT(0xaec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00F2
        gbc.setState(0xb5e3, 0xab77, 0xc6a0, 0x938a, 0xd2ba, 0xa1a9, 0x0, 0x0);
        gbc.writeMem(0xb5e3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xab77, gbc.sp());
        EXPECT(0xb5e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5e3));
        EXPECT(0x80, gbc.readMem(0xb5e4));
        // CB 80 00F3
        gbc.setState(0x5c73, 0x2232, 0xd000, 0xeb4a, 0xd5e, 0x6bfe, 0x0, 0x0);
        gbc.writeMem(0x5c73, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x2232, gbc.sp());
        EXPECT(0x5c75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00F4
        gbc.setState(0x292c, 0x77e0, 0x6c0, 0x91bf, 0x5d12, 0xe41d, 0x1, 0x0);
        gbc.writeMem(0x292c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x77e0, gbc.sp());
        EXPECT(0x292e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00F5
        gbc.setState(0x891c, 0x1e45, 0xade0, 0x2a3c, 0xeb4d, 0xecf8, 0x0, 0x1);
        gbc.writeMem(0x891c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x1e45, gbc.sp());
        EXPECT(0x891e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x891c));
        EXPECT(0x80, gbc.readMem(0x891d));
        // CB 80 00F6
        gbc.setState(0x3eff, 0xecd2, 0x2c0, 0x2fbb, 0xf9a6, 0xca38, 0x0, 0x0);
        gbc.writeMem(0x3eff, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xecd2, gbc.sp());
        EXPECT(0x3f01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00F7
        gbc.setState(0xc0c1, 0xf64d, 0xd90, 0x680c, 0xe334, 0x6c82, 0x0, 0x0);
        gbc.writeMem(0xc0c1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xf64d, gbc.sp());
        EXPECT(0xc0c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0c1));
        EXPECT(0x80, gbc.readMem(0xc0c2));
        // CB 80 00F8
        gbc.setState(0x63a6, 0xde08, 0xb4f0, 0xc83e, 0xdf5a, 0x7248, 0x1, 0x1);
        gbc.writeMem(0x63a6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xde08, gbc.sp());
        EXPECT(0x63a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 00F9
        gbc.setState(0xb9f4, 0x4c0a, 0xc420, 0xe3b4, 0xdb61, 0x6526, 0x0, 0x1);
        gbc.writeMem(0xb9f4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x4c0a, gbc.sp());
        EXPECT(0xb9f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9f4));
        EXPECT(0x80, gbc.readMem(0xb9f5));
        // CB 80 00FA
        gbc.setState(0x6b97, 0xbe6, 0x5e80, 0xd8a9, 0xc33e, 0x97ac, 0x0, 0x0);
        gbc.writeMem(0x6b97, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xbe6, gbc.sp());
        EXPECT(0x6b99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00FB
        gbc.setState(0x72a5, 0x911e, 0xce80, 0x1f47, 0xec0d, 0xc68d, 0x1, 0x0);
        gbc.writeMem(0x72a5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x911e, gbc.sp());
        EXPECT(0x72a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 00FC
        gbc.setState(0xc974, 0x5369, 0x22a0, 0x4815, 0x1651, 0x359e, 0x0, 0x1);
        gbc.writeMem(0xc974, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x5369, gbc.sp());
        EXPECT(0xc976, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc974));
        EXPECT(0x80, gbc.readMem(0xc975));
        // CB 80 00FD
        gbc.setState(0xbb17, 0xd376, 0xe730, 0x3557, 0x4313, 0x4f71, 0x0, 0x1);
        gbc.writeMem(0xbb17, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xd376, gbc.sp());
        EXPECT(0xbb19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb17));
        EXPECT(0x80, gbc.readMem(0xbb18));
        // CB 80 00FE
        gbc.setState(0x8f01, 0x8bab, 0x5d10, 0x2d19, 0x96d3, 0xc19d, 0x0, 0x0);
        gbc.writeMem(0x8f01, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x8bab, gbc.sp());
        EXPECT(0x8f03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f01));
        EXPECT(0x80, gbc.readMem(0x8f02));
        // CB 80 00FF
        gbc.setState(0x47ee, 0xe8da, 0x5e80, 0x429, 0x1fa6, 0xc3a9, 0x0, 0x1);
        gbc.writeMem(0x47ee, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xe8da, gbc.sp());
        EXPECT(0x47f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0100
        gbc.setState(0x65c6, 0xea07, 0x2b10, 0xcd30, 0x17b5, 0x6d74, 0x1, 0x0);
        gbc.writeMem(0x65c6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xea07, gbc.sp());
        EXPECT(0x65c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0102
        gbc.setState(0x554b, 0x245e, 0x7560, 0x517a, 0xbb4a, 0xb758, 0x0, 0x1);
        gbc.writeMem(0x554b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x245e, gbc.sp());
        EXPECT(0x554d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0103
        gbc.setState(0x17f, 0xf80b, 0x3c60, 0xed90, 0x184d, 0x2276, 0x1, 0x0);
        gbc.writeMem(0x17f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xf80b, gbc.sp());
        EXPECT(0x181, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0104
        gbc.setState(0x492e, 0x39f, 0x2ae0, 0xf092, 0x333, 0x66ee, 0x0, 0x1);
        gbc.writeMem(0x492e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x39f, gbc.sp());
        EXPECT(0x4930, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0105
        gbc.setState(0x23ea, 0x3ef1, 0xa4a0, 0xd2e9, 0x26c, 0x98ad, 0x0, 0x1);
        gbc.writeMem(0x23ea, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x3ef1, gbc.sp());
        EXPECT(0x23ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0106
        gbc.setState(0x3d5c, 0xedec, 0xc7b0, 0x3121, 0xdff4, 0xf367, 0x1, 0x0);
        gbc.writeMem(0x3d5c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xedec, gbc.sp());
        EXPECT(0x3d5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0107
        gbc.setState(0x5aae, 0xd83, 0x5250, 0xd355, 0xde61, 0x588, 0x1, 0x1);
        gbc.writeMem(0x5aae, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xd83, gbc.sp());
        EXPECT(0x5ab0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0108
        gbc.setState(0x67a2, 0xe4f7, 0xac60, 0x2f12, 0xba98, 0x99b1, 0x0, 0x0);
        gbc.writeMem(0x67a2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xe4f7, gbc.sp());
        EXPECT(0x67a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0109
        gbc.setState(0x3ac2, 0x7e0d, 0x8400, 0x3bad, 0x3244, 0x70fc, 0x0, 0x1);
        gbc.writeMem(0x3ac2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x7e0d, gbc.sp());
        EXPECT(0x3ac4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 010B
        gbc.setState(0x1037, 0xbb16, 0x5e00, 0x2454, 0x4c78, 0xbfff, 0x0, 0x0);
        gbc.writeMem(0x1037, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xbb16, gbc.sp());
        EXPECT(0x1039, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 010C
        gbc.setState(0x6e5f, 0xee93, 0x7180, 0x2631, 0x6842, 0xc1bd, 0x1, 0x0);
        gbc.writeMem(0x6e5f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xee93, gbc.sp());
        EXPECT(0x6e61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 010D
        gbc.setState(0xb651, 0x397b, 0xc5d0, 0x45e0, 0x8e34, 0x34a, 0x1, 0x0);
        gbc.writeMem(0xb651, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x397b, gbc.sp());
        EXPECT(0xb653, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb651));
        EXPECT(0x80, gbc.readMem(0xb652));
        // CB 80 010E
        gbc.setState(0x139b, 0xf778, 0x34b0, 0x1287, 0xbc59, 0xcf31, 0x0, 0x1);
        gbc.writeMem(0x139b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xf778, gbc.sp());
        EXPECT(0x139d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 010F
        gbc.setState(0xef14, 0xa694, 0x73d0, 0x1baa, 0x7eb2, 0x47a8, 0x1, 0x1);
        gbc.writeMem(0xef14, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xa694, gbc.sp());
        EXPECT(0xef16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef14));
        EXPECT(0x80, gbc.readMem(0xef15));
        // CB 80 0110
        gbc.setState(0x54e, 0x1835, 0x6ab0, 0xcf32, 0xc0d3, 0xab58, 0x0, 0x1);
        gbc.writeMem(0x54e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x1835, gbc.sp());
        EXPECT(0x550, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0111
        gbc.setState(0xe8ee, 0xef4f, 0x69b0, 0xd822, 0xa9af, 0x22c, 0x1, 0x1);
        gbc.writeMem(0xe8ee, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xef4f, gbc.sp());
        EXPECT(0xe8f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8ee));
        EXPECT(0x80, gbc.readMem(0xe8ef));
        // CB 80 0112
        gbc.setState(0x43c0, 0xa02, 0x8800, 0x435d, 0x4fbe, 0x44a8, 0x1, 0x1);
        gbc.writeMem(0x43c0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xa02, gbc.sp());
        EXPECT(0x43c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0113
        gbc.setState(0x3b78, 0xc336, 0x2d90, 0x19b, 0x8a1f, 0xb7e3, 0x1, 0x0);
        gbc.writeMem(0x3b78, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xc336, gbc.sp());
        EXPECT(0x3b7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0114
        gbc.setState(0xdba6, 0x219a, 0x21f0, 0x93f0, 0x9b45, 0xce23, 0x0, 0x1);
        gbc.writeMem(0xdba6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x219a, gbc.sp());
        EXPECT(0xdba8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdba6));
        EXPECT(0x80, gbc.readMem(0xdba7));
        // CB 80 0115
        gbc.setState(0xbe24, 0x452, 0xb740, 0xcb50, 0x340, 0x1eeb, 0x0, 0x0);
        gbc.writeMem(0xbe24, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x452, gbc.sp());
        EXPECT(0xbe26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe24));
        EXPECT(0x80, gbc.readMem(0xbe25));
        // CB 80 0116
        gbc.setState(0x27f9, 0x344c, 0x3210, 0x8f81, 0xd9cb, 0xf19d, 0x0, 0x0);
        gbc.writeMem(0x27f9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x344c, gbc.sp());
        EXPECT(0x27fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0117
        gbc.setState(0x6b4a, 0x4ed7, 0xeed0, 0xa1a2, 0xd617, 0xdc66, 0x0, 0x0);
        gbc.writeMem(0x6b4a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x4ed7, gbc.sp());
        EXPECT(0x6b4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0118
        gbc.setState(0x8e10, 0x9e87, 0x9c50, 0x735, 0x6682, 0x15f3, 0x1, 0x1);
        gbc.writeMem(0x8e10, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x9e87, gbc.sp());
        EXPECT(0x8e12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e10));
        EXPECT(0x80, gbc.readMem(0x8e11));
        // CB 80 0119
        gbc.setState(0xae6b, 0x1e06, 0x8b0, 0x586c, 0x5db3, 0x294b, 0x0, 0x1);
        gbc.writeMem(0xae6b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x1e06, gbc.sp());
        EXPECT(0xae6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae6b));
        EXPECT(0x80, gbc.readMem(0xae6c));
        // CB 80 011A
        gbc.setState(0xdf8a, 0x6b04, 0x8e70, 0xb4f6, 0x34ca, 0x6bea, 0x0, 0x1);
        gbc.writeMem(0xdf8a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x6b04, gbc.sp());
        EXPECT(0xdf8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf8a));
        EXPECT(0x80, gbc.readMem(0xdf8b));
        // CB 80 011C
        gbc.setState(0x466f, 0xabc4, 0x2060, 0x97a9, 0x421f, 0x89b7, 0x1, 0x1);
        gbc.writeMem(0x466f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xabc4, gbc.sp());
        EXPECT(0x4671, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 011D
        gbc.setState(0x3e99, 0xd9f8, 0x5da0, 0x8a37, 0x9273, 0x135d, 0x1, 0x1);
        gbc.writeMem(0x3e99, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xd9f8, gbc.sp());
        EXPECT(0x3e9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 011E
        gbc.setState(0x7419, 0x8240, 0x5660, 0x6136, 0xd211, 0x77cc, 0x1, 0x1);
        gbc.writeMem(0x7419, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x8240, gbc.sp());
        EXPECT(0x741b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 011F
        gbc.setState(0x5d04, 0xe5a1, 0x53b0, 0x59de, 0x4fe6, 0x2ab5, 0x0, 0x0);
        gbc.writeMem(0x5d04, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xe5a1, gbc.sp());
        EXPECT(0x5d06, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0120
        gbc.setState(0xd7db, 0xb3d7, 0x8e0, 0x2218, 0x8e1a, 0x1241, 0x0, 0x0);
        gbc.writeMem(0xd7db, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xb3d7, gbc.sp());
        EXPECT(0xd7dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7db));
        EXPECT(0x80, gbc.readMem(0xd7dc));
        // CB 80 0121
        gbc.setState(0x834c, 0xb67d, 0x3a80, 0x1b13, 0x65d, 0xb707, 0x1, 0x0);
        gbc.writeMem(0x834c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xb67d, gbc.sp());
        EXPECT(0x834e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x834c));
        EXPECT(0x80, gbc.readMem(0x834d));
        // CB 80 0122
        gbc.setState(0xa656, 0x340f, 0xd0, 0xa0a0, 0xaad4, 0xe8d0, 0x0, 0x0);
        gbc.writeMem(0xa656, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x340f, gbc.sp());
        EXPECT(0xa658, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa656));
        EXPECT(0x80, gbc.readMem(0xa657));
        // CB 80 0123
        gbc.setState(0xe3f6, 0x5bb1, 0xfdb0, 0x5a02, 0xc63, 0xe654, 0x1, 0x1);
        gbc.writeMem(0xe3f6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x5bb1, gbc.sp());
        EXPECT(0xe3f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3f6));
        EXPECT(0x80, gbc.readMem(0xe3f7));
        // CB 80 0124
        gbc.setState(0x2db4, 0x9083, 0x7c90, 0x594b, 0xf204, 0x3fc, 0x1, 0x1);
        gbc.writeMem(0x2db4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x9083, gbc.sp());
        EXPECT(0x2db6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0125
        gbc.setState(0x342, 0x4428, 0xbcf0, 0xc742, 0x33eb, 0x3e32, 0x1, 0x0);
        gbc.writeMem(0x342, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x4428, gbc.sp());
        EXPECT(0x344, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0126
        gbc.setState(0x97c1, 0x931b, 0xada0, 0xb329, 0xeebf, 0xca2c, 0x1, 0x1);
        gbc.writeMem(0x97c1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x931b, gbc.sp());
        EXPECT(0x97c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97c1));
        EXPECT(0x80, gbc.readMem(0x97c2));
        // CB 80 0127
        gbc.setState(0x3684, 0xffa4, 0x6460, 0xcb0f, 0xac70, 0x66fa, 0x1, 0x0);
        gbc.writeMem(0x3684, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xffa4, gbc.sp());
        EXPECT(0x3686, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0128
        gbc.setState(0x55fe, 0xa4d9, 0xaec0, 0x7fd6, 0xa9b8, 0x87c, 0x0, 0x1);
        gbc.writeMem(0x55fe, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xa4d9, gbc.sp());
        EXPECT(0x5600, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0129
        gbc.setState(0x1257, 0x5f6b, 0xed70, 0xe62d, 0xf4a2, 0x93fd, 0x1, 0x0);
        gbc.writeMem(0x1257, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x5f6b, gbc.sp());
        EXPECT(0x1259, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 012A
        gbc.setState(0x4f8, 0x8f4e, 0x4800, 0xfd6d, 0xee99, 0xb522, 0x1, 0x0);
        gbc.writeMem(0x4f8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x8f4e, gbc.sp());
        EXPECT(0x4fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 012B
        gbc.setState(0x141d, 0x58b3, 0x42d0, 0x1fd6, 0xdcd5, 0x2538, 0x0, 0x1);
        gbc.writeMem(0x141d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x58b3, gbc.sp());
        EXPECT(0x141f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 012C
        gbc.setState(0x3e0d, 0xb1c6, 0x940, 0x6bca, 0x6a6c, 0x1a00, 0x0, 0x1);
        gbc.writeMem(0x3e0d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xb1c6, gbc.sp());
        EXPECT(0x3e0f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 012D
        gbc.setState(0x6529, 0x2898, 0x7850, 0xd2be, 0xc43a, 0x949, 0x1, 0x1);
        gbc.writeMem(0x6529, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x2898, gbc.sp());
        EXPECT(0x652b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 012E
        gbc.setState(0xd52c, 0x3f08, 0x2260, 0x3665, 0x78ad, 0xab6b, 0x0, 0x0);
        gbc.writeMem(0xd52c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x3f08, gbc.sp());
        EXPECT(0xd52e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd52c));
        EXPECT(0x80, gbc.readMem(0xd52d));
        // CB 80 012F
        gbc.setState(0x5b30, 0x50e3, 0x5c00, 0xd310, 0x4214, 0x6abd, 0x1, 0x0);
        gbc.writeMem(0x5b30, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x50e3, gbc.sp());
        EXPECT(0x5b32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0130
        gbc.setState(0xa015, 0x39cf, 0x28e0, 0x967, 0x2442, 0xd1b7, 0x0, 0x0);
        gbc.writeMem(0xa015, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x39cf, gbc.sp());
        EXPECT(0xa017, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa015));
        EXPECT(0x80, gbc.readMem(0xa016));
        // CB 80 0131
        gbc.setState(0xbc93, 0xc922, 0x9a80, 0xea98, 0x2384, 0xfaad, 0x0, 0x1);
        gbc.writeMem(0xbc93, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xc922, gbc.sp());
        EXPECT(0xbc95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc93));
        EXPECT(0x80, gbc.readMem(0xbc94));
        // CB 80 0132
        gbc.setState(0x81ac, 0xe10b, 0x8e0, 0x85c7, 0x87c4, 0xc60b, 0x1, 0x0);
        gbc.writeMem(0x81ac, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xe10b, gbc.sp());
        EXPECT(0x81ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81ac));
        EXPECT(0x80, gbc.readMem(0x81ad));
        // CB 80 0133
        gbc.setState(0xa74c, 0x13f5, 0x1890, 0x74c0, 0xca77, 0x329, 0x0, 0x1);
        gbc.writeMem(0xa74c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x13f5, gbc.sp());
        EXPECT(0xa74e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa74c));
        EXPECT(0x80, gbc.readMem(0xa74d));
        // CB 80 0134
        gbc.setState(0x1bf7, 0x9739, 0x9740, 0xe4dd, 0xa4ee, 0xef8, 0x0, 0x0);
        gbc.writeMem(0x1bf7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x9739, gbc.sp());
        EXPECT(0x1bf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0135
        gbc.setState(0x6cf9, 0xdad8, 0xd960, 0x82e5, 0x864b, 0x6cb1, 0x1, 0x1);
        gbc.writeMem(0x6cf9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xdad8, gbc.sp());
        EXPECT(0x6cfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0136
        gbc.setState(0x5a6e, 0x1b3f, 0xc030, 0xfb42, 0x514, 0xe0b0, 0x0, 0x0);
        gbc.writeMem(0x5a6e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x1b3f, gbc.sp());
        EXPECT(0x5a70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0137
        gbc.setState(0x40a5, 0x1fa7, 0x76b0, 0xb933, 0x33d0, 0x6403, 0x0, 0x1);
        gbc.writeMem(0x40a5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x1fa7, gbc.sp());
        EXPECT(0x40a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0138
        gbc.setState(0x18c3, 0xe7bf, 0x5350, 0x1e64, 0x283a, 0x6d00, 0x0, 0x1);
        gbc.writeMem(0x18c3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xe7bf, gbc.sp());
        EXPECT(0x18c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0139
        gbc.setState(0x4ca5, 0xeb55, 0xe80, 0x4de8, 0xd5d, 0xa39b, 0x0, 0x0);
        gbc.writeMem(0x4ca5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xeb55, gbc.sp());
        EXPECT(0x4ca7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 013A
        gbc.setState(0x8c70, 0xd393, 0xd8a0, 0x92a7, 0x9566, 0x9752, 0x1, 0x0);
        gbc.writeMem(0x8c70, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xd393, gbc.sp());
        EXPECT(0x8c72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c70));
        EXPECT(0x80, gbc.readMem(0x8c71));
        // CB 80 013B
        gbc.setState(0x2a9a, 0x737d, 0x190, 0xfcd6, 0x9185, 0x63bf, 0x1, 0x0);
        gbc.writeMem(0x2a9a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x737d, gbc.sp());
        EXPECT(0x2a9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 013C
        gbc.setState(0x4e74, 0xab8c, 0xcfd0, 0xdac5, 0x81a2, 0xe58, 0x1, 0x1);
        gbc.writeMem(0x4e74, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xab8c, gbc.sp());
        EXPECT(0x4e76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 013D
        gbc.setState(0x2a51, 0xcb9a, 0x2e10, 0x393b, 0x22, 0xa282, 0x0, 0x1);
        gbc.writeMem(0x2a51, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xcb9a, gbc.sp());
        EXPECT(0x2a53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 013E
        gbc.setState(0x66c1, 0x2c64, 0x39b0, 0xa746, 0xec25, 0x29d0, 0x0, 0x0);
        gbc.writeMem(0x66c1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x2c64, gbc.sp());
        EXPECT(0x66c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 013F
        gbc.setState(0x5051, 0x71f0, 0xcda0, 0x4660, 0x14e7, 0xed68, 0x1, 0x1);
        gbc.writeMem(0x5051, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x71f0, gbc.sp());
        EXPECT(0x5053, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0140
        gbc.setState(0xa10c, 0x461f, 0x8610, 0xddab, 0x73ca, 0x2e25, 0x1, 0x0);
        gbc.writeMem(0xa10c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x461f, gbc.sp());
        EXPECT(0xa10e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa10c));
        EXPECT(0x80, gbc.readMem(0xa10d));
        // CB 80 0141
        gbc.setState(0x17d4, 0xfee9, 0xa30, 0xd8be, 0xe7ae, 0x19aa, 0x1, 0x1);
        gbc.writeMem(0x17d4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xfee9, gbc.sp());
        EXPECT(0x17d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0142
        gbc.setState(0x1f39, 0xf89b, 0xa950, 0x8d60, 0x36f6, 0x5b34, 0x1, 0x1);
        gbc.writeMem(0x1f39, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xf89b, gbc.sp());
        EXPECT(0x1f3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0143
        gbc.setState(0xde7f, 0x3d5c, 0x9c50, 0x9cdc, 0x1dad, 0xf495, 0x0, 0x1);
        gbc.writeMem(0xde7f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x3d5c, gbc.sp());
        EXPECT(0xde81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde7f));
        EXPECT(0x80, gbc.readMem(0xde80));
        // CB 80 0144
        gbc.setState(0xa426, 0xbf3c, 0x15a0, 0x2b6c, 0x8575, 0xa0b8, 0x1, 0x1);
        gbc.writeMem(0xa426, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xbf3c, gbc.sp());
        EXPECT(0xa428, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa426));
        EXPECT(0x80, gbc.readMem(0xa427));
        // CB 80 0145
        gbc.setState(0x37db, 0x3ac, 0x4a00, 0x8b63, 0x4ec6, 0x6933, 0x0, 0x0);
        gbc.writeMem(0x37db, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x3ac, gbc.sp());
        EXPECT(0x37dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0146
        gbc.setState(0x5849, 0x1175, 0xff60, 0x4fd0, 0xb944, 0xd432, 0x0, 0x0);
        gbc.writeMem(0x5849, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x1175, gbc.sp());
        EXPECT(0x584b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0147
        gbc.setState(0x1ccc, 0x58a9, 0x640, 0xde28, 0x707e, 0xb54d, 0x0, 0x0);
        gbc.writeMem(0x1ccc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x58a9, gbc.sp());
        EXPECT(0x1cce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0148
        gbc.setState(0xa301, 0xe2cc, 0x4280, 0xf68, 0x5e87, 0x58ac, 0x0, 0x1);
        gbc.writeMem(0xa301, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xe2cc, gbc.sp());
        EXPECT(0xa303, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa301));
        EXPECT(0x80, gbc.readMem(0xa302));
        // CB 80 0149
        gbc.setState(0x61c2, 0x3add, 0xfe60, 0xcf0f, 0x8377, 0xc31b, 0x1, 0x1);
        gbc.writeMem(0x61c2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x3add, gbc.sp());
        EXPECT(0x61c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 014A
        gbc.setState(0x598a, 0x6554, 0x2d20, 0xc6e5, 0x6217, 0xee2b, 0x1, 0x1);
        gbc.writeMem(0x598a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x6554, gbc.sp());
        EXPECT(0x598c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 014B
        gbc.setState(0xe3d5, 0x331, 0x5540, 0x5873, 0xa87d, 0xba53, 0x1, 0x1);
        gbc.writeMem(0xe3d5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x331, gbc.sp());
        EXPECT(0xe3d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3d5));
        EXPECT(0x80, gbc.readMem(0xe3d6));
        // CB 80 014C
        gbc.setState(0xd542, 0xf040, 0x5ff0, 0xf85f, 0xeb4a, 0xbcfa, 0x1, 0x1);
        gbc.writeMem(0xd542, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xf040, gbc.sp());
        EXPECT(0xd544, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd542));
        EXPECT(0x80, gbc.readMem(0xd543));
        // CB 80 014D
        gbc.setState(0xe70e, 0xdfc2, 0xb200, 0x9c83, 0x8ba3, 0x3dd0, 0x1, 0x1);
        gbc.writeMem(0xe70e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xdfc2, gbc.sp());
        EXPECT(0xe710, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe70e));
        EXPECT(0x80, gbc.readMem(0xe70f));
        // CB 80 014E
        gbc.setState(0xe247, 0x8e1d, 0x1400, 0xd26b, 0xd802, 0xf4c4, 0x0, 0x1);
        gbc.writeMem(0xe247, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x8e1d, gbc.sp());
        EXPECT(0xe249, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe247));
        EXPECT(0x80, gbc.readMem(0xe248));
        // CB 80 014F
        gbc.setState(0x7164, 0xaa8b, 0x4100, 0x3669, 0x862f, 0xbbb3, 0x1, 0x0);
        gbc.writeMem(0x7164, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xaa8b, gbc.sp());
        EXPECT(0x7166, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0150
        gbc.setState(0x16e5, 0x1ccf, 0x63c0, 0x14c, 0xf183, 0xe90b, 0x0, 0x1);
        gbc.writeMem(0x16e5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x1ccf, gbc.sp());
        EXPECT(0x16e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0151
        gbc.setState(0x5c81, 0x71ad, 0x11d0, 0xd8c3, 0x1f94, 0xc4a9, 0x0, 0x0);
        gbc.writeMem(0x5c81, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x71ad, gbc.sp());
        EXPECT(0x5c83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0152
        gbc.setState(0xaa53, 0xce20, 0x1930, 0x2d32, 0x1978, 0x3732, 0x0, 0x0);
        gbc.writeMem(0xaa53, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xce20, gbc.sp());
        EXPECT(0xaa55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa53));
        EXPECT(0x80, gbc.readMem(0xaa54));
        // CB 80 0154
        gbc.setState(0xa178, 0x7052, 0xc160, 0x5fea, 0x8728, 0x482, 0x0, 0x1);
        gbc.writeMem(0xa178, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x7052, gbc.sp());
        EXPECT(0xa17a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa178));
        EXPECT(0x80, gbc.readMem(0xa179));
        // CB 80 0155
        gbc.setState(0x19f5, 0xdb03, 0x54e0, 0x39db, 0x8d35, 0x981d, 0x1, 0x0);
        gbc.writeMem(0x19f5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xdb03, gbc.sp());
        EXPECT(0x19f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0156
        gbc.setState(0x7c6d, 0x2ff2, 0xe2a0, 0xfc26, 0xac76, 0x897b, 0x1, 0x0);
        gbc.writeMem(0x7c6d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x2ff2, gbc.sp());
        EXPECT(0x7c6f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0157
        gbc.setState(0xb7fd, 0x788, 0xcf80, 0x4415, 0x4d76, 0x75a1, 0x0, 0x0);
        gbc.writeMem(0xb7fd, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x788, gbc.sp());
        EXPECT(0xb7ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7fd));
        EXPECT(0x80, gbc.readMem(0xb7fe));
        // CB 80 0158
        gbc.setState(0x5611, 0xa4a4, 0x5780, 0xd813, 0x4e4e, 0x6ccf, 0x0, 0x0);
        gbc.writeMem(0x5611, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xa4a4, gbc.sp());
        EXPECT(0x5613, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0159
        gbc.setState(0x8c90, 0x69c7, 0xcb70, 0xd5f7, 0x6d36, 0xe85f, 0x0, 0x0);
        gbc.writeMem(0x8c90, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x69c7, gbc.sp());
        EXPECT(0x8c92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c90));
        EXPECT(0x80, gbc.readMem(0x8c91));
        // CB 80 015A
        gbc.setState(0xbca7, 0x9002, 0x9730, 0x6dad, 0x80cf, 0xcb6e, 0x1, 0x1);
        gbc.writeMem(0xbca7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x9002, gbc.sp());
        EXPECT(0xbca9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbca7));
        EXPECT(0x80, gbc.readMem(0xbca8));
        // CB 80 015B
        gbc.setState(0x82ce, 0xed73, 0xca10, 0xc3e2, 0xa1d9, 0x7840, 0x1, 0x1);
        gbc.writeMem(0x82ce, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xed73, gbc.sp());
        EXPECT(0x82d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82ce));
        EXPECT(0x80, gbc.readMem(0x82cf));
        // CB 80 015C
        gbc.setState(0x3b29, 0x79d9, 0xf640, 0xd48c, 0x3547, 0x88de, 0x1, 0x0);
        gbc.writeMem(0x3b29, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x79d9, gbc.sp());
        EXPECT(0x3b2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 015D
        gbc.setState(0xb9d9, 0xb8a4, 0xbcf0, 0xce7, 0xd745, 0xa548, 0x0, 0x1);
        gbc.writeMem(0xb9d9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xb8a4, gbc.sp());
        EXPECT(0xb9db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9d9));
        EXPECT(0x80, gbc.readMem(0xb9da));
        // CB 80 015E
        gbc.setState(0xcfd6, 0xb02f, 0x6310, 0x82f6, 0x4ffc, 0xef0c, 0x1, 0x0);
        gbc.writeMem(0xcfd6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xb02f, gbc.sp());
        EXPECT(0xcfd8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfd6));
        EXPECT(0x80, gbc.readMem(0xcfd7));
        // CB 80 015F
        gbc.setState(0x3ae0, 0xeb5c, 0x59e0, 0x50c0, 0xf3ce, 0x4f3d, 0x1, 0x1);
        gbc.writeMem(0x3ae0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xeb5c, gbc.sp());
        EXPECT(0x3ae2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0160
        gbc.setState(0x2810, 0x4ba7, 0x9950, 0xeea2, 0xab35, 0xf613, 0x1, 0x1);
        gbc.writeMem(0x2810, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x4ba7, gbc.sp());
        EXPECT(0x2812, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0161
        gbc.setState(0x6b3e, 0x5017, 0xe050, 0x8ee1, 0xd34, 0xa05f, 0x0, 0x1);
        gbc.writeMem(0x6b3e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x5017, gbc.sp());
        EXPECT(0x6b40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0162
        gbc.setState(0xcd88, 0xfd64, 0x8da0, 0x8006, 0x6c01, 0xe5b0, 0x0, 0x1);
        gbc.writeMem(0xcd88, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xfd64, gbc.sp());
        EXPECT(0xcd8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd88));
        EXPECT(0x80, gbc.readMem(0xcd89));
        // CB 80 0163
        gbc.setState(0x66e9, 0xbb8a, 0x380, 0xf726, 0x4d94, 0xafb, 0x1, 0x0);
        gbc.writeMem(0x66e9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xbb8a, gbc.sp());
        EXPECT(0x66eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0164
        gbc.setState(0x5c54, 0x28d4, 0x8f0, 0xe0e0, 0xbc22, 0xb6e2, 0x0, 0x0);
        gbc.writeMem(0x5c54, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x28d4, gbc.sp());
        EXPECT(0x5c56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0165
        gbc.setState(0x8ae4, 0x427c, 0x42c0, 0x8071, 0xaaa9, 0x8040, 0x1, 0x0);
        gbc.writeMem(0x8ae4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x427c, gbc.sp());
        EXPECT(0x8ae6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ae4));
        EXPECT(0x80, gbc.readMem(0x8ae5));
        // CB 80 0166
        gbc.setState(0xbbb4, 0xa2d8, 0x8c90, 0xf9e1, 0x13c5, 0x4400, 0x1, 0x1);
        gbc.writeMem(0xbbb4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xa2d8, gbc.sp());
        EXPECT(0xbbb6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbb4));
        EXPECT(0x80, gbc.readMem(0xbbb5));
        // CB 80 0167
        gbc.setState(0x3095, 0xb82c, 0x41e0, 0x9c8f, 0x67a8, 0x1ce, 0x0, 0x0);
        gbc.writeMem(0x3095, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xb82c, gbc.sp());
        EXPECT(0x3097, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0168
        gbc.setState(0xdaa6, 0x164f, 0x88f0, 0xa38, 0x695b, 0x3def, 0x1, 0x1);
        gbc.writeMem(0xdaa6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x164f, gbc.sp());
        EXPECT(0xdaa8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdaa6));
        EXPECT(0x80, gbc.readMem(0xdaa7));
        // CB 80 0169
        gbc.setState(0x9fab, 0x396e, 0x2210, 0xb482, 0xacee, 0x1267, 0x1, 0x0);
        gbc.writeMem(0x9fab, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x396e, gbc.sp());
        EXPECT(0x9fad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fab));
        EXPECT(0x80, gbc.readMem(0x9fac));
        // CB 80 016A
        gbc.setState(0xedf6, 0x6ef6, 0x79a0, 0x1b7, 0xd42d, 0xc1c7, 0x1, 0x1);
        gbc.writeMem(0xedf6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x6ef6, gbc.sp());
        EXPECT(0xedf8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedf6));
        EXPECT(0x80, gbc.readMem(0xedf7));
        // CB 80 016B
        gbc.setState(0xdf72, 0x1b4e, 0xc5b0, 0xf387, 0x5c88, 0xafb0, 0x0, 0x1);
        gbc.writeMem(0xdf72, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x1b4e, gbc.sp());
        EXPECT(0xdf74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf72));
        EXPECT(0x80, gbc.readMem(0xdf73));
        // CB 80 016D
        gbc.setState(0x2145, 0x35b, 0xdbc0, 0x9aa3, 0x612b, 0xc9b4, 0x0, 0x1);
        gbc.writeMem(0x2145, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x35b, gbc.sp());
        EXPECT(0x2147, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 016E
        gbc.setState(0x1ee0, 0xb30b, 0xf6c0, 0xef02, 0x17d6, 0x88c9, 0x0, 0x1);
        gbc.writeMem(0x1ee0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xb30b, gbc.sp());
        EXPECT(0x1ee2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 016F
        gbc.setState(0x173e, 0x250f, 0x2d50, 0x5441, 0x334e, 0x2cfc, 0x1, 0x0);
        gbc.writeMem(0x173e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x250f, gbc.sp());
        EXPECT(0x1740, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0170
        gbc.setState(0x985e, 0xb928, 0xe5a0, 0xd596, 0x3722, 0x50ff, 0x0, 0x0);
        gbc.writeMem(0x985e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xb928, gbc.sp());
        EXPECT(0x9860, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x985e));
        EXPECT(0x80, gbc.readMem(0x985f));
        // CB 80 0171
        gbc.setState(0x8e09, 0xa74d, 0xeaf0, 0x2cc9, 0xef44, 0x16, 0x0, 0x1);
        gbc.writeMem(0x8e09, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xa74d, gbc.sp());
        EXPECT(0x8e0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e09));
        EXPECT(0x80, gbc.readMem(0x8e0a));
        // CB 80 0172
        gbc.setState(0x95ea, 0xf6d4, 0x80c0, 0x99ba, 0x721f, 0x93d8, 0x0, 0x0);
        gbc.writeMem(0x95ea, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xf6d4, gbc.sp());
        EXPECT(0x95ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95ea));
        EXPECT(0x80, gbc.readMem(0x95eb));
        // CB 80 0173
        gbc.setState(0xa88a, 0xad6, 0xe320, 0xe123, 0xef7b, 0x9fe, 0x0, 0x0);
        gbc.writeMem(0xa88a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xad6, gbc.sp());
        EXPECT(0xa88c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa88a));
        EXPECT(0x80, gbc.readMem(0xa88b));
        // CB 80 0174
        gbc.setState(0xf65, 0x1505, 0xbd50, 0xe73e, 0x2fd7, 0xf066, 0x0, 0x1);
        gbc.writeMem(0xf65, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x1505, gbc.sp());
        EXPECT(0xf67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0175
        gbc.setState(0x5ab4, 0xa1c1, 0x3170, 0x20d3, 0x70bc, 0xd9a2, 0x1, 0x0);
        gbc.writeMem(0x5ab4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xa1c1, gbc.sp());
        EXPECT(0x5ab6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0176
        gbc.setState(0x42f6, 0xc705, 0xaa70, 0x35b2, 0x73a, 0xaa2a, 0x1, 0x1);
        gbc.writeMem(0x42f6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xc705, gbc.sp());
        EXPECT(0x42f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0177
        gbc.setState(0x2fbe, 0x3de1, 0x3340, 0xc57d, 0x63f9, 0xf76d, 0x0, 0x1);
        gbc.writeMem(0x2fbe, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x3de1, gbc.sp());
        EXPECT(0x2fc0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0178
        gbc.setState(0x7817, 0xe2e1, 0x6590, 0x38d0, 0xe97e, 0x5b7b, 0x0, 0x1);
        gbc.writeMem(0x7817, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xe2e1, gbc.sp());
        EXPECT(0x7819, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0179
        gbc.setState(0x7fab, 0x6408, 0x5790, 0x5bad, 0x6b5, 0xe4e, 0x1, 0x1);
        gbc.writeMem(0x7fab, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x6408, gbc.sp());
        EXPECT(0x7fad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 017A
        gbc.setState(0x8aa4, 0x25b6, 0x3f0, 0xd1, 0x1797, 0x32d0, 0x1, 0x1);
        gbc.writeMem(0x8aa4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x25b6, gbc.sp());
        EXPECT(0x8aa6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8aa4));
        EXPECT(0x80, gbc.readMem(0x8aa5));
        // CB 80 017B
        gbc.setState(0xcde8, 0x8484, 0x4d60, 0x3c2e, 0x9840, 0xd110, 0x1, 0x1);
        gbc.writeMem(0xcde8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x8484, gbc.sp());
        EXPECT(0xcdea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcde8));
        EXPECT(0x80, gbc.readMem(0xcde9));
        // CB 80 017C
        gbc.setState(0x581a, 0x8431, 0x6050, 0x7bee, 0x4399, 0x30e7, 0x0, 0x0);
        gbc.writeMem(0x581a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x8431, gbc.sp());
        EXPECT(0x581c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 017D
        gbc.setState(0x93e1, 0xac4f, 0xeec0, 0x9bc2, 0x3e31, 0xad16, 0x1, 0x1);
        gbc.writeMem(0x93e1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xac4f, gbc.sp());
        EXPECT(0x93e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93e1));
        EXPECT(0x80, gbc.readMem(0x93e2));
        // CB 80 017E
        gbc.setState(0x81b9, 0xf9a6, 0xe520, 0xfbb9, 0x8923, 0x63bc, 0x0, 0x0);
        gbc.writeMem(0x81b9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xf9a6, gbc.sp());
        EXPECT(0x81bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81b9));
        EXPECT(0x80, gbc.readMem(0x81ba));
        // CB 80 017F
        gbc.setState(0xd703, 0xe06b, 0x83e0, 0xdd55, 0xac00, 0x298a, 0x1, 0x0);
        gbc.writeMem(0xd703, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xe06b, gbc.sp());
        EXPECT(0xd705, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd703));
        EXPECT(0x80, gbc.readMem(0xd704));
        // CB 80 0180
        gbc.setState(0xdda8, 0xbcb5, 0x91c0, 0x38a7, 0x3308, 0xb352, 0x1, 0x0);
        gbc.writeMem(0xdda8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xbcb5, gbc.sp());
        EXPECT(0xddaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdda8));
        EXPECT(0x80, gbc.readMem(0xdda9));
        // CB 80 0181
        gbc.setState(0x9813, 0xf164, 0xa070, 0xd96, 0x165, 0x7e64, 0x0, 0x0);
        gbc.writeMem(0x9813, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xf164, gbc.sp());
        EXPECT(0x9815, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9813));
        EXPECT(0x80, gbc.readMem(0x9814));
        // CB 80 0182
        gbc.setState(0xd743, 0x2859, 0x1250, 0xb2e9, 0x5069, 0x75de, 0x1, 0x1);
        gbc.writeMem(0xd743, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x2859, gbc.sp());
        EXPECT(0xd745, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd743));
        EXPECT(0x80, gbc.readMem(0xd744));
        // CB 80 0183
        gbc.setState(0xc429, 0xf611, 0x1540, 0xea6f, 0x11ce, 0x2cb, 0x0, 0x1);
        gbc.writeMem(0xc429, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xf611, gbc.sp());
        EXPECT(0xc42b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc429));
        EXPECT(0x80, gbc.readMem(0xc42a));
        // CB 80 0184
        gbc.setState(0x7e41, 0xd35, 0xd480, 0xd3c5, 0xc652, 0x8481, 0x0, 0x1);
        gbc.writeMem(0x7e41, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xd35, gbc.sp());
        EXPECT(0x7e43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0185
        gbc.setState(0x7a47, 0x217f, 0xb2a0, 0x87eb, 0x5db8, 0xd7bd, 0x0, 0x1);
        gbc.writeMem(0x7a47, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x217f, gbc.sp());
        EXPECT(0x7a49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0186
        gbc.setState(0x908e, 0x8d22, 0x40f0, 0xab80, 0xbae9, 0xb39e, 0x0, 0x0);
        gbc.writeMem(0x908e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x8d22, gbc.sp());
        EXPECT(0x9090, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x908e));
        EXPECT(0x80, gbc.readMem(0x908f));
        // CB 80 0187
        gbc.setState(0x928b, 0xf2cb, 0xf540, 0x62fc, 0x605c, 0x16fd, 0x1, 0x0);
        gbc.writeMem(0x928b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xf2cb, gbc.sp());
        EXPECT(0x928d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x928b));
        EXPECT(0x80, gbc.readMem(0x928c));
        // CB 80 0188
        gbc.setState(0xa349, 0x7cb9, 0x4020, 0x7933, 0xfe98, 0x4947, 0x0, 0x1);
        gbc.writeMem(0xa349, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x7cb9, gbc.sp());
        EXPECT(0xa34b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa349));
        EXPECT(0x80, gbc.readMem(0xa34a));
        // CB 80 0189
        gbc.setState(0x6d5a, 0x3c7a, 0x5b00, 0x3c94, 0x3af3, 0xc716, 0x0, 0x1);
        gbc.writeMem(0x6d5a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x3c7a, gbc.sp());
        EXPECT(0x6d5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 018A
        gbc.setState(0x639d, 0xe34, 0xcfa0, 0x7fdc, 0x7587, 0x7d02, 0x1, 0x0);
        gbc.writeMem(0x639d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xe34, gbc.sp());
        EXPECT(0x639f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 018B
        gbc.setState(0x1418, 0x3227, 0xb520, 0x14fc, 0x77a0, 0x3f5b, 0x0, 0x1);
        gbc.writeMem(0x1418, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x3227, gbc.sp());
        EXPECT(0x141a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 018C
        gbc.setState(0xccef, 0x424c, 0x2970, 0x610d, 0x7650, 0x1241, 0x1, 0x0);
        gbc.writeMem(0xccef, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x424c, gbc.sp());
        EXPECT(0xccf1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccef));
        EXPECT(0x80, gbc.readMem(0xccf0));
        // CB 80 018D
        gbc.setState(0x1438, 0xf790, 0xa220, 0xc6d4, 0x5781, 0x1d, 0x0, 0x1);
        gbc.writeMem(0x1438, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xf790, gbc.sp());
        EXPECT(0x143a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 018F
        gbc.setState(0xa1b9, 0x9080, 0xe8f0, 0x3d1d, 0xc85e, 0xb0b2, 0x0, 0x1);
        gbc.writeMem(0xa1b9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x9080, gbc.sp());
        EXPECT(0xa1bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1b9));
        EXPECT(0x80, gbc.readMem(0xa1ba));
        // CB 80 0191
        gbc.setState(0x9e8a, 0x1cde, 0x70, 0x2ad9, 0x2367, 0x2ab7, 0x0, 0x0);
        gbc.writeMem(0x9e8a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x1cde, gbc.sp());
        EXPECT(0x9e8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e8a));
        EXPECT(0x80, gbc.readMem(0x9e8b));
        // CB 80 0192
        gbc.setState(0x9708, 0xceb1, 0xdcf0, 0x5998, 0x88db, 0x949f, 0x1, 0x1);
        gbc.writeMem(0x9708, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xceb1, gbc.sp());
        EXPECT(0x970a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9708));
        EXPECT(0x80, gbc.readMem(0x9709));
        // CB 80 0193
        gbc.setState(0xd7aa, 0xe0fe, 0x6eb0, 0x57e0, 0x3f5e, 0x6d8d, 0x0, 0x1);
        gbc.writeMem(0xd7aa, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xe0fe, gbc.sp());
        EXPECT(0xd7ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7aa));
        EXPECT(0x80, gbc.readMem(0xd7ab));
        // CB 80 0194
        gbc.setState(0x5a3, 0xb4f0, 0x71e0, 0x2c4f, 0x49e6, 0x668, 0x1, 0x0);
        gbc.writeMem(0x5a3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xb4f0, gbc.sp());
        EXPECT(0x5a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0195
        gbc.setState(0x3e5c, 0x293b, 0x57b0, 0xce9a, 0x70cf, 0xa550, 0x0, 0x1);
        gbc.writeMem(0x3e5c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x293b, gbc.sp());
        EXPECT(0x3e5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0196
        gbc.setState(0x41f5, 0xcf76, 0x7240, 0xbc18, 0xdc27, 0x6433, 0x1, 0x0);
        gbc.writeMem(0x41f5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xcf76, gbc.sp());
        EXPECT(0x41f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0197
        gbc.setState(0x84e4, 0xd3fc, 0x20d0, 0xb345, 0xcb23, 0xa1f0, 0x0, 0x1);
        gbc.writeMem(0x84e4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xd3fc, gbc.sp());
        EXPECT(0x84e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84e4));
        EXPECT(0x80, gbc.readMem(0x84e5));
        // CB 80 0198
        gbc.setState(0x3c08, 0x5b94, 0xd3b0, 0x1442, 0xf2a3, 0x7e7e, 0x1, 0x0);
        gbc.writeMem(0x3c08, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x5b94, gbc.sp());
        EXPECT(0x3c0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0199
        gbc.setState(0x7282, 0xf2aa, 0xb320, 0xf26b, 0x37b5, 0x2417, 0x0, 0x1);
        gbc.writeMem(0x7282, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xf2aa, gbc.sp());
        EXPECT(0x7284, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 019A
        gbc.setState(0xad7, 0x1b12, 0xb8e0, 0x8ad3, 0xa8a2, 0x2944, 0x1, 0x0);
        gbc.writeMem(0xad7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x1b12, gbc.sp());
        EXPECT(0xad9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 019B
        gbc.setState(0x8164, 0x272f, 0x81c0, 0x40ea, 0x6c12, 0x13d7, 0x1, 0x1);
        gbc.writeMem(0x8164, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x272f, gbc.sp());
        EXPECT(0x8166, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8164));
        EXPECT(0x80, gbc.readMem(0x8165));
        // CB 80 019C
        gbc.setState(0x5ac4, 0xf82, 0x7fa0, 0xc636, 0x525f, 0x9b18, 0x0, 0x0);
        gbc.writeMem(0x5ac4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xf82, gbc.sp());
        EXPECT(0x5ac6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 019D
        gbc.setState(0xa9a6, 0x1c08, 0x3f20, 0x4701, 0xab2b, 0xd81e, 0x1, 0x0);
        gbc.writeMem(0xa9a6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x1c08, gbc.sp());
        EXPECT(0xa9a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9a6));
        EXPECT(0x80, gbc.readMem(0xa9a7));
        // CB 80 019E
        gbc.setState(0x10b5, 0x7314, 0xcf20, 0x8895, 0x20a9, 0x2eba, 0x0, 0x0);
        gbc.writeMem(0x10b5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x7314, gbc.sp());
        EXPECT(0x10b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 019F
        gbc.setState(0xaeec, 0x3508, 0x8960, 0xe504, 0x9ed5, 0x93ce, 0x0, 0x0);
        gbc.writeMem(0xaeec, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x3508, gbc.sp());
        EXPECT(0xaeee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaeec));
        EXPECT(0x80, gbc.readMem(0xaeed));
        // CB 80 01A0
        gbc.setState(0xc719, 0xf144, 0x70e0, 0xca84, 0xff8a, 0x8355, 0x1, 0x0);
        gbc.writeMem(0xc719, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xf144, gbc.sp());
        EXPECT(0xc71b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc719));
        EXPECT(0x80, gbc.readMem(0xc71a));
        // CB 80 01A1
        gbc.setState(0xb866, 0xa34c, 0xf560, 0xb46a, 0xbe7c, 0x1688, 0x1, 0x1);
        gbc.writeMem(0xb866, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xa34c, gbc.sp());
        EXPECT(0xb868, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb866));
        EXPECT(0x80, gbc.readMem(0xb867));
        // CB 80 01A2
        gbc.setState(0x26e8, 0xe3d, 0x80f0, 0x4cc1, 0x7598, 0x6edb, 0x0, 0x1);
        gbc.writeMem(0x26e8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xe3d, gbc.sp());
        EXPECT(0x26ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01A3
        gbc.setState(0x861a, 0x7ab2, 0x9100, 0x3c53, 0x5386, 0x7a26, 0x1, 0x0);
        gbc.writeMem(0x861a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x7ab2, gbc.sp());
        EXPECT(0x861c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x861a));
        EXPECT(0x80, gbc.readMem(0x861b));
        // CB 80 01A4
        gbc.setState(0xd092, 0x65c4, 0x2c20, 0x24f6, 0x18ac, 0xbc5a, 0x0, 0x0);
        gbc.writeMem(0xd092, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x65c4, gbc.sp());
        EXPECT(0xd094, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd092));
        EXPECT(0x80, gbc.readMem(0xd093));
        // CB 80 01A5
        gbc.setState(0x8110, 0xaeff, 0x9ac0, 0xa1c1, 0x4732, 0xfa5b, 0x1, 0x0);
        gbc.writeMem(0x8110, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xaeff, gbc.sp());
        EXPECT(0x8112, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8110));
        EXPECT(0x80, gbc.readMem(0x8111));
        // CB 80 01A6
        gbc.setState(0x87d9, 0x8e93, 0x5950, 0xb94e, 0x3406, 0xadc0, 0x1, 0x0);
        gbc.writeMem(0x87d9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x8e93, gbc.sp());
        EXPECT(0x87db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87d9));
        EXPECT(0x80, gbc.readMem(0x87da));
        // CB 80 01A7
        gbc.setState(0x1b8a, 0x8362, 0x2df0, 0xbd8c, 0x6456, 0x392b, 0x0, 0x1);
        gbc.writeMem(0x1b8a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x8362, gbc.sp());
        EXPECT(0x1b8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01A8
        gbc.setState(0x8a10, 0x8c29, 0x4c60, 0x8baf, 0xf477, 0xbe6, 0x1, 0x0);
        gbc.writeMem(0x8a10, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x8c29, gbc.sp());
        EXPECT(0x8a12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a10));
        EXPECT(0x80, gbc.readMem(0x8a11));
        // CB 80 01A9
        gbc.setState(0x884a, 0x934, 0x6ff0, 0x372b, 0x8674, 0x6d7f, 0x1, 0x0);
        gbc.writeMem(0x884a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x934, gbc.sp());
        EXPECT(0x884c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x884a));
        EXPECT(0x80, gbc.readMem(0x884b));
        // CB 80 01AA
        gbc.setState(0xd2ef, 0xfcae, 0x5240, 0xbc98, 0xd60c, 0x7d9d, 0x0, 0x1);
        gbc.writeMem(0xd2ef, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xfcae, gbc.sp());
        EXPECT(0xd2f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2ef));
        EXPECT(0x80, gbc.readMem(0xd2f0));
        // CB 80 01AB
        gbc.setState(0xac55, 0x3a97, 0x8c50, 0x63da, 0xf4d1, 0x4976, 0x1, 0x1);
        gbc.writeMem(0xac55, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x3a97, gbc.sp());
        EXPECT(0xac57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac55));
        EXPECT(0x80, gbc.readMem(0xac56));
        // CB 80 01AD
        gbc.setState(0x9497, 0x385f, 0x330, 0x234a, 0xccc1, 0xa542, 0x0, 0x1);
        gbc.writeMem(0x9497, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x385f, gbc.sp());
        EXPECT(0x9499, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9497));
        EXPECT(0x80, gbc.readMem(0x9498));
        // CB 80 01AE
        gbc.setState(0xb86b, 0xd6f3, 0x1670, 0x6be1, 0xef78, 0x9230, 0x1, 0x1);
        gbc.writeMem(0xb86b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xd6f3, gbc.sp());
        EXPECT(0xb86d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb86b));
        EXPECT(0x80, gbc.readMem(0xb86c));
        // CB 80 01AF
        gbc.setState(0x80fa, 0x9654, 0x3080, 0x74b1, 0x5ec1, 0xb564, 0x1, 0x1);
        gbc.writeMem(0x80fa, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x9654, gbc.sp());
        EXPECT(0x80fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80fa));
        EXPECT(0x80, gbc.readMem(0x80fb));
        // CB 80 01B0
        gbc.setState(0x118f, 0x7466, 0x3780, 0x7f54, 0x90c7, 0xccc6, 0x1, 0x1);
        gbc.writeMem(0x118f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x7466, gbc.sp());
        EXPECT(0x1191, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01B1
        gbc.setState(0x1bf1, 0x89b7, 0x79d0, 0xdab7, 0x7345, 0x8625, 0x1, 0x0);
        gbc.writeMem(0x1bf1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x89b7, gbc.sp());
        EXPECT(0x1bf3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01B2
        gbc.setState(0x1e48, 0x5ff6, 0x5aa0, 0x3b5, 0x79cc, 0x57e8, 0x1, 0x0);
        gbc.writeMem(0x1e48, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x5ff6, gbc.sp());
        EXPECT(0x1e4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01B3
        gbc.setState(0x2d04, 0x84e8, 0xbf50, 0x8b11, 0xa469, 0xad44, 0x0, 0x0);
        gbc.writeMem(0x2d04, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x84e8, gbc.sp());
        EXPECT(0x2d06, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01B4
        gbc.setState(0xe588, 0x9210, 0x7c60, 0x4445, 0xce51, 0x616c, 0x1, 0x1);
        gbc.writeMem(0xe588, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x9210, gbc.sp());
        EXPECT(0xe58a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe588));
        EXPECT(0x80, gbc.readMem(0xe589));
        // CB 80 01B5
        gbc.setState(0x1ac5, 0x79, 0x9f40, 0xc6bd, 0xeaf8, 0x9d0, 0x1, 0x0);
        gbc.writeMem(0x1ac5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x79, gbc.sp());
        EXPECT(0x1ac7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01B6
        gbc.setState(0x1c00, 0x1bee, 0xf9b0, 0x3819, 0x3d84, 0x54b7, 0x1, 0x0);
        gbc.writeMem(0x1c00, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x1bee, gbc.sp());
        EXPECT(0x1c02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01B7
        gbc.setState(0x8afe, 0xea24, 0x680, 0xf356, 0xacd6, 0xeaa5, 0x1, 0x0);
        gbc.writeMem(0x8afe, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xea24, gbc.sp());
        EXPECT(0x8b00, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8afe));
        EXPECT(0x80, gbc.readMem(0x8aff));
        // CB 80 01B8
        gbc.setState(0xb4b5, 0x5584, 0xe860, 0x37d7, 0xe124, 0xc6e2, 0x0, 0x0);
        gbc.writeMem(0xb4b5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x5584, gbc.sp());
        EXPECT(0xb4b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4b5));
        EXPECT(0x80, gbc.readMem(0xb4b6));
        // CB 80 01B9
        gbc.setState(0xe64b, 0x8e5d, 0xfd00, 0xffeb, 0x8676, 0x5698, 0x0, 0x0);
        gbc.writeMem(0xe64b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x8e5d, gbc.sp());
        EXPECT(0xe64d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe64b));
        EXPECT(0x80, gbc.readMem(0xe64c));
        // CB 80 01BA
        gbc.setState(0x3010, 0x6420, 0x9f40, 0x39d5, 0xfb4d, 0x530a, 0x1, 0x1);
        gbc.writeMem(0x3010, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x6420, gbc.sp());
        EXPECT(0x3012, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01BB
        gbc.setState(0xc90e, 0x73e1, 0x4fd0, 0xd879, 0x9495, 0xc405, 0x0, 0x0);
        gbc.writeMem(0xc90e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x73e1, gbc.sp());
        EXPECT(0xc910, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc90e));
        EXPECT(0x80, gbc.readMem(0xc90f));
        // CB 80 01BC
        gbc.setState(0x881a, 0xf27b, 0xb140, 0xbed6, 0x2020, 0xc41e, 0x0, 0x0);
        gbc.writeMem(0x881a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xf27b, gbc.sp());
        EXPECT(0x881c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x881a));
        EXPECT(0x80, gbc.readMem(0x881b));
        // CB 80 01BD
        gbc.setState(0x1344, 0x7eff, 0x3160, 0xbf37, 0x90d6, 0x9c57, 0x0, 0x1);
        gbc.writeMem(0x1344, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x7eff, gbc.sp());
        EXPECT(0x1346, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01BE
        gbc.setState(0xa205, 0xdab6, 0x76d0, 0x59aa, 0x5e96, 0x9873, 0x0, 0x0);
        gbc.writeMem(0xa205, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xdab6, gbc.sp());
        EXPECT(0xa207, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa205));
        EXPECT(0x80, gbc.readMem(0xa206));
        // CB 80 01BF
        gbc.setState(0x7583, 0x4cf9, 0x7b0, 0xaf73, 0x76e9, 0x1e5f, 0x1, 0x1);
        gbc.writeMem(0x7583, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x4cf9, gbc.sp());
        EXPECT(0x7585, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01C0
        gbc.setState(0x7387, 0xe137, 0xe6a0, 0x94fe, 0xb7a5, 0x81eb, 0x1, 0x0);
        gbc.writeMem(0x7387, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xe137, gbc.sp());
        EXPECT(0x7389, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01C1
        gbc.setState(0xb7b5, 0xc41e, 0x90c0, 0x45de, 0x2202, 0x69c5, 0x0, 0x0);
        gbc.writeMem(0xb7b5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xc41e, gbc.sp());
        EXPECT(0xb7b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7b5));
        EXPECT(0x80, gbc.readMem(0xb7b6));
        // CB 80 01C2
        gbc.setState(0xc56e, 0xbdb, 0x4f0, 0xf0b, 0xb140, 0x4b7a, 0x0, 0x0);
        gbc.writeMem(0xc56e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xbdb, gbc.sp());
        EXPECT(0xc570, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc56e));
        EXPECT(0x80, gbc.readMem(0xc56f));
        // CB 80 01C3
        gbc.setState(0x70a4, 0xe268, 0xf860, 0xb1a7, 0xc32b, 0x985a, 0x1, 0x0);
        gbc.writeMem(0x70a4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xe268, gbc.sp());
        EXPECT(0x70a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01C4
        gbc.setState(0xa0, 0x6885, 0x1400, 0x85b0, 0x556a, 0xd3d7, 0x1, 0x0);
        gbc.writeMem(0xa0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x6885, gbc.sp());
        EXPECT(0xa2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01C5
        gbc.setState(0x3e1a, 0x9e04, 0x2e20, 0x4e8e, 0x3fdf, 0xdc0d, 0x0, 0x1);
        gbc.writeMem(0x3e1a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x9e04, gbc.sp());
        EXPECT(0x3e1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01C6
        gbc.setState(0x444e, 0x4c75, 0x3d60, 0x67ff, 0x7ffa, 0x3538, 0x1, 0x0);
        gbc.writeMem(0x444e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x4c75, gbc.sp());
        EXPECT(0x4450, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01C7
        gbc.setState(0x5c72, 0x73db, 0xd370, 0xc60d, 0x18b1, 0x194f, 0x1, 0x1);
        gbc.writeMem(0x5c72, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x73db, gbc.sp());
        EXPECT(0x5c74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01C8
        gbc.setState(0x9b4d, 0x71a7, 0x2e80, 0xc6fe, 0x3f7, 0x7b2d, 0x0, 0x0);
        gbc.writeMem(0x9b4d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x71a7, gbc.sp());
        EXPECT(0x9b4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b4d));
        EXPECT(0x80, gbc.readMem(0x9b4e));
        // CB 80 01C9
        gbc.setState(0x7b7d, 0x1b9e, 0x8680, 0xe5cd, 0xd805, 0xe903, 0x0, 0x1);
        gbc.writeMem(0x7b7d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x1b9e, gbc.sp());
        EXPECT(0x7b7f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01CA
        gbc.setState(0x7dcd, 0xd915, 0xc8b0, 0xae5c, 0x81cf, 0x27fa, 0x0, 0x0);
        gbc.writeMem(0x7dcd, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xd915, gbc.sp());
        EXPECT(0x7dcf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01CB
        gbc.setState(0x2c97, 0x87e1, 0xd240, 0xf98d, 0xc98, 0x2643, 0x0, 0x0);
        gbc.writeMem(0x2c97, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x87e1, gbc.sp());
        EXPECT(0x2c99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01CC
        gbc.setState(0xd827, 0xbd5, 0x32b0, 0xaf10, 0xbdd5, 0x813b, 0x0, 0x1);
        gbc.writeMem(0xd827, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xbd5, gbc.sp());
        EXPECT(0xd829, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd827));
        EXPECT(0x80, gbc.readMem(0xd828));
        // CB 80 01CD
        gbc.setState(0x8337, 0x2b4b, 0x8660, 0x4edf, 0x38d4, 0xf425, 0x0, 0x0);
        gbc.writeMem(0x8337, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x2b4b, gbc.sp());
        EXPECT(0x8339, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8337));
        EXPECT(0x80, gbc.readMem(0x8338));
        // CB 80 01CE
        gbc.setState(0x90a, 0x4852, 0x33a0, 0x4cde, 0xe28e, 0x8b77, 0x1, 0x1);
        gbc.writeMem(0x90a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x4852, gbc.sp());
        EXPECT(0x90c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01CF
        gbc.setState(0xc9d1, 0x8f57, 0xc1f0, 0xf0a4, 0xff74, 0xcb3c, 0x1, 0x1);
        gbc.writeMem(0xc9d1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x8f57, gbc.sp());
        EXPECT(0xc9d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9d1));
        EXPECT(0x80, gbc.readMem(0xc9d2));
        // CB 80 01D0
        gbc.setState(0x7c9e, 0xae9f, 0x86c0, 0x3c48, 0xb18c, 0x22bf, 0x1, 0x1);
        gbc.writeMem(0x7c9e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xae9f, gbc.sp());
        EXPECT(0x7ca0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01D1
        gbc.setState(0x2f17, 0xf722, 0xd390, 0x64f3, 0x85a4, 0xb6cf, 0x1, 0x0);
        gbc.writeMem(0x2f17, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xf722, gbc.sp());
        EXPECT(0x2f19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01D2
        gbc.setState(0x509d, 0x4b85, 0xdba0, 0xb0e7, 0x5531, 0x857d, 0x0, 0x1);
        gbc.writeMem(0x509d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x4b85, gbc.sp());
        EXPECT(0x509f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01D4
        gbc.setState(0x771a, 0xe1, 0xa130, 0xbb71, 0x9275, 0x5d61, 0x0, 0x0);
        gbc.writeMem(0x771a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xe1, gbc.sp());
        EXPECT(0x771c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01D6
        gbc.setState(0xe29b, 0x5c0b, 0x8ff0, 0xdb1e, 0xbc1a, 0x7553, 0x0, 0x0);
        gbc.writeMem(0xe29b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x5c0b, gbc.sp());
        EXPECT(0xe29d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe29b));
        EXPECT(0x80, gbc.readMem(0xe29c));
        // CB 80 01D7
        gbc.setState(0x19ef, 0xfcae, 0xaa90, 0xd035, 0xa54a, 0x12cd, 0x0, 0x0);
        gbc.writeMem(0x19ef, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xfcae, gbc.sp());
        EXPECT(0x19f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01D9
        gbc.setState(0x7755, 0xf25e, 0xab30, 0x3579, 0x1321, 0x82aa, 0x1, 0x1);
        gbc.writeMem(0x7755, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xf25e, gbc.sp());
        EXPECT(0x7757, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01DA
        gbc.setState(0x9d85, 0xf9c4, 0xd520, 0x740b, 0x16, 0xac86, 0x1, 0x1);
        gbc.writeMem(0x9d85, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xf9c4, gbc.sp());
        EXPECT(0x9d87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d85));
        EXPECT(0x80, gbc.readMem(0x9d86));
        // CB 80 01DB
        gbc.setState(0x78be, 0x3c8c, 0xff60, 0xff02, 0x445b, 0xb2b7, 0x1, 0x1);
        gbc.writeMem(0x78be, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x3c8c, gbc.sp());
        EXPECT(0x78c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01DC
        gbc.setState(0x4b91, 0x69de, 0xca20, 0xd5de, 0xb90a, 0xab26, 0x1, 0x0);
        gbc.writeMem(0x4b91, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x69de, gbc.sp());
        EXPECT(0x4b93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01DD
        gbc.setState(0x47ec, 0x46df, 0x26d0, 0x9445, 0x8b41, 0xdd24, 0x0, 0x0);
        gbc.writeMem(0x47ec, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x46df, gbc.sp());
        EXPECT(0x47ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01DE
        gbc.setState(0x9b4c, 0x3b2d, 0xf7f0, 0xdf48, 0x4899, 0x4596, 0x1, 0x1);
        gbc.writeMem(0x9b4c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x3b2d, gbc.sp());
        EXPECT(0x9b4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b4c));
        EXPECT(0x80, gbc.readMem(0x9b4d));
        // CB 80 01DF
        gbc.setState(0x8108, 0xfeba, 0x7060, 0xef, 0x78a, 0xe8a2, 0x1, 0x0);
        gbc.writeMem(0x8108, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xfeba, gbc.sp());
        EXPECT(0x810a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8108));
        EXPECT(0x80, gbc.readMem(0x8109));
        // CB 80 01E0
        gbc.setState(0x6ad2, 0xc209, 0x22f0, 0xe7a2, 0x278b, 0x235f, 0x0, 0x1);
        gbc.writeMem(0x6ad2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xc209, gbc.sp());
        EXPECT(0x6ad4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01E1
        gbc.setState(0xa199, 0x9239, 0xf7c0, 0x8f86, 0x65fe, 0xb828, 0x0, 0x0);
        gbc.writeMem(0xa199, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x9239, gbc.sp());
        EXPECT(0xa19b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa199));
        EXPECT(0x80, gbc.readMem(0xa19a));
        // CB 80 01E2
        gbc.setState(0x504f, 0x8c56, 0x4320, 0x2261, 0x2e3, 0x4aa9, 0x1, 0x0);
        gbc.writeMem(0x504f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x8c56, gbc.sp());
        EXPECT(0x5051, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01E5
        gbc.setState(0xee6b, 0x6d9f, 0x8ef0, 0xdd0e, 0xb1fa, 0x8b2d, 0x1, 0x1);
        gbc.writeMem(0xee6b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x6d9f, gbc.sp());
        EXPECT(0xee6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee6b));
        EXPECT(0x80, gbc.readMem(0xee6c));
        // CB 80 01E6
        gbc.setState(0x4725, 0x9eda, 0x4830, 0xd9f7, 0x48e2, 0x3434, 0x1, 0x1);
        gbc.writeMem(0x4725, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x9eda, gbc.sp());
        EXPECT(0x4727, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01E7
        gbc.setState(0x364a, 0x76ff, 0xc010, 0x7ff4, 0x4ddf, 0x68b, 0x0, 0x1);
        gbc.writeMem(0x364a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x76ff, gbc.sp());
        EXPECT(0x364c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01E8
        gbc.setState(0xd521, 0xe32f, 0x3f90, 0xb377, 0x7888, 0x827d, 0x1, 0x0);
        gbc.writeMem(0xd521, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xe32f, gbc.sp());
        EXPECT(0xd523, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd521));
        EXPECT(0x80, gbc.readMem(0xd522));
        // CB 80 01E9
        gbc.setState(0x9f5e, 0x2e5f, 0x10e0, 0x7825, 0x6e4d, 0x18ce, 0x1, 0x1);
        gbc.writeMem(0x9f5e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x2e5f, gbc.sp());
        EXPECT(0x9f60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f5e));
        EXPECT(0x80, gbc.readMem(0x9f5f));
        // CB 80 01EA
        gbc.setState(0xe164, 0x4b41, 0x3c50, 0x58a, 0x17d1, 0x9d16, 0x1, 0x0);
        gbc.writeMem(0xe164, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x4b41, gbc.sp());
        EXPECT(0xe166, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe164));
        EXPECT(0x80, gbc.readMem(0xe165));
        // CB 80 01EB
        gbc.setState(0x8157, 0x7249, 0x83f0, 0x2d36, 0x953d, 0xe202, 0x1, 0x0);
        gbc.writeMem(0x8157, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x7249, gbc.sp());
        EXPECT(0x8159, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8157));
        EXPECT(0x80, gbc.readMem(0x8158));
        // CB 80 01EC
        gbc.setState(0xc591, 0xd8c4, 0x9750, 0x8fc8, 0x155, 0x5194, 0x1, 0x1);
        gbc.writeMem(0xc591, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xd8c4, gbc.sp());
        EXPECT(0xc593, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc591));
        EXPECT(0x80, gbc.readMem(0xc592));
        // CB 80 01ED
        gbc.setState(0xedce, 0x1828, 0x5670, 0xb497, 0xc70e, 0xc1c3, 0x1, 0x1);
        gbc.writeMem(0xedce, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x1828, gbc.sp());
        EXPECT(0xedd0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedce));
        EXPECT(0x80, gbc.readMem(0xedcf));
        // CB 80 01EE
        gbc.setState(0xabc1, 0x41d4, 0x8e80, 0xd822, 0xfb2d, 0x2821, 0x1, 0x1);
        gbc.writeMem(0xabc1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x41d4, gbc.sp());
        EXPECT(0xabc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabc1));
        EXPECT(0x80, gbc.readMem(0xabc2));
        // CB 80 01EF
        gbc.setState(0x9804, 0xcc6c, 0x97e0, 0x2b06, 0xdf0, 0x811d, 0x1, 0x1);
        gbc.writeMem(0x9804, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xcc6c, gbc.sp());
        EXPECT(0x9806, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9804));
        EXPECT(0x80, gbc.readMem(0x9805));
        // CB 80 01F0
        gbc.setState(0xb33b, 0x9595, 0xd000, 0x1ce4, 0x8214, 0xb0c7, 0x0, 0x0);
        gbc.writeMem(0xb33b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x9595, gbc.sp());
        EXPECT(0xb33d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb33b));
        EXPECT(0x80, gbc.readMem(0xb33c));
        // CB 80 01F1
        gbc.setState(0xbb7a, 0x8bef, 0x1700, 0x711c, 0x6cd1, 0x5de4, 0x1, 0x1);
        gbc.writeMem(0xbb7a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x8bef, gbc.sp());
        EXPECT(0xbb7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb7a));
        EXPECT(0x80, gbc.readMem(0xbb7b));
        // CB 80 01F2
        gbc.setState(0x9767, 0xfeed, 0x5f90, 0x7feb, 0x92f6, 0xef46, 0x0, 0x0);
        gbc.writeMem(0x9767, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xfeed, gbc.sp());
        EXPECT(0x9769, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9767));
        EXPECT(0x80, gbc.readMem(0x9768));
        // CB 80 01F3
        gbc.setState(0x5c00, 0x3a92, 0x4060, 0x7ac6, 0xcf15, 0xa404, 0x1, 0x1);
        gbc.writeMem(0x5c00, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x3a92, gbc.sp());
        EXPECT(0x5c02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01F4
        gbc.setState(0x70cc, 0xfd41, 0x32b0, 0x5d5e, 0xf356, 0x6d8e, 0x0, 0x0);
        gbc.writeMem(0x70cc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xfd41, gbc.sp());
        EXPECT(0x70ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01F5
        gbc.setState(0xf03, 0xedf9, 0x29b0, 0x1d0, 0xa836, 0x19f5, 0x1, 0x0);
        gbc.writeMem(0xf03, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xedf9, gbc.sp());
        EXPECT(0xf05, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01F6
        gbc.setState(0x46c8, 0x9336, 0x1480, 0x52da, 0x510b, 0x47b4, 0x0, 0x0);
        gbc.writeMem(0x46c8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x9336, gbc.sp());
        EXPECT(0x46ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01F7
        gbc.setState(0x9e1, 0xbc06, 0x30d0, 0x2595, 0xe3d0, 0xdb3d, 0x1, 0x1);
        gbc.writeMem(0x9e1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xbc06, gbc.sp());
        EXPECT(0x9e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01F8
        gbc.setState(0x46aa, 0x6fae, 0xcd20, 0x272c, 0x85a7, 0x758c, 0x1, 0x0);
        gbc.writeMem(0x46aa, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x6fae, gbc.sp());
        EXPECT(0x46ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01F9
        gbc.setState(0x18d4, 0x5178, 0x2c0, 0xb808, 0xef58, 0x9d1a, 0x1, 0x0);
        gbc.writeMem(0x18d4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x5178, gbc.sp());
        EXPECT(0x18d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01FA
        gbc.setState(0x7486, 0xc92f, 0xad80, 0xffb3, 0xadf8, 0xb70b, 0x1, 0x1);
        gbc.writeMem(0x7486, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xc92f, gbc.sp());
        EXPECT(0x7488, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 01FB
        gbc.setState(0x40f7, 0x7281, 0x3ff0, 0x6aeb, 0x16c7, 0x47f4, 0x1, 0x0);
        gbc.writeMem(0x40f7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x7281, gbc.sp());
        EXPECT(0x40f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 01FC
        gbc.setState(0x9630, 0x175d, 0xb830, 0x89d4, 0xa778, 0xe769, 0x1, 0x0);
        gbc.writeMem(0x9630, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x175d, gbc.sp());
        EXPECT(0x9632, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9630));
        EXPECT(0x80, gbc.readMem(0x9631));
        // CB 80 01FD
        gbc.setState(0xcfad, 0x9fbe, 0x4890, 0xea53, 0xd93a, 0xc2d5, 0x1, 0x0);
        gbc.writeMem(0xcfad, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x9fbe, gbc.sp());
        EXPECT(0xcfaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfad));
        EXPECT(0x80, gbc.readMem(0xcfae));
        // CB 80 01FE
        gbc.setState(0x8bf5, 0xf543, 0xf080, 0xaccb, 0x21c, 0x97c5, 0x1, 0x1);
        gbc.writeMem(0x8bf5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xf543, gbc.sp());
        EXPECT(0x8bf7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bf5));
        EXPECT(0x80, gbc.readMem(0x8bf6));
        // CB 80 01FF
        gbc.setState(0xa2fc, 0xb94c, 0x7ae0, 0xfa17, 0x81bd, 0x17f5, 0x1, 0x0);
        gbc.writeMem(0xa2fc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xb94c, gbc.sp());
        EXPECT(0xa2fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2fc));
        EXPECT(0x80, gbc.readMem(0xa2fd));
        // CB 80 0200
        gbc.setState(0x7441, 0x44de, 0xfa50, 0x8d5e, 0x1011, 0xac42, 0x1, 0x1);
        gbc.writeMem(0x7441, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x44de, gbc.sp());
        EXPECT(0x7443, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0201
        gbc.setState(0xed7b, 0x18d0, 0xc0e0, 0x3b7b, 0xfd95, 0x87c0, 0x0, 0x0);
        gbc.writeMem(0xed7b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x18d0, gbc.sp());
        EXPECT(0xed7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed7b));
        EXPECT(0x80, gbc.readMem(0xed7c));
        // CB 80 0202
        gbc.setState(0x50f3, 0xb254, 0xff10, 0x89c3, 0x36b2, 0x8b5f, 0x0, 0x0);
        gbc.writeMem(0x50f3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xb254, gbc.sp());
        EXPECT(0x50f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0203
        gbc.setState(0xddf8, 0xbafe, 0x7000, 0x982f, 0x9b92, 0xae50, 0x0, 0x0);
        gbc.writeMem(0xddf8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xbafe, gbc.sp());
        EXPECT(0xddfa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddf8));
        EXPECT(0x80, gbc.readMem(0xddf9));
        // CB 80 0204
        gbc.setState(0x39bc, 0x840f, 0xc660, 0x6d9, 0xed3b, 0xf2f9, 0x0, 0x1);
        gbc.writeMem(0x39bc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x840f, gbc.sp());
        EXPECT(0x39be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0205
        gbc.setState(0xb438, 0x931d, 0x57a0, 0x7678, 0xb0d0, 0x87c5, 0x0, 0x1);
        gbc.writeMem(0xb438, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x931d, gbc.sp());
        EXPECT(0xb43a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb438));
        EXPECT(0x80, gbc.readMem(0xb439));
        // CB 80 0206
        gbc.setState(0x4f26, 0xde65, 0x69a0, 0xcbed, 0xdab8, 0x1d30, 0x1, 0x1);
        gbc.writeMem(0x4f26, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xde65, gbc.sp());
        EXPECT(0x4f28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0207
        gbc.setState(0xb16c, 0xee14, 0x8aa0, 0x9454, 0xf405, 0xb533, 0x1, 0x1);
        gbc.writeMem(0xb16c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xee14, gbc.sp());
        EXPECT(0xb16e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb16c));
        EXPECT(0x80, gbc.readMem(0xb16d));
        // CB 80 0208
        gbc.setState(0xc314, 0x1862, 0x1f40, 0x3570, 0xd5dd, 0x9d9e, 0x0, 0x0);
        gbc.writeMem(0xc314, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x1862, gbc.sp());
        EXPECT(0xc316, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc314));
        EXPECT(0x80, gbc.readMem(0xc315));
        // CB 80 0209
        gbc.setState(0x705d, 0xb55b, 0x8f00, 0xa139, 0x4a5c, 0x19c7, 0x1, 0x1);
        gbc.writeMem(0x705d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xb55b, gbc.sp());
        EXPECT(0x705f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 020A
        gbc.setState(0x1977, 0x4c87, 0x8a00, 0x7cc9, 0x1c26, 0x2a67, 0x1, 0x1);
        gbc.writeMem(0x1977, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x4c87, gbc.sp());
        EXPECT(0x1979, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 020B
        gbc.setState(0x62f6, 0x46bf, 0xd420, 0x2378, 0xc3c1, 0x706d, 0x1, 0x1);
        gbc.writeMem(0x62f6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x46bf, gbc.sp());
        EXPECT(0x62f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 020C
        gbc.setState(0x53d4, 0x2d1d, 0x1de0, 0xfab5, 0xa260, 0xa5e2, 0x0, 0x0);
        gbc.writeMem(0x53d4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x2d1d, gbc.sp());
        EXPECT(0x53d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 020D
        gbc.setState(0xc613, 0x941f, 0x5de0, 0xccfc, 0x99dd, 0x6d9c, 0x0, 0x1);
        gbc.writeMem(0xc613, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x941f, gbc.sp());
        EXPECT(0xc615, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc613));
        EXPECT(0x80, gbc.readMem(0xc614));
        // CB 80 020E
        gbc.setState(0x8c10, 0xe2a5, 0x8b40, 0xe4bd, 0xed3f, 0x6f5b, 0x0, 0x1);
        gbc.writeMem(0x8c10, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xe2a5, gbc.sp());
        EXPECT(0x8c12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c10));
        EXPECT(0x80, gbc.readMem(0x8c11));
        // CB 80 020F
        gbc.setState(0x8cb, 0x8fe4, 0x5240, 0xc19d, 0x185e, 0xbaf8, 0x1, 0x0);
        gbc.writeMem(0x8cb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x8fe4, gbc.sp());
        EXPECT(0x8cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0210
        gbc.setState(0x1d68, 0x80e7, 0x91d0, 0xb67b, 0x6a88, 0xfa5d, 0x1, 0x1);
        gbc.writeMem(0x1d68, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x80e7, gbc.sp());
        EXPECT(0x1d6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0211
        gbc.setState(0xaed1, 0xb922, 0x6590, 0xffb8, 0xa471, 0x3acb, 0x0, 0x1);
        gbc.writeMem(0xaed1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xb922, gbc.sp());
        EXPECT(0xaed3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaed1));
        EXPECT(0x80, gbc.readMem(0xaed2));
        // CB 80 0212
        gbc.setState(0xc068, 0x508, 0x8140, 0xfa85, 0xd038, 0x3e58, 0x0, 0x1);
        gbc.writeMem(0xc068, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x508, gbc.sp());
        EXPECT(0xc06a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc068));
        EXPECT(0x80, gbc.readMem(0xc069));
        // CB 80 0213
        gbc.setState(0x3827, 0x6770, 0x3940, 0x85e0, 0x9031, 0x5456, 0x0, 0x1);
        gbc.writeMem(0x3827, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x6770, gbc.sp());
        EXPECT(0x3829, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0214
        gbc.setState(0x3f59, 0x42b2, 0x15e0, 0x7478, 0x8428, 0x2cc3, 0x0, 0x1);
        gbc.writeMem(0x3f59, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x42b2, gbc.sp());
        EXPECT(0x3f5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0215
        gbc.setState(0x173d, 0x8249, 0x59e0, 0xb31, 0xe992, 0xb89c, 0x1, 0x1);
        gbc.writeMem(0x173d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x8249, gbc.sp());
        EXPECT(0x173f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0217
        gbc.setState(0x3e1a, 0xd6d1, 0x6a90, 0x880, 0x32f0, 0xffd, 0x1, 0x1);
        gbc.writeMem(0x3e1a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xd6d1, gbc.sp());
        EXPECT(0x3e1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0218
        gbc.setState(0x35cf, 0x3617, 0xdf10, 0x769e, 0xf7a8, 0xed65, 0x1, 0x1);
        gbc.writeMem(0x35cf, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x3617, gbc.sp());
        EXPECT(0x35d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0219
        gbc.setState(0x7ea7, 0xdd46, 0x92b0, 0xef50, 0x2dbe, 0x68f9, 0x1, 0x0);
        gbc.writeMem(0x7ea7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xdd46, gbc.sp());
        EXPECT(0x7ea9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 021A
        gbc.setState(0x1a51, 0x8975, 0x1a20, 0xd82a, 0x1165, 0x7c9f, 0x1, 0x1);
        gbc.writeMem(0x1a51, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x8975, gbc.sp());
        EXPECT(0x1a53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 021B
        gbc.setState(0x7e9f, 0xa65b, 0x1340, 0x9c67, 0x9741, 0xc794, 0x1, 0x0);
        gbc.writeMem(0x7e9f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xa65b, gbc.sp());
        EXPECT(0x7ea1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 021C
        gbc.setState(0x766c, 0x7e53, 0xfc20, 0x5b2f, 0xef7b, 0xa5b5, 0x1, 0x1);
        gbc.writeMem(0x766c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x7e53, gbc.sp());
        EXPECT(0x766e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 021D
        gbc.setState(0x3ebc, 0xdeb4, 0xd250, 0x7ac7, 0xc044, 0x7eca, 0x1, 0x1);
        gbc.writeMem(0x3ebc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xdeb4, gbc.sp());
        EXPECT(0x3ebe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 021E
        gbc.setState(0xd0fb, 0xb2f3, 0xc760, 0x166a, 0xa877, 0xf4ef, 0x1, 0x1);
        gbc.writeMem(0xd0fb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xb2f3, gbc.sp());
        EXPECT(0xd0fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0fb));
        EXPECT(0x80, gbc.readMem(0xd0fc));
        // CB 80 021F
        gbc.setState(0x26de, 0x7cfd, 0xa600, 0x7693, 0xcec, 0xe97, 0x0, 0x0);
        gbc.writeMem(0x26de, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x7cfd, gbc.sp());
        EXPECT(0x26e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0220
        gbc.setState(0xd9f2, 0xbe36, 0x79e0, 0xee76, 0x415d, 0x9db5, 0x0, 0x1);
        gbc.writeMem(0xd9f2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xbe36, gbc.sp());
        EXPECT(0xd9f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9f2));
        EXPECT(0x80, gbc.readMem(0xd9f3));
        // CB 80 0221
        gbc.setState(0x1527, 0x9a, 0x8720, 0x2d9f, 0x8d23, 0x495f, 0x0, 0x1);
        gbc.writeMem(0x1527, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x9a, gbc.sp());
        EXPECT(0x1529, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0222
        gbc.setState(0x3c99, 0xca0c, 0x4c10, 0xa6a7, 0x40e2, 0x102f, 0x1, 0x1);
        gbc.writeMem(0x3c99, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xca0c, gbc.sp());
        EXPECT(0x3c9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0223
        gbc.setState(0xcd2c, 0xdf6c, 0x68e0, 0xd188, 0x9694, 0x2aa, 0x0, 0x1);
        gbc.writeMem(0xcd2c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xdf6c, gbc.sp());
        EXPECT(0xcd2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd2c));
        EXPECT(0x80, gbc.readMem(0xcd2d));
        // CB 80 0224
        gbc.setState(0xa5d2, 0xb45f, 0x24e0, 0x2078, 0x66e7, 0x256d, 0x1, 0x1);
        gbc.writeMem(0xa5d2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xb45f, gbc.sp());
        EXPECT(0xa5d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5d2));
        EXPECT(0x80, gbc.readMem(0xa5d3));
        // CB 80 0225
        gbc.setState(0x77d8, 0x2f19, 0xc8a0, 0xd0e8, 0x5ae5, 0x101c, 0x1, 0x1);
        gbc.writeMem(0x77d8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x2f19, gbc.sp());
        EXPECT(0x77da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0226
        gbc.setState(0xde1e, 0x7646, 0xc910, 0xceaf, 0x9564, 0x8e41, 0x0, 0x0);
        gbc.writeMem(0xde1e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x7646, gbc.sp());
        EXPECT(0xde20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde1e));
        EXPECT(0x80, gbc.readMem(0xde1f));
        // CB 80 0227
        gbc.setState(0xd74f, 0x98c, 0x58f0, 0x2048, 0x734c, 0x7174, 0x1, 0x0);
        gbc.writeMem(0xd74f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x98c, gbc.sp());
        EXPECT(0xd751, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd74f));
        EXPECT(0x80, gbc.readMem(0xd750));
        // CB 80 0228
        gbc.setState(0x8d, 0x6052, 0x6290, 0xff9, 0x76b, 0x51e1, 0x1, 0x0);
        gbc.writeMem(0x8d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x6052, gbc.sp());
        EXPECT(0x8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0229
        gbc.setState(0x42c5, 0x90c6, 0xe90, 0x24ce, 0x2e67, 0x7815, 0x0, 0x1);
        gbc.writeMem(0x42c5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x90c6, gbc.sp());
        EXPECT(0x42c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 022A
        gbc.setState(0xca25, 0x8aaf, 0x1550, 0x7b96, 0x3e5e, 0xe5d2, 0x1, 0x0);
        gbc.writeMem(0xca25, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x8aaf, gbc.sp());
        EXPECT(0xca27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca25));
        EXPECT(0x80, gbc.readMem(0xca26));
        // CB 80 022B
        gbc.setState(0x9e14, 0x591c, 0xbe50, 0x90c8, 0x120, 0x71d9, 0x1, 0x0);
        gbc.writeMem(0x9e14, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x591c, gbc.sp());
        EXPECT(0x9e16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e14));
        EXPECT(0x80, gbc.readMem(0x9e15));
        // CB 80 022C
        gbc.setState(0xe73e, 0xe655, 0x1b00, 0x9a7a, 0xa84a, 0xe76d, 0x0, 0x1);
        gbc.writeMem(0xe73e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xe655, gbc.sp());
        EXPECT(0xe740, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe73e));
        EXPECT(0x80, gbc.readMem(0xe73f));
        // CB 80 022D
        gbc.setState(0x5050, 0x4e58, 0xf910, 0x62b9, 0xd9cc, 0xca2, 0x0, 0x1);
        gbc.writeMem(0x5050, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x4e58, gbc.sp());
        EXPECT(0x5052, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 022E
        gbc.setState(0x57d4, 0xee7, 0x9d60, 0x1caf, 0xbefa, 0x7778, 0x0, 0x1);
        gbc.writeMem(0x57d4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xee7, gbc.sp());
        EXPECT(0x57d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 022F
        gbc.setState(0xd607, 0x1471, 0x1b60, 0x66c7, 0x1e9b, 0x9ac5, 0x0, 0x1);
        gbc.writeMem(0xd607, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x1471, gbc.sp());
        EXPECT(0xd609, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd607));
        EXPECT(0x80, gbc.readMem(0xd608));
        // CB 80 0230
        gbc.setState(0x8c4c, 0x7d4c, 0x64a0, 0xc3b, 0x6be2, 0x5b67, 0x0, 0x1);
        gbc.writeMem(0x8c4c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x7d4c, gbc.sp());
        EXPECT(0x8c4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c4c));
        EXPECT(0x80, gbc.readMem(0x8c4d));
        // CB 80 0231
        gbc.setState(0x6dce, 0x555d, 0x390, 0xf1c8, 0x52a9, 0x9152, 0x0, 0x0);
        gbc.writeMem(0x6dce, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x555d, gbc.sp());
        EXPECT(0x6dd0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0232
        gbc.setState(0xe2dc, 0x3822, 0x2ab0, 0x608a, 0x7d24, 0xf650, 0x0, 0x1);
        gbc.writeMem(0xe2dc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x3822, gbc.sp());
        EXPECT(0xe2de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2dc));
        EXPECT(0x80, gbc.readMem(0xe2dd));
        // CB 80 0233
        gbc.setState(0xdd17, 0x6de8, 0xc860, 0x8fd, 0xacfa, 0x6667, 0x0, 0x1);
        gbc.writeMem(0xdd17, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x6de8, gbc.sp());
        EXPECT(0xdd19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd17));
        EXPECT(0x80, gbc.readMem(0xdd18));
        // CB 80 0234
        gbc.setState(0x9ab4, 0x63ed, 0xb190, 0x9a51, 0x9b8a, 0x2644, 0x1, 0x0);
        gbc.writeMem(0x9ab4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x63ed, gbc.sp());
        EXPECT(0x9ab6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ab4));
        EXPECT(0x80, gbc.readMem(0x9ab5));
        // CB 80 0235
        gbc.setState(0x93a2, 0xe167, 0x15f0, 0xfcf7, 0x6d59, 0x907e, 0x0, 0x0);
        gbc.writeMem(0x93a2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xe167, gbc.sp());
        EXPECT(0x93a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93a2));
        EXPECT(0x80, gbc.readMem(0x93a3));
        // CB 80 0236
        gbc.setState(0x71ed, 0x9df4, 0x52d0, 0xf8d5, 0xc5f0, 0x3968, 0x1, 0x1);
        gbc.writeMem(0x71ed, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x9df4, gbc.sp());
        EXPECT(0x71ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0237
        gbc.setState(0x7f01, 0xc6ae, 0x8ae0, 0x3f2b, 0x12a0, 0xf161, 0x1, 0x1);
        gbc.writeMem(0x7f01, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xc6ae, gbc.sp());
        EXPECT(0x7f03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0238
        gbc.setState(0x25b8, 0x98d8, 0xf8c0, 0xa644, 0xd64b, 0x942b, 0x1, 0x0);
        gbc.writeMem(0x25b8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x98d8, gbc.sp());
        EXPECT(0x25ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0239
        gbc.setState(0x471e, 0x129a, 0xa0a0, 0xdff7, 0xa9ff, 0x4b3f, 0x1, 0x1);
        gbc.writeMem(0x471e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x129a, gbc.sp());
        EXPECT(0x4720, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 023A
        gbc.setState(0xbde7, 0xb0d5, 0x63f0, 0x732, 0x1cd0, 0x8e03, 0x0, 0x1);
        gbc.writeMem(0xbde7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xb0d5, gbc.sp());
        EXPECT(0xbde9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbde7));
        EXPECT(0x80, gbc.readMem(0xbde8));
        // CB 80 023B
        gbc.setState(0xd043, 0x9586, 0xeb60, 0xde3e, 0xc9aa, 0x8f85, 0x0, 0x1);
        gbc.writeMem(0xd043, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x9586, gbc.sp());
        EXPECT(0xd045, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd043));
        EXPECT(0x80, gbc.readMem(0xd044));
        // CB 80 023C
        gbc.setState(0xbb20, 0xd3fe, 0x8080, 0x7d34, 0xa3c3, 0xaf97, 0x1, 0x0);
        gbc.writeMem(0xbb20, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xd3fe, gbc.sp());
        EXPECT(0xbb22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb20));
        EXPECT(0x80, gbc.readMem(0xbb21));
        // CB 80 023D
        gbc.setState(0xefde, 0xe60f, 0x5b80, 0xcfe, 0x7e, 0xbd56, 0x0, 0x0);
        gbc.writeMem(0xefde, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xe60f, gbc.sp());
        EXPECT(0xefe0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefde));
        EXPECT(0x80, gbc.readMem(0xefdf));
        // CB 80 023E
        gbc.setState(0x826e, 0x401, 0xc810, 0xbc85, 0xfe6d, 0xc32b, 0x0, 0x0);
        gbc.writeMem(0x826e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x401, gbc.sp());
        EXPECT(0x8270, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x826e));
        EXPECT(0x80, gbc.readMem(0x826f));
        // CB 80 023F
        gbc.setState(0x3d5c, 0xbc37, 0xb770, 0x3a1, 0x15a4, 0xac60, 0x1, 0x1);
        gbc.writeMem(0x3d5c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xbc37, gbc.sp());
        EXPECT(0x3d5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0240
        gbc.setState(0x184d, 0xb7c1, 0xd290, 0x929a, 0x454e, 0xf5b4, 0x0, 0x0);
        gbc.writeMem(0x184d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xb7c1, gbc.sp());
        EXPECT(0x184f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0241
        gbc.setState(0xb711, 0x145, 0x85f0, 0x4338, 0x3c0c, 0x3e0f, 0x1, 0x0);
        gbc.writeMem(0xb711, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x145, gbc.sp());
        EXPECT(0xb713, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb711));
        EXPECT(0x80, gbc.readMem(0xb712));
        // CB 80 0242
        gbc.setState(0xe8cc, 0xe8d7, 0x600, 0xb94e, 0x8d2e, 0x927, 0x1, 0x1);
        gbc.writeMem(0xe8cc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xe8d7, gbc.sp());
        EXPECT(0xe8ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8cc));
        EXPECT(0x80, gbc.readMem(0xe8cd));
        // CB 80 0243
        gbc.setState(0xd517, 0x3311, 0x4c20, 0xcd92, 0x76cf, 0x56a7, 0x1, 0x1);
        gbc.writeMem(0xd517, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x3311, gbc.sp());
        EXPECT(0xd519, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd517));
        EXPECT(0x80, gbc.readMem(0xd518));
        // CB 80 0244
        gbc.setState(0x7c88, 0x3f7f, 0x9310, 0xcb, 0x5f3c, 0xc229, 0x1, 0x0);
        gbc.writeMem(0x7c88, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x3f7f, gbc.sp());
        EXPECT(0x7c8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0245
        gbc.setState(0x2bfb, 0xeb2d, 0x43a0, 0x2474, 0x8114, 0x1030, 0x0, 0x0);
        gbc.writeMem(0x2bfb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xeb2d, gbc.sp());
        EXPECT(0x2bfd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0246
        gbc.setState(0x68a6, 0xe3e1, 0xcc60, 0x13c1, 0xd4c5, 0x5c07, 0x1, 0x0);
        gbc.writeMem(0x68a6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xe3e1, gbc.sp());
        EXPECT(0x68a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0248
        gbc.setState(0x94a8, 0xb540, 0x6a00, 0x8114, 0x55e6, 0xbc1c, 0x1, 0x0);
        gbc.writeMem(0x94a8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xb540, gbc.sp());
        EXPECT(0x94aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94a8));
        EXPECT(0x80, gbc.readMem(0x94a9));
        // CB 80 0249
        gbc.setState(0x2c73, 0xcb45, 0x2e60, 0xd4b4, 0xd650, 0xec98, 0x1, 0x0);
        gbc.writeMem(0x2c73, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xcb45, gbc.sp());
        EXPECT(0x2c75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 024A
        gbc.setState(0x3358, 0xba8b, 0xac90, 0xa82a, 0x2dda, 0xdd4c, 0x0, 0x1);
        gbc.writeMem(0x3358, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xba8b, gbc.sp());
        EXPECT(0x335a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 024B
        gbc.setState(0x92ed, 0xad4b, 0xf870, 0xd82c, 0x1466, 0xd9c1, 0x1, 0x0);
        gbc.writeMem(0x92ed, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xad4b, gbc.sp());
        EXPECT(0x92ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92ed));
        EXPECT(0x80, gbc.readMem(0x92ee));
        // CB 80 024C
        gbc.setState(0xa444, 0xb11a, 0xa180, 0xb735, 0x86dc, 0x8bd6, 0x1, 0x1);
        gbc.writeMem(0xa444, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xb11a, gbc.sp());
        EXPECT(0xa446, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa444));
        EXPECT(0x80, gbc.readMem(0xa445));
        // CB 80 024D
        gbc.setState(0x28bf, 0xf60c, 0xf8f0, 0x820, 0x13df, 0x4acd, 0x1, 0x1);
        gbc.writeMem(0x28bf, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xf60c, gbc.sp());
        EXPECT(0x28c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 024F
        gbc.setState(0x52d6, 0x1f92, 0x60, 0x4f7e, 0x8222, 0x60c8, 0x1, 0x0);
        gbc.writeMem(0x52d6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x1f92, gbc.sp());
        EXPECT(0x52d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0250
        gbc.setState(0x46c5, 0xec21, 0xf600, 0x347b, 0x72ef, 0x74e0, 0x0, 0x1);
        gbc.writeMem(0x46c5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xec21, gbc.sp());
        EXPECT(0x46c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0251
        gbc.setState(0x48c6, 0x36, 0x6cd0, 0x8317, 0x55f6, 0x81bd, 0x0, 0x1);
        gbc.writeMem(0x48c6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x36, gbc.sp());
        EXPECT(0x48c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0252
        gbc.setState(0xb6c0, 0x6ce1, 0x81b0, 0xc761, 0x8ed0, 0x76b3, 0x1, 0x0);
        gbc.writeMem(0xb6c0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x6ce1, gbc.sp());
        EXPECT(0xb6c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6c0));
        EXPECT(0x80, gbc.readMem(0xb6c1));
        // CB 80 0253
        gbc.setState(0xde0f, 0x84fd, 0xd4d0, 0x4c86, 0xfd47, 0x7724, 0x0, 0x0);
        gbc.writeMem(0xde0f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x84fd, gbc.sp());
        EXPECT(0xde11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde0f));
        EXPECT(0x80, gbc.readMem(0xde10));
        // CB 80 0254
        gbc.setState(0x5fe6, 0xa7a4, 0x9620, 0xb924, 0x35c9, 0xb4b7, 0x0, 0x0);
        gbc.writeMem(0x5fe6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xa7a4, gbc.sp());
        EXPECT(0x5fe8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0256
        gbc.setState(0x54e6, 0xfd3b, 0xceb0, 0xda52, 0x6f27, 0x2ec8, 0x0, 0x0);
        gbc.writeMem(0x54e6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xfd3b, gbc.sp());
        EXPECT(0x54e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0257
        gbc.setState(0x8d79, 0xc79e, 0xb10, 0x625b, 0x4cc2, 0x37c3, 0x0, 0x0);
        gbc.writeMem(0x8d79, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xc79e, gbc.sp());
        EXPECT(0x8d7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d79));
        EXPECT(0x80, gbc.readMem(0x8d7a));
        // CB 80 0258
        gbc.setState(0xb199, 0xdf9, 0x8be0, 0x5964, 0x2449, 0xcbf8, 0x1, 0x1);
        gbc.writeMem(0xb199, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xdf9, gbc.sp());
        EXPECT(0xb19b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb199));
        EXPECT(0x80, gbc.readMem(0xb19a));
        // CB 80 0259
        gbc.setState(0xa368, 0x9557, 0x55b0, 0x515e, 0x9760, 0x2328, 0x0, 0x1);
        gbc.writeMem(0xa368, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x9557, gbc.sp());
        EXPECT(0xa36a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa368));
        EXPECT(0x80, gbc.readMem(0xa369));
        // CB 80 025A
        gbc.setState(0xa7cf, 0xe2bc, 0x5fc0, 0x856, 0xfc45, 0x5b92, 0x1, 0x1);
        gbc.writeMem(0xa7cf, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xe2bc, gbc.sp());
        EXPECT(0xa7d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7cf));
        EXPECT(0x80, gbc.readMem(0xa7d0));
        // CB 80 025B
        gbc.setState(0x8f91, 0xd81e, 0x8010, 0x11ff, 0x1b4, 0x5fae, 0x0, 0x1);
        gbc.writeMem(0x8f91, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xd81e, gbc.sp());
        EXPECT(0x8f93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f91));
        EXPECT(0x80, gbc.readMem(0x8f92));
        // CB 80 025C
        gbc.setState(0x597b, 0x6d97, 0x78b0, 0xb0e5, 0x898, 0x895a, 0x1, 0x0);
        gbc.writeMem(0x597b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x6d97, gbc.sp());
        EXPECT(0x597d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 025D
        gbc.setState(0xe077, 0xc942, 0x8cd0, 0xe6cd, 0x404e, 0xaf62, 0x0, 0x0);
        gbc.writeMem(0xe077, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xc942, gbc.sp());
        EXPECT(0xe079, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe077));
        EXPECT(0x80, gbc.readMem(0xe078));
        // CB 80 025E
        gbc.setState(0x91f4, 0xe0fa, 0x85a0, 0x8400, 0x3d06, 0xb58a, 0x1, 0x0);
        gbc.writeMem(0x91f4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xe0fa, gbc.sp());
        EXPECT(0x91f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91f4));
        EXPECT(0x80, gbc.readMem(0x91f5));
        // CB 80 025F
        gbc.setState(0x57ca, 0x3205, 0x6490, 0x554b, 0xb036, 0xd405, 0x0, 0x0);
        gbc.writeMem(0x57ca, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x3205, gbc.sp());
        EXPECT(0x57cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0261
        gbc.setState(0x718b, 0xdec3, 0x7520, 0xbc62, 0xd8b0, 0xe27e, 0x0, 0x1);
        gbc.writeMem(0x718b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xdec3, gbc.sp());
        EXPECT(0x718d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0262
        gbc.setState(0x97a1, 0xfdfc, 0x34b0, 0x7678, 0x3ae8, 0xac33, 0x1, 0x0);
        gbc.writeMem(0x97a1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xfdfc, gbc.sp());
        EXPECT(0x97a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97a1));
        EXPECT(0x80, gbc.readMem(0x97a2));
        // CB 80 0263
        gbc.setState(0x1fdb, 0x19de, 0xb330, 0xe819, 0x4af4, 0xbe6d, 0x1, 0x0);
        gbc.writeMem(0x1fdb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x19de, gbc.sp());
        EXPECT(0x1fdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0264
        gbc.setState(0xd912, 0xf702, 0x540, 0xdb15, 0x427c, 0xa4e4, 0x1, 0x1);
        gbc.writeMem(0xd912, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xf702, gbc.sp());
        EXPECT(0xd914, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd912));
        EXPECT(0x80, gbc.readMem(0xd913));
        // CB 80 0265
        gbc.setState(0x37f, 0x70f7, 0x9550, 0x36b, 0x5ce5, 0x3a72, 0x0, 0x1);
        gbc.writeMem(0x37f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x70f7, gbc.sp());
        EXPECT(0x381, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0266
        gbc.setState(0xee3c, 0x5d0c, 0xd670, 0x39e8, 0xaf10, 0x3568, 0x0, 0x1);
        gbc.writeMem(0xee3c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x5d0c, gbc.sp());
        EXPECT(0xee3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee3c));
        EXPECT(0x80, gbc.readMem(0xee3d));
        // CB 80 0267
        gbc.setState(0xbd0e, 0xdb39, 0xc6c0, 0x2eb5, 0x3fa6, 0xf665, 0x0, 0x1);
        gbc.writeMem(0xbd0e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xdb39, gbc.sp());
        EXPECT(0xbd10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd0e));
        EXPECT(0x80, gbc.readMem(0xbd0f));
        // CB 80 0268
        gbc.setState(0xe10c, 0x2e00, 0x31c0, 0xee7f, 0x272a, 0x8dd4, 0x0, 0x0);
        gbc.writeMem(0xe10c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x2e00, gbc.sp());
        EXPECT(0xe10e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe10c));
        EXPECT(0x80, gbc.readMem(0xe10d));
        // CB 80 0269
        gbc.setState(0x3170, 0x9ede, 0xcd10, 0xa209, 0x90d0, 0xd16a, 0x1, 0x0);
        gbc.writeMem(0x3170, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x9ede, gbc.sp());
        EXPECT(0x3172, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 026A
        gbc.setState(0x89af, 0xa0e4, 0x6a20, 0x35f9, 0x344e, 0xe33a, 0x0, 0x1);
        gbc.writeMem(0x89af, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xa0e4, gbc.sp());
        EXPECT(0x89b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89af));
        EXPECT(0x80, gbc.readMem(0x89b0));
        // CB 80 026B
        gbc.setState(0x5557, 0x70d3, 0xdab0, 0x82cc, 0xa414, 0x647e, 0x0, 0x0);
        gbc.writeMem(0x5557, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x70d3, gbc.sp());
        EXPECT(0x5559, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 026C
        gbc.setState(0x2737, 0x6672, 0x3b30, 0x615d, 0xc150, 0xdb65, 0x1, 0x0);
        gbc.writeMem(0x2737, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x6672, gbc.sp());
        EXPECT(0x2739, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 026D
        gbc.setState(0x1be5, 0x901b, 0x3380, 0x7e7a, 0x558c, 0x7a86, 0x1, 0x1);
        gbc.writeMem(0x1be5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x901b, gbc.sp());
        EXPECT(0x1be7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 026E
        gbc.setState(0xb3ad, 0xafb1, 0x5970, 0x5c4, 0xfdeb, 0x3170, 0x0, 0x1);
        gbc.writeMem(0xb3ad, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xafb1, gbc.sp());
        EXPECT(0xb3af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3ad));
        EXPECT(0x80, gbc.readMem(0xb3ae));
        // CB 80 026F
        gbc.setState(0x457f, 0x26dd, 0x3910, 0xa7e8, 0x787a, 0x381e, 0x0, 0x0);
        gbc.writeMem(0x457f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x26dd, gbc.sp());
        EXPECT(0x4581, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0270
        gbc.setState(0xa478, 0x2d08, 0x3bf0, 0xf552, 0xb3bc, 0x94cf, 0x1, 0x1);
        gbc.writeMem(0xa478, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x2d08, gbc.sp());
        EXPECT(0xa47a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa478));
        EXPECT(0x80, gbc.readMem(0xa479));
        // CB 80 0271
        gbc.setState(0xb967, 0x23de, 0xc4f0, 0x299c, 0x83b7, 0x2299, 0x1, 0x0);
        gbc.writeMem(0xb967, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x23de, gbc.sp());
        EXPECT(0xb969, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb967));
        EXPECT(0x80, gbc.readMem(0xb968));
        // CB 80 0272
        gbc.setState(0x51e2, 0xb977, 0x1f0, 0x9745, 0x36d8, 0x75e3, 0x0, 0x1);
        gbc.writeMem(0x51e2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xb977, gbc.sp());
        EXPECT(0x51e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0273
        gbc.setState(0x10e9, 0x77df, 0x4430, 0xa105, 0xdf7e, 0xaa0c, 0x0, 0x0);
        gbc.writeMem(0x10e9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x77df, gbc.sp());
        EXPECT(0x10eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0274
        gbc.setState(0xea, 0xf816, 0xd300, 0xde30, 0x6cf3, 0x90f4, 0x0, 0x0);
        gbc.writeMem(0xea, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xf816, gbc.sp());
        EXPECT(0xec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0275
        gbc.setState(0x91d7, 0xdf4d, 0xb9e0, 0x472d, 0x5259, 0x2a0b, 0x1, 0x1);
        gbc.writeMem(0x91d7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xdf4d, gbc.sp());
        EXPECT(0x91d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91d7));
        EXPECT(0x80, gbc.readMem(0x91d8));
        // CB 80 0276
        gbc.setState(0x6ccb, 0xee96, 0xd130, 0xf461, 0xdeb0, 0x3bb6, 0x0, 0x1);
        gbc.writeMem(0x6ccb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xee96, gbc.sp());
        EXPECT(0x6ccd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0277
        gbc.setState(0xc5dc, 0xd378, 0x11f0, 0x2058, 0xa77d, 0x37e6, 0x0, 0x1);
        gbc.writeMem(0xc5dc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xd378, gbc.sp());
        EXPECT(0xc5de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5dc));
        EXPECT(0x80, gbc.readMem(0xc5dd));
        // CB 80 0278
        gbc.setState(0x5558, 0xb806, 0xc4f0, 0x6c68, 0xf0fa, 0xbd39, 0x0, 0x1);
        gbc.writeMem(0x5558, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xb806, gbc.sp());
        EXPECT(0x555a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 027A
        gbc.setState(0x266d, 0x526d, 0x1830, 0x96cf, 0xc6ff, 0xec5c, 0x0, 0x0);
        gbc.writeMem(0x266d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x526d, gbc.sp());
        EXPECT(0x266f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 027B
        gbc.setState(0xe2d6, 0x19ae, 0xe2d0, 0x8d43, 0x15f3, 0x8146, 0x1, 0x0);
        gbc.writeMem(0xe2d6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x19ae, gbc.sp());
        EXPECT(0xe2d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2d6));
        EXPECT(0x80, gbc.readMem(0xe2d7));
        // CB 80 027C
        gbc.setState(0x7bf3, 0x35b9, 0x5510, 0x6ce8, 0x8c57, 0x2f81, 0x0, 0x0);
        gbc.writeMem(0x7bf3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x35b9, gbc.sp());
        EXPECT(0x7bf5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 027D
        gbc.setState(0x8f3a, 0xbc56, 0x22c0, 0x3506, 0x7f5b, 0xbb22, 0x0, 0x0);
        gbc.writeMem(0x8f3a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xbc56, gbc.sp());
        EXPECT(0x8f3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f3a));
        EXPECT(0x80, gbc.readMem(0x8f3b));
        // CB 80 027E
        gbc.setState(0x1b7a, 0x93ea, 0xcff0, 0xeeab, 0xdaef, 0x375, 0x0, 0x1);
        gbc.writeMem(0x1b7a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x93ea, gbc.sp());
        EXPECT(0x1b7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 027F
        gbc.setState(0xee4a, 0xaec1, 0x1da0, 0x1145, 0x2204, 0x5505, 0x1, 0x0);
        gbc.writeMem(0xee4a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xaec1, gbc.sp());
        EXPECT(0xee4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee4a));
        EXPECT(0x80, gbc.readMem(0xee4b));
        // CB 80 0280
        gbc.setState(0x44f2, 0x348d, 0xe5a0, 0x10ab, 0x671a, 0xe689, 0x0, 0x1);
        gbc.writeMem(0x44f2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x348d, gbc.sp());
        EXPECT(0x44f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0281
        gbc.setState(0x78c2, 0x2278, 0x7630, 0xd237, 0x9d5d, 0xdf73, 0x0, 0x1);
        gbc.writeMem(0x78c2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x2278, gbc.sp());
        EXPECT(0x78c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0282
        gbc.setState(0x85fe, 0xf3fe, 0xcd70, 0xb4f7, 0x7bd4, 0x2864, 0x1, 0x1);
        gbc.writeMem(0x85fe, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xf3fe, gbc.sp());
        EXPECT(0x8600, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85fe));
        EXPECT(0x80, gbc.readMem(0x85ff));
        // CB 80 0283
        gbc.setState(0xc698, 0x90, 0xcb90, 0x35c1, 0x14ca, 0x3c35, 0x1, 0x1);
        gbc.writeMem(0xc698, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x90, gbc.sp());
        EXPECT(0xc69a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc698));
        EXPECT(0x80, gbc.readMem(0xc699));
        // CB 80 0284
        gbc.setState(0x5a4a, 0x71cd, 0xe370, 0xca9a, 0x487c, 0x8c64, 0x0, 0x1);
        gbc.writeMem(0x5a4a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x71cd, gbc.sp());
        EXPECT(0x5a4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0285
        gbc.setState(0xcd4f, 0x679e, 0xca90, 0x582c, 0x973, 0x2898, 0x1, 0x0);
        gbc.writeMem(0xcd4f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x679e, gbc.sp());
        EXPECT(0xcd51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd4f));
        EXPECT(0x80, gbc.readMem(0xcd50));
        // CB 80 0286
        gbc.setState(0xb1d2, 0xc86f, 0x920, 0xf246, 0xdea2, 0xb6a8, 0x0, 0x0);
        gbc.writeMem(0xb1d2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xc86f, gbc.sp());
        EXPECT(0xb1d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1d2));
        EXPECT(0x80, gbc.readMem(0xb1d3));
        // CB 80 0287
        gbc.setState(0xa5ac, 0x67b9, 0xcad0, 0xea73, 0x2488, 0x31c5, 0x1, 0x0);
        gbc.writeMem(0xa5ac, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x67b9, gbc.sp());
        EXPECT(0xa5ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5ac));
        EXPECT(0x80, gbc.readMem(0xa5ad));
        // CB 80 0288
        gbc.setState(0xcd89, 0xe916, 0x3c50, 0xa98a, 0x2b4d, 0x994e, 0x0, 0x0);
        gbc.writeMem(0xcd89, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xe916, gbc.sp());
        EXPECT(0xcd8b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd89));
        EXPECT(0x80, gbc.readMem(0xcd8a));
        // CB 80 0289
        gbc.setState(0x834a, 0xa5a8, 0xb190, 0x7bf9, 0x6b2b, 0x8ce1, 0x1, 0x1);
        gbc.writeMem(0x834a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xa5a8, gbc.sp());
        EXPECT(0x834c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x834a));
        EXPECT(0x80, gbc.readMem(0x834b));
        // CB 80 028A
        gbc.setState(0x5f02, 0x3415, 0x3980, 0x19fc, 0xa5c5, 0x4d0, 0x0, 0x1);
        gbc.writeMem(0x5f02, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x3415, gbc.sp());
        EXPECT(0x5f04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 028C
        gbc.setState(0xad31, 0xd13, 0x3380, 0x35cd, 0x3caf, 0x822e, 0x0, 0x0);
        gbc.writeMem(0xad31, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xd13, gbc.sp());
        EXPECT(0xad33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad31));
        EXPECT(0x80, gbc.readMem(0xad32));
        // CB 80 028D
        gbc.setState(0xb73a, 0xd034, 0x7c10, 0xf8b2, 0x4c21, 0x658d, 0x0, 0x0);
        gbc.writeMem(0xb73a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xd034, gbc.sp());
        EXPECT(0xb73c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb73a));
        EXPECT(0x80, gbc.readMem(0xb73b));
        // CB 80 028E
        gbc.setState(0xa537, 0xd24a, 0x8080, 0x498f, 0x4dc1, 0x7e85, 0x0, 0x1);
        gbc.writeMem(0xa537, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xd24a, gbc.sp());
        EXPECT(0xa539, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa537));
        EXPECT(0x80, gbc.readMem(0xa538));
        // CB 80 028F
        gbc.setState(0x6b05, 0xaed3, 0x5ad0, 0x3740, 0x30d4, 0x18af, 0x0, 0x0);
        gbc.writeMem(0x6b05, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xaed3, gbc.sp());
        EXPECT(0x6b07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0290
        gbc.setState(0xe5b4, 0xd50a, 0x8ee0, 0x4302, 0xd560, 0x5a00, 0x1, 0x1);
        gbc.writeMem(0xe5b4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xd50a, gbc.sp());
        EXPECT(0xe5b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5b4));
        EXPECT(0x80, gbc.readMem(0xe5b5));
        // CB 80 0291
        gbc.setState(0x2595, 0xb950, 0x33f0, 0xc92f, 0x9d57, 0xb3c4, 0x0, 0x0);
        gbc.writeMem(0x2595, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xb950, gbc.sp());
        EXPECT(0x2597, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0292
        gbc.setState(0xa210, 0xa493, 0x6410, 0xf4be, 0xffb7, 0xcfc5, 0x1, 0x0);
        gbc.writeMem(0xa210, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xa493, gbc.sp());
        EXPECT(0xa212, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa210));
        EXPECT(0x80, gbc.readMem(0xa211));
        // CB 80 0293
        gbc.setState(0x830e, 0x1912, 0x5d00, 0x727a, 0xa844, 0xac6, 0x1, 0x1);
        gbc.writeMem(0x830e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x1912, gbc.sp());
        EXPECT(0x8310, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x830e));
        EXPECT(0x80, gbc.readMem(0x830f));
        // CB 80 0294
        gbc.setState(0x83a8, 0xfe, 0x280, 0xb34, 0x352d, 0x3cc0, 0x1, 0x0);
        gbc.writeMem(0x83a8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xfe, gbc.sp());
        EXPECT(0x83aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83a8));
        EXPECT(0x80, gbc.readMem(0x83a9));
        // CB 80 0295
        gbc.setState(0x63e6, 0x655d, 0xfd90, 0x8a62, 0x81b, 0x89be, 0x1, 0x0);
        gbc.writeMem(0x63e6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x655d, gbc.sp());
        EXPECT(0x63e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0296
        gbc.setState(0xea2f, 0x66f6, 0xe580, 0x66b8, 0x4b3a, 0x8f40, 0x1, 0x1);
        gbc.writeMem(0xea2f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x66f6, gbc.sp());
        EXPECT(0xea31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea2f));
        EXPECT(0x80, gbc.readMem(0xea30));
        // CB 80 0297
        gbc.setState(0x42d3, 0x2e5c, 0x3870, 0x3f4e, 0xa8f7, 0x600e, 0x0, 0x0);
        gbc.writeMem(0x42d3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x2e5c, gbc.sp());
        EXPECT(0x42d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0298
        gbc.setState(0x24fa, 0xc9ab, 0x8630, 0xf8c9, 0xad91, 0x90e5, 0x1, 0x1);
        gbc.writeMem(0x24fa, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xc9ab, gbc.sp());
        EXPECT(0x24fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0299
        gbc.setState(0xceb7, 0x240c, 0x100, 0x1534, 0x496b, 0x27db, 0x1, 0x1);
        gbc.writeMem(0xceb7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x240c, gbc.sp());
        EXPECT(0xceb9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xceb7));
        EXPECT(0x80, gbc.readMem(0xceb8));
        // CB 80 029A
        gbc.setState(0x16af, 0x367b, 0xfe80, 0xfdd1, 0x9035, 0xa121, 0x0, 0x0);
        gbc.writeMem(0x16af, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x367b, gbc.sp());
        EXPECT(0x16b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 029B
        gbc.setState(0x47a2, 0x35e, 0x7820, 0x96af, 0x6b9e, 0xcad, 0x1, 0x0);
        gbc.writeMem(0x47a2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x35e, gbc.sp());
        EXPECT(0x47a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 029C
        gbc.setState(0x3709, 0xa99d, 0xf8d0, 0x8c45, 0xf3a0, 0xa8fb, 0x1, 0x0);
        gbc.writeMem(0x3709, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xa99d, gbc.sp());
        EXPECT(0x370b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 029D
        gbc.setState(0x4892, 0xc76e, 0x4670, 0x38e2, 0x9b58, 0x8bc, 0x0, 0x0);
        gbc.writeMem(0x4892, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xc76e, gbc.sp());
        EXPECT(0x4894, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 029E
        gbc.setState(0xcd78, 0xc5b1, 0x7e90, 0x9659, 0x67c8, 0xec71, 0x1, 0x0);
        gbc.writeMem(0xcd78, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xc5b1, gbc.sp());
        EXPECT(0xcd7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd78));
        EXPECT(0x80, gbc.readMem(0xcd79));
        // CB 80 029F
        gbc.setState(0x3ff, 0xb99a, 0xfe50, 0x8481, 0x1749, 0x3a4d, 0x0, 0x1);
        gbc.writeMem(0x3ff, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xb99a, gbc.sp());
        EXPECT(0x401, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02A0
        gbc.setState(0xdfb7, 0x1fce, 0x9890, 0xbb10, 0xf4d, 0x7b88, 0x0, 0x0);
        gbc.writeMem(0xdfb7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x1fce, gbc.sp());
        EXPECT(0xdfb9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfb7));
        EXPECT(0x80, gbc.readMem(0xdfb8));
        // CB 80 02A2
        gbc.setState(0x6cdc, 0xb81f, 0xab30, 0x8953, 0xfc04, 0xeb8c, 0x0, 0x1);
        gbc.writeMem(0x6cdc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xb81f, gbc.sp());
        EXPECT(0x6cde, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02A3
        gbc.setState(0x59db, 0x81ed, 0x8a90, 0x6ff1, 0xe595, 0xa873, 0x0, 0x0);
        gbc.writeMem(0x59db, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x81ed, gbc.sp());
        EXPECT(0x59dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02A4
        gbc.setState(0x93f0, 0x28a0, 0x8020, 0x4c96, 0x305f, 0x296d, 0x0, 0x0);
        gbc.writeMem(0x93f0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x28a0, gbc.sp());
        EXPECT(0x93f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93f0));
        EXPECT(0x80, gbc.readMem(0x93f1));
        // CB 80 02A5
        gbc.setState(0x205a, 0x6196, 0xb5e0, 0x4687, 0xee46, 0x371c, 0x1, 0x1);
        gbc.writeMem(0x205a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x6196, gbc.sp());
        EXPECT(0x205c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02A6
        gbc.setState(0x5edb, 0xd077, 0xa970, 0xc1d0, 0x8a3e, 0xfa03, 0x1, 0x0);
        gbc.writeMem(0x5edb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xd077, gbc.sp());
        EXPECT(0x5edd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02A7
        gbc.setState(0x75de, 0x4da3, 0xdd30, 0xd6f4, 0x2ae6, 0xbcbf, 0x0, 0x0);
        gbc.writeMem(0x75de, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x4da3, gbc.sp());
        EXPECT(0x75e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02A9
        gbc.setState(0x89f5, 0x7162, 0x9600, 0x5309, 0x434b, 0xa043, 0x0, 0x1);
        gbc.writeMem(0x89f5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x7162, gbc.sp());
        EXPECT(0x89f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89f5));
        EXPECT(0x80, gbc.readMem(0x89f6));
        // CB 80 02AA
        gbc.setState(0xd2d4, 0xe924, 0xaea0, 0x8375, 0x8e77, 0xf813, 0x1, 0x0);
        gbc.writeMem(0xd2d4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xe924, gbc.sp());
        EXPECT(0xd2d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2d4));
        EXPECT(0x80, gbc.readMem(0xd2d5));
        // CB 80 02AB
        gbc.setState(0x8b3b, 0xe4fe, 0x2880, 0xb963, 0x41f3, 0x2249, 0x0, 0x1);
        gbc.writeMem(0x8b3b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xe4fe, gbc.sp());
        EXPECT(0x8b3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b3b));
        EXPECT(0x80, gbc.readMem(0x8b3c));
        // CB 80 02AC
        gbc.setState(0x6299, 0xa2b7, 0x33d0, 0x56d, 0x240c, 0x5b90, 0x1, 0x1);
        gbc.writeMem(0x6299, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xa2b7, gbc.sp());
        EXPECT(0x629b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02AD
        gbc.setState(0xa7f6, 0x4bb, 0xd450, 0x7d8f, 0x104f, 0xbcdd, 0x0, 0x0);
        gbc.writeMem(0xa7f6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x4bb, gbc.sp());
        EXPECT(0xa7f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7f6));
        EXPECT(0x80, gbc.readMem(0xa7f7));
        // CB 80 02AE
        gbc.setState(0x9da4, 0xdf18, 0x10f0, 0xf3b1, 0xb8bc, 0x7e5b, 0x1, 0x0);
        gbc.writeMem(0x9da4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xdf18, gbc.sp());
        EXPECT(0x9da6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9da4));
        EXPECT(0x80, gbc.readMem(0x9da5));
        // CB 80 02AF
        gbc.setState(0x1cbd, 0x3d0e, 0x8900, 0x2d69, 0xbbda, 0xa64f, 0x1, 0x0);
        gbc.writeMem(0x1cbd, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x3d0e, gbc.sp());
        EXPECT(0x1cbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02B0
        gbc.setState(0xd42c, 0x8845, 0xf850, 0xf109, 0x7ce8, 0xfc7b, 0x0, 0x0);
        gbc.writeMem(0xd42c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x8845, gbc.sp());
        EXPECT(0xd42e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd42c));
        EXPECT(0x80, gbc.readMem(0xd42d));
        // CB 80 02B1
        gbc.setState(0xbce2, 0x2d34, 0x5af0, 0x216f, 0x6df4, 0x5148, 0x1, 0x1);
        gbc.writeMem(0xbce2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x2d34, gbc.sp());
        EXPECT(0xbce4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbce2));
        EXPECT(0x80, gbc.readMem(0xbce3));
        // CB 80 02B2
        gbc.setState(0x2520, 0x5abf, 0xe480, 0xd416, 0x748c, 0x63db, 0x1, 0x0);
        gbc.writeMem(0x2520, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x5abf, gbc.sp());
        EXPECT(0x2522, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02B3
        gbc.setState(0x92e2, 0x641d, 0x5390, 0x1cf4, 0x97f, 0xa5a6, 0x0, 0x0);
        gbc.writeMem(0x92e2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x641d, gbc.sp());
        EXPECT(0x92e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92e2));
        EXPECT(0x80, gbc.readMem(0x92e3));
        // CB 80 02B4
        gbc.setState(0x611d, 0x26a8, 0xbdf0, 0x9f57, 0xff5e, 0xe72a, 0x0, 0x1);
        gbc.writeMem(0x611d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x26a8, gbc.sp());
        EXPECT(0x611f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02B5
        gbc.setState(0xd73d, 0x2f61, 0xf560, 0x8bb, 0xa77d, 0x7452, 0x0, 0x0);
        gbc.writeMem(0xd73d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x2f61, gbc.sp());
        EXPECT(0xd73f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd73d));
        EXPECT(0x80, gbc.readMem(0xd73e));
        // CB 80 02B6
        gbc.setState(0xe645, 0x4ec0, 0x2bb0, 0x3cc0, 0x3533, 0x53e0, 0x0, 0x0);
        gbc.writeMem(0xe645, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x4ec0, gbc.sp());
        EXPECT(0xe647, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe645));
        EXPECT(0x80, gbc.readMem(0xe646));
        // CB 80 02B7
        gbc.setState(0xd633, 0xb92a, 0xc0c0, 0xeda9, 0x67d0, 0x87f5, 0x0, 0x1);
        gbc.writeMem(0xd633, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xb92a, gbc.sp());
        EXPECT(0xd635, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd633));
        EXPECT(0x80, gbc.readMem(0xd634));
        // CB 80 02B8
        gbc.setState(0x948e, 0xdf2, 0x4740, 0xf7c7, 0x10f2, 0x3809, 0x1, 0x0);
        gbc.writeMem(0x948e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xdf2, gbc.sp());
        EXPECT(0x9490, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x948e));
        EXPECT(0x80, gbc.readMem(0x948f));
        // CB 80 02B9
        gbc.setState(0x2f3e, 0xdc29, 0x4e50, 0xad0, 0x3173, 0xe78b, 0x0, 0x0);
        gbc.writeMem(0x2f3e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xdc29, gbc.sp());
        EXPECT(0x2f40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02BA
        gbc.setState(0xa91d, 0x791a, 0xb430, 0xf758, 0xbc49, 0xdf77, 0x0, 0x0);
        gbc.writeMem(0xa91d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x791a, gbc.sp());
        EXPECT(0xa91f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa91d));
        EXPECT(0x80, gbc.readMem(0xa91e));
        // CB 80 02BB
        gbc.setState(0x508f, 0x9eb7, 0xc4f0, 0x88b9, 0xb1d3, 0xf6f4, 0x1, 0x0);
        gbc.writeMem(0x508f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x9eb7, gbc.sp());
        EXPECT(0x5091, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02BD
        gbc.setState(0xc149, 0x2b0d, 0x3a70, 0x596a, 0x6dcf, 0x22ca, 0x1, 0x0);
        gbc.writeMem(0xc149, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x2b0d, gbc.sp());
        EXPECT(0xc14b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc149));
        EXPECT(0x80, gbc.readMem(0xc14a));
        // CB 80 02BE
        gbc.setState(0x622f, 0xc607, 0xa6e0, 0xf1e3, 0xb58b, 0x32ed, 0x1, 0x0);
        gbc.writeMem(0x622f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xc607, gbc.sp());
        EXPECT(0x6231, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02BF
        gbc.setState(0xea6d, 0x773a, 0xc7f0, 0xfa33, 0x1a03, 0xb46f, 0x0, 0x1);
        gbc.writeMem(0xea6d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x773a, gbc.sp());
        EXPECT(0xea6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea6d));
        EXPECT(0x80, gbc.readMem(0xea6e));
        // CB 80 02C0
        gbc.setState(0x5308, 0x74b1, 0xcae0, 0x501a, 0xabcc, 0xe58b, 0x0, 0x1);
        gbc.writeMem(0x5308, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x74b1, gbc.sp());
        EXPECT(0x530a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02C1
        gbc.setState(0x2946, 0x230e, 0xe530, 0x94b4, 0x91b1, 0x6d02, 0x1, 0x1);
        gbc.writeMem(0x2946, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x230e, gbc.sp());
        EXPECT(0x2948, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02C2
        gbc.setState(0xe4ff, 0x3197, 0xb0e0, 0xf4b6, 0x1355, 0x878a, 0x0, 0x1);
        gbc.writeMem(0xe4ff, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x3197, gbc.sp());
        EXPECT(0xe501, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4ff));
        EXPECT(0x80, gbc.readMem(0xe500));
        // CB 80 02C3
        gbc.setState(0x86ee, 0xc3ba, 0xcc50, 0x9bc, 0x59bd, 0x7a52, 0x1, 0x0);
        gbc.writeMem(0x86ee, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xc3ba, gbc.sp());
        EXPECT(0x86f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86ee));
        EXPECT(0x80, gbc.readMem(0x86ef));
        // CB 80 02C4
        gbc.setState(0x9773, 0xfc65, 0x4280, 0x8ebb, 0x643e, 0x7e27, 0x1, 0x1);
        gbc.writeMem(0x9773, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xfc65, gbc.sp());
        EXPECT(0x9775, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9773));
        EXPECT(0x80, gbc.readMem(0x9774));
        // CB 80 02C5
        gbc.setState(0x8b79, 0xf788, 0x6790, 0xefd4, 0x6a2, 0xb051, 0x1, 0x0);
        gbc.writeMem(0x8b79, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xf788, gbc.sp());
        EXPECT(0x8b7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b79));
        EXPECT(0x80, gbc.readMem(0x8b7a));
        // CB 80 02C6
        gbc.setState(0x475a, 0x55d0, 0xe040, 0xd263, 0x9117, 0xeb62, 0x1, 0x1);
        gbc.writeMem(0x475a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x55d0, gbc.sp());
        EXPECT(0x475c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02C7
        gbc.setState(0x2e85, 0x2eaf, 0xa7d0, 0xfb81, 0x8923, 0xba21, 0x0, 0x1);
        gbc.writeMem(0x2e85, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x2eaf, gbc.sp());
        EXPECT(0x2e87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02C9
        gbc.setState(0x1b, 0xdf17, 0x51c0, 0xa79a, 0x6dfd, 0xec69, 0x0, 0x0);
        gbc.writeMem(0x1b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xdf17, gbc.sp());
        EXPECT(0x1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02CB
        gbc.setState(0x47ba, 0xb219, 0x7530, 0xf914, 0xf57d, 0x5c27, 0x1, 0x1);
        gbc.writeMem(0x47ba, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xb219, gbc.sp());
        EXPECT(0x47bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02CC
        gbc.setState(0xbceb, 0xaf5f, 0x3b90, 0x761a, 0x1149, 0xb9a1, 0x1, 0x1);
        gbc.writeMem(0xbceb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xaf5f, gbc.sp());
        EXPECT(0xbced, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbceb));
        EXPECT(0x80, gbc.readMem(0xbcec));
        // CB 80 02CD
        gbc.setState(0xcf25, 0x184c, 0x2d30, 0x29d, 0x1ac2, 0x579e, 0x1, 0x1);
        gbc.writeMem(0xcf25, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x184c, gbc.sp());
        EXPECT(0xcf27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf25));
        EXPECT(0x80, gbc.readMem(0xcf26));
        // CB 80 02CE
        gbc.setState(0x9155, 0xd446, 0xcee0, 0x7a, 0x5d30, 0xa188, 0x1, 0x0);
        gbc.writeMem(0x9155, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xd446, gbc.sp());
        EXPECT(0x9157, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9155));
        EXPECT(0x80, gbc.readMem(0x9156));
        // CB 80 02CF
        gbc.setState(0xa743, 0x6b1b, 0x6ef0, 0x1f92, 0x8a83, 0xf011, 0x0, 0x1);
        gbc.writeMem(0xa743, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x6b1b, gbc.sp());
        EXPECT(0xa745, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa743));
        EXPECT(0x80, gbc.readMem(0xa744));
        // CB 80 02D0
        gbc.setState(0x2324, 0x1561, 0xd4a0, 0x8cec, 0xd692, 0xd58a, 0x0, 0x0);
        gbc.writeMem(0x2324, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x1561, gbc.sp());
        EXPECT(0x2326, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02D1
        gbc.setState(0xb68d, 0x45ae, 0x9230, 0xd332, 0xad2c, 0xc242, 0x0, 0x0);
        gbc.writeMem(0xb68d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x45ae, gbc.sp());
        EXPECT(0xb68f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb68d));
        EXPECT(0x80, gbc.readMem(0xb68e));
        // CB 80 02D3
        gbc.setState(0x77c7, 0xc8ba, 0xf70, 0xedf0, 0xf097, 0xc829, 0x1, 0x1);
        gbc.writeMem(0x77c7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xc8ba, gbc.sp());
        EXPECT(0x77c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02D4
        gbc.setState(0xdb56, 0x7222, 0xf2a0, 0xeae2, 0x7447, 0x7fef, 0x1, 0x0);
        gbc.writeMem(0xdb56, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x7222, gbc.sp());
        EXPECT(0xdb58, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb56));
        EXPECT(0x80, gbc.readMem(0xdb57));
        // CB 80 02D5
        gbc.setState(0x544, 0xb358, 0x6530, 0x2bed, 0x85d6, 0x5da0, 0x0, 0x1);
        gbc.writeMem(0x544, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xb358, gbc.sp());
        EXPECT(0x546, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02D6
        gbc.setState(0xb28c, 0x2826, 0xed00, 0x3a19, 0x681a, 0x7965, 0x1, 0x1);
        gbc.writeMem(0xb28c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x2826, gbc.sp());
        EXPECT(0xb28e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb28c));
        EXPECT(0x80, gbc.readMem(0xb28d));
        // CB 80 02D7
        gbc.setState(0xc3af, 0xa904, 0x2150, 0x3e7e, 0x9681, 0xab04, 0x1, 0x1);
        gbc.writeMem(0xc3af, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xa904, gbc.sp());
        EXPECT(0xc3b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3af));
        EXPECT(0x80, gbc.readMem(0xc3b0));
        // CB 80 02D8
        gbc.setState(0xc1e5, 0x722c, 0x7370, 0x1cbb, 0xf38d, 0x6769, 0x1, 0x0);
        gbc.writeMem(0xc1e5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x722c, gbc.sp());
        EXPECT(0xc1e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1e5));
        EXPECT(0x80, gbc.readMem(0xc1e6));
        // CB 80 02D9
        gbc.setState(0x265f, 0x7d04, 0x6f40, 0x1d06, 0xa2f5, 0x4508, 0x0, 0x1);
        gbc.writeMem(0x265f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x7d04, gbc.sp());
        EXPECT(0x2661, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02DA
        gbc.setState(0xb372, 0x8f78, 0x1e80, 0x9c0a, 0xd3d2, 0xead5, 0x0, 0x0);
        gbc.writeMem(0xb372, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x8f78, gbc.sp());
        EXPECT(0xb374, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb372));
        EXPECT(0x80, gbc.readMem(0xb373));
        // CB 80 02DB
        gbc.setState(0xa1af, 0x6819, 0x6be0, 0xe0e2, 0xa76d, 0xd832, 0x1, 0x0);
        gbc.writeMem(0xa1af, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x6819, gbc.sp());
        EXPECT(0xa1b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1af));
        EXPECT(0x80, gbc.readMem(0xa1b0));
        // CB 80 02DC
        gbc.setState(0x398f, 0x3446, 0x4ce0, 0xf85b, 0xa6f2, 0xc6f3, 0x0, 0x1);
        gbc.writeMem(0x398f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x3446, gbc.sp());
        EXPECT(0x3991, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02DD
        gbc.setState(0xb9ae, 0xf9d8, 0x53f0, 0x145e, 0x8cfa, 0x32f9, 0x0, 0x0);
        gbc.writeMem(0xb9ae, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xf9d8, gbc.sp());
        EXPECT(0xb9b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9ae));
        EXPECT(0x80, gbc.readMem(0xb9af));
        // CB 80 02DE
        gbc.setState(0xd239, 0xb815, 0x3c50, 0x22e0, 0x9caf, 0x395e, 0x0, 0x1);
        gbc.writeMem(0xd239, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xb815, gbc.sp());
        EXPECT(0xd23b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd239));
        EXPECT(0x80, gbc.readMem(0xd23a));
        // CB 80 02DF
        gbc.setState(0x7089, 0x8658, 0x8e90, 0x786d, 0xc06f, 0xe35c, 0x0, 0x1);
        gbc.writeMem(0x7089, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x8658, gbc.sp());
        EXPECT(0x708b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02E0
        gbc.setState(0x31af, 0xcbf, 0x5240, 0xb714, 0xf5c2, 0x561d, 0x1, 0x0);
        gbc.writeMem(0x31af, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xcbf, gbc.sp());
        EXPECT(0x31b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02E1
        gbc.setState(0x5a5e, 0xaf47, 0x4d80, 0x6988, 0x4972, 0x25ba, 0x0, 0x0);
        gbc.writeMem(0x5a5e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xaf47, gbc.sp());
        EXPECT(0x5a60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02E2
        gbc.setState(0x11b6, 0x49f8, 0x34b0, 0x9fcb, 0xd44, 0xc085, 0x0, 0x1);
        gbc.writeMem(0x11b6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x49f8, gbc.sp());
        EXPECT(0x11b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02E3
        gbc.setState(0xbaa4, 0x8851, 0x2ef0, 0x4df0, 0xa9fc, 0x82e9, 0x0, 0x1);
        gbc.writeMem(0xbaa4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x8851, gbc.sp());
        EXPECT(0xbaa6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaa4));
        EXPECT(0x80, gbc.readMem(0xbaa5));
        // CB 80 02E4
        gbc.setState(0x1de6, 0x42b0, 0x7b30, 0x3c87, 0xd43d, 0xf3b5, 0x0, 0x1);
        gbc.writeMem(0x1de6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x42b0, gbc.sp());
        EXPECT(0x1de8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02E5
        gbc.setState(0xd875, 0x23f0, 0x5460, 0xe44b, 0xe19d, 0x9e61, 0x1, 0x1);
        gbc.writeMem(0xd875, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x23f0, gbc.sp());
        EXPECT(0xd877, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd875));
        EXPECT(0x80, gbc.readMem(0xd876));
        // CB 80 02E6
        gbc.setState(0xe421, 0x9466, 0x6ec0, 0x678c, 0x3f19, 0xdd40, 0x0, 0x1);
        gbc.writeMem(0xe421, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x9466, gbc.sp());
        EXPECT(0xe423, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe421));
        EXPECT(0x80, gbc.readMem(0xe422));
        // CB 80 02E7
        gbc.setState(0xa8c0, 0x179e, 0x2fa0, 0x6bac, 0xb166, 0xfe2e, 0x1, 0x1);
        gbc.writeMem(0xa8c0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x179e, gbc.sp());
        EXPECT(0xa8c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8c0));
        EXPECT(0x80, gbc.readMem(0xa8c1));
        // CB 80 02E9
        gbc.setState(0x2150, 0xb55e, 0xce0, 0x15e, 0xe172, 0xb13e, 0x1, 0x0);
        gbc.writeMem(0x2150, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xb55e, gbc.sp());
        EXPECT(0x2152, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02EA
        gbc.setState(0xc586, 0xe533, 0xa580, 0x9f50, 0xe464, 0x7ce7, 0x0, 0x0);
        gbc.writeMem(0xc586, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xe533, gbc.sp());
        EXPECT(0xc588, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc586));
        EXPECT(0x80, gbc.readMem(0xc587));
        // CB 80 02EB
        gbc.setState(0xdc35, 0xc1a5, 0xa970, 0x2770, 0x38c1, 0x8fa8, 0x0, 0x0);
        gbc.writeMem(0xdc35, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xc1a5, gbc.sp());
        EXPECT(0xdc37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc35));
        EXPECT(0x80, gbc.readMem(0xdc36));
        // CB 80 02EC
        gbc.setState(0x147d, 0x5d00, 0xa150, 0x157e, 0x4d88, 0x96c2, 0x1, 0x1);
        gbc.writeMem(0x147d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x5d00, gbc.sp());
        EXPECT(0x147f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02ED
        gbc.setState(0x1b47, 0x36de, 0xaf30, 0x4b5d, 0x5b60, 0xe14d, 0x0, 0x1);
        gbc.writeMem(0x1b47, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x36de, gbc.sp());
        EXPECT(0x1b49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02EE
        gbc.setState(0x7024, 0xbb89, 0x9040, 0x853a, 0x244f, 0x5175, 0x0, 0x1);
        gbc.writeMem(0x7024, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xbb89, gbc.sp());
        EXPECT(0x7026, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02EF
        gbc.setState(0xb29, 0xe7cd, 0x1b00, 0x8ba1, 0xd3db, 0xd3fb, 0x0, 0x1);
        gbc.writeMem(0xb29, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xe7cd, gbc.sp());
        EXPECT(0xb2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02F0
        gbc.setState(0xac66, 0x821f, 0x1b80, 0x81ad, 0x292e, 0x835a, 0x1, 0x0);
        gbc.writeMem(0xac66, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x821f, gbc.sp());
        EXPECT(0xac68, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac66));
        EXPECT(0x80, gbc.readMem(0xac67));
        // CB 80 02F1
        gbc.setState(0xaee5, 0xd48, 0x70d0, 0x781c, 0x129c, 0xf5d, 0x1, 0x0);
        gbc.writeMem(0xaee5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xd48, gbc.sp());
        EXPECT(0xaee7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaee5));
        EXPECT(0x80, gbc.readMem(0xaee6));
        // CB 80 02F2
        gbc.setState(0x75ba, 0xed23, 0xc300, 0x5545, 0x7f43, 0x2b1c, 0x1, 0x0);
        gbc.writeMem(0x75ba, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xed23, gbc.sp());
        EXPECT(0x75bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02F3
        gbc.setState(0x9e35, 0x4453, 0x4b60, 0xe684, 0xc4ed, 0xde1c, 0x1, 0x0);
        gbc.writeMem(0x9e35, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x4453, gbc.sp());
        EXPECT(0x9e37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e35));
        EXPECT(0x80, gbc.readMem(0x9e36));
        // CB 80 02F4
        gbc.setState(0xc1bf, 0xfae, 0xd0f0, 0xd7d9, 0x378, 0x66f5, 0x1, 0x1);
        gbc.writeMem(0xc1bf, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xfae, gbc.sp());
        EXPECT(0xc1c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1bf));
        EXPECT(0x80, gbc.readMem(0xc1c0));
        // CB 80 02F5
        gbc.setState(0xb04e, 0x1a0d, 0x6e70, 0xe914, 0x291c, 0x5337, 0x0, 0x0);
        gbc.writeMem(0xb04e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x1a0d, gbc.sp());
        EXPECT(0xb050, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb04e));
        EXPECT(0x80, gbc.readMem(0xb04f));
        // CB 80 02F6
        gbc.setState(0x983a, 0xf778, 0x9c60, 0xa1d4, 0xb6b, 0x8ed0, 0x1, 0x0);
        gbc.writeMem(0x983a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xf778, gbc.sp());
        EXPECT(0x983c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x983a));
        EXPECT(0x80, gbc.readMem(0x983b));
        // CB 80 02F7
        gbc.setState(0x9169, 0x4466, 0xf30, 0xa9ce, 0xfe47, 0x6645, 0x1, 0x1);
        gbc.writeMem(0x9169, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x4466, gbc.sp());
        EXPECT(0x916b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9169));
        EXPECT(0x80, gbc.readMem(0x916a));
        // CB 80 02F8
        gbc.setState(0x8495, 0x546b, 0x5ef0, 0x38e2, 0xae80, 0xda88, 0x0, 0x0);
        gbc.writeMem(0x8495, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x546b, gbc.sp());
        EXPECT(0x8497, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8495));
        EXPECT(0x80, gbc.readMem(0x8496));
        // CB 80 02F9
        gbc.setState(0x4943, 0x14d9, 0x1740, 0xb643, 0xc27a, 0x458d, 0x1, 0x0);
        gbc.writeMem(0x4943, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x14d9, gbc.sp());
        EXPECT(0x4945, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02FA
        gbc.setState(0x6127, 0x881c, 0x73a0, 0x8a34, 0x829b, 0x6776, 0x0, 0x0);
        gbc.writeMem(0x6127, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x881c, gbc.sp());
        EXPECT(0x6129, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02FB
        gbc.setState(0xced2, 0x300c, 0x5020, 0x3e01, 0x94cd, 0x8cba, 0x0, 0x1);
        gbc.writeMem(0xced2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x300c, gbc.sp());
        EXPECT(0xced4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xced2));
        EXPECT(0x80, gbc.readMem(0xced3));
        // CB 80 02FC
        gbc.setState(0x322c, 0xd643, 0x7ea0, 0x5a60, 0xcb52, 0x3e78, 0x1, 0x1);
        gbc.writeMem(0x322c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xd643, gbc.sp());
        EXPECT(0x322e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 02FD
        gbc.setState(0x4fff, 0x1db0, 0x8330, 0x9550, 0x57a8, 0xcd1e, 0x0, 0x1);
        gbc.writeMem(0x4fff, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x1db0, gbc.sp());
        EXPECT(0x5001, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02FE
        gbc.setState(0x5ac9, 0xe71, 0x3390, 0xe1ac, 0xbd2c, 0xb11f, 0x1, 0x0);
        gbc.writeMem(0x5ac9, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xe71, gbc.sp());
        EXPECT(0x5acb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 02FF
        gbc.setState(0x4d39, 0x53e5, 0xc50, 0xedd0, 0xc3ee, 0x487e, 0x0, 0x1);
        gbc.writeMem(0x4d39, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x53e5, gbc.sp());
        EXPECT(0x4d3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0300
        gbc.setState(0x466e, 0x7106, 0xad40, 0x167a, 0x726c, 0x61db, 0x1, 0x0);
        gbc.writeMem(0x466e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x7106, gbc.sp());
        EXPECT(0x4670, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0302
        gbc.setState(0x475a, 0x26d3, 0xf080, 0x4ef5, 0x7df4, 0xdcb6, 0x1, 0x1);
        gbc.writeMem(0x475a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x26d3, gbc.sp());
        EXPECT(0x475c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0303
        gbc.setState(0x364e, 0x6176, 0x4910, 0xe046, 0x1c12, 0x3f7f, 0x0, 0x0);
        gbc.writeMem(0x364e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x6176, gbc.sp());
        EXPECT(0x3650, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0304
        gbc.setState(0x393a, 0xf48, 0xff30, 0xe983, 0x4814, 0xbc54, 0x0, 0x1);
        gbc.writeMem(0x393a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xf48, gbc.sp());
        EXPECT(0x393c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0305
        gbc.setState(0x10f4, 0x96cf, 0xc890, 0x51f8, 0xdb30, 0x759e, 0x1, 0x1);
        gbc.writeMem(0x10f4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x96cf, gbc.sp());
        EXPECT(0x10f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0306
        gbc.setState(0xbce7, 0xd6, 0x82a0, 0xbc75, 0x706, 0x7dfe, 0x1, 0x1);
        gbc.writeMem(0xbce7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xd6, gbc.sp());
        EXPECT(0xbce9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbce7));
        EXPECT(0x80, gbc.readMem(0xbce8));
        // CB 80 0307
        gbc.setState(0xa854, 0xcab5, 0xfe0, 0x70a4, 0xd655, 0x2390, 0x1, 0x0);
        gbc.writeMem(0xa854, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xcab5, gbc.sp());
        EXPECT(0xa856, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa854));
        EXPECT(0x80, gbc.readMem(0xa855));
        // CB 80 0308
        gbc.setState(0x87c1, 0x7fb1, 0x2200, 0xdfe0, 0x5a95, 0x8a69, 0x0, 0x0);
        gbc.writeMem(0x87c1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x7fb1, gbc.sp());
        EXPECT(0x87c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87c1));
        EXPECT(0x80, gbc.readMem(0x87c2));
        // CB 80 030A
        gbc.setState(0x3c82, 0x16a2, 0x2d00, 0x8583, 0x6cd2, 0x16d9, 0x0, 0x1);
        gbc.writeMem(0x3c82, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x16a2, gbc.sp());
        EXPECT(0x3c84, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 030B
        gbc.setState(0x36e5, 0x6dbd, 0xae00, 0x81a5, 0x7c90, 0x2591, 0x1, 0x1);
        gbc.writeMem(0x36e5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x6dbd, gbc.sp());
        EXPECT(0x36e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 030C
        gbc.setState(0x851d, 0xfe3e, 0x4980, 0xb981, 0x678c, 0x40ff, 0x0, 0x0);
        gbc.writeMem(0x851d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xfe3e, gbc.sp());
        EXPECT(0x851f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x851d));
        EXPECT(0x80, gbc.readMem(0x851e));
        // CB 80 030D
        gbc.setState(0x447, 0xcad, 0x3da0, 0xaec5, 0xd3a4, 0x4b79, 0x1, 0x1);
        gbc.writeMem(0x447, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xcad, gbc.sp());
        EXPECT(0x449, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 030F
        gbc.setState(0xd309, 0x7244, 0xa130, 0xc75b, 0x43d4, 0xe97c, 0x1, 0x0);
        gbc.writeMem(0xd309, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x7244, gbc.sp());
        EXPECT(0xd30b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd309));
        EXPECT(0x80, gbc.readMem(0xd30a));
        // CB 80 0310
        gbc.setState(0x459a, 0x1387, 0x4100, 0xd09e, 0x7435, 0x44a6, 0x0, 0x1);
        gbc.writeMem(0x459a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x1387, gbc.sp());
        EXPECT(0x459c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0311
        gbc.setState(0x2453, 0xf609, 0x8ae0, 0x120e, 0x8303, 0xd1f8, 0x1, 0x1);
        gbc.writeMem(0x2453, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xf609, gbc.sp());
        EXPECT(0x2455, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0312
        gbc.setState(0xbbb2, 0x3ba8, 0x3050, 0xd687, 0xd3f9, 0xe721, 0x0, 0x1);
        gbc.writeMem(0xbbb2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x3ba8, gbc.sp());
        EXPECT(0xbbb4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbb2));
        EXPECT(0x80, gbc.readMem(0xbbb3));
        // CB 80 0313
        gbc.setState(0xe90, 0x1b3d, 0x7bb0, 0xaf0e, 0xa810, 0x73a8, 0x0, 0x0);
        gbc.writeMem(0xe90, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x1b3d, gbc.sp());
        EXPECT(0xe92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0314
        gbc.setState(0x531b, 0xafb4, 0xffb0, 0x4fe9, 0xdad9, 0x20d6, 0x1, 0x1);
        gbc.writeMem(0x531b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xafb4, gbc.sp());
        EXPECT(0x531d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0315
        gbc.setState(0x3a77, 0xa18d, 0x8e40, 0x691b, 0x5b9f, 0x146d, 0x0, 0x0);
        gbc.writeMem(0x3a77, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xa18d, gbc.sp());
        EXPECT(0x3a79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0316
        gbc.setState(0xc8ea, 0x3536, 0x6a0, 0xb3d5, 0xed29, 0x4acb, 0x0, 0x1);
        gbc.writeMem(0xc8ea, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x3536, gbc.sp());
        EXPECT(0xc8ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8ea));
        EXPECT(0x80, gbc.readMem(0xc8eb));
        // CB 80 0317
        gbc.setState(0x92a1, 0x2ae2, 0x59a0, 0x6902, 0x5cc1, 0xed78, 0x1, 0x1);
        gbc.writeMem(0x92a1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x2ae2, gbc.sp());
        EXPECT(0x92a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92a1));
        EXPECT(0x80, gbc.readMem(0x92a2));
        // CB 80 0319
        gbc.setState(0xa755, 0x2bbb, 0x46c0, 0x3aef, 0x6a5f, 0x949f, 0x0, 0x1);
        gbc.writeMem(0xa755, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x2bbb, gbc.sp());
        EXPECT(0xa757, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa755));
        EXPECT(0x80, gbc.readMem(0xa756));
        // CB 80 031A
        gbc.setState(0x718, 0xd862, 0x4ec0, 0xaf4b, 0x2b78, 0x900e, 0x0, 0x1);
        gbc.writeMem(0x718, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xd862, gbc.sp());
        EXPECT(0x71a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 031B
        gbc.setState(0xd172, 0x1b02, 0xaf00, 0x83ee, 0x483, 0xd81a, 0x1, 0x1);
        gbc.writeMem(0xd172, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x1b02, gbc.sp());
        EXPECT(0xd174, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd172));
        EXPECT(0x80, gbc.readMem(0xd173));
        // CB 80 031C
        gbc.setState(0x269, 0xbd18, 0xd2a0, 0x7677, 0xb307, 0x7fcb, 0x1, 0x0);
        gbc.writeMem(0x269, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xbd18, gbc.sp());
        EXPECT(0x26b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 031D
        gbc.setState(0xcec6, 0xeed6, 0x3ca0, 0x6d16, 0xb3ca, 0x6d97, 0x1, 0x0);
        gbc.writeMem(0xcec6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xeed6, gbc.sp());
        EXPECT(0xcec8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcec6));
        EXPECT(0x80, gbc.readMem(0xcec7));
        // CB 80 031E
        gbc.setState(0xbfbb, 0x9eea, 0x5770, 0xd5ee, 0x4255, 0x36b4, 0x1, 0x1);
        gbc.writeMem(0xbfbb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x9eea, gbc.sp());
        EXPECT(0xbfbd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfbb));
        EXPECT(0x80, gbc.readMem(0xbfbc));
        // CB 80 031F
        gbc.setState(0xdaf2, 0xd533, 0x9d60, 0x1f34, 0xa696, 0xc299, 0x0, 0x1);
        gbc.writeMem(0xdaf2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xd533, gbc.sp());
        EXPECT(0xdaf4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdaf2));
        EXPECT(0x80, gbc.readMem(0xdaf3));
        // CB 80 0320
        gbc.setState(0x3fd4, 0xe3fb, 0x1b90, 0xc1df, 0xd882, 0xb5f9, 0x0, 0x1);
        gbc.writeMem(0x3fd4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xe3fb, gbc.sp());
        EXPECT(0x3fd6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0321
        gbc.setState(0x8a1e, 0xcfc, 0xea20, 0x56c2, 0x63ce, 0x8d3c, 0x0, 0x0);
        gbc.writeMem(0x8a1e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xcfc, gbc.sp());
        EXPECT(0x8a20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a1e));
        EXPECT(0x80, gbc.readMem(0x8a1f));
        // CB 80 0322
        gbc.setState(0x8d69, 0x9f42, 0x1ea0, 0xb08e, 0x6d85, 0xc480, 0x0, 0x1);
        gbc.writeMem(0x8d69, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x9f42, gbc.sp());
        EXPECT(0x8d6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d69));
        EXPECT(0x80, gbc.readMem(0x8d6a));
        // CB 80 0323
        gbc.setState(0x454d, 0xcbdc, 0x8be0, 0x991, 0x78cd, 0x787, 0x0, 0x1);
        gbc.writeMem(0x454d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xcbdc, gbc.sp());
        EXPECT(0x454f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0324
        gbc.setState(0x91d1, 0xe038, 0x4990, 0xf07b, 0x2499, 0xbe25, 0x0, 0x1);
        gbc.writeMem(0x91d1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xe038, gbc.sp());
        EXPECT(0x91d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91d1));
        EXPECT(0x80, gbc.readMem(0x91d2));
        // CB 80 0325
        gbc.setState(0x7438, 0x9076, 0xa040, 0x8e47, 0x1cf0, 0x5843, 0x0, 0x1);
        gbc.writeMem(0x7438, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x9076, gbc.sp());
        EXPECT(0x743a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0326
        gbc.setState(0x962, 0xd4f3, 0x7070, 0xf562, 0xfde5, 0xaddb, 0x0, 0x1);
        gbc.writeMem(0x962, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xd4f3, gbc.sp());
        EXPECT(0x964, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0327
        gbc.setState(0x2f41, 0x7ce9, 0xade0, 0x80a8, 0x77, 0x8c21, 0x0, 0x1);
        gbc.writeMem(0x2f41, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x7ce9, gbc.sp());
        EXPECT(0x2f43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0328
        gbc.setState(0xcaee, 0xde92, 0xeb60, 0x1cb6, 0xba12, 0x405f, 0x0, 0x0);
        gbc.writeMem(0xcaee, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xde92, gbc.sp());
        EXPECT(0xcaf0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaee));
        EXPECT(0x80, gbc.readMem(0xcaef));
        // CB 80 032A
        gbc.setState(0x43f6, 0xdf24, 0x7010, 0x76a8, 0x8864, 0x5459, 0x1, 0x0);
        gbc.writeMem(0x43f6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xdf24, gbc.sp());
        EXPECT(0x43f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 032B
        gbc.setState(0x436b, 0xf313, 0x64f0, 0x72b4, 0xdf49, 0x6dfa, 0x0, 0x1);
        gbc.writeMem(0x436b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xf313, gbc.sp());
        EXPECT(0x436d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 032C
        gbc.setState(0xab02, 0x5e1f, 0xc690, 0x4d3, 0xfeb3, 0xbbfa, 0x1, 0x1);
        gbc.writeMem(0xab02, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x5e1f, gbc.sp());
        EXPECT(0xab04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab02));
        EXPECT(0x80, gbc.readMem(0xab03));
        // CB 80 032D
        gbc.setState(0x83e1, 0x2611, 0x15a0, 0xb021, 0xb86e, 0xc4, 0x1, 0x1);
        gbc.writeMem(0x83e1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x2611, gbc.sp());
        EXPECT(0x83e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83e1));
        EXPECT(0x80, gbc.readMem(0x83e2));
        // CB 80 032E
        gbc.setState(0xa797, 0x366a, 0xdcb0, 0xf97a, 0x7aa4, 0xd749, 0x1, 0x1);
        gbc.writeMem(0xa797, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x366a, gbc.sp());
        EXPECT(0xa799, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa797));
        EXPECT(0x80, gbc.readMem(0xa798));
        // CB 80 032F
        gbc.setState(0x9028, 0xd510, 0x5c10, 0x8fce, 0x4b7f, 0xfb69, 0x1, 0x1);
        gbc.writeMem(0x9028, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xd510, gbc.sp());
        EXPECT(0x902a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9028));
        EXPECT(0x80, gbc.readMem(0x9029));
        // CB 80 0330
        gbc.setState(0x1c14, 0x6a15, 0xcb40, 0x2b4b, 0xfd16, 0xfd1e, 0x1, 0x1);
        gbc.writeMem(0x1c14, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x6a15, gbc.sp());
        EXPECT(0x1c16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0331
        gbc.setState(0x794, 0x9f8c, 0x75e0, 0xf35c, 0x2b3b, 0x14eb, 0x0, 0x0);
        gbc.writeMem(0x794, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x9f8c, gbc.sp());
        EXPECT(0x796, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0332
        gbc.setState(0x284a, 0x8f87, 0x4380, 0x70e3, 0x6059, 0x4805, 0x0, 0x1);
        gbc.writeMem(0x284a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x8f87, gbc.sp());
        EXPECT(0x284c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0333
        gbc.setState(0x6f97, 0x7d79, 0xffc0, 0xfe0d, 0xc5be, 0xbc5f, 0x1, 0x0);
        gbc.writeMem(0x6f97, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x7d79, gbc.sp());
        EXPECT(0x6f99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0334
        gbc.setState(0x1d81, 0xedd1, 0x4490, 0x742, 0xaa90, 0x7ed9, 0x0, 0x0);
        gbc.writeMem(0x1d81, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xedd1, gbc.sp());
        EXPECT(0x1d83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0335
        gbc.setState(0x9003, 0xdf30, 0x8fa0, 0xfe6a, 0x68eb, 0xf596, 0x1, 0x0);
        gbc.writeMem(0x9003, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xdf30, gbc.sp());
        EXPECT(0x9005, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9003));
        EXPECT(0x80, gbc.readMem(0x9004));
        // CB 80 0336
        gbc.setState(0x79d3, 0xa107, 0xb1e0, 0xe9d0, 0x19be, 0x5035, 0x0, 0x0);
        gbc.writeMem(0x79d3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xa107, gbc.sp());
        EXPECT(0x79d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0337
        gbc.setState(0x8e94, 0x1dbf, 0x5770, 0xb9d2, 0xc5b9, 0x769c, 0x0, 0x1);
        gbc.writeMem(0x8e94, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x1dbf, gbc.sp());
        EXPECT(0x8e96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e94));
        EXPECT(0x80, gbc.readMem(0x8e95));
        // CB 80 0338
        gbc.setState(0x76b0, 0xc029, 0x330, 0x2005, 0xfda6, 0x6bd, 0x1, 0x1);
        gbc.writeMem(0x76b0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xc029, gbc.sp());
        EXPECT(0x76b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0339
        gbc.setState(0xb2b5, 0xc5f1, 0xb290, 0xd96b, 0x493b, 0xeeb9, 0x0, 0x1);
        gbc.writeMem(0xb2b5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xc5f1, gbc.sp());
        EXPECT(0xb2b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2b5));
        EXPECT(0x80, gbc.readMem(0xb2b6));
        // CB 80 033A
        gbc.setState(0x5f8e, 0x35db, 0xc510, 0xa46c, 0xd314, 0x8cda, 0x1, 0x0);
        gbc.writeMem(0x5f8e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x35db, gbc.sp());
        EXPECT(0x5f90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 033B
        gbc.setState(0x47e4, 0x7504, 0xab60, 0x292c, 0xacb2, 0xdc29, 0x1, 0x0);
        gbc.writeMem(0x47e4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x7504, gbc.sp());
        EXPECT(0x47e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 033C
        gbc.setState(0x7414, 0x1493, 0xa70, 0x451b, 0x46fe, 0x649f, 0x1, 0x1);
        gbc.writeMem(0x7414, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x1493, gbc.sp());
        EXPECT(0x7416, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 033D
        gbc.setState(0x45f5, 0x5e2, 0x120, 0xa4ae, 0x7162, 0xaad7, 0x1, 0x1);
        gbc.writeMem(0x45f5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x5e2, gbc.sp());
        EXPECT(0x45f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 033E
        gbc.setState(0xc7b4, 0xa74a, 0xbb30, 0x9f17, 0xa09f, 0x4440, 0x0, 0x0);
        gbc.writeMem(0xc7b4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xa74a, gbc.sp());
        EXPECT(0xc7b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7b4));
        EXPECT(0x80, gbc.readMem(0xc7b5));
        // CB 80 033F
        gbc.setState(0xca82, 0xa28f, 0x31d0, 0x8ec2, 0x5ab6, 0x9e9, 0x1, 0x0);
        gbc.writeMem(0xca82, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xa28f, gbc.sp());
        EXPECT(0xca84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca82));
        EXPECT(0x80, gbc.readMem(0xca83));
        // CB 80 0340
        gbc.setState(0x840c, 0xbe19, 0x5b0, 0xa0ba, 0x1988, 0x24e2, 0x0, 0x1);
        gbc.writeMem(0x840c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xbe19, gbc.sp());
        EXPECT(0x840e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x840c));
        EXPECT(0x80, gbc.readMem(0x840d));
        // CB 80 0341
        gbc.setState(0x52a7, 0xdc82, 0xdb80, 0x5091, 0xf94a, 0x1390, 0x0, 0x1);
        gbc.writeMem(0x52a7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xdc82, gbc.sp());
        EXPECT(0x52a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0342
        gbc.setState(0x107e, 0x5041, 0x1f0, 0x756f, 0x41db, 0xdfa, 0x1, 0x1);
        gbc.writeMem(0x107e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x5041, gbc.sp());
        EXPECT(0x1080, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0345
        gbc.setState(0xb36b, 0x81d0, 0x9240, 0xe024, 0x3d28, 0xba01, 0x0, 0x1);
        gbc.writeMem(0xb36b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x81d0, gbc.sp());
        EXPECT(0xb36d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb36b));
        EXPECT(0x80, gbc.readMem(0xb36c));
        // CB 80 0346
        gbc.setState(0x30ad, 0x43d3, 0x7680, 0xaf71, 0x277f, 0x19e8, 0x1, 0x1);
        gbc.writeMem(0x30ad, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x43d3, gbc.sp());
        EXPECT(0x30af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0347
        gbc.setState(0x1e4d, 0xd7fd, 0x7060, 0x2e7d, 0xeed1, 0xfba9, 0x0, 0x1);
        gbc.writeMem(0x1e4d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xd7fd, gbc.sp());
        EXPECT(0x1e4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0348
        gbc.setState(0x42a2, 0xe495, 0x49c0, 0x75d6, 0xac5c, 0xbc61, 0x1, 0x1);
        gbc.writeMem(0x42a2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xe495, gbc.sp());
        EXPECT(0x42a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0349
        gbc.setState(0xcc1e, 0xfab8, 0x8020, 0x5c3, 0x9ea, 0xc82b, 0x1, 0x1);
        gbc.writeMem(0xcc1e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xfab8, gbc.sp());
        EXPECT(0xcc20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc1e));
        EXPECT(0x80, gbc.readMem(0xcc1f));
        // CB 80 034A
        gbc.setState(0x98c5, 0x10a5, 0x14b0, 0x2e52, 0x8b1c, 0x3529, 0x0, 0x0);
        gbc.writeMem(0x98c5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x10a5, gbc.sp());
        EXPECT(0x98c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98c5));
        EXPECT(0x80, gbc.readMem(0x98c6));
        // CB 80 034B
        gbc.setState(0x37f0, 0x4777, 0xc750, 0x6916, 0x5db3, 0x7f6a, 0x1, 0x1);
        gbc.writeMem(0x37f0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x4777, gbc.sp());
        EXPECT(0x37f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 034C
        gbc.setState(0xb988, 0xa989, 0xa7d0, 0x6aff, 0xe5f9, 0x5ca7, 0x0, 0x0);
        gbc.writeMem(0xb988, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xa989, gbc.sp());
        EXPECT(0xb98a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb988));
        EXPECT(0x80, gbc.readMem(0xb989));
        // CB 80 034D
        gbc.setState(0x8908, 0x90a1, 0xc4f0, 0xacfe, 0x679e, 0xf6b8, 0x1, 0x1);
        gbc.writeMem(0x8908, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x90a1, gbc.sp());
        EXPECT(0x890a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8908));
        EXPECT(0x80, gbc.readMem(0x8909));
        // CB 80 034E
        gbc.setState(0x3f50, 0xbb8f, 0xded0, 0xa3a4, 0x83ec, 0x204d, 0x1, 0x0);
        gbc.writeMem(0x3f50, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xbb8f, gbc.sp());
        EXPECT(0x3f52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 034F
        gbc.setState(0x1c0c, 0x6f31, 0x9de0, 0x8591, 0x5fbb, 0x3bcc, 0x0, 0x0);
        gbc.writeMem(0x1c0c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x6f31, gbc.sp());
        EXPECT(0x1c0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0350
        gbc.setState(0x7ee3, 0x99ec, 0xfa00, 0x2dcc, 0xf048, 0x50e5, 0x0, 0x1);
        gbc.writeMem(0x7ee3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x99ec, gbc.sp());
        EXPECT(0x7ee5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0351
        gbc.setState(0xe667, 0x334d, 0xde10, 0x4a1c, 0x7ebf, 0x21f5, 0x0, 0x1);
        gbc.writeMem(0xe667, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x334d, gbc.sp());
        EXPECT(0xe669, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe667));
        EXPECT(0x80, gbc.readMem(0xe668));
        // CB 80 0352
        gbc.setState(0xe4d5, 0xca95, 0x5e30, 0xa753, 0x168b, 0x90e, 0x1, 0x0);
        gbc.writeMem(0xe4d5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xca95, gbc.sp());
        EXPECT(0xe4d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4d5));
        EXPECT(0x80, gbc.readMem(0xe4d6));
        // CB 80 0353
        gbc.setState(0xb0dc, 0x517c, 0x56b0, 0x67fe, 0xcdca, 0xf945, 0x0, 0x0);
        gbc.writeMem(0xb0dc, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x517c, gbc.sp());
        EXPECT(0xb0de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0dc));
        EXPECT(0x80, gbc.readMem(0xb0dd));
        // CB 80 0354
        gbc.setState(0x9b17, 0x592e, 0x5bf0, 0x9be4, 0x67a, 0xb039, 0x0, 0x0);
        gbc.writeMem(0x9b17, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x592e, gbc.sp());
        EXPECT(0x9b19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b17));
        EXPECT(0x80, gbc.readMem(0x9b18));
        // CB 80 0355
        gbc.setState(0x4a1b, 0x675f, 0x4160, 0xb93b, 0xff53, 0x5b68, 0x1, 0x0);
        gbc.writeMem(0x4a1b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x675f, gbc.sp());
        EXPECT(0x4a1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0356
        gbc.setState(0x6c00, 0x9ac0, 0x3010, 0x2cf, 0x77a9, 0xfe69, 0x1, 0x1);
        gbc.writeMem(0x6c00, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x9ac0, gbc.sp());
        EXPECT(0x6c02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0357
        gbc.setState(0xadf7, 0x300a, 0x8c10, 0x9f2b, 0xc59e, 0x2f93, 0x1, 0x1);
        gbc.writeMem(0xadf7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x300a, gbc.sp());
        EXPECT(0xadf9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadf7));
        EXPECT(0x80, gbc.readMem(0xadf8));
        // CB 80 0358
        gbc.setState(0xdc8b, 0xfb00, 0x2e90, 0xcc57, 0xe24f, 0x7a20, 0x1, 0x1);
        gbc.writeMem(0xdc8b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xfb00, gbc.sp());
        EXPECT(0xdc8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc8b));
        EXPECT(0x80, gbc.readMem(0xdc8c));
        // CB 80 0359
        gbc.setState(0x99e8, 0xe31b, 0x3810, 0x4558, 0xf5af, 0xac82, 0x1, 0x1);
        gbc.writeMem(0x99e8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xe31b, gbc.sp());
        EXPECT(0x99ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99e8));
        EXPECT(0x80, gbc.readMem(0x99e9));
        // CB 80 035A
        gbc.setState(0xc9a4, 0xba3, 0x9d0, 0x423b, 0xd3e9, 0x2c4a, 0x0, 0x1);
        gbc.writeMem(0xc9a4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xba3, gbc.sp());
        EXPECT(0xc9a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9a4));
        EXPECT(0x80, gbc.readMem(0xc9a5));
        // CB 80 035B
        gbc.setState(0x2fd1, 0x39d5, 0x3d50, 0x325c, 0xf82e, 0xcdbd, 0x1, 0x0);
        gbc.writeMem(0x2fd1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x39d5, gbc.sp());
        EXPECT(0x2fd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 035C
        gbc.setState(0x14d2, 0x6c13, 0xf990, 0xaa5, 0xdccf, 0xf696, 0x0, 0x1);
        gbc.writeMem(0x14d2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x6c13, gbc.sp());
        EXPECT(0x14d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 035D
        gbc.setState(0x4976, 0x74fa, 0xe9c0, 0xee18, 0x695a, 0x1d75, 0x0, 0x0);
        gbc.writeMem(0x4976, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x74fa, gbc.sp());
        EXPECT(0x4978, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 035E
        gbc.setState(0x2558, 0x450b, 0xa4b0, 0x8f2e, 0x28bd, 0xba95, 0x1, 0x0);
        gbc.writeMem(0x2558, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x450b, gbc.sp());
        EXPECT(0x255a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 035F
        gbc.setState(0x813d, 0x99cd, 0xd920, 0xd840, 0xacf8, 0x13e7, 0x1, 0x0);
        gbc.writeMem(0x813d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x99cd, gbc.sp());
        EXPECT(0x813f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x813d));
        EXPECT(0x80, gbc.readMem(0x813e));
        // CB 80 0360
        gbc.setState(0xb8ae, 0x4d69, 0xa860, 0x4408, 0xfcbe, 0x30bb, 0x0, 0x0);
        gbc.writeMem(0xb8ae, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x4d69, gbc.sp());
        EXPECT(0xb8b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8ae));
        EXPECT(0x80, gbc.readMem(0xb8af));
        // CB 80 0361
        gbc.setState(0x3b77, 0x2700, 0xf20, 0x6486, 0x9a73, 0x4ef5, 0x0, 0x1);
        gbc.writeMem(0x3b77, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x2700, gbc.sp());
        EXPECT(0x3b79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0362
        gbc.setState(0xb116, 0x43f, 0xbf20, 0x7434, 0x7c67, 0x57c3, 0x1, 0x1);
        gbc.writeMem(0xb116, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x43f, gbc.sp());
        EXPECT(0xb118, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb116));
        EXPECT(0x80, gbc.readMem(0xb117));
        // CB 80 0363
        gbc.setState(0x8476, 0x2927, 0xedd0, 0x7e14, 0x769, 0xead0, 0x1, 0x0);
        gbc.writeMem(0x8476, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x2927, gbc.sp());
        EXPECT(0x8478, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8476));
        EXPECT(0x80, gbc.readMem(0x8477));
        // CB 80 0364
        gbc.setState(0x4a9e, 0x720d, 0xd60, 0xe01c, 0x2a11, 0x33be, 0x1, 0x0);
        gbc.writeMem(0x4a9e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x720d, gbc.sp());
        EXPECT(0x4aa0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0365
        gbc.setState(0x6aa1, 0x7ebe, 0xd7b0, 0xb572, 0xd198, 0xb054, 0x0, 0x1);
        gbc.writeMem(0x6aa1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x7ebe, gbc.sp());
        EXPECT(0x6aa3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0366
        gbc.setState(0xd22a, 0x3627, 0xe410, 0x810e, 0xf0e4, 0x8ec9, 0x1, 0x1);
        gbc.writeMem(0xd22a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x3627, gbc.sp());
        EXPECT(0xd22c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd22a));
        EXPECT(0x80, gbc.readMem(0xd22b));
        // CB 80 0367
        gbc.setState(0x96cb, 0xdf6c, 0x5030, 0x94ca, 0xcc3d, 0x88ce, 0x0, 0x1);
        gbc.writeMem(0x96cb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xdf6c, gbc.sp());
        EXPECT(0x96cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96cb));
        EXPECT(0x80, gbc.readMem(0x96cc));
        // CB 80 0368
        gbc.setState(0x25dd, 0x97aa, 0x36e0, 0x92c6, 0xc57a, 0xaa7c, 0x0, 0x0);
        gbc.writeMem(0x25dd, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x97aa, gbc.sp());
        EXPECT(0x25df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0369
        gbc.setState(0x1711, 0xb2a6, 0x9de0, 0x5fd1, 0x66cd, 0xc01b, 0x1, 0x1);
        gbc.writeMem(0x1711, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xb2a6, gbc.sp());
        EXPECT(0x1713, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 036B
        gbc.setState(0xe504, 0x99ae, 0x1ec0, 0x1b91, 0x3a97, 0x1984, 0x0, 0x0);
        gbc.writeMem(0xe504, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x99ae, gbc.sp());
        EXPECT(0xe506, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe504));
        EXPECT(0x80, gbc.readMem(0xe505));
        // CB 80 036C
        gbc.setState(0x3588, 0x92aa, 0xc480, 0x2953, 0x40e1, 0x2b43, 0x0, 0x1);
        gbc.writeMem(0x3588, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x92aa, gbc.sp());
        EXPECT(0x358a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 036D
        gbc.setState(0xaf3d, 0x10d7, 0x7f0, 0x6f41, 0xac1e, 0xa353, 0x1, 0x0);
        gbc.writeMem(0xaf3d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x10d7, gbc.sp());
        EXPECT(0xaf3f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf3d));
        EXPECT(0x80, gbc.readMem(0xaf3e));
        // CB 80 036F
        gbc.setState(0x810b, 0x3038, 0x2150, 0xd3f6, 0xf05d, 0x3e78, 0x0, 0x0);
        gbc.writeMem(0x810b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x3038, gbc.sp());
        EXPECT(0x810d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x810b));
        EXPECT(0x80, gbc.readMem(0x810c));
        // CB 80 0370
        gbc.setState(0xc885, 0x4f98, 0x3480, 0x6a94, 0xb348, 0x9b6b, 0x0, 0x1);
        gbc.writeMem(0xc885, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x4f98, gbc.sp());
        EXPECT(0xc887, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc885));
        EXPECT(0x80, gbc.readMem(0xc886));
        // CB 80 0371
        gbc.setState(0xa4da, 0xb3c6, 0x63b0, 0xde05, 0x2fde, 0xe4c4, 0x0, 0x0);
        gbc.writeMem(0xa4da, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xb3c6, gbc.sp());
        EXPECT(0xa4dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4da));
        EXPECT(0x80, gbc.readMem(0xa4db));
        // CB 80 0372
        gbc.setState(0xa74b, 0xdbcf, 0x60c0, 0x5ebc, 0x4baf, 0xaf0e, 0x1, 0x0);
        gbc.writeMem(0xa74b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xdbcf, gbc.sp());
        EXPECT(0xa74d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa74b));
        EXPECT(0x80, gbc.readMem(0xa74c));
        // CB 80 0373
        gbc.setState(0x72a6, 0xa054, 0xd70, 0xa0fb, 0xb6cf, 0x3ae3, 0x0, 0x1);
        gbc.writeMem(0x72a6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xa054, gbc.sp());
        EXPECT(0x72a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0374
        gbc.setState(0x8c4f, 0x267d, 0xd160, 0xee86, 0xa159, 0x82d2, 0x0, 0x0);
        gbc.writeMem(0x8c4f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x267d, gbc.sp());
        EXPECT(0x8c51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c4f));
        EXPECT(0x80, gbc.readMem(0x8c50));
        // CB 80 0375
        gbc.setState(0x59fa, 0x5389, 0x4f00, 0xb777, 0x6e49, 0x1006, 0x0, 0x0);
        gbc.writeMem(0x59fa, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x5389, gbc.sp());
        EXPECT(0x59fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0376
        gbc.setState(0xc7ed, 0xc8e5, 0x7f70, 0xf537, 0xb376, 0x7979, 0x1, 0x1);
        gbc.writeMem(0xc7ed, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xc8e5, gbc.sp());
        EXPECT(0xc7ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7ed));
        EXPECT(0x80, gbc.readMem(0xc7ee));
        // CB 80 0377
        gbc.setState(0x69d7, 0xef8b, 0x6b00, 0x1dc7, 0xd5b2, 0x246d, 0x0, 0x1);
        gbc.writeMem(0x69d7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xef8b, gbc.sp());
        EXPECT(0x69d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0378
        gbc.setState(0xaa8f, 0x9a5b, 0x15c0, 0xa421, 0x1b28, 0xdbfe, 0x1, 0x1);
        gbc.writeMem(0xaa8f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x9a5b, gbc.sp());
        EXPECT(0xaa91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa8f));
        EXPECT(0x80, gbc.readMem(0xaa90));
        // CB 80 0379
        gbc.setState(0x5d39, 0xc814, 0x6670, 0x3ba1, 0x7180, 0x2843, 0x0, 0x1);
        gbc.writeMem(0x5d39, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xc814, gbc.sp());
        EXPECT(0x5d3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 037A
        gbc.setState(0x68a, 0x6006, 0xa6d0, 0x8eff, 0x39ef, 0xb6be, 0x0, 0x0);
        gbc.writeMem(0x68a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x6006, gbc.sp());
        EXPECT(0x68c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 037B
        gbc.setState(0x54a8, 0x5fbd, 0x6420, 0x76b, 0x468a, 0x2777, 0x0, 0x0);
        gbc.writeMem(0x54a8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x5fbd, gbc.sp());
        EXPECT(0x54aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 037C
        gbc.setState(0x4d0b, 0x3446, 0x4f80, 0x3ed8, 0xa6aa, 0xb610, 0x1, 0x0);
        gbc.writeMem(0x4d0b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x3446, gbc.sp());
        EXPECT(0x4d0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 037D
        gbc.setState(0xdc67, 0x1abb, 0x9200, 0x4722, 0x38eb, 0xb2a0, 0x0, 0x0);
        gbc.writeMem(0xdc67, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x1abb, gbc.sp());
        EXPECT(0xdc69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc67));
        EXPECT(0x80, gbc.readMem(0xdc68));
        // CB 80 037E
        gbc.setState(0x3a13, 0xb67a, 0x8b50, 0xc3d7, 0xd50b, 0x17bb, 0x1, 0x0);
        gbc.writeMem(0x3a13, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xb67a, gbc.sp());
        EXPECT(0x3a15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 037F
        gbc.setState(0xb6ce, 0x36cd, 0x6040, 0x9423, 0x1775, 0x10f9, 0x1, 0x0);
        gbc.writeMem(0xb6ce, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x36cd, gbc.sp());
        EXPECT(0xb6d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6ce));
        EXPECT(0x80, gbc.readMem(0xb6cf));
        // CB 80 0380
        gbc.setState(0x5c0, 0xc28e, 0x6210, 0xc067, 0xf433, 0xed3, 0x0, 0x0);
        gbc.writeMem(0x5c0, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xc28e, gbc.sp());
        EXPECT(0x5c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0381
        gbc.setState(0x1c88, 0x2fea, 0x1bd0, 0xb819, 0x2ac4, 0xdcb9, 0x1, 0x1);
        gbc.writeMem(0x1c88, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x2fea, gbc.sp());
        EXPECT(0x1c8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0382
        gbc.setState(0xb14f, 0xd3d5, 0xc70, 0xc64c, 0xe391, 0xe462, 0x1, 0x0);
        gbc.writeMem(0xb14f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xd3d5, gbc.sp());
        EXPECT(0xb151, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb14f));
        EXPECT(0x80, gbc.readMem(0xb150));
        // CB 80 0383
        gbc.setState(0xc910, 0x2133, 0x63a0, 0xce22, 0x5b8c, 0x9ab2, 0x0, 0x1);
        gbc.writeMem(0xc910, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x2133, gbc.sp());
        EXPECT(0xc912, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc910));
        EXPECT(0x80, gbc.readMem(0xc911));
        // CB 80 0384
        gbc.setState(0xd746, 0xbe14, 0x36a0, 0xf059, 0x3d81, 0xc5fc, 0x1, 0x1);
        gbc.writeMem(0xd746, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xbe14, gbc.sp());
        EXPECT(0xd748, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd746));
        EXPECT(0x80, gbc.readMem(0xd747));
        // CB 80 0385
        gbc.setState(0x4993, 0x283a, 0xe90, 0x5570, 0xd2ba, 0xfc58, 0x0, 0x1);
        gbc.writeMem(0x4993, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x283a, gbc.sp());
        EXPECT(0x4995, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0387
        gbc.setState(0x4e33, 0x6aa, 0x77a0, 0x968e, 0xcac5, 0xfa10, 0x0, 0x0);
        gbc.writeMem(0x4e33, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x6aa, gbc.sp());
        EXPECT(0x4e35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0388
        gbc.setState(0x3d13, 0xd667, 0x61d0, 0x1714, 0xad30, 0x8c32, 0x1, 0x1);
        gbc.writeMem(0x3d13, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xd667, gbc.sp());
        EXPECT(0x3d15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0389
        gbc.setState(0xc6c, 0x35f6, 0x8120, 0xb002, 0x894, 0xa211, 0x1, 0x1);
        gbc.writeMem(0xc6c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x35f6, gbc.sp());
        EXPECT(0xc6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 038B
        gbc.setState(0x92ba, 0xbd5e, 0xe160, 0xb3b9, 0x37e6, 0xbe85, 0x1, 0x0);
        gbc.writeMem(0x92ba, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xbd5e, gbc.sp());
        EXPECT(0x92bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92ba));
        EXPECT(0x80, gbc.readMem(0x92bb));
        // CB 80 038C
        gbc.setState(0xa115, 0x6bcc, 0x64a0, 0xcfa8, 0x919e, 0xe00a, 0x0, 0x0);
        gbc.writeMem(0xa115, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x6bcc, gbc.sp());
        EXPECT(0xa117, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa115));
        EXPECT(0x80, gbc.readMem(0xa116));
        // CB 80 038D
        gbc.setState(0x280e, 0xac4b, 0xa200, 0x20f4, 0xdb0c, 0x76d6, 0x1, 0x1);
        gbc.writeMem(0x280e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xac4b, gbc.sp());
        EXPECT(0x2810, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 038E
        gbc.setState(0x463e, 0xf4d, 0xb680, 0x1ad8, 0x7358, 0xfa23, 0x0, 0x0);
        gbc.writeMem(0x463e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xf4d, gbc.sp());
        EXPECT(0x4640, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 038F
        gbc.setState(0x7382, 0x1c0f, 0xde50, 0x32bd, 0x5464, 0x9a48, 0x1, 0x0);
        gbc.writeMem(0x7382, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x1c0f, gbc.sp());
        EXPECT(0x7384, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0390
        gbc.setState(0x6e97, 0x55b3, 0x16d0, 0x19f8, 0xca94, 0x753a, 0x1, 0x0);
        gbc.writeMem(0x6e97, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x55b3, gbc.sp());
        EXPECT(0x6e99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0391
        gbc.setState(0x67a, 0x55f9, 0xe380, 0xc682, 0xb787, 0xd1d4, 0x0, 0x1);
        gbc.writeMem(0x67a, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x55f9, gbc.sp());
        EXPECT(0x67c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0392
        gbc.setState(0x8f52, 0x22e9, 0x8290, 0x6f9c, 0x3e4f, 0x1b2e, 0x0, 0x0);
        gbc.writeMem(0x8f52, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x22e9, gbc.sp());
        EXPECT(0x8f54, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f52));
        EXPECT(0x80, gbc.readMem(0x8f53));
        // CB 80 0393
        gbc.setState(0xa147, 0x476e, 0x91d0, 0x22af, 0xcbf, 0x1012, 0x1, 0x1);
        gbc.writeMem(0xa147, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x476e, gbc.sp());
        EXPECT(0xa149, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa147));
        EXPECT(0x80, gbc.readMem(0xa148));
        // CB 80 0394
        gbc.setState(0x212, 0xf499, 0x48c0, 0x770e, 0x3593, 0xc4bd, 0x1, 0x1);
        gbc.writeMem(0x212, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xf499, gbc.sp());
        EXPECT(0x214, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0395
        gbc.setState(0x19e7, 0x9fad, 0xe940, 0xef03, 0x1650, 0x54a, 0x0, 0x1);
        gbc.writeMem(0x19e7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x9fad, gbc.sp());
        EXPECT(0x19e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 0396
        gbc.setState(0xd397, 0xb6ee, 0xf430, 0x3d2d, 0x3f3, 0x5b60, 0x0, 0x1);
        gbc.writeMem(0xd397, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xb6ee, gbc.sp());
        EXPECT(0xd399, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd397));
        EXPECT(0x80, gbc.readMem(0xd398));
        // CB 80 0398
        gbc.setState(0x5fae, 0xcede, 0xf530, 0x53e9, 0x7341, 0x56d1, 0x1, 0x1);
        gbc.writeMem(0x5fae, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xcede, gbc.sp());
        EXPECT(0x5fb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 0399
        gbc.setState(0xb046, 0xb640, 0xa200, 0xc8fa, 0xe51e, 0x5c11, 0x1, 0x1);
        gbc.writeMem(0xb046, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xb640, gbc.sp());
        EXPECT(0xb048, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb046));
        EXPECT(0x80, gbc.readMem(0xb047));
        // CB 80 039A
        gbc.setState(0xa01c, 0x9f62, 0x7060, 0x9432, 0xb381, 0xe485, 0x0, 0x0);
        gbc.writeMem(0xa01c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x9f62, gbc.sp());
        EXPECT(0xa01e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa01c));
        EXPECT(0x80, gbc.readMem(0xa01d));
        // CB 80 039B
        gbc.setState(0x7ef8, 0x4dec, 0x3330, 0x3dad, 0x3240, 0x162b, 0x0, 0x1);
        gbc.writeMem(0x7ef8, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x4dec, gbc.sp());
        EXPECT(0x7efa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 039D
        gbc.setState(0x4015, 0xa3ca, 0xfe30, 0x45f, 0x8572, 0x6710, 0x0, 0x0);
        gbc.writeMem(0x4015, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xa3ca, gbc.sp());
        EXPECT(0x4017, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 039E
        gbc.setState(0x118, 0x4385, 0xd7e0, 0x56b9, 0xba7d, 0xddc6, 0x1, 0x1);
        gbc.writeMem(0x118, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x4385, gbc.sp());
        EXPECT(0x11a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 039F
        gbc.setState(0xb3f6, 0xb1d0, 0xf840, 0xb890, 0xc017, 0x4aa9, 0x1, 0x1);
        gbc.writeMem(0xb3f6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xb1d0, gbc.sp());
        EXPECT(0xb3f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3f6));
        EXPECT(0x80, gbc.readMem(0xb3f7));
        // CB 80 03A0
        gbc.setState(0xc4aa, 0x8d93, 0x7590, 0x742a, 0x2a8c, 0x88bc, 0x1, 0x1);
        gbc.writeMem(0xc4aa, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x8d93, gbc.sp());
        EXPECT(0xc4ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4aa));
        EXPECT(0x80, gbc.readMem(0xc4ab));
        // CB 80 03A1
        gbc.setState(0x2fa5, 0x214c, 0x4f30, 0x4499, 0x428, 0xd63c, 0x0, 0x1);
        gbc.writeMem(0x2fa5, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x214c, gbc.sp());
        EXPECT(0x2fa7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03A2
        gbc.setState(0x1192, 0xe0c2, 0x1520, 0x3476, 0x5f98, 0x7414, 0x1, 0x1);
        gbc.writeMem(0x1192, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xe0c2, gbc.sp());
        EXPECT(0x1194, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03A3
        gbc.setState(0xbfe6, 0xb0ee, 0xb570, 0x1a05, 0x844f, 0x46c6, 0x1, 0x0);
        gbc.writeMem(0xbfe6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xb0ee, gbc.sp());
        EXPECT(0xbfe8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfe6));
        EXPECT(0x80, gbc.readMem(0xbfe7));
        // CB 80 03A5
        gbc.setState(0x7418, 0xcc82, 0xe880, 0x725f, 0x2423, 0xf8a0, 0x0, 0x0);
        gbc.writeMem(0x7418, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xcc82, gbc.sp());
        EXPECT(0x741a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03A6
        gbc.setState(0x2f75, 0x605c, 0x50a0, 0xd4ea, 0xff0e, 0xd9b4, 0x1, 0x0);
        gbc.writeMem(0x2f75, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x605c, gbc.sp());
        EXPECT(0x2f77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03A7
        gbc.setState(0x9286, 0x7193, 0x4340, 0xf7d6, 0x712c, 0xef3, 0x1, 0x1);
        gbc.writeMem(0x9286, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x7193, gbc.sp());
        EXPECT(0x9288, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9286));
        EXPECT(0x80, gbc.readMem(0x9287));
        // CB 80 03A8
        gbc.setState(0x7248, 0x43d5, 0x4d00, 0xff48, 0xa241, 0xb662, 0x1, 0x0);
        gbc.writeMem(0x7248, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x43d5, gbc.sp());
        EXPECT(0x724a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03A9
        gbc.setState(0x1fa4, 0x752a, 0xf3a0, 0x136b, 0xcd9d, 0xa57b, 0x0, 0x0);
        gbc.writeMem(0x1fa4, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x752a, gbc.sp());
        EXPECT(0x1fa6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03AA
        gbc.setState(0x4460, 0xf5d0, 0xad50, 0xc7f3, 0x2da, 0x86d1, 0x1, 0x1);
        gbc.writeMem(0x4460, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xf5d0, gbc.sp());
        EXPECT(0x4462, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03AB
        gbc.setState(0xd035, 0xf272, 0x290, 0x8972, 0x81fe, 0xac47, 0x1, 0x1);
        gbc.writeMem(0xd035, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xf272, gbc.sp());
        EXPECT(0xd037, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd035));
        EXPECT(0x80, gbc.readMem(0xd036));
        // CB 80 03AC
        gbc.setState(0x671f, 0xb546, 0x8770, 0xb71, 0x4ec6, 0x8fec, 0x0, 0x1);
        gbc.writeMem(0x671f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xb546, gbc.sp());
        EXPECT(0x6721, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03AD
        gbc.setState(0xe242, 0x8b9f, 0x9bb0, 0x907b, 0x6abf, 0x658, 0x0, 0x1);
        gbc.writeMem(0xe242, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x8b9f, gbc.sp());
        EXPECT(0xe244, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe242));
        EXPECT(0x80, gbc.readMem(0xe243));
        // CB 80 03AE
        gbc.setState(0xdae7, 0xe991, 0xe3f0, 0xf765, 0xffd6, 0xc72d, 0x1, 0x0);
        gbc.writeMem(0xdae7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xe991, gbc.sp());
        EXPECT(0xdae9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdae7));
        EXPECT(0x80, gbc.readMem(0xdae8));
        // CB 80 03AF
        gbc.setState(0x9931, 0xcd78, 0x8fa0, 0x140, 0xea19, 0x9583, 0x0, 0x0);
        gbc.writeMem(0x9931, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xcd78, gbc.sp());
        EXPECT(0x9933, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9931));
        EXPECT(0x80, gbc.readMem(0x9932));
        // CB 80 03B0
        gbc.setState(0x9643, 0x7259, 0xb060, 0xac36, 0xf4d9, 0xf03, 0x1, 0x0);
        gbc.writeMem(0x9643, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x7259, gbc.sp());
        EXPECT(0x9645, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9643));
        EXPECT(0x80, gbc.readMem(0x9644));
        // CB 80 03B1
        gbc.setState(0xa1ae, 0x8477, 0xc930, 0x3a78, 0x70b0, 0x2a10, 0x1, 0x0);
        gbc.writeMem(0xa1ae, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x8477, gbc.sp());
        EXPECT(0xa1b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1ae));
        EXPECT(0x80, gbc.readMem(0xa1af));
        // CB 80 03B2
        gbc.setState(0xd6fb, 0x5c92, 0x7ca0, 0x1242, 0x32d3, 0x562d, 0x0, 0x0);
        gbc.writeMem(0xd6fb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x5c92, gbc.sp());
        EXPECT(0xd6fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6fb));
        EXPECT(0x80, gbc.readMem(0xd6fc));
        // CB 80 03B3
        gbc.setState(0x2d10, 0x178c, 0x14a0, 0x75ec, 0x828b, 0xbe26, 0x1, 0x0);
        gbc.writeMem(0x2d10, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x178c, gbc.sp());
        EXPECT(0x2d12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03B4
        gbc.setState(0xab77, 0xfc70, 0x6eb0, 0xa621, 0x1bfe, 0x9292, 0x0, 0x1);
        gbc.writeMem(0xab77, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xfc70, gbc.sp());
        EXPECT(0xab79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab77));
        EXPECT(0x80, gbc.readMem(0xab78));
        // CB 80 03B5
        gbc.setState(0x2f88, 0x1327, 0x5eb0, 0x4a1b, 0x6611, 0xc0ee, 0x0, 0x1);
        gbc.writeMem(0x2f88, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x1327, gbc.sp());
        EXPECT(0x2f8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03B6
        gbc.setState(0xd505, 0xffb4, 0x3420, 0x73b7, 0x2535, 0x506c, 0x1, 0x1);
        gbc.writeMem(0xd505, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xffb4, gbc.sp());
        EXPECT(0xd507, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd505));
        EXPECT(0x80, gbc.readMem(0xd506));
        // CB 80 03B7
        gbc.setState(0x1e49, 0x5ea4, 0x37b0, 0xeb33, 0xa3a2, 0x459e, 0x1, 0x1);
        gbc.writeMem(0x1e49, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x5ea4, gbc.sp());
        EXPECT(0x1e4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03B8
        gbc.setState(0x8a21, 0xb74, 0xbd90, 0xd83f, 0x28ba, 0x4ee6, 0x0, 0x0);
        gbc.writeMem(0x8a21, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xb74, gbc.sp());
        EXPECT(0x8a23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a21));
        EXPECT(0x80, gbc.readMem(0x8a22));
        // CB 80 03B9
        gbc.setState(0x7d02, 0xa0fe, 0x91a0, 0x9b0c, 0x23d5, 0x5443, 0x1, 0x0);
        gbc.writeMem(0x7d02, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xa0fe, gbc.sp());
        EXPECT(0x7d04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03BA
        gbc.setState(0x5ded, 0x3826, 0x3990, 0x2c9d, 0x7d75, 0x7fce, 0x0, 0x1);
        gbc.writeMem(0x5ded, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x3826, gbc.sp());
        EXPECT(0x5def, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03BC
        gbc.setState(0x8ca7, 0x81f5, 0x94b0, 0xd660, 0xa74e, 0x7351, 0x0, 0x1);
        gbc.writeMem(0x8ca7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x81f5, gbc.sp());
        EXPECT(0x8ca9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ca7));
        EXPECT(0x80, gbc.readMem(0x8ca8));
        // CB 80 03BD
        gbc.setState(0x4780, 0x45bb, 0x3140, 0xaa77, 0xeef, 0x328d, 0x0, 0x1);
        gbc.writeMem(0x4780, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x45bb, gbc.sp());
        EXPECT(0x4782, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03BE
        gbc.setState(0xaf04, 0x34c1, 0x3260, 0xaedb, 0xfd41, 0x22c4, 0x1, 0x1);
        gbc.writeMem(0xaf04, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x34c1, gbc.sp());
        EXPECT(0xaf06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf04));
        EXPECT(0x80, gbc.readMem(0xaf05));
        // CB 80 03C0
        gbc.setState(0x8915, 0xa8ba, 0xc6a0, 0xfb52, 0x1159, 0x1d70, 0x0, 0x0);
        gbc.writeMem(0x8915, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xa8ba, gbc.sp());
        EXPECT(0x8917, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8915));
        EXPECT(0x80, gbc.readMem(0x8916));
        // CB 80 03C1
        gbc.setState(0xabfd, 0xf624, 0xe80, 0x220f, 0x7005, 0x7fe5, 0x1, 0x1);
        gbc.writeMem(0xabfd, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xf624, gbc.sp());
        EXPECT(0xabff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabfd));
        EXPECT(0x80, gbc.readMem(0xabfe));
        // CB 80 03C2
        gbc.setState(0xbd6c, 0x1ae1, 0x1950, 0x68f5, 0x86c7, 0x10e3, 0x0, 0x0);
        gbc.writeMem(0xbd6c, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x1ae1, gbc.sp());
        EXPECT(0xbd6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd6c));
        EXPECT(0x80, gbc.readMem(0xbd6d));
        // CB 80 03C3
        gbc.setState(0x2811, 0x1b41, 0xfcf0, 0x77cf, 0xca3, 0x605b, 0x0, 0x1);
        gbc.writeMem(0x2811, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x1b41, gbc.sp());
        EXPECT(0x2813, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03C4
        gbc.setState(0x1293, 0x630d, 0xf660, 0x59e, 0x5661, 0x8db5, 0x1, 0x0);
        gbc.writeMem(0x1293, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x630d, gbc.sp());
        EXPECT(0x1295, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03C5
        gbc.setState(0xb199, 0xd1e1, 0xc490, 0x7b65, 0x6c1a, 0x67a5, 0x0, 0x0);
        gbc.writeMem(0xb199, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xd1e1, gbc.sp());
        EXPECT(0xb19b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb199));
        EXPECT(0x80, gbc.readMem(0xb19a));
        // CB 80 03C6
        gbc.setState(0x7775, 0x137c, 0x830, 0xaae6, 0x1a99, 0xf7c7, 0x0, 0x1);
        gbc.writeMem(0x7775, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x137c, gbc.sp());
        EXPECT(0x7777, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03C7
        gbc.setState(0x2a7b, 0x911e, 0x7de0, 0x4dfd, 0x9ba3, 0xaba1, 0x1, 0x1);
        gbc.writeMem(0x2a7b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x911e, gbc.sp());
        EXPECT(0x2a7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03C8
        gbc.setState(0x5e9e, 0xfdaf, 0xb310, 0xbbfb, 0xc632, 0x781f, 0x1, 0x0);
        gbc.writeMem(0x5e9e, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xfdaf, gbc.sp());
        EXPECT(0x5ea0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03C9
        gbc.setState(0x15f, 0xea4b, 0x3fb0, 0x2bbe, 0x1510, 0xfc11, 0x0, 0x0);
        gbc.writeMem(0x15f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xea4b, gbc.sp());
        EXPECT(0x161, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03CA
        gbc.setState(0x8ece, 0xa599, 0x870, 0xd4f5, 0xd59f, 0xf13f, 0x0, 0x1);
        gbc.writeMem(0x8ece, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xa599, gbc.sp());
        EXPECT(0x8ed0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ece));
        EXPECT(0x80, gbc.readMem(0x8ecf));
        // CB 80 03CC
        gbc.setState(0x2d63, 0xc517, 0x59a0, 0x9806, 0xf762, 0xc102, 0x1, 0x0);
        gbc.writeMem(0x2d63, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xc517, gbc.sp());
        EXPECT(0x2d65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03CD
        gbc.setState(0x6e9d, 0xecfc, 0x5df0, 0x40aa, 0x8edb, 0x4f99, 0x1, 0x0);
        gbc.writeMem(0x6e9d, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xecfc, gbc.sp());
        EXPECT(0x6e9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03CE
        gbc.setState(0xba21, 0x4cb7, 0x2880, 0xd4a7, 0x7701, 0xe40c, 0x1, 0x1);
        gbc.writeMem(0xba21, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x4cb7, gbc.sp());
        EXPECT(0xba23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba21));
        EXPECT(0x80, gbc.readMem(0xba22));
        // CB 80 03CF
        gbc.setState(0x4344, 0x6073, 0xa5a0, 0x9d32, 0x336b, 0x889f, 0x0, 0x0);
        gbc.writeMem(0x4344, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x6073, gbc.sp());
        EXPECT(0x4346, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03D0
        gbc.setState(0x4b64, 0x4cb8, 0x7660, 0xde0f, 0xa288, 0xa68a, 0x0, 0x1);
        gbc.writeMem(0x4b64, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x4cb8, gbc.sp());
        EXPECT(0x4b66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03D1
        gbc.setState(0x7bcf, 0xf2a, 0xd5b0, 0x6c32, 0x7eec, 0x33fe, 0x1, 0x1);
        gbc.writeMem(0x7bcf, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xf2a, gbc.sp());
        EXPECT(0x7bd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03D2
        gbc.setState(0x2841, 0x5fa1, 0xb760, 0x825c, 0xd012, 0x1fc3, 0x1, 0x1);
        gbc.writeMem(0x2841, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x5fa1, gbc.sp());
        EXPECT(0x2843, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03D3
        gbc.setState(0x5d17, 0xac2e, 0xde30, 0x6154, 0x5afc, 0xb6ae, 0x1, 0x1);
        gbc.writeMem(0x5d17, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xac2e, gbc.sp());
        EXPECT(0x5d19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03D4
        gbc.setState(0xc075, 0x8153, 0x6ad0, 0xefc4, 0x6a06, 0x7d95, 0x1, 0x1);
        gbc.writeMem(0xc075, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x8153, gbc.sp());
        EXPECT(0xc077, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc075));
        EXPECT(0x80, gbc.readMem(0xc076));
        // CB 80 03D5
        gbc.setState(0xb414, 0xe84, 0x3670, 0xc8bb, 0xa5ab, 0x5cc3, 0x0, 0x1);
        gbc.writeMem(0xb414, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xe84, gbc.sp());
        EXPECT(0xb416, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb414));
        EXPECT(0x80, gbc.readMem(0xb415));
        // CB 80 03D6
        gbc.setState(0x7328, 0x41dd, 0xfab0, 0x5231, 0xc434, 0xed2d, 0x0, 0x0);
        gbc.writeMem(0x7328, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x41dd, gbc.sp());
        EXPECT(0x732a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03D7
        gbc.setState(0x18d2, 0x1472, 0xdd60, 0xd5fb, 0x34f9, 0x962d, 0x0, 0x0);
        gbc.writeMem(0x18d2, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x1472, gbc.sp());
        EXPECT(0x18d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03D8
        gbc.setState(0x2159, 0xc2c8, 0xe330, 0xce47, 0x3d88, 0x6bb7, 0x0, 0x0);
        gbc.writeMem(0x2159, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xc2c8, gbc.sp());
        EXPECT(0x215b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03D9
        gbc.setState(0x3765, 0x2adc, 0x30a0, 0x6ce5, 0x4143, 0x1492, 0x1, 0x1);
        gbc.writeMem(0x3765, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x2adc, gbc.sp());
        EXPECT(0x3767, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03DA
        gbc.setState(0x800b, 0x6e6a, 0x9fb0, 0x7ea6, 0x2008, 0xc973, 0x1, 0x0);
        gbc.writeMem(0x800b, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x6e6a, gbc.sp());
        EXPECT(0x800d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x800b));
        EXPECT(0x80, gbc.readMem(0x800c));
        // CB 80 03DB
        gbc.setState(0x84df, 0x56a5, 0xbe30, 0xd44c, 0x682c, 0x3a07, 0x0, 0x1);
        gbc.writeMem(0x84df, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x56a5, gbc.sp());
        EXPECT(0x84e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84df));
        EXPECT(0x80, gbc.readMem(0x84e0));
        // CB 80 03DC
        gbc.setState(0x808f, 0xa0fd, 0xa0b0, 0x56c9, 0x6936, 0x6571, 0x1, 0x1);
        gbc.writeMem(0x808f, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xa0fd, gbc.sp());
        EXPECT(0x8091, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x808f));
        EXPECT(0x80, gbc.readMem(0x8090));
        // CB 80 03DD
        gbc.setState(0x5ffb, 0x1715, 0xc670, 0xa45, 0x2c58, 0x7c5, 0x0, 0x0);
        gbc.writeMem(0x5ffb, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x1715, gbc.sp());
        EXPECT(0x5ffd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03DE
        gbc.setState(0xcc58, 0xb506, 0x3e50, 0x8d20, 0x42b5, 0x4bda, 0x0, 0x1);
        gbc.writeMem(0xcc58, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xb506, gbc.sp());
        EXPECT(0xcc5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc58));
        EXPECT(0x80, gbc.readMem(0xcc59));
        // CB 80 03DF
        gbc.setState(0x66c1, 0x6827, 0x3ab0, 0xc7a1, 0xb5bf, 0x8f32, 0x1, 0x1);
        gbc.writeMem(0x66c1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x6827, gbc.sp());
        EXPECT(0x66c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03E0
        gbc.setState(0x2df1, 0x4bf9, 0x2090, 0x9df7, 0x18f6, 0x5df0, 0x1, 0x1);
        gbc.writeMem(0x2df1, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x4bf9, gbc.sp());
        EXPECT(0x2df3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03E2
        gbc.setState(0xbb3, 0x8ade, 0xbfc0, 0xad95, 0x4f77, 0x1ada, 0x1, 0x0);
        gbc.writeMem(0xbb3, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x8ade, gbc.sp());
        EXPECT(0xbb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03E3
        gbc.setState(0xb2b7, 0x21cc, 0x50f0, 0xd811, 0x3bad, 0x1b9f, 0x1, 0x1);
        gbc.writeMem(0xb2b7, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x21cc, gbc.sp());
        EXPECT(0xb2b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2b7));
        EXPECT(0x80, gbc.readMem(0xb2b8));
        // CB 80 03E4
        gbc.setState(0x7770, 0x8d5d, 0x2e10, 0x4154, 0x4162, 0xd853, 0x1, 0x1);
        gbc.writeMem(0x7770, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x8d5d, gbc.sp());
        EXPECT(0x7772, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 80 03E5
        gbc.setState(0x1711, 0xb541, 0x4780, 0xcf2a, 0x18bb, 0xb27f, 0x1, 0x1);
        gbc.writeMem(0x1711, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xb541, gbc.sp());
        EXPECT(0x1713, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 80 03E7
        gbc.setState(0xaed6, 0x76be, 0xb6c0, 0x7d12, 0x93d0, 0xc823, 0x1, 0x0);
        gbc.writeMem(0xaed6, { 0xcb, 0x80 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x76be, gbc.sp());
        EXPECT(0xaed8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaed6));
        EXPECT(0x80, gbc.readMem(0xaed7));
    }
