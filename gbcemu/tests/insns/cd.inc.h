    TEST(gbcemu, opcode_cd) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CD 0001
        gbc.setState(0x56b0, 0x915c, 0xeae0, 0x53d3, 0x1399, 0xf59, 0x1, 0x1);
        gbc.writeMem(0x56b0, { 0xcd, 0x2, 0xa4 });
        gbc.writeMem(0x915a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x915a, gbc.sp());
        EXPECT(0xa402, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb3, gbc.readMem(0x915a));
        EXPECT(0x56, gbc.readMem(0x915b));
        // CD 0002
        gbc.setState(0xb0f8, 0x818e, 0x1a10, 0x396c, 0x4b56, 0xc284, 0x1, 0x0);
        gbc.writeMem(0x818c, { 0x0, 0x0 });
        gbc.writeMem(0xb0f8, { 0xcd, 0x21, 0xdd });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x818c, gbc.sp());
        EXPECT(0xdd21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfb, gbc.readMem(0x818c));
        EXPECT(0xb0, gbc.readMem(0x818d));
        EXPECT(0xcd, gbc.readMem(0xb0f8));
        EXPECT(0x21, gbc.readMem(0xb0f9));
        EXPECT(0xdd, gbc.readMem(0xb0fa));
        // CD 0003
        gbc.setState(0xd761, 0xfc09, 0x48e0, 0x6444, 0xac8e, 0xe9c4, 0x0, 0x0);
        gbc.writeMem(0xd761, { 0xcd, 0x1a, 0x30 });
        gbc.writeMem(0xfc07, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xfc07, gbc.sp());
        EXPECT(0x301a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xd761));
        EXPECT(0x1a, gbc.readMem(0xd762));
        EXPECT(0x30, gbc.readMem(0xd763));
        EXPECT(0x64, gbc.readMem(0xfc07));
        EXPECT(0xd7, gbc.readMem(0xfc08));
        // CD 0006
        gbc.setState(0x1a0e, 0x857c, 0xe900, 0x18f3, 0x133a, 0x523c, 0x1, 0x1);
        gbc.writeMem(0x1a0e, { 0xcd, 0x39, 0x29 });
        gbc.writeMem(0x857a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x857a, gbc.sp());
        EXPECT(0x2939, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x11, gbc.readMem(0x857a));
        EXPECT(0x1a, gbc.readMem(0x857b));
        // CD 0008
        gbc.setState(0xb079, 0xc4d9, 0xe670, 0x232f, 0xcd81, 0x9f75, 0x0, 0x1);
        gbc.writeMem(0xb079, { 0xcd, 0x28, 0x84 });
        gbc.writeMem(0xc4d7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xc4d7, gbc.sp());
        EXPECT(0x8428, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb079));
        EXPECT(0x28, gbc.readMem(0xb07a));
        EXPECT(0x84, gbc.readMem(0xb07b));
        EXPECT(0x7c, gbc.readMem(0xc4d7));
        EXPECT(0xb0, gbc.readMem(0xc4d8));
        // CD 0009
        gbc.setState(0x2674, 0xf403, 0xa590, 0xf4fa, 0x51d9, 0xfa09, 0x1, 0x1);
        gbc.writeMem(0x2674, { 0xcd, 0xfe, 0x47 });
        gbc.writeMem(0xf401, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xf401, gbc.sp());
        EXPECT(0x47fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x77, gbc.readMem(0xf401));
        EXPECT(0x26, gbc.readMem(0xf402));
        // CD 000A
        gbc.setState(0xa5c5, 0xec00, 0x6400, 0x3d2f, 0x2a4d, 0x3f93, 0x1, 0x1);
        gbc.writeMem(0xa5c5, { 0xcd, 0xd8, 0xda });
        gbc.writeMem(0xebfe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xebfe, gbc.sp());
        EXPECT(0xdad8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa5c5));
        EXPECT(0xd8, gbc.readMem(0xa5c6));
        EXPECT(0xda, gbc.readMem(0xa5c7));
        EXPECT(0xc8, gbc.readMem(0xebfe));
        EXPECT(0xa5, gbc.readMem(0xebff));
        // CD 000B
        gbc.setState(0x3d10, 0xf292, 0x4b70, 0x33df, 0xfa5e, 0x16e3, 0x0, 0x1);
        gbc.writeMem(0x3d10, { 0xcd, 0xd, 0xc1 });
        gbc.writeMem(0xf290, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xf290, gbc.sp());
        EXPECT(0xc10d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x13, gbc.readMem(0xf290));
        EXPECT(0x3d, gbc.readMem(0xf291));
        // CD 000C
        gbc.setState(0x7f35, 0x8e38, 0xc710, 0x6a21, 0x81a1, 0x19ec, 0x0, 0x0);
        gbc.writeMem(0x7f35, { 0xcd, 0x1f, 0x68 });
        gbc.writeMem(0x8e36, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x8e36, gbc.sp());
        EXPECT(0x681f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0x8e36));
        EXPECT(0x7f, gbc.readMem(0x8e37));
        // CD 000D
        gbc.setState(0x8280, 0xdc4b, 0x6b40, 0x3744, 0xb59e, 0x31a5, 0x1, 0x0);
        gbc.writeMem(0x8280, { 0xcd, 0xb8, 0xa2 });
        gbc.writeMem(0xdc49, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xdc49, gbc.sp());
        EXPECT(0xa2b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8280));
        EXPECT(0xb8, gbc.readMem(0x8281));
        EXPECT(0xa2, gbc.readMem(0x8282));
        EXPECT(0x83, gbc.readMem(0xdc49));
        EXPECT(0x82, gbc.readMem(0xdc4a));
        // CD 0012
        gbc.setState(0x48e6, 0x88a0, 0x2ae0, 0x66d9, 0x1cae, 0x2f0a, 0x0, 0x1);
        gbc.writeMem(0x48e6, { 0xcd, 0xac, 0x76 });
        gbc.writeMem(0x889e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x889e, gbc.sp());
        EXPECT(0x76ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe9, gbc.readMem(0x889e));
        EXPECT(0x48, gbc.readMem(0x889f));
        // CD 0013
        gbc.setState(0x8dc5, 0xe674, 0x2ed0, 0xa083, 0x53c8, 0x847e, 0x1, 0x1);
        gbc.writeMem(0x8dc5, { 0xcd, 0xa1, 0x75 });
        gbc.writeMem(0xe672, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xe672, gbc.sp());
        EXPECT(0x75a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8dc5));
        EXPECT(0xa1, gbc.readMem(0x8dc6));
        EXPECT(0x75, gbc.readMem(0x8dc7));
        EXPECT(0xc8, gbc.readMem(0xe672));
        EXPECT(0x8d, gbc.readMem(0xe673));
        // CD 0015
        gbc.setState(0x5c72, 0xd280, 0x9dc0, 0x1930, 0x5cdd, 0xdac6, 0x0, 0x0);
        gbc.writeMem(0x5c72, { 0xcd, 0xd5, 0x92 });
        gbc.writeMem(0xd27e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xd27e, gbc.sp());
        EXPECT(0x92d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x75, gbc.readMem(0xd27e));
        EXPECT(0x5c, gbc.readMem(0xd27f));
        // CD 0019
        gbc.setState(0x8ab1, 0xbcc6, 0xfe10, 0xf38, 0x601c, 0x60d7, 0x0, 0x1);
        gbc.writeMem(0x8ab1, { 0xcd, 0x9c, 0x28 });
        gbc.writeMem(0xbcc4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xbcc4, gbc.sp());
        EXPECT(0x289c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8ab1));
        EXPECT(0x9c, gbc.readMem(0x8ab2));
        EXPECT(0x28, gbc.readMem(0x8ab3));
        EXPECT(0xb4, gbc.readMem(0xbcc4));
        EXPECT(0x8a, gbc.readMem(0xbcc5));
        // CD 001A
        gbc.setState(0xc120, 0x9d79, 0xfe40, 0x7eea, 0xf14a, 0x8f80, 0x1, 0x1);
        gbc.writeMem(0x9d77, { 0x0, 0x0 });
        gbc.writeMem(0xc120, { 0xcd, 0xb5, 0xcc });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x9d77, gbc.sp());
        EXPECT(0xccb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0x9d77));
        EXPECT(0xc1, gbc.readMem(0x9d78));
        EXPECT(0xcd, gbc.readMem(0xc120));
        EXPECT(0xb5, gbc.readMem(0xc121));
        EXPECT(0xcc, gbc.readMem(0xc122));
        // CD 001C
        gbc.setState(0x425f, 0xbb22, 0x240, 0x939c, 0x7bc8, 0xe98, 0x1, 0x1);
        gbc.writeMem(0x425f, { 0xcd, 0xe, 0xe3 });
        gbc.writeMem(0xbb20, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xbb20, gbc.sp());
        EXPECT(0xe30e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0xbb20));
        EXPECT(0x42, gbc.readMem(0xbb21));
        // CD 001D
        gbc.setState(0xc425, 0xc085, 0x4160, 0xb96f, 0xc5bc, 0x498c, 0x0, 0x0);
        gbc.writeMem(0xc083, { 0x0, 0x0 });
        gbc.writeMem(0xc425, { 0xcd, 0x3, 0xf1 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xc083, gbc.sp());
        EXPECT(0xf103, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0xc083));
        EXPECT(0xc4, gbc.readMem(0xc084));
        EXPECT(0xcd, gbc.readMem(0xc425));
        EXPECT(0x3, gbc.readMem(0xc426));
        EXPECT(0xf1, gbc.readMem(0xc427));
        // CD 001E
        gbc.setState(0x4bfd, 0xbfb4, 0x1e60, 0xd94b, 0x666a, 0xbb84, 0x0, 0x0);
        gbc.writeMem(0x4bfd, { 0xcd, 0x28, 0xf0 });
        gbc.writeMem(0xbfb2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xbfb2, gbc.sp());
        EXPECT(0xf028, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x0, gbc.readMem(0xbfb2));
        EXPECT(0x4c, gbc.readMem(0xbfb3));
        // CD 001F
        gbc.setState(0x61c, 0xe4c4, 0x5490, 0xb395, 0x3c21, 0xe4c, 0x1, 0x0);
        gbc.writeMem(0x61c, { 0xcd, 0xe1, 0xe9 });
        gbc.writeMem(0xe4c2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xe4c2, gbc.sp());
        EXPECT(0xe9e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1f, gbc.readMem(0xe4c2));
        EXPECT(0x6, gbc.readMem(0xe4c3));
        // CD 0022
        gbc.setState(0xc013, 0x8d19, 0x1100, 0xef09, 0xae6f, 0x4e06, 0x0, 0x1);
        gbc.writeMem(0x8d17, { 0x0, 0x0 });
        gbc.writeMem(0xc013, { 0xcd, 0xa0, 0xc3 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x8d17, gbc.sp());
        EXPECT(0xc3a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x16, gbc.readMem(0x8d17));
        EXPECT(0xc0, gbc.readMem(0x8d18));
        EXPECT(0xcd, gbc.readMem(0xc013));
        EXPECT(0xa0, gbc.readMem(0xc014));
        EXPECT(0xc3, gbc.readMem(0xc015));
        // CD 0024
        gbc.setState(0x541, 0xcb3c, 0x6210, 0x864d, 0x3f7d, 0xea5a, 0x0, 0x0);
        gbc.writeMem(0x541, { 0xcd, 0x40, 0x45 });
        gbc.writeMem(0xcb3a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xcb3a, gbc.sp());
        EXPECT(0x4540, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x44, gbc.readMem(0xcb3a));
        EXPECT(0x5, gbc.readMem(0xcb3b));
        // CD 0026
        gbc.setState(0x3a6f, 0xb587, 0xaca0, 0xd73d, 0xc80e, 0x6025, 0x1, 0x0);
        gbc.writeMem(0x3a6f, { 0xcd, 0x8f, 0xb });
        gbc.writeMem(0xb585, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xb585, gbc.sp());
        EXPECT(0xb8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x72, gbc.readMem(0xb585));
        EXPECT(0x3a, gbc.readMem(0xb586));
        // CD 0028
        gbc.setState(0xddce, 0xc398, 0xe160, 0x3b60, 0x5ed6, 0x11d1, 0x0, 0x0);
        gbc.writeMem(0xc396, { 0x0, 0x0 });
        gbc.writeMem(0xddce, { 0xcd, 0x6c, 0xee });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xc396, gbc.sp());
        EXPECT(0xee6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd1, gbc.readMem(0xc396));
        EXPECT(0xdd, gbc.readMem(0xc397));
        EXPECT(0xcd, gbc.readMem(0xddce));
        EXPECT(0x6c, gbc.readMem(0xddcf));
        EXPECT(0xee, gbc.readMem(0xddd0));
        // CD 002A
        gbc.setState(0xb2b0, 0x83a3, 0x3400, 0x7cf7, 0xfa1a, 0x17ac, 0x0, 0x1);
        gbc.writeMem(0x83a1, { 0x0, 0x0 });
        gbc.writeMem(0xb2b0, { 0xcd, 0xc7, 0x43 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x83a1, gbc.sp());
        EXPECT(0x43c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb3, gbc.readMem(0x83a1));
        EXPECT(0xb2, gbc.readMem(0x83a2));
        EXPECT(0xcd, gbc.readMem(0xb2b0));
        EXPECT(0xc7, gbc.readMem(0xb2b1));
        EXPECT(0x43, gbc.readMem(0xb2b2));
        // CD 002B
        gbc.setState(0x802a, 0xc2b9, 0x8f00, 0x70fa, 0xc0b9, 0xbaa5, 0x1, 0x0);
        gbc.writeMem(0x802a, { 0xcd, 0xdd, 0xb3 });
        gbc.writeMem(0xc2b7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xc2b7, gbc.sp());
        EXPECT(0xb3dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x802a));
        EXPECT(0xdd, gbc.readMem(0x802b));
        EXPECT(0xb3, gbc.readMem(0x802c));
        EXPECT(0x2d, gbc.readMem(0xc2b7));
        EXPECT(0x80, gbc.readMem(0xc2b8));
        // CD 002D
        gbc.setState(0x2fe5, 0xf024, 0xb150, 0xb080, 0x3815, 0xa33, 0x0, 0x1);
        gbc.writeMem(0x2fe5, { 0xcd, 0xf1, 0x85 });
        gbc.writeMem(0xf022, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xf022, gbc.sp());
        EXPECT(0x85f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe8, gbc.readMem(0xf022));
        EXPECT(0x2f, gbc.readMem(0xf023));
        // CD 002E
        gbc.setState(0x7087, 0xc0e3, 0x6e20, 0x7f8, 0x65e2, 0x8c83, 0x1, 0x1);
        gbc.writeMem(0x7087, { 0xcd, 0x34, 0x5a });
        gbc.writeMem(0xc0e1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xc0e1, gbc.sp());
        EXPECT(0x5a34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8a, gbc.readMem(0xc0e1));
        EXPECT(0x70, gbc.readMem(0xc0e2));
        // CD 0030
        gbc.setState(0xde34, 0xcf21, 0xb170, 0x1e59, 0xcb15, 0x850e, 0x0, 0x0);
        gbc.writeMem(0xcf1f, { 0x0, 0x0 });
        gbc.writeMem(0xde34, { 0xcd, 0x83, 0x22 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xcf1f, gbc.sp());
        EXPECT(0x2283, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x37, gbc.readMem(0xcf1f));
        EXPECT(0xde, gbc.readMem(0xcf20));
        EXPECT(0xcd, gbc.readMem(0xde34));
        EXPECT(0x83, gbc.readMem(0xde35));
        EXPECT(0x22, gbc.readMem(0xde36));
        // CD 0032
        gbc.setState(0x32af, 0xbce6, 0x96a0, 0x74b, 0xb376, 0x4496, 0x0, 0x1);
        gbc.writeMem(0x32af, { 0xcd, 0xf1, 0x3d });
        gbc.writeMem(0xbce4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xbce4, gbc.sp());
        EXPECT(0x3df1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb2, gbc.readMem(0xbce4));
        EXPECT(0x32, gbc.readMem(0xbce5));
        // CD 0033
        gbc.setState(0x664a, 0x9961, 0xe4a0, 0xb819, 0xe85, 0x44b6, 0x1, 0x1);
        gbc.writeMem(0x664a, { 0xcd, 0xc9, 0x8c });
        gbc.writeMem(0x995f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x995f, gbc.sp());
        EXPECT(0x8cc9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4d, gbc.readMem(0x995f));
        EXPECT(0x66, gbc.readMem(0x9960));
        // CD 0036
        gbc.setState(0x82e4, 0x9572, 0x9140, 0xb62b, 0x34ce, 0x5b8, 0x1, 0x1);
        gbc.writeMem(0x82e4, { 0xcd, 0x0, 0xdd });
        gbc.writeMem(0x9570, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x9570, gbc.sp());
        EXPECT(0xdd00, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x82e4));
        EXPECT(0x0, gbc.readMem(0x82e5));
        EXPECT(0xdd, gbc.readMem(0x82e6));
        EXPECT(0xe7, gbc.readMem(0x9570));
        EXPECT(0x82, gbc.readMem(0x9571));
        // CD 0038
        gbc.setState(0x1bd7, 0xff2b, 0xb8e0, 0xee5f, 0x1982, 0xc9ce, 0x1, 0x0);
        gbc.writeMem(0x1bd7, { 0xcd, 0x82, 0x7a });
        gbc.writeMem(0xff29, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xff29, gbc.sp());
        EXPECT(0x7a82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xda, gbc.readMem(0xff29));
        EXPECT(0x1b, gbc.readMem(0xff2a));
        // CD 0039
        gbc.setState(0x7d2, 0x821c, 0x1210, 0xb4c3, 0xe022, 0x72da, 0x0, 0x0);
        gbc.writeMem(0x7d2, { 0xcd, 0x2f, 0x9e });
        gbc.writeMem(0x821a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x821a, gbc.sp());
        EXPECT(0x9e2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd5, gbc.readMem(0x821a));
        EXPECT(0x7, gbc.readMem(0x821b));
        // CD 003A
        gbc.setState(0x47e9, 0x81af, 0xe00, 0x3d9, 0x7499, 0x1ff9, 0x1, 0x1);
        gbc.writeMem(0x47e9, { 0xcd, 0xf0, 0x71 });
        gbc.writeMem(0x81ad, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x81ad, gbc.sp());
        EXPECT(0x71f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xec, gbc.readMem(0x81ad));
        EXPECT(0x47, gbc.readMem(0x81ae));
        // CD 003B
        gbc.setState(0x2c5e, 0xd368, 0xb180, 0xaf2b, 0x228c, 0xc7e0, 0x1, 0x1);
        gbc.writeMem(0x2c5e, { 0xcd, 0x15, 0x3e });
        gbc.writeMem(0xd366, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xd366, gbc.sp());
        EXPECT(0x3e15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x61, gbc.readMem(0xd366));
        EXPECT(0x2c, gbc.readMem(0xd367));
        // CD 003C
        gbc.setState(0x5f23, 0xa5a9, 0x8ea0, 0xe8eb, 0x9598, 0xa2c4, 0x0, 0x1);
        gbc.writeMem(0x5f23, { 0xcd, 0x19, 0x94 });
        gbc.writeMem(0xa5a7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xa5a7, gbc.sp());
        EXPECT(0x9419, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x26, gbc.readMem(0xa5a7));
        EXPECT(0x5f, gbc.readMem(0xa5a8));
        // CD 0040
        gbc.setState(0x4d07, 0xaf1b, 0x4260, 0x510d, 0xda86, 0xd40b, 0x1, 0x0);
        gbc.writeMem(0x4d07, { 0xcd, 0x49, 0xe8 });
        gbc.writeMem(0xaf19, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xaf19, gbc.sp());
        EXPECT(0xe849, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa, gbc.readMem(0xaf19));
        EXPECT(0x4d, gbc.readMem(0xaf1a));
        // CD 0042
        gbc.setState(0x2a21, 0x9b22, 0x530, 0x8c70, 0x2e6b, 0x7bec, 0x0, 0x0);
        gbc.writeMem(0x2a21, { 0xcd, 0x5c, 0x11 });
        gbc.writeMem(0x9b20, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x9b20, gbc.sp());
        EXPECT(0x115c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0x9b20));
        EXPECT(0x2a, gbc.readMem(0x9b21));
        // CD 0044
        gbc.setState(0x93b4, 0xf7f9, 0xf7c0, 0x1740, 0xfa49, 0x1b31, 0x1, 0x1);
        gbc.writeMem(0x93b4, { 0xcd, 0x2f, 0xcd });
        gbc.writeMem(0xf7f7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xf7f7, gbc.sp());
        EXPECT(0xcd2f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x93b4));
        EXPECT(0x2f, gbc.readMem(0x93b5));
        EXPECT(0xcd, gbc.readMem(0x93b6));
        EXPECT(0xb7, gbc.readMem(0xf7f7));
        EXPECT(0x93, gbc.readMem(0xf7f8));
        // CD 0046
        gbc.setState(0xb13b, 0x8c40, 0x6ef0, 0xd3c5, 0xef27, 0xdd4a, 0x0, 0x1);
        gbc.writeMem(0x8c3e, { 0x0, 0x0 });
        gbc.writeMem(0xb13b, { 0xcd, 0x6a, 0x41 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x8c3e, gbc.sp());
        EXPECT(0x416a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0x8c3e));
        EXPECT(0xb1, gbc.readMem(0x8c3f));
        EXPECT(0xcd, gbc.readMem(0xb13b));
        EXPECT(0x6a, gbc.readMem(0xb13c));
        EXPECT(0x41, gbc.readMem(0xb13d));
        // CD 0049
        gbc.setState(0x6c51, 0x81b2, 0xe0d0, 0xc08, 0x15bb, 0xfa56, 0x0, 0x1);
        gbc.writeMem(0x6c51, { 0xcd, 0x86, 0xb6 });
        gbc.writeMem(0x81b0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x81b0, gbc.sp());
        EXPECT(0xb686, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0x81b0));
        EXPECT(0x6c, gbc.readMem(0x81b1));
        // CD 004C
        gbc.setState(0x26a2, 0xd6e3, 0x47b0, 0x7bff, 0xeaad, 0x15d4, 0x1, 0x0);
        gbc.writeMem(0x26a2, { 0xcd, 0xad, 0xd });
        gbc.writeMem(0xd6e1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xd6e1, gbc.sp());
        EXPECT(0xdad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0xd6e1));
        EXPECT(0x26, gbc.readMem(0xd6e2));
        // CD 004D
        gbc.setState(0x5dee, 0x82b9, 0x2670, 0xd419, 0x4f3c, 0x157a, 0x1, 0x0);
        gbc.writeMem(0x5dee, { 0xcd, 0x8, 0xd5 });
        gbc.writeMem(0x82b7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x82b7, gbc.sp());
        EXPECT(0xd508, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0x82b7));
        EXPECT(0x5d, gbc.readMem(0x82b8));
        // CD 004E
        gbc.setState(0xa5da, 0xbd13, 0xc450, 0xefe7, 0xc3cd, 0x3b72, 0x0, 0x1);
        gbc.writeMem(0xa5da, { 0xcd, 0x46, 0xe5 });
        gbc.writeMem(0xbd11, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xbd11, gbc.sp());
        EXPECT(0xe546, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa5da));
        EXPECT(0x46, gbc.readMem(0xa5db));
        EXPECT(0xe5, gbc.readMem(0xa5dc));
        EXPECT(0xdd, gbc.readMem(0xbd11));
        EXPECT(0xa5, gbc.readMem(0xbd12));
        // CD 004F
        gbc.setState(0x4ebb, 0xe60b, 0xc540, 0xf02f, 0x7e94, 0x93fd, 0x1, 0x1);
        gbc.writeMem(0x4ebb, { 0xcd, 0x7c, 0x74 });
        gbc.writeMem(0xe609, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xe609, gbc.sp());
        EXPECT(0x747c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0xe609));
        EXPECT(0x4e, gbc.readMem(0xe60a));
        // CD 0050
        gbc.setState(0xd0c6, 0xc45d, 0xd8c0, 0x4ebc, 0x5aa8, 0x8901, 0x1, 0x0);
        gbc.writeMem(0xc45b, { 0x0, 0x0 });
        gbc.writeMem(0xd0c6, { 0xcd, 0x58, 0xfa });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xc45b, gbc.sp());
        EXPECT(0xfa58, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0xc45b));
        EXPECT(0xd0, gbc.readMem(0xc45c));
        EXPECT(0xcd, gbc.readMem(0xd0c6));
        EXPECT(0x58, gbc.readMem(0xd0c7));
        EXPECT(0xfa, gbc.readMem(0xd0c8));
        // CD 0052
        gbc.setState(0x994d, 0xc205, 0x41d0, 0xa37e, 0x4bd3, 0xb84, 0x1, 0x0);
        gbc.writeMem(0x994d, { 0xcd, 0xb2, 0xb3 });
        gbc.writeMem(0xc203, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xc203, gbc.sp());
        EXPECT(0xb3b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x994d));
        EXPECT(0xb2, gbc.readMem(0x994e));
        EXPECT(0xb3, gbc.readMem(0x994f));
        EXPECT(0x50, gbc.readMem(0xc203));
        EXPECT(0x99, gbc.readMem(0xc204));
        // CD 0053
        gbc.setState(0x1035, 0xb5a3, 0x9cc0, 0x2b39, 0xeabb, 0xe39f, 0x1, 0x0);
        gbc.writeMem(0x1035, { 0xcd, 0x28, 0xca });
        gbc.writeMem(0xb5a1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xb5a1, gbc.sp());
        EXPECT(0xca28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0xb5a1));
        EXPECT(0x10, gbc.readMem(0xb5a2));
        // CD 0054
        gbc.setState(0x8d72, 0xa8a0, 0x5fe0, 0xbfbf, 0x44f6, 0xb436, 0x0, 0x1);
        gbc.writeMem(0x8d72, { 0xcd, 0x4, 0x67 });
        gbc.writeMem(0xa89e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xa89e, gbc.sp());
        EXPECT(0x6704, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8d72));
        EXPECT(0x4, gbc.readMem(0x8d73));
        EXPECT(0x67, gbc.readMem(0x8d74));
        EXPECT(0x75, gbc.readMem(0xa89e));
        EXPECT(0x8d, gbc.readMem(0xa89f));
        // CD 0055
        gbc.setState(0x9a55, 0xd5f1, 0x39e0, 0xc4fe, 0x861a, 0x3920, 0x0, 0x0);
        gbc.writeMem(0x9a55, { 0xcd, 0xb5, 0x5 });
        gbc.writeMem(0xd5ef, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xd5ef, gbc.sp());
        EXPECT(0x5b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9a55));
        EXPECT(0xb5, gbc.readMem(0x9a56));
        EXPECT(0x5, gbc.readMem(0x9a57));
        EXPECT(0x58, gbc.readMem(0xd5ef));
        EXPECT(0x9a, gbc.readMem(0xd5f0));
        // CD 0057
        gbc.setState(0xe8f3, 0x9898, 0x97a0, 0x584e, 0x64b9, 0x59d0, 0x1, 0x0);
        gbc.writeMem(0x9896, { 0x0, 0x0 });
        gbc.writeMem(0xe8f3, { 0xcd, 0xa, 0xa6 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x9896, gbc.sp());
        EXPECT(0xa60a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf6, gbc.readMem(0x9896));
        EXPECT(0xe8, gbc.readMem(0x9897));
        EXPECT(0xcd, gbc.readMem(0xe8f3));
        EXPECT(0xa, gbc.readMem(0xe8f4));
        EXPECT(0xa6, gbc.readMem(0xe8f5));
        // CD 005A
        gbc.setState(0x76ef, 0xf12d, 0xa90, 0xead5, 0x7bab, 0x31b3, 0x0, 0x0);
        gbc.writeMem(0x76ef, { 0xcd, 0x4b, 0x94 });
        gbc.writeMem(0xf12b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xf12b, gbc.sp());
        EXPECT(0x944b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0xf12b));
        EXPECT(0x76, gbc.readMem(0xf12c));
        // CD 005C
        gbc.setState(0xd383, 0x8629, 0x1ba0, 0x8544, 0xf49f, 0x4b88, 0x1, 0x1);
        gbc.writeMem(0x8627, { 0x0, 0x0 });
        gbc.writeMem(0xd383, { 0xcd, 0x29, 0xb3 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x8627, gbc.sp());
        EXPECT(0xb329, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0x8627));
        EXPECT(0xd3, gbc.readMem(0x8628));
        EXPECT(0xcd, gbc.readMem(0xd383));
        EXPECT(0x29, gbc.readMem(0xd384));
        EXPECT(0xb3, gbc.readMem(0xd385));
        // CD 005D
        gbc.setState(0x4ace, 0x96ae, 0x3c50, 0xf6ce, 0xd94f, 0xf59d, 0x1, 0x0);
        gbc.writeMem(0x4ace, { 0xcd, 0x1, 0x6a });
        gbc.writeMem(0x96ac, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x96ac, gbc.sp());
        EXPECT(0x6a01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd1, gbc.readMem(0x96ac));
        EXPECT(0x4a, gbc.readMem(0x96ad));
        // CD 005E
        gbc.setState(0xdde4, 0xfe01, 0x1d50, 0xe848, 0x8b95, 0xb9b9, 0x1, 0x0);
        gbc.writeMem(0xdde4, { 0xcd, 0x74, 0x2d });
        gbc.writeMem(0xfdff, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xfdff, gbc.sp());
        EXPECT(0x2d74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xdde4));
        EXPECT(0x74, gbc.readMem(0xdde5));
        EXPECT(0x2d, gbc.readMem(0xdde6));
        EXPECT(0xe7, gbc.readMem(0xfdff));
        EXPECT(0xdd, gbc.readMem(0xfe00));
        // CD 0064
        gbc.setState(0xa5ec, 0xc234, 0xed10, 0xff4f, 0xa691, 0xc88e, 0x0, 0x1);
        gbc.writeMem(0xa5ec, { 0xcd, 0xce, 0x97 });
        gbc.writeMem(0xc232, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xc232, gbc.sp());
        EXPECT(0x97ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa5ec));
        EXPECT(0xce, gbc.readMem(0xa5ed));
        EXPECT(0x97, gbc.readMem(0xa5ee));
        EXPECT(0xef, gbc.readMem(0xc232));
        EXPECT(0xa5, gbc.readMem(0xc233));
        // CD 0065
        gbc.setState(0x85c9, 0xb7e1, 0x8560, 0xa787, 0x265d, 0x68a2, 0x0, 0x1);
        gbc.writeMem(0x85c9, { 0xcd, 0x1c, 0xfb });
        gbc.writeMem(0xb7df, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xb7df, gbc.sp());
        EXPECT(0xfb1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x85c9));
        EXPECT(0x1c, gbc.readMem(0x85ca));
        EXPECT(0xfb, gbc.readMem(0x85cb));
        EXPECT(0xcc, gbc.readMem(0xb7df));
        EXPECT(0x85, gbc.readMem(0xb7e0));
        // CD 0066
        gbc.setState(0xe45f, 0xa4ab, 0xedd0, 0x3fb2, 0x4d7b, 0xfb6f, 0x1, 0x1);
        gbc.writeMem(0xa4a9, { 0x0, 0x0 });
        gbc.writeMem(0xe45f, { 0xcd, 0x70, 0x6e });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xa4a9, gbc.sp());
        EXPECT(0x6e70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0xa4a9));
        EXPECT(0xe4, gbc.readMem(0xa4aa));
        EXPECT(0xcd, gbc.readMem(0xe45f));
        EXPECT(0x70, gbc.readMem(0xe460));
        EXPECT(0x6e, gbc.readMem(0xe461));
        // CD 0067
        gbc.setState(0x600, 0xedc1, 0xf0, 0x3702, 0xe5f1, 0xef0f, 0x0, 0x1);
        gbc.writeMem(0x600, { 0xcd, 0x1c, 0x0 });
        gbc.writeMem(0xedbf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xedbf, gbc.sp());
        EXPECT(0x1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3, gbc.readMem(0xedbf));
        EXPECT(0x6, gbc.readMem(0xedc0));
        // CD 006A
        gbc.setState(0xe219, 0xa94e, 0x6160, 0xaa66, 0x3dc1, 0xc345, 0x1, 0x1);
        gbc.writeMem(0xa94c, { 0x0, 0x0 });
        gbc.writeMem(0xe219, { 0xcd, 0x5, 0xa4 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xa94c, gbc.sp());
        EXPECT(0xa405, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0xa94c));
        EXPECT(0xe2, gbc.readMem(0xa94d));
        EXPECT(0xcd, gbc.readMem(0xe219));
        EXPECT(0x5, gbc.readMem(0xe21a));
        EXPECT(0xa4, gbc.readMem(0xe21b));
        // CD 006F
        gbc.setState(0x663a, 0xe544, 0x5920, 0x6c18, 0xbc27, 0x75c5, 0x1, 0x1);
        gbc.writeMem(0x663a, { 0xcd, 0xf4, 0xb5 });
        gbc.writeMem(0xe542, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xe542, gbc.sp());
        EXPECT(0xb5f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3d, gbc.readMem(0xe542));
        EXPECT(0x66, gbc.readMem(0xe543));
        // CD 0072
        gbc.setState(0xbc6a, 0xcf05, 0x510, 0x5a85, 0x60ad, 0x848f, 0x1, 0x1);
        gbc.writeMem(0xbc6a, { 0xcd, 0xa4, 0x90 });
        gbc.writeMem(0xcf03, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xcf03, gbc.sp());
        EXPECT(0x90a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xbc6a));
        EXPECT(0xa4, gbc.readMem(0xbc6b));
        EXPECT(0x90, gbc.readMem(0xbc6c));
        EXPECT(0x6d, gbc.readMem(0xcf03));
        EXPECT(0xbc, gbc.readMem(0xcf04));
        // CD 0075
        gbc.setState(0xa7ea, 0xf3da, 0x9df0, 0xe056, 0xc356, 0xd129, 0x0, 0x1);
        gbc.writeMem(0xa7ea, { 0xcd, 0xa0, 0x91 });
        gbc.writeMem(0xf3d8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xf3d8, gbc.sp());
        EXPECT(0x91a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa7ea));
        EXPECT(0xa0, gbc.readMem(0xa7eb));
        EXPECT(0x91, gbc.readMem(0xa7ec));
        EXPECT(0xed, gbc.readMem(0xf3d8));
        EXPECT(0xa7, gbc.readMem(0xf3d9));
        // CD 0076
        gbc.setState(0xd98d, 0x9796, 0x6540, 0x3fdc, 0xdf3f, 0x6eb3, 0x1, 0x1);
        gbc.writeMem(0x9794, { 0x0, 0x0 });
        gbc.writeMem(0xd98d, { 0xcd, 0xf4, 0xbb });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x9794, gbc.sp());
        EXPECT(0xbbf4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0x9794));
        EXPECT(0xd9, gbc.readMem(0x9795));
        EXPECT(0xcd, gbc.readMem(0xd98d));
        EXPECT(0xf4, gbc.readMem(0xd98e));
        EXPECT(0xbb, gbc.readMem(0xd98f));
        // CD 007B
        gbc.setState(0x62c2, 0xdede, 0x8d90, 0xc11, 0x4f55, 0x5ce6, 0x1, 0x1);
        gbc.writeMem(0x62c2, { 0xcd, 0x63, 0x55 });
        gbc.writeMem(0xdedc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xdedc, gbc.sp());
        EXPECT(0x5563, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc5, gbc.readMem(0xdedc));
        EXPECT(0x62, gbc.readMem(0xdedd));
        // CD 007D
        gbc.setState(0xacd4, 0x8ba0, 0xdaa0, 0xdc58, 0x6986, 0x164a, 0x0, 0x1);
        gbc.writeMem(0x8b9e, { 0x0, 0x0 });
        gbc.writeMem(0xacd4, { 0xcd, 0x4, 0xf });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x8b9e, gbc.sp());
        EXPECT(0xf04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd7, gbc.readMem(0x8b9e));
        EXPECT(0xac, gbc.readMem(0x8b9f));
        EXPECT(0xcd, gbc.readMem(0xacd4));
        EXPECT(0x4, gbc.readMem(0xacd5));
        EXPECT(0xf, gbc.readMem(0xacd6));
        // CD 007E
        gbc.setState(0xe076, 0xe279, 0xb4f0, 0x474d, 0x687e, 0x6a34, 0x1, 0x1);
        gbc.writeMem(0xe076, { 0xcd, 0x40, 0x3a });
        gbc.writeMem(0xe277, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xe277, gbc.sp());
        EXPECT(0x3a40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xe076));
        EXPECT(0x40, gbc.readMem(0xe077));
        EXPECT(0x3a, gbc.readMem(0xe078));
        EXPECT(0x79, gbc.readMem(0xe277));
        EXPECT(0xe0, gbc.readMem(0xe278));
        // CD 0080
        gbc.setState(0x6ea2, 0xd491, 0x8cb0, 0xaa21, 0x471b, 0x3bb, 0x0, 0x0);
        gbc.writeMem(0x6ea2, { 0xcd, 0xd1, 0x13 });
        gbc.writeMem(0xd48f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xd48f, gbc.sp());
        EXPECT(0x13d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0xd48f));
        EXPECT(0x6e, gbc.readMem(0xd490));
        // CD 0081
        gbc.setState(0xb65, 0xc05d, 0x74f0, 0xe8b, 0x169c, 0x1822, 0x0, 0x1);
        gbc.writeMem(0xb65, { 0xcd, 0x13, 0x2f });
        gbc.writeMem(0xc05b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xc05b, gbc.sp());
        EXPECT(0x2f13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x68, gbc.readMem(0xc05b));
        EXPECT(0xb, gbc.readMem(0xc05c));
        // CD 0085
        gbc.setState(0x2fed, 0xe32b, 0xad20, 0x6a7d, 0x751c, 0xa620, 0x1, 0x1);
        gbc.writeMem(0x2fed, { 0xcd, 0xed, 0x3e });
        gbc.writeMem(0xe329, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xe329, gbc.sp());
        EXPECT(0x3eed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf0, gbc.readMem(0xe329));
        EXPECT(0x2f, gbc.readMem(0xe32a));
        // CD 0087
        gbc.setState(0xeb83, 0xc34e, 0x38b0, 0x1b74, 0x5da3, 0x8f3b, 0x0, 0x0);
        gbc.writeMem(0xc34c, { 0x0, 0x0 });
        gbc.writeMem(0xeb83, { 0xcd, 0xab, 0xe });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xc34c, gbc.sp());
        EXPECT(0xeab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xc34c));
        EXPECT(0xeb, gbc.readMem(0xc34d));
        EXPECT(0xcd, gbc.readMem(0xeb83));
        EXPECT(0xab, gbc.readMem(0xeb84));
        EXPECT(0xe, gbc.readMem(0xeb85));
        // CD 0088
        gbc.setState(0xb466, 0x8380, 0xb850, 0xb967, 0x7687, 0x34f7, 0x1, 0x1);
        gbc.writeMem(0x837e, { 0x0, 0x0 });
        gbc.writeMem(0xb466, { 0xcd, 0x70, 0x37 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x837e, gbc.sp());
        EXPECT(0x3770, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x69, gbc.readMem(0x837e));
        EXPECT(0xb4, gbc.readMem(0x837f));
        EXPECT(0xcd, gbc.readMem(0xb466));
        EXPECT(0x70, gbc.readMem(0xb467));
        EXPECT(0x37, gbc.readMem(0xb468));
        // CD 0089
        gbc.setState(0x2179, 0xa06c, 0x4bc0, 0x84d7, 0x80d8, 0xfc89, 0x1, 0x1);
        gbc.writeMem(0x2179, { 0xcd, 0x65, 0xa7 });
        gbc.writeMem(0xa06a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xa06a, gbc.sp());
        EXPECT(0xa765, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xa06a));
        EXPECT(0x21, gbc.readMem(0xa06b));
        // CD 008C
        gbc.setState(0x4163, 0xefe0, 0xa370, 0xe533, 0x1d5b, 0x11ea, 0x0, 0x1);
        gbc.writeMem(0x4163, { 0xcd, 0xef, 0x82 });
        gbc.writeMem(0xefde, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xefde, gbc.sp());
        EXPECT(0x82ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0xefde));
        EXPECT(0x41, gbc.readMem(0xefdf));
        // CD 0090
        gbc.setState(0x3a5a, 0xbe3f, 0x21e0, 0xa55c, 0xc788, 0x1a41, 0x0, 0x0);
        gbc.writeMem(0x3a5a, { 0xcd, 0x77, 0x25 });
        gbc.writeMem(0xbe3d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xbe3d, gbc.sp());
        EXPECT(0x2577, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5d, gbc.readMem(0xbe3d));
        EXPECT(0x3a, gbc.readMem(0xbe3e));
        // CD 0091
        gbc.setState(0xe6fc, 0x9824, 0xab70, 0x9979, 0xbc3b, 0x975f, 0x1, 0x1);
        gbc.writeMem(0x9822, { 0x0, 0x0 });
        gbc.writeMem(0xe6fc, { 0xcd, 0x9f, 0x9c });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x9822, gbc.sp());
        EXPECT(0x9c9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xff, gbc.readMem(0x9822));
        EXPECT(0xe6, gbc.readMem(0x9823));
        EXPECT(0xcd, gbc.readMem(0xe6fc));
        EXPECT(0x9f, gbc.readMem(0xe6fd));
        EXPECT(0x9c, gbc.readMem(0xe6fe));
        // CD 0092
        gbc.setState(0xc791, 0xe32d, 0x69d0, 0x593e, 0xbfc4, 0xbbe, 0x1, 0x0);
        gbc.writeMem(0xc791, { 0xcd, 0x39, 0xc0 });
        gbc.writeMem(0xe32b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xe32b, gbc.sp());
        EXPECT(0xc039, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc791));
        EXPECT(0x39, gbc.readMem(0xc792));
        EXPECT(0xc0, gbc.readMem(0xc793));
        EXPECT(0x94, gbc.readMem(0xe32b));
        EXPECT(0xc7, gbc.readMem(0xe32c));
        // CD 009A
        gbc.setState(0x5e18, 0xf933, 0x3a20, 0x77ad, 0x19ac, 0xfcb0, 0x0, 0x1);
        gbc.writeMem(0x5e18, { 0xcd, 0xf6, 0x1c });
        gbc.writeMem(0xf931, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xf931, gbc.sp());
        EXPECT(0x1cf6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1b, gbc.readMem(0xf931));
        EXPECT(0x5e, gbc.readMem(0xf932));
        // CD 009B
        gbc.setState(0x4c1, 0xf57a, 0xc080, 0x7892, 0x6b52, 0x45b6, 0x0, 0x0);
        gbc.writeMem(0x4c1, { 0xcd, 0x59, 0xbc });
        gbc.writeMem(0xf578, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xf578, gbc.sp());
        EXPECT(0xbc59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xf578));
        EXPECT(0x4, gbc.readMem(0xf579));
        // CD 009C
        gbc.setState(0xabbe, 0xdfc0, 0xe570, 0x7dfc, 0x7f53, 0x4dec, 0x1, 0x1);
        gbc.writeMem(0xabbe, { 0xcd, 0x65, 0xbc });
        gbc.writeMem(0xdfbe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xdfbe, gbc.sp());
        EXPECT(0xbc65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xabbe));
        EXPECT(0x65, gbc.readMem(0xabbf));
        EXPECT(0xbc, gbc.readMem(0xabc0));
        EXPECT(0xc1, gbc.readMem(0xdfbe));
        EXPECT(0xab, gbc.readMem(0xdfbf));
        // CD 009E
        gbc.setState(0x8355, 0xf268, 0xf5e0, 0x6e5c, 0xee28, 0xfe98, 0x0, 0x1);
        gbc.writeMem(0x8355, { 0xcd, 0x12, 0xab });
        gbc.writeMem(0xf266, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xf266, gbc.sp());
        EXPECT(0xab12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8355));
        EXPECT(0x12, gbc.readMem(0x8356));
        EXPECT(0xab, gbc.readMem(0x8357));
        EXPECT(0x58, gbc.readMem(0xf266));
        EXPECT(0x83, gbc.readMem(0xf267));
        // CD 009F
        gbc.setState(0x9d08, 0xe87d, 0x1cd0, 0xc809, 0xb77a, 0xdbfc, 0x1, 0x1);
        gbc.writeMem(0x9d08, { 0xcd, 0x1c, 0x74 });
        gbc.writeMem(0xe87b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xe87b, gbc.sp());
        EXPECT(0x741c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9d08));
        EXPECT(0x1c, gbc.readMem(0x9d09));
        EXPECT(0x74, gbc.readMem(0x9d0a));
        EXPECT(0xb, gbc.readMem(0xe87b));
        EXPECT(0x9d, gbc.readMem(0xe87c));
        // CD 00A1
        gbc.setState(0xd73a, 0x8577, 0x7060, 0xa4ab, 0x8502, 0x7eb8, 0x1, 0x1);
        gbc.writeMem(0x8575, { 0x0, 0x0 });
        gbc.writeMem(0xd73a, { 0xcd, 0x9, 0xe2 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x8575, gbc.sp());
        EXPECT(0xe209, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3d, gbc.readMem(0x8575));
        EXPECT(0xd7, gbc.readMem(0x8576));
        EXPECT(0xcd, gbc.readMem(0xd73a));
        EXPECT(0x9, gbc.readMem(0xd73b));
        EXPECT(0xe2, gbc.readMem(0xd73c));
        // CD 00A2
        gbc.setState(0x1fa8, 0xd253, 0x8b60, 0x7c48, 0x3980, 0x887e, 0x1, 0x0);
        gbc.writeMem(0x1fa8, { 0xcd, 0x8d, 0x3c });
        gbc.writeMem(0xd251, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xd251, gbc.sp());
        EXPECT(0x3c8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xab, gbc.readMem(0xd251));
        EXPECT(0x1f, gbc.readMem(0xd252));
        // CD 00A4
        gbc.setState(0x7979, 0xab6a, 0xe890, 0x2ef, 0x2c1a, 0x6555, 0x0, 0x1);
        gbc.writeMem(0x7979, { 0xcd, 0x21, 0x65 });
        gbc.writeMem(0xab68, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xab68, gbc.sp());
        EXPECT(0x6521, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xab68));
        EXPECT(0x79, gbc.readMem(0xab69));
        // CD 00A8
        gbc.setState(0x10ac, 0xbb16, 0xdc30, 0x3611, 0xc35c, 0x1229, 0x0, 0x0);
        gbc.writeMem(0x10ac, { 0xcd, 0xa6, 0x58 });
        gbc.writeMem(0xbb14, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xbb14, gbc.sp());
        EXPECT(0x58a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbb14));
        EXPECT(0x10, gbc.readMem(0xbb15));
        // CD 00A9
        gbc.setState(0xbd58, 0xc769, 0xd3d0, 0x3bc0, 0x9227, 0xa08a, 0x0, 0x1);
        gbc.writeMem(0xbd58, { 0xcd, 0x56, 0x4c });
        gbc.writeMem(0xc767, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xc767, gbc.sp());
        EXPECT(0x4c56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xbd58));
        EXPECT(0x56, gbc.readMem(0xbd59));
        EXPECT(0x4c, gbc.readMem(0xbd5a));
        EXPECT(0x5b, gbc.readMem(0xc767));
        EXPECT(0xbd, gbc.readMem(0xc768));
        // CD 00AB
        gbc.setState(0x7356, 0xaed9, 0xbcf0, 0xd1e9, 0xbd4c, 0x944d, 0x1, 0x1);
        gbc.writeMem(0x7356, { 0xcd, 0x5f, 0x87 });
        gbc.writeMem(0xaed7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xaed7, gbc.sp());
        EXPECT(0x875f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x59, gbc.readMem(0xaed7));
        EXPECT(0x73, gbc.readMem(0xaed8));
        // CD 00AC
        gbc.setState(0xd718, 0xe69f, 0x8da0, 0xd459, 0x4cfb, 0x5e55, 0x1, 0x1);
        gbc.writeMem(0xd718, { 0xcd, 0x1b, 0xdd });
        gbc.writeMem(0xe69d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xe69d, gbc.sp());
        EXPECT(0xdd1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xd718));
        EXPECT(0x1b, gbc.readMem(0xd719));
        EXPECT(0xdd, gbc.readMem(0xd71a));
        EXPECT(0x1b, gbc.readMem(0xe69d));
        EXPECT(0xd7, gbc.readMem(0xe69e));
        // CD 00AF
        gbc.setState(0x5cfb, 0xddac, 0x1c60, 0x1041, 0xe9ff, 0x2234, 0x0, 0x1);
        gbc.writeMem(0x5cfb, { 0xcd, 0xa4, 0xc6 });
        gbc.writeMem(0xddaa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xddaa, gbc.sp());
        EXPECT(0xc6a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfe, gbc.readMem(0xddaa));
        EXPECT(0x5c, gbc.readMem(0xddab));
        // CD 00B0
        gbc.setState(0x4fa2, 0xbed4, 0x8e90, 0x98e9, 0xad2b, 0x5aaf, 0x0, 0x0);
        gbc.writeMem(0x4fa2, { 0xcd, 0x63, 0xa1 });
        gbc.writeMem(0xbed2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xbed2, gbc.sp());
        EXPECT(0xa163, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0xbed2));
        EXPECT(0x4f, gbc.readMem(0xbed3));
        // CD 00B2
        gbc.setState(0x8429, 0xb759, 0xff40, 0xc289, 0x984f, 0xdab3, 0x0, 0x1);
        gbc.writeMem(0x8429, { 0xcd, 0x54, 0x7d });
        gbc.writeMem(0xb757, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xb757, gbc.sp());
        EXPECT(0x7d54, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8429));
        EXPECT(0x54, gbc.readMem(0x842a));
        EXPECT(0x7d, gbc.readMem(0x842b));
        EXPECT(0x2c, gbc.readMem(0xb757));
        EXPECT(0x84, gbc.readMem(0xb758));
        // CD 00B3
        gbc.setState(0x1d10, 0xb6b2, 0xbdf0, 0x6fc4, 0xffef, 0x1d3b, 0x0, 0x0);
        gbc.writeMem(0x1d10, { 0xcd, 0xde, 0xbc });
        gbc.writeMem(0xb6b0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xb6b0, gbc.sp());
        EXPECT(0xbcde, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x13, gbc.readMem(0xb6b0));
        EXPECT(0x1d, gbc.readMem(0xb6b1));
        // CD 00B9
        gbc.setState(0xfe8, 0x9b99, 0xecb0, 0xd211, 0xb314, 0x7f7, 0x0, 0x1);
        gbc.writeMem(0xfe8, { 0xcd, 0x3, 0x4e });
        gbc.writeMem(0x9b97, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x9b97, gbc.sp());
        EXPECT(0x4e03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xeb, gbc.readMem(0x9b97));
        EXPECT(0xf, gbc.readMem(0x9b98));
        // CD 00BA
        gbc.setState(0x969c, 0xb537, 0xd9b0, 0x6fd, 0x2a79, 0xa36, 0x1, 0x1);
        gbc.writeMem(0x969c, { 0xcd, 0x3f, 0x6f });
        gbc.writeMem(0xb535, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xb535, gbc.sp());
        EXPECT(0x6f3f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x969c));
        EXPECT(0x3f, gbc.readMem(0x969d));
        EXPECT(0x6f, gbc.readMem(0x969e));
        EXPECT(0x9f, gbc.readMem(0xb535));
        EXPECT(0x96, gbc.readMem(0xb536));
        // CD 00C0
        gbc.setState(0x6fc, 0xa2b2, 0x4550, 0x6a2c, 0x1248, 0x3784, 0x0, 0x1);
        gbc.writeMem(0x6fc, { 0xcd, 0x14, 0x67 });
        gbc.writeMem(0xa2b0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xa2b0, gbc.sp());
        EXPECT(0x6714, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xff, gbc.readMem(0xa2b0));
        EXPECT(0x6, gbc.readMem(0xa2b1));
        // CD 00C2
        gbc.setState(0x7a9f, 0xe788, 0x8730, 0x8559, 0x963, 0x9526, 0x1, 0x1);
        gbc.writeMem(0x7a9f, { 0xcd, 0x94, 0xa3 });
        gbc.writeMem(0xe786, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xe786, gbc.sp());
        EXPECT(0xa394, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa2, gbc.readMem(0xe786));
        EXPECT(0x7a, gbc.readMem(0xe787));
        // CD 00C3
        gbc.setState(0xc175, 0xfd7c, 0xfd0, 0x57c0, 0xf3a1, 0xf37c, 0x0, 0x1);
        gbc.writeMem(0xc175, { 0xcd, 0x21, 0x15 });
        gbc.writeMem(0xfd7a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xfd7a, gbc.sp());
        EXPECT(0x1521, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc175));
        EXPECT(0x21, gbc.readMem(0xc176));
        EXPECT(0x15, gbc.readMem(0xc177));
        EXPECT(0x78, gbc.readMem(0xfd7a));
        EXPECT(0xc1, gbc.readMem(0xfd7b));
        // CD 00C9
        gbc.setState(0x6642, 0xb1f3, 0xf590, 0x3666, 0x4db9, 0xba79, 0x1, 0x0);
        gbc.writeMem(0x6642, { 0xcd, 0x4, 0x62 });
        gbc.writeMem(0xb1f1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xb1f1, gbc.sp());
        EXPECT(0x6204, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x45, gbc.readMem(0xb1f1));
        EXPECT(0x66, gbc.readMem(0xb1f2));
        // CD 00CB
        gbc.setState(0xa1ba, 0xef08, 0x2ad0, 0x781e, 0x407f, 0xb904, 0x1, 0x1);
        gbc.writeMem(0xa1ba, { 0xcd, 0x9, 0xeb });
        gbc.writeMem(0xef06, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xef06, gbc.sp());
        EXPECT(0xeb09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa1ba));
        EXPECT(0x9, gbc.readMem(0xa1bb));
        EXPECT(0xeb, gbc.readMem(0xa1bc));
        EXPECT(0xbd, gbc.readMem(0xef06));
        EXPECT(0xa1, gbc.readMem(0xef07));
        // CD 00CD
        gbc.setState(0xa0d1, 0xeee8, 0x1010, 0x178, 0xc10a, 0xd11b, 0x1, 0x1);
        gbc.writeMem(0xa0d1, { 0xcd, 0x6f, 0x2e });
        gbc.writeMem(0xeee6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xeee6, gbc.sp());
        EXPECT(0x2e6f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa0d1));
        EXPECT(0x6f, gbc.readMem(0xa0d2));
        EXPECT(0x2e, gbc.readMem(0xa0d3));
        EXPECT(0xd4, gbc.readMem(0xeee6));
        EXPECT(0xa0, gbc.readMem(0xeee7));
        // CD 00CE
        gbc.setState(0x85b4, 0xa06a, 0xb5c0, 0x687, 0xaa00, 0xb3ea, 0x0, 0x0);
        gbc.writeMem(0x85b4, { 0xcd, 0x5, 0x64 });
        gbc.writeMem(0xa068, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xa068, gbc.sp());
        EXPECT(0x6405, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x85b4));
        EXPECT(0x5, gbc.readMem(0x85b5));
        EXPECT(0x64, gbc.readMem(0x85b6));
        EXPECT(0xb7, gbc.readMem(0xa068));
        EXPECT(0x85, gbc.readMem(0xa069));
        // CD 00DA
        gbc.setState(0xc4f2, 0xb1d1, 0xecc0, 0x8036, 0x1406, 0xedb9, 0x1, 0x1);
        gbc.writeMem(0xb1cf, { 0x0, 0x0 });
        gbc.writeMem(0xc4f2, { 0xcd, 0x8f, 0x56 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xb1cf, gbc.sp());
        EXPECT(0x568f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf5, gbc.readMem(0xb1cf));
        EXPECT(0xc4, gbc.readMem(0xb1d0));
        EXPECT(0xcd, gbc.readMem(0xc4f2));
        EXPECT(0x8f, gbc.readMem(0xc4f3));
        EXPECT(0x56, gbc.readMem(0xc4f4));
        // CD 00DC
        gbc.setState(0x6fc, 0xbf57, 0xc490, 0x671d, 0xae75, 0x9b30, 0x1, 0x1);
        gbc.writeMem(0x6fc, { 0xcd, 0x14, 0x67 });
        gbc.writeMem(0xbf55, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xbf55, gbc.sp());
        EXPECT(0x6714, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xff, gbc.readMem(0xbf55));
        EXPECT(0x6, gbc.readMem(0xbf56));
        // CD 00DE
        gbc.setState(0x1cea, 0xcf88, 0xaf90, 0x9873, 0x28a4, 0x1671, 0x0, 0x0);
        gbc.writeMem(0x1cea, { 0xcd, 0x5d, 0xe5 });
        gbc.writeMem(0xcf86, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xcf86, gbc.sp());
        EXPECT(0xe55d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xed, gbc.readMem(0xcf86));
        EXPECT(0x1c, gbc.readMem(0xcf87));
        // CD 00DF
        gbc.setState(0xa211, 0xaef1, 0x6430, 0x5e2a, 0x6f59, 0x4d03, 0x0, 0x0);
        gbc.writeMem(0xa211, { 0xcd, 0x9e, 0xca });
        gbc.writeMem(0xaeef, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xaeef, gbc.sp());
        EXPECT(0xca9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa211));
        EXPECT(0x9e, gbc.readMem(0xa212));
        EXPECT(0xca, gbc.readMem(0xa213));
        EXPECT(0x14, gbc.readMem(0xaeef));
        EXPECT(0xa2, gbc.readMem(0xaef0));
        // CD 00E3
        gbc.setState(0xb54c, 0xff86, 0x1730, 0xf5fb, 0x2278, 0xf612, 0x1, 0x1);
        gbc.writeMem(0xb54c, { 0xcd, 0xeb, 0xc0 });
        gbc.writeMem(0xff84, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xff84, gbc.sp());
        EXPECT(0xc0eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb54c));
        EXPECT(0xeb, gbc.readMem(0xb54d));
        EXPECT(0xc0, gbc.readMem(0xb54e));
        EXPECT(0x4f, gbc.readMem(0xff84));
        EXPECT(0xb5, gbc.readMem(0xff85));
        // CD 00E4
        gbc.setState(0xdfd0, 0x9e94, 0x5e50, 0x948e, 0xe115, 0xcf28, 0x0, 0x1);
        gbc.writeMem(0x9e92, { 0x0, 0x0 });
        gbc.writeMem(0xdfd0, { 0xcd, 0x25, 0x3 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x9e92, gbc.sp());
        EXPECT(0x325, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd3, gbc.readMem(0x9e92));
        EXPECT(0xdf, gbc.readMem(0x9e93));
        EXPECT(0xcd, gbc.readMem(0xdfd0));
        EXPECT(0x25, gbc.readMem(0xdfd1));
        EXPECT(0x3, gbc.readMem(0xdfd2));
        // CD 00E5
        gbc.setState(0x26ab, 0xed0b, 0xd680, 0xab82, 0x1e20, 0xf9f0, 0x0, 0x1);
        gbc.writeMem(0x26ab, { 0xcd, 0x20, 0x43 });
        gbc.writeMem(0xed09, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xed09, gbc.sp());
        EXPECT(0x4320, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xae, gbc.readMem(0xed09));
        EXPECT(0x26, gbc.readMem(0xed0a));
        // CD 00E7
        gbc.setState(0x54a7, 0xfee6, 0xcd30, 0x5a9e, 0x10b8, 0x4d44, 0x1, 0x0);
        gbc.writeMem(0x54a7, { 0xcd, 0xfa, 0x7f });
        gbc.writeMem(0xfee4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xfee4, gbc.sp());
        EXPECT(0x7ffa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaa, gbc.readMem(0xfee4));
        EXPECT(0x54, gbc.readMem(0xfee5));
        // CD 00EC
        gbc.setState(0xe289, 0x8a2c, 0x3800, 0x76a3, 0x6a2f, 0x3c99, 0x1, 0x1);
        gbc.writeMem(0x8a2a, { 0x0, 0x0 });
        gbc.writeMem(0xe289, { 0xcd, 0x3a, 0xee });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x8a2a, gbc.sp());
        EXPECT(0xee3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0x8a2a));
        EXPECT(0xe2, gbc.readMem(0x8a2b));
        EXPECT(0xcd, gbc.readMem(0xe289));
        EXPECT(0x3a, gbc.readMem(0xe28a));
        EXPECT(0xee, gbc.readMem(0xe28b));
        // CD 00F3
        gbc.setState(0xe92, 0xfe38, 0x51d0, 0xd39d, 0xaf2f, 0x4a73, 0x1, 0x0);
        gbc.writeMem(0xe92, { 0xcd, 0xe4, 0x89 });
        gbc.writeMem(0xfe36, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xfe36, gbc.sp());
        EXPECT(0x89e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x95, gbc.readMem(0xfe36));
        EXPECT(0xe, gbc.readMem(0xfe37));
        // CD 00F4
        gbc.setState(0x441, 0xeeec, 0x1e30, 0x7826, 0xce53, 0x6d6f, 0x1, 0x1);
        gbc.writeMem(0x441, { 0xcd, 0x9f, 0x7a });
        gbc.writeMem(0xeeea, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xeeea, gbc.sp());
        EXPECT(0x7a9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x44, gbc.readMem(0xeeea));
        EXPECT(0x4, gbc.readMem(0xeeeb));
        // CD 00F8
        gbc.setState(0xc6e2, 0xd6f7, 0x75a0, 0x80b4, 0x7458, 0xdfa5, 0x1, 0x0);
        gbc.writeMem(0xc6e2, { 0xcd, 0x7b, 0x3 });
        gbc.writeMem(0xd6f5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xd6f5, gbc.sp());
        EXPECT(0x37b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc6e2));
        EXPECT(0x7b, gbc.readMem(0xc6e3));
        EXPECT(0x3, gbc.readMem(0xc6e4));
        EXPECT(0xe5, gbc.readMem(0xd6f5));
        EXPECT(0xc6, gbc.readMem(0xd6f6));
        // CD 00FB
        gbc.setState(0xece1, 0xb7e2, 0x7050, 0x484a, 0x2d9f, 0x4557, 0x0, 0x0);
        gbc.writeMem(0xb7e0, { 0x0, 0x0 });
        gbc.writeMem(0xece1, { 0xcd, 0xf1, 0x66 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xb7e0, gbc.sp());
        EXPECT(0x66f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0xb7e0));
        EXPECT(0xec, gbc.readMem(0xb7e1));
        EXPECT(0xcd, gbc.readMem(0xece1));
        EXPECT(0xf1, gbc.readMem(0xece2));
        EXPECT(0x66, gbc.readMem(0xece3));
        // CD 00FE
        gbc.setState(0x5012, 0x8531, 0x2640, 0x245e, 0xf6eb, 0x69d7, 0x1, 0x1);
        gbc.writeMem(0x5012, { 0xcd, 0xe8, 0x86 });
        gbc.writeMem(0x852f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x852f, gbc.sp());
        EXPECT(0x86e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x15, gbc.readMem(0x852f));
        EXPECT(0x50, gbc.readMem(0x8530));
        // CD 0100
        gbc.setState(0x3b5d, 0xe62a, 0x8600, 0x7d33, 0x6b46, 0x7e84, 0x1, 0x0);
        gbc.writeMem(0x3b5d, { 0xcd, 0x7, 0x6a });
        gbc.writeMem(0xe628, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xe628, gbc.sp());
        EXPECT(0x6a07, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0xe628));
        EXPECT(0x3b, gbc.readMem(0xe629));
        // CD 0101
        gbc.setState(0xc646, 0xfe7f, 0x85a0, 0x6af1, 0x3f61, 0x7809, 0x1, 0x0);
        gbc.writeMem(0xc646, { 0xcd, 0xc3, 0x88 });
        gbc.writeMem(0xfe7d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xfe7d, gbc.sp());
        EXPECT(0x88c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc646));
        EXPECT(0xc3, gbc.readMem(0xc647));
        EXPECT(0x88, gbc.readMem(0xc648));
        EXPECT(0x49, gbc.readMem(0xfe7d));
        EXPECT(0xc6, gbc.readMem(0xfe7e));
        // CD 0102
        gbc.setState(0x90e6, 0x9be3, 0x5a10, 0x73eb, 0x8e78, 0x188e, 0x1, 0x1);
        gbc.writeMem(0x90e6, { 0xcd, 0xf0, 0x67 });
        gbc.writeMem(0x9be1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x9be1, gbc.sp());
        EXPECT(0x67f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x90e6));
        EXPECT(0xf0, gbc.readMem(0x90e7));
        EXPECT(0x67, gbc.readMem(0x90e8));
        EXPECT(0xe9, gbc.readMem(0x9be1));
        EXPECT(0x90, gbc.readMem(0x9be2));
        // CD 0104
        gbc.setState(0x3662, 0xf2f8, 0xee80, 0xac0b, 0x2048, 0x2821, 0x0, 0x0);
        gbc.writeMem(0x3662, { 0xcd, 0x32, 0x13 });
        gbc.writeMem(0xf2f6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xf2f6, gbc.sp());
        EXPECT(0x1332, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x65, gbc.readMem(0xf2f6));
        EXPECT(0x36, gbc.readMem(0xf2f7));
        // CD 0105
        gbc.setState(0x8f82, 0xfde3, 0x21c0, 0xca64, 0x51fd, 0x9c76, 0x1, 0x0);
        gbc.writeMem(0x8f82, { 0xcd, 0xaf, 0x46 });
        gbc.writeMem(0xfde1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xfde1, gbc.sp());
        EXPECT(0x46af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8f82));
        EXPECT(0xaf, gbc.readMem(0x8f83));
        EXPECT(0x46, gbc.readMem(0x8f84));
        EXPECT(0x85, gbc.readMem(0xfde1));
        EXPECT(0x8f, gbc.readMem(0xfde2));
        // CD 0106
        gbc.setState(0x3783, 0xba43, 0xc50, 0x36a2, 0xae1e, 0xb658, 0x1, 0x0);
        gbc.writeMem(0x3783, { 0xcd, 0x33, 0x35 });
        gbc.writeMem(0xba41, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xba41, gbc.sp());
        EXPECT(0x3533, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xba41));
        EXPECT(0x37, gbc.readMem(0xba42));
        // CD 0108
        gbc.setState(0xb531, 0xc444, 0x5e50, 0x1b77, 0xfeaf, 0x5650, 0x0, 0x1);
        gbc.writeMem(0xb531, { 0xcd, 0xb, 0xe1 });
        gbc.writeMem(0xc442, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xc442, gbc.sp());
        EXPECT(0xe10b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb531));
        EXPECT(0xb, gbc.readMem(0xb532));
        EXPECT(0xe1, gbc.readMem(0xb533));
        EXPECT(0x34, gbc.readMem(0xc442));
        EXPECT(0xb5, gbc.readMem(0xc443));
        // CD 0109
        gbc.setState(0xe587, 0xbc11, 0x8f90, 0x3464, 0x4324, 0xa197, 0x1, 0x0);
        gbc.writeMem(0xbc0f, { 0x0, 0x0 });
        gbc.writeMem(0xe587, { 0xcd, 0x71, 0x60 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xbc0f, gbc.sp());
        EXPECT(0x6071, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8a, gbc.readMem(0xbc0f));
        EXPECT(0xe5, gbc.readMem(0xbc10));
        EXPECT(0xcd, gbc.readMem(0xe587));
        EXPECT(0x71, gbc.readMem(0xe588));
        EXPECT(0x60, gbc.readMem(0xe589));
        // CD 010A
        gbc.setState(0xda9a, 0xf418, 0xb5e0, 0xc4c9, 0xa01e, 0x94bf, 0x0, 0x0);
        gbc.writeMem(0xda9a, { 0xcd, 0x43, 0x4b });
        gbc.writeMem(0xf416, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xf416, gbc.sp());
        EXPECT(0x4b43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xda9a));
        EXPECT(0x43, gbc.readMem(0xda9b));
        EXPECT(0x4b, gbc.readMem(0xda9c));
        EXPECT(0x9d, gbc.readMem(0xf416));
        EXPECT(0xda, gbc.readMem(0xf417));
        // CD 010E
        gbc.setState(0x3b2d, 0xfcd0, 0xb3f0, 0x2830, 0x8f9b, 0x5bf7, 0x1, 0x0);
        gbc.writeMem(0x3b2d, { 0xcd, 0xeb, 0xf5 });
        gbc.writeMem(0xfcce, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xfcce, gbc.sp());
        EXPECT(0xf5eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x30, gbc.readMem(0xfcce));
        EXPECT(0x3b, gbc.readMem(0xfccf));
        // CD 0111
        gbc.setState(0x4ac8, 0xae1c, 0xd140, 0x5e2d, 0x69c4, 0xd7f1, 0x1, 0x1);
        gbc.writeMem(0x4ac8, { 0xcd, 0x3d, 0x46 });
        gbc.writeMem(0xae1a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xae1a, gbc.sp());
        EXPECT(0x463d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae1a));
        EXPECT(0x4a, gbc.readMem(0xae1b));
        // CD 0114
        gbc.setState(0x3499, 0xde6f, 0x9970, 0xffa6, 0xa7df, 0xdfbe, 0x1, 0x0);
        gbc.writeMem(0x3499, { 0xcd, 0x55, 0x9d });
        gbc.writeMem(0xde6d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xde6d, gbc.sp());
        EXPECT(0x9d55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9c, gbc.readMem(0xde6d));
        EXPECT(0x34, gbc.readMem(0xde6e));
        // CD 0116
        gbc.setState(0x2989, 0xf219, 0x36e0, 0x7307, 0xf1c2, 0x74ae, 0x1, 0x1);
        gbc.writeMem(0x2989, { 0xcd, 0x5c, 0x3c });
        gbc.writeMem(0xf217, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xf217, gbc.sp());
        EXPECT(0x3c5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0xf217));
        EXPECT(0x29, gbc.readMem(0xf218));
        // CD 0117
        gbc.setState(0x4801, 0xb7a9, 0xfd0, 0x2ab7, 0x4854, 0x6816, 0x1, 0x0);
        gbc.writeMem(0x4801, { 0xcd, 0xec, 0x5b });
        gbc.writeMem(0xb7a7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xb7a7, gbc.sp());
        EXPECT(0x5bec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0xb7a7));
        EXPECT(0x48, gbc.readMem(0xb7a8));
        // CD 0119
        gbc.setState(0x6eca, 0xeb1d, 0xcd0, 0xcc58, 0x3f79, 0x2947, 0x1, 0x1);
        gbc.writeMem(0x6eca, { 0xcd, 0x41, 0x39 });
        gbc.writeMem(0xeb1b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xeb1b, gbc.sp());
        EXPECT(0x3941, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xeb1b));
        EXPECT(0x6e, gbc.readMem(0xeb1c));
        // CD 011A
        gbc.setState(0x8d77, 0xeba3, 0x3d0, 0x7cbf, 0x7eeb, 0x596, 0x1, 0x1);
        gbc.writeMem(0x8d77, { 0xcd, 0x68, 0x8 });
        gbc.writeMem(0xeba1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xeba1, gbc.sp());
        EXPECT(0x868, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8d77));
        EXPECT(0x68, gbc.readMem(0x8d78));
        EXPECT(0x8, gbc.readMem(0x8d79));
        EXPECT(0x7a, gbc.readMem(0xeba1));
        EXPECT(0x8d, gbc.readMem(0xeba2));
        // CD 011C
        gbc.setState(0x6177, 0x97f8, 0xee30, 0xa588, 0xde18, 0xcf29, 0x1, 0x0);
        gbc.writeMem(0x6177, { 0xcd, 0x13, 0x23 });
        gbc.writeMem(0x97f6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x97f6, gbc.sp());
        EXPECT(0x2313, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7a, gbc.readMem(0x97f6));
        EXPECT(0x61, gbc.readMem(0x97f7));
        // CD 011D
        gbc.setState(0x7c3a, 0xdb75, 0x25c0, 0xf863, 0x8800, 0xd818, 0x0, 0x1);
        gbc.writeMem(0x7c3a, { 0xcd, 0x46, 0xd0 });
        gbc.writeMem(0xdb73, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xdb73, gbc.sp());
        EXPECT(0xd046, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3d, gbc.readMem(0xdb73));
        EXPECT(0x7c, gbc.readMem(0xdb74));
        // CD 011F
        gbc.setState(0xb0f1, 0xa254, 0x75e0, 0xb957, 0x9551, 0x4d14, 0x1, 0x1);
        gbc.writeMem(0xa252, { 0x0, 0x0 });
        gbc.writeMem(0xb0f1, { 0xcd, 0x55, 0x8e });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xa252, gbc.sp());
        EXPECT(0x8e55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf4, gbc.readMem(0xa252));
        EXPECT(0xb0, gbc.readMem(0xa253));
        EXPECT(0xcd, gbc.readMem(0xb0f1));
        EXPECT(0x55, gbc.readMem(0xb0f2));
        EXPECT(0x8e, gbc.readMem(0xb0f3));
        // CD 0120
        gbc.setState(0xaa92, 0xea27, 0x71c0, 0x854c, 0x252d, 0xdc75, 0x1, 0x0);
        gbc.writeMem(0xaa92, { 0xcd, 0xb2, 0xfa });
        gbc.writeMem(0xea25, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xea25, gbc.sp());
        EXPECT(0xfab2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xaa92));
        EXPECT(0xb2, gbc.readMem(0xaa93));
        EXPECT(0xfa, gbc.readMem(0xaa94));
        EXPECT(0x95, gbc.readMem(0xea25));
        EXPECT(0xaa, gbc.readMem(0xea26));
        // CD 0122
        gbc.setState(0x39cc, 0xbedc, 0x8e60, 0x677b, 0x31e4, 0x2758, 0x0, 0x1);
        gbc.writeMem(0x39cc, { 0xcd, 0x30, 0xc5 });
        gbc.writeMem(0xbeda, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xbeda, gbc.sp());
        EXPECT(0xc530, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xbeda));
        EXPECT(0x39, gbc.readMem(0xbedb));
        // CD 0123
        gbc.setState(0x7926, 0xcad4, 0x51d0, 0x89a6, 0xb19d, 0x333f, 0x0, 0x1);
        gbc.writeMem(0x7926, { 0xcd, 0xe8, 0x36 });
        gbc.writeMem(0xcad2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xcad2, gbc.sp());
        EXPECT(0x36e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x29, gbc.readMem(0xcad2));
        EXPECT(0x79, gbc.readMem(0xcad3));
        // CD 0125
        gbc.setState(0x80d, 0xadad, 0xf360, 0x9395, 0xa97d, 0xea8f, 0x0, 0x1);
        gbc.writeMem(0x80d, { 0xcd, 0x7a, 0xd4 });
        gbc.writeMem(0xadab, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xadab, gbc.sp());
        EXPECT(0xd47a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x10, gbc.readMem(0xadab));
        EXPECT(0x8, gbc.readMem(0xadac));
        // CD 0126
        gbc.setState(0x4aa6, 0xc953, 0x35b0, 0xd780, 0xf9c8, 0x25a2, 0x0, 0x1);
        gbc.writeMem(0x4aa6, { 0xcd, 0xf1, 0x9a });
        gbc.writeMem(0xc951, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xc951, gbc.sp());
        EXPECT(0x9af1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa9, gbc.readMem(0xc951));
        EXPECT(0x4a, gbc.readMem(0xc952));
        // CD 0127
        gbc.setState(0x5f8d, 0x8086, 0xba60, 0xcd82, 0x11d5, 0x3c81, 0x0, 0x1);
        gbc.writeMem(0x5f8d, { 0xcd, 0xf8, 0xf9 });
        gbc.writeMem(0x8084, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x8084, gbc.sp());
        EXPECT(0xf9f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0x8084));
        EXPECT(0x5f, gbc.readMem(0x8085));
        // CD 0133
        gbc.setState(0x5552, 0x8890, 0x16e0, 0x6cb1, 0x5ade, 0xf77f, 0x0, 0x1);
        gbc.writeMem(0x5552, { 0xcd, 0xf9, 0x5b });
        gbc.writeMem(0x888e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x888e, gbc.sp());
        EXPECT(0x5bf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x55, gbc.readMem(0x888e));
        EXPECT(0x55, gbc.readMem(0x888f));
        // CD 0135
        gbc.setState(0xcc22, 0xbec8, 0x8620, 0xaabd, 0x16b9, 0x58c9, 0x0, 0x0);
        gbc.writeMem(0xbec6, { 0x0, 0x0 });
        gbc.writeMem(0xcc22, { 0xcd, 0xca, 0x68 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xbec6, gbc.sp());
        EXPECT(0x68ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x25, gbc.readMem(0xbec6));
        EXPECT(0xcc, gbc.readMem(0xbec7));
        EXPECT(0xcd, gbc.readMem(0xcc22));
        EXPECT(0xca, gbc.readMem(0xcc23));
        EXPECT(0x68, gbc.readMem(0xcc24));
        // CD 0136
        gbc.setState(0x5b75, 0xc1a4, 0x24e0, 0x9a06, 0xdb90, 0xcb61, 0x0, 0x1);
        gbc.writeMem(0x5b75, { 0xcd, 0x96, 0x23 });
        gbc.writeMem(0xc1a2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xc1a2, gbc.sp());
        EXPECT(0x2396, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xc1a2));
        EXPECT(0x5b, gbc.readMem(0xc1a3));
        // CD 0139
        gbc.setState(0xcc1c, 0xa345, 0x3fe0, 0xd8f9, 0xbec9, 0x2aed, 0x0, 0x1);
        gbc.writeMem(0xa343, { 0x0, 0x0 });
        gbc.writeMem(0xcc1c, { 0xcd, 0x7a, 0x68 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xa343, gbc.sp());
        EXPECT(0x687a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1f, gbc.readMem(0xa343));
        EXPECT(0xcc, gbc.readMem(0xa344));
        EXPECT(0xcd, gbc.readMem(0xcc1c));
        EXPECT(0x7a, gbc.readMem(0xcc1d));
        EXPECT(0x68, gbc.readMem(0xcc1e));
        // CD 013A
        gbc.setState(0x452d, 0x8a54, 0xf140, 0x5582, 0x4792, 0x2035, 0x1, 0x0);
        gbc.writeMem(0x452d, { 0xcd, 0xda, 0x2b });
        gbc.writeMem(0x8a52, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x8a52, gbc.sp());
        EXPECT(0x2bda, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x30, gbc.readMem(0x8a52));
        EXPECT(0x45, gbc.readMem(0x8a53));
        // CD 013B
        gbc.setState(0x5f8e, 0xbc5f, 0x4020, 0x3982, 0xd0b6, 0x39a8, 0x0, 0x0);
        gbc.writeMem(0x5f8e, { 0xcd, 0xf9, 0x17 });
        gbc.writeMem(0xbc5d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xbc5d, gbc.sp());
        EXPECT(0x17f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x91, gbc.readMem(0xbc5d));
        EXPECT(0x5f, gbc.readMem(0xbc5e));
        // CD 0143
        gbc.setState(0x495f, 0xc6af, 0x4140, 0x5000, 0x27f5, 0x9910, 0x0, 0x1);
        gbc.writeMem(0x495f, { 0xcd, 0xf8, 0x1a });
        gbc.writeMem(0xc6ad, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xc6ad, gbc.sp());
        EXPECT(0x1af8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0xc6ad));
        EXPECT(0x49, gbc.readMem(0xc6ae));
        // CD 0147
        gbc.setState(0x3da8, 0x9e37, 0x12e0, 0xed, 0xd53, 0x9d50, 0x1, 0x0);
        gbc.writeMem(0x3da8, { 0xcd, 0xbe, 0x7a });
        gbc.writeMem(0x9e35, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x9e35, gbc.sp());
        EXPECT(0x7abe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xab, gbc.readMem(0x9e35));
        EXPECT(0x3d, gbc.readMem(0x9e36));
        // CD 0148
        gbc.setState(0x5241, 0xdeb2, 0xde0, 0xdbdd, 0x7401, 0x16ba, 0x0, 0x0);
        gbc.writeMem(0x5241, { 0xcd, 0x77, 0x7f });
        gbc.writeMem(0xdeb0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xdeb0, gbc.sp());
        EXPECT(0x7f77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x44, gbc.readMem(0xdeb0));
        EXPECT(0x52, gbc.readMem(0xdeb1));
        // CD 0149
        gbc.setState(0x505d, 0x8a5c, 0x40a0, 0xd030, 0x29cc, 0x8221, 0x0, 0x0);
        gbc.writeMem(0x505d, { 0xcd, 0x10, 0x2d });
        gbc.writeMem(0x8a5a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x8a5a, gbc.sp());
        EXPECT(0x2d10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0x8a5a));
        EXPECT(0x50, gbc.readMem(0x8a5b));
        // CD 014A
        gbc.setState(0x70e0, 0xfc4a, 0xe2d0, 0xf926, 0x1495, 0x3492, 0x1, 0x1);
        gbc.writeMem(0x70e0, { 0xcd, 0xfb, 0x3e });
        gbc.writeMem(0xfc48, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xfc48, gbc.sp());
        EXPECT(0x3efb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe3, gbc.readMem(0xfc48));
        EXPECT(0x70, gbc.readMem(0xfc49));
        // CD 014B
        gbc.setState(0x9ed2, 0xbc7b, 0x1c0, 0xea8a, 0x414d, 0x7887, 0x0, 0x0);
        gbc.writeMem(0x9ed2, { 0xcd, 0xf5, 0x36 });
        gbc.writeMem(0xbc79, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xbc79, gbc.sp());
        EXPECT(0x36f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9ed2));
        EXPECT(0xf5, gbc.readMem(0x9ed3));
        EXPECT(0x36, gbc.readMem(0x9ed4));
        EXPECT(0xd5, gbc.readMem(0xbc79));
        EXPECT(0x9e, gbc.readMem(0xbc7a));
        // CD 014D
        gbc.setState(0xb141, 0xecaa, 0x1080, 0x5e92, 0xee75, 0xc9e5, 0x1, 0x1);
        gbc.writeMem(0xb141, { 0xcd, 0x14, 0xd7 });
        gbc.writeMem(0xeca8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xeca8, gbc.sp());
        EXPECT(0xd714, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb141));
        EXPECT(0x14, gbc.readMem(0xb142));
        EXPECT(0xd7, gbc.readMem(0xb143));
        EXPECT(0x44, gbc.readMem(0xeca8));
        EXPECT(0xb1, gbc.readMem(0xeca9));
        // CD 0150
        gbc.setState(0xad2, 0x9c86, 0x2940, 0xf785, 0x85f5, 0xfc6f, 0x0, 0x1);
        gbc.writeMem(0xad2, { 0xcd, 0xe5, 0x7c });
        gbc.writeMem(0x9c84, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x9c84, gbc.sp());
        EXPECT(0x7ce5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd5, gbc.readMem(0x9c84));
        EXPECT(0xa, gbc.readMem(0x9c85));
        // CD 0151
        gbc.setState(0xde78, 0xf73a, 0xa870, 0xaa81, 0x92c0, 0x4f23, 0x0, 0x1);
        gbc.writeMem(0xde78, { 0xcd, 0x8c, 0xbe });
        gbc.writeMem(0xf738, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xf738, gbc.sp());
        EXPECT(0xbe8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xde78));
        EXPECT(0x8c, gbc.readMem(0xde79));
        EXPECT(0xbe, gbc.readMem(0xde7a));
        EXPECT(0x7b, gbc.readMem(0xf738));
        EXPECT(0xde, gbc.readMem(0xf739));
        // CD 0154
        gbc.setState(0x692a, 0xad77, 0xf920, 0xd570, 0xbd8d, 0xfbfd, 0x0, 0x0);
        gbc.writeMem(0x692a, { 0xcd, 0xa3, 0xb1 });
        gbc.writeMem(0xad75, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xad75, gbc.sp());
        EXPECT(0xb1a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2d, gbc.readMem(0xad75));
        EXPECT(0x69, gbc.readMem(0xad76));
        // CD 0156
        gbc.setState(0x631a, 0xc426, 0xbde0, 0xba39, 0xdf6c, 0x7da8, 0x0, 0x1);
        gbc.writeMem(0x631a, { 0xcd, 0x48, 0x83 });
        gbc.writeMem(0xc424, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xc424, gbc.sp());
        EXPECT(0x8348, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1d, gbc.readMem(0xc424));
        EXPECT(0x63, gbc.readMem(0xc425));
        // CD 0158
        gbc.setState(0x4ca7, 0xf104, 0x88a0, 0x90c3, 0xd3b7, 0xa137, 0x1, 0x1);
        gbc.writeMem(0x4ca7, { 0xcd, 0x82, 0xdf });
        gbc.writeMem(0xf102, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xf102, gbc.sp());
        EXPECT(0xdf82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaa, gbc.readMem(0xf102));
        EXPECT(0x4c, gbc.readMem(0xf103));
        // CD 0159
        gbc.setState(0x8fa, 0xc608, 0xf540, 0xf4c9, 0x4e43, 0x6b38, 0x0, 0x0);
        gbc.writeMem(0x8fa, { 0xcd, 0xa1, 0x24 });
        gbc.writeMem(0xc606, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xc606, gbc.sp());
        EXPECT(0x24a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfd, gbc.readMem(0xc606));
        EXPECT(0x8, gbc.readMem(0xc607));
        // CD 015A
        gbc.setState(0xcf65, 0xd0ad, 0x9780, 0x7662, 0xe2e5, 0x9075, 0x0, 0x0);
        gbc.writeMem(0xcf65, { 0xcd, 0xfe, 0x36 });
        gbc.writeMem(0xd0ab, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xd0ab, gbc.sp());
        EXPECT(0x36fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xcf65));
        EXPECT(0xfe, gbc.readMem(0xcf66));
        EXPECT(0x36, gbc.readMem(0xcf67));
        EXPECT(0x68, gbc.readMem(0xd0ab));
        EXPECT(0xcf, gbc.readMem(0xd0ac));
        // CD 015C
        gbc.setState(0x770c, 0xb3a2, 0x83b0, 0x7803, 0xca6e, 0x6349, 0x1, 0x0);
        gbc.writeMem(0x770c, { 0xcd, 0x7c, 0x2a });
        gbc.writeMem(0xb3a0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xb3a0, gbc.sp());
        EXPECT(0x2a7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf, gbc.readMem(0xb3a0));
        EXPECT(0x77, gbc.readMem(0xb3a1));
        // CD 015E
        gbc.setState(0xab72, 0x838f, 0x1730, 0x1079, 0xf25a, 0x557, 0x0, 0x1);
        gbc.writeMem(0x838d, { 0x0, 0x0 });
        gbc.writeMem(0xab72, { 0xcd, 0x68, 0x79 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x838d, gbc.sp());
        EXPECT(0x7968, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x75, gbc.readMem(0x838d));
        EXPECT(0xab, gbc.readMem(0x838e));
        EXPECT(0xcd, gbc.readMem(0xab72));
        EXPECT(0x68, gbc.readMem(0xab73));
        EXPECT(0x79, gbc.readMem(0xab74));
        // CD 0160
        gbc.setState(0x7c02, 0x98fa, 0x8ab0, 0x154b, 0xd365, 0x2628, 0x0, 0x1);
        gbc.writeMem(0x7c02, { 0xcd, 0x25, 0x49 });
        gbc.writeMem(0x98f8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x98f8, gbc.sp());
        EXPECT(0x4925, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5, gbc.readMem(0x98f8));
        EXPECT(0x7c, gbc.readMem(0x98f9));
        // CD 0162
        gbc.setState(0x8782, 0xb719, 0x3400, 0xb7c2, 0xd1d2, 0xa84a, 0x0, 0x0);
        gbc.writeMem(0x8782, { 0xcd, 0xf3, 0x5 });
        gbc.writeMem(0xb717, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xb717, gbc.sp());
        EXPECT(0x5f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8782));
        EXPECT(0xf3, gbc.readMem(0x8783));
        EXPECT(0x5, gbc.readMem(0x8784));
        EXPECT(0x85, gbc.readMem(0xb717));
        EXPECT(0x87, gbc.readMem(0xb718));
        // CD 0163
        gbc.setState(0x27d8, 0xced2, 0x1260, 0x1590, 0x1fd9, 0xa467, 0x1, 0x1);
        gbc.writeMem(0x27d8, { 0xcd, 0xec, 0x30 });
        gbc.writeMem(0xced0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xced0, gbc.sp());
        EXPECT(0x30ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdb, gbc.readMem(0xced0));
        EXPECT(0x27, gbc.readMem(0xced1));
        // CD 0164
        gbc.setState(0x774d, 0xa2d2, 0x6a80, 0xc034, 0x4ed2, 0xbe26, 0x0, 0x0);
        gbc.writeMem(0x774d, { 0xcd, 0x72, 0xf1 });
        gbc.writeMem(0xa2d0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xa2d0, gbc.sp());
        EXPECT(0xf172, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0xa2d0));
        EXPECT(0x77, gbc.readMem(0xa2d1));
        // CD 0165
        gbc.setState(0x90cc, 0xfd18, 0x9f60, 0xd2e3, 0x2e22, 0xad5e, 0x0, 0x0);
        gbc.writeMem(0x90cc, { 0xcd, 0x59, 0xc });
        gbc.writeMem(0xfd16, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xfd16, gbc.sp());
        EXPECT(0xc59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x90cc));
        EXPECT(0x59, gbc.readMem(0x90cd));
        EXPECT(0xc, gbc.readMem(0x90ce));
        EXPECT(0xcf, gbc.readMem(0xfd16));
        EXPECT(0x90, gbc.readMem(0xfd17));
        // CD 0167
        gbc.setState(0x1aea, 0xa6b0, 0x23f0, 0x3f26, 0xb52a, 0xd582, 0x1, 0x1);
        gbc.writeMem(0x1aea, { 0xcd, 0x4c, 0xb4 });
        gbc.writeMem(0xa6ae, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xa6ae, gbc.sp());
        EXPECT(0xb44c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xed, gbc.readMem(0xa6ae));
        EXPECT(0x1a, gbc.readMem(0xa6af));
        // CD 0168
        gbc.setState(0x15e7, 0x8cc8, 0xc150, 0x99c7, 0x6ce1, 0xe40a, 0x1, 0x0);
        gbc.writeMem(0x15e7, { 0xcd, 0xed, 0x47 });
        gbc.writeMem(0x8cc6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x8cc6, gbc.sp());
        EXPECT(0x47ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0x8cc6));
        EXPECT(0x15, gbc.readMem(0x8cc7));
        // CD 0169
        gbc.setState(0x5250, 0xe5c8, 0xa360, 0x447c, 0x60b8, 0xbdab, 0x1, 0x1);
        gbc.writeMem(0x5250, { 0xcd, 0xbc, 0x92 });
        gbc.writeMem(0xe5c6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xe5c6, gbc.sp());
        EXPECT(0x92bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xe5c6));
        EXPECT(0x52, gbc.readMem(0xe5c7));
        // CD 016A
        gbc.setState(0xd3b5, 0x8fed, 0x5cd0, 0x7c70, 0xc72e, 0x2699, 0x0, 0x1);
        gbc.writeMem(0x8feb, { 0x0, 0x0 });
        gbc.writeMem(0xd3b5, { 0xcd, 0xfa, 0xe4 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x8feb, gbc.sp());
        EXPECT(0xe4fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb8, gbc.readMem(0x8feb));
        EXPECT(0xd3, gbc.readMem(0x8fec));
        EXPECT(0xcd, gbc.readMem(0xd3b5));
        EXPECT(0xfa, gbc.readMem(0xd3b6));
        EXPECT(0xe4, gbc.readMem(0xd3b7));
        // CD 016B
        gbc.setState(0xcdbb, 0xa2a3, 0xe290, 0x3a76, 0x12ff, 0xd01c, 0x1, 0x1);
        gbc.writeMem(0xa2a1, { 0x0, 0x0 });
        gbc.writeMem(0xcdbb, { 0xcd, 0xa2, 0xaf });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xa2a1, gbc.sp());
        EXPECT(0xafa2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0xa2a1));
        EXPECT(0xcd, gbc.readMem(0xa2a2));
        EXPECT(0xcd, gbc.readMem(0xcdbb));
        EXPECT(0xa2, gbc.readMem(0xcdbc));
        EXPECT(0xaf, gbc.readMem(0xcdbd));
        // CD 016C
        gbc.setState(0x6dc5, 0x9caa, 0x8870, 0x6c80, 0x60c8, 0x4444, 0x1, 0x1);
        gbc.writeMem(0x6dc5, { 0xcd, 0xc, 0xfa });
        gbc.writeMem(0x9ca8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x9ca8, gbc.sp());
        EXPECT(0xfa0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc8, gbc.readMem(0x9ca8));
        EXPECT(0x6d, gbc.readMem(0x9ca9));
        // CD 016E
        gbc.setState(0xeb0e, 0xd9c2, 0x6fb0, 0x192b, 0xf144, 0x26b3, 0x0, 0x0);
        gbc.writeMem(0xd9c0, { 0x0, 0x0 });
        gbc.writeMem(0xeb0e, { 0xcd, 0xa1, 0x42 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xd9c0, gbc.sp());
        EXPECT(0x42a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x11, gbc.readMem(0xd9c0));
        EXPECT(0xeb, gbc.readMem(0xd9c1));
        EXPECT(0xcd, gbc.readMem(0xeb0e));
        EXPECT(0xa1, gbc.readMem(0xeb0f));
        EXPECT(0x42, gbc.readMem(0xeb10));
        // CD 0171
        gbc.setState(0x5650, 0x85e9, 0x31d0, 0x9f, 0x5d30, 0x6df, 0x0, 0x0);
        gbc.writeMem(0x5650, { 0xcd, 0x58, 0xaf });
        gbc.writeMem(0x85e7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x85e7, gbc.sp());
        EXPECT(0xaf58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0x85e7));
        EXPECT(0x56, gbc.readMem(0x85e8));
        // CD 0173
        gbc.setState(0x4607, 0xd7be, 0xe8b0, 0xda56, 0xc2de, 0x1fa4, 0x1, 0x1);
        gbc.writeMem(0x4607, { 0xcd, 0x35, 0x7d });
        gbc.writeMem(0xd7bc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xd7bc, gbc.sp());
        EXPECT(0x7d35, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa, gbc.readMem(0xd7bc));
        EXPECT(0x46, gbc.readMem(0xd7bd));
        // CD 0176
        gbc.setState(0x1119, 0x9356, 0x2ca0, 0x3fa3, 0x8e95, 0x654b, 0x1, 0x1);
        gbc.writeMem(0x1119, { 0xcd, 0x1b, 0x6e });
        gbc.writeMem(0x9354, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x9354, gbc.sp());
        EXPECT(0x6e1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0x9354));
        EXPECT(0x11, gbc.readMem(0x9355));
        // CD 0177
        gbc.setState(0x768e, 0x85e0, 0x60b0, 0xef9c, 0x2a02, 0xe669, 0x0, 0x0);
        gbc.writeMem(0x768e, { 0xcd, 0x7b, 0xdd });
        gbc.writeMem(0x85de, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x85de, gbc.sp());
        EXPECT(0xdd7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x91, gbc.readMem(0x85de));
        EXPECT(0x76, gbc.readMem(0x85df));
        // CD 0179
        gbc.setState(0xe315, 0xdad6, 0xfb70, 0xe15b, 0x184, 0xf631, 0x0, 0x1);
        gbc.writeMem(0xdad4, { 0x0, 0x0 });
        gbc.writeMem(0xe315, { 0xcd, 0x2f, 0xcf });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xdad4, gbc.sp());
        EXPECT(0xcf2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x18, gbc.readMem(0xdad4));
        EXPECT(0xe3, gbc.readMem(0xdad5));
        EXPECT(0xcd, gbc.readMem(0xe315));
        EXPECT(0x2f, gbc.readMem(0xe316));
        EXPECT(0xcf, gbc.readMem(0xe317));
        // CD 017A
        gbc.setState(0xc857, 0xef36, 0x74a0, 0x74a9, 0xc69b, 0x8a5a, 0x0, 0x1);
        gbc.writeMem(0xc857, { 0xcd, 0x3, 0x7f });
        gbc.writeMem(0xef34, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xef34, gbc.sp());
        EXPECT(0x7f03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc857));
        EXPECT(0x3, gbc.readMem(0xc858));
        EXPECT(0x7f, gbc.readMem(0xc859));
        EXPECT(0x5a, gbc.readMem(0xef34));
        EXPECT(0xc8, gbc.readMem(0xef35));
        // CD 017E
        gbc.setState(0x68db, 0x8a5c, 0x9c30, 0x8200, 0x7b10, 0x2335, 0x0, 0x0);
        gbc.writeMem(0x68db, { 0xcd, 0x3c, 0x87 });
        gbc.writeMem(0x8a5a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x8a5a, gbc.sp());
        EXPECT(0x873c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xde, gbc.readMem(0x8a5a));
        EXPECT(0x68, gbc.readMem(0x8a5b));
        // CD 0182
        gbc.setState(0xa052, 0xd75b, 0x95a0, 0xe7ed, 0xbb12, 0xa822, 0x0, 0x0);
        gbc.writeMem(0xa052, { 0xcd, 0x35, 0x67 });
        gbc.writeMem(0xd759, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xd759, gbc.sp());
        EXPECT(0x6735, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa052));
        EXPECT(0x35, gbc.readMem(0xa053));
        EXPECT(0x67, gbc.readMem(0xa054));
        EXPECT(0x55, gbc.readMem(0xd759));
        EXPECT(0xa0, gbc.readMem(0xd75a));
        // CD 0183
        gbc.setState(0x9ad6, 0xcd89, 0x6fe0, 0xfd84, 0xc1b7, 0xd575, 0x0, 0x1);
        gbc.writeMem(0x9ad6, { 0xcd, 0x13, 0x55 });
        gbc.writeMem(0xcd87, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xcd87, gbc.sp());
        EXPECT(0x5513, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9ad6));
        EXPECT(0x13, gbc.readMem(0x9ad7));
        EXPECT(0x55, gbc.readMem(0x9ad8));
        EXPECT(0xd9, gbc.readMem(0xcd87));
        EXPECT(0x9a, gbc.readMem(0xcd88));
        // CD 0187
        gbc.setState(0x7cbd, 0x8687, 0x16b0, 0x4849, 0x7638, 0xe1dc, 0x0, 0x0);
        gbc.writeMem(0x7cbd, { 0xcd, 0x65, 0x1 });
        gbc.writeMem(0x8685, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x8685, gbc.sp());
        EXPECT(0x165, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc0, gbc.readMem(0x8685));
        EXPECT(0x7c, gbc.readMem(0x8686));
        // CD 018A
        gbc.setState(0x6754, 0xbe03, 0xbef0, 0xa182, 0xc8d, 0x67b1, 0x1, 0x1);
        gbc.writeMem(0x6754, { 0xcd, 0x7f, 0xf0 });
        gbc.writeMem(0xbe01, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xbe01, gbc.sp());
        EXPECT(0xf07f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x57, gbc.readMem(0xbe01));
        EXPECT(0x67, gbc.readMem(0xbe02));
        // CD 018D
        gbc.setState(0x8449, 0xfcc0, 0xfef0, 0x76b0, 0x92e3, 0xdab6, 0x1, 0x1);
        gbc.writeMem(0x8449, { 0xcd, 0xc4, 0xbb });
        gbc.writeMem(0xfcbe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xfcbe, gbc.sp());
        EXPECT(0xbbc4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8449));
        EXPECT(0xc4, gbc.readMem(0x844a));
        EXPECT(0xbb, gbc.readMem(0x844b));
        EXPECT(0x4c, gbc.readMem(0xfcbe));
        EXPECT(0x84, gbc.readMem(0xfcbf));
        // CD 018E
        gbc.setState(0x7da7, 0xb9b1, 0xcff0, 0x6fca, 0xf949, 0xdfd3, 0x0, 0x0);
        gbc.writeMem(0x7da7, { 0xcd, 0xf8, 0xdf });
        gbc.writeMem(0xb9af, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xb9af, gbc.sp());
        EXPECT(0xdff8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaa, gbc.readMem(0xb9af));
        EXPECT(0x7d, gbc.readMem(0xb9b0));
        // CD 018F
        gbc.setState(0xad11, 0xa610, 0x5c30, 0x901b, 0x8fbb, 0x63ec, 0x1, 0x0);
        gbc.writeMem(0xa60e, { 0x0, 0x0 });
        gbc.writeMem(0xad11, { 0xcd, 0xee, 0xb6 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xa60e, gbc.sp());
        EXPECT(0xb6ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x14, gbc.readMem(0xa60e));
        EXPECT(0xad, gbc.readMem(0xa60f));
        EXPECT(0xcd, gbc.readMem(0xad11));
        EXPECT(0xee, gbc.readMem(0xad12));
        EXPECT(0xb6, gbc.readMem(0xad13));
        // CD 0191
        gbc.setState(0xc94d, 0xe5d6, 0x6d20, 0xc97c, 0xb074, 0x50a4, 0x0, 0x1);
        gbc.writeMem(0xc94d, { 0xcd, 0x5b, 0xb });
        gbc.writeMem(0xe5d4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xe5d4, gbc.sp());
        EXPECT(0xb5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc94d));
        EXPECT(0x5b, gbc.readMem(0xc94e));
        EXPECT(0xb, gbc.readMem(0xc94f));
        EXPECT(0x50, gbc.readMem(0xe5d4));
        EXPECT(0xc9, gbc.readMem(0xe5d5));
        // CD 0193
        gbc.setState(0xc9ee, 0xb753, 0x20f0, 0x8364, 0xbec9, 0x8e34, 0x0, 0x0);
        gbc.writeMem(0xb751, { 0x0, 0x0 });
        gbc.writeMem(0xc9ee, { 0xcd, 0x9a, 0x7b });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xb751, gbc.sp());
        EXPECT(0x7b9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0xb751));
        EXPECT(0xc9, gbc.readMem(0xb752));
        EXPECT(0xcd, gbc.readMem(0xc9ee));
        EXPECT(0x9a, gbc.readMem(0xc9ef));
        EXPECT(0x7b, gbc.readMem(0xc9f0));
        // CD 019B
        gbc.setState(0x89, 0xaaee, 0x8390, 0xad89, 0xf4f8, 0xa664, 0x0, 0x0);
        gbc.writeMem(0x89, { 0xcd, 0xce, 0x6e });
        gbc.writeMem(0xaaec, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xaaec, gbc.sp());
        EXPECT(0x6ece, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0xaaec));
        EXPECT(0x0, gbc.readMem(0xaaed));
        // CD 019D
        gbc.setState(0x3807, 0xa3d7, 0xbdf0, 0x7079, 0x60e8, 0x708b, 0x1, 0x1);
        gbc.writeMem(0x3807, { 0xcd, 0xe, 0x93 });
        gbc.writeMem(0xa3d5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xa3d5, gbc.sp());
        EXPECT(0x930e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa, gbc.readMem(0xa3d5));
        EXPECT(0x38, gbc.readMem(0xa3d6));
        // CD 01A1
        gbc.setState(0x8d83, 0x8326, 0xb620, 0x2df7, 0xbbdd, 0x1686, 0x1, 0x0);
        gbc.writeMem(0x8324, { 0x0, 0x0 });
        gbc.writeMem(0x8d83, { 0xcd, 0xfb, 0x5d });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x8324, gbc.sp());
        EXPECT(0x5dfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0x8324));
        EXPECT(0x8d, gbc.readMem(0x8325));
        EXPECT(0xcd, gbc.readMem(0x8d83));
        EXPECT(0xfb, gbc.readMem(0x8d84));
        EXPECT(0x5d, gbc.readMem(0x8d85));
        // CD 01A2
        gbc.setState(0x9c4f, 0x99ff, 0xeec0, 0x4fa7, 0x9d87, 0x995c, 0x1, 0x0);
        gbc.writeMem(0x99fd, { 0x0, 0x0 });
        gbc.writeMem(0x9c4f, { 0xcd, 0x46, 0x51 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x99fd, gbc.sp());
        EXPECT(0x5146, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0x99fd));
        EXPECT(0x9c, gbc.readMem(0x99fe));
        EXPECT(0xcd, gbc.readMem(0x9c4f));
        EXPECT(0x46, gbc.readMem(0x9c50));
        EXPECT(0x51, gbc.readMem(0x9c51));
        // CD 01A8
        gbc.setState(0x7980, 0xd347, 0x5540, 0x223c, 0xf4de, 0x1fe, 0x1, 0x1);
        gbc.writeMem(0x7980, { 0xcd, 0xde, 0xfc });
        gbc.writeMem(0xd345, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xd345, gbc.sp());
        EXPECT(0xfcde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x83, gbc.readMem(0xd345));
        EXPECT(0x79, gbc.readMem(0xd346));
        // CD 01A9
        gbc.setState(0xa205, 0x9277, 0xdd80, 0x1c0e, 0xf987, 0x8458, 0x1, 0x0);
        gbc.writeMem(0x9275, { 0x0, 0x0 });
        gbc.writeMem(0xa205, { 0xcd, 0x11, 0x5a });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x9275, gbc.sp());
        EXPECT(0x5a11, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8, gbc.readMem(0x9275));
        EXPECT(0xa2, gbc.readMem(0x9276));
        EXPECT(0xcd, gbc.readMem(0xa205));
        EXPECT(0x11, gbc.readMem(0xa206));
        EXPECT(0x5a, gbc.readMem(0xa207));
        // CD 01AA
        gbc.setState(0xee63, 0xf729, 0x53a0, 0x3089, 0xc08f, 0x19f6, 0x1, 0x0);
        gbc.writeMem(0xee63, { 0xcd, 0xd7, 0x68 });
        gbc.writeMem(0xf727, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xf727, gbc.sp());
        EXPECT(0x68d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xee63));
        EXPECT(0xd7, gbc.readMem(0xee64));
        EXPECT(0x68, gbc.readMem(0xee65));
        EXPECT(0x66, gbc.readMem(0xf727));
        EXPECT(0xee, gbc.readMem(0xf728));
        // CD 01AB
        gbc.setState(0x364, 0xe1da, 0x4f0, 0x4e68, 0x7080, 0x3060, 0x1, 0x1);
        gbc.writeMem(0x364, { 0xcd, 0xc, 0x77 });
        gbc.writeMem(0xe1d8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xe1d8, gbc.sp());
        EXPECT(0x770c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x67, gbc.readMem(0xe1d8));
        EXPECT(0x3, gbc.readMem(0xe1d9));
        // CD 01AC
        gbc.setState(0xab6a, 0x882a, 0x58a0, 0xe70, 0x7376, 0x458c, 0x1, 0x1);
        gbc.writeMem(0x8828, { 0x0, 0x0 });
        gbc.writeMem(0xab6a, { 0xcd, 0x94, 0xf5 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x8828, gbc.sp());
        EXPECT(0xf594, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6d, gbc.readMem(0x8828));
        EXPECT(0xab, gbc.readMem(0x8829));
        EXPECT(0xcd, gbc.readMem(0xab6a));
        EXPECT(0x94, gbc.readMem(0xab6b));
        EXPECT(0xf5, gbc.readMem(0xab6c));
        // CD 01AE
        gbc.setState(0x4d57, 0x953b, 0x6b10, 0xa2bc, 0xc6be, 0x394, 0x0, 0x0);
        gbc.writeMem(0x4d57, { 0xcd, 0x4a, 0x30 });
        gbc.writeMem(0x9539, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x9539, gbc.sp());
        EXPECT(0x304a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5a, gbc.readMem(0x9539));
        EXPECT(0x4d, gbc.readMem(0x953a));
        // CD 01AF
        gbc.setState(0xba6f, 0x95f1, 0x6540, 0x4ce0, 0xc8a8, 0x6566, 0x1, 0x0);
        gbc.writeMem(0x95ef, { 0x0, 0x0 });
        gbc.writeMem(0xba6f, { 0xcd, 0xc4, 0xa9 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x95ef, gbc.sp());
        EXPECT(0xa9c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x72, gbc.readMem(0x95ef));
        EXPECT(0xba, gbc.readMem(0x95f0));
        EXPECT(0xcd, gbc.readMem(0xba6f));
        EXPECT(0xc4, gbc.readMem(0xba70));
        EXPECT(0xa9, gbc.readMem(0xba71));
        // CD 01B1
        gbc.setState(0xd87f, 0xb965, 0xed70, 0x1bde, 0xe57e, 0x14a1, 0x1, 0x0);
        gbc.writeMem(0xb963, { 0x0, 0x0 });
        gbc.writeMem(0xd87f, { 0xcd, 0x3f, 0x2c });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xb963, gbc.sp());
        EXPECT(0x2c3f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x82, gbc.readMem(0xb963));
        EXPECT(0xd8, gbc.readMem(0xb964));
        EXPECT(0xcd, gbc.readMem(0xd87f));
        EXPECT(0x3f, gbc.readMem(0xd880));
        EXPECT(0x2c, gbc.readMem(0xd881));
        // CD 01B2
        gbc.setState(0x2d3, 0xf435, 0xff0, 0xcf9b, 0xc952, 0x8004, 0x0, 0x0);
        gbc.writeMem(0x2d3, { 0xcd, 0xdf, 0xa6 });
        gbc.writeMem(0xf433, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xf433, gbc.sp());
        EXPECT(0xa6df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0xf433));
        EXPECT(0x2, gbc.readMem(0xf434));
        // CD 01B3
        gbc.setState(0xa617, 0xbd12, 0xf660, 0x85b9, 0x56ce, 0x6412, 0x1, 0x1);
        gbc.writeMem(0xa617, { 0xcd, 0xfb, 0x66 });
        gbc.writeMem(0xbd10, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xbd10, gbc.sp());
        EXPECT(0x66fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa617));
        EXPECT(0xfb, gbc.readMem(0xa618));
        EXPECT(0x66, gbc.readMem(0xa619));
        EXPECT(0x1a, gbc.readMem(0xbd10));
        EXPECT(0xa6, gbc.readMem(0xbd11));
        // CD 01B4
        gbc.setState(0xda28, 0xbe96, 0xe060, 0x1424, 0x665d, 0x8ccf, 0x0, 0x1);
        gbc.writeMem(0xbe94, { 0x0, 0x0 });
        gbc.writeMem(0xda28, { 0xcd, 0x25, 0x37 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xbe94, gbc.sp());
        EXPECT(0x3725, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2b, gbc.readMem(0xbe94));
        EXPECT(0xda, gbc.readMem(0xbe95));
        EXPECT(0xcd, gbc.readMem(0xda28));
        EXPECT(0x25, gbc.readMem(0xda29));
        EXPECT(0x37, gbc.readMem(0xda2a));
        // CD 01B7
        gbc.setState(0xbd8f, 0x8e8d, 0x1b40, 0xe69, 0xacb2, 0xf8c2, 0x0, 0x0);
        gbc.writeMem(0x8e8b, { 0x0, 0x0 });
        gbc.writeMem(0xbd8f, { 0xcd, 0x29, 0xb1 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x8e8b, gbc.sp());
        EXPECT(0xb129, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x92, gbc.readMem(0x8e8b));
        EXPECT(0xbd, gbc.readMem(0x8e8c));
        EXPECT(0xcd, gbc.readMem(0xbd8f));
        EXPECT(0x29, gbc.readMem(0xbd90));
        EXPECT(0xb1, gbc.readMem(0xbd91));
        // CD 01B8
        gbc.setState(0xa106, 0xad8a, 0x34f0, 0x4d75, 0xb276, 0x4db2, 0x1, 0x1);
        gbc.writeMem(0xa106, { 0xcd, 0x1d, 0x2 });
        gbc.writeMem(0xad88, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xad88, gbc.sp());
        EXPECT(0x21d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa106));
        EXPECT(0x1d, gbc.readMem(0xa107));
        EXPECT(0x2, gbc.readMem(0xa108));
        EXPECT(0x9, gbc.readMem(0xad88));
        EXPECT(0xa1, gbc.readMem(0xad89));
        // CD 01B9
        gbc.setState(0x2405, 0xf452, 0xdb40, 0xd185, 0x18bf, 0x6099, 0x0, 0x0);
        gbc.writeMem(0x2405, { 0xcd, 0x70, 0xea });
        gbc.writeMem(0xf450, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xf450, gbc.sp());
        EXPECT(0xea70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8, gbc.readMem(0xf450));
        EXPECT(0x24, gbc.readMem(0xf451));
        // CD 01BD
        gbc.setState(0x83b0, 0xe8ed, 0x1430, 0xb4bb, 0x4694, 0x2f02, 0x0, 0x1);
        gbc.writeMem(0x83b0, { 0xcd, 0x78, 0xf2 });
        gbc.writeMem(0xe8eb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xe8eb, gbc.sp());
        EXPECT(0xf278, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x83b0));
        EXPECT(0x78, gbc.readMem(0x83b1));
        EXPECT(0xf2, gbc.readMem(0x83b2));
        EXPECT(0xb3, gbc.readMem(0xe8eb));
        EXPECT(0x83, gbc.readMem(0xe8ec));
        // CD 01BE
        gbc.setState(0x40c8, 0xa221, 0x7800, 0xfd56, 0xe6c9, 0x8cb5, 0x1, 0x0);
        gbc.writeMem(0x40c8, { 0xcd, 0x82, 0x4c });
        gbc.writeMem(0xa21f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xa21f, gbc.sp());
        EXPECT(0x4c82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa21f));
        EXPECT(0x40, gbc.readMem(0xa220));
        // CD 01BF
        gbc.setState(0x12d0, 0xedc5, 0x50a0, 0x8a14, 0x897d, 0xfa5e, 0x1, 0x0);
        gbc.writeMem(0x12d0, { 0xcd, 0xd7, 0x2e });
        gbc.writeMem(0xedc3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xedc3, gbc.sp());
        EXPECT(0x2ed7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd3, gbc.readMem(0xedc3));
        EXPECT(0x12, gbc.readMem(0xedc4));
        // CD 01C3
        gbc.setState(0xc942, 0xf836, 0x2e30, 0x9a8c, 0x3d79, 0xc7cb, 0x1, 0x1);
        gbc.writeMem(0xc942, { 0xcd, 0xdc, 0x8 });
        gbc.writeMem(0xf834, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xf834, gbc.sp());
        EXPECT(0x8dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc942));
        EXPECT(0xdc, gbc.readMem(0xc943));
        EXPECT(0x8, gbc.readMem(0xc944));
        EXPECT(0x45, gbc.readMem(0xf834));
        EXPECT(0xc9, gbc.readMem(0xf835));
        // CD 01C5
        gbc.setState(0x1e61, 0xdf5a, 0xbe10, 0x702b, 0xe317, 0xc5c, 0x0, 0x1);
        gbc.writeMem(0x1e61, { 0xcd, 0x89, 0x3f });
        gbc.writeMem(0xdf58, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xdf58, gbc.sp());
        EXPECT(0x3f89, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x64, gbc.readMem(0xdf58));
        EXPECT(0x1e, gbc.readMem(0xdf59));
        // CD 01C8
        gbc.setState(0x2cee, 0xf80f, 0x9b70, 0x78c4, 0x78f9, 0x6a79, 0x1, 0x0);
        gbc.writeMem(0x2cee, { 0xcd, 0x19, 0x78 });
        gbc.writeMem(0xf80d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xf80d, gbc.sp());
        EXPECT(0x7819, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0xf80d));
        EXPECT(0x2c, gbc.readMem(0xf80e));
        // CD 01C9
        gbc.setState(0x6daf, 0xc7fd, 0x3010, 0x36cd, 0x2353, 0x3158, 0x0, 0x1);
        gbc.writeMem(0x6daf, { 0xcd, 0x8d, 0x43 });
        gbc.writeMem(0xc7fb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xc7fb, gbc.sp());
        EXPECT(0x438d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb2, gbc.readMem(0xc7fb));
        EXPECT(0x6d, gbc.readMem(0xc7fc));
        // CD 01CA
        gbc.setState(0x6366, 0x879e, 0xd8c0, 0x4629, 0x70fa, 0xffe0, 0x1, 0x1);
        gbc.writeMem(0x6366, { 0xcd, 0x6c, 0x6f });
        gbc.writeMem(0x879c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x879c, gbc.sp());
        EXPECT(0x6f6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x69, gbc.readMem(0x879c));
        EXPECT(0x63, gbc.readMem(0x879d));
        // CD 01CB
        gbc.setState(0xc6a4, 0xc99b, 0xe840, 0x3823, 0x1a56, 0x2996, 0x1, 0x1);
        gbc.writeMem(0xc6a4, { 0xcd, 0x28, 0x1f });
        gbc.writeMem(0xc999, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xc999, gbc.sp());
        EXPECT(0x1f28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc6a4));
        EXPECT(0x28, gbc.readMem(0xc6a5));
        EXPECT(0x1f, gbc.readMem(0xc6a6));
        EXPECT(0xa7, gbc.readMem(0xc999));
        EXPECT(0xc6, gbc.readMem(0xc99a));
        // CD 01CD
        gbc.setState(0xdd8f, 0x9dc0, 0x4940, 0xf2a4, 0x10a8, 0x994e, 0x1, 0x1);
        gbc.writeMem(0x9dbe, { 0x0, 0x0 });
        gbc.writeMem(0xdd8f, { 0xcd, 0xc9, 0x6f });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x9dbe, gbc.sp());
        EXPECT(0x6fc9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x92, gbc.readMem(0x9dbe));
        EXPECT(0xdd, gbc.readMem(0x9dbf));
        EXPECT(0xcd, gbc.readMem(0xdd8f));
        EXPECT(0xc9, gbc.readMem(0xdd90));
        EXPECT(0x6f, gbc.readMem(0xdd91));
        // CD 01CE
        gbc.setState(0x6235, 0xc723, 0x10c0, 0xca12, 0x96e4, 0x219d, 0x1, 0x0);
        gbc.writeMem(0x6235, { 0xcd, 0x7e, 0x12 });
        gbc.writeMem(0xc721, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xc721, gbc.sp());
        EXPECT(0x127e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0xc721));
        EXPECT(0x62, gbc.readMem(0xc722));
        // CD 01CF
        gbc.setState(0x6f6b, 0xd0f9, 0x2760, 0xe405, 0x588f, 0xed4c, 0x1, 0x1);
        gbc.writeMem(0x6f6b, { 0xcd, 0xf8, 0xf7 });
        gbc.writeMem(0xd0f7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xd0f7, gbc.sp());
        EXPECT(0xf7f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6e, gbc.readMem(0xd0f7));
        EXPECT(0x6f, gbc.readMem(0xd0f8));
        // CD 01D0
        gbc.setState(0x3d01, 0xc82c, 0xd920, 0x8811, 0x1370, 0x1359, 0x1, 0x0);
        gbc.writeMem(0x3d01, { 0xcd, 0xa5, 0xe });
        gbc.writeMem(0xc82a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xc82a, gbc.sp());
        EXPECT(0xea5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0xc82a));
        EXPECT(0x3d, gbc.readMem(0xc82b));
        // CD 01D4
        gbc.setState(0x14fa, 0x80c6, 0x2270, 0xe120, 0xffae, 0x2789, 0x1, 0x0);
        gbc.writeMem(0x14fa, { 0xcd, 0xde, 0x78 });
        gbc.writeMem(0x80c4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x80c4, gbc.sp());
        EXPECT(0x78de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfd, gbc.readMem(0x80c4));
        EXPECT(0x14, gbc.readMem(0x80c5));
        // CD 01D5
        gbc.setState(0xa7d4, 0xee3c, 0x49b0, 0xcb60, 0xe3f, 0x6994, 0x1, 0x0);
        gbc.writeMem(0xa7d4, { 0xcd, 0x2b, 0x65 });
        gbc.writeMem(0xee3a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xee3a, gbc.sp());
        EXPECT(0x652b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa7d4));
        EXPECT(0x2b, gbc.readMem(0xa7d5));
        EXPECT(0x65, gbc.readMem(0xa7d6));
        EXPECT(0xd7, gbc.readMem(0xee3a));
        EXPECT(0xa7, gbc.readMem(0xee3b));
        // CD 01D9
        gbc.setState(0x2fbd, 0xfb4a, 0xe2a0, 0x1318, 0xe5d2, 0x3935, 0x0, 0x1);
        gbc.writeMem(0x2fbd, { 0xcd, 0x8d, 0x4c });
        gbc.writeMem(0xfb48, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xfb48, gbc.sp());
        EXPECT(0x4c8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc0, gbc.readMem(0xfb48));
        EXPECT(0x2f, gbc.readMem(0xfb49));
        // CD 01DB
        gbc.setState(0x15d9, 0xd7ae, 0x8a40, 0x3cf7, 0x1540, 0x84a0, 0x1, 0x1);
        gbc.writeMem(0x15d9, { 0xcd, 0xf, 0xeb });
        gbc.writeMem(0xd7ac, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xd7ac, gbc.sp());
        EXPECT(0xeb0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd7ac));
        EXPECT(0x15, gbc.readMem(0xd7ad));
        // CD 01DF
        gbc.setState(0x63fb, 0xad5a, 0x2710, 0x5a55, 0x681a, 0xd596, 0x0, 0x1);
        gbc.writeMem(0x63fb, { 0xcd, 0x8c, 0x2a });
        gbc.writeMem(0xad58, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xad58, gbc.sp());
        EXPECT(0x2a8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfe, gbc.readMem(0xad58));
        EXPECT(0x63, gbc.readMem(0xad59));
        // CD 01E6
        gbc.setState(0xded1, 0x835e, 0x9090, 0xef26, 0x189b, 0x77f, 0x0, 0x1);
        gbc.writeMem(0x835c, { 0x0, 0x0 });
        gbc.writeMem(0xded1, { 0xcd, 0xc, 0x69 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x835c, gbc.sp());
        EXPECT(0x690c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd4, gbc.readMem(0x835c));
        EXPECT(0xde, gbc.readMem(0x835d));
        EXPECT(0xcd, gbc.readMem(0xded1));
        EXPECT(0xc, gbc.readMem(0xded2));
        EXPECT(0x69, gbc.readMem(0xded3));
        // CD 01E8
        gbc.setState(0xaa33, 0xd3ba, 0x3660, 0x387c, 0x9ba3, 0x21c5, 0x1, 0x1);
        gbc.writeMem(0xaa33, { 0xcd, 0x9d, 0x8f });
        gbc.writeMem(0xd3b8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xd3b8, gbc.sp());
        EXPECT(0x8f9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xaa33));
        EXPECT(0x9d, gbc.readMem(0xaa34));
        EXPECT(0x8f, gbc.readMem(0xaa35));
        EXPECT(0x36, gbc.readMem(0xd3b8));
        EXPECT(0xaa, gbc.readMem(0xd3b9));
        // CD 01EA
        gbc.setState(0xe5c0, 0xd596, 0xb700, 0x1b48, 0x8d1c, 0x7b11, 0x0, 0x1);
        gbc.writeMem(0xd594, { 0x0, 0x0 });
        gbc.writeMem(0xe5c0, { 0xcd, 0x15, 0x79 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xd594, gbc.sp());
        EXPECT(0x7915, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc3, gbc.readMem(0xd594));
        EXPECT(0xe5, gbc.readMem(0xd595));
        EXPECT(0xcd, gbc.readMem(0xe5c0));
        EXPECT(0x15, gbc.readMem(0xe5c1));
        EXPECT(0x79, gbc.readMem(0xe5c2));
        // CD 01EB
        gbc.setState(0x8446, 0xf475, 0x9470, 0x30ce, 0x6e63, 0x141, 0x0, 0x1);
        gbc.writeMem(0x8446, { 0xcd, 0xb, 0x98 });
        gbc.writeMem(0xf473, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xf473, gbc.sp());
        EXPECT(0x980b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8446));
        EXPECT(0xb, gbc.readMem(0x8447));
        EXPECT(0x98, gbc.readMem(0x8448));
        EXPECT(0x49, gbc.readMem(0xf473));
        EXPECT(0x84, gbc.readMem(0xf474));
        // CD 01EC
        gbc.setState(0xda0a, 0xf24e, 0xf1f0, 0x3de5, 0x127e, 0x528d, 0x1, 0x1);
        gbc.writeMem(0xda0a, { 0xcd, 0x38, 0x93 });
        gbc.writeMem(0xf24c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xf24c, gbc.sp());
        EXPECT(0x9338, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xda0a));
        EXPECT(0x38, gbc.readMem(0xda0b));
        EXPECT(0x93, gbc.readMem(0xda0c));
        EXPECT(0xd, gbc.readMem(0xf24c));
        EXPECT(0xda, gbc.readMem(0xf24d));
        // CD 01EF
        gbc.setState(0x4b71, 0xf267, 0xf290, 0x4b87, 0x9842, 0x7c70, 0x0, 0x1);
        gbc.writeMem(0x4b71, { 0xcd, 0x18, 0x21 });
        gbc.writeMem(0xf265, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xf265, gbc.sp());
        EXPECT(0x2118, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xf265));
        EXPECT(0x4b, gbc.readMem(0xf266));
        // CD 01F1
        gbc.setState(0x7d20, 0xde83, 0x4b30, 0x400c, 0x5130, 0x343a, 0x0, 0x0);
        gbc.writeMem(0x7d20, { 0xcd, 0xce, 0x3 });
        gbc.writeMem(0xde81, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xde81, gbc.sp());
        EXPECT(0x3ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0xde81));
        EXPECT(0x7d, gbc.readMem(0xde82));
        // CD 01F5
        gbc.setState(0xd1ee, 0xa3f1, 0x4d0, 0x5bef, 0xb0d4, 0x29c9, 0x0, 0x1);
        gbc.writeMem(0xa3ef, { 0x0, 0x0 });
        gbc.writeMem(0xd1ee, { 0xcd, 0x86, 0x23 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xa3ef, gbc.sp());
        EXPECT(0x2386, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0xa3ef));
        EXPECT(0xd1, gbc.readMem(0xa3f0));
        EXPECT(0xcd, gbc.readMem(0xd1ee));
        EXPECT(0x86, gbc.readMem(0xd1ef));
        EXPECT(0x23, gbc.readMem(0xd1f0));
        // CD 01F6
        gbc.setState(0x3978, 0xb8a8, 0x1170, 0xe154, 0x8c19, 0xcc8f, 0x1, 0x0);
        gbc.writeMem(0x3978, { 0xcd, 0xe, 0x4a });
        gbc.writeMem(0xb8a6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xb8a6, gbc.sp());
        EXPECT(0x4a0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7b, gbc.readMem(0xb8a6));
        EXPECT(0x39, gbc.readMem(0xb8a7));
        // CD 0202
        gbc.setState(0x3180, 0xe0c8, 0x6790, 0x720a, 0x17e2, 0xe05b, 0x1, 0x1);
        gbc.writeMem(0x3180, { 0xcd, 0xa7, 0x3f });
        gbc.writeMem(0xe0c6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xe0c6, gbc.sp());
        EXPECT(0x3fa7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x83, gbc.readMem(0xe0c6));
        EXPECT(0x31, gbc.readMem(0xe0c7));
        // CD 0205
        gbc.setState(0xb00c, 0xfac6, 0xf090, 0x888, 0xfd4b, 0x76f8, 0x0, 0x0);
        gbc.writeMem(0xb00c, { 0xcd, 0x47, 0x4 });
        gbc.writeMem(0xfac4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xfac4, gbc.sp());
        EXPECT(0x447, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb00c));
        EXPECT(0x47, gbc.readMem(0xb00d));
        EXPECT(0x4, gbc.readMem(0xb00e));
        EXPECT(0xf, gbc.readMem(0xfac4));
        EXPECT(0xb0, gbc.readMem(0xfac5));
        // CD 0208
        gbc.setState(0xee67, 0xd6f5, 0x9e80, 0x60de, 0x342b, 0x5274, 0x1, 0x1);
        gbc.writeMem(0xd6f3, { 0x0, 0x0 });
        gbc.writeMem(0xee67, { 0xcd, 0xa6, 0x4e });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xd6f3, gbc.sp());
        EXPECT(0x4ea6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6a, gbc.readMem(0xd6f3));
        EXPECT(0xee, gbc.readMem(0xd6f4));
        EXPECT(0xcd, gbc.readMem(0xee67));
        EXPECT(0xa6, gbc.readMem(0xee68));
        EXPECT(0x4e, gbc.readMem(0xee69));
        // CD 020D
        gbc.setState(0xa5f4, 0x881e, 0xcd50, 0xd918, 0x581c, 0x6ad3, 0x1, 0x0);
        gbc.writeMem(0x881c, { 0x0, 0x0 });
        gbc.writeMem(0xa5f4, { 0xcd, 0xbe, 0x9 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x881c, gbc.sp());
        EXPECT(0x9be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf7, gbc.readMem(0x881c));
        EXPECT(0xa5, gbc.readMem(0x881d));
        EXPECT(0xcd, gbc.readMem(0xa5f4));
        EXPECT(0xbe, gbc.readMem(0xa5f5));
        EXPECT(0x9, gbc.readMem(0xa5f6));
        // CD 020F
        gbc.setState(0x8771, 0xaa66, 0x7970, 0xd37a, 0x23c, 0xbfc8, 0x0, 0x1);
        gbc.writeMem(0x8771, { 0xcd, 0xb, 0x35 });
        gbc.writeMem(0xaa64, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xaa64, gbc.sp());
        EXPECT(0x350b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8771));
        EXPECT(0xb, gbc.readMem(0x8772));
        EXPECT(0x35, gbc.readMem(0x8773));
        EXPECT(0x74, gbc.readMem(0xaa64));
        EXPECT(0x87, gbc.readMem(0xaa65));
        // CD 0211
        gbc.setState(0xa5d2, 0xccfa, 0x6150, 0x910f, 0x1fff, 0x8c49, 0x0, 0x1);
        gbc.writeMem(0xa5d2, { 0xcd, 0xd8, 0x61 });
        gbc.writeMem(0xccf8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xccf8, gbc.sp());
        EXPECT(0x61d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa5d2));
        EXPECT(0xd8, gbc.readMem(0xa5d3));
        EXPECT(0x61, gbc.readMem(0xa5d4));
        EXPECT(0xd5, gbc.readMem(0xccf8));
        EXPECT(0xa5, gbc.readMem(0xccf9));
        // CD 0213
        gbc.setState(0x8ae1, 0xa8ab, 0x2cc0, 0x7b5d, 0x22ba, 0x14d4, 0x0, 0x1);
        gbc.writeMem(0x8ae1, { 0xcd, 0xe4, 0x8b });
        gbc.writeMem(0xa8a9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xa8a9, gbc.sp());
        EXPECT(0x8be4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8ae1));
        EXPECT(0xe4, gbc.readMem(0x8ae2));
        EXPECT(0x8b, gbc.readMem(0x8ae3));
        EXPECT(0xe4, gbc.readMem(0xa8a9));
        EXPECT(0x8a, gbc.readMem(0xa8aa));
        // CD 0216
        gbc.setState(0xcfed, 0x86a0, 0xd2e0, 0xe6, 0x6cec, 0xc055, 0x1, 0x1);
        gbc.writeMem(0x869e, { 0x0, 0x0 });
        gbc.writeMem(0xcfed, { 0xcd, 0xa5, 0x5e });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x869e, gbc.sp());
        EXPECT(0x5ea5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf0, gbc.readMem(0x869e));
        EXPECT(0xcf, gbc.readMem(0x869f));
        EXPECT(0xcd, gbc.readMem(0xcfed));
        EXPECT(0xa5, gbc.readMem(0xcfee));
        EXPECT(0x5e, gbc.readMem(0xcfef));
        // CD 0217
        gbc.setState(0x8953, 0xb2ca, 0x68c0, 0x6aef, 0xa768, 0x2889, 0x0, 0x1);
        gbc.writeMem(0x8953, { 0xcd, 0xf9, 0x86 });
        gbc.writeMem(0xb2c8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xb2c8, gbc.sp());
        EXPECT(0x86f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8953));
        EXPECT(0xf9, gbc.readMem(0x8954));
        EXPECT(0x86, gbc.readMem(0x8955));
        EXPECT(0x56, gbc.readMem(0xb2c8));
        EXPECT(0x89, gbc.readMem(0xb2c9));
        // CD 021A
        gbc.setState(0x55b5, 0xc39e, 0xb850, 0x32c4, 0xd2b2, 0xc743, 0x0, 0x0);
        gbc.writeMem(0x55b5, { 0xcd, 0x48, 0x6f });
        gbc.writeMem(0xc39c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xc39c, gbc.sp());
        EXPECT(0x6f48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb8, gbc.readMem(0xc39c));
        EXPECT(0x55, gbc.readMem(0xc39d));
        // CD 021D
        gbc.setState(0x7460, 0xb67d, 0x6150, 0x3f67, 0x5d8e, 0x795c, 0x1, 0x0);
        gbc.writeMem(0x7460, { 0xcd, 0xf5, 0x38 });
        gbc.writeMem(0xb67b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xb67b, gbc.sp());
        EXPECT(0x38f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x63, gbc.readMem(0xb67b));
        EXPECT(0x74, gbc.readMem(0xb67c));
        // CD 021F
        gbc.setState(0xb9c5, 0x94b8, 0xac0, 0x8cdd, 0xda79, 0x76ba, 0x1, 0x0);
        gbc.writeMem(0x94b6, { 0x0, 0x0 });
        gbc.writeMem(0xb9c5, { 0xcd, 0xf3, 0x74 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x94b6, gbc.sp());
        EXPECT(0x74f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc8, gbc.readMem(0x94b6));
        EXPECT(0xb9, gbc.readMem(0x94b7));
        EXPECT(0xcd, gbc.readMem(0xb9c5));
        EXPECT(0xf3, gbc.readMem(0xb9c6));
        EXPECT(0x74, gbc.readMem(0xb9c7));
        // CD 0221
        gbc.setState(0x6c13, 0x8274, 0xc6e0, 0xeacc, 0xc785, 0x1b18, 0x0, 0x0);
        gbc.writeMem(0x6c13, { 0xcd, 0xd3, 0x46 });
        gbc.writeMem(0x8272, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x8272, gbc.sp());
        EXPECT(0x46d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x16, gbc.readMem(0x8272));
        EXPECT(0x6c, gbc.readMem(0x8273));
        // CD 0223
        gbc.setState(0x98d5, 0xdb6d, 0xf800, 0x310b, 0xf3db, 0xb059, 0x0, 0x1);
        gbc.writeMem(0x98d5, { 0xcd, 0xc7, 0x1a });
        gbc.writeMem(0xdb6b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xdb6b, gbc.sp());
        EXPECT(0x1ac7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x98d5));
        EXPECT(0xc7, gbc.readMem(0x98d6));
        EXPECT(0x1a, gbc.readMem(0x98d7));
        EXPECT(0xd8, gbc.readMem(0xdb6b));
        EXPECT(0x98, gbc.readMem(0xdb6c));
        // CD 0224
        gbc.setState(0x86ef, 0xd641, 0x86d0, 0x21cb, 0x70c8, 0xc806, 0x1, 0x1);
        gbc.writeMem(0x86ef, { 0xcd, 0xfb, 0xb });
        gbc.writeMem(0xd63f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xd63f, gbc.sp());
        EXPECT(0xbfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x86ef));
        EXPECT(0xfb, gbc.readMem(0x86f0));
        EXPECT(0xb, gbc.readMem(0x86f1));
        EXPECT(0xf2, gbc.readMem(0xd63f));
        EXPECT(0x86, gbc.readMem(0xd640));
        // CD 022B
        gbc.setState(0x7261, 0xfb30, 0xc2d0, 0xc644, 0xbbc6, 0x5810, 0x0, 0x1);
        gbc.writeMem(0x7261, { 0xcd, 0x46, 0xd0 });
        gbc.writeMem(0xfb2e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xfb2e, gbc.sp());
        EXPECT(0xd046, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x64, gbc.readMem(0xfb2e));
        EXPECT(0x72, gbc.readMem(0xfb2f));
        // CD 022C
        gbc.setState(0x5853, 0xbe7d, 0xceb0, 0x5ca0, 0xdafb, 0xcb85, 0x0, 0x1);
        gbc.writeMem(0x5853, { 0xcd, 0xe6, 0xc });
        gbc.writeMem(0xbe7b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xbe7b, gbc.sp());
        EXPECT(0xce6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x56, gbc.readMem(0xbe7b));
        EXPECT(0x58, gbc.readMem(0xbe7c));
        // CD 022E
        gbc.setState(0x54d6, 0xf26a, 0x2360, 0xd6c4, 0x6e0e, 0xc665, 0x1, 0x1);
        gbc.writeMem(0x54d6, { 0xcd, 0x97, 0x2e });
        gbc.writeMem(0xf268, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xf268, gbc.sp());
        EXPECT(0x2e97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd9, gbc.readMem(0xf268));
        EXPECT(0x54, gbc.readMem(0xf269));
        // CD 022F
        gbc.setState(0x2cc2, 0xfad0, 0x7e90, 0xe3a, 0xeac3, 0x329b, 0x1, 0x1);
        gbc.writeMem(0x2cc2, { 0xcd, 0xe2, 0x13 });
        gbc.writeMem(0xface, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xface, gbc.sp());
        EXPECT(0x13e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc5, gbc.readMem(0xface));
        EXPECT(0x2c, gbc.readMem(0xfacf));
        // CD 0230
        gbc.setState(0xcfb4, 0xfd18, 0xcb30, 0xc83c, 0xdb3c, 0x2ad9, 0x1, 0x0);
        gbc.writeMem(0xcfb4, { 0xcd, 0xa8, 0x92 });
        gbc.writeMem(0xfd16, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xfd16, gbc.sp());
        EXPECT(0x92a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xcfb4));
        EXPECT(0xa8, gbc.readMem(0xcfb5));
        EXPECT(0x92, gbc.readMem(0xcfb6));
        EXPECT(0xb7, gbc.readMem(0xfd16));
        EXPECT(0xcf, gbc.readMem(0xfd17));
        // CD 0231
        gbc.setState(0x3a8b, 0x9ae6, 0x52c0, 0x461, 0xc5f8, 0x8ff3, 0x0, 0x1);
        gbc.writeMem(0x3a8b, { 0xcd, 0x7e, 0x3d });
        gbc.writeMem(0x9ae4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x9ae4, gbc.sp());
        EXPECT(0x3d7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8e, gbc.readMem(0x9ae4));
        EXPECT(0x3a, gbc.readMem(0x9ae5));
        // CD 0232
        gbc.setState(0x9296, 0xad2b, 0xf5c0, 0xdf85, 0x1506, 0x6116, 0x1, 0x1);
        gbc.writeMem(0x9296, { 0xcd, 0xf9, 0xa });
        gbc.writeMem(0xad29, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xad29, gbc.sp());
        EXPECT(0xaf9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9296));
        EXPECT(0xf9, gbc.readMem(0x9297));
        EXPECT(0xa, gbc.readMem(0x9298));
        EXPECT(0x99, gbc.readMem(0xad29));
        EXPECT(0x92, gbc.readMem(0xad2a));
        // CD 0233
        gbc.setState(0x4060, 0xaa6a, 0xa400, 0x9740, 0xd596, 0xa678, 0x0, 0x1);
        gbc.writeMem(0x4060, { 0xcd, 0xb1, 0x67 });
        gbc.writeMem(0xaa68, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xaa68, gbc.sp());
        EXPECT(0x67b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x63, gbc.readMem(0xaa68));
        EXPECT(0x40, gbc.readMem(0xaa69));
        // CD 0237
        gbc.setState(0xd77c, 0xed2f, 0x1140, 0xa0ea, 0x8ee6, 0x8e15, 0x0, 0x0);
        gbc.writeMem(0xd77c, { 0xcd, 0x5e, 0x3a });
        gbc.writeMem(0xed2d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xed2d, gbc.sp());
        EXPECT(0x3a5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xd77c));
        EXPECT(0x5e, gbc.readMem(0xd77d));
        EXPECT(0x3a, gbc.readMem(0xd77e));
        EXPECT(0x7f, gbc.readMem(0xed2d));
        EXPECT(0xd7, gbc.readMem(0xed2e));
        // CD 0241
        gbc.setState(0xc4af, 0xfa01, 0x9a0, 0x4075, 0x2c91, 0x927a, 0x1, 0x1);
        gbc.writeMem(0xc4af, { 0xcd, 0xa6, 0x8f });
        gbc.writeMem(0xf9ff, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xf9ff, gbc.sp());
        EXPECT(0x8fa6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc4af));
        EXPECT(0xa6, gbc.readMem(0xc4b0));
        EXPECT(0x8f, gbc.readMem(0xc4b1));
        EXPECT(0xb2, gbc.readMem(0xf9ff));
        EXPECT(0xc4, gbc.readMem(0xfa00));
        // CD 0243
        gbc.setState(0x2c1c, 0xe655, 0x7920, 0xbb3f, 0xee3c, 0x3c0, 0x1, 0x0);
        gbc.writeMem(0x2c1c, { 0xcd, 0x11, 0x60 });
        gbc.writeMem(0xe653, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xe653, gbc.sp());
        EXPECT(0x6011, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1f, gbc.readMem(0xe653));
        EXPECT(0x2c, gbc.readMem(0xe654));
        // CD 0244
        gbc.setState(0x7675, 0xef33, 0xe4a0, 0x6627, 0xf363, 0xdf5, 0x1, 0x1);
        gbc.writeMem(0x7675, { 0xcd, 0xf0, 0xb0 });
        gbc.writeMem(0xef31, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xef31, gbc.sp());
        EXPECT(0xb0f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xef31));
        EXPECT(0x76, gbc.readMem(0xef32));
        // CD 0248
        gbc.setState(0xa3d7, 0x82fc, 0x2c90, 0xa1ab, 0x3f2e, 0xa61, 0x0, 0x1);
        gbc.writeMem(0x82fa, { 0x0, 0x0 });
        gbc.writeMem(0xa3d7, { 0xcd, 0x18, 0xf9 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x82fa, gbc.sp());
        EXPECT(0xf918, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xda, gbc.readMem(0x82fa));
        EXPECT(0xa3, gbc.readMem(0x82fb));
        EXPECT(0xcd, gbc.readMem(0xa3d7));
        EXPECT(0x18, gbc.readMem(0xa3d8));
        EXPECT(0xf9, gbc.readMem(0xa3d9));
        // CD 0249
        gbc.setState(0xa6f9, 0xe831, 0xec60, 0x291e, 0x42e6, 0xf364, 0x1, 0x0);
        gbc.writeMem(0xa6f9, { 0xcd, 0x53, 0x51 });
        gbc.writeMem(0xe82f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xe82f, gbc.sp());
        EXPECT(0x5153, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa6f9));
        EXPECT(0x53, gbc.readMem(0xa6fa));
        EXPECT(0x51, gbc.readMem(0xa6fb));
        EXPECT(0xfc, gbc.readMem(0xe82f));
        EXPECT(0xa6, gbc.readMem(0xe830));
        // CD 024D
        gbc.setState(0x620b, 0xeff6, 0x2840, 0x7729, 0xe3ec, 0x20eb, 0x0, 0x1);
        gbc.writeMem(0x620b, { 0xcd, 0x6, 0x85 });
        gbc.writeMem(0xeff4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xeff4, gbc.sp());
        EXPECT(0x8506, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe, gbc.readMem(0xeff4));
        EXPECT(0x62, gbc.readMem(0xeff5));
        // CD 024E
        gbc.setState(0x41cc, 0xc14b, 0xbf00, 0xaa8, 0x779f, 0x9956, 0x0, 0x1);
        gbc.writeMem(0x41cc, { 0xcd, 0x27, 0x5e });
        gbc.writeMem(0xc149, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xc149, gbc.sp());
        EXPECT(0x5e27, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc149));
        EXPECT(0x41, gbc.readMem(0xc14a));
        // CD 024F
        gbc.setState(0xae14, 0xf89a, 0x4cc0, 0xe819, 0xb567, 0x290b, 0x0, 0x0);
        gbc.writeMem(0xae14, { 0xcd, 0x9b, 0xe2 });
        gbc.writeMem(0xf898, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xf898, gbc.sp());
        EXPECT(0xe29b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xae14));
        EXPECT(0x9b, gbc.readMem(0xae15));
        EXPECT(0xe2, gbc.readMem(0xae16));
        EXPECT(0x17, gbc.readMem(0xf898));
        EXPECT(0xae, gbc.readMem(0xf899));
        // CD 0250
        gbc.setState(0x8fd5, 0xaac6, 0xea80, 0x2ddd, 0x2d94, 0x9e69, 0x1, 0x1);
        gbc.writeMem(0x8fd5, { 0xcd, 0x70, 0x41 });
        gbc.writeMem(0xaac4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xaac4, gbc.sp());
        EXPECT(0x4170, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8fd5));
        EXPECT(0x70, gbc.readMem(0x8fd6));
        EXPECT(0x41, gbc.readMem(0x8fd7));
        EXPECT(0xd8, gbc.readMem(0xaac4));
        EXPECT(0x8f, gbc.readMem(0xaac5));
        // CD 0251
        gbc.setState(0x85b5, 0xc5f0, 0xd200, 0xc0f0, 0xae69, 0x2345, 0x0, 0x1);
        gbc.writeMem(0x85b5, { 0xcd, 0x64, 0x7e });
        gbc.writeMem(0xc5ee, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xc5ee, gbc.sp());
        EXPECT(0x7e64, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x85b5));
        EXPECT(0x64, gbc.readMem(0x85b6));
        EXPECT(0x7e, gbc.readMem(0x85b7));
        EXPECT(0xb8, gbc.readMem(0xc5ee));
        EXPECT(0x85, gbc.readMem(0xc5ef));
        // CD 0253
        gbc.setState(0x76c5, 0xa3f3, 0x94d0, 0x74ee, 0x5222, 0x8e3, 0x1, 0x1);
        gbc.writeMem(0x76c5, { 0xcd, 0x25, 0x29 });
        gbc.writeMem(0xa3f1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xa3f1, gbc.sp());
        EXPECT(0x2925, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc8, gbc.readMem(0xa3f1));
        EXPECT(0x76, gbc.readMem(0xa3f2));
        // CD 0254
        gbc.setState(0x269a, 0x8896, 0x6c90, 0x470, 0x817c, 0xb39c, 0x0, 0x1);
        gbc.writeMem(0x269a, { 0xcd, 0x2b, 0x8d });
        gbc.writeMem(0x8894, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x8894, gbc.sp());
        EXPECT(0x8d2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9d, gbc.readMem(0x8894));
        EXPECT(0x26, gbc.readMem(0x8895));
        // CD 0255
        gbc.setState(0x7a33, 0xefc3, 0x3130, 0x5ac4, 0x6666, 0xba98, 0x1, 0x0);
        gbc.writeMem(0x7a33, { 0xcd, 0xc6, 0xde });
        gbc.writeMem(0xefc1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xefc1, gbc.sp());
        EXPECT(0xdec6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0xefc1));
        EXPECT(0x7a, gbc.readMem(0xefc2));
        // CD 0256
        gbc.setState(0x8fa4, 0xa945, 0xf360, 0x7f54, 0x8da8, 0xe02d, 0x1, 0x0);
        gbc.writeMem(0x8fa4, { 0xcd, 0x97, 0x82 });
        gbc.writeMem(0xa943, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xa943, gbc.sp());
        EXPECT(0x8297, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8fa4));
        EXPECT(0x97, gbc.readMem(0x8fa5));
        EXPECT(0x82, gbc.readMem(0x8fa6));
        EXPECT(0xa7, gbc.readMem(0xa943));
        EXPECT(0x8f, gbc.readMem(0xa944));
        // CD 0257
        gbc.setState(0xcbf, 0xec01, 0x2ad0, 0x269f, 0x8be0, 0xef13, 0x0, 0x0);
        gbc.writeMem(0xcbf, { 0xcd, 0x40, 0xf });
        gbc.writeMem(0xebff, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xebff, gbc.sp());
        EXPECT(0xf40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc2, gbc.readMem(0xebff));
        EXPECT(0xc, gbc.readMem(0xec00));
        // CD 0258
        gbc.setState(0xede3, 0xfc35, 0xb0, 0xcd73, 0x5299, 0x1c6f, 0x1, 0x0);
        gbc.writeMem(0xede3, { 0xcd, 0xa1, 0x4d });
        gbc.writeMem(0xfc33, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xfc33, gbc.sp());
        EXPECT(0x4da1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xede3));
        EXPECT(0xa1, gbc.readMem(0xede4));
        EXPECT(0x4d, gbc.readMem(0xede5));
        EXPECT(0xe6, gbc.readMem(0xfc33));
        EXPECT(0xed, gbc.readMem(0xfc34));
        // CD 025C
        gbc.setState(0x6225, 0xf700, 0x67a0, 0xc274, 0xe2e3, 0x3f54, 0x0, 0x0);
        gbc.writeMem(0x6225, { 0xcd, 0x20, 0xf3 });
        gbc.writeMem(0xf6fe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xf6fe, gbc.sp());
        EXPECT(0xf320, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0xf6fe));
        EXPECT(0x62, gbc.readMem(0xf6ff));
        // CD 0260
        gbc.setState(0x95b4, 0xb0ac, 0x6660, 0xd575, 0x2ec3, 0x3106, 0x0, 0x0);
        gbc.writeMem(0x95b4, { 0xcd, 0xce, 0x4c });
        gbc.writeMem(0xb0aa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xb0aa, gbc.sp());
        EXPECT(0x4cce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x95b4));
        EXPECT(0xce, gbc.readMem(0x95b5));
        EXPECT(0x4c, gbc.readMem(0x95b6));
        EXPECT(0xb7, gbc.readMem(0xb0aa));
        EXPECT(0x95, gbc.readMem(0xb0ab));
        // CD 0261
        gbc.setState(0xab3f, 0xb3e0, 0x8fb0, 0xff54, 0x9580, 0xaac8, 0x0, 0x1);
        gbc.writeMem(0xab3f, { 0xcd, 0x35, 0x23 });
        gbc.writeMem(0xb3de, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xb3de, gbc.sp());
        EXPECT(0x2335, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xab3f));
        EXPECT(0x35, gbc.readMem(0xab40));
        EXPECT(0x23, gbc.readMem(0xab41));
        EXPECT(0x42, gbc.readMem(0xb3de));
        EXPECT(0xab, gbc.readMem(0xb3df));
        // CD 0262
        gbc.setState(0xa714, 0x9e1a, 0xa6c0, 0x812f, 0x2c67, 0xd80, 0x0, 0x0);
        gbc.writeMem(0x9e18, { 0x0, 0x0 });
        gbc.writeMem(0xa714, { 0xcd, 0x1a, 0x2f });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x9e18, gbc.sp());
        EXPECT(0x2f1a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x17, gbc.readMem(0x9e18));
        EXPECT(0xa7, gbc.readMem(0x9e19));
        EXPECT(0xcd, gbc.readMem(0xa714));
        EXPECT(0x1a, gbc.readMem(0xa715));
        EXPECT(0x2f, gbc.readMem(0xa716));
        // CD 0264
        gbc.setState(0x28d0, 0x9a1e, 0xb940, 0x9564, 0x211d, 0x866, 0x0, 0x1);
        gbc.writeMem(0x28d0, { 0xcd, 0x95, 0x95 });
        gbc.writeMem(0x9a1c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x9a1c, gbc.sp());
        EXPECT(0x9595, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd3, gbc.readMem(0x9a1c));
        EXPECT(0x28, gbc.readMem(0x9a1d));
        // CD 0265
        gbc.setState(0xe98c, 0xc922, 0x7470, 0x23b7, 0x81cf, 0x58b6, 0x1, 0x1);
        gbc.writeMem(0xc920, { 0x0, 0x0 });
        gbc.writeMem(0xe98c, { 0xcd, 0x1b, 0xec });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xc920, gbc.sp());
        EXPECT(0xec1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xc920));
        EXPECT(0xe9, gbc.readMem(0xc921));
        EXPECT(0xcd, gbc.readMem(0xe98c));
        EXPECT(0x1b, gbc.readMem(0xe98d));
        EXPECT(0xec, gbc.readMem(0xe98e));
        // CD 0266
        gbc.setState(0xde50, 0xeaae, 0x80e0, 0xe578, 0x5c87, 0x99d1, 0x0, 0x1);
        gbc.writeMem(0xde50, { 0xcd, 0x9, 0xac });
        gbc.writeMem(0xeaac, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xeaac, gbc.sp());
        EXPECT(0xac09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xde50));
        EXPECT(0x9, gbc.readMem(0xde51));
        EXPECT(0xac, gbc.readMem(0xde52));
        EXPECT(0x53, gbc.readMem(0xeaac));
        EXPECT(0xde, gbc.readMem(0xeaad));
        // CD 0269
        gbc.setState(0xac84, 0xbdde, 0x32d0, 0x1865, 0xced2, 0xfe7f, 0x0, 0x0);
        gbc.writeMem(0xac84, { 0xcd, 0xe, 0x28 });
        gbc.writeMem(0xbddc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xbddc, gbc.sp());
        EXPECT(0x280e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xac84));
        EXPECT(0xe, gbc.readMem(0xac85));
        EXPECT(0x28, gbc.readMem(0xac86));
        EXPECT(0x87, gbc.readMem(0xbddc));
        EXPECT(0xac, gbc.readMem(0xbddd));
        // CD 026A
        gbc.setState(0xe759, 0xfd66, 0xdeb0, 0xe197, 0xcbe3, 0x4a54, 0x0, 0x1);
        gbc.writeMem(0xe759, { 0xcd, 0x43, 0xcc });
        gbc.writeMem(0xfd64, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xfd64, gbc.sp());
        EXPECT(0xcc43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xe759));
        EXPECT(0x43, gbc.readMem(0xe75a));
        EXPECT(0xcc, gbc.readMem(0xe75b));
        EXPECT(0x5c, gbc.readMem(0xfd64));
        EXPECT(0xe7, gbc.readMem(0xfd65));
        // CD 026B
        gbc.setState(0x92b2, 0x8771, 0xd8d0, 0x8f09, 0x9804, 0xe304, 0x1, 0x1);
        gbc.writeMem(0x876f, { 0x0, 0x0 });
        gbc.writeMem(0x92b2, { 0xcd, 0xd1, 0x85 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x876f, gbc.sp());
        EXPECT(0x85d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb5, gbc.readMem(0x876f));
        EXPECT(0x92, gbc.readMem(0x8770));
        EXPECT(0xcd, gbc.readMem(0x92b2));
        EXPECT(0xd1, gbc.readMem(0x92b3));
        EXPECT(0x85, gbc.readMem(0x92b4));
        // CD 026C
        gbc.setState(0xbbcb, 0xaba7, 0xc4c0, 0x218a, 0x1cee, 0x257e, 0x1, 0x0);
        gbc.writeMem(0xaba5, { 0x0, 0x0 });
        gbc.writeMem(0xbbcb, { 0xcd, 0x2, 0xcd });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xaba5, gbc.sp());
        EXPECT(0xcd02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0xaba5));
        EXPECT(0xbb, gbc.readMem(0xaba6));
        EXPECT(0xcd, gbc.readMem(0xbbcb));
        EXPECT(0x2, gbc.readMem(0xbbcc));
        EXPECT(0xcd, gbc.readMem(0xbbcd));
        // CD 026D
        gbc.setState(0x4ef, 0xd5a5, 0x1650, 0xadcd, 0xd688, 0x3a9a, 0x1, 0x1);
        gbc.writeMem(0x4ef, { 0xcd, 0xae, 0x1a });
        gbc.writeMem(0xd5a3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xd5a3, gbc.sp());
        EXPECT(0x1aae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0xd5a3));
        EXPECT(0x4, gbc.readMem(0xd5a4));
        // CD 0274
        gbc.setState(0xc60, 0xcc3f, 0x73a0, 0xab29, 0x2cf9, 0x9d6b, 0x0, 0x0);
        gbc.writeMem(0xc60, { 0xcd, 0x2c, 0x82 });
        gbc.writeMem(0xcc3d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xcc3d, gbc.sp());
        EXPECT(0x822c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x63, gbc.readMem(0xcc3d));
        EXPECT(0xc, gbc.readMem(0xcc3e));
        // CD 0279
        gbc.setState(0xd181, 0xc787, 0x3b00, 0x8ca3, 0x3189, 0xb69f, 0x1, 0x1);
        gbc.writeMem(0xc785, { 0x0, 0x0 });
        gbc.writeMem(0xd181, { 0xcd, 0x52, 0x96 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xc785, gbc.sp());
        EXPECT(0x9652, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0xc785));
        EXPECT(0xd1, gbc.readMem(0xc786));
        EXPECT(0xcd, gbc.readMem(0xd181));
        EXPECT(0x52, gbc.readMem(0xd182));
        EXPECT(0x96, gbc.readMem(0xd183));
        // CD 027A
        gbc.setState(0x6760, 0xe388, 0x4d80, 0xaae3, 0x39ca, 0x669f, 0x0, 0x1);
        gbc.writeMem(0x6760, { 0xcd, 0xb5, 0x93 });
        gbc.writeMem(0xe386, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xe386, gbc.sp());
        EXPECT(0x93b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x63, gbc.readMem(0xe386));
        EXPECT(0x67, gbc.readMem(0xe387));
        // CD 027B
        gbc.setState(0xc37d, 0xd900, 0xf880, 0xe384, 0x3bd5, 0xb59d, 0x0, 0x1);
        gbc.writeMem(0xc37d, { 0xcd, 0x34, 0x49 });
        gbc.writeMem(0xd8fe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xd8fe, gbc.sp());
        EXPECT(0x4934, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc37d));
        EXPECT(0x34, gbc.readMem(0xc37e));
        EXPECT(0x49, gbc.readMem(0xc37f));
        EXPECT(0x80, gbc.readMem(0xd8fe));
        EXPECT(0xc3, gbc.readMem(0xd8ff));
        // CD 027D
        gbc.setState(0x1095, 0x8893, 0xcce0, 0xe89b, 0xa421, 0x116c, 0x0, 0x0);
        gbc.writeMem(0x1095, { 0xcd, 0x5b, 0x45 });
        gbc.writeMem(0x8891, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x8891, gbc.sp());
        EXPECT(0x455b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0x8891));
        EXPECT(0x10, gbc.readMem(0x8892));
        // CD 027F
        gbc.setState(0xe651, 0xfb3f, 0x6d40, 0x10f7, 0x3e35, 0x2c3d, 0x0, 0x1);
        gbc.writeMem(0xe651, { 0xcd, 0x48, 0x36 });
        gbc.writeMem(0xfb3d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xfb3d, gbc.sp());
        EXPECT(0x3648, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xe651));
        EXPECT(0x48, gbc.readMem(0xe652));
        EXPECT(0x36, gbc.readMem(0xe653));
        EXPECT(0x54, gbc.readMem(0xfb3d));
        EXPECT(0xe6, gbc.readMem(0xfb3e));
        // CD 0280
        gbc.setState(0xb22b, 0xafea, 0xf630, 0xed0c, 0xd646, 0x3bb, 0x1, 0x0);
        gbc.writeMem(0xafe8, { 0x0, 0x0 });
        gbc.writeMem(0xb22b, { 0xcd, 0xf1, 0xb2 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xafe8, gbc.sp());
        EXPECT(0xb2f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2e, gbc.readMem(0xafe8));
        EXPECT(0xb2, gbc.readMem(0xafe9));
        EXPECT(0xcd, gbc.readMem(0xb22b));
        EXPECT(0xf1, gbc.readMem(0xb22c));
        EXPECT(0xb2, gbc.readMem(0xb22d));
        // CD 0282
        gbc.setState(0xa1ee, 0xdb02, 0x70d0, 0x5312, 0x85aa, 0x4fda, 0x1, 0x1);
        gbc.writeMem(0xa1ee, { 0xcd, 0xce, 0x14 });
        gbc.writeMem(0xdb00, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xdb00, gbc.sp());
        EXPECT(0x14ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa1ee));
        EXPECT(0xce, gbc.readMem(0xa1ef));
        EXPECT(0x14, gbc.readMem(0xa1f0));
        EXPECT(0xf1, gbc.readMem(0xdb00));
        EXPECT(0xa1, gbc.readMem(0xdb01));
        // CD 0283
        gbc.setState(0x4a4a, 0xd8cf, 0x37e0, 0xb70b, 0xfcb0, 0x6dd6, 0x1, 0x1);
        gbc.writeMem(0x4a4a, { 0xcd, 0x2, 0x7d });
        gbc.writeMem(0xd8cd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xd8cd, gbc.sp());
        EXPECT(0x7d02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4d, gbc.readMem(0xd8cd));
        EXPECT(0x4a, gbc.readMem(0xd8ce));
        // CD 0284
        gbc.setState(0x8afe, 0xdf29, 0xd00, 0xc849, 0xdf35, 0x3e78, 0x0, 0x1);
        gbc.writeMem(0x8afe, { 0xcd, 0x57, 0x42 });
        gbc.writeMem(0xdf27, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xdf27, gbc.sp());
        EXPECT(0x4257, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8afe));
        EXPECT(0x57, gbc.readMem(0x8aff));
        EXPECT(0x42, gbc.readMem(0x8b00));
        EXPECT(0x1, gbc.readMem(0xdf27));
        EXPECT(0x8b, gbc.readMem(0xdf28));
        // CD 0286
        gbc.setState(0x8e41, 0xe450, 0x7c50, 0xe01f, 0x17e7, 0x230f, 0x1, 0x1);
        gbc.writeMem(0x8e41, { 0xcd, 0x3b, 0xf6 });
        gbc.writeMem(0xe44e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xe44e, gbc.sp());
        EXPECT(0xf63b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8e41));
        EXPECT(0x3b, gbc.readMem(0x8e42));
        EXPECT(0xf6, gbc.readMem(0x8e43));
        EXPECT(0x44, gbc.readMem(0xe44e));
        EXPECT(0x8e, gbc.readMem(0xe44f));
        // CD 0287
        gbc.setState(0x1675, 0xee16, 0x1ff0, 0x3d70, 0x6dc6, 0xc270, 0x0, 0x1);
        gbc.writeMem(0x1675, { 0xcd, 0x10, 0xf9 });
        gbc.writeMem(0xee14, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xee14, gbc.sp());
        EXPECT(0xf910, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xee14));
        EXPECT(0x16, gbc.readMem(0xee15));
        // CD 0288
        gbc.setState(0x2eee, 0xaedb, 0xd9b0, 0x602e, 0x3017, 0x55a, 0x0, 0x0);
        gbc.writeMem(0x2eee, { 0xcd, 0x6c, 0x53 });
        gbc.writeMem(0xaed9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xaed9, gbc.sp());
        EXPECT(0x536c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0xaed9));
        EXPECT(0x2e, gbc.readMem(0xaeda));
        // CD 0289
        gbc.setState(0x207, 0xfebb, 0xa000, 0xb2d7, 0x444c, 0x6085, 0x0, 0x1);
        gbc.writeMem(0x207, { 0xcd, 0xef, 0xdc });
        gbc.writeMem(0xfeb9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xfeb9, gbc.sp());
        EXPECT(0xdcef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa, gbc.readMem(0xfeb9));
        EXPECT(0x2, gbc.readMem(0xfeba));
        // CD 028B
        gbc.setState(0xe52f, 0x8c08, 0x4a0, 0xcfab, 0x3f87, 0xb63b, 0x1, 0x0);
        gbc.writeMem(0x8c06, { 0x0, 0x0 });
        gbc.writeMem(0xe52f, { 0xcd, 0x16, 0xcc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x8c06, gbc.sp());
        EXPECT(0xcc16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0x8c06));
        EXPECT(0xe5, gbc.readMem(0x8c07));
        EXPECT(0xcd, gbc.readMem(0xe52f));
        EXPECT(0x16, gbc.readMem(0xe530));
        EXPECT(0xcc, gbc.readMem(0xe531));
        // CD 028C
        gbc.setState(0x9959, 0xfb57, 0x3480, 0x4198, 0x8d6c, 0x662c, 0x1, 0x0);
        gbc.writeMem(0x9959, { 0xcd, 0xbe, 0x40 });
        gbc.writeMem(0xfb55, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xfb55, gbc.sp());
        EXPECT(0x40be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9959));
        EXPECT(0xbe, gbc.readMem(0x995a));
        EXPECT(0x40, gbc.readMem(0x995b));
        EXPECT(0x5c, gbc.readMem(0xfb55));
        EXPECT(0x99, gbc.readMem(0xfb56));
        // CD 028D
        gbc.setState(0x4076, 0xee4f, 0x23c0, 0x7e4, 0x8212, 0xfc22, 0x0, 0x1);
        gbc.writeMem(0x4076, { 0xcd, 0xaf, 0xf });
        gbc.writeMem(0xee4d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xee4d, gbc.sp());
        EXPECT(0xfaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x79, gbc.readMem(0xee4d));
        EXPECT(0x40, gbc.readMem(0xee4e));
        // CD 0290
        gbc.setState(0xc15f, 0x913d, 0x3370, 0xa24c, 0x2970, 0x44f9, 0x1, 0x1);
        gbc.writeMem(0x913b, { 0x0, 0x0 });
        gbc.writeMem(0xc15f, { 0xcd, 0xd0, 0x8b });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x913b, gbc.sp());
        EXPECT(0x8bd0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0x913b));
        EXPECT(0xc1, gbc.readMem(0x913c));
        EXPECT(0xcd, gbc.readMem(0xc15f));
        EXPECT(0xd0, gbc.readMem(0xc160));
        EXPECT(0x8b, gbc.readMem(0xc161));
        // CD 0293
        gbc.setState(0xb8c3, 0xa2a2, 0x57d0, 0xa0a2, 0x9d66, 0xbb6a, 0x0, 0x1);
        gbc.writeMem(0xa2a0, { 0x0, 0x0 });
        gbc.writeMem(0xb8c3, { 0xcd, 0xa2, 0x7d });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xa2a0, gbc.sp());
        EXPECT(0x7da2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc6, gbc.readMem(0xa2a0));
        EXPECT(0xb8, gbc.readMem(0xa2a1));
        EXPECT(0xcd, gbc.readMem(0xb8c3));
        EXPECT(0xa2, gbc.readMem(0xb8c4));
        EXPECT(0x7d, gbc.readMem(0xb8c5));
        // CD 0295
        gbc.setState(0x3466, 0xdcda, 0x50a0, 0xfd7c, 0x1362, 0xde49, 0x1, 0x0);
        gbc.writeMem(0x3466, { 0xcd, 0x29, 0x5a });
        gbc.writeMem(0xdcd8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xdcd8, gbc.sp());
        EXPECT(0x5a29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x69, gbc.readMem(0xdcd8));
        EXPECT(0x34, gbc.readMem(0xdcd9));
        // CD 0296
        gbc.setState(0x6200, 0xb865, 0xe100, 0xa6d1, 0xea60, 0x4343, 0x1, 0x1);
        gbc.writeMem(0x6200, { 0xcd, 0xa4, 0x25 });
        gbc.writeMem(0xb863, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xb863, gbc.sp());
        EXPECT(0x25a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3, gbc.readMem(0xb863));
        EXPECT(0x62, gbc.readMem(0xb864));
        // CD 0298
        gbc.setState(0xe284, 0xfee3, 0x4df0, 0x9e87, 0x2bac, 0x8b2f, 0x1, 0x0);
        gbc.writeMem(0xe284, { 0xcd, 0x8b, 0xad });
        gbc.writeMem(0xfee1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xfee1, gbc.sp());
        EXPECT(0xad8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xe284));
        EXPECT(0x8b, gbc.readMem(0xe285));
        EXPECT(0xad, gbc.readMem(0xe286));
        EXPECT(0x87, gbc.readMem(0xfee1));
        EXPECT(0xe2, gbc.readMem(0xfee2));
        // CD 0299
        gbc.setState(0x9eb1, 0xa9df, 0xbdb0, 0x4798, 0xa9c4, 0xdea2, 0x0, 0x0);
        gbc.writeMem(0x9eb1, { 0xcd, 0xd2, 0xcd });
        gbc.writeMem(0xa9dd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xa9dd, gbc.sp());
        EXPECT(0xcdd2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9eb1));
        EXPECT(0xd2, gbc.readMem(0x9eb2));
        EXPECT(0xcd, gbc.readMem(0x9eb3));
        EXPECT(0xb4, gbc.readMem(0xa9dd));
        EXPECT(0x9e, gbc.readMem(0xa9de));
        // CD 029B
        gbc.setState(0xc800, 0x84f9, 0xe530, 0x6cd2, 0xdfbc, 0xd320, 0x1, 0x0);
        gbc.writeMem(0x84f7, { 0x0, 0x0 });
        gbc.writeMem(0xc800, { 0xcd, 0xe9, 0xa2 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x84f7, gbc.sp());
        EXPECT(0xa2e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3, gbc.readMem(0x84f7));
        EXPECT(0xc8, gbc.readMem(0x84f8));
        EXPECT(0xcd, gbc.readMem(0xc800));
        EXPECT(0xe9, gbc.readMem(0xc801));
        EXPECT(0xa2, gbc.readMem(0xc802));
        // CD 029E
        gbc.setState(0x3375, 0xd563, 0xa980, 0x6554, 0x4467, 0xe280, 0x0, 0x0);
        gbc.writeMem(0x3375, { 0xcd, 0xd, 0x72 });
        gbc.writeMem(0xd561, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xd561, gbc.sp());
        EXPECT(0x720d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xd561));
        EXPECT(0x33, gbc.readMem(0xd562));
        // CD 02A4
        gbc.setState(0x6f04, 0xaf76, 0x8be0, 0x2267, 0x3faf, 0xb903, 0x0, 0x1);
        gbc.writeMem(0x6f04, { 0xcd, 0x1d, 0xbd });
        gbc.writeMem(0xaf74, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xaf74, gbc.sp());
        EXPECT(0xbd1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7, gbc.readMem(0xaf74));
        EXPECT(0x6f, gbc.readMem(0xaf75));
        // CD 02A6
        gbc.setState(0x8038, 0xd2a5, 0xc6f0, 0x8b46, 0xb64, 0xe1c5, 0x0, 0x1);
        gbc.writeMem(0x8038, { 0xcd, 0xec, 0x9c });
        gbc.writeMem(0xd2a3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xd2a3, gbc.sp());
        EXPECT(0x9cec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8038));
        EXPECT(0xec, gbc.readMem(0x8039));
        EXPECT(0x9c, gbc.readMem(0x803a));
        EXPECT(0x3b, gbc.readMem(0xd2a3));
        EXPECT(0x80, gbc.readMem(0xd2a4));
        // CD 02A7
        gbc.setState(0xb7dc, 0xdee8, 0x8420, 0xc277, 0xa28f, 0x13f0, 0x0, 0x1);
        gbc.writeMem(0xb7dc, { 0xcd, 0x28, 0xdf });
        gbc.writeMem(0xdee6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xdee6, gbc.sp());
        EXPECT(0xdf28, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb7dc));
        EXPECT(0x28, gbc.readMem(0xb7dd));
        EXPECT(0xdf, gbc.readMem(0xb7de));
        EXPECT(0xdf, gbc.readMem(0xdee6));
        EXPECT(0xb7, gbc.readMem(0xdee7));
        // CD 02A8
        gbc.setState(0xa46a, 0x88f9, 0x35a0, 0xfefb, 0x5bbf, 0x14f8, 0x0, 0x1);
        gbc.writeMem(0x88f7, { 0x0, 0x0 });
        gbc.writeMem(0xa46a, { 0xcd, 0x59, 0x8e });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x88f7, gbc.sp());
        EXPECT(0x8e59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6d, gbc.readMem(0x88f7));
        EXPECT(0xa4, gbc.readMem(0x88f8));
        EXPECT(0xcd, gbc.readMem(0xa46a));
        EXPECT(0x59, gbc.readMem(0xa46b));
        EXPECT(0x8e, gbc.readMem(0xa46c));
        // CD 02AB
        gbc.setState(0xd3f3, 0xb7c2, 0x1fa0, 0xc20f, 0x4fc, 0x14f6, 0x1, 0x1);
        gbc.writeMem(0xb7c0, { 0x0, 0x0 });
        gbc.writeMem(0xd3f3, { 0xcd, 0x18, 0x4 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xb7c0, gbc.sp());
        EXPECT(0x418, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf6, gbc.readMem(0xb7c0));
        EXPECT(0xd3, gbc.readMem(0xb7c1));
        EXPECT(0xcd, gbc.readMem(0xd3f3));
        EXPECT(0x18, gbc.readMem(0xd3f4));
        EXPECT(0x4, gbc.readMem(0xd3f5));
        // CD 02AC
        gbc.setState(0x87e3, 0xee6a, 0x8040, 0xd011, 0x6876, 0x9e6b, 0x0, 0x1);
        gbc.writeMem(0x87e3, { 0xcd, 0x6f, 0x8a });
        gbc.writeMem(0xee68, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xee68, gbc.sp());
        EXPECT(0x8a6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x87e3));
        EXPECT(0x6f, gbc.readMem(0x87e4));
        EXPECT(0x8a, gbc.readMem(0x87e5));
        EXPECT(0xe6, gbc.readMem(0xee68));
        EXPECT(0x87, gbc.readMem(0xee69));
        // CD 02AD
        gbc.setState(0xa73d, 0xa74a, 0x8cc0, 0x6509, 0x8621, 0x9b29, 0x0, 0x1);
        gbc.writeMem(0xa73d, { 0xcd, 0xe1, 0x64 });
        gbc.writeMem(0xa748, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xa748, gbc.sp());
        EXPECT(0x64e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa73d));
        EXPECT(0xe1, gbc.readMem(0xa73e));
        EXPECT(0x64, gbc.readMem(0xa73f));
        EXPECT(0x40, gbc.readMem(0xa748));
        EXPECT(0xa7, gbc.readMem(0xa749));
        // CD 02AE
        gbc.setState(0xef63, 0x9b3c, 0xf940, 0xbc7, 0xac71, 0xc058, 0x0, 0x1);
        gbc.writeMem(0x9b3a, { 0x0, 0x0 });
        gbc.writeMem(0xef63, { 0xcd, 0x6f, 0xa6 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x9b3a, gbc.sp());
        EXPECT(0xa66f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0x9b3a));
        EXPECT(0xef, gbc.readMem(0x9b3b));
        EXPECT(0xcd, gbc.readMem(0xef63));
        EXPECT(0x6f, gbc.readMem(0xef64));
        EXPECT(0xa6, gbc.readMem(0xef65));
        // CD 02B0
        gbc.setState(0x3cc4, 0xfd1d, 0x9e60, 0x82fc, 0x81e1, 0xeac9, 0x0, 0x1);
        gbc.writeMem(0x3cc4, { 0xcd, 0x93, 0x67 });
        gbc.writeMem(0xfd1b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xfd1b, gbc.sp());
        EXPECT(0x6793, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc7, gbc.readMem(0xfd1b));
        EXPECT(0x3c, gbc.readMem(0xfd1c));
        // CD 02B2
        gbc.setState(0x2fd2, 0xfc3e, 0x1f70, 0xdf4a, 0x5f31, 0x9a19, 0x0, 0x0);
        gbc.writeMem(0x2fd2, { 0xcd, 0x5a, 0xde });
        gbc.writeMem(0xfc3c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xfc3c, gbc.sp());
        EXPECT(0xde5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd5, gbc.readMem(0xfc3c));
        EXPECT(0x2f, gbc.readMem(0xfc3d));
        // CD 02B3
        gbc.setState(0x235c, 0x8de7, 0x4dd0, 0x2196, 0x394e, 0x2add, 0x1, 0x0);
        gbc.writeMem(0x235c, { 0xcd, 0x71, 0x8d });
        gbc.writeMem(0x8de5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x8de5, gbc.sp());
        EXPECT(0x8d71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5f, gbc.readMem(0x8de5));
        EXPECT(0x23, gbc.readMem(0x8de6));
        // CD 02B6
        gbc.setState(0x3d49, 0xef8a, 0x4410, 0xc018, 0xffd6, 0x1874, 0x0, 0x0);
        gbc.writeMem(0x3d49, { 0xcd, 0xc8, 0x95 });
        gbc.writeMem(0xef88, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xef88, gbc.sp());
        EXPECT(0x95c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4c, gbc.readMem(0xef88));
        EXPECT(0x3d, gbc.readMem(0xef89));
        // CD 02B7
        gbc.setState(0x48ac, 0x9705, 0x1d10, 0x9154, 0xca89, 0x634b, 0x1, 0x1);
        gbc.writeMem(0x48ac, { 0xcd, 0xa, 0x36 });
        gbc.writeMem(0x9703, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x9703, gbc.sp());
        EXPECT(0x360a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9703));
        EXPECT(0x48, gbc.readMem(0x9704));
        // CD 02B8
        gbc.setState(0x57cc, 0x80ea, 0xcd80, 0x3152, 0x23d2, 0x9e26, 0x0, 0x0);
        gbc.writeMem(0x57cc, { 0xcd, 0xa8, 0xcf });
        gbc.writeMem(0x80e8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x80e8, gbc.sp());
        EXPECT(0xcfa8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x80e8));
        EXPECT(0x57, gbc.readMem(0x80e9));
        // CD 02BA
        gbc.setState(0x3d3e, 0xbb51, 0x860, 0x4e63, 0xd6aa, 0x6dd0, 0x1, 0x1);
        gbc.writeMem(0x3d3e, { 0xcd, 0xc3, 0xc7 });
        gbc.writeMem(0xbb4f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xbb4f, gbc.sp());
        EXPECT(0xc7c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x41, gbc.readMem(0xbb4f));
        EXPECT(0x3d, gbc.readMem(0xbb50));
        // CD 02BC
        gbc.setState(0x2858, 0x8318, 0xc0, 0x7542, 0x3a9, 0xdd36, 0x1, 0x0);
        gbc.writeMem(0x2858, { 0xcd, 0x4c, 0x6d });
        gbc.writeMem(0x8316, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x8316, gbc.sp());
        EXPECT(0x6d4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5b, gbc.readMem(0x8316));
        EXPECT(0x28, gbc.readMem(0x8317));
        // CD 02BD
        gbc.setState(0x35d9, 0xd965, 0x2630, 0x6884, 0xe19b, 0x1daf, 0x0, 0x0);
        gbc.writeMem(0x35d9, { 0xcd, 0x7a, 0x58 });
        gbc.writeMem(0xd963, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xd963, gbc.sp());
        EXPECT(0x587a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd963));
        EXPECT(0x35, gbc.readMem(0xd964));
        // CD 02C1
        gbc.setState(0x1fab, 0x838f, 0x71b0, 0x8fe7, 0xdd17, 0xae04, 0x1, 0x0);
        gbc.writeMem(0x1fab, { 0xcd, 0xb5, 0x64 });
        gbc.writeMem(0x838d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x838d, gbc.sp());
        EXPECT(0x64b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xae, gbc.readMem(0x838d));
        EXPECT(0x1f, gbc.readMem(0x838e));
        // CD 02C3
        gbc.setState(0x561f, 0x89ce, 0xfdf0, 0xd79a, 0x4596, 0x28f, 0x0, 0x1);
        gbc.writeMem(0x561f, { 0xcd, 0x6b, 0xe3 });
        gbc.writeMem(0x89cc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x89cc, gbc.sp());
        EXPECT(0xe36b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x22, gbc.readMem(0x89cc));
        EXPECT(0x56, gbc.readMem(0x89cd));
        // CD 02C6
        gbc.setState(0x78c, 0xc1e2, 0x29f0, 0x9c83, 0x8d95, 0xcc10, 0x0, 0x1);
        gbc.writeMem(0x78c, { 0xcd, 0x9e, 0xba });
        gbc.writeMem(0xc1e0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xc1e0, gbc.sp());
        EXPECT(0xba9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xc1e0));
        EXPECT(0x7, gbc.readMem(0xc1e1));
        // CD 02CA
        gbc.setState(0x2a44, 0xcaf0, 0x2a70, 0x8ce9, 0xc1e8, 0xfe20, 0x0, 0x1);
        gbc.writeMem(0x2a44, { 0xcd, 0x29, 0x1a });
        gbc.writeMem(0xcaee, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xcaee, gbc.sp());
        EXPECT(0x1a29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x47, gbc.readMem(0xcaee));
        EXPECT(0x2a, gbc.readMem(0xcaef));
        // CD 02CB
        gbc.setState(0xcd51, 0x8826, 0x8030, 0x1a89, 0xde38, 0x2afa, 0x0, 0x1);
        gbc.writeMem(0x8824, { 0x0, 0x0 });
        gbc.writeMem(0xcd51, { 0xcd, 0x36, 0x8b });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x8824, gbc.sp());
        EXPECT(0x8b36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0x8824));
        EXPECT(0xcd, gbc.readMem(0x8825));
        EXPECT(0xcd, gbc.readMem(0xcd51));
        EXPECT(0x36, gbc.readMem(0xcd52));
        EXPECT(0x8b, gbc.readMem(0xcd53));
        // CD 02CC
        gbc.setState(0x161d, 0x9fc8, 0xbef0, 0xe7ac, 0xcb0, 0x6e75, 0x1, 0x1);
        gbc.writeMem(0x161d, { 0xcd, 0xf8, 0xc3 });
        gbc.writeMem(0x9fc6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x9fc6, gbc.sp());
        EXPECT(0xc3f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x20, gbc.readMem(0x9fc6));
        EXPECT(0x16, gbc.readMem(0x9fc7));
        // CD 02CD
        gbc.setState(0x536b, 0xc857, 0xbe90, 0xa4cf, 0x1a8a, 0x459f, 0x0, 0x1);
        gbc.writeMem(0x536b, { 0xcd, 0x36, 0xdd });
        gbc.writeMem(0xc855, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xc855, gbc.sp());
        EXPECT(0xdd36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6e, gbc.readMem(0xc855));
        EXPECT(0x53, gbc.readMem(0xc856));
        // CD 02CF
        gbc.setState(0x6b18, 0xb4af, 0xedb0, 0x6592, 0x1661, 0xfb38, 0x0, 0x1);
        gbc.writeMem(0x6b18, { 0xcd, 0xe4, 0x2f });
        gbc.writeMem(0xb4ad, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xb4ad, gbc.sp());
        EXPECT(0x2fe4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1b, gbc.readMem(0xb4ad));
        EXPECT(0x6b, gbc.readMem(0xb4ae));
        // CD 02D2
        gbc.setState(0x6ed7, 0xc210, 0x1440, 0x4331, 0x4e25, 0x8de1, 0x1, 0x1);
        gbc.writeMem(0x6ed7, { 0xcd, 0x35, 0xd3 });
        gbc.writeMem(0xc20e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xc20e, gbc.sp());
        EXPECT(0xd335, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xda, gbc.readMem(0xc20e));
        EXPECT(0x6e, gbc.readMem(0xc20f));
        // CD 02D4
        gbc.setState(0x8d2c, 0xfb3b, 0xe690, 0xf2b9, 0xb166, 0x2781, 0x0, 0x0);
        gbc.writeMem(0x8d2c, { 0xcd, 0xf0, 0xc5 });
        gbc.writeMem(0xfb39, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xfb39, gbc.sp());
        EXPECT(0xc5f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8d2c));
        EXPECT(0xf0, gbc.readMem(0x8d2d));
        EXPECT(0xc5, gbc.readMem(0x8d2e));
        EXPECT(0x2f, gbc.readMem(0xfb39));
        EXPECT(0x8d, gbc.readMem(0xfb3a));
        // CD 02D8
        gbc.setState(0xdf37, 0x86b8, 0xee70, 0xc3ce, 0x6ef2, 0xbe62, 0x0, 0x1);
        gbc.writeMem(0x86b6, { 0x0, 0x0 });
        gbc.writeMem(0xdf37, { 0xcd, 0x5d, 0x34 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x86b6, gbc.sp());
        EXPECT(0x345d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3a, gbc.readMem(0x86b6));
        EXPECT(0xdf, gbc.readMem(0x86b7));
        EXPECT(0xcd, gbc.readMem(0xdf37));
        EXPECT(0x5d, gbc.readMem(0xdf38));
        EXPECT(0x34, gbc.readMem(0xdf39));
        // CD 02D9
        gbc.setState(0x8f68, 0xd1de, 0x63d0, 0xb3d0, 0x974a, 0x4a60, 0x0, 0x1);
        gbc.writeMem(0x8f68, { 0xcd, 0x9e, 0x63 });
        gbc.writeMem(0xd1dc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xd1dc, gbc.sp());
        EXPECT(0x639e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8f68));
        EXPECT(0x9e, gbc.readMem(0x8f69));
        EXPECT(0x63, gbc.readMem(0x8f6a));
        EXPECT(0x6b, gbc.readMem(0xd1dc));
        EXPECT(0x8f, gbc.readMem(0xd1dd));
        // CD 02DB
        gbc.setState(0xb88c, 0xa0c5, 0x9b80, 0xe0e2, 0xbc0c, 0x838, 0x0, 0x0);
        gbc.writeMem(0xa0c3, { 0x0, 0x0 });
        gbc.writeMem(0xb88c, { 0xcd, 0x37, 0xf7 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xa0c3, gbc.sp());
        EXPECT(0xf737, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xa0c3));
        EXPECT(0xb8, gbc.readMem(0xa0c4));
        EXPECT(0xcd, gbc.readMem(0xb88c));
        EXPECT(0x37, gbc.readMem(0xb88d));
        EXPECT(0xf7, gbc.readMem(0xb88e));
        // CD 02DF
        gbc.setState(0x9c25, 0xfc96, 0xc020, 0xfc8e, 0x3051, 0xc04d, 0x0, 0x1);
        gbc.writeMem(0x9c25, { 0xcd, 0x5d, 0xfd });
        gbc.writeMem(0xfc94, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xfc94, gbc.sp());
        EXPECT(0xfd5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9c25));
        EXPECT(0x5d, gbc.readMem(0x9c26));
        EXPECT(0xfd, gbc.readMem(0x9c27));
        EXPECT(0x28, gbc.readMem(0xfc94));
        EXPECT(0x9c, gbc.readMem(0xfc95));
        // CD 02E2
        gbc.setState(0x86ea, 0x981a, 0xed90, 0x96ba, 0xa376, 0x57d6, 0x1, 0x1);
        gbc.writeMem(0x86ea, { 0xcd, 0xd5, 0x94 });
        gbc.writeMem(0x9818, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x9818, gbc.sp());
        EXPECT(0x94d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x86ea));
        EXPECT(0xd5, gbc.readMem(0x86eb));
        EXPECT(0x94, gbc.readMem(0x86ec));
        EXPECT(0xed, gbc.readMem(0x9818));
        EXPECT(0x86, gbc.readMem(0x9819));
        // CD 02E3
        gbc.setState(0xc2fc, 0xf27b, 0x9c30, 0x5a81, 0x4cf4, 0x65e6, 0x1, 0x0);
        gbc.writeMem(0xc2fc, { 0xcd, 0xdb, 0xfd });
        gbc.writeMem(0xf279, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xf279, gbc.sp());
        EXPECT(0xfddb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc2fc));
        EXPECT(0xdb, gbc.readMem(0xc2fd));
        EXPECT(0xfd, gbc.readMem(0xc2fe));
        EXPECT(0xff, gbc.readMem(0xf279));
        EXPECT(0xc2, gbc.readMem(0xf27a));
        // CD 02E4
        gbc.setState(0x6b7c, 0xca76, 0x8140, 0xcd03, 0xcb06, 0x5c84, 0x0, 0x1);
        gbc.writeMem(0x6b7c, { 0xcd, 0xf, 0xc7 });
        gbc.writeMem(0xca74, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xca74, gbc.sp());
        EXPECT(0xc70f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7f, gbc.readMem(0xca74));
        EXPECT(0x6b, gbc.readMem(0xca75));
        // CD 02E5
        gbc.setState(0x33cb, 0xcce9, 0x1930, 0xb557, 0x8c25, 0xd315, 0x0, 0x1);
        gbc.writeMem(0x33cb, { 0xcd, 0x5c, 0xcc });
        gbc.writeMem(0xcce7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xcce7, gbc.sp());
        EXPECT(0xcc5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0xcce7));
        EXPECT(0x33, gbc.readMem(0xcce8));
        // CD 02ED
        gbc.setState(0x8c3, 0x8d48, 0x750, 0xa141, 0x6863, 0xd060, 0x1, 0x1);
        gbc.writeMem(0x8c3, { 0xcd, 0x38, 0xb3 });
        gbc.writeMem(0x8d46, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x8d46, gbc.sp());
        EXPECT(0xb338, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc6, gbc.readMem(0x8d46));
        EXPECT(0x8, gbc.readMem(0x8d47));
        // CD 02EE
        gbc.setState(0x6b3f, 0xf275, 0xd460, 0xf2fc, 0x60ec, 0x2524, 0x1, 0x0);
        gbc.writeMem(0x6b3f, { 0xcd, 0x77, 0xf2 });
        gbc.writeMem(0xf273, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xf273, gbc.sp());
        EXPECT(0xf277, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x42, gbc.readMem(0xf273));
        EXPECT(0x6b, gbc.readMem(0xf274));
        // CD 02F0
        gbc.setState(0x83d5, 0x83f9, 0x91d0, 0x6b13, 0x1938, 0x6b08, 0x1, 0x0);
        gbc.writeMem(0x83d5, { 0xcd, 0x79, 0xa3 });
        gbc.writeMem(0x83f7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x83f7, gbc.sp());
        EXPECT(0xa379, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x83d5));
        EXPECT(0x79, gbc.readMem(0x83d6));
        EXPECT(0xa3, gbc.readMem(0x83d7));
        EXPECT(0xd8, gbc.readMem(0x83f7));
        EXPECT(0x83, gbc.readMem(0x83f8));
        // CD 02F2
        gbc.setState(0x23f9, 0xe69b, 0xf0d0, 0x90b2, 0xce06, 0xcecc, 0x1, 0x0);
        gbc.writeMem(0x23f9, { 0xcd, 0x6e, 0x5c });
        gbc.writeMem(0xe699, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xe699, gbc.sp());
        EXPECT(0x5c6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfc, gbc.readMem(0xe699));
        EXPECT(0x23, gbc.readMem(0xe69a));
        // CD 02F3
        gbc.setState(0x6d0f, 0xcca0, 0x8e90, 0x1141, 0x9e9f, 0xc718, 0x1, 0x0);
        gbc.writeMem(0x6d0f, { 0xcd, 0xdc, 0x2e });
        gbc.writeMem(0xcc9e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xcc9e, gbc.sp());
        EXPECT(0x2edc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0xcc9e));
        EXPECT(0x6d, gbc.readMem(0xcc9f));
        // CD 02F9
        gbc.setState(0x1f3e, 0x8d45, 0xbd00, 0x52be, 0x258a, 0x89f, 0x1, 0x1);
        gbc.writeMem(0x1f3e, { 0xcd, 0xbf, 0xd8 });
        gbc.writeMem(0x8d43, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x8d43, gbc.sp());
        EXPECT(0xd8bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x41, gbc.readMem(0x8d43));
        EXPECT(0x1f, gbc.readMem(0x8d44));
        // CD 02FC
        gbc.setState(0x6e9e, 0xce72, 0xb7f0, 0x806f, 0xecdf, 0xcadb, 0x0, 0x0);
        gbc.writeMem(0x6e9e, { 0xcd, 0x87, 0x47 });
        gbc.writeMem(0xce70, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xce70, gbc.sp());
        EXPECT(0x4787, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa1, gbc.readMem(0xce70));
        EXPECT(0x6e, gbc.readMem(0xce71));
        // CD 0300
        gbc.setState(0x499f, 0x9844, 0xe910, 0xd030, 0x80e2, 0x7e4f, 0x1, 0x0);
        gbc.writeMem(0x499f, { 0xcd, 0x6e, 0x2f });
        gbc.writeMem(0x9842, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x9842, gbc.sp());
        EXPECT(0x2f6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa2, gbc.readMem(0x9842));
        EXPECT(0x49, gbc.readMem(0x9843));
        // CD 0303
        gbc.setState(0xae25, 0xbf0e, 0x7120, 0x618e, 0x5647, 0x415, 0x1, 0x1);
        gbc.writeMem(0xae25, { 0xcd, 0x13, 0x41 });
        gbc.writeMem(0xbf0c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xbf0c, gbc.sp());
        EXPECT(0x4113, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xae25));
        EXPECT(0x13, gbc.readMem(0xae26));
        EXPECT(0x41, gbc.readMem(0xae27));
        EXPECT(0x28, gbc.readMem(0xbf0c));
        EXPECT(0xae, gbc.readMem(0xbf0d));
        // CD 0304
        gbc.setState(0xaa3, 0xf87b, 0x2ac0, 0x48d9, 0x3959, 0xa3fc, 0x0, 0x1);
        gbc.writeMem(0xaa3, { 0xcd, 0x9e, 0x1a });
        gbc.writeMem(0xf879, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xf879, gbc.sp());
        EXPECT(0x1a9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0xf879));
        EXPECT(0xa, gbc.readMem(0xf87a));
        // CD 0305
        gbc.setState(0x39d, 0xb598, 0x7130, 0x2363, 0x4af0, 0xf71b, 0x1, 0x1);
        gbc.writeMem(0x39d, { 0xcd, 0x9, 0x85 });
        gbc.writeMem(0xb596, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xb596, gbc.sp());
        EXPECT(0x8509, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0xb596));
        EXPECT(0x3, gbc.readMem(0xb597));
        // CD 0306
        gbc.setState(0x3080, 0xe635, 0x50c0, 0xaefa, 0xcab8, 0xa904, 0x0, 0x1);
        gbc.writeMem(0x3080, { 0xcd, 0xdc, 0x60 });
        gbc.writeMem(0xe633, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xe633, gbc.sp());
        EXPECT(0x60dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x83, gbc.readMem(0xe633));
        EXPECT(0x30, gbc.readMem(0xe634));
        // CD 0307
        gbc.setState(0x1c56, 0x84e0, 0x2fb0, 0x9b6e, 0x1238, 0x71e8, 0x1, 0x1);
        gbc.writeMem(0x1c56, { 0xcd, 0x45, 0x78 });
        gbc.writeMem(0x84de, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x84de, gbc.sp());
        EXPECT(0x7845, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x59, gbc.readMem(0x84de));
        EXPECT(0x1c, gbc.readMem(0x84df));
        // CD 0308
        gbc.setState(0xf6c, 0x8cfb, 0xc50, 0xc55d, 0x45a9, 0x8fcc, 0x0, 0x1);
        gbc.writeMem(0xf6c, { 0xcd, 0xbe, 0xa9 });
        gbc.writeMem(0x8cf9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x8cf9, gbc.sp());
        EXPECT(0xa9be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6f, gbc.readMem(0x8cf9));
        EXPECT(0xf, gbc.readMem(0x8cfa));
        // CD 030B
        gbc.setState(0x4ddb, 0xc5b0, 0x6140, 0xd8cb, 0x84f7, 0xfe6c, 0x1, 0x1);
        gbc.writeMem(0x4ddb, { 0xcd, 0xfb, 0xa9 });
        gbc.writeMem(0xc5ae, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xc5ae, gbc.sp());
        EXPECT(0xa9fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xde, gbc.readMem(0xc5ae));
        EXPECT(0x4d, gbc.readMem(0xc5af));
        // CD 030C
        gbc.setState(0x445c, 0xaf3f, 0x3d90, 0xe242, 0x3ddd, 0x507b, 0x0, 0x1);
        gbc.writeMem(0x445c, { 0xcd, 0xc9, 0x2 });
        gbc.writeMem(0xaf3d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xaf3d, gbc.sp());
        EXPECT(0x2c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5f, gbc.readMem(0xaf3d));
        EXPECT(0x44, gbc.readMem(0xaf3e));
        // CD 0311
        gbc.setState(0xc9fc, 0xc30d, 0x2f90, 0xe68c, 0x4386, 0xb3c4, 0x0, 0x0);
        gbc.writeMem(0xc30b, { 0x0, 0x0 });
        gbc.writeMem(0xc9fc, { 0xcd, 0x5e, 0x4d });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xc30b, gbc.sp());
        EXPECT(0x4d5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xff, gbc.readMem(0xc30b));
        EXPECT(0xc9, gbc.readMem(0xc30c));
        EXPECT(0xcd, gbc.readMem(0xc9fc));
        EXPECT(0x5e, gbc.readMem(0xc9fd));
        EXPECT(0x4d, gbc.readMem(0xc9fe));
        // CD 0315
        gbc.setState(0xefb2, 0xf17b, 0x710, 0xb018, 0x8b15, 0x727d, 0x0, 0x1);
        gbc.writeMem(0xefb2, { 0xcd, 0x83, 0xaa });
        gbc.writeMem(0xf179, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xf179, gbc.sp());
        EXPECT(0xaa83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xefb2));
        EXPECT(0x83, gbc.readMem(0xefb3));
        EXPECT(0xaa, gbc.readMem(0xefb4));
        EXPECT(0xb5, gbc.readMem(0xf179));
        EXPECT(0xef, gbc.readMem(0xf17a));
        // CD 0316
        gbc.setState(0x589f, 0xda1b, 0x3900, 0xb6f0, 0x5802, 0x2014, 0x0, 0x0);
        gbc.writeMem(0x589f, { 0xcd, 0x70, 0x2b });
        gbc.writeMem(0xda19, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xda19, gbc.sp());
        EXPECT(0x2b70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa2, gbc.readMem(0xda19));
        EXPECT(0x58, gbc.readMem(0xda1a));
        // CD 0318
        gbc.setState(0x717b, 0x93df, 0x840, 0x5d5b, 0xac08, 0x5d66, 0x1, 0x0);
        gbc.writeMem(0x717b, { 0xcd, 0xa8, 0x14 });
        gbc.writeMem(0x93dd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x93dd, gbc.sp());
        EXPECT(0x14a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0x93dd));
        EXPECT(0x71, gbc.readMem(0x93de));
        // CD 0319
        gbc.setState(0x439a, 0xd529, 0x6030, 0xacc3, 0x1864, 0x4b6d, 0x0, 0x0);
        gbc.writeMem(0x439a, { 0xcd, 0x28, 0x62 });
        gbc.writeMem(0xd527, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xd527, gbc.sp());
        EXPECT(0x6228, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9d, gbc.readMem(0xd527));
        EXPECT(0x43, gbc.readMem(0xd528));
        // CD 031A
        gbc.setState(0x928a, 0x8ab5, 0x6930, 0x22d6, 0x7009, 0x33e2, 0x0, 0x1);
        gbc.writeMem(0x8ab3, { 0x0, 0x0 });
        gbc.writeMem(0x928a, { 0xcd, 0xeb, 0x58 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x8ab3, gbc.sp());
        EXPECT(0x58eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8d, gbc.readMem(0x8ab3));
        EXPECT(0x92, gbc.readMem(0x8ab4));
        EXPECT(0xcd, gbc.readMem(0x928a));
        EXPECT(0xeb, gbc.readMem(0x928b));
        EXPECT(0x58, gbc.readMem(0x928c));
        // CD 031B
        gbc.setState(0xb0b9, 0xfaab, 0x9c70, 0xa04d, 0xf2f3, 0x9072, 0x0, 0x1);
        gbc.writeMem(0xb0b9, { 0xcd, 0xe, 0xd3 });
        gbc.writeMem(0xfaa9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xfaa9, gbc.sp());
        EXPECT(0xd30e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb0b9));
        EXPECT(0xe, gbc.readMem(0xb0ba));
        EXPECT(0xd3, gbc.readMem(0xb0bb));
        EXPECT(0xbc, gbc.readMem(0xfaa9));
        EXPECT(0xb0, gbc.readMem(0xfaaa));
        // CD 0321
        gbc.setState(0x98bc, 0xc9f0, 0xf4d0, 0xf6af, 0xfcb6, 0xc1df, 0x1, 0x1);
        gbc.writeMem(0x98bc, { 0xcd, 0x21, 0xf4 });
        gbc.writeMem(0xc9ee, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xc9ee, gbc.sp());
        EXPECT(0xf421, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x98bc));
        EXPECT(0x21, gbc.readMem(0x98bd));
        EXPECT(0xf4, gbc.readMem(0x98be));
        EXPECT(0xbf, gbc.readMem(0xc9ee));
        EXPECT(0x98, gbc.readMem(0xc9ef));
        // CD 0325
        gbc.setState(0x9c9f, 0xd7e4, 0x150, 0x490c, 0x26a7, 0x9694, 0x1, 0x1);
        gbc.writeMem(0x9c9f, { 0xcd, 0x3b, 0x5a });
        gbc.writeMem(0xd7e2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xd7e2, gbc.sp());
        EXPECT(0x5a3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9c9f));
        EXPECT(0x3b, gbc.readMem(0x9ca0));
        EXPECT(0x5a, gbc.readMem(0x9ca1));
        EXPECT(0xa2, gbc.readMem(0xd7e2));
        EXPECT(0x9c, gbc.readMem(0xd7e3));
        // CD 0327
        gbc.setState(0x3b7d, 0xfcda, 0xb4f0, 0xbcd2, 0xe035, 0x8b1a, 0x0, 0x1);
        gbc.writeMem(0x3b7d, { 0xcd, 0x9f, 0xf2 });
        gbc.writeMem(0xfcd8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xfcd8, gbc.sp());
        EXPECT(0xf29f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x80, gbc.readMem(0xfcd8));
        EXPECT(0x3b, gbc.readMem(0xfcd9));
        // CD 032C
        gbc.setState(0x3590, 0xa39e, 0x41c0, 0xc868, 0xe78d, 0xc7f8, 0x0, 0x0);
        gbc.writeMem(0x3590, { 0xcd, 0x95, 0x19 });
        gbc.writeMem(0xa39c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xa39c, gbc.sp());
        EXPECT(0x1995, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x93, gbc.readMem(0xa39c));
        EXPECT(0x35, gbc.readMem(0xa39d));
        // CD 032E
        gbc.setState(0x5bbb, 0xf703, 0x60d0, 0x7db9, 0x58ad, 0xece4, 0x0, 0x1);
        gbc.writeMem(0x5bbb, { 0xcd, 0x9d, 0xcc });
        gbc.writeMem(0xf701, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xf701, gbc.sp());
        EXPECT(0xcc9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0xf701));
        EXPECT(0x5b, gbc.readMem(0xf702));
        // CD 0330
        gbc.setState(0xc06, 0xae44, 0x190, 0xdb3, 0xa6ef, 0x7145, 0x1, 0x0);
        gbc.writeMem(0xc06, { 0xcd, 0x31, 0x43 });
        gbc.writeMem(0xae42, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xae42, gbc.sp());
        EXPECT(0x4331, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0xae42));
        EXPECT(0xc, gbc.readMem(0xae43));
        // CD 0331
        gbc.setState(0xa4e0, 0xbfda, 0x98c0, 0x12a6, 0x6670, 0xbeb2, 0x0, 0x0);
        gbc.writeMem(0xa4e0, { 0xcd, 0x16, 0xaf });
        gbc.writeMem(0xbfd8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xbfd8, gbc.sp());
        EXPECT(0xaf16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa4e0));
        EXPECT(0x16, gbc.readMem(0xa4e1));
        EXPECT(0xaf, gbc.readMem(0xa4e2));
        EXPECT(0xe3, gbc.readMem(0xbfd8));
        EXPECT(0xa4, gbc.readMem(0xbfd9));
        // CD 0334
        gbc.setState(0xb934, 0xd164, 0x95d0, 0x20fd, 0x6bdd, 0x6584, 0x0, 0x1);
        gbc.writeMem(0xb934, { 0xcd, 0x39, 0x3c });
        gbc.writeMem(0xd162, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xd162, gbc.sp());
        EXPECT(0x3c39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb934));
        EXPECT(0x39, gbc.readMem(0xb935));
        EXPECT(0x3c, gbc.readMem(0xb936));
        EXPECT(0x37, gbc.readMem(0xd162));
        EXPECT(0xb9, gbc.readMem(0xd163));
        // CD 0335
        gbc.setState(0x44f9, 0xbbaf, 0xa0f0, 0x2c19, 0x195d, 0xe69d, 0x0, 0x1);
        gbc.writeMem(0x44f9, { 0xcd, 0x70, 0xe4 });
        gbc.writeMem(0xbbad, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xbbad, gbc.sp());
        EXPECT(0xe470, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfc, gbc.readMem(0xbbad));
        EXPECT(0x44, gbc.readMem(0xbbae));
        // CD 0337
        gbc.setState(0xebd5, 0xc09e, 0xa60, 0x1280, 0xb714, 0xb418, 0x0, 0x1);
        gbc.writeMem(0xc09c, { 0x0, 0x0 });
        gbc.writeMem(0xebd5, { 0xcd, 0x1a, 0xb5 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xc09c, gbc.sp());
        EXPECT(0xb51a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd8, gbc.readMem(0xc09c));
        EXPECT(0xeb, gbc.readMem(0xc09d));
        EXPECT(0xcd, gbc.readMem(0xebd5));
        EXPECT(0x1a, gbc.readMem(0xebd6));
        EXPECT(0xb5, gbc.readMem(0xebd7));
        // CD 0339
        gbc.setState(0x169, 0xad5f, 0xe370, 0x3c9, 0x8e5e, 0x87f5, 0x1, 0x1);
        gbc.writeMem(0x169, { 0xcd, 0xe6, 0xe3 });
        gbc.writeMem(0xad5d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xad5d, gbc.sp());
        EXPECT(0xe3e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6c, gbc.readMem(0xad5d));
        EXPECT(0x1, gbc.readMem(0xad5e));
        // CD 033A
        gbc.setState(0x1487, 0xc545, 0xcff0, 0x9e7a, 0x3cd3, 0xb418, 0x1, 0x1);
        gbc.writeMem(0x1487, { 0xcd, 0xbf, 0x46 });
        gbc.writeMem(0xc543, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xc543, gbc.sp());
        EXPECT(0x46bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8a, gbc.readMem(0xc543));
        EXPECT(0x14, gbc.readMem(0xc544));
        // CD 033B
        gbc.setState(0x7d42, 0xb1b5, 0xad50, 0xc058, 0x745, 0xbdf5, 0x0, 0x0);
        gbc.writeMem(0x7d42, { 0xcd, 0xf3, 0x27 });
        gbc.writeMem(0xb1b3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xb1b3, gbc.sp());
        EXPECT(0x27f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x45, gbc.readMem(0xb1b3));
        EXPECT(0x7d, gbc.readMem(0xb1b4));
        // CD 033F
        gbc.setState(0x1127, 0xf649, 0x1270, 0x13d, 0xeb, 0xd142, 0x0, 0x0);
        gbc.writeMem(0x1127, { 0xcd, 0xcd, 0xc6 });
        gbc.writeMem(0xf647, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xf647, gbc.sp());
        EXPECT(0xc6cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0xf647));
        EXPECT(0x11, gbc.readMem(0xf648));
        // CD 0340
        gbc.setState(0x67f5, 0xd665, 0x7dd0, 0x3354, 0xb432, 0xbf8, 0x0, 0x0);
        gbc.writeMem(0x67f5, { 0xcd, 0x70, 0xb4 });
        gbc.writeMem(0xd663, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xd663, gbc.sp());
        EXPECT(0xb470, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf8, gbc.readMem(0xd663));
        EXPECT(0x67, gbc.readMem(0xd664));
        // CD 0342
        gbc.setState(0xbe0b, 0xdcf8, 0x3d90, 0xa2b6, 0xf5b1, 0x8554, 0x1, 0x1);
        gbc.writeMem(0xbe0b, { 0xcd, 0x97, 0x8d });
        gbc.writeMem(0xdcf6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xdcf6, gbc.sp());
        EXPECT(0x8d97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xbe0b));
        EXPECT(0x97, gbc.readMem(0xbe0c));
        EXPECT(0x8d, gbc.readMem(0xbe0d));
        EXPECT(0xe, gbc.readMem(0xdcf6));
        EXPECT(0xbe, gbc.readMem(0xdcf7));
        // CD 0348
        gbc.setState(0xe9dd, 0xd87e, 0x9830, 0x15dc, 0xcb49, 0xb12f, 0x1, 0x1);
        gbc.writeMem(0xd87c, { 0x0, 0x0 });
        gbc.writeMem(0xe9dd, { 0xcd, 0x63, 0x4d });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xd87c, gbc.sp());
        EXPECT(0x4d63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe0, gbc.readMem(0xd87c));
        EXPECT(0xe9, gbc.readMem(0xd87d));
        EXPECT(0xcd, gbc.readMem(0xe9dd));
        EXPECT(0x63, gbc.readMem(0xe9de));
        EXPECT(0x4d, gbc.readMem(0xe9df));
        // CD 034A
        gbc.setState(0x7b4, 0xfd34, 0x2e90, 0x9974, 0x5733, 0xd049, 0x0, 0x1);
        gbc.writeMem(0x7b4, { 0xcd, 0x1c, 0xec });
        gbc.writeMem(0xfd32, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xfd32, gbc.sp());
        EXPECT(0xec1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb7, gbc.readMem(0xfd32));
        EXPECT(0x7, gbc.readMem(0xfd33));
        // CD 034B
        gbc.setState(0x83f3, 0xf911, 0xb470, 0xbc6e, 0x2726, 0x40b9, 0x0, 0x1);
        gbc.writeMem(0x83f3, { 0xcd, 0x60, 0x34 });
        gbc.writeMem(0xf90f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xf90f, gbc.sp());
        EXPECT(0x3460, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x83f3));
        EXPECT(0x60, gbc.readMem(0x83f4));
        EXPECT(0x34, gbc.readMem(0x83f5));
        EXPECT(0xf6, gbc.readMem(0xf90f));
        EXPECT(0x83, gbc.readMem(0xf910));
        // CD 034C
        gbc.setState(0x1211, 0x8d83, 0x9fb0, 0x9bb2, 0xf487, 0xadc1, 0x0, 0x0);
        gbc.writeMem(0x1211, { 0xcd, 0xa3, 0x86 });
        gbc.writeMem(0x8d81, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x8d81, gbc.sp());
        EXPECT(0x86a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x14, gbc.readMem(0x8d81));
        EXPECT(0x12, gbc.readMem(0x8d82));
        // CD 034F
        gbc.setState(0x43aa, 0x9bce, 0x440, 0x929f, 0x85b2, 0x8a1, 0x1, 0x1);
        gbc.writeMem(0x43aa, { 0xcd, 0xdb, 0x76 });
        gbc.writeMem(0x9bcc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x9bcc, gbc.sp());
        EXPECT(0x76db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xad, gbc.readMem(0x9bcc));
        EXPECT(0x43, gbc.readMem(0x9bcd));
        // CD 0352
        gbc.setState(0x3312, 0xb10c, 0xc0a0, 0xdf38, 0x7aac, 0x502b, 0x1, 0x1);
        gbc.writeMem(0x3312, { 0xcd, 0x4c, 0x77 });
        gbc.writeMem(0xb10a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xb10a, gbc.sp());
        EXPECT(0x774c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x15, gbc.readMem(0xb10a));
        EXPECT(0x33, gbc.readMem(0xb10b));
        // CD 0353
        gbc.setState(0x4937, 0xc337, 0x9d50, 0xc551, 0x519c, 0xaed7, 0x1, 0x0);
        gbc.writeMem(0x4937, { 0xcd, 0x75, 0x9c });
        gbc.writeMem(0xc335, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xc335, gbc.sp());
        EXPECT(0x9c75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3a, gbc.readMem(0xc335));
        EXPECT(0x49, gbc.readMem(0xc336));
        // CD 0354
        gbc.setState(0xc209, 0xa2ff, 0xe3d0, 0xa6bc, 0x4fd0, 0xe2fd, 0x1, 0x0);
        gbc.writeMem(0xa2fd, { 0x0, 0x0 });
        gbc.writeMem(0xc209, { 0xcd, 0x80, 0xea });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xa2fd, gbc.sp());
        EXPECT(0xea80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc, gbc.readMem(0xa2fd));
        EXPECT(0xc2, gbc.readMem(0xa2fe));
        EXPECT(0xcd, gbc.readMem(0xc209));
        EXPECT(0x80, gbc.readMem(0xc20a));
        EXPECT(0xea, gbc.readMem(0xc20b));
        // CD 035D
        gbc.setState(0xd89d, 0xc4bc, 0xeae0, 0x3382, 0xdea1, 0xf26, 0x0, 0x0);
        gbc.writeMem(0xc4ba, { 0x0, 0x0 });
        gbc.writeMem(0xd89d, { 0xcd, 0x8d, 0x70 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xc4ba, gbc.sp());
        EXPECT(0x708d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0xc4ba));
        EXPECT(0xd8, gbc.readMem(0xc4bb));
        EXPECT(0xcd, gbc.readMem(0xd89d));
        EXPECT(0x8d, gbc.readMem(0xd89e));
        EXPECT(0x70, gbc.readMem(0xd89f));
        // CD 035E
        gbc.setState(0x948, 0xcfb3, 0xc840, 0x718b, 0x98d0, 0x1315, 0x1, 0x1);
        gbc.writeMem(0x948, { 0xcd, 0xd9, 0xb1 });
        gbc.writeMem(0xcfb1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xcfb1, gbc.sp());
        EXPECT(0xb1d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4b, gbc.readMem(0xcfb1));
        EXPECT(0x9, gbc.readMem(0xcfb2));
        // CD 035F
        gbc.setState(0x65b9, 0x8b87, 0xc8b0, 0x7170, 0x65ab, 0x41f4, 0x1, 0x1);
        gbc.writeMem(0x65b9, { 0xcd, 0x66, 0xe5 });
        gbc.writeMem(0x8b85, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x8b85, gbc.sp());
        EXPECT(0xe566, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbc, gbc.readMem(0x8b85));
        EXPECT(0x65, gbc.readMem(0x8b86));
        // CD 0367
        gbc.setState(0xaebf, 0xf48a, 0x3be0, 0x5498, 0x4aa8, 0x938, 0x0, 0x1);
        gbc.writeMem(0xaebf, { 0xcd, 0xa6, 0x8b });
        gbc.writeMem(0xf488, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xf488, gbc.sp());
        EXPECT(0x8ba6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xaebf));
        EXPECT(0xa6, gbc.readMem(0xaec0));
        EXPECT(0x8b, gbc.readMem(0xaec1));
        EXPECT(0xc2, gbc.readMem(0xf488));
        EXPECT(0xae, gbc.readMem(0xf489));
        // CD 0368
        gbc.setState(0x4c96, 0xc538, 0xd430, 0xbd8e, 0x7580, 0x32e9, 0x1, 0x0);
        gbc.writeMem(0x4c96, { 0xcd, 0x59, 0xf1 });
        gbc.writeMem(0xc536, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xc536, gbc.sp());
        EXPECT(0xf159, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x99, gbc.readMem(0xc536));
        EXPECT(0x4c, gbc.readMem(0xc537));
        // CD 0369
        gbc.setState(0xa82b, 0xc2cc, 0x1a60, 0x6491, 0x1b70, 0x8042, 0x1, 0x1);
        gbc.writeMem(0xa82b, { 0xcd, 0xc4, 0xda });
        gbc.writeMem(0xc2ca, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xc2ca, gbc.sp());
        EXPECT(0xdac4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa82b));
        EXPECT(0xc4, gbc.readMem(0xa82c));
        EXPECT(0xda, gbc.readMem(0xa82d));
        EXPECT(0x2e, gbc.readMem(0xc2ca));
        EXPECT(0xa8, gbc.readMem(0xc2cb));
        // CD 0370
        gbc.setState(0x8c96, 0xafdb, 0xd540, 0x1d32, 0xd495, 0xceb1, 0x0, 0x1);
        gbc.writeMem(0x8c96, { 0xcd, 0xb, 0xa0 });
        gbc.writeMem(0xafd9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xafd9, gbc.sp());
        EXPECT(0xa00b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8c96));
        EXPECT(0xb, gbc.readMem(0x8c97));
        EXPECT(0xa0, gbc.readMem(0x8c98));
        EXPECT(0x99, gbc.readMem(0xafd9));
        EXPECT(0x8c, gbc.readMem(0xafda));
        // CD 0371
        gbc.setState(0xadd0, 0xb9da, 0xdef0, 0x5151, 0x71f4, 0xc177, 0x0, 0x1);
        gbc.writeMem(0xadd0, { 0xcd, 0xca, 0x75 });
        gbc.writeMem(0xb9d8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xb9d8, gbc.sp());
        EXPECT(0x75ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xadd0));
        EXPECT(0xca, gbc.readMem(0xadd1));
        EXPECT(0x75, gbc.readMem(0xadd2));
        EXPECT(0xd3, gbc.readMem(0xb9d8));
        EXPECT(0xad, gbc.readMem(0xb9d9));
        // CD 0376
        gbc.setState(0x1951, 0x8db0, 0xaef0, 0xf06e, 0xb348, 0xe49c, 0x1, 0x1);
        gbc.writeMem(0x1951, { 0xcd, 0x5f, 0xe6 });
        gbc.writeMem(0x8dae, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x8dae, gbc.sp());
        EXPECT(0xe65f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0x8dae));
        EXPECT(0x19, gbc.readMem(0x8daf));
        // CD 0379
        gbc.setState(0xcae, 0xfda8, 0x4c50, 0xd6db, 0x8c21, 0xed45, 0x1, 0x0);
        gbc.writeMem(0xcae, { 0xcd, 0x1c, 0x72 });
        gbc.writeMem(0xfda6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xfda6, gbc.sp());
        EXPECT(0x721c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb1, gbc.readMem(0xfda6));
        EXPECT(0xc, gbc.readMem(0xfda7));
        // CD 037C
        gbc.setState(0xad33, 0xc804, 0x3630, 0x9a2b, 0xef69, 0xbbad, 0x1, 0x1);
        gbc.writeMem(0xad33, { 0xcd, 0xb3, 0x4b });
        gbc.writeMem(0xc802, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xc802, gbc.sp());
        EXPECT(0x4bb3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xad33));
        EXPECT(0xb3, gbc.readMem(0xad34));
        EXPECT(0x4b, gbc.readMem(0xad35));
        EXPECT(0x36, gbc.readMem(0xc802));
        EXPECT(0xad, gbc.readMem(0xc803));
        // CD 037F
        gbc.setState(0x9b5d, 0x9229, 0x7a80, 0xfc43, 0xf9a7, 0xfb83, 0x1, 0x0);
        gbc.writeMem(0x9227, { 0x0, 0x0 });
        gbc.writeMem(0x9b5d, { 0xcd, 0xbb, 0x9a });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x9227, gbc.sp());
        EXPECT(0x9abb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0x9227));
        EXPECT(0x9b, gbc.readMem(0x9228));
        EXPECT(0xcd, gbc.readMem(0x9b5d));
        EXPECT(0xbb, gbc.readMem(0x9b5e));
        EXPECT(0x9a, gbc.readMem(0x9b5f));
        // CD 0380
        gbc.setState(0x9db2, 0xe544, 0xf640, 0x6240, 0x6b7c, 0xb39a, 0x1, 0x0);
        gbc.writeMem(0x9db2, { 0xcd, 0x1d, 0x87 });
        gbc.writeMem(0xe542, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xe542, gbc.sp());
        EXPECT(0x871d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9db2));
        EXPECT(0x1d, gbc.readMem(0x9db3));
        EXPECT(0x87, gbc.readMem(0x9db4));
        EXPECT(0xb5, gbc.readMem(0xe542));
        EXPECT(0x9d, gbc.readMem(0xe543));
        // CD 0385
        gbc.setState(0xc65e, 0xe89f, 0xc1a0, 0x9cf0, 0xe058, 0x780, 0x1, 0x0);
        gbc.writeMem(0xc65e, { 0xcd, 0xcd, 0x1c });
        gbc.writeMem(0xe89d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xe89d, gbc.sp());
        EXPECT(0x1ccd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xc65e));
        EXPECT(0xcd, gbc.readMem(0xc65f));
        EXPECT(0x1c, gbc.readMem(0xc660));
        EXPECT(0x61, gbc.readMem(0xe89d));
        EXPECT(0xc6, gbc.readMem(0xe89e));
        // CD 0386
        gbc.setState(0xdcf8, 0xe1a0, 0xa630, 0x23a6, 0x472a, 0xe4b, 0x0, 0x1);
        gbc.writeMem(0xdcf8, { 0xcd, 0xe3, 0xf2 });
        gbc.writeMem(0xe19e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xe19e, gbc.sp());
        EXPECT(0xf2e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xdcf8));
        EXPECT(0xe3, gbc.readMem(0xdcf9));
        EXPECT(0xf2, gbc.readMem(0xdcfa));
        EXPECT(0xfb, gbc.readMem(0xe19e));
        EXPECT(0xdc, gbc.readMem(0xe19f));
        // CD 0387
        gbc.setState(0x71b, 0x8427, 0x5f80, 0xfe3a, 0x41a2, 0x5ea4, 0x1, 0x0);
        gbc.writeMem(0x71b, { 0xcd, 0xf5, 0x75 });
        gbc.writeMem(0x8425, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x8425, gbc.sp());
        EXPECT(0x75f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1e, gbc.readMem(0x8425));
        EXPECT(0x7, gbc.readMem(0x8426));
        // CD 0388
        gbc.setState(0x170d, 0x9cb5, 0xb490, 0xda85, 0x35d5, 0x7556, 0x0, 0x0);
        gbc.writeMem(0x170d, { 0xcd, 0x82, 0x0 });
        gbc.writeMem(0x9cb3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x9cb3, gbc.sp());
        EXPECT(0x82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x10, gbc.readMem(0x9cb3));
        EXPECT(0x17, gbc.readMem(0x9cb4));
        // CD 038B
        gbc.setState(0xd876, 0x9ec4, 0x8d10, 0x49a0, 0xc6ea, 0xc2a6, 0x1, 0x1);
        gbc.writeMem(0x9ec2, { 0x0, 0x0 });
        gbc.writeMem(0xd876, { 0xcd, 0xf8, 0xfc });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x9ec2, gbc.sp());
        EXPECT(0xfcf8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x79, gbc.readMem(0x9ec2));
        EXPECT(0xd8, gbc.readMem(0x9ec3));
        EXPECT(0xcd, gbc.readMem(0xd876));
        EXPECT(0xf8, gbc.readMem(0xd877));
        EXPECT(0xfc, gbc.readMem(0xd878));
        // CD 038D
        gbc.setState(0x1719, 0xee20, 0x7ec0, 0xd6a0, 0x774f, 0xde2e, 0x1, 0x1);
        gbc.writeMem(0x1719, { 0xcd, 0x51, 0xcc });
        gbc.writeMem(0xee1e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xee1e, gbc.sp());
        EXPECT(0xcc51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0xee1e));
        EXPECT(0x17, gbc.readMem(0xee1f));
        // CD 0392
        gbc.setState(0x579d, 0xd9de, 0x20, 0x4a1, 0xffc6, 0x238b, 0x1, 0x1);
        gbc.writeMem(0x579d, { 0xcd, 0xf4, 0xb9 });
        gbc.writeMem(0xd9dc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xd9dc, gbc.sp());
        EXPECT(0xb9f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0xd9dc));
        EXPECT(0x57, gbc.readMem(0xd9dd));
        // CD 0393
        gbc.setState(0xcb7a, 0x9471, 0xd910, 0xc18a, 0xb181, 0x8886, 0x0, 0x0);
        gbc.writeMem(0x946f, { 0x0, 0x0 });
        gbc.writeMem(0xcb7a, { 0xcd, 0x49, 0x37 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x946f, gbc.sp());
        EXPECT(0x3749, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7d, gbc.readMem(0x946f));
        EXPECT(0xcb, gbc.readMem(0x9470));
        EXPECT(0xcd, gbc.readMem(0xcb7a));
        EXPECT(0x49, gbc.readMem(0xcb7b));
        EXPECT(0x37, gbc.readMem(0xcb7c));
        // CD 0394
        gbc.setState(0x1ceb, 0xd6cb, 0x54c0, 0x7fc9, 0x5ca6, 0x589, 0x1, 0x1);
        gbc.writeMem(0x1ceb, { 0xcd, 0xe5, 0xbe });
        gbc.writeMem(0xd6c9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xd6c9, gbc.sp());
        EXPECT(0xbee5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xd6c9));
        EXPECT(0x1c, gbc.readMem(0xd6ca));
        // CD 0397
        gbc.setState(0x7a51, 0x8cfc, 0x330, 0x368d, 0x8597, 0x8a5f, 0x1, 0x1);
        gbc.writeMem(0x7a51, { 0xcd, 0x7c, 0x45 });
        gbc.writeMem(0x8cfa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x8cfa, gbc.sp());
        EXPECT(0x457c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0x8cfa));
        EXPECT(0x7a, gbc.readMem(0x8cfb));
        // CD 0398
        gbc.setState(0x7fb5, 0xffe9, 0xa9a0, 0x1e01, 0x1b7a, 0x252a, 0x1, 0x0);
        gbc.writeMem(0x7fb5, { 0xcd, 0xa3, 0x51 });
        gbc.writeMem(0xffe7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xffe7, gbc.sp());
        EXPECT(0x51a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb8, gbc.readMem(0xffe7));
        EXPECT(0x7f, gbc.readMem(0xffe8));
        // CD 0399
        gbc.setState(0xdd29, 0xc227, 0x9c20, 0xd077, 0x8b40, 0xa615, 0x1, 0x1);
        gbc.writeMem(0xc225, { 0x0, 0x0 });
        gbc.writeMem(0xdd29, { 0xcd, 0xbe, 0x82 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xc225, gbc.sp());
        EXPECT(0x82be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2c, gbc.readMem(0xc225));
        EXPECT(0xdd, gbc.readMem(0xc226));
        EXPECT(0xcd, gbc.readMem(0xdd29));
        EXPECT(0xbe, gbc.readMem(0xdd2a));
        EXPECT(0x82, gbc.readMem(0xdd2b));
        // CD 039B
        gbc.setState(0xef35, 0x8206, 0xb7b0, 0xf81a, 0x30b3, 0x22d1, 0x0, 0x0);
        gbc.writeMem(0x8204, { 0x0, 0x0 });
        gbc.writeMem(0xef35, { 0xcd, 0x49, 0xb6 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x8204, gbc.sp());
        EXPECT(0xb649, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0x8204));
        EXPECT(0xef, gbc.readMem(0x8205));
        EXPECT(0xcd, gbc.readMem(0xef35));
        EXPECT(0x49, gbc.readMem(0xef36));
        EXPECT(0xb6, gbc.readMem(0xef37));
        // CD 039E
        gbc.setState(0x647d, 0xb816, 0x9770, 0x229f, 0x9c65, 0x1787, 0x1, 0x1);
        gbc.writeMem(0x647d, { 0xcd, 0x96, 0x1c });
        gbc.writeMem(0xb814, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xb814, gbc.sp());
        EXPECT(0x1c96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x80, gbc.readMem(0xb814));
        EXPECT(0x64, gbc.readMem(0xb815));
        // CD 03A1
        gbc.setState(0xa1a8, 0x93ec, 0x7950, 0x912b, 0xc0ad, 0x24be, 0x1, 0x0);
        gbc.writeMem(0x93ea, { 0x0, 0x0 });
        gbc.writeMem(0xa1a8, { 0xcd, 0x61, 0xaa });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x93ea, gbc.sp());
        EXPECT(0xaa61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xab, gbc.readMem(0x93ea));
        EXPECT(0xa1, gbc.readMem(0x93eb));
        EXPECT(0xcd, gbc.readMem(0xa1a8));
        EXPECT(0x61, gbc.readMem(0xa1a9));
        EXPECT(0xaa, gbc.readMem(0xa1aa));
        // CD 03A7
        gbc.setState(0x879, 0xdf7f, 0xcce0, 0xa827, 0x156a, 0x30eb, 0x1, 0x0);
        gbc.writeMem(0x879, { 0xcd, 0x1a, 0xe6 });
        gbc.writeMem(0xdf7d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xdf7d, gbc.sp());
        EXPECT(0xe61a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xdf7d));
        EXPECT(0x8, gbc.readMem(0xdf7e));
        // CD 03A8
        gbc.setState(0xcf51, 0xc2f9, 0xc4d0, 0xa6f2, 0xde64, 0x45f9, 0x1, 0x1);
        gbc.writeMem(0xc2f7, { 0x0, 0x0 });
        gbc.writeMem(0xcf51, { 0xcd, 0x52, 0xe4 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xc2f7, gbc.sp());
        EXPECT(0xe452, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0xc2f7));
        EXPECT(0xcf, gbc.readMem(0xc2f8));
        EXPECT(0xcd, gbc.readMem(0xcf51));
        EXPECT(0x52, gbc.readMem(0xcf52));
        EXPECT(0xe4, gbc.readMem(0xcf53));
        // CD 03AA
        gbc.setState(0x1de2, 0xa55f, 0x810, 0xbe33, 0xa980, 0x66d5, 0x1, 0x0);
        gbc.writeMem(0x1de2, { 0xcd, 0x9b, 0x97 });
        gbc.writeMem(0xa55d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xa55d, gbc.sp());
        EXPECT(0x979b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe5, gbc.readMem(0xa55d));
        EXPECT(0x1d, gbc.readMem(0xa55e));
        // CD 03AC
        gbc.setState(0xcf5c, 0xc662, 0x7330, 0x32e1, 0x4c98, 0x802d, 0x1, 0x1);
        gbc.writeMem(0xc660, { 0x0, 0x0 });
        gbc.writeMem(0xcf5c, { 0xcd, 0xa0, 0xf0 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xc660, gbc.sp());
        EXPECT(0xf0a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5f, gbc.readMem(0xc660));
        EXPECT(0xcf, gbc.readMem(0xc661));
        EXPECT(0xcd, gbc.readMem(0xcf5c));
        EXPECT(0xa0, gbc.readMem(0xcf5d));
        EXPECT(0xf0, gbc.readMem(0xcf5e));
        // CD 03AD
        gbc.setState(0x3a18, 0x9e44, 0x6790, 0x80f3, 0x28a9, 0x165c, 0x0, 0x0);
        gbc.writeMem(0x3a18, { 0xcd, 0xa, 0xd0 });
        gbc.writeMem(0x9e42, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x9e42, gbc.sp());
        EXPECT(0xd00a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1b, gbc.readMem(0x9e42));
        EXPECT(0x3a, gbc.readMem(0x9e43));
        // CD 03AF
        gbc.setState(0xb8ac, 0xdcfd, 0x8320, 0xf0e5, 0x74e4, 0x7913, 0x1, 0x1);
        gbc.writeMem(0xb8ac, { 0xcd, 0xdb, 0x2 });
        gbc.writeMem(0xdcfb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xdcfb, gbc.sp());
        EXPECT(0x2db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb8ac));
        EXPECT(0xdb, gbc.readMem(0xb8ad));
        EXPECT(0x2, gbc.readMem(0xb8ae));
        EXPECT(0xaf, gbc.readMem(0xdcfb));
        EXPECT(0xb8, gbc.readMem(0xdcfc));
        // CD 03B1
        gbc.setState(0xabfa, 0x8857, 0xa8d0, 0x4b53, 0xa146, 0x4fc0, 0x1, 0x1);
        gbc.writeMem(0x8855, { 0x0, 0x0 });
        gbc.writeMem(0xabfa, { 0xcd, 0x22, 0xe6 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x8855, gbc.sp());
        EXPECT(0xe622, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfd, gbc.readMem(0x8855));
        EXPECT(0xab, gbc.readMem(0x8856));
        EXPECT(0xcd, gbc.readMem(0xabfa));
        EXPECT(0x22, gbc.readMem(0xabfb));
        EXPECT(0xe6, gbc.readMem(0xabfc));
        // CD 03B2
        gbc.setState(0x47a3, 0xd7ca, 0xdea0, 0x6d5, 0x1b8e, 0xe06d, 0x1, 0x1);
        gbc.writeMem(0x47a3, { 0xcd, 0x0, 0xce });
        gbc.writeMem(0xd7c8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xd7c8, gbc.sp());
        EXPECT(0xce00, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0xd7c8));
        EXPECT(0x47, gbc.readMem(0xd7c9));
        // CD 03B3
        gbc.setState(0xab14, 0xd0e2, 0x6590, 0xe99, 0xf16c, 0x8918, 0x0, 0x1);
        gbc.writeMem(0xab14, { 0xcd, 0xa8, 0xaa });
        gbc.writeMem(0xd0e0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xd0e0, gbc.sp());
        EXPECT(0xaaa8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xab14));
        EXPECT(0xa8, gbc.readMem(0xab15));
        EXPECT(0xaa, gbc.readMem(0xab16));
        EXPECT(0x17, gbc.readMem(0xd0e0));
        EXPECT(0xab, gbc.readMem(0xd0e1));
        // CD 03B6
        gbc.setState(0x8164, 0x8e40, 0x92f0, 0xf00d, 0xcd0f, 0xe498, 0x0, 0x0);
        gbc.writeMem(0x8164, { 0xcd, 0x24, 0xb5 });
        gbc.writeMem(0x8e3e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x8e3e, gbc.sp());
        EXPECT(0xb524, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8164));
        EXPECT(0x24, gbc.readMem(0x8165));
        EXPECT(0xb5, gbc.readMem(0x8166));
        EXPECT(0x67, gbc.readMem(0x8e3e));
        EXPECT(0x81, gbc.readMem(0x8e3f));
        // CD 03B7
        gbc.setState(0xb7e9, 0xd40a, 0xa6d0, 0x3c81, 0x6b3b, 0x6bb9, 0x1, 0x0);
        gbc.writeMem(0xb7e9, { 0xcd, 0x8f, 0x8c });
        gbc.writeMem(0xd408, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xd408, gbc.sp());
        EXPECT(0x8c8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb7e9));
        EXPECT(0x8f, gbc.readMem(0xb7ea));
        EXPECT(0x8c, gbc.readMem(0xb7eb));
        EXPECT(0xec, gbc.readMem(0xd408));
        EXPECT(0xb7, gbc.readMem(0xd409));
        // CD 03B8
        gbc.setState(0x5579, 0xce9b, 0xb00, 0xc1e5, 0x152b, 0xde29, 0x1, 0x0);
        gbc.writeMem(0x5579, { 0xcd, 0xb8, 0xbf });
        gbc.writeMem(0xce99, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xce99, gbc.sp());
        EXPECT(0xbfb8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xce99));
        EXPECT(0x55, gbc.readMem(0xce9a));
        // CD 03BA
        gbc.setState(0x75c7, 0x9306, 0xaa30, 0x2150, 0xd976, 0xb44e, 0x0, 0x1);
        gbc.writeMem(0x75c7, { 0xcd, 0xc3, 0xa2 });
        gbc.writeMem(0x9304, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x9304, gbc.sp());
        EXPECT(0xa2c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0x9304));
        EXPECT(0x75, gbc.readMem(0x9305));
        // CD 03BB
        gbc.setState(0xa1e9, 0x98ee, 0x9bf0, 0x55eb, 0x64f3, 0x21eb, 0x1, 0x0);
        gbc.writeMem(0x98ec, { 0x0, 0x0 });
        gbc.writeMem(0xa1e9, { 0xcd, 0xf6, 0xd2 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x98ec, gbc.sp());
        EXPECT(0xd2f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xec, gbc.readMem(0x98ec));
        EXPECT(0xa1, gbc.readMem(0x98ed));
        EXPECT(0xcd, gbc.readMem(0xa1e9));
        EXPECT(0xf6, gbc.readMem(0xa1ea));
        EXPECT(0xd2, gbc.readMem(0xa1eb));
        // CD 03BC
        gbc.setState(0xcd27, 0xedf1, 0x6bb0, 0xe531, 0x7bcc, 0xb675, 0x1, 0x1);
        gbc.writeMem(0xcd27, { 0xcd, 0x4, 0xe7 });
        gbc.writeMem(0xedef, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xedef, gbc.sp());
        EXPECT(0xe704, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xcd27));
        EXPECT(0x4, gbc.readMem(0xcd28));
        EXPECT(0xe7, gbc.readMem(0xcd29));
        EXPECT(0x2a, gbc.readMem(0xedef));
        EXPECT(0xcd, gbc.readMem(0xedf0));
        // CD 03BE
        gbc.setState(0x9788, 0xcdd1, 0xf80, 0xb731, 0x5649, 0x98a7, 0x1, 0x0);
        gbc.writeMem(0x9788, { 0xcd, 0x8e, 0x66 });
        gbc.writeMem(0xcdcf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xcdcf, gbc.sp());
        EXPECT(0x668e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x9788));
        EXPECT(0x8e, gbc.readMem(0x9789));
        EXPECT(0x66, gbc.readMem(0x978a));
        EXPECT(0x8b, gbc.readMem(0xcdcf));
        EXPECT(0x97, gbc.readMem(0xcdd0));
        // CD 03BF
        gbc.setState(0xee3b, 0xdacc, 0xc660, 0x5783, 0x227b, 0xe86c, 0x1, 0x1);
        gbc.writeMem(0xdaca, { 0x0, 0x0 });
        gbc.writeMem(0xee3b, { 0xcd, 0x7b, 0x41 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xdaca, gbc.sp());
        EXPECT(0x417b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0xdaca));
        EXPECT(0xee, gbc.readMem(0xdacb));
        EXPECT(0xcd, gbc.readMem(0xee3b));
        EXPECT(0x7b, gbc.readMem(0xee3c));
        EXPECT(0x41, gbc.readMem(0xee3d));
        // CD 03C1
        gbc.setState(0xa499, 0xef95, 0x1a90, 0xe345, 0x447, 0xc5f, 0x1, 0x1);
        gbc.writeMem(0xa499, { 0xcd, 0x64, 0x88 });
        gbc.writeMem(0xef93, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xef93, gbc.sp());
        EXPECT(0x8864, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa499));
        EXPECT(0x64, gbc.readMem(0xa49a));
        EXPECT(0x88, gbc.readMem(0xa49b));
        EXPECT(0x9c, gbc.readMem(0xef93));
        EXPECT(0xa4, gbc.readMem(0xef94));
        // CD 03C2
        gbc.setState(0x3dd9, 0xac8a, 0xefe0, 0x9da1, 0x530b, 0x1d07, 0x0, 0x1);
        gbc.writeMem(0x3dd9, { 0xcd, 0x47, 0x72 });
        gbc.writeMem(0xac88, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xac88, gbc.sp());
        EXPECT(0x7247, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xac88));
        EXPECT(0x3d, gbc.readMem(0xac89));
        // CD 03C8
        gbc.setState(0x4885, 0xa38c, 0x7150, 0xab16, 0x3aeb, 0x7f58, 0x0, 0x1);
        gbc.writeMem(0x4885, { 0xcd, 0xb7, 0x9f });
        gbc.writeMem(0xa38a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xa38a, gbc.sp());
        EXPECT(0x9fb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x88, gbc.readMem(0xa38a));
        EXPECT(0x48, gbc.readMem(0xa38b));
        // CD 03C9
        gbc.setState(0xbf5b, 0xcd50, 0xa0b0, 0xe0d2, 0xdd83, 0xf22f, 0x0, 0x0);
        gbc.writeMem(0xbf5b, { 0xcd, 0x77, 0x87 });
        gbc.writeMem(0xcd4e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xcd4e, gbc.sp());
        EXPECT(0x8777, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xbf5b));
        EXPECT(0x77, gbc.readMem(0xbf5c));
        EXPECT(0x87, gbc.readMem(0xbf5d));
        EXPECT(0x5e, gbc.readMem(0xcd4e));
        EXPECT(0xbf, gbc.readMem(0xcd4f));
        // CD 03CB
        gbc.setState(0x1c22, 0x85a5, 0x2f50, 0xb2ef, 0xe17c, 0xe333, 0x1, 0x1);
        gbc.writeMem(0x1c22, { 0xcd, 0xb6, 0x1a });
        gbc.writeMem(0x85a3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x85a3, gbc.sp());
        EXPECT(0x1ab6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x25, gbc.readMem(0x85a3));
        EXPECT(0x1c, gbc.readMem(0x85a4));
        // CD 03CC
        gbc.setState(0x335c, 0xdbf2, 0x4610, 0x7146, 0xfe73, 0x774b, 0x1, 0x0);
        gbc.writeMem(0x335c, { 0xcd, 0x79, 0x3d });
        gbc.writeMem(0xdbf0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xdbf0, gbc.sp());
        EXPECT(0x3d79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5f, gbc.readMem(0xdbf0));
        EXPECT(0x33, gbc.readMem(0xdbf1));
        // CD 03CD
        gbc.setState(0xeeb7, 0xe49e, 0xeb90, 0xc194, 0x2737, 0x70c1, 0x1, 0x1);
        gbc.writeMem(0xe49c, { 0x0, 0x0 });
        gbc.writeMem(0xeeb7, { 0xcd, 0xa0, 0x60 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xe49c, gbc.sp());
        EXPECT(0x60a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xba, gbc.readMem(0xe49c));
        EXPECT(0xee, gbc.readMem(0xe49d));
        EXPECT(0xcd, gbc.readMem(0xeeb7));
        EXPECT(0xa0, gbc.readMem(0xeeb8));
        EXPECT(0x60, gbc.readMem(0xeeb9));
        // CD 03D0
        gbc.setState(0xd030, 0xf496, 0x2fa0, 0x850d, 0xdd95, 0x181e, 0x1, 0x1);
        gbc.writeMem(0xd030, { 0xcd, 0x8e, 0x7e });
        gbc.writeMem(0xf494, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xf494, gbc.sp());
        EXPECT(0x7e8e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xd030));
        EXPECT(0x8e, gbc.readMem(0xd031));
        EXPECT(0x7e, gbc.readMem(0xd032));
        EXPECT(0x33, gbc.readMem(0xf494));
        EXPECT(0xd0, gbc.readMem(0xf495));
        // CD 03D1
        gbc.setState(0x7c11, 0xe173, 0xe4f0, 0x76c6, 0xade4, 0x43b6, 0x1, 0x1);
        gbc.writeMem(0x7c11, { 0xcd, 0xbb, 0xca });
        gbc.writeMem(0xe171, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xe171, gbc.sp());
        EXPECT(0xcabb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x14, gbc.readMem(0xe171));
        EXPECT(0x7c, gbc.readMem(0xe172));
        // CD 03D3
        gbc.setState(0x755, 0x8870, 0x63b0, 0x457d, 0x699c, 0xfa8c, 0x1, 0x0);
        gbc.writeMem(0x755, { 0xcd, 0x5, 0x71 });
        gbc.writeMem(0x886e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x886e, gbc.sp());
        EXPECT(0x7105, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0x886e));
        EXPECT(0x7, gbc.readMem(0x886f));
        // CD 03D7
        gbc.setState(0x5044, 0xe20e, 0xe10, 0xb7c3, 0xb404, 0x126, 0x0, 0x0);
        gbc.writeMem(0x5044, { 0xcd, 0x2c, 0x2f });
        gbc.writeMem(0xe20c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xe20c, gbc.sp());
        EXPECT(0x2f2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x47, gbc.readMem(0xe20c));
        EXPECT(0x50, gbc.readMem(0xe20d));
        // CD 03D9
        gbc.setState(0x144, 0x9937, 0x39c0, 0x25a7, 0xf7b6, 0xa8f9, 0x1, 0x0);
        gbc.writeMem(0x144, { 0xcd, 0x1e, 0x4 });
        gbc.writeMem(0x9935, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x9935, gbc.sp());
        EXPECT(0x41e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x47, gbc.readMem(0x9935));
        EXPECT(0x1, gbc.readMem(0x9936));
        // CD 03DA
        gbc.setState(0xa60e, 0xd2ef, 0x2960, 0xaa09, 0x9c29, 0x9f94, 0x1, 0x0);
        gbc.writeMem(0xa60e, { 0xcd, 0xf8, 0x9e });
        gbc.writeMem(0xd2ed, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xd2ed, gbc.sp());
        EXPECT(0x9ef8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa60e));
        EXPECT(0xf8, gbc.readMem(0xa60f));
        EXPECT(0x9e, gbc.readMem(0xa610));
        EXPECT(0x11, gbc.readMem(0xd2ed));
        EXPECT(0xa6, gbc.readMem(0xd2ee));
        // CD 03DB
        gbc.setState(0xb077, 0xc8b9, 0x9e90, 0x85db, 0x857e, 0xc5a2, 0x0, 0x0);
        gbc.writeMem(0xb077, { 0xcd, 0x55, 0x99 });
        gbc.writeMem(0xc8b7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xc8b7, gbc.sp());
        EXPECT(0x9955, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xb077));
        EXPECT(0x55, gbc.readMem(0xb078));
        EXPECT(0x99, gbc.readMem(0xb079));
        EXPECT(0x7a, gbc.readMem(0xc8b7));
        EXPECT(0xb0, gbc.readMem(0xc8b8));
        // CD 03E4
        gbc.setState(0x927d, 0xcc7c, 0x4810, 0xa0dc, 0x74a3, 0xda43, 0x1, 0x1);
        gbc.writeMem(0x927d, { 0xcd, 0x94, 0xf6 });
        gbc.writeMem(0xcc7a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xcc7a, gbc.sp());
        EXPECT(0xf694, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x927d));
        EXPECT(0x94, gbc.readMem(0x927e));
        EXPECT(0xf6, gbc.readMem(0x927f));
        EXPECT(0x80, gbc.readMem(0xcc7a));
        EXPECT(0x92, gbc.readMem(0xcc7b));
    }
