    TEST(gbcemu, opcode_cb_cc) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB CC 0000
        gbc.setState(0xb641, 0x4d15, 0x1130, 0xa77, 0xd0c9, 0x6de5, 0x1, 0x1);
        gbc.writeMem(0xb641, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x4d15, gbc.sp());
        EXPECT(0xb643, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb641));
        EXPECT(0xcc, gbc.readMem(0xb642));
        // CB CC 0001
        gbc.setState(0x15b1, 0x52a8, 0x1fc0, 0xed6a, 0x70b9, 0x6c3e, 0x1, 0x0);
        gbc.writeMem(0x15b1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x52a8, gbc.sp());
        EXPECT(0x15b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0002
        gbc.setState(0xb3a0, 0xb6d6, 0x5470, 0x3587, 0xa4b9, 0x246, 0x0, 0x1);
        gbc.writeMem(0xb3a0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xb6d6, gbc.sp());
        EXPECT(0xb3a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3a0));
        EXPECT(0xcc, gbc.readMem(0xb3a1));
        // CB CC 0003
        gbc.setState(0xa3f3, 0x1410, 0xb7c0, 0x2ca7, 0x42d1, 0xd015, 0x1, 0x0);
        gbc.writeMem(0xa3f3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x1410, gbc.sp());
        EXPECT(0xa3f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3f3));
        EXPECT(0xcc, gbc.readMem(0xa3f4));
        // CB CC 0004
        gbc.setState(0xa27d, 0x7e27, 0x14e0, 0x25c5, 0x1eed, 0x9f6, 0x0, 0x1);
        gbc.writeMem(0xa27d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x7e27, gbc.sp());
        EXPECT(0xa27f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa27d));
        EXPECT(0xcc, gbc.readMem(0xa27e));
        // CB CC 0005
        gbc.setState(0x860d, 0x251d, 0x1bc0, 0xdcb3, 0x8d8e, 0xe9ea, 0x0, 0x0);
        gbc.writeMem(0x860d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x251d, gbc.sp());
        EXPECT(0x860f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x860d));
        EXPECT(0xcc, gbc.readMem(0x860e));
        // CB CC 0006
        gbc.setState(0x151e, 0xd401, 0x42d0, 0xa077, 0x2ec8, 0x6957, 0x0, 0x0);
        gbc.writeMem(0x151e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xd401, gbc.sp());
        EXPECT(0x1520, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0007
        gbc.setState(0x5a3e, 0x8c4, 0xce80, 0x8d96, 0x1db8, 0x3e81, 0x0, 0x1);
        gbc.writeMem(0x5a3e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x8c4, gbc.sp());
        EXPECT(0x5a40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0008
        gbc.setState(0xaf4e, 0xf361, 0x34e0, 0x7e57, 0x93ee, 0x9bf6, 0x0, 0x0);
        gbc.writeMem(0xaf4e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xf361, gbc.sp());
        EXPECT(0xaf50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf4e));
        EXPECT(0xcc, gbc.readMem(0xaf4f));
        // CB CC 0009
        gbc.setState(0xab9a, 0x98d6, 0x24b0, 0x391b, 0x9a24, 0xabdc, 0x1, 0x0);
        gbc.writeMem(0xab9a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x98d6, gbc.sp());
        EXPECT(0xab9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab9a));
        EXPECT(0xcc, gbc.readMem(0xab9b));
        // CB CC 000A
        gbc.setState(0x1e71, 0x341b, 0x7180, 0xd28e, 0xf75a, 0x26b7, 0x0, 0x1);
        gbc.writeMem(0x1e71, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x341b, gbc.sp());
        EXPECT(0x1e73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 000B
        gbc.setState(0x32ee, 0xb56, 0xf480, 0xf3e2, 0x40f7, 0x6713, 0x1, 0x0);
        gbc.writeMem(0x32ee, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xb56, gbc.sp());
        EXPECT(0x32f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 000C
        gbc.setState(0x695c, 0xe117, 0xe0f0, 0x611e, 0xd776, 0x6b6f, 0x1, 0x1);
        gbc.writeMem(0x695c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xe117, gbc.sp());
        EXPECT(0x695e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 000D
        gbc.setState(0xb30e, 0xc651, 0xaab0, 0xf9b9, 0x85ce, 0xd146, 0x1, 0x1);
        gbc.writeMem(0xb30e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xc651, gbc.sp());
        EXPECT(0xb310, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb30e));
        EXPECT(0xcc, gbc.readMem(0xb30f));
        // CB CC 000E
        gbc.setState(0xa339, 0xb89a, 0xb7a0, 0x62e9, 0x9bee, 0x2a53, 0x1, 0x0);
        gbc.writeMem(0xa339, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xb89a, gbc.sp());
        EXPECT(0xa33b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa339));
        EXPECT(0xcc, gbc.readMem(0xa33a));
        // CB CC 000F
        gbc.setState(0x46dd, 0x9caa, 0x5da0, 0x7248, 0x24fc, 0x5846, 0x0, 0x1);
        gbc.writeMem(0x46dd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x9caa, gbc.sp());
        EXPECT(0x46df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0010
        gbc.setState(0xc6f2, 0xad9b, 0x53a0, 0xfa34, 0x2156, 0x5af9, 0x1, 0x0);
        gbc.writeMem(0xc6f2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xad9b, gbc.sp());
        EXPECT(0xc6f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6f2));
        EXPECT(0xcc, gbc.readMem(0xc6f3));
        // CB CC 0011
        gbc.setState(0xd8c, 0xa23, 0x3ce0, 0x4d3a, 0xd216, 0x7a84, 0x0, 0x0);
        gbc.writeMem(0xd8c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xa23, gbc.sp());
        EXPECT(0xd8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0012
        gbc.setState(0x7c07, 0xd8dd, 0x5610, 0x798d, 0x8654, 0xc766, 0x1, 0x1);
        gbc.writeMem(0x7c07, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xd8dd, gbc.sp());
        EXPECT(0x7c09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0013
        gbc.setState(0x978d, 0xb8dc, 0xc5c0, 0xee3c, 0x5609, 0x1f3d, 0x1, 0x0);
        gbc.writeMem(0x978d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xb8dc, gbc.sp());
        EXPECT(0x978f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x978d));
        EXPECT(0xcc, gbc.readMem(0x978e));
        // CB CC 0014
        gbc.setState(0xad66, 0x4362, 0x7160, 0x920d, 0xdb99, 0x801e, 0x0, 0x0);
        gbc.writeMem(0xad66, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x4362, gbc.sp());
        EXPECT(0xad68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad66));
        EXPECT(0xcc, gbc.readMem(0xad67));
        // CB CC 0015
        gbc.setState(0x3eb9, 0x67e2, 0x44c0, 0x9d86, 0xc0b6, 0x71b, 0x1, 0x1);
        gbc.writeMem(0x3eb9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x67e2, gbc.sp());
        EXPECT(0x3ebb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0016
        gbc.setState(0x2b50, 0x38ff, 0x70a0, 0x2c55, 0xa2d4, 0xfff1, 0x1, 0x0);
        gbc.writeMem(0x2b50, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x38ff, gbc.sp());
        EXPECT(0x2b52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0017
        gbc.setState(0x805, 0x38d5, 0x13a0, 0x2959, 0x120b, 0x54c8, 0x0, 0x0);
        gbc.writeMem(0x805, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x38d5, gbc.sp());
        EXPECT(0x807, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0018
        gbc.setState(0x2513, 0x61e6, 0x9130, 0x17d, 0xf8d4, 0xb0ce, 0x0, 0x0);
        gbc.writeMem(0x2513, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x61e6, gbc.sp());
        EXPECT(0x2515, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0019
        gbc.setState(0x14dd, 0xb744, 0x2f70, 0x25b8, 0x901d, 0x48e, 0x1, 0x0);
        gbc.writeMem(0x14dd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xb744, gbc.sp());
        EXPECT(0x14df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 001A
        gbc.setState(0xe4cd, 0x3329, 0xcce0, 0xca51, 0x13ce, 0x16e, 0x1, 0x0);
        gbc.writeMem(0xe4cd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x3329, gbc.sp());
        EXPECT(0xe4cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4cd));
        EXPECT(0xcc, gbc.readMem(0xe4ce));
        // CB CC 001B
        gbc.setState(0x6cec, 0xabc5, 0x440, 0x568e, 0xa49, 0x55ef, 0x0, 0x0);
        gbc.writeMem(0x6cec, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xabc5, gbc.sp());
        EXPECT(0x6cee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 001C
        gbc.setState(0xe021, 0x1fce, 0xc4b0, 0xb98d, 0x28ac, 0xdd84, 0x0, 0x0);
        gbc.writeMem(0xe021, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x1fce, gbc.sp());
        EXPECT(0xe023, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe021));
        EXPECT(0xcc, gbc.readMem(0xe022));
        // CB CC 001D
        gbc.setState(0x6c99, 0x3214, 0x8fb0, 0x6b5b, 0x1c42, 0xcd57, 0x1, 0x0);
        gbc.writeMem(0x6c99, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x3214, gbc.sp());
        EXPECT(0x6c9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 001E
        gbc.setState(0x4870, 0x8fb8, 0xae60, 0x8d72, 0x65bc, 0xa385, 0x0, 0x1);
        gbc.writeMem(0x4870, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x8fb8, gbc.sp());
        EXPECT(0x4872, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 001F
        gbc.setState(0x8db0, 0xc5f9, 0x4110, 0x383f, 0x5f16, 0x7004, 0x1, 0x1);
        gbc.writeMem(0x8db0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xc5f9, gbc.sp());
        EXPECT(0x8db2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8db0));
        EXPECT(0xcc, gbc.readMem(0x8db1));
        // CB CC 0020
        gbc.setState(0x29ed, 0xf5c6, 0x9120, 0xec7a, 0xcd3a, 0xd9f4, 0x0, 0x1);
        gbc.writeMem(0x29ed, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xf5c6, gbc.sp());
        EXPECT(0x29ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0021
        gbc.setState(0x4a97, 0x74f1, 0x5230, 0x5628, 0xbfbf, 0x373b, 0x1, 0x0);
        gbc.writeMem(0x4a97, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x74f1, gbc.sp());
        EXPECT(0x4a99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0022
        gbc.setState(0xeb23, 0x503d, 0xcc10, 0x9f8, 0x7afa, 0xacae, 0x0, 0x1);
        gbc.writeMem(0xeb23, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x503d, gbc.sp());
        EXPECT(0xeb25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb23));
        EXPECT(0xcc, gbc.readMem(0xeb24));
        // CB CC 0023
        gbc.setState(0xd1aa, 0x981, 0x9360, 0xb8a2, 0x974f, 0xa2a0, 0x0, 0x0);
        gbc.writeMem(0xd1aa, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x981, gbc.sp());
        EXPECT(0xd1ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1aa));
        EXPECT(0xcc, gbc.readMem(0xd1ab));
        // CB CC 0024
        gbc.setState(0x25a2, 0xb66e, 0x1490, 0x90b5, 0xb5f2, 0x63eb, 0x1, 0x1);
        gbc.writeMem(0x25a2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xb66e, gbc.sp());
        EXPECT(0x25a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0026
        gbc.setState(0x6512, 0xfeb7, 0x42c0, 0x23e2, 0x377d, 0x4599, 0x1, 0x0);
        gbc.writeMem(0x6512, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xfeb7, gbc.sp());
        EXPECT(0x6514, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0027
        gbc.setState(0x1fd7, 0x8ba5, 0xa2c0, 0xb1f5, 0xe6d4, 0x55af, 0x1, 0x1);
        gbc.writeMem(0x1fd7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x8ba5, gbc.sp());
        EXPECT(0x1fd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0028
        gbc.setState(0xca04, 0x26d, 0x5870, 0xb31, 0xcc3a, 0x99a4, 0x1, 0x1);
        gbc.writeMem(0xca04, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x26d, gbc.sp());
        EXPECT(0xca06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca04));
        EXPECT(0xcc, gbc.readMem(0xca05));
        // CB CC 0029
        gbc.setState(0x8d1a, 0x46e5, 0x6dd0, 0x379f, 0x896f, 0x12a8, 0x0, 0x0);
        gbc.writeMem(0x8d1a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x46e5, gbc.sp());
        EXPECT(0x8d1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d1a));
        EXPECT(0xcc, gbc.readMem(0x8d1b));
        // CB CC 002A
        gbc.setState(0xc7d9, 0x82c4, 0x8930, 0xc8c4, 0x6844, 0xbb67, 0x1, 0x1);
        gbc.writeMem(0xc7d9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x82c4, gbc.sp());
        EXPECT(0xc7db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7d9));
        EXPECT(0xcc, gbc.readMem(0xc7da));
        // CB CC 002B
        gbc.setState(0x23ba, 0xe531, 0x4090, 0x420f, 0x6108, 0x384f, 0x0, 0x1);
        gbc.writeMem(0x23ba, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xe531, gbc.sp());
        EXPECT(0x23bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 002C
        gbc.setState(0x1a55, 0x1cf8, 0x2520, 0xb3c5, 0x5eaa, 0x1fce, 0x0, 0x1);
        gbc.writeMem(0x1a55, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x1cf8, gbc.sp());
        EXPECT(0x1a57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 002D
        gbc.setState(0x2212, 0xa31e, 0x4fe0, 0x7603, 0xe66e, 0xa908, 0x0, 0x0);
        gbc.writeMem(0x2212, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xa31e, gbc.sp());
        EXPECT(0x2214, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 002E
        gbc.setState(0x1246, 0xf0a2, 0xffe0, 0x1b33, 0x85fb, 0x4790, 0x1, 0x0);
        gbc.writeMem(0x1246, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xf0a2, gbc.sp());
        EXPECT(0x1248, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 002F
        gbc.setState(0xadf2, 0x48c5, 0xda90, 0xda1, 0x5c31, 0x2f1a, 0x1, 0x0);
        gbc.writeMem(0xadf2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x48c5, gbc.sp());
        EXPECT(0xadf4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadf2));
        EXPECT(0xcc, gbc.readMem(0xadf3));
        // CB CC 0030
        gbc.setState(0xeb35, 0xd9f1, 0xd430, 0x2f49, 0x1ad3, 0x7d59, 0x0, 0x0);
        gbc.writeMem(0xeb35, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xd9f1, gbc.sp());
        EXPECT(0xeb37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb35));
        EXPECT(0xcc, gbc.readMem(0xeb36));
        // CB CC 0031
        gbc.setState(0x2c54, 0xdfbc, 0xdf20, 0xe57d, 0x8511, 0xa867, 0x0, 0x0);
        gbc.writeMem(0x2c54, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xdfbc, gbc.sp());
        EXPECT(0x2c56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0032
        gbc.setState(0xe583, 0x87ce, 0xd0e0, 0xa2bd, 0x636f, 0x65a5, 0x1, 0x0);
        gbc.writeMem(0xe583, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x87ce, gbc.sp());
        EXPECT(0xe585, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe583));
        EXPECT(0xcc, gbc.readMem(0xe584));
        // CB CC 0033
        gbc.setState(0xce4a, 0xacd2, 0xb610, 0xaa81, 0x1311, 0xa67d, 0x1, 0x0);
        gbc.writeMem(0xce4a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xacd2, gbc.sp());
        EXPECT(0xce4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce4a));
        EXPECT(0xcc, gbc.readMem(0xce4b));
        // CB CC 0034
        gbc.setState(0x6063, 0x90e7, 0x5f90, 0x9d53, 0xae69, 0xdac1, 0x1, 0x0);
        gbc.writeMem(0x6063, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x90e7, gbc.sp());
        EXPECT(0x6065, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0035
        gbc.setState(0x1700, 0x946e, 0xff60, 0x7fbd, 0x2d6b, 0x6658, 0x0, 0x0);
        gbc.writeMem(0x1700, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x946e, gbc.sp());
        EXPECT(0x1702, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0036
        gbc.setState(0x111, 0x7779, 0x8790, 0xb030, 0xef5f, 0x9b79, 0x1, 0x0);
        gbc.writeMem(0x111, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x7779, gbc.sp());
        EXPECT(0x113, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0037
        gbc.setState(0xc1ae, 0x81e8, 0x5900, 0xea52, 0x560d, 0xa341, 0x0, 0x1);
        gbc.writeMem(0xc1ae, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x81e8, gbc.sp());
        EXPECT(0xc1b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1ae));
        EXPECT(0xcc, gbc.readMem(0xc1af));
        // CB CC 0038
        gbc.setState(0x4aa5, 0x6500, 0x6570, 0x2e85, 0x7676, 0x7e3e, 0x1, 0x1);
        gbc.writeMem(0x4aa5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x6500, gbc.sp());
        EXPECT(0x4aa7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0039
        gbc.setState(0xd309, 0xb04c, 0xe0f0, 0xb3bd, 0x12c1, 0x50d, 0x0, 0x1);
        gbc.writeMem(0xd309, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xb04c, gbc.sp());
        EXPECT(0xd30b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd309));
        EXPECT(0xcc, gbc.readMem(0xd30a));
        // CB CC 003A
        gbc.setState(0xad83, 0xa8a5, 0x2c60, 0xedf6, 0x443c, 0xb32b, 0x0, 0x1);
        gbc.writeMem(0xad83, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xa8a5, gbc.sp());
        EXPECT(0xad85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad83));
        EXPECT(0xcc, gbc.readMem(0xad84));
        // CB CC 003B
        gbc.setState(0xac10, 0x1d6c, 0x1420, 0x607f, 0xc04e, 0x533c, 0x1, 0x1);
        gbc.writeMem(0xac10, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x1d6c, gbc.sp());
        EXPECT(0xac12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac10));
        EXPECT(0xcc, gbc.readMem(0xac11));
        // CB CC 003C
        gbc.setState(0x3d0d, 0x76c5, 0xbe0, 0x65ec, 0xb4a1, 0xede0, 0x0, 0x1);
        gbc.writeMem(0x3d0d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x76c5, gbc.sp());
        EXPECT(0x3d0f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 003D
        gbc.setState(0x8d5b, 0x3945, 0x7b90, 0x693e, 0xc6c5, 0xa505, 0x0, 0x1);
        gbc.writeMem(0x8d5b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x3945, gbc.sp());
        EXPECT(0x8d5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d5b));
        EXPECT(0xcc, gbc.readMem(0x8d5c));
        // CB CC 003E
        gbc.setState(0x941a, 0x7eda, 0x77e0, 0xf864, 0x2c21, 0xf30b, 0x0, 0x0);
        gbc.writeMem(0x941a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x7eda, gbc.sp());
        EXPECT(0x941c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x941a));
        EXPECT(0xcc, gbc.readMem(0x941b));
        // CB CC 003F
        gbc.setState(0xa85d, 0x4cec, 0xcc60, 0x207b, 0xc4ad, 0x8ebe, 0x1, 0x0);
        gbc.writeMem(0xa85d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x4cec, gbc.sp());
        EXPECT(0xa85f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa85d));
        EXPECT(0xcc, gbc.readMem(0xa85e));
        // CB CC 0040
        gbc.setState(0x670f, 0xd226, 0xf930, 0xcced, 0xd5d4, 0x8355, 0x1, 0x0);
        gbc.writeMem(0x670f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xd226, gbc.sp());
        EXPECT(0x6711, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0041
        gbc.setState(0x35f7, 0x39da, 0xbc10, 0x6479, 0xe70, 0x321, 0x1, 0x1);
        gbc.writeMem(0x35f7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x39da, gbc.sp());
        EXPECT(0x35f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0042
        gbc.setState(0x1688, 0x44b6, 0x9ce0, 0x268f, 0xce87, 0x4cdc, 0x0, 0x1);
        gbc.writeMem(0x1688, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x44b6, gbc.sp());
        EXPECT(0x168a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0043
        gbc.setState(0x1196, 0xf0f7, 0xa5d0, 0x827f, 0x9756, 0xfcbc, 0x0, 0x1);
        gbc.writeMem(0x1196, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xf0f7, gbc.sp());
        EXPECT(0x1198, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0044
        gbc.setState(0x9c00, 0xab08, 0x8220, 0xe871, 0xa208, 0xf593, 0x0, 0x1);
        gbc.writeMem(0x9c00, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xab08, gbc.sp());
        EXPECT(0x9c02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c00));
        EXPECT(0xcc, gbc.readMem(0x9c01));
        // CB CC 0045
        gbc.setState(0x8043, 0x6d09, 0x5740, 0x463b, 0x900b, 0xe1a2, 0x0, 0x0);
        gbc.writeMem(0x8043, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x6d09, gbc.sp());
        EXPECT(0x8045, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8043));
        EXPECT(0xcc, gbc.readMem(0x8044));
        // CB CC 0046
        gbc.setState(0x6a29, 0x168d, 0x60d0, 0x82ea, 0x7447, 0xa325, 0x1, 0x1);
        gbc.writeMem(0x6a29, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x168d, gbc.sp());
        EXPECT(0x6a2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0047
        gbc.setState(0x56c7, 0x7412, 0x3570, 0xb2c4, 0x274d, 0xb042, 0x0, 0x0);
        gbc.writeMem(0x56c7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x7412, gbc.sp());
        EXPECT(0x56c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0048
        gbc.setState(0x1c54, 0x88c8, 0x69b0, 0x2c26, 0x4dc8, 0xe16a, 0x1, 0x0);
        gbc.writeMem(0x1c54, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x88c8, gbc.sp());
        EXPECT(0x1c56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0049
        gbc.setState(0xc27a, 0xd346, 0x91d0, 0x2002, 0xd0a4, 0x6212, 0x1, 0x0);
        gbc.writeMem(0xc27a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xd346, gbc.sp());
        EXPECT(0xc27c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc27a));
        EXPECT(0xcc, gbc.readMem(0xc27b));
        // CB CC 004A
        gbc.setState(0x866c, 0x9776, 0xd8e0, 0xc096, 0x6ba6, 0x90d7, 0x0, 0x0);
        gbc.writeMem(0x866c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x9776, gbc.sp());
        EXPECT(0x866e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x866c));
        EXPECT(0xcc, gbc.readMem(0x866d));
        // CB CC 004B
        gbc.setState(0x2e84, 0x29ee, 0x45f0, 0x50a9, 0x63b7, 0x8e07, 0x0, 0x1);
        gbc.writeMem(0x2e84, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x29ee, gbc.sp());
        EXPECT(0x2e86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 004C
        gbc.setState(0x4c0f, 0x5187, 0x9800, 0x4c1c, 0x22da, 0xd4ca, 0x1, 0x0);
        gbc.writeMem(0x4c0f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x5187, gbc.sp());
        EXPECT(0x4c11, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 004D
        gbc.setState(0x76c7, 0x9cd9, 0xb340, 0x25af, 0x249a, 0x83fc, 0x0, 0x1);
        gbc.writeMem(0x76c7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x9cd9, gbc.sp());
        EXPECT(0x76c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 004E
        gbc.setState(0x76e8, 0x5735, 0x5980, 0xf3fb, 0x9650, 0x2814, 0x1, 0x1);
        gbc.writeMem(0x76e8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x5735, gbc.sp());
        EXPECT(0x76ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 004F
        gbc.setState(0xd85c, 0xe6bd, 0xfeb0, 0xcacb, 0x57cf, 0x38a0, 0x0, 0x1);
        gbc.writeMem(0xd85c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xe6bd, gbc.sp());
        EXPECT(0xd85e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd85c));
        EXPECT(0xcc, gbc.readMem(0xd85d));
        // CB CC 0050
        gbc.setState(0xb1f6, 0x42a5, 0xf430, 0x79c1, 0xcc00, 0xb1fd, 0x1, 0x0);
        gbc.writeMem(0xb1f6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x42a5, gbc.sp());
        EXPECT(0xb1f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1f6));
        EXPECT(0xcc, gbc.readMem(0xb1f7));
        // CB CC 0051
        gbc.setState(0xe01d, 0x4b10, 0x2530, 0x738a, 0x3007, 0x55e0, 0x0, 0x1);
        gbc.writeMem(0xe01d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x4b10, gbc.sp());
        EXPECT(0xe01f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe01d));
        EXPECT(0xcc, gbc.readMem(0xe01e));
        // CB CC 0052
        gbc.setState(0xe6de, 0x470f, 0xc160, 0x258a, 0x9cc1, 0x548a, 0x1, 0x0);
        gbc.writeMem(0xe6de, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x470f, gbc.sp());
        EXPECT(0xe6e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6de));
        EXPECT(0xcc, gbc.readMem(0xe6df));
        // CB CC 0053
        gbc.setState(0xdb2f, 0x169e, 0x1b10, 0x3abe, 0xa479, 0xe715, 0x0, 0x1);
        gbc.writeMem(0xdb2f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x169e, gbc.sp());
        EXPECT(0xdb31, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb2f));
        EXPECT(0xcc, gbc.readMem(0xdb30));
        // CB CC 0054
        gbc.setState(0x8e0f, 0x4f42, 0xaa0, 0x62ec, 0x71f5, 0xa75c, 0x1, 0x1);
        gbc.writeMem(0x8e0f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x4f42, gbc.sp());
        EXPECT(0x8e11, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e0f));
        EXPECT(0xcc, gbc.readMem(0x8e10));
        // CB CC 0055
        gbc.setState(0x94d2, 0x24a1, 0xac50, 0xe8e0, 0xdbe1, 0x2f7d, 0x1, 0x1);
        gbc.writeMem(0x94d2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x24a1, gbc.sp());
        EXPECT(0x94d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94d2));
        EXPECT(0xcc, gbc.readMem(0x94d3));
        // CB CC 0056
        gbc.setState(0x3fa2, 0x4c05, 0x16e0, 0x5fab, 0x4281, 0xa777, 0x1, 0x1);
        gbc.writeMem(0x3fa2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x4c05, gbc.sp());
        EXPECT(0x3fa4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0057
        gbc.setState(0xb24a, 0x5186, 0x4a10, 0x689c, 0xfff3, 0xf86c, 0x0, 0x1);
        gbc.writeMem(0xb24a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x5186, gbc.sp());
        EXPECT(0xb24c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb24a));
        EXPECT(0xcc, gbc.readMem(0xb24b));
        // CB CC 0058
        gbc.setState(0xac56, 0xd410, 0xd7f0, 0xa349, 0xe4a4, 0xdcc9, 0x1, 0x1);
        gbc.writeMem(0xac56, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xd410, gbc.sp());
        EXPECT(0xac58, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac56));
        EXPECT(0xcc, gbc.readMem(0xac57));
        // CB CC 0059
        gbc.setState(0xac85, 0xba8a, 0xb140, 0x23ad, 0xf73a, 0x158b, 0x0, 0x1);
        gbc.writeMem(0xac85, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xba8a, gbc.sp());
        EXPECT(0xac87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac85));
        EXPECT(0xcc, gbc.readMem(0xac86));
        // CB CC 005A
        gbc.setState(0x56c1, 0x18d3, 0xca0, 0x43b4, 0xd886, 0x96e1, 0x1, 0x0);
        gbc.writeMem(0x56c1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x18d3, gbc.sp());
        EXPECT(0x56c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 005B
        gbc.setState(0x6e75, 0x7f7b, 0x2780, 0xf839, 0x2de, 0x535b, 0x0, 0x1);
        gbc.writeMem(0x6e75, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x7f7b, gbc.sp());
        EXPECT(0x6e77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 005C
        gbc.setState(0xe896, 0x2cde, 0x6780, 0xf86a, 0xc20e, 0x1c9c, 0x1, 0x1);
        gbc.writeMem(0xe896, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x2cde, gbc.sp());
        EXPECT(0xe898, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe896));
        EXPECT(0xcc, gbc.readMem(0xe897));
        // CB CC 005D
        gbc.setState(0x1448, 0xade8, 0x60f0, 0xb967, 0xd10e, 0xc9b0, 0x1, 0x0);
        gbc.writeMem(0x1448, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xade8, gbc.sp());
        EXPECT(0x144a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 005F
        gbc.setState(0x3270, 0x6621, 0xf5c0, 0x23fc, 0x7fe0, 0xe2fe, 0x0, 0x1);
        gbc.writeMem(0x3270, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x6621, gbc.sp());
        EXPECT(0x3272, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0060
        gbc.setState(0x2ba2, 0x3315, 0xe730, 0xd4f1, 0xfc9, 0xd01d, 0x1, 0x0);
        gbc.writeMem(0x2ba2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x3315, gbc.sp());
        EXPECT(0x2ba4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0061
        gbc.setState(0xac69, 0x83ed, 0xe4a0, 0x8ad3, 0xde1a, 0xd550, 0x1, 0x1);
        gbc.writeMem(0xac69, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x83ed, gbc.sp());
        EXPECT(0xac6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac69));
        EXPECT(0xcc, gbc.readMem(0xac6a));
        // CB CC 0063
        gbc.setState(0xe83b, 0x5742, 0x9480, 0xce2c, 0x75b0, 0x8b9, 0x0, 0x0);
        gbc.writeMem(0xe83b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x5742, gbc.sp());
        EXPECT(0xe83d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe83b));
        EXPECT(0xcc, gbc.readMem(0xe83c));
        // CB CC 0064
        gbc.setState(0xbca4, 0x96d5, 0x7e80, 0x2673, 0xb1ac, 0x7933, 0x0, 0x1);
        gbc.writeMem(0xbca4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x96d5, gbc.sp());
        EXPECT(0xbca6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbca4));
        EXPECT(0xcc, gbc.readMem(0xbca5));
        // CB CC 0065
        gbc.setState(0xd4d, 0x6414, 0x6000, 0x4882, 0x9935, 0xc230, 0x0, 0x0);
        gbc.writeMem(0xd4d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x6414, gbc.sp());
        EXPECT(0xd4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0066
        gbc.setState(0x41af, 0x682, 0x2860, 0xe4f7, 0xc630, 0x957d, 0x1, 0x0);
        gbc.writeMem(0x41af, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x682, gbc.sp());
        EXPECT(0x41b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0067
        gbc.setState(0xcdc0, 0x7117, 0x10f0, 0x9e85, 0xe4fa, 0xb76a, 0x1, 0x1);
        gbc.writeMem(0xcdc0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x7117, gbc.sp());
        EXPECT(0xcdc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdc0));
        EXPECT(0xcc, gbc.readMem(0xcdc1));
        // CB CC 0068
        gbc.setState(0x898c, 0xc6c8, 0xfc50, 0xf60b, 0xc5d1, 0x654, 0x0, 0x0);
        gbc.writeMem(0x898c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xc6c8, gbc.sp());
        EXPECT(0x898e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x898c));
        EXPECT(0xcc, gbc.readMem(0x898d));
        // CB CC 0069
        gbc.setState(0x25d6, 0x8738, 0xf830, 0xa5f8, 0x25f1, 0x8f19, 0x1, 0x1);
        gbc.writeMem(0x25d6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x8738, gbc.sp());
        EXPECT(0x25d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 006A
        gbc.setState(0x1dfe, 0xecd2, 0xd810, 0x8f45, 0x5b3f, 0x2642, 0x0, 0x1);
        gbc.writeMem(0x1dfe, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xecd2, gbc.sp());
        EXPECT(0x1e00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 006B
        gbc.setState(0xa4d9, 0x1017, 0x15a0, 0x41a2, 0xa718, 0xc71e, 0x0, 0x0);
        gbc.writeMem(0xa4d9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x1017, gbc.sp());
        EXPECT(0xa4db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4d9));
        EXPECT(0xcc, gbc.readMem(0xa4da));
        // CB CC 006D
        gbc.setState(0xc6f6, 0x69e6, 0xc20, 0x778a, 0xab05, 0xaecd, 0x1, 0x0);
        gbc.writeMem(0xc6f6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x69e6, gbc.sp());
        EXPECT(0xc6f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6f6));
        EXPECT(0xcc, gbc.readMem(0xc6f7));
        // CB CC 006E
        gbc.setState(0xb451, 0x5f4b, 0x6d60, 0xa0fd, 0xd3d8, 0x686c, 0x1, 0x1);
        gbc.writeMem(0xb451, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x5f4b, gbc.sp());
        EXPECT(0xb453, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb451));
        EXPECT(0xcc, gbc.readMem(0xb452));
        // CB CC 006F
        gbc.setState(0xc08e, 0x9b61, 0xceb0, 0xfba1, 0x7e82, 0xfc04, 0x0, 0x1);
        gbc.writeMem(0xc08e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x9b61, gbc.sp());
        EXPECT(0xc090, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc08e));
        EXPECT(0xcc, gbc.readMem(0xc08f));
        // CB CC 0071
        gbc.setState(0xcea9, 0x218f, 0x4e0, 0x4224, 0xe7b7, 0x6ade, 0x0, 0x0);
        gbc.writeMem(0xcea9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x218f, gbc.sp());
        EXPECT(0xceab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcea9));
        EXPECT(0xcc, gbc.readMem(0xceaa));
        // CB CC 0072
        gbc.setState(0xaf2e, 0xe0dd, 0xc8d0, 0x7a90, 0xd576, 0x479, 0x0, 0x1);
        gbc.writeMem(0xaf2e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xe0dd, gbc.sp());
        EXPECT(0xaf30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf2e));
        EXPECT(0xcc, gbc.readMem(0xaf2f));
        // CB CC 0073
        gbc.setState(0x98c0, 0x8cc9, 0x3690, 0x1255, 0xf768, 0x50e, 0x0, 0x0);
        gbc.writeMem(0x98c0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x8cc9, gbc.sp());
        EXPECT(0x98c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98c0));
        EXPECT(0xcc, gbc.readMem(0x98c1));
        // CB CC 0074
        gbc.setState(0x87e1, 0x5df9, 0xd180, 0x451d, 0x5f0a, 0x26d3, 0x0, 0x0);
        gbc.writeMem(0x87e1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x5df9, gbc.sp());
        EXPECT(0x87e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87e1));
        EXPECT(0xcc, gbc.readMem(0x87e2));
        // CB CC 0075
        gbc.setState(0x18c8, 0xc614, 0xb470, 0xe65, 0x3263, 0xd7f9, 0x0, 0x0);
        gbc.writeMem(0x18c8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xc614, gbc.sp());
        EXPECT(0x18ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0076
        gbc.setState(0xd61, 0x4c91, 0x2620, 0x263, 0x99dc, 0x1ec1, 0x0, 0x0);
        gbc.writeMem(0xd61, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x4c91, gbc.sp());
        EXPECT(0xd63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0077
        gbc.setState(0xe110, 0x2cf4, 0xca10, 0x50ca, 0x898f, 0xe889, 0x1, 0x0);
        gbc.writeMem(0xe110, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x2cf4, gbc.sp());
        EXPECT(0xe112, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe110));
        EXPECT(0xcc, gbc.readMem(0xe111));
        // CB CC 0078
        gbc.setState(0x17f7, 0x8f3a, 0x8460, 0xb863, 0xf3a4, 0xb689, 0x0, 0x0);
        gbc.writeMem(0x17f7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x8f3a, gbc.sp());
        EXPECT(0x17f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0079
        gbc.setState(0xeaf, 0xbaea, 0x8dd0, 0xb3c3, 0xe5f8, 0x17d9, 0x0, 0x1);
        gbc.writeMem(0xeaf, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xbaea, gbc.sp());
        EXPECT(0xeb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 007A
        gbc.setState(0x4c11, 0x626, 0x2da0, 0xaf57, 0x1aad, 0x9caa, 0x1, 0x0);
        gbc.writeMem(0x4c11, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x626, gbc.sp());
        EXPECT(0x4c13, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 007B
        gbc.setState(0x2f15, 0x531c, 0xa390, 0x1f9d, 0x5aed, 0x580e, 0x1, 0x0);
        gbc.writeMem(0x2f15, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x531c, gbc.sp());
        EXPECT(0x2f17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 007D
        gbc.setState(0x1545, 0xb9ef, 0x10d0, 0x7724, 0x815d, 0xe807, 0x1, 0x1);
        gbc.writeMem(0x1545, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xb9ef, gbc.sp());
        EXPECT(0x1547, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 007E
        gbc.setState(0xe061, 0xe5d, 0xe8d0, 0xe480, 0xe3a3, 0x8861, 0x0, 0x1);
        gbc.writeMem(0xe061, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xe5d, gbc.sp());
        EXPECT(0xe063, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe061));
        EXPECT(0xcc, gbc.readMem(0xe062));
        // CB CC 007F
        gbc.setState(0x75a6, 0xfb50, 0x8e10, 0x3181, 0xaa7, 0x700b, 0x0, 0x1);
        gbc.writeMem(0x75a6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xfb50, gbc.sp());
        EXPECT(0x75a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0080
        gbc.setState(0x5b52, 0x46f7, 0xd9d0, 0xe80b, 0xa0ac, 0xf49c, 0x1, 0x1);
        gbc.writeMem(0x5b52, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x46f7, gbc.sp());
        EXPECT(0x5b54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0081
        gbc.setState(0x86ad, 0x6fd, 0x54e0, 0x6c86, 0x42db, 0xf18b, 0x1, 0x1);
        gbc.writeMem(0x86ad, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x6fd, gbc.sp());
        EXPECT(0x86af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86ad));
        EXPECT(0xcc, gbc.readMem(0x86ae));
        // CB CC 0082
        gbc.setState(0x4af1, 0x31a, 0x9780, 0x6c87, 0xc02b, 0xd025, 0x0, 0x1);
        gbc.writeMem(0x4af1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x31a, gbc.sp());
        EXPECT(0x4af3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0083
        gbc.setState(0xbf69, 0xae10, 0x93b0, 0xfa70, 0xcbcb, 0x9c0, 0x1, 0x1);
        gbc.writeMem(0xbf69, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xae10, gbc.sp());
        EXPECT(0xbf6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf69));
        EXPECT(0xcc, gbc.readMem(0xbf6a));
        // CB CC 0084
        gbc.setState(0xce9a, 0x5ae4, 0x9910, 0x44, 0xa44d, 0x4c66, 0x1, 0x0);
        gbc.writeMem(0xce9a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x5ae4, gbc.sp());
        EXPECT(0xce9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce9a));
        EXPECT(0xcc, gbc.readMem(0xce9b));
        // CB CC 0085
        gbc.setState(0x9adb, 0x93cd, 0x5650, 0xa19e, 0xa470, 0xa80d, 0x0, 0x1);
        gbc.writeMem(0x9adb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x93cd, gbc.sp());
        EXPECT(0x9add, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9adb));
        EXPECT(0xcc, gbc.readMem(0x9adc));
        // CB CC 0086
        gbc.setState(0x7a1e, 0x22fc, 0x95c0, 0x26f7, 0xf4c3, 0xab83, 0x0, 0x1);
        gbc.writeMem(0x7a1e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x22fc, gbc.sp());
        EXPECT(0x7a20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0087
        gbc.setState(0x8043, 0x8850, 0xd90, 0x1dcc, 0x3ce4, 0x23ab, 0x0, 0x1);
        gbc.writeMem(0x8043, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x8850, gbc.sp());
        EXPECT(0x8045, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8043));
        EXPECT(0xcc, gbc.readMem(0x8044));
        // CB CC 0088
        gbc.setState(0x1a84, 0x8498, 0x4a0, 0x684b, 0xadd4, 0x882c, 0x0, 0x0);
        gbc.writeMem(0x1a84, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x8498, gbc.sp());
        EXPECT(0x1a86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0089
        gbc.setState(0xb657, 0x37a6, 0x2fe0, 0x135d, 0xa3fb, 0x4095, 0x0, 0x0);
        gbc.writeMem(0xb657, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x37a6, gbc.sp());
        EXPECT(0xb659, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb657));
        EXPECT(0xcc, gbc.readMem(0xb658));
        // CB CC 008A
        gbc.setState(0xc4b3, 0x7eba, 0x1ff0, 0x8232, 0xe8fc, 0x9a3d, 0x1, 0x1);
        gbc.writeMem(0xc4b3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x7eba, gbc.sp());
        EXPECT(0xc4b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4b3));
        EXPECT(0xcc, gbc.readMem(0xc4b4));
        // CB CC 008B
        gbc.setState(0x85dd, 0x4716, 0x160, 0x266c, 0xcf9, 0x6537, 0x0, 0x0);
        gbc.writeMem(0x85dd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x4716, gbc.sp());
        EXPECT(0x85df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85dd));
        EXPECT(0xcc, gbc.readMem(0x85de));
        // CB CC 008C
        gbc.setState(0x1c00, 0x1c4d, 0x4680, 0xdb3b, 0x4053, 0x374d, 0x0, 0x0);
        gbc.writeMem(0x1c00, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x1c4d, gbc.sp());
        EXPECT(0x1c02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 008D
        gbc.setState(0xa64e, 0xa8b7, 0x2cc0, 0x51fd, 0x72c2, 0x7dec, 0x0, 0x1);
        gbc.writeMem(0xa64e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xa8b7, gbc.sp());
        EXPECT(0xa650, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa64e));
        EXPECT(0xcc, gbc.readMem(0xa64f));
        // CB CC 008E
        gbc.setState(0xb0b2, 0x84f6, 0x7960, 0xedbb, 0x2eb4, 0x2c94, 0x0, 0x1);
        gbc.writeMem(0xb0b2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x84f6, gbc.sp());
        EXPECT(0xb0b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0b2));
        EXPECT(0xcc, gbc.readMem(0xb0b3));
        // CB CC 0090
        gbc.setState(0xcd02, 0x1fcf, 0xb9b0, 0xec4c, 0x555e, 0xce5e, 0x1, 0x0);
        gbc.writeMem(0xcd02, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x1fcf, gbc.sp());
        EXPECT(0xcd04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd02));
        EXPECT(0xcc, gbc.readMem(0xcd03));
        // CB CC 0091
        gbc.setState(0x4984, 0x286e, 0x9bb0, 0x24ce, 0x6f20, 0xc8b1, 0x1, 0x0);
        gbc.writeMem(0x4984, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x286e, gbc.sp());
        EXPECT(0x4986, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0092
        gbc.setState(0xa58f, 0x5543, 0xc780, 0x42d0, 0x1257, 0x94dd, 0x1, 0x1);
        gbc.writeMem(0xa58f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x5543, gbc.sp());
        EXPECT(0xa591, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa58f));
        EXPECT(0xcc, gbc.readMem(0xa590));
        // CB CC 0093
        gbc.setState(0x7967, 0x3a6, 0x51c0, 0xb15f, 0xafea, 0x55ed, 0x0, 0x1);
        gbc.writeMem(0x7967, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x3a6, gbc.sp());
        EXPECT(0x7969, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0094
        gbc.setState(0x5272, 0xe0f0, 0x58e0, 0xe46a, 0x27ee, 0x242, 0x0, 0x0);
        gbc.writeMem(0x5272, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xe0f0, gbc.sp());
        EXPECT(0x5274, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0095
        gbc.setState(0x431e, 0x61ba, 0xb1a0, 0x98a0, 0x9105, 0x4c39, 0x1, 0x1);
        gbc.writeMem(0x431e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x61ba, gbc.sp());
        EXPECT(0x4320, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0096
        gbc.setState(0x2ffd, 0xbfc0, 0x9bc0, 0x6dd0, 0xbc3b, 0xbd95, 0x1, 0x0);
        gbc.writeMem(0x2ffd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xbfc0, gbc.sp());
        EXPECT(0x2fff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0097
        gbc.setState(0xe7a7, 0xca3a, 0x56b0, 0x8f81, 0xec1f, 0xbb0b, 0x1, 0x1);
        gbc.writeMem(0xe7a7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xca3a, gbc.sp());
        EXPECT(0xe7a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7a7));
        EXPECT(0xcc, gbc.readMem(0xe7a8));
        // CB CC 0098
        gbc.setState(0x12e6, 0x6dc1, 0x4e40, 0x9eb1, 0xa1fb, 0xce10, 0x0, 0x0);
        gbc.writeMem(0x12e6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x6dc1, gbc.sp());
        EXPECT(0x12e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0099
        gbc.setState(0x1856, 0x7c6f, 0x1c10, 0xe4e0, 0x592d, 0x724a, 0x0, 0x0);
        gbc.writeMem(0x1856, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x7c6f, gbc.sp());
        EXPECT(0x1858, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 009A
        gbc.setState(0x675a, 0x3b48, 0x7d50, 0x5b3, 0xfa0e, 0x1960, 0x0, 0x0);
        gbc.writeMem(0x675a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x3b48, gbc.sp());
        EXPECT(0x675c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 009B
        gbc.setState(0x2b1, 0xd624, 0x6260, 0xd3ca, 0xe6a7, 0x4075, 0x1, 0x0);
        gbc.writeMem(0x2b1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xd624, gbc.sp());
        EXPECT(0x2b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 009C
        gbc.setState(0x5976, 0x2f8e, 0x5c90, 0x1508, 0x8779, 0xf442, 0x1, 0x0);
        gbc.writeMem(0x5976, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x2f8e, gbc.sp());
        EXPECT(0x5978, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 009D
        gbc.setState(0x15b6, 0xba5b, 0x4750, 0xb3b, 0x41a7, 0xff45, 0x0, 0x1);
        gbc.writeMem(0x15b6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xba5b, gbc.sp());
        EXPECT(0x15b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 009E
        gbc.setState(0xc8be, 0xa823, 0x8450, 0x977d, 0xa2c5, 0xcdbc, 0x0, 0x1);
        gbc.writeMem(0xc8be, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xa823, gbc.sp());
        EXPECT(0xc8c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8be));
        EXPECT(0xcc, gbc.readMem(0xc8bf));
        // CB CC 009F
        gbc.setState(0x23fc, 0x2105, 0x2510, 0x8ffc, 0x7b37, 0x9be7, 0x1, 0x0);
        gbc.writeMem(0x23fc, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x2105, gbc.sp());
        EXPECT(0x23fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00A0
        gbc.setState(0x61, 0xe585, 0x3330, 0xd521, 0xfc1c, 0x4312, 0x0, 0x0);
        gbc.writeMem(0x61, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xe585, gbc.sp());
        EXPECT(0x63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00A1
        gbc.setState(0x6494, 0xb8ba, 0xb160, 0xecba, 0xe550, 0x4f0e, 0x1, 0x0);
        gbc.writeMem(0x6494, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xb8ba, gbc.sp());
        EXPECT(0x6496, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00A2
        gbc.setState(0xb2a5, 0x68be, 0x170, 0xc87c, 0xc09b, 0x9f54, 0x1, 0x0);
        gbc.writeMem(0xb2a5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x68be, gbc.sp());
        EXPECT(0xb2a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2a5));
        EXPECT(0xcc, gbc.readMem(0xb2a6));
        // CB CC 00A3
        gbc.setState(0x4ee1, 0x85f9, 0x3570, 0x6bad, 0x8d7d, 0x9821, 0x1, 0x0);
        gbc.writeMem(0x4ee1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x85f9, gbc.sp());
        EXPECT(0x4ee3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00A4
        gbc.setState(0x6f1a, 0x27af, 0x21d0, 0x3f28, 0x98ec, 0x952f, 0x0, 0x0);
        gbc.writeMem(0x6f1a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x27af, gbc.sp());
        EXPECT(0x6f1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00A5
        gbc.setState(0x3de3, 0x5b27, 0x3c90, 0xa119, 0xc865, 0x2d88, 0x1, 0x0);
        gbc.writeMem(0x3de3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x5b27, gbc.sp());
        EXPECT(0x3de5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00A6
        gbc.setState(0x502c, 0xb544, 0x9cb0, 0x9a97, 0xa0b4, 0x4675, 0x0, 0x0);
        gbc.writeMem(0x502c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xb544, gbc.sp());
        EXPECT(0x502e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00A8
        gbc.setState(0xcc02, 0x5efd, 0xa060, 0x3a30, 0xefa4, 0x3917, 0x0, 0x0);
        gbc.writeMem(0xcc02, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x5efd, gbc.sp());
        EXPECT(0xcc04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc02));
        EXPECT(0xcc, gbc.readMem(0xcc03));
        // CB CC 00A9
        gbc.setState(0xb768, 0xe422, 0x4b20, 0x7b26, 0xff02, 0xa55d, 0x0, 0x1);
        gbc.writeMem(0xb768, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xe422, gbc.sp());
        EXPECT(0xb76a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb768));
        EXPECT(0xcc, gbc.readMem(0xb769));
        // CB CC 00AA
        gbc.setState(0xbe01, 0x55b8, 0xb00, 0x1a8b, 0x678c, 0x3059, 0x0, 0x0);
        gbc.writeMem(0xbe01, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x55b8, gbc.sp());
        EXPECT(0xbe03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe01));
        EXPECT(0xcc, gbc.readMem(0xbe02));
        // CB CC 00AB
        gbc.setState(0x308b, 0x3b5d, 0xf150, 0xfa1d, 0x759f, 0xe9c9, 0x1, 0x0);
        gbc.writeMem(0x308b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x3b5d, gbc.sp());
        EXPECT(0x308d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00AC
        gbc.setState(0x5b35, 0xe6a4, 0x7d0, 0x8f2a, 0xfd97, 0xe02d, 0x0, 0x1);
        gbc.writeMem(0x5b35, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xe6a4, gbc.sp());
        EXPECT(0x5b37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00AE
        gbc.setState(0xe17d, 0x5e4, 0x9fe0, 0x4951, 0x31b3, 0x1ef2, 0x0, 0x1);
        gbc.writeMem(0xe17d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x5e4, gbc.sp());
        EXPECT(0xe17f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe17d));
        EXPECT(0xcc, gbc.readMem(0xe17e));
        // CB CC 00AF
        gbc.setState(0xf22, 0xf7d4, 0xbd50, 0x7814, 0xfd2d, 0x9da4, 0x1, 0x0);
        gbc.writeMem(0xf22, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xf7d4, gbc.sp());
        EXPECT(0xf24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00B0
        gbc.setState(0x92bb, 0xc54d, 0x82d0, 0xadb8, 0x7c9e, 0x302f, 0x1, 0x1);
        gbc.writeMem(0x92bb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xc54d, gbc.sp());
        EXPECT(0x92bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92bb));
        EXPECT(0xcc, gbc.readMem(0x92bc));
        // CB CC 00B1
        gbc.setState(0x65b1, 0xdff0, 0x9210, 0xf3bf, 0x686c, 0xe017, 0x1, 0x0);
        gbc.writeMem(0x65b1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xdff0, gbc.sp());
        EXPECT(0x65b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00B2
        gbc.setState(0x6e20, 0xc6d6, 0x170, 0x4268, 0xa91d, 0x1d8e, 0x1, 0x1);
        gbc.writeMem(0x6e20, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xc6d6, gbc.sp());
        EXPECT(0x6e22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00B3
        gbc.setState(0x6ddc, 0xadc1, 0x35f0, 0x2140, 0x1765, 0x73db, 0x0, 0x1);
        gbc.writeMem(0x6ddc, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xadc1, gbc.sp());
        EXPECT(0x6dde, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00B4
        gbc.setState(0xc23e, 0x1912, 0x2180, 0xbe23, 0xbb7b, 0x2c92, 0x1, 0x1);
        gbc.writeMem(0xc23e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x1912, gbc.sp());
        EXPECT(0xc240, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc23e));
        EXPECT(0xcc, gbc.readMem(0xc23f));
        // CB CC 00B5
        gbc.setState(0xe1c5, 0xa660, 0xd6d0, 0xf809, 0x6164, 0x3f35, 0x1, 0x1);
        gbc.writeMem(0xe1c5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xa660, gbc.sp());
        EXPECT(0xe1c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1c5));
        EXPECT(0xcc, gbc.readMem(0xe1c6));
        // CB CC 00B7
        gbc.setState(0xab91, 0xae1e, 0x75b0, 0x2d08, 0x8501, 0xd56a, 0x1, 0x0);
        gbc.writeMem(0xab91, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xae1e, gbc.sp());
        EXPECT(0xab93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab91));
        EXPECT(0xcc, gbc.readMem(0xab92));
        // CB CC 00B8
        gbc.setState(0x9eaa, 0x281b, 0xe690, 0xf3bc, 0x878a, 0x4efc, 0x1, 0x1);
        gbc.writeMem(0x9eaa, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x281b, gbc.sp());
        EXPECT(0x9eac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9eaa));
        EXPECT(0xcc, gbc.readMem(0x9eab));
        // CB CC 00B9
        gbc.setState(0xb6e4, 0x2244, 0xe740, 0xaf23, 0x6948, 0xa936, 0x0, 0x1);
        gbc.writeMem(0xb6e4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x2244, gbc.sp());
        EXPECT(0xb6e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6e4));
        EXPECT(0xcc, gbc.readMem(0xb6e5));
        // CB CC 00BA
        gbc.setState(0x1ab4, 0x826, 0x6170, 0xe989, 0xce99, 0x3a4, 0x0, 0x0);
        gbc.writeMem(0x1ab4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x826, gbc.sp());
        EXPECT(0x1ab6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00BB
        gbc.setState(0x6dfe, 0x8fec, 0x2460, 0x11fa, 0x19b8, 0xac09, 0x0, 0x1);
        gbc.writeMem(0x6dfe, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x8fec, gbc.sp());
        EXPECT(0x6e00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00BC
        gbc.setState(0x13ac, 0x6ce3, 0xd7f0, 0x11e1, 0x810c, 0x320c, 0x0, 0x0);
        gbc.writeMem(0x13ac, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x6ce3, gbc.sp());
        EXPECT(0x13ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00BD
        gbc.setState(0x545c, 0xa7a2, 0x8b30, 0x22d0, 0x70e7, 0x61d0, 0x1, 0x0);
        gbc.writeMem(0x545c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xa7a2, gbc.sp());
        EXPECT(0x545e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00BE
        gbc.setState(0x8c08, 0x2614, 0x3100, 0x9b3e, 0x9128, 0xd69, 0x1, 0x1);
        gbc.writeMem(0x8c08, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x2614, gbc.sp());
        EXPECT(0x8c0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c08));
        EXPECT(0xcc, gbc.readMem(0x8c09));
        // CB CC 00BF
        gbc.setState(0x6b58, 0x79f, 0xd8c0, 0xc76c, 0xdf8e, 0x7d71, 0x1, 0x1);
        gbc.writeMem(0x6b58, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x79f, gbc.sp());
        EXPECT(0x6b5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00C0
        gbc.setState(0x7d40, 0xdf2e, 0x1270, 0xf3f, 0x475c, 0xd7dc, 0x1, 0x0);
        gbc.writeMem(0x7d40, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xdf2e, gbc.sp());
        EXPECT(0x7d42, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00C1
        gbc.setState(0x47b6, 0xb678, 0x5440, 0x749c, 0x1d4b, 0xc312, 0x1, 0x0);
        gbc.writeMem(0x47b6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xb678, gbc.sp());
        EXPECT(0x47b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00C2
        gbc.setState(0x822f, 0x9b7f, 0xc9f0, 0xcc0e, 0x4259, 0x6c8f, 0x1, 0x0);
        gbc.writeMem(0x822f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x9b7f, gbc.sp());
        EXPECT(0x8231, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x822f));
        EXPECT(0xcc, gbc.readMem(0x8230));
        // CB CC 00C3
        gbc.setState(0x1fb1, 0xbd59, 0xaf0, 0xf3f3, 0x6d18, 0x1325, 0x1, 0x1);
        gbc.writeMem(0x1fb1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xbd59, gbc.sp());
        EXPECT(0x1fb3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00C4
        gbc.setState(0xded0, 0xb619, 0x5a20, 0x28f5, 0x4424, 0x60ec, 0x0, 0x1);
        gbc.writeMem(0xded0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xb619, gbc.sp());
        EXPECT(0xded2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xded0));
        EXPECT(0xcc, gbc.readMem(0xded1));
        // CB CC 00C5
        gbc.setState(0x2c7b, 0xdb5, 0xb560, 0xbc4c, 0xc245, 0x75de, 0x0, 0x0);
        gbc.writeMem(0x2c7b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xdb5, gbc.sp());
        EXPECT(0x2c7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00C6
        gbc.setState(0x91a3, 0x6a92, 0x74e0, 0x89c5, 0x51b7, 0x1c4f, 0x0, 0x1);
        gbc.writeMem(0x91a3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x6a92, gbc.sp());
        EXPECT(0x91a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91a3));
        EXPECT(0xcc, gbc.readMem(0x91a4));
        // CB CC 00C7
        gbc.setState(0x2f46, 0xd7da, 0x1a80, 0xfa51, 0x80ce, 0x453a, 0x1, 0x0);
        gbc.writeMem(0x2f46, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xd7da, gbc.sp());
        EXPECT(0x2f48, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00C8
        gbc.setState(0x895a, 0x7819, 0x9970, 0x58a8, 0xf7a4, 0x607c, 0x1, 0x1);
        gbc.writeMem(0x895a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x7819, gbc.sp());
        EXPECT(0x895c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x895a));
        EXPECT(0xcc, gbc.readMem(0x895b));
        // CB CC 00C9
        gbc.setState(0x85e3, 0x5339, 0x8e90, 0xeaf, 0x2b1a, 0x61f, 0x0, 0x0);
        gbc.writeMem(0x85e3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x5339, gbc.sp());
        EXPECT(0x85e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85e3));
        EXPECT(0xcc, gbc.readMem(0x85e4));
        // CB CC 00CA
        gbc.setState(0x2ad1, 0x5cba, 0x91b0, 0xe14d, 0x3649, 0xcfb8, 0x1, 0x1);
        gbc.writeMem(0x2ad1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x5cba, gbc.sp());
        EXPECT(0x2ad3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00CB
        gbc.setState(0xbf1a, 0xb759, 0xa520, 0xe6, 0xb0bc, 0x370f, 0x1, 0x1);
        gbc.writeMem(0xbf1a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xb759, gbc.sp());
        EXPECT(0xbf1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf1a));
        EXPECT(0xcc, gbc.readMem(0xbf1b));
        // CB CC 00CC
        gbc.setState(0xa291, 0xdaa1, 0xf310, 0x6cda, 0xe1ea, 0x490b, 0x0, 0x0);
        gbc.writeMem(0xa291, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xdaa1, gbc.sp());
        EXPECT(0xa293, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa291));
        EXPECT(0xcc, gbc.readMem(0xa292));
        // CB CC 00CD
        gbc.setState(0xc1de, 0xf47e, 0x5a00, 0xd7ec, 0xbb53, 0xbcdc, 0x0, 0x0);
        gbc.writeMem(0xc1de, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xf47e, gbc.sp());
        EXPECT(0xc1e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1de));
        EXPECT(0xcc, gbc.readMem(0xc1df));
        // CB CC 00CE
        gbc.setState(0xd84b, 0x27f5, 0x9e30, 0x7400, 0x8301, 0x87f9, 0x1, 0x1);
        gbc.writeMem(0xd84b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x27f5, gbc.sp());
        EXPECT(0xd84d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd84b));
        EXPECT(0xcc, gbc.readMem(0xd84c));
        // CB CC 00CF
        gbc.setState(0xda54, 0x60ce, 0xc7f0, 0xb1c6, 0xf0e5, 0x51d0, 0x1, 0x1);
        gbc.writeMem(0xda54, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x60ce, gbc.sp());
        EXPECT(0xda56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda54));
        EXPECT(0xcc, gbc.readMem(0xda55));
        // CB CC 00D1
        gbc.setState(0x8b05, 0xcbc4, 0x6b60, 0x528, 0x31b4, 0xc446, 0x0, 0x0);
        gbc.writeMem(0x8b05, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xcbc4, gbc.sp());
        EXPECT(0x8b07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b05));
        EXPECT(0xcc, gbc.readMem(0x8b06));
        // CB CC 00D2
        gbc.setState(0x56c1, 0xf240, 0xf090, 0xa66a, 0x2d14, 0x491b, 0x1, 0x0);
        gbc.writeMem(0x56c1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xf240, gbc.sp());
        EXPECT(0x56c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00D3
        gbc.setState(0x4d6e, 0x134f, 0x7e70, 0x5e0d, 0x4f82, 0x4989, 0x1, 0x0);
        gbc.writeMem(0x4d6e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x134f, gbc.sp());
        EXPECT(0x4d70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00D4
        gbc.setState(0x8114, 0xa221, 0x2f90, 0xd0c7, 0xfb1e, 0xd906, 0x0, 0x1);
        gbc.writeMem(0x8114, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xa221, gbc.sp());
        EXPECT(0x8116, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8114));
        EXPECT(0xcc, gbc.readMem(0x8115));
        // CB CC 00D5
        gbc.setState(0xb7c8, 0xbe1d, 0x99b0, 0xae3a, 0x6b9, 0x9b3c, 0x1, 0x0);
        gbc.writeMem(0xb7c8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xbe1d, gbc.sp());
        EXPECT(0xb7ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7c8));
        EXPECT(0xcc, gbc.readMem(0xb7c9));
        // CB CC 00D6
        gbc.setState(0x927c, 0x8196, 0x50a0, 0x5cd4, 0xc56e, 0xe3e, 0x0, 0x1);
        gbc.writeMem(0x927c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x8196, gbc.sp());
        EXPECT(0x927e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x927c));
        EXPECT(0xcc, gbc.readMem(0x927d));
        // CB CC 00D7
        gbc.setState(0x564e, 0xe6ea, 0x6f20, 0x72e6, 0x8a3, 0xaa31, 0x1, 0x0);
        gbc.writeMem(0x564e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xe6ea, gbc.sp());
        EXPECT(0x5650, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00D8
        gbc.setState(0xb23a, 0x115a, 0x4aa0, 0xdaa4, 0x827a, 0xcc8f, 0x1, 0x1);
        gbc.writeMem(0xb23a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x115a, gbc.sp());
        EXPECT(0xb23c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb23a));
        EXPECT(0xcc, gbc.readMem(0xb23b));
        // CB CC 00D9
        gbc.setState(0x2b86, 0x2a7f, 0x9010, 0x3c9b, 0xb880, 0xaa2a, 0x0, 0x0);
        gbc.writeMem(0x2b86, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x2a7f, gbc.sp());
        EXPECT(0x2b88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00DA
        gbc.setState(0xd68f, 0xf948, 0xfaa0, 0x81bb, 0x5fb7, 0xfb98, 0x1, 0x0);
        gbc.writeMem(0xd68f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xf948, gbc.sp());
        EXPECT(0xd691, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd68f));
        EXPECT(0xcc, gbc.readMem(0xd690));
        // CB CC 00DB
        gbc.setState(0xd980, 0x8bfc, 0xdc0, 0xc1d1, 0xb3ac, 0x5d87, 0x1, 0x1);
        gbc.writeMem(0xd980, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x8bfc, gbc.sp());
        EXPECT(0xd982, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd980));
        EXPECT(0xcc, gbc.readMem(0xd981));
        // CB CC 00DC
        gbc.setState(0x2b33, 0x7c7e, 0xe120, 0xe8e8, 0x7b39, 0x141b, 0x0, 0x1);
        gbc.writeMem(0x2b33, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x7c7e, gbc.sp());
        EXPECT(0x2b35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00DD
        gbc.setState(0xb310, 0xc981, 0x500, 0xed5d, 0xe27e, 0x3c7e, 0x1, 0x0);
        gbc.writeMem(0xb310, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xc981, gbc.sp());
        EXPECT(0xb312, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb310));
        EXPECT(0xcc, gbc.readMem(0xb311));
        // CB CC 00DE
        gbc.setState(0x2804, 0xe007, 0x90a0, 0xd7e7, 0x4204, 0xa4a5, 0x0, 0x1);
        gbc.writeMem(0x2804, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xe007, gbc.sp());
        EXPECT(0x2806, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00DF
        gbc.setState(0x4099, 0x5a5c, 0xae80, 0xbe6b, 0x75d7, 0xadc4, 0x1, 0x1);
        gbc.writeMem(0x4099, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x5a5c, gbc.sp());
        EXPECT(0x409b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00E0
        gbc.setState(0x2c74, 0x9dd3, 0x3a70, 0xe7c1, 0x3da1, 0x65ef, 0x1, 0x1);
        gbc.writeMem(0x2c74, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x9dd3, gbc.sp());
        EXPECT(0x2c76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00E1
        gbc.setState(0xdcb1, 0x1772, 0xc1f0, 0x9ffd, 0x5735, 0xd003, 0x0, 0x1);
        gbc.writeMem(0xdcb1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x1772, gbc.sp());
        EXPECT(0xdcb3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcb1));
        EXPECT(0xcc, gbc.readMem(0xdcb2));
        // CB CC 00E2
        gbc.setState(0x2f24, 0x991, 0xb3f0, 0x6076, 0x729c, 0xd70a, 0x0, 0x1);
        gbc.writeMem(0x2f24, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x991, gbc.sp());
        EXPECT(0x2f26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00E3
        gbc.setState(0xba57, 0xc87b, 0xe010, 0x690b, 0xae6a, 0x8feb, 0x1, 0x1);
        gbc.writeMem(0xba57, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xc87b, gbc.sp());
        EXPECT(0xba59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba57));
        EXPECT(0xcc, gbc.readMem(0xba58));
        // CB CC 00E4
        gbc.setState(0x6083, 0x563c, 0x49c0, 0xe131, 0xac24, 0xe31b, 0x0, 0x1);
        gbc.writeMem(0x6083, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x563c, gbc.sp());
        EXPECT(0x6085, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00E6
        gbc.setState(0x5975, 0x7499, 0x9f20, 0x586e, 0x331f, 0x84e0, 0x1, 0x1);
        gbc.writeMem(0x5975, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x7499, gbc.sp());
        EXPECT(0x5977, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00E7
        gbc.setState(0xa878, 0x5e34, 0x1020, 0xdd57, 0x8716, 0xdcfc, 0x1, 0x1);
        gbc.writeMem(0xa878, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x5e34, gbc.sp());
        EXPECT(0xa87a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa878));
        EXPECT(0xcc, gbc.readMem(0xa879));
        // CB CC 00E8
        gbc.setState(0x1826, 0xc681, 0x9a30, 0xd5c, 0x818a, 0xb6a7, 0x1, 0x1);
        gbc.writeMem(0x1826, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xc681, gbc.sp());
        EXPECT(0x1828, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00E9
        gbc.setState(0x3e34, 0x6d, 0x2a90, 0xe21d, 0xc370, 0xfa1f, 0x1, 0x1);
        gbc.writeMem(0x3e34, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x6d, gbc.sp());
        EXPECT(0x3e36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00EA
        gbc.setState(0xb098, 0x8451, 0x7530, 0x65fa, 0xb1dc, 0xfc7d, 0x0, 0x1);
        gbc.writeMem(0xb098, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x8451, gbc.sp());
        EXPECT(0xb09a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb098));
        EXPECT(0xcc, gbc.readMem(0xb099));
        // CB CC 00EB
        gbc.setState(0xbca0, 0x9dc0, 0xcc20, 0x2a0c, 0x7f81, 0x750f, 0x1, 0x1);
        gbc.writeMem(0xbca0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x9dc0, gbc.sp());
        EXPECT(0xbca2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbca0));
        EXPECT(0xcc, gbc.readMem(0xbca1));
        // CB CC 00EC
        gbc.setState(0x1e7b, 0xea97, 0x6600, 0xf4f7, 0x3c77, 0x8b02, 0x0, 0x1);
        gbc.writeMem(0x1e7b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xea97, gbc.sp());
        EXPECT(0x1e7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00ED
        gbc.setState(0x4c45, 0xb2d, 0x7820, 0x843e, 0x4308, 0xb238, 0x1, 0x1);
        gbc.writeMem(0x4c45, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xb2d, gbc.sp());
        EXPECT(0x4c47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00EE
        gbc.setState(0x787b, 0xa0a5, 0x43e0, 0xbc0d, 0xb7df, 0x1eb5, 0x1, 0x1);
        gbc.writeMem(0x787b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xa0a5, gbc.sp());
        EXPECT(0x787d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00EF
        gbc.setState(0xbd2f, 0x7028, 0x63d0, 0xc970, 0x3d1c, 0x7c91, 0x1, 0x0);
        gbc.writeMem(0xbd2f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x7028, gbc.sp());
        EXPECT(0xbd31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd2f));
        EXPECT(0xcc, gbc.readMem(0xbd30));
        // CB CC 00F0
        gbc.setState(0xb5a3, 0xa8c3, 0xcc90, 0x1711, 0xfbf2, 0x81b0, 0x1, 0x1);
        gbc.writeMem(0xb5a3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xa8c3, gbc.sp());
        EXPECT(0xb5a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5a3));
        EXPECT(0xcc, gbc.readMem(0xb5a4));
        // CB CC 00F1
        gbc.setState(0xcc78, 0xac4f, 0x1e10, 0x183a, 0xa731, 0x9d44, 0x1, 0x1);
        gbc.writeMem(0xcc78, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xac4f, gbc.sp());
        EXPECT(0xcc7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc78));
        EXPECT(0xcc, gbc.readMem(0xcc79));
        // CB CC 00F2
        gbc.setState(0xd47a, 0xb108, 0xdac0, 0xb6dd, 0xe338, 0x3670, 0x0, 0x1);
        gbc.writeMem(0xd47a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xb108, gbc.sp());
        EXPECT(0xd47c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd47a));
        EXPECT(0xcc, gbc.readMem(0xd47b));
        // CB CC 00F3
        gbc.setState(0xdf43, 0xf0a, 0xdce0, 0xbed9, 0xe825, 0xf3e9, 0x1, 0x1);
        gbc.writeMem(0xdf43, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xf0a, gbc.sp());
        EXPECT(0xdf45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf43));
        EXPECT(0xcc, gbc.readMem(0xdf44));
        // CB CC 00F4
        gbc.setState(0x164, 0x5b4d, 0x3f70, 0x2f64, 0xdfcb, 0xe865, 0x1, 0x0);
        gbc.writeMem(0x164, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x5b4d, gbc.sp());
        EXPECT(0x166, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00F5
        gbc.setState(0x675f, 0x3579, 0x2340, 0x1523, 0x6166, 0x4e80, 0x0, 0x1);
        gbc.writeMem(0x675f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x3579, gbc.sp());
        EXPECT(0x6761, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00F6
        gbc.setState(0x40a4, 0x8994, 0xbbd0, 0xf89a, 0xe661, 0xb2dc, 0x0, 0x0);
        gbc.writeMem(0x40a4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x8994, gbc.sp());
        EXPECT(0x40a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00F7
        gbc.setState(0x1525, 0x7476, 0x16b0, 0xdbde, 0x272f, 0xc604, 0x0, 0x0);
        gbc.writeMem(0x1525, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x7476, gbc.sp());
        EXPECT(0x1527, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00F8
        gbc.setState(0x6425, 0x6da, 0xf580, 0x447, 0xfb84, 0x3f1a, 0x1, 0x0);
        gbc.writeMem(0x6425, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x6da, gbc.sp());
        EXPECT(0x6427, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 00F9
        gbc.setState(0x755a, 0xfaa1, 0x94b0, 0x5582, 0x459a, 0xfee1, 0x0, 0x0);
        gbc.writeMem(0x755a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xfaa1, gbc.sp());
        EXPECT(0x755c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 00FA
        gbc.setState(0xe2fd, 0x893a, 0xb8c0, 0xf0b9, 0xcd54, 0x901a, 0x1, 0x0);
        gbc.writeMem(0xe2fd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x893a, gbc.sp());
        EXPECT(0xe2ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2fd));
        EXPECT(0xcc, gbc.readMem(0xe2fe));
        // CB CC 00FB
        gbc.setState(0x8cd5, 0x405d, 0xa880, 0x4cb2, 0x6e9c, 0xe1cc, 0x0, 0x1);
        gbc.writeMem(0x8cd5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x405d, gbc.sp());
        EXPECT(0x8cd7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cd5));
        EXPECT(0xcc, gbc.readMem(0x8cd6));
        // CB CC 00FC
        gbc.setState(0x834a, 0x84a5, 0xa3a0, 0xd61a, 0x2510, 0xb7c2, 0x1, 0x1);
        gbc.writeMem(0x834a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x84a5, gbc.sp());
        EXPECT(0x834c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x834a));
        EXPECT(0xcc, gbc.readMem(0x834b));
        // CB CC 00FD
        gbc.setState(0xbaf9, 0xcc53, 0xe630, 0x1559, 0xbf9b, 0xd0f4, 0x0, 0x1);
        gbc.writeMem(0xbaf9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xcc53, gbc.sp());
        EXPECT(0xbafb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaf9));
        EXPECT(0xcc, gbc.readMem(0xbafa));
        // CB CC 00FE
        gbc.setState(0xc3f3, 0x8514, 0x2340, 0xa0d5, 0xb563, 0x6c34, 0x1, 0x1);
        gbc.writeMem(0xc3f3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x8514, gbc.sp());
        EXPECT(0xc3f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3f3));
        EXPECT(0xcc, gbc.readMem(0xc3f4));
        // CB CC 00FF
        gbc.setState(0xcb91, 0x9f2, 0x6b40, 0x636f, 0xbd57, 0xb679, 0x1, 0x1);
        gbc.writeMem(0xcb91, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x9f2, gbc.sp());
        EXPECT(0xcb93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb91));
        EXPECT(0xcc, gbc.readMem(0xcb92));
        // CB CC 0100
        gbc.setState(0xc68d, 0xfc29, 0x5130, 0x6fe4, 0xed14, 0xf3ce, 0x0, 0x0);
        gbc.writeMem(0xc68d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xfc29, gbc.sp());
        EXPECT(0xc68f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc68d));
        EXPECT(0xcc, gbc.readMem(0xc68e));
        // CB CC 0101
        gbc.setState(0xa188, 0x25de, 0xf610, 0xaa05, 0x7706, 0x2663, 0x0, 0x1);
        gbc.writeMem(0xa188, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x25de, gbc.sp());
        EXPECT(0xa18a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa188));
        EXPECT(0xcc, gbc.readMem(0xa189));
        // CB CC 0102
        gbc.setState(0xb05, 0x3c19, 0xa9d0, 0x35ce, 0xd9ed, 0x167c, 0x0, 0x0);
        gbc.writeMem(0xb05, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x3c19, gbc.sp());
        EXPECT(0xb07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0103
        gbc.setState(0xab48, 0x1c1d, 0xe190, 0xe4d6, 0xb7e7, 0x7b5f, 0x1, 0x0);
        gbc.writeMem(0xab48, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x1c1d, gbc.sp());
        EXPECT(0xab4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab48));
        EXPECT(0xcc, gbc.readMem(0xab49));
        // CB CC 0105
        gbc.setState(0x36cd, 0xce81, 0xd4a0, 0xc4f9, 0x554d, 0x8bba, 0x1, 0x1);
        gbc.writeMem(0x36cd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xce81, gbc.sp());
        EXPECT(0x36cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0106
        gbc.setState(0xccd9, 0xd0e6, 0x6690, 0xbfb7, 0x350c, 0xb215, 0x1, 0x1);
        gbc.writeMem(0xccd9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xd0e6, gbc.sp());
        EXPECT(0xccdb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccd9));
        EXPECT(0xcc, gbc.readMem(0xccda));
        // CB CC 0107
        gbc.setState(0xde55, 0x57d9, 0xd060, 0x906b, 0xeb99, 0xae2d, 0x0, 0x0);
        gbc.writeMem(0xde55, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x57d9, gbc.sp());
        EXPECT(0xde57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde55));
        EXPECT(0xcc, gbc.readMem(0xde56));
        // CB CC 0108
        gbc.setState(0xa7c2, 0x326a, 0x3890, 0xf10, 0xeab3, 0x5ae9, 0x1, 0x1);
        gbc.writeMem(0xa7c2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x326a, gbc.sp());
        EXPECT(0xa7c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7c2));
        EXPECT(0xcc, gbc.readMem(0xa7c3));
        // CB CC 010A
        gbc.setState(0x12b0, 0xb2c3, 0x68d0, 0xe2c1, 0x7961, 0xa47f, 0x1, 0x1);
        gbc.writeMem(0x12b0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xb2c3, gbc.sp());
        EXPECT(0x12b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 010B
        gbc.setState(0xecb3, 0x1c30, 0xd690, 0x442d, 0x1a3e, 0x8175, 0x0, 0x0);
        gbc.writeMem(0xecb3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x1c30, gbc.sp());
        EXPECT(0xecb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecb3));
        EXPECT(0xcc, gbc.readMem(0xecb4));
        // CB CC 010C
        gbc.setState(0xec4e, 0x9b48, 0x2570, 0xc59d, 0xef78, 0x9a36, 0x1, 0x0);
        gbc.writeMem(0xec4e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x9b48, gbc.sp());
        EXPECT(0xec50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec4e));
        EXPECT(0xcc, gbc.readMem(0xec4f));
        // CB CC 010D
        gbc.setState(0x18f4, 0xf8c3, 0xc630, 0x6207, 0x6b3b, 0x8589, 0x0, 0x1);
        gbc.writeMem(0x18f4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xf8c3, gbc.sp());
        EXPECT(0x18f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 010E
        gbc.setState(0xa1a9, 0x2024, 0x13b0, 0x2d20, 0x745f, 0x5360, 0x1, 0x1);
        gbc.writeMem(0xa1a9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x2024, gbc.sp());
        EXPECT(0xa1ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1a9));
        EXPECT(0xcc, gbc.readMem(0xa1aa));
        // CB CC 010F
        gbc.setState(0xe31b, 0x3113, 0x9c20, 0x5574, 0xce25, 0xef50, 0x0, 0x0);
        gbc.writeMem(0xe31b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x3113, gbc.sp());
        EXPECT(0xe31d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe31b));
        EXPECT(0xcc, gbc.readMem(0xe31c));
        // CB CC 0110
        gbc.setState(0x6e49, 0x81d1, 0x7850, 0x896d, 0xae3f, 0x46b1, 0x0, 0x1);
        gbc.writeMem(0x6e49, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x81d1, gbc.sp());
        EXPECT(0x6e4b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0111
        gbc.setState(0x2a16, 0x5deb, 0x510, 0xd0f4, 0x8295, 0x531b, 0x1, 0x0);
        gbc.writeMem(0x2a16, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x5deb, gbc.sp());
        EXPECT(0x2a18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0112
        gbc.setState(0x63cd, 0x525, 0x3e60, 0xa013, 0x29a9, 0xe947, 0x1, 0x1);
        gbc.writeMem(0x63cd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x525, gbc.sp());
        EXPECT(0x63cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0113
        gbc.setState(0x9683, 0xc34e, 0x6130, 0x28b3, 0x8538, 0xf33c, 0x1, 0x1);
        gbc.writeMem(0x9683, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xc34e, gbc.sp());
        EXPECT(0x9685, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9683));
        EXPECT(0xcc, gbc.readMem(0x9684));
        // CB CC 0114
        gbc.setState(0xa46a, 0xd944, 0x7a70, 0x7692, 0xf2d2, 0x1aa5, 0x1, 0x0);
        gbc.writeMem(0xa46a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xd944, gbc.sp());
        EXPECT(0xa46c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa46a));
        EXPECT(0xcc, gbc.readMem(0xa46b));
        // CB CC 0115
        gbc.setState(0x5e12, 0x4c30, 0x38c0, 0x56ca, 0xaef9, 0xf333, 0x0, 0x1);
        gbc.writeMem(0x5e12, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x4c30, gbc.sp());
        EXPECT(0x5e14, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0116
        gbc.setState(0x78c4, 0xbb65, 0x2b70, 0x5d19, 0x6da, 0x8158, 0x1, 0x0);
        gbc.writeMem(0x78c4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xbb65, gbc.sp());
        EXPECT(0x78c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0117
        gbc.setState(0xdcd3, 0xd86, 0xc410, 0x36ce, 0xa916, 0xeaba, 0x0, 0x1);
        gbc.writeMem(0xdcd3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xd86, gbc.sp());
        EXPECT(0xdcd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcd3));
        EXPECT(0xcc, gbc.readMem(0xdcd4));
        // CB CC 0118
        gbc.setState(0x8a6, 0xabb3, 0x13d0, 0x85ac, 0x2e2d, 0x70bc, 0x1, 0x0);
        gbc.writeMem(0x8a6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xabb3, gbc.sp());
        EXPECT(0x8a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0119
        gbc.setState(0x6c9d, 0xe804, 0x2d70, 0x3027, 0xaea, 0xce44, 0x0, 0x0);
        gbc.writeMem(0x6c9d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xe804, gbc.sp());
        EXPECT(0x6c9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 011A
        gbc.setState(0x8aa2, 0xa88e, 0x2f80, 0x55c4, 0x8a9d, 0xf1f3, 0x0, 0x0);
        gbc.writeMem(0x8aa2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xa88e, gbc.sp());
        EXPECT(0x8aa4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8aa2));
        EXPECT(0xcc, gbc.readMem(0x8aa3));
        // CB CC 011B
        gbc.setState(0xcc28, 0x971, 0x1cd0, 0xe91f, 0xed9d, 0x667, 0x0, 0x0);
        gbc.writeMem(0xcc28, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x971, gbc.sp());
        EXPECT(0xcc2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc28));
        EXPECT(0xcc, gbc.readMem(0xcc29));
        // CB CC 011C
        gbc.setState(0x3e5a, 0x125b, 0xea10, 0x476a, 0x2f48, 0xaf7c, 0x1, 0x0);
        gbc.writeMem(0x3e5a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x125b, gbc.sp());
        EXPECT(0x3e5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 011D
        gbc.setState(0x79d2, 0x87d1, 0x7800, 0x2a44, 0xa93b, 0xb151, 0x0, 0x0);
        gbc.writeMem(0x79d2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x87d1, gbc.sp());
        EXPECT(0x79d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 011E
        gbc.setState(0xcbdf, 0xe562, 0x5da0, 0xede7, 0x4431, 0x2cda, 0x0, 0x0);
        gbc.writeMem(0xcbdf, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xe562, gbc.sp());
        EXPECT(0xcbe1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbdf));
        EXPECT(0xcc, gbc.readMem(0xcbe0));
        // CB CC 011F
        gbc.setState(0xe16a, 0x3c5e, 0x2c60, 0x1af8, 0xa6e3, 0xfe12, 0x0, 0x0);
        gbc.writeMem(0xe16a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x3c5e, gbc.sp());
        EXPECT(0xe16c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe16a));
        EXPECT(0xcc, gbc.readMem(0xe16b));
        // CB CC 0120
        gbc.setState(0x663c, 0x456d, 0x7e30, 0x5692, 0x92bd, 0x7c26, 0x0, 0x0);
        gbc.writeMem(0x663c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x456d, gbc.sp());
        EXPECT(0x663e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0121
        gbc.setState(0xad0c, 0x9e02, 0xf00, 0xb75, 0xbc14, 0xd866, 0x0, 0x0);
        gbc.writeMem(0xad0c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x9e02, gbc.sp());
        EXPECT(0xad0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad0c));
        EXPECT(0xcc, gbc.readMem(0xad0d));
        // CB CC 0122
        gbc.setState(0x4b5f, 0x5376, 0x5e30, 0x9ead, 0x1936, 0x887c, 0x1, 0x1);
        gbc.writeMem(0x4b5f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x5376, gbc.sp());
        EXPECT(0x4b61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0123
        gbc.setState(0xe128, 0xea27, 0x7180, 0x2c79, 0xf468, 0xfaee, 0x0, 0x1);
        gbc.writeMem(0xe128, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xea27, gbc.sp());
        EXPECT(0xe12a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe128));
        EXPECT(0xcc, gbc.readMem(0xe129));
        // CB CC 0124
        gbc.setState(0x2e78, 0x5b21, 0xa4b0, 0xdcc1, 0xf52a, 0x30f6, 0x0, 0x0);
        gbc.writeMem(0x2e78, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x5b21, gbc.sp());
        EXPECT(0x2e7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0125
        gbc.setState(0x3403, 0x384a, 0xfde0, 0x7599, 0x875e, 0x37c7, 0x0, 0x0);
        gbc.writeMem(0x3403, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x384a, gbc.sp());
        EXPECT(0x3405, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0126
        gbc.setState(0x769a, 0xfd0, 0x8d60, 0x5712, 0x6bef, 0xbc17, 0x0, 0x1);
        gbc.writeMem(0x769a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xfd0, gbc.sp());
        EXPECT(0x769c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0127
        gbc.setState(0x1e95, 0x6041, 0x1c80, 0x4367, 0x804a, 0x563e, 0x1, 0x0);
        gbc.writeMem(0x1e95, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x6041, gbc.sp());
        EXPECT(0x1e97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0128
        gbc.setState(0x7688, 0x2777, 0x6400, 0x76e9, 0x44cc, 0x970d, 0x0, 0x1);
        gbc.writeMem(0x7688, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x2777, gbc.sp());
        EXPECT(0x768a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0129
        gbc.setState(0xe1e5, 0x8a05, 0x8dd0, 0xc623, 0xea56, 0x1b81, 0x1, 0x1);
        gbc.writeMem(0xe1e5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x8a05, gbc.sp());
        EXPECT(0xe1e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1e5));
        EXPECT(0xcc, gbc.readMem(0xe1e6));
        // CB CC 012A
        gbc.setState(0xe5d0, 0xb9bf, 0x89e0, 0xd185, 0x3834, 0x14f7, 0x1, 0x0);
        gbc.writeMem(0xe5d0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xb9bf, gbc.sp());
        EXPECT(0xe5d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5d0));
        EXPECT(0xcc, gbc.readMem(0xe5d1));
        // CB CC 012B
        gbc.setState(0xef20, 0xda8f, 0xa390, 0x1174, 0xa3c5, 0x96a3, 0x1, 0x1);
        gbc.writeMem(0xef20, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xda8f, gbc.sp());
        EXPECT(0xef22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef20));
        EXPECT(0xcc, gbc.readMem(0xef21));
        // CB CC 012D
        gbc.setState(0x619d, 0x1d6c, 0x4180, 0xdc26, 0x49a6, 0x2bc3, 0x0, 0x1);
        gbc.writeMem(0x619d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x1d6c, gbc.sp());
        EXPECT(0x619f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 012E
        gbc.setState(0xd694, 0x9520, 0x1630, 0x9c5d, 0x6508, 0x6d8a, 0x1, 0x0);
        gbc.writeMem(0xd694, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x9520, gbc.sp());
        EXPECT(0xd696, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd694));
        EXPECT(0xcc, gbc.readMem(0xd695));
        // CB CC 012F
        gbc.setState(0x2bb8, 0x64b3, 0x2870, 0xaef1, 0x570f, 0x2f6d, 0x1, 0x0);
        gbc.writeMem(0x2bb8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x64b3, gbc.sp());
        EXPECT(0x2bba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0130
        gbc.setState(0xe61e, 0x730a, 0xb130, 0x442f, 0x1b1d, 0xe9c4, 0x0, 0x1);
        gbc.writeMem(0xe61e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x730a, gbc.sp());
        EXPECT(0xe620, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe61e));
        EXPECT(0xcc, gbc.readMem(0xe61f));
        // CB CC 0131
        gbc.setState(0x1a76, 0xf1e0, 0x6310, 0xbf70, 0x8f29, 0x2049, 0x1, 0x0);
        gbc.writeMem(0x1a76, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xf1e0, gbc.sp());
        EXPECT(0x1a78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0132
        gbc.setState(0xd505, 0x9e8d, 0x9e40, 0x3ce7, 0xb89d, 0xd8d9, 0x0, 0x1);
        gbc.writeMem(0xd505, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x9e8d, gbc.sp());
        EXPECT(0xd507, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd505));
        EXPECT(0xcc, gbc.readMem(0xd506));
        // CB CC 0133
        gbc.setState(0xb43b, 0xccaf, 0x4680, 0x35dc, 0xb1c0, 0x8c54, 0x0, 0x0);
        gbc.writeMem(0xb43b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xccaf, gbc.sp());
        EXPECT(0xb43d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb43b));
        EXPECT(0xcc, gbc.readMem(0xb43c));
        // CB CC 0134
        gbc.setState(0xc907, 0xc02c, 0xcb50, 0x376e, 0xe0f5, 0x9a, 0x1, 0x1);
        gbc.writeMem(0xc907, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xc02c, gbc.sp());
        EXPECT(0xc909, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc907));
        EXPECT(0xcc, gbc.readMem(0xc908));
        // CB CC 0135
        gbc.setState(0xdd0f, 0x7ed8, 0xf0c0, 0xeb5b, 0x6016, 0x2aa6, 0x1, 0x0);
        gbc.writeMem(0xdd0f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x7ed8, gbc.sp());
        EXPECT(0xdd11, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd0f));
        EXPECT(0xcc, gbc.readMem(0xdd10));
        // CB CC 0136
        gbc.setState(0x3404, 0x9935, 0x14e0, 0x6adc, 0xc3d, 0xc53b, 0x0, 0x0);
        gbc.writeMem(0x3404, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x9935, gbc.sp());
        EXPECT(0x3406, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0137
        gbc.setState(0x6c3f, 0x6d9c, 0xca80, 0x8dbf, 0xb25c, 0x5490, 0x0, 0x1);
        gbc.writeMem(0x6c3f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x6d9c, gbc.sp());
        EXPECT(0x6c41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0138
        gbc.setState(0x9533, 0x81f6, 0xa1e0, 0x766c, 0x6504, 0x287f, 0x0, 0x1);
        gbc.writeMem(0x9533, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x81f6, gbc.sp());
        EXPECT(0x9535, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9533));
        EXPECT(0xcc, gbc.readMem(0x9534));
        // CB CC 0139
        gbc.setState(0x72cb, 0x6ad3, 0x6ab0, 0x6c93, 0x5e1c, 0x7727, 0x0, 0x1);
        gbc.writeMem(0x72cb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x6ad3, gbc.sp());
        EXPECT(0x72cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 013A
        gbc.setState(0x84e3, 0xbf7d, 0x6dc0, 0xc484, 0x1a5, 0xbfec, 0x1, 0x1);
        gbc.writeMem(0x84e3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xbf7d, gbc.sp());
        EXPECT(0x84e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84e3));
        EXPECT(0xcc, gbc.readMem(0x84e4));
        // CB CC 013B
        gbc.setState(0xb9bf, 0x8c42, 0x8df0, 0x73da, 0x9ef3, 0x39b0, 0x0, 0x0);
        gbc.writeMem(0xb9bf, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x8c42, gbc.sp());
        EXPECT(0xb9c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9bf));
        EXPECT(0xcc, gbc.readMem(0xb9c0));
        // CB CC 013C
        gbc.setState(0x4ace, 0xce85, 0x7fb0, 0xce93, 0xe36b, 0xcaf6, 0x1, 0x0);
        gbc.writeMem(0x4ace, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xce85, gbc.sp());
        EXPECT(0x4ad0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 013D
        gbc.setState(0x5946, 0x1e5b, 0xe280, 0xd9fc, 0x8f29, 0xd469, 0x1, 0x0);
        gbc.writeMem(0x5946, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x1e5b, gbc.sp());
        EXPECT(0x5948, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 013E
        gbc.setState(0x600e, 0x8f3a, 0x22c0, 0x5259, 0x81ad, 0x2957, 0x1, 0x1);
        gbc.writeMem(0x600e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x8f3a, gbc.sp());
        EXPECT(0x6010, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 013F
        gbc.setState(0x237a, 0x80e2, 0x340, 0x8f04, 0x37ae, 0xcc48, 0x1, 0x0);
        gbc.writeMem(0x237a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x80e2, gbc.sp());
        EXPECT(0x237c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0140
        gbc.setState(0x4471, 0x1a3b, 0x9640, 0xe41b, 0xae4c, 0x318c, 0x0, 0x1);
        gbc.writeMem(0x4471, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x1a3b, gbc.sp());
        EXPECT(0x4473, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0141
        gbc.setState(0x10d8, 0xb604, 0x2e10, 0x734f, 0xee23, 0xa900, 0x0, 0x1);
        gbc.writeMem(0x10d8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xb604, gbc.sp());
        EXPECT(0x10da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0142
        gbc.setState(0x5eba, 0xfb7b, 0x88e0, 0xaf9b, 0x6db0, 0x5394, 0x1, 0x1);
        gbc.writeMem(0x5eba, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xfb7b, gbc.sp());
        EXPECT(0x5ebc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0143
        gbc.setState(0xb089, 0x980c, 0x2700, 0x6e74, 0x2ee5, 0xb4a8, 0x0, 0x0);
        gbc.writeMem(0xb089, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x980c, gbc.sp());
        EXPECT(0xb08b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb089));
        EXPECT(0xcc, gbc.readMem(0xb08a));
        // CB CC 0145
        gbc.setState(0x4da6, 0x6ba2, 0x5e70, 0xa77a, 0x6721, 0xff77, 0x1, 0x0);
        gbc.writeMem(0x4da6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x6ba2, gbc.sp());
        EXPECT(0x4da8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0146
        gbc.setState(0x81c7, 0xfcb6, 0x2240, 0xeac5, 0xf162, 0xa9c8, 0x0, 0x1);
        gbc.writeMem(0x81c7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xfcb6, gbc.sp());
        EXPECT(0x81c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81c7));
        EXPECT(0xcc, gbc.readMem(0x81c8));
        // CB CC 0147
        gbc.setState(0x5c06, 0xdd06, 0xf400, 0x1168, 0x8df6, 0x380f, 0x0, 0x0);
        gbc.writeMem(0x5c06, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xdd06, gbc.sp());
        EXPECT(0x5c08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0148
        gbc.setState(0xe25f, 0x6d3f, 0x7f70, 0x2d9e, 0x2286, 0x671e, 0x0, 0x0);
        gbc.writeMem(0xe25f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x6d3f, gbc.sp());
        EXPECT(0xe261, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe25f));
        EXPECT(0xcc, gbc.readMem(0xe260));
        // CB CC 0149
        gbc.setState(0xbc33, 0x2e35, 0x12d0, 0xafd9, 0x6b90, 0x5a5b, 0x1, 0x1);
        gbc.writeMem(0xbc33, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x2e35, gbc.sp());
        EXPECT(0xbc35, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc33));
        EXPECT(0xcc, gbc.readMem(0xbc34));
        // CB CC 014A
        gbc.setState(0x1727, 0xe10a, 0x8410, 0x4058, 0xfbc8, 0x22e, 0x0, 0x1);
        gbc.writeMem(0x1727, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xe10a, gbc.sp());
        EXPECT(0x1729, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 014B
        gbc.setState(0x2db6, 0x3642, 0x4120, 0xaa06, 0xd5c2, 0x8c1d, 0x0, 0x1);
        gbc.writeMem(0x2db6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x3642, gbc.sp());
        EXPECT(0x2db8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 014C
        gbc.setState(0xe01d, 0x70c0, 0xa200, 0x7fcc, 0xe4a5, 0xad2d, 0x1, 0x0);
        gbc.writeMem(0xe01d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x70c0, gbc.sp());
        EXPECT(0xe01f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe01d));
        EXPECT(0xcc, gbc.readMem(0xe01e));
        // CB CC 014D
        gbc.setState(0x411e, 0x471a, 0x7920, 0xf071, 0xc0b4, 0xb1b6, 0x0, 0x1);
        gbc.writeMem(0x411e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x471a, gbc.sp());
        EXPECT(0x4120, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 014E
        gbc.setState(0x94fe, 0x95d3, 0xde10, 0xf316, 0x9101, 0x91d1, 0x0, 0x0);
        gbc.writeMem(0x94fe, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x95d3, gbc.sp());
        EXPECT(0x9500, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94fe));
        EXPECT(0xcc, gbc.readMem(0x94ff));
        // CB CC 014F
        gbc.setState(0x276e, 0x812c, 0x5150, 0xa3b1, 0x1f95, 0xd85a, 0x1, 0x0);
        gbc.writeMem(0x276e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x812c, gbc.sp());
        EXPECT(0x2770, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0150
        gbc.setState(0x1a95, 0x30f, 0x3640, 0xce1b, 0xb1d1, 0x23b, 0x0, 0x0);
        gbc.writeMem(0x1a95, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x30f, gbc.sp());
        EXPECT(0x1a97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0151
        gbc.setState(0xe61d, 0x9c29, 0x1040, 0x8b84, 0xc4f3, 0x79f, 0x0, 0x1);
        gbc.writeMem(0xe61d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x9c29, gbc.sp());
        EXPECT(0xe61f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe61d));
        EXPECT(0xcc, gbc.readMem(0xe61e));
        // CB CC 0152
        gbc.setState(0x28e5, 0xba27, 0xd6c0, 0x2c46, 0xcb8e, 0x55f6, 0x0, 0x1);
        gbc.writeMem(0x28e5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xba27, gbc.sp());
        EXPECT(0x28e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0153
        gbc.setState(0x78d9, 0x4002, 0x8710, 0xc0cb, 0xee3d, 0x7400, 0x0, 0x0);
        gbc.writeMem(0x78d9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x4002, gbc.sp());
        EXPECT(0x78db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0154
        gbc.setState(0xa9ff, 0xb6a7, 0xb060, 0xe6ce, 0x9c1c, 0xb568, 0x0, 0x1);
        gbc.writeMem(0xa9ff, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xb6a7, gbc.sp());
        EXPECT(0xaa01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9ff));
        EXPECT(0xcc, gbc.readMem(0xaa00));
        // CB CC 0155
        gbc.setState(0x61e2, 0x7590, 0x5b90, 0xdf31, 0x1e87, 0xda67, 0x1, 0x0);
        gbc.writeMem(0x61e2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x7590, gbc.sp());
        EXPECT(0x61e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0156
        gbc.setState(0x7af7, 0x406, 0x1350, 0xb9ce, 0x3a75, 0x1bd6, 0x1, 0x1);
        gbc.writeMem(0x7af7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x406, gbc.sp());
        EXPECT(0x7af9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0157
        gbc.setState(0x2914, 0xef10, 0xfde0, 0x5a51, 0x34de, 0xdf4c, 0x1, 0x0);
        gbc.writeMem(0x2914, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xef10, gbc.sp());
        EXPECT(0x2916, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0158
        gbc.setState(0xeb31, 0xb3af, 0xdab0, 0xd1f3, 0xc3ee, 0x4988, 0x1, 0x0);
        gbc.writeMem(0xeb31, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xb3af, gbc.sp());
        EXPECT(0xeb33, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb31));
        EXPECT(0xcc, gbc.readMem(0xeb32));
        // CB CC 0159
        gbc.setState(0x24e3, 0x14df, 0x2df0, 0x49b2, 0x2b12, 0x2529, 0x0, 0x1);
        gbc.writeMem(0x24e3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x14df, gbc.sp());
        EXPECT(0x24e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 015A
        gbc.setState(0xdff3, 0x1e0f, 0x6240, 0xc96, 0x22f4, 0x55cd, 0x1, 0x1);
        gbc.writeMem(0xdff3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x1e0f, gbc.sp());
        EXPECT(0xdff5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdff3));
        EXPECT(0xcc, gbc.readMem(0xdff4));
        // CB CC 015B
        gbc.setState(0x1ed8, 0xc7e1, 0xd0, 0xf21f, 0xf8f2, 0x8451, 0x0, 0x1);
        gbc.writeMem(0x1ed8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xc7e1, gbc.sp());
        EXPECT(0x1eda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 015C
        gbc.setState(0x7ded, 0x5a7b, 0xdf80, 0xf5c7, 0x8c58, 0x7e10, 0x0, 0x1);
        gbc.writeMem(0x7ded, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x5a7b, gbc.sp());
        EXPECT(0x7def, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 015D
        gbc.setState(0x2f7a, 0xe183, 0x5e30, 0x3387, 0x2434, 0x9fc5, 0x1, 0x1);
        gbc.writeMem(0x2f7a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xe183, gbc.sp());
        EXPECT(0x2f7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 015E
        gbc.setState(0xa8b6, 0x1681, 0x4920, 0x2c3b, 0x368e, 0xeea8, 0x0, 0x0);
        gbc.writeMem(0xa8b6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x1681, gbc.sp());
        EXPECT(0xa8b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8b6));
        EXPECT(0xcc, gbc.readMem(0xa8b7));
        // CB CC 015F
        gbc.setState(0xd195, 0x46fb, 0xa360, 0xeec3, 0x1dec, 0xb8b5, 0x0, 0x0);
        gbc.writeMem(0xd195, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x46fb, gbc.sp());
        EXPECT(0xd197, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd195));
        EXPECT(0xcc, gbc.readMem(0xd196));
        // CB CC 0160
        gbc.setState(0x9a17, 0x543a, 0xeda0, 0xbb6e, 0x1321, 0x904b, 0x1, 0x0);
        gbc.writeMem(0x9a17, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x543a, gbc.sp());
        EXPECT(0x9a19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a17));
        EXPECT(0xcc, gbc.readMem(0x9a18));
        // CB CC 0161
        gbc.setState(0x513a, 0xa82a, 0x21a0, 0xf120, 0xdbf9, 0x85d2, 0x0, 0x1);
        gbc.writeMem(0x513a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xa82a, gbc.sp());
        EXPECT(0x513c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0163
        gbc.setState(0x36c8, 0xc965, 0x4020, 0x7dfb, 0xdeea, 0x4392, 0x1, 0x0);
        gbc.writeMem(0x36c8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xc965, gbc.sp());
        EXPECT(0x36ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0164
        gbc.setState(0x60d4, 0x7a97, 0xc790, 0xd591, 0xdeb2, 0x7689, 0x1, 0x1);
        gbc.writeMem(0x60d4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x7a97, gbc.sp());
        EXPECT(0x60d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0165
        gbc.setState(0x2c6e, 0x9b87, 0x17e0, 0x72ae, 0x2ed4, 0xac96, 0x0, 0x0);
        gbc.writeMem(0x2c6e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x9b87, gbc.sp());
        EXPECT(0x2c70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0166
        gbc.setState(0x85, 0xe4e4, 0x20, 0x448, 0xb4fe, 0xe107, 0x1, 0x1);
        gbc.writeMem(0x85, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xe4e4, gbc.sp());
        EXPECT(0x87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0167
        gbc.setState(0x918d, 0xa550, 0x140, 0xf641, 0x294d, 0x4f97, 0x1, 0x0);
        gbc.writeMem(0x918d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xa550, gbc.sp());
        EXPECT(0x918f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x918d));
        EXPECT(0xcc, gbc.readMem(0x918e));
        // CB CC 0168
        gbc.setState(0x787, 0x739f, 0xc6b0, 0xaf29, 0xd85a, 0x49c1, 0x0, 0x0);
        gbc.writeMem(0x787, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x739f, gbc.sp());
        EXPECT(0x789, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0169
        gbc.setState(0x3367, 0xa104, 0xb850, 0x536a, 0x9f56, 0x45c8, 0x0, 0x1);
        gbc.writeMem(0x3367, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xa104, gbc.sp());
        EXPECT(0x3369, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 016B
        gbc.setState(0x15c, 0xc5bf, 0x5260, 0xd572, 0xa4c0, 0xdc92, 0x1, 0x0);
        gbc.writeMem(0x15c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xc5bf, gbc.sp());
        EXPECT(0x15e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 016C
        gbc.setState(0x2783, 0xe7f9, 0x5b80, 0xea8, 0x3ffa, 0x2950, 0x1, 0x0);
        gbc.writeMem(0x2783, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xe7f9, gbc.sp());
        EXPECT(0x2785, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 016D
        gbc.setState(0x1b91, 0x345b, 0x6dd0, 0x33f0, 0x76d2, 0xb7e, 0x1, 0x0);
        gbc.writeMem(0x1b91, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x345b, gbc.sp());
        EXPECT(0x1b93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 016E
        gbc.setState(0x1417, 0x933c, 0x1b0, 0xb9ee, 0xf9ed, 0x855a, 0x1, 0x1);
        gbc.writeMem(0x1417, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x933c, gbc.sp());
        EXPECT(0x1419, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 016F
        gbc.setState(0x6e57, 0xca05, 0x8aa0, 0x54d2, 0xb68d, 0x4d78, 0x0, 0x1);
        gbc.writeMem(0x6e57, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xca05, gbc.sp());
        EXPECT(0x6e59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0170
        gbc.setState(0xa6ed, 0xc078, 0x3b50, 0xfc5b, 0x8823, 0x90e4, 0x0, 0x0);
        gbc.writeMem(0xa6ed, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xc078, gbc.sp());
        EXPECT(0xa6ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6ed));
        EXPECT(0xcc, gbc.readMem(0xa6ee));
        // CB CC 0171
        gbc.setState(0xc656, 0x5649, 0x5730, 0x1e67, 0x3b26, 0x9a49, 0x0, 0x0);
        gbc.writeMem(0xc656, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x5649, gbc.sp());
        EXPECT(0xc658, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc656));
        EXPECT(0xcc, gbc.readMem(0xc657));
        // CB CC 0172
        gbc.setState(0x2ba7, 0x68ce, 0xd3e0, 0xaa0d, 0xa1bf, 0x9067, 0x0, 0x0);
        gbc.writeMem(0x2ba7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x68ce, gbc.sp());
        EXPECT(0x2ba9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0173
        gbc.setState(0x1706, 0x2682, 0xe860, 0xce85, 0x7fb, 0x871a, 0x1, 0x0);
        gbc.writeMem(0x1706, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x2682, gbc.sp());
        EXPECT(0x1708, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0174
        gbc.setState(0x24e8, 0x1b7b, 0xa80, 0x52ed, 0x5b36, 0x8657, 0x0, 0x0);
        gbc.writeMem(0x24e8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x1b7b, gbc.sp());
        EXPECT(0x24ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0175
        gbc.setState(0x2a39, 0xd0d1, 0xbb70, 0x21e4, 0xa4d, 0x9c77, 0x1, 0x0);
        gbc.writeMem(0x2a39, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xd0d1, gbc.sp());
        EXPECT(0x2a3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0176
        gbc.setState(0xe2f6, 0x3bfa, 0x10a0, 0x8878, 0xcc7, 0xff91, 0x0, 0x1);
        gbc.writeMem(0xe2f6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x3bfa, gbc.sp());
        EXPECT(0xe2f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2f6));
        EXPECT(0xcc, gbc.readMem(0xe2f7));
        // CB CC 0177
        gbc.setState(0x7acd, 0x5e35, 0x1bd0, 0x4f02, 0xb0d0, 0x1089, 0x1, 0x0);
        gbc.writeMem(0x7acd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x5e35, gbc.sp());
        EXPECT(0x7acf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0178
        gbc.setState(0x32fa, 0x7fcb, 0x65a0, 0x6b29, 0x9eb7, 0x6c7, 0x1, 0x1);
        gbc.writeMem(0x32fa, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x7fcb, gbc.sp());
        EXPECT(0x32fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0179
        gbc.setState(0x332, 0x851e, 0xd350, 0x7239, 0x9dfd, 0x9a4c, 0x0, 0x0);
        gbc.writeMem(0x332, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x851e, gbc.sp());
        EXPECT(0x334, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 017B
        gbc.setState(0x5f7e, 0x9465, 0xf7b0, 0xce7, 0x12db, 0xf3e7, 0x1, 0x0);
        gbc.writeMem(0x5f7e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x9465, gbc.sp());
        EXPECT(0x5f80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 017C
        gbc.setState(0x3508, 0xc0f5, 0xa660, 0xffb1, 0xeb5e, 0xb742, 0x0, 0x1);
        gbc.writeMem(0x3508, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xc0f5, gbc.sp());
        EXPECT(0x350a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 017D
        gbc.setState(0xdbe, 0x8836, 0x7800, 0x870a, 0xecf, 0x6ec7, 0x0, 0x1);
        gbc.writeMem(0xdbe, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x8836, gbc.sp());
        EXPECT(0xdc0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 017E
        gbc.setState(0x28fc, 0x933b, 0x5000, 0x6ff5, 0xac43, 0x795c, 0x1, 0x0);
        gbc.writeMem(0x28fc, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x933b, gbc.sp());
        EXPECT(0x28fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 017F
        gbc.setState(0x7363, 0xff1f, 0x6280, 0xd15f, 0xf5f2, 0xe91f, 0x1, 0x1);
        gbc.writeMem(0x7363, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xff1f, gbc.sp());
        EXPECT(0x7365, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0180
        gbc.setState(0x171d, 0x22b0, 0x9230, 0x2826, 0x76b, 0xd586, 0x0, 0x0);
        gbc.writeMem(0x171d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x22b0, gbc.sp());
        EXPECT(0x171f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0181
        gbc.setState(0x3f95, 0x8aaa, 0x1cf0, 0x8364, 0xc44c, 0xbfea, 0x0, 0x0);
        gbc.writeMem(0x3f95, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x8aaa, gbc.sp());
        EXPECT(0x3f97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0182
        gbc.setState(0x2b9e, 0x3625, 0x7c0, 0x6a5f, 0xeee1, 0xf51f, 0x1, 0x1);
        gbc.writeMem(0x2b9e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x3625, gbc.sp());
        EXPECT(0x2ba0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0183
        gbc.setState(0x4c40, 0x46, 0xcbe0, 0x12ca, 0x68bb, 0x9add, 0x0, 0x1);
        gbc.writeMem(0x4c40, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x46, gbc.sp());
        EXPECT(0x4c42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0184
        gbc.setState(0x4dc4, 0xb3a7, 0x1190, 0xcf88, 0x723, 0x9a6b, 0x1, 0x0);
        gbc.writeMem(0x4dc4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xb3a7, gbc.sp());
        EXPECT(0x4dc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0185
        gbc.setState(0x6803, 0x4ad5, 0xdd30, 0xc, 0xade1, 0xd74c, 0x1, 0x0);
        gbc.writeMem(0x6803, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x4ad5, gbc.sp());
        EXPECT(0x6805, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0186
        gbc.setState(0x6567, 0x5a79, 0x6a20, 0xe29a, 0xa7f, 0x4f62, 0x1, 0x0);
        gbc.writeMem(0x6567, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x5a79, gbc.sp());
        EXPECT(0x6569, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0187
        gbc.setState(0xe371, 0x1757, 0x6f30, 0x2373, 0x85c0, 0x1320, 0x0, 0x0);
        gbc.writeMem(0xe371, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x1757, gbc.sp());
        EXPECT(0xe373, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe371));
        EXPECT(0xcc, gbc.readMem(0xe372));
        // CB CC 0188
        gbc.setState(0x4155, 0xc776, 0x25f0, 0x2569, 0xff, 0x2170, 0x1, 0x1);
        gbc.writeMem(0x4155, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xc776, gbc.sp());
        EXPECT(0x4157, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0189
        gbc.setState(0x6bb1, 0x92c8, 0xb870, 0x23c3, 0x335a, 0x197a, 0x0, 0x0);
        gbc.writeMem(0x6bb1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x92c8, gbc.sp());
        EXPECT(0x6bb3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 018A
        gbc.setState(0xd6e5, 0x34c8, 0x1fe0, 0x79da, 0x87a2, 0xd50b, 0x0, 0x0);
        gbc.writeMem(0xd6e5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x34c8, gbc.sp());
        EXPECT(0xd6e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6e5));
        EXPECT(0xcc, gbc.readMem(0xd6e6));
        // CB CC 018B
        gbc.setState(0x7b07, 0xd302, 0xd2b0, 0xf8ab, 0x4f73, 0x3b87, 0x0, 0x1);
        gbc.writeMem(0x7b07, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xd302, gbc.sp());
        EXPECT(0x7b09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 018C
        gbc.setState(0xca15, 0x31a3, 0xa760, 0x8d0c, 0x39cd, 0x583a, 0x0, 0x0);
        gbc.writeMem(0xca15, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x31a3, gbc.sp());
        EXPECT(0xca17, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca15));
        EXPECT(0xcc, gbc.readMem(0xca16));
        // CB CC 018D
        gbc.setState(0xbd19, 0x8b2, 0xc0c0, 0x6a8e, 0x85ed, 0x559f, 0x1, 0x0);
        gbc.writeMem(0xbd19, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x8b2, gbc.sp());
        EXPECT(0xbd1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd19));
        EXPECT(0xcc, gbc.readMem(0xbd1a));
        // CB CC 018E
        gbc.setState(0x3f6a, 0x4605, 0xcc30, 0xe8b0, 0x5620, 0xb595, 0x0, 0x0);
        gbc.writeMem(0x3f6a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x4605, gbc.sp());
        EXPECT(0x3f6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 018F
        gbc.setState(0xc5da, 0x53b5, 0xa850, 0x54d4, 0x45ee, 0xdd9, 0x1, 0x0);
        gbc.writeMem(0xc5da, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x53b5, gbc.sp());
        EXPECT(0xc5dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5da));
        EXPECT(0xcc, gbc.readMem(0xc5db));
        // CB CC 0190
        gbc.setState(0x3cac, 0x709, 0xdbe0, 0x8b63, 0xacca, 0xe574, 0x0, 0x0);
        gbc.writeMem(0x3cac, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x709, gbc.sp());
        EXPECT(0x3cae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0191
        gbc.setState(0xce68, 0x884c, 0x5130, 0x8df3, 0x6a93, 0x780e, 0x1, 0x0);
        gbc.writeMem(0xce68, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x884c, gbc.sp());
        EXPECT(0xce6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce68));
        EXPECT(0xcc, gbc.readMem(0xce69));
        // CB CC 0193
        gbc.setState(0x484e, 0xc34a, 0x5490, 0x42a1, 0x5f0a, 0xafe5, 0x1, 0x1);
        gbc.writeMem(0x484e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xc34a, gbc.sp());
        EXPECT(0x4850, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0194
        gbc.setState(0xd007, 0xba88, 0x30f0, 0x1b10, 0xcf67, 0xf6fe, 0x1, 0x1);
        gbc.writeMem(0xd007, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xba88, gbc.sp());
        EXPECT(0xd009, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd007));
        EXPECT(0xcc, gbc.readMem(0xd008));
        // CB CC 0195
        gbc.setState(0x997, 0x43f0, 0x41c0, 0x302b, 0x389d, 0x7038, 0x0, 0x0);
        gbc.writeMem(0x997, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x43f0, gbc.sp());
        EXPECT(0x999, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0196
        gbc.setState(0x407c, 0x90b7, 0xd220, 0xf8c2, 0x850, 0xb41, 0x1, 0x1);
        gbc.writeMem(0x407c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x90b7, gbc.sp());
        EXPECT(0x407e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0197
        gbc.setState(0xdbd2, 0x21d9, 0x21f0, 0xad5d, 0x4e61, 0x77ba, 0x1, 0x1);
        gbc.writeMem(0xdbd2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x21d9, gbc.sp());
        EXPECT(0xdbd4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbd2));
        EXPECT(0xcc, gbc.readMem(0xdbd3));
        // CB CC 0198
        gbc.setState(0x89e7, 0xaef1, 0xc650, 0x8504, 0xedc, 0x82b2, 0x0, 0x0);
        gbc.writeMem(0x89e7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xaef1, gbc.sp());
        EXPECT(0x89e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89e7));
        EXPECT(0xcc, gbc.readMem(0x89e8));
        // CB CC 0199
        gbc.setState(0xe5df, 0x5993, 0xdd70, 0x5ed3, 0x2768, 0x445f, 0x1, 0x1);
        gbc.writeMem(0xe5df, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x5993, gbc.sp());
        EXPECT(0xe5e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5df));
        EXPECT(0xcc, gbc.readMem(0xe5e0));
        // CB CC 019A
        gbc.setState(0xc4fa, 0x72b6, 0x9200, 0x20b3, 0x1b01, 0xb49, 0x0, 0x1);
        gbc.writeMem(0xc4fa, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x72b6, gbc.sp());
        EXPECT(0xc4fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4fa));
        EXPECT(0xcc, gbc.readMem(0xc4fb));
        // CB CC 019B
        gbc.setState(0x6e9c, 0x80ac, 0xc890, 0xf9c3, 0x858c, 0xdaab, 0x0, 0x0);
        gbc.writeMem(0x6e9c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x80ac, gbc.sp());
        EXPECT(0x6e9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 019C
        gbc.setState(0xeac0, 0xe6c8, 0xf140, 0x83cd, 0xa4e4, 0x1b24, 0x0, 0x1);
        gbc.writeMem(0xeac0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xe6c8, gbc.sp());
        EXPECT(0xeac2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeac0));
        EXPECT(0xcc, gbc.readMem(0xeac1));
        // CB CC 019D
        gbc.setState(0xa37d, 0x130a, 0xc0d0, 0x7ee6, 0x8c12, 0xe26e, 0x0, 0x1);
        gbc.writeMem(0xa37d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x130a, gbc.sp());
        EXPECT(0xa37f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa37d));
        EXPECT(0xcc, gbc.readMem(0xa37e));
        // CB CC 019E
        gbc.setState(0xc5a, 0x7df, 0x6ea0, 0xd0d1, 0xc6aa, 0x596, 0x0, 0x0);
        gbc.writeMem(0xc5a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x7df, gbc.sp());
        EXPECT(0xc5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 019F
        gbc.setState(0xb35e, 0x1bf1, 0xfbf0, 0xab80, 0xc25d, 0x682, 0x1, 0x1);
        gbc.writeMem(0xb35e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x1bf1, gbc.sp());
        EXPECT(0xb360, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb35e));
        EXPECT(0xcc, gbc.readMem(0xb35f));
        // CB CC 01A0
        gbc.setState(0x8895, 0x9f6f, 0x66c0, 0xdef7, 0xd6c, 0x8a27, 0x0, 0x1);
        gbc.writeMem(0x8895, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x9f6f, gbc.sp());
        EXPECT(0x8897, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8895));
        EXPECT(0xcc, gbc.readMem(0x8896));
        // CB CC 01A1
        gbc.setState(0x8450, 0x2144, 0x8a90, 0xa8d5, 0x2559, 0x9ef0, 0x0, 0x0);
        gbc.writeMem(0x8450, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x2144, gbc.sp());
        EXPECT(0x8452, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8450));
        EXPECT(0xcc, gbc.readMem(0x8451));
        // CB CC 01A2
        gbc.setState(0xd225, 0x5abb, 0x3f50, 0x378f, 0xddc8, 0xfe67, 0x1, 0x1);
        gbc.writeMem(0xd225, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x5abb, gbc.sp());
        EXPECT(0xd227, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd225));
        EXPECT(0xcc, gbc.readMem(0xd226));
        // CB CC 01A3
        gbc.setState(0x1d8c, 0xdf74, 0xb850, 0x4a81, 0x5cde, 0x9848, 0x1, 0x1);
        gbc.writeMem(0x1d8c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xdf74, gbc.sp());
        EXPECT(0x1d8e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01A4
        gbc.setState(0x669a, 0xaca5, 0xf630, 0xf15c, 0x527a, 0x50, 0x0, 0x0);
        gbc.writeMem(0x669a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xaca5, gbc.sp());
        EXPECT(0x669c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01A5
        gbc.setState(0x59c8, 0x5a3f, 0x3c60, 0x474c, 0xc2be, 0x861b, 0x1, 0x0);
        gbc.writeMem(0x59c8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x5a3f, gbc.sp());
        EXPECT(0x59ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01A6
        gbc.setState(0x46f0, 0x59ba, 0xfd60, 0xf78d, 0x8bee, 0x5ce0, 0x1, 0x0);
        gbc.writeMem(0x46f0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x59ba, gbc.sp());
        EXPECT(0x46f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01A7
        gbc.setState(0x20f3, 0x67d8, 0x42d0, 0x46f0, 0x8ff3, 0x831a, 0x1, 0x1);
        gbc.writeMem(0x20f3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x67d8, gbc.sp());
        EXPECT(0x20f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01A8
        gbc.setState(0x69b7, 0x90d9, 0x5960, 0xdcd5, 0x9165, 0x42f8, 0x0, 0x0);
        gbc.writeMem(0x69b7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x90d9, gbc.sp());
        EXPECT(0x69b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01A9
        gbc.setState(0x94ab, 0x1523, 0xd470, 0x2747, 0xbaf3, 0xbbe7, 0x0, 0x0);
        gbc.writeMem(0x94ab, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x1523, gbc.sp());
        EXPECT(0x94ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94ab));
        EXPECT(0xcc, gbc.readMem(0x94ac));
        // CB CC 01AA
        gbc.setState(0xc2bd, 0xf168, 0x8950, 0x2d13, 0x86a3, 0x86a2, 0x1, 0x0);
        gbc.writeMem(0xc2bd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xf168, gbc.sp());
        EXPECT(0xc2bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2bd));
        EXPECT(0xcc, gbc.readMem(0xc2be));
        // CB CC 01AB
        gbc.setState(0x683e, 0x84a5, 0x5710, 0x585b, 0x4860, 0x92b, 0x1, 0x1);
        gbc.writeMem(0x683e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x84a5, gbc.sp());
        EXPECT(0x6840, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01AC
        gbc.setState(0x8497, 0x7201, 0xb160, 0x87da, 0x1391, 0x889b, 0x1, 0x0);
        gbc.writeMem(0x8497, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x7201, gbc.sp());
        EXPECT(0x8499, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8497));
        EXPECT(0xcc, gbc.readMem(0x8498));
        // CB CC 01AD
        gbc.setState(0xa725, 0xb27e, 0xe870, 0x9a8b, 0x54c4, 0xf914, 0x1, 0x1);
        gbc.writeMem(0xa725, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xb27e, gbc.sp());
        EXPECT(0xa727, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa725));
        EXPECT(0xcc, gbc.readMem(0xa726));
        // CB CC 01AE
        gbc.setState(0x87c9, 0xb0cf, 0xa6b0, 0x9b46, 0x73e6, 0x362b, 0x1, 0x0);
        gbc.writeMem(0x87c9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xb0cf, gbc.sp());
        EXPECT(0x87cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87c9));
        EXPECT(0xcc, gbc.readMem(0x87ca));
        // CB CC 01AF
        gbc.setState(0xb91e, 0x177a, 0x640, 0x15f8, 0xd5cf, 0x914f, 0x0, 0x1);
        gbc.writeMem(0xb91e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x177a, gbc.sp());
        EXPECT(0xb920, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb91e));
        EXPECT(0xcc, gbc.readMem(0xb91f));
        // CB CC 01B0
        gbc.setState(0x8684, 0xef15, 0x8560, 0xb946, 0x4805, 0xc4e9, 0x1, 0x0);
        gbc.writeMem(0x8684, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xef15, gbc.sp());
        EXPECT(0x8686, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8684));
        EXPECT(0xcc, gbc.readMem(0x8685));
        // CB CC 01B1
        gbc.setState(0x6e57, 0x9678, 0x9700, 0x69d5, 0xbc85, 0xdfd8, 0x1, 0x0);
        gbc.writeMem(0x6e57, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x9678, gbc.sp());
        EXPECT(0x6e59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01B2
        gbc.setState(0x566c, 0xb067, 0x8f00, 0x40f6, 0x4747, 0x345e, 0x0, 0x0);
        gbc.writeMem(0x566c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xb067, gbc.sp());
        EXPECT(0x566e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01B3
        gbc.setState(0x99e, 0x331e, 0xa5a0, 0x783d, 0xdb31, 0x1ea2, 0x1, 0x0);
        gbc.writeMem(0x99e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x331e, gbc.sp());
        EXPECT(0x9a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01B4
        gbc.setState(0x211f, 0x7b33, 0xa9a0, 0x1373, 0x13d0, 0xb099, 0x1, 0x0);
        gbc.writeMem(0x211f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x7b33, gbc.sp());
        EXPECT(0x2121, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01B5
        gbc.setState(0xe65, 0xbf5c, 0x7e30, 0xfbcd, 0x903, 0x7980, 0x1, 0x0);
        gbc.writeMem(0xe65, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xbf5c, gbc.sp());
        EXPECT(0xe67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01B6
        gbc.setState(0x9a72, 0x5dd7, 0x8c60, 0x18bb, 0x1401, 0x2b1, 0x0, 0x1);
        gbc.writeMem(0x9a72, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x5dd7, gbc.sp());
        EXPECT(0x9a74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a72));
        EXPECT(0xcc, gbc.readMem(0x9a73));
        // CB CC 01B8
        gbc.setState(0x3c94, 0xe6ea, 0xb260, 0xa34d, 0x8cfc, 0xb1c1, 0x0, 0x1);
        gbc.writeMem(0x3c94, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xe6ea, gbc.sp());
        EXPECT(0x3c96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01B9
        gbc.setState(0x8499, 0xdb38, 0x6280, 0xaaa5, 0xc138, 0xc9fe, 0x1, 0x0);
        gbc.writeMem(0x8499, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xdb38, gbc.sp());
        EXPECT(0x849b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8499));
        EXPECT(0xcc, gbc.readMem(0x849a));
        // CB CC 01BA
        gbc.setState(0x9448, 0x6040, 0xd700, 0x721b, 0x1f78, 0x14e8, 0x0, 0x0);
        gbc.writeMem(0x9448, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x6040, gbc.sp());
        EXPECT(0x944a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9448));
        EXPECT(0xcc, gbc.readMem(0x9449));
        // CB CC 01BB
        gbc.setState(0x74b4, 0xad78, 0x5260, 0x4f1b, 0xe1d6, 0xf2a5, 0x1, 0x1);
        gbc.writeMem(0x74b4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xad78, gbc.sp());
        EXPECT(0x74b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01BC
        gbc.setState(0x1e17, 0x23e5, 0xfc0, 0x1176, 0xf59f, 0x2dee, 0x1, 0x0);
        gbc.writeMem(0x1e17, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x23e5, gbc.sp());
        EXPECT(0x1e19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01BD
        gbc.setState(0xb861, 0x925b, 0x2170, 0x5105, 0xaf83, 0x15ea, 0x0, 0x0);
        gbc.writeMem(0xb861, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x925b, gbc.sp());
        EXPECT(0xb863, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb861));
        EXPECT(0xcc, gbc.readMem(0xb862));
        // CB CC 01BE
        gbc.setState(0x5954, 0x646a, 0x5e60, 0x2fb0, 0xf251, 0x710a, 0x1, 0x0);
        gbc.writeMem(0x5954, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x646a, gbc.sp());
        EXPECT(0x5956, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01BF
        gbc.setState(0x7127, 0xc23, 0xbaa0, 0x1cb6, 0xee33, 0x2ac8, 0x0, 0x1);
        gbc.writeMem(0x7127, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xc23, gbc.sp());
        EXPECT(0x7129, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01C0
        gbc.setState(0x9612, 0x1ab7, 0x7530, 0x36ad, 0x6f9b, 0xfd6c, 0x1, 0x1);
        gbc.writeMem(0x9612, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x1ab7, gbc.sp());
        EXPECT(0x9614, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9612));
        EXPECT(0xcc, gbc.readMem(0x9613));
        // CB CC 01C1
        gbc.setState(0x8e37, 0x2b2c, 0xbed0, 0x2484, 0x1dd, 0xfe8d, 0x0, 0x0);
        gbc.writeMem(0x8e37, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x2b2c, gbc.sp());
        EXPECT(0x8e39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e37));
        EXPECT(0xcc, gbc.readMem(0x8e38));
        // CB CC 01C2
        gbc.setState(0xe87a, 0x44ef, 0xc010, 0x708a, 0x9d99, 0x1538, 0x0, 0x1);
        gbc.writeMem(0xe87a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x44ef, gbc.sp());
        EXPECT(0xe87c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe87a));
        EXPECT(0xcc, gbc.readMem(0xe87b));
        // CB CC 01C3
        gbc.setState(0xaf35, 0xbe4a, 0x5990, 0x23e2, 0xe461, 0x61bc, 0x1, 0x0);
        gbc.writeMem(0xaf35, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xbe4a, gbc.sp());
        EXPECT(0xaf37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf35));
        EXPECT(0xcc, gbc.readMem(0xaf36));
        // CB CC 01C4
        gbc.setState(0xa195, 0xa7c7, 0xe280, 0x44ad, 0x5a64, 0xc4c3, 0x1, 0x1);
        gbc.writeMem(0xa195, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xa7c7, gbc.sp());
        EXPECT(0xa197, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa195));
        EXPECT(0xcc, gbc.readMem(0xa196));
        // CB CC 01C5
        gbc.setState(0x1eca, 0xc778, 0x37d0, 0xdf0e, 0xad4a, 0xaf28, 0x1, 0x1);
        gbc.writeMem(0x1eca, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xc778, gbc.sp());
        EXPECT(0x1ecc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01C6
        gbc.setState(0xdd2a, 0x7405, 0x8c40, 0x3a6a, 0xb454, 0xa37d, 0x1, 0x1);
        gbc.writeMem(0xdd2a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x7405, gbc.sp());
        EXPECT(0xdd2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd2a));
        EXPECT(0xcc, gbc.readMem(0xdd2b));
        // CB CC 01C7
        gbc.setState(0x91a0, 0x7384, 0x2f0, 0x9143, 0x5dc5, 0x55c4, 0x1, 0x1);
        gbc.writeMem(0x91a0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x7384, gbc.sp());
        EXPECT(0x91a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91a0));
        EXPECT(0xcc, gbc.readMem(0x91a1));
        // CB CC 01C9
        gbc.setState(0xa3d3, 0x37ec, 0x8ce0, 0x44b5, 0xb261, 0x6d55, 0x1, 0x0);
        gbc.writeMem(0xa3d3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x37ec, gbc.sp());
        EXPECT(0xa3d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3d3));
        EXPECT(0xcc, gbc.readMem(0xa3d4));
        // CB CC 01CA
        gbc.setState(0xd189, 0xbce3, 0xc050, 0x4500, 0xc485, 0x7eb5, 0x1, 0x1);
        gbc.writeMem(0xd189, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xbce3, gbc.sp());
        EXPECT(0xd18b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd189));
        EXPECT(0xcc, gbc.readMem(0xd18a));
        // CB CC 01CB
        gbc.setState(0xa929, 0xf59a, 0x2420, 0x9952, 0xa35a, 0xba9f, 0x0, 0x1);
        gbc.writeMem(0xa929, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xf59a, gbc.sp());
        EXPECT(0xa92b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa929));
        EXPECT(0xcc, gbc.readMem(0xa92a));
        // CB CC 01CC
        gbc.setState(0x32dc, 0x449e, 0xc1d0, 0x97de, 0x2f0e, 0x1901, 0x0, 0x1);
        gbc.writeMem(0x32dc, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x449e, gbc.sp());
        EXPECT(0x32de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01CD
        gbc.setState(0x81d, 0xd202, 0x4750, 0x8810, 0xd06e, 0x1235, 0x1, 0x1);
        gbc.writeMem(0x81d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xd202, gbc.sp());
        EXPECT(0x81f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01CE
        gbc.setState(0xe531, 0xe1a4, 0x6c30, 0x6361, 0x6f42, 0x6320, 0x1, 0x1);
        gbc.writeMem(0xe531, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xe1a4, gbc.sp());
        EXPECT(0xe533, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe531));
        EXPECT(0xcc, gbc.readMem(0xe532));
        // CB CC 01CF
        gbc.setState(0xa3a, 0x8326, 0x880, 0xb77e, 0xe0b7, 0xbb77, 0x1, 0x1);
        gbc.writeMem(0xa3a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x8326, gbc.sp());
        EXPECT(0xa3c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01D0
        gbc.setState(0x590c, 0x4d23, 0x3cd0, 0x7391, 0x8dcd, 0xc200, 0x1, 0x0);
        gbc.writeMem(0x590c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x4d23, gbc.sp());
        EXPECT(0x590e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01D1
        gbc.setState(0x56a1, 0x48ce, 0x1790, 0x9758, 0x952c, 0xf66a, 0x0, 0x0);
        gbc.writeMem(0x56a1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x48ce, gbc.sp());
        EXPECT(0x56a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01D2
        gbc.setState(0x5a2a, 0x96c9, 0xf790, 0x7373, 0xae65, 0xb126, 0x0, 0x0);
        gbc.writeMem(0x5a2a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x96c9, gbc.sp());
        EXPECT(0x5a2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01D3
        gbc.setState(0x6170, 0xf846, 0x5e60, 0x11ed, 0xedb3, 0xa11b, 0x1, 0x0);
        gbc.writeMem(0x6170, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xf846, gbc.sp());
        EXPECT(0x6172, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01D4
        gbc.setState(0xdc6e, 0x3694, 0x17d0, 0x85bd, 0xc105, 0xf95d, 0x1, 0x0);
        gbc.writeMem(0xdc6e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x3694, gbc.sp());
        EXPECT(0xdc70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc6e));
        EXPECT(0xcc, gbc.readMem(0xdc6f));
        // CB CC 01D5
        gbc.setState(0x4ae9, 0x1552, 0xc1f0, 0xa865, 0x2b14, 0x534f, 0x0, 0x1);
        gbc.writeMem(0x4ae9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x1552, gbc.sp());
        EXPECT(0x4aeb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01D6
        gbc.setState(0xaa81, 0x408a, 0x6690, 0x70a2, 0x403d, 0x3008, 0x0, 0x1);
        gbc.writeMem(0xaa81, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x408a, gbc.sp());
        EXPECT(0xaa83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa81));
        EXPECT(0xcc, gbc.readMem(0xaa82));
        // CB CC 01D7
        gbc.setState(0x32b8, 0xb304, 0x9420, 0x8052, 0x8dec, 0x9c38, 0x1, 0x1);
        gbc.writeMem(0x32b8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xb304, gbc.sp());
        EXPECT(0x32ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01D8
        gbc.setState(0x4c05, 0x3ecd, 0xfb80, 0x85d6, 0x8405, 0x66d, 0x0, 0x1);
        gbc.writeMem(0x4c05, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x3ecd, gbc.sp());
        EXPECT(0x4c07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01D9
        gbc.setState(0x3fb1, 0xaa37, 0x9920, 0x469c, 0x6cd4, 0x8f63, 0x1, 0x0);
        gbc.writeMem(0x3fb1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xaa37, gbc.sp());
        EXPECT(0x3fb3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01DA
        gbc.setState(0x5910, 0x9f21, 0xe890, 0xdd07, 0x9265, 0x39a4, 0x0, 0x0);
        gbc.writeMem(0x5910, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x9f21, gbc.sp());
        EXPECT(0x5912, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01DB
        gbc.setState(0xcdde, 0x2a82, 0x1950, 0xa2df, 0xa173, 0xc95e, 0x1, 0x0);
        gbc.writeMem(0xcdde, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x2a82, gbc.sp());
        EXPECT(0xcde0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdde));
        EXPECT(0xcc, gbc.readMem(0xcddf));
        // CB CC 01DC
        gbc.setState(0xef88, 0x5f98, 0xc420, 0x6b1a, 0xac2c, 0xccf4, 0x0, 0x0);
        gbc.writeMem(0xef88, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x5f98, gbc.sp());
        EXPECT(0xef8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef88));
        EXPECT(0xcc, gbc.readMem(0xef89));
        // CB CC 01DD
        gbc.setState(0x1c20, 0x3001, 0xddd0, 0x4073, 0x8df6, 0x6eee, 0x1, 0x1);
        gbc.writeMem(0x1c20, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x3001, gbc.sp());
        EXPECT(0x1c22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01DE
        gbc.setState(0x340, 0xc2b5, 0xee90, 0x4df, 0xf784, 0xeeb5, 0x1, 0x1);
        gbc.writeMem(0x340, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xc2b5, gbc.sp());
        EXPECT(0x342, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01DF
        gbc.setState(0xaa53, 0x2615, 0x7210, 0x8fa0, 0x4ebe, 0x9380, 0x0, 0x1);
        gbc.writeMem(0xaa53, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x2615, gbc.sp());
        EXPECT(0xaa55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa53));
        EXPECT(0xcc, gbc.readMem(0xaa54));
        // CB CC 01E0
        gbc.setState(0x9d9e, 0x93d, 0xd80, 0xc18b, 0x1c02, 0x8933, 0x0, 0x1);
        gbc.writeMem(0x9d9e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x93d, gbc.sp());
        EXPECT(0x9da0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d9e));
        EXPECT(0xcc, gbc.readMem(0x9d9f));
        // CB CC 01E1
        gbc.setState(0xd97d, 0x744e, 0xe900, 0x86c1, 0x2307, 0x78f5, 0x1, 0x1);
        gbc.writeMem(0xd97d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x744e, gbc.sp());
        EXPECT(0xd97f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd97d));
        EXPECT(0xcc, gbc.readMem(0xd97e));
        // CB CC 01E2
        gbc.setState(0x98f6, 0xee47, 0xd8d0, 0x561a, 0x3020, 0x42c3, 0x0, 0x0);
        gbc.writeMem(0x98f6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xee47, gbc.sp());
        EXPECT(0x98f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98f6));
        EXPECT(0xcc, gbc.readMem(0x98f7));
        // CB CC 01E3
        gbc.setState(0xaa7c, 0x9bb0, 0x2070, 0x79e0, 0x6faa, 0xcefb, 0x0, 0x1);
        gbc.writeMem(0xaa7c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x9bb0, gbc.sp());
        EXPECT(0xaa7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa7c));
        EXPECT(0xcc, gbc.readMem(0xaa7d));
        // CB CC 01E4
        gbc.setState(0x387f, 0xe8f3, 0x7c40, 0x7562, 0xae3, 0x814, 0x1, 0x1);
        gbc.writeMem(0x387f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xe8f3, gbc.sp());
        EXPECT(0x3881, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01E5
        gbc.setState(0x5de2, 0xda74, 0x1510, 0x6048, 0xa1a8, 0x69fd, 0x0, 0x0);
        gbc.writeMem(0x5de2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xda74, gbc.sp());
        EXPECT(0x5de4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01E6
        gbc.setState(0x47ed, 0x345, 0xb480, 0xf68d, 0x8e6f, 0xc5fb, 0x1, 0x1);
        gbc.writeMem(0x47ed, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x345, gbc.sp());
        EXPECT(0x47ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01E7
        gbc.setState(0xe36a, 0x7cfd, 0x28f0, 0x6077, 0xe337, 0xc2a9, 0x0, 0x1);
        gbc.writeMem(0xe36a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x7cfd, gbc.sp());
        EXPECT(0xe36c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe36a));
        EXPECT(0xcc, gbc.readMem(0xe36b));
        // CB CC 01E8
        gbc.setState(0x9e55, 0x4ea1, 0xf720, 0x2e19, 0x183d, 0x471, 0x1, 0x1);
        gbc.writeMem(0x9e55, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x4ea1, gbc.sp());
        EXPECT(0x9e57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e55));
        EXPECT(0xcc, gbc.readMem(0x9e56));
        // CB CC 01E9
        gbc.setState(0x66e4, 0xe01e, 0x5fa0, 0x440e, 0xfa3a, 0x2ff8, 0x1, 0x1);
        gbc.writeMem(0x66e4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xe01e, gbc.sp());
        EXPECT(0x66e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01EA
        gbc.setState(0x1ede, 0xa698, 0xbbb0, 0x67cb, 0xcabd, 0x2813, 0x1, 0x1);
        gbc.writeMem(0x1ede, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xa698, gbc.sp());
        EXPECT(0x1ee0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01EB
        gbc.setState(0x4c92, 0xb7e4, 0x5150, 0x6600, 0x8984, 0x5d42, 0x0, 0x0);
        gbc.writeMem(0x4c92, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xb7e4, gbc.sp());
        EXPECT(0x4c94, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01EC
        gbc.setState(0x1e39, 0x18aa, 0x9f30, 0x7b7b, 0x3146, 0x19ad, 0x0, 0x1);
        gbc.writeMem(0x1e39, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x18aa, gbc.sp());
        EXPECT(0x1e3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01ED
        gbc.setState(0xd480, 0x5589, 0x8120, 0x2cef, 0x185d, 0x1725, 0x0, 0x1);
        gbc.writeMem(0xd480, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x5589, gbc.sp());
        EXPECT(0xd482, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd480));
        EXPECT(0xcc, gbc.readMem(0xd481));
        // CB CC 01EE
        gbc.setState(0x727b, 0x5034, 0x8bb0, 0x3ed6, 0x1d3f, 0xf8dc, 0x1, 0x1);
        gbc.writeMem(0x727b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x5034, gbc.sp());
        EXPECT(0x727d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01F0
        gbc.setState(0x8799, 0x83b6, 0x8ab0, 0xe4df, 0xa3cc, 0xed49, 0x0, 0x1);
        gbc.writeMem(0x8799, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x83b6, gbc.sp());
        EXPECT(0x879b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8799));
        EXPECT(0xcc, gbc.readMem(0x879a));
        // CB CC 01F1
        gbc.setState(0xbffb, 0xed94, 0x5e40, 0xa35f, 0xfbf6, 0xa9b3, 0x0, 0x1);
        gbc.writeMem(0xbffb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xed94, gbc.sp());
        EXPECT(0xbffd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbffb));
        EXPECT(0xcc, gbc.readMem(0xbffc));
        // CB CC 01F2
        gbc.setState(0xd862, 0xecaa, 0x22e0, 0x9354, 0xa620, 0x985, 0x1, 0x0);
        gbc.writeMem(0xd862, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xecaa, gbc.sp());
        EXPECT(0xd864, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd862));
        EXPECT(0xcc, gbc.readMem(0xd863));
        // CB CC 01F3
        gbc.setState(0xef4b, 0xd87b, 0x9a90, 0x7fe2, 0xf0aa, 0x174d, 0x0, 0x1);
        gbc.writeMem(0xef4b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xd87b, gbc.sp());
        EXPECT(0xef4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef4b));
        EXPECT(0xcc, gbc.readMem(0xef4c));
        // CB CC 01F4
        gbc.setState(0xa2d3, 0xa19a, 0x92d0, 0x720e, 0xa3e9, 0x7e3e, 0x1, 0x1);
        gbc.writeMem(0xa2d3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xa19a, gbc.sp());
        EXPECT(0xa2d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2d3));
        EXPECT(0xcc, gbc.readMem(0xa2d4));
        // CB CC 01F5
        gbc.setState(0x3fe4, 0xe32e, 0xc9c0, 0xc1ac, 0x732, 0xfbe7, 0x1, 0x0);
        gbc.writeMem(0x3fe4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xe32e, gbc.sp());
        EXPECT(0x3fe6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01F6
        gbc.setState(0xa5e9, 0x6680, 0xd710, 0xf4aa, 0x3073, 0xf5d6, 0x0, 0x0);
        gbc.writeMem(0xa5e9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x6680, gbc.sp());
        EXPECT(0xa5eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5e9));
        EXPECT(0xcc, gbc.readMem(0xa5ea));
        // CB CC 01F7
        gbc.setState(0xd7ac, 0xc8c6, 0x560, 0x67bf, 0xb921, 0x1f49, 0x1, 0x0);
        gbc.writeMem(0xd7ac, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xc8c6, gbc.sp());
        EXPECT(0xd7ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7ac));
        EXPECT(0xcc, gbc.readMem(0xd7ad));
        // CB CC 01F8
        gbc.setState(0x5762, 0xc6db, 0x830, 0x235f, 0x8b3f, 0xd45, 0x0, 0x1);
        gbc.writeMem(0x5762, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xc6db, gbc.sp());
        EXPECT(0x5764, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 01F9
        gbc.setState(0x6301, 0x7abd, 0x6de0, 0x38ad, 0x176a, 0xdd39, 0x0, 0x0);
        gbc.writeMem(0x6301, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x7abd, gbc.sp());
        EXPECT(0x6303, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01FA
        gbc.setState(0xec39, 0xe2e5, 0xaf90, 0x7d2d, 0xcd46, 0xadb5, 0x1, 0x1);
        gbc.writeMem(0xec39, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xe2e5, gbc.sp());
        EXPECT(0xec3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec39));
        EXPECT(0xcc, gbc.readMem(0xec3a));
        // CB CC 01FB
        gbc.setState(0x9e9b, 0x9d33, 0xdbd0, 0xb06a, 0xe5de, 0x44a3, 0x1, 0x0);
        gbc.writeMem(0x9e9b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x9d33, gbc.sp());
        EXPECT(0x9e9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e9b));
        EXPECT(0xcc, gbc.readMem(0x9e9c));
        // CB CC 01FC
        gbc.setState(0x484c, 0xe376, 0x7440, 0xd000, 0x8cdd, 0xb3fa, 0x0, 0x0);
        gbc.writeMem(0x484c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xe376, gbc.sp());
        EXPECT(0x484e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01FD
        gbc.setState(0xe96f, 0x1f93, 0x8a0, 0x6b25, 0xf5ac, 0xf746, 0x0, 0x0);
        gbc.writeMem(0xe96f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x1f93, gbc.sp());
        EXPECT(0xe971, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe96f));
        EXPECT(0xcc, gbc.readMem(0xe970));
        // CB CC 01FE
        gbc.setState(0x785d, 0xf4ac, 0x2760, 0x61a, 0x1a07, 0x48dc, 0x0, 0x1);
        gbc.writeMem(0x785d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xf4ac, gbc.sp());
        EXPECT(0x785f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 01FF
        gbc.setState(0x8323, 0x856d, 0xaaa0, 0xd0f9, 0x358c, 0xc122, 0x0, 0x0);
        gbc.writeMem(0x8323, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x856d, gbc.sp());
        EXPECT(0x8325, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8323));
        EXPECT(0xcc, gbc.readMem(0x8324));
        // CB CC 0200
        gbc.setState(0xc867, 0xa70f, 0x5260, 0xb26a, 0x3423, 0x8c56, 0x1, 0x1);
        gbc.writeMem(0xc867, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xa70f, gbc.sp());
        EXPECT(0xc869, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc867));
        EXPECT(0xcc, gbc.readMem(0xc868));
        // CB CC 0201
        gbc.setState(0xae5b, 0xc174, 0x1a80, 0xe18f, 0x81b0, 0xf1c, 0x1, 0x0);
        gbc.writeMem(0xae5b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xc174, gbc.sp());
        EXPECT(0xae5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae5b));
        EXPECT(0xcc, gbc.readMem(0xae5c));
        // CB CC 0202
        gbc.setState(0x956e, 0x48cc, 0x1ee0, 0xd389, 0xf866, 0x62d2, 0x0, 0x1);
        gbc.writeMem(0x956e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x48cc, gbc.sp());
        EXPECT(0x9570, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x956e));
        EXPECT(0xcc, gbc.readMem(0x956f));
        // CB CC 0203
        gbc.setState(0x34fe, 0xe30f, 0xd10, 0x9cfc, 0x5a6e, 0xe384, 0x1, 0x0);
        gbc.writeMem(0x34fe, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xe30f, gbc.sp());
        EXPECT(0x3500, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0204
        gbc.setState(0xa1cb, 0xefac, 0x1d60, 0x76bd, 0xecb7, 0x6d6f, 0x0, 0x1);
        gbc.writeMem(0xa1cb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xefac, gbc.sp());
        EXPECT(0xa1cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1cb));
        EXPECT(0xcc, gbc.readMem(0xa1cc));
        // CB CC 0206
        gbc.setState(0xea65, 0xfb2f, 0x8790, 0x91fa, 0x16cb, 0xcbe4, 0x1, 0x0);
        gbc.writeMem(0xea65, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xfb2f, gbc.sp());
        EXPECT(0xea67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea65));
        EXPECT(0xcc, gbc.readMem(0xea66));
        // CB CC 0207
        gbc.setState(0x5268, 0x2533, 0x7260, 0xc69a, 0x448f, 0xadf0, 0x0, 0x1);
        gbc.writeMem(0x5268, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x2533, gbc.sp());
        EXPECT(0x526a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0208
        gbc.setState(0x58ff, 0x755e, 0xd2a0, 0x411, 0xc3a7, 0xe452, 0x1, 0x0);
        gbc.writeMem(0x58ff, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x755e, gbc.sp());
        EXPECT(0x5901, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0209
        gbc.setState(0x9738, 0x75c7, 0x5c60, 0x4c2a, 0x94a6, 0xe3a2, 0x1, 0x0);
        gbc.writeMem(0x9738, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x75c7, gbc.sp());
        EXPECT(0x973a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9738));
        EXPECT(0xcc, gbc.readMem(0x9739));
        // CB CC 020A
        gbc.setState(0x534b, 0xd828, 0xe0e0, 0x8332, 0x95ca, 0x80d6, 0x1, 0x0);
        gbc.writeMem(0x534b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xd828, gbc.sp());
        EXPECT(0x534d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 020B
        gbc.setState(0x7da4, 0x5399, 0x31e0, 0x24a8, 0x709f, 0xc08d, 0x0, 0x0);
        gbc.writeMem(0x7da4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x5399, gbc.sp());
        EXPECT(0x7da6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 020C
        gbc.setState(0xbfd, 0x5d89, 0x72f0, 0xd967, 0x78c3, 0x9d8, 0x1, 0x1);
        gbc.writeMem(0xbfd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x5d89, gbc.sp());
        EXPECT(0xbff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 020D
        gbc.setState(0x689a, 0x4997, 0x6c40, 0xfddd, 0xa36e, 0x14d5, 0x1, 0x1);
        gbc.writeMem(0x689a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x4997, gbc.sp());
        EXPECT(0x689c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 020E
        gbc.setState(0x58db, 0x7bbf, 0x9fe0, 0xa88e, 0x1534, 0xc524, 0x0, 0x1);
        gbc.writeMem(0x58db, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x7bbf, gbc.sp());
        EXPECT(0x58dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 020F
        gbc.setState(0xcc0c, 0x6114, 0x7e10, 0xf878, 0x56e6, 0x5449, 0x0, 0x1);
        gbc.writeMem(0xcc0c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x6114, gbc.sp());
        EXPECT(0xcc0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc0c));
        EXPECT(0xcc, gbc.readMem(0xcc0d));
        // CB CC 0210
        gbc.setState(0x5fdf, 0x7048, 0x61f0, 0x376d, 0x556f, 0xc814, 0x1, 0x1);
        gbc.writeMem(0x5fdf, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x7048, gbc.sp());
        EXPECT(0x5fe1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0211
        gbc.setState(0x1ba2, 0x195f, 0x18f0, 0x2ba0, 0xacf7, 0x8e3d, 0x0, 0x1);
        gbc.writeMem(0x1ba2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x195f, gbc.sp());
        EXPECT(0x1ba4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0212
        gbc.setState(0xa572, 0x57af, 0x8a30, 0xb29f, 0x2b4d, 0x48c9, 0x1, 0x0);
        gbc.writeMem(0xa572, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x57af, gbc.sp());
        EXPECT(0xa574, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa572));
        EXPECT(0xcc, gbc.readMem(0xa573));
        // CB CC 0213
        gbc.setState(0x1564, 0xe173, 0xb350, 0x8439, 0xdeab, 0x983c, 0x1, 0x0);
        gbc.writeMem(0x1564, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xe173, gbc.sp());
        EXPECT(0x1566, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0215
        gbc.setState(0xc8f1, 0x39f6, 0xb230, 0x957b, 0x58b4, 0xaf0a, 0x0, 0x0);
        gbc.writeMem(0xc8f1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x39f6, gbc.sp());
        EXPECT(0xc8f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8f1));
        EXPECT(0xcc, gbc.readMem(0xc8f2));
        // CB CC 0216
        gbc.setState(0x49a5, 0x7e40, 0xe290, 0x39c2, 0x989a, 0x8947, 0x0, 0x1);
        gbc.writeMem(0x49a5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x7e40, gbc.sp());
        EXPECT(0x49a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0217
        gbc.setState(0x8069, 0xa048, 0x280, 0x7d10, 0xc38f, 0x3652, 0x1, 0x0);
        gbc.writeMem(0x8069, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xa048, gbc.sp());
        EXPECT(0x806b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8069));
        EXPECT(0xcc, gbc.readMem(0x806a));
        // CB CC 0218
        gbc.setState(0xcc3d, 0x261c, 0xc840, 0x1f1d, 0xc717, 0x1149, 0x0, 0x1);
        gbc.writeMem(0xcc3d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x261c, gbc.sp());
        EXPECT(0xcc3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc3d));
        EXPECT(0xcc, gbc.readMem(0xcc3e));
        // CB CC 0219
        gbc.setState(0x8078, 0x6db1, 0x8eb0, 0xd8f8, 0x48ee, 0xc75d, 0x1, 0x0);
        gbc.writeMem(0x8078, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x6db1, gbc.sp());
        EXPECT(0x807a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8078));
        EXPECT(0xcc, gbc.readMem(0x8079));
        // CB CC 021B
        gbc.setState(0xa360, 0xd145, 0x8540, 0x811e, 0x34dd, 0xbe75, 0x1, 0x0);
        gbc.writeMem(0xa360, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xd145, gbc.sp());
        EXPECT(0xa362, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa360));
        EXPECT(0xcc, gbc.readMem(0xa361));
        // CB CC 021C
        gbc.setState(0xe550, 0x6b27, 0x6d50, 0x474d, 0x387c, 0xfa24, 0x0, 0x0);
        gbc.writeMem(0xe550, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x6b27, gbc.sp());
        EXPECT(0xe552, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe550));
        EXPECT(0xcc, gbc.readMem(0xe551));
        // CB CC 021D
        gbc.setState(0xad47, 0x7edb, 0xbbf0, 0x4424, 0xa21d, 0x8c3, 0x1, 0x0);
        gbc.writeMem(0xad47, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x7edb, gbc.sp());
        EXPECT(0xad49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad47));
        EXPECT(0xcc, gbc.readMem(0xad48));
        // CB CC 021E
        gbc.setState(0x5f25, 0x4573, 0xbac0, 0xf64c, 0x3d5b, 0x70c8, 0x1, 0x0);
        gbc.writeMem(0x5f25, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x4573, gbc.sp());
        EXPECT(0x5f27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 021F
        gbc.setState(0x2cae, 0x8174, 0xfe70, 0xe754, 0xdc5b, 0xfd99, 0x1, 0x1);
        gbc.writeMem(0x2cae, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x8174, gbc.sp());
        EXPECT(0x2cb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0220
        gbc.setState(0x8754, 0xdaec, 0xcf40, 0x7c22, 0xd19e, 0x9227, 0x1, 0x0);
        gbc.writeMem(0x8754, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xdaec, gbc.sp());
        EXPECT(0x8756, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8754));
        EXPECT(0xcc, gbc.readMem(0x8755));
        // CB CC 0221
        gbc.setState(0x8716, 0xe299, 0xab30, 0xad17, 0xeba5, 0x88f, 0x0, 0x0);
        gbc.writeMem(0x8716, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xe299, gbc.sp());
        EXPECT(0x8718, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8716));
        EXPECT(0xcc, gbc.readMem(0x8717));
        // CB CC 0222
        gbc.setState(0x2353, 0xe791, 0x8440, 0x3d44, 0x1c2d, 0x98d8, 0x1, 0x1);
        gbc.writeMem(0x2353, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xe791, gbc.sp());
        EXPECT(0x2355, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0223
        gbc.setState(0x4711, 0x2339, 0xc400, 0xec10, 0xc168, 0x43c5, 0x1, 0x0);
        gbc.writeMem(0x4711, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x2339, gbc.sp());
        EXPECT(0x4713, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0224
        gbc.setState(0xa97d, 0x31b9, 0x1580, 0x782e, 0x86a6, 0xb25f, 0x1, 0x1);
        gbc.writeMem(0xa97d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x31b9, gbc.sp());
        EXPECT(0xa97f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa97d));
        EXPECT(0xcc, gbc.readMem(0xa97e));
        // CB CC 0225
        gbc.setState(0x8bbb, 0x5bbe, 0xf1b0, 0xe705, 0x2085, 0xb857, 0x1, 0x1);
        gbc.writeMem(0x8bbb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x5bbe, gbc.sp());
        EXPECT(0x8bbd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bbb));
        EXPECT(0xcc, gbc.readMem(0x8bbc));
        // CB CC 0226
        gbc.setState(0x43d4, 0x79b7, 0x5c50, 0x6dde, 0x4af5, 0xf265, 0x1, 0x0);
        gbc.writeMem(0x43d4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x79b7, gbc.sp());
        EXPECT(0x43d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0227
        gbc.setState(0x3b4f, 0x9d10, 0xfc00, 0x5064, 0x5f2d, 0x46e7, 0x1, 0x1);
        gbc.writeMem(0x3b4f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x9d10, gbc.sp());
        EXPECT(0x3b51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0228
        gbc.setState(0x6a12, 0x9d0d, 0x6500, 0x4b27, 0x1ec9, 0x4d1b, 0x1, 0x1);
        gbc.writeMem(0x6a12, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x9d0d, gbc.sp());
        EXPECT(0x6a14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0229
        gbc.setState(0x7a19, 0x8585, 0xe590, 0xebc4, 0x4238, 0x299f, 0x0, 0x0);
        gbc.writeMem(0x7a19, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x8585, gbc.sp());
        EXPECT(0x7a1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 022A
        gbc.setState(0xae6a, 0xe82, 0x9090, 0x3448, 0xd365, 0x37a, 0x1, 0x1);
        gbc.writeMem(0xae6a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xe82, gbc.sp());
        EXPECT(0xae6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae6a));
        EXPECT(0xcc, gbc.readMem(0xae6b));
        // CB CC 022B
        gbc.setState(0xad13, 0x9bb2, 0xca70, 0xab40, 0x50b1, 0x1fbd, 0x0, 0x1);
        gbc.writeMem(0xad13, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x9bb2, gbc.sp());
        EXPECT(0xad15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad13));
        EXPECT(0xcc, gbc.readMem(0xad14));
        // CB CC 022C
        gbc.setState(0x8869, 0xe825, 0xd450, 0xfbf0, 0xa4cf, 0x3e89, 0x1, 0x0);
        gbc.writeMem(0x8869, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xe825, gbc.sp());
        EXPECT(0x886b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8869));
        EXPECT(0xcc, gbc.readMem(0x886a));
        // CB CC 022D
        gbc.setState(0xf31, 0x500, 0xafa0, 0x4294, 0xcfed, 0xc18, 0x0, 0x1);
        gbc.writeMem(0xf31, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x500, gbc.sp());
        EXPECT(0xf33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 022E
        gbc.setState(0xed98, 0xf6f9, 0x2770, 0xf943, 0x265, 0x38a6, 0x1, 0x1);
        gbc.writeMem(0xed98, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xf6f9, gbc.sp());
        EXPECT(0xed9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed98));
        EXPECT(0xcc, gbc.readMem(0xed99));
        // CB CC 022F
        gbc.setState(0x1ef0, 0x5456, 0xf050, 0xcca, 0xa56e, 0x5243, 0x1, 0x1);
        gbc.writeMem(0x1ef0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x5456, gbc.sp());
        EXPECT(0x1ef2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0231
        gbc.setState(0x416c, 0x2389, 0x8ae0, 0x5c22, 0xf09c, 0x6cbb, 0x0, 0x1);
        gbc.writeMem(0x416c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x2389, gbc.sp());
        EXPECT(0x416e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0232
        gbc.setState(0x65b6, 0xc341, 0x8b80, 0x2c4f, 0xaa87, 0xd499, 0x0, 0x1);
        gbc.writeMem(0x65b6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xc341, gbc.sp());
        EXPECT(0x65b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0233
        gbc.setState(0xa4d9, 0xbc2, 0xd210, 0x4ff2, 0x66b7, 0x34e1, 0x0, 0x1);
        gbc.writeMem(0xa4d9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xbc2, gbc.sp());
        EXPECT(0xa4db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4d9));
        EXPECT(0xcc, gbc.readMem(0xa4da));
        // CB CC 0234
        gbc.setState(0x1f0f, 0x8157, 0xb790, 0x5142, 0x6c0f, 0xcf5c, 0x0, 0x0);
        gbc.writeMem(0x1f0f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x8157, gbc.sp());
        EXPECT(0x1f11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0235
        gbc.setState(0x8e69, 0x96e0, 0xcd40, 0xe946, 0x7352, 0x7828, 0x1, 0x0);
        gbc.writeMem(0x8e69, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x96e0, gbc.sp());
        EXPECT(0x8e6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e69));
        EXPECT(0xcc, gbc.readMem(0x8e6a));
        // CB CC 0236
        gbc.setState(0x692d, 0xc0ff, 0xdf30, 0xf677, 0x5210, 0xe0ae, 0x0, 0x0);
        gbc.writeMem(0x692d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xc0ff, gbc.sp());
        EXPECT(0x692f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0237
        gbc.setState(0x2e6f, 0x6ebc, 0x82b0, 0x4460, 0x4e0d, 0x1a58, 0x0, 0x0);
        gbc.writeMem(0x2e6f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x6ebc, gbc.sp());
        EXPECT(0x2e71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0238
        gbc.setState(0x26c1, 0xe52e, 0x6820, 0x1491, 0xff7b, 0x366f, 0x0, 0x1);
        gbc.writeMem(0x26c1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xe52e, gbc.sp());
        EXPECT(0x26c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0239
        gbc.setState(0x6c6a, 0xa7ca, 0x5ff0, 0x7b00, 0xc5b1, 0xe5eb, 0x0, 0x1);
        gbc.writeMem(0x6c6a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xa7ca, gbc.sp());
        EXPECT(0x6c6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 023A
        gbc.setState(0xe628, 0x5921, 0x640, 0xadc3, 0x7a4d, 0xd8e1, 0x1, 0x1);
        gbc.writeMem(0xe628, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x5921, gbc.sp());
        EXPECT(0xe62a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe628));
        EXPECT(0xcc, gbc.readMem(0xe629));
        // CB CC 023B
        gbc.setState(0xe106, 0xbc8d, 0xc200, 0x3990, 0xd11f, 0x1a7f, 0x1, 0x1);
        gbc.writeMem(0xe106, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xbc8d, gbc.sp());
        EXPECT(0xe108, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe106));
        EXPECT(0xcc, gbc.readMem(0xe107));
        // CB CC 023C
        gbc.setState(0xe145, 0xefdd, 0x1090, 0x35a, 0x1277, 0x2fd2, 0x0, 0x0);
        gbc.writeMem(0xe145, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xefdd, gbc.sp());
        EXPECT(0xe147, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe145));
        EXPECT(0xcc, gbc.readMem(0xe146));
        // CB CC 023D
        gbc.setState(0x58be, 0x21d7, 0xb5a0, 0xbdbc, 0xdc9a, 0x261d, 0x0, 0x1);
        gbc.writeMem(0x58be, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x21d7, gbc.sp());
        EXPECT(0x58c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 023E
        gbc.setState(0x43c, 0x236b, 0x84e0, 0x6902, 0xea66, 0x8670, 0x1, 0x0);
        gbc.writeMem(0x43c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x236b, gbc.sp());
        EXPECT(0x43e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 023F
        gbc.setState(0x288a, 0xaf8e, 0x2090, 0x1573, 0xafbd, 0x5ca7, 0x0, 0x1);
        gbc.writeMem(0x288a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xaf8e, gbc.sp());
        EXPECT(0x288c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0240
        gbc.setState(0xa51c, 0x2f77, 0xd250, 0x9ebe, 0xb4b3, 0x4d1b, 0x1, 0x0);
        gbc.writeMem(0xa51c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x2f77, gbc.sp());
        EXPECT(0xa51e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa51c));
        EXPECT(0xcc, gbc.readMem(0xa51d));
        // CB CC 0242
        gbc.setState(0xe5a0, 0x82b7, 0xab40, 0x97dd, 0xd69d, 0xf185, 0x1, 0x0);
        gbc.writeMem(0xe5a0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x82b7, gbc.sp());
        EXPECT(0xe5a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5a0));
        EXPECT(0xcc, gbc.readMem(0xe5a1));
        // CB CC 0243
        gbc.setState(0x3a96, 0x32e9, 0x4080, 0x299c, 0x8e0d, 0x6b46, 0x0, 0x1);
        gbc.writeMem(0x3a96, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x32e9, gbc.sp());
        EXPECT(0x3a98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0244
        gbc.setState(0x9fc7, 0x3454, 0xde10, 0x69f4, 0xc929, 0x3445, 0x1, 0x1);
        gbc.writeMem(0x9fc7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x3454, gbc.sp());
        EXPECT(0x9fc9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fc7));
        EXPECT(0xcc, gbc.readMem(0x9fc8));
        // CB CC 0245
        gbc.setState(0xa5fc, 0xc37e, 0x1a60, 0x7e87, 0x2758, 0x56a2, 0x0, 0x0);
        gbc.writeMem(0xa5fc, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xc37e, gbc.sp());
        EXPECT(0xa5fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5fc));
        EXPECT(0xcc, gbc.readMem(0xa5fd));
        // CB CC 0246
        gbc.setState(0x1383, 0x7c1, 0x6d70, 0x1bc5, 0x598f, 0x19d5, 0x1, 0x1);
        gbc.writeMem(0x1383, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x7c1, gbc.sp());
        EXPECT(0x1385, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0247
        gbc.setState(0x7f5c, 0x3d0a, 0xc250, 0x5c34, 0xa3b8, 0xfcfd, 0x1, 0x1);
        gbc.writeMem(0x7f5c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x3d0a, gbc.sp());
        EXPECT(0x7f5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0248
        gbc.setState(0xe0a3, 0x6ad4, 0x7d80, 0x8a07, 0xedba, 0xbe2b, 0x0, 0x0);
        gbc.writeMem(0xe0a3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x6ad4, gbc.sp());
        EXPECT(0xe0a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0a3));
        EXPECT(0xcc, gbc.readMem(0xe0a4));
        // CB CC 0249
        gbc.setState(0x3806, 0x300f, 0x8f10, 0xd055, 0x998a, 0x8ad4, 0x0, 0x1);
        gbc.writeMem(0x3806, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x300f, gbc.sp());
        EXPECT(0x3808, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 024A
        gbc.setState(0xa91f, 0xbc8a, 0x15c0, 0x3459, 0xfd6b, 0xf640, 0x0, 0x1);
        gbc.writeMem(0xa91f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xbc8a, gbc.sp());
        EXPECT(0xa921, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa91f));
        EXPECT(0xcc, gbc.readMem(0xa920));
        // CB CC 024B
        gbc.setState(0x30b8, 0xc4d9, 0xd350, 0x2667, 0xa8e7, 0x4045, 0x1, 0x1);
        gbc.writeMem(0x30b8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xc4d9, gbc.sp());
        EXPECT(0x30ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 024C
        gbc.setState(0x5930, 0x2103, 0x5ed0, 0x9e50, 0x7041, 0x346d, 0x1, 0x1);
        gbc.writeMem(0x5930, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x2103, gbc.sp());
        EXPECT(0x5932, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 024D
        gbc.setState(0x4566, 0x500a, 0xfcb0, 0x9a4b, 0x67b9, 0x8b03, 0x1, 0x1);
        gbc.writeMem(0x4566, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x500a, gbc.sp());
        EXPECT(0x4568, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 024E
        gbc.setState(0xa043, 0x1a5, 0xdf00, 0x8219, 0xc459, 0x913b, 0x0, 0x0);
        gbc.writeMem(0xa043, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x1a5, gbc.sp());
        EXPECT(0xa045, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa043));
        EXPECT(0xcc, gbc.readMem(0xa044));
        // CB CC 024F
        gbc.setState(0x5fb, 0x2b95, 0x4330, 0x6891, 0xf98a, 0x4739, 0x0, 0x1);
        gbc.writeMem(0x5fb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x2b95, gbc.sp());
        EXPECT(0x5fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0250
        gbc.setState(0x6716, 0x4e8d, 0xd140, 0xfd6d, 0x59e2, 0x9e1e, 0x0, 0x0);
        gbc.writeMem(0x6716, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x4e8d, gbc.sp());
        EXPECT(0x6718, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0251
        gbc.setState(0x4edf, 0x8c98, 0x7140, 0xd7be, 0xf485, 0x3ec5, 0x1, 0x1);
        gbc.writeMem(0x4edf, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x8c98, gbc.sp());
        EXPECT(0x4ee1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0252
        gbc.setState(0x70f7, 0x1cc9, 0x6f00, 0x9a22, 0x9b00, 0x1a67, 0x1, 0x0);
        gbc.writeMem(0x70f7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x1cc9, gbc.sp());
        EXPECT(0x70f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0253
        gbc.setState(0xc06f, 0x1c9d, 0xb5a0, 0x178a, 0x38ca, 0x5c04, 0x0, 0x0);
        gbc.writeMem(0xc06f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x1c9d, gbc.sp());
        EXPECT(0xc071, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc06f));
        EXPECT(0xcc, gbc.readMem(0xc070));
        // CB CC 0254
        gbc.setState(0x41ba, 0x217a, 0x7fe0, 0xe201, 0x9136, 0x30cd, 0x0, 0x0);
        gbc.writeMem(0x41ba, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x217a, gbc.sp());
        EXPECT(0x41bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0255
        gbc.setState(0xbead, 0xa1e9, 0xb100, 0x9ec7, 0xef70, 0xf942, 0x1, 0x0);
        gbc.writeMem(0xbead, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xa1e9, gbc.sp());
        EXPECT(0xbeaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbead));
        EXPECT(0xcc, gbc.readMem(0xbeae));
        // CB CC 0256
        gbc.setState(0x5a7f, 0xe373, 0x6140, 0x1413, 0x8b3e, 0xda23, 0x0, 0x0);
        gbc.writeMem(0x5a7f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xe373, gbc.sp());
        EXPECT(0x5a81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0257
        gbc.setState(0xabd6, 0x38a0, 0x1650, 0xb9e8, 0x672, 0xda9b, 0x1, 0x1);
        gbc.writeMem(0xabd6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x38a0, gbc.sp());
        EXPECT(0xabd8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabd6));
        EXPECT(0xcc, gbc.readMem(0xabd7));
        // CB CC 0258
        gbc.setState(0x85f5, 0xb341, 0x97c0, 0xf1f0, 0x88f5, 0xe6b3, 0x0, 0x0);
        gbc.writeMem(0x85f5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xb341, gbc.sp());
        EXPECT(0x85f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85f5));
        EXPECT(0xcc, gbc.readMem(0x85f6));
        // CB CC 0259
        gbc.setState(0x3820, 0x9e0d, 0xe2e0, 0x9fca, 0x40cb, 0x73e, 0x0, 0x1);
        gbc.writeMem(0x3820, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x9e0d, gbc.sp());
        EXPECT(0x3822, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 025A
        gbc.setState(0x57a4, 0x5222, 0x6d90, 0x5723, 0x9d17, 0x61c9, 0x0, 0x1);
        gbc.writeMem(0x57a4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x5222, gbc.sp());
        EXPECT(0x57a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 025B
        gbc.setState(0xb550, 0xef44, 0x7f70, 0x26c5, 0xae9a, 0xa3e5, 0x0, 0x0);
        gbc.writeMem(0xb550, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xef44, gbc.sp());
        EXPECT(0xb552, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb550));
        EXPECT(0xcc, gbc.readMem(0xb551));
        // CB CC 025C
        gbc.setState(0x24fc, 0x374, 0x3570, 0x4484, 0x8e2b, 0x5bb4, 0x1, 0x0);
        gbc.writeMem(0x24fc, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x374, gbc.sp());
        EXPECT(0x24fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 025D
        gbc.setState(0x3e05, 0x66be, 0xae0, 0xfd6, 0x29b9, 0xff9d, 0x0, 0x1);
        gbc.writeMem(0x3e05, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x66be, gbc.sp());
        EXPECT(0x3e07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 025F
        gbc.setState(0x5895, 0xe0a3, 0x2150, 0x6f37, 0xc722, 0xb018, 0x0, 0x0);
        gbc.writeMem(0x5895, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xe0a3, gbc.sp());
        EXPECT(0x5897, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0260
        gbc.setState(0x9973, 0xb6d, 0xdce0, 0xf513, 0x940e, 0xece7, 0x1, 0x1);
        gbc.writeMem(0x9973, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xb6d, gbc.sp());
        EXPECT(0x9975, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9973));
        EXPECT(0xcc, gbc.readMem(0x9974));
        // CB CC 0261
        gbc.setState(0x3019, 0x22fb, 0xc2a0, 0x47d0, 0x91e0, 0xd387, 0x1, 0x1);
        gbc.writeMem(0x3019, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x22fb, gbc.sp());
        EXPECT(0x301b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0262
        gbc.setState(0x9492, 0x871d, 0xd660, 0xe624, 0x8a9b, 0xdd7, 0x0, 0x0);
        gbc.writeMem(0x9492, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x871d, gbc.sp());
        EXPECT(0x9494, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9492));
        EXPECT(0xcc, gbc.readMem(0x9493));
        // CB CC 0263
        gbc.setState(0xa990, 0x73ab, 0x4840, 0xd938, 0x7360, 0x9afc, 0x1, 0x0);
        gbc.writeMem(0xa990, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x73ab, gbc.sp());
        EXPECT(0xa992, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa990));
        EXPECT(0xcc, gbc.readMem(0xa991));
        // CB CC 0264
        gbc.setState(0x9564, 0x9c29, 0x3e30, 0x5e5d, 0x22b4, 0xc355, 0x0, 0x0);
        gbc.writeMem(0x9564, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x9c29, gbc.sp());
        EXPECT(0x9566, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9564));
        EXPECT(0xcc, gbc.readMem(0x9565));
        // CB CC 0265
        gbc.setState(0x2265, 0x8c9, 0x61c0, 0x129e, 0xac2d, 0xa424, 0x0, 0x1);
        gbc.writeMem(0x2265, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x8c9, gbc.sp());
        EXPECT(0x2267, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0266
        gbc.setState(0x865, 0x37f4, 0x700, 0x801, 0xbedc, 0x9ff4, 0x0, 0x1);
        gbc.writeMem(0x865, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x37f4, gbc.sp());
        EXPECT(0x867, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0267
        gbc.setState(0xa223, 0xe383, 0xbed0, 0xf5b5, 0xcb77, 0x4c88, 0x1, 0x0);
        gbc.writeMem(0xa223, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xe383, gbc.sp());
        EXPECT(0xa225, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa223));
        EXPECT(0xcc, gbc.readMem(0xa224));
        // CB CC 0268
        gbc.setState(0x7288, 0x7048, 0xe520, 0x9a87, 0x8516, 0x547f, 0x0, 0x0);
        gbc.writeMem(0x7288, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x7048, gbc.sp());
        EXPECT(0x728a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0269
        gbc.setState(0x79e3, 0x60d, 0xcd70, 0xa3b, 0x70c4, 0x4f76, 0x0, 0x0);
        gbc.writeMem(0x79e3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x60d, gbc.sp());
        EXPECT(0x79e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 026A
        gbc.setState(0xbda2, 0xda24, 0x6c40, 0x5ef5, 0x1112, 0xd967, 0x1, 0x0);
        gbc.writeMem(0xbda2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xda24, gbc.sp());
        EXPECT(0xbda4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbda2));
        EXPECT(0xcc, gbc.readMem(0xbda3));
        // CB CC 026B
        gbc.setState(0x2f42, 0x1d4d, 0xcfc0, 0x4644, 0xb70c, 0xc8a8, 0x0, 0x1);
        gbc.writeMem(0x2f42, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x1d4d, gbc.sp());
        EXPECT(0x2f44, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 026C
        gbc.setState(0x6377, 0x951a, 0xe840, 0x60d5, 0x1287, 0x4bd0, 0x0, 0x1);
        gbc.writeMem(0x6377, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x951a, gbc.sp());
        EXPECT(0x6379, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 026D
        gbc.setState(0x58f8, 0x211d, 0xa560, 0xdba7, 0xc8a5, 0x8de, 0x1, 0x1);
        gbc.writeMem(0x58f8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x211d, gbc.sp());
        EXPECT(0x58fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 026E
        gbc.setState(0x1b7, 0xd790, 0xa750, 0x752d, 0xd62f, 0x4b22, 0x0, 0x1);
        gbc.writeMem(0x1b7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xd790, gbc.sp());
        EXPECT(0x1b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 026F
        gbc.setState(0xec3e, 0x12ca, 0x5b40, 0xc01c, 0x4341, 0x43ad, 0x0, 0x0);
        gbc.writeMem(0xec3e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x12ca, gbc.sp());
        EXPECT(0xec40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec3e));
        EXPECT(0xcc, gbc.readMem(0xec3f));
        // CB CC 0271
        gbc.setState(0x79ba, 0x8bef, 0x88f0, 0xb10, 0xc40a, 0x6c5, 0x1, 0x0);
        gbc.writeMem(0x79ba, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x8bef, gbc.sp());
        EXPECT(0x79bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0272
        gbc.setState(0x7a8b, 0x2a2b, 0xee80, 0xbf34, 0xd0ed, 0x3b49, 0x0, 0x0);
        gbc.writeMem(0x7a8b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x2a2b, gbc.sp());
        EXPECT(0x7a8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0273
        gbc.setState(0x582c, 0xf63e, 0x3e40, 0xf068, 0xfffa, 0x845b, 0x0, 0x1);
        gbc.writeMem(0x582c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xf63e, gbc.sp());
        EXPECT(0x582e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0274
        gbc.setState(0x5d07, 0xbf71, 0x7b10, 0x9d78, 0x9aea, 0xe099, 0x0, 0x0);
        gbc.writeMem(0x5d07, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xbf71, gbc.sp());
        EXPECT(0x5d09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0275
        gbc.setState(0x90f7, 0xc24a, 0xbe60, 0x39a6, 0x5e14, 0xf081, 0x0, 0x1);
        gbc.writeMem(0x90f7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xc24a, gbc.sp());
        EXPECT(0x90f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90f7));
        EXPECT(0xcc, gbc.readMem(0x90f8));
        // CB CC 0277
        gbc.setState(0x9cf4, 0x5224, 0x3c40, 0xa52c, 0xfb8a, 0x3cc3, 0x0, 0x1);
        gbc.writeMem(0x9cf4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x5224, gbc.sp());
        EXPECT(0x9cf6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cf4));
        EXPECT(0xcc, gbc.readMem(0x9cf5));
        // CB CC 0278
        gbc.setState(0x6ade, 0xe6e7, 0xa800, 0x5d33, 0x5c1a, 0xd714, 0x0, 0x1);
        gbc.writeMem(0x6ade, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xe6e7, gbc.sp());
        EXPECT(0x6ae0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0279
        gbc.setState(0x6739, 0x7b9d, 0x2630, 0x8577, 0xfa2, 0xedd2, 0x1, 0x1);
        gbc.writeMem(0x6739, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x7b9d, gbc.sp());
        EXPECT(0x673b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 027A
        gbc.setState(0x5795, 0xd32e, 0x3830, 0xf759, 0x8c58, 0x4df5, 0x1, 0x1);
        gbc.writeMem(0x5795, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xd32e, gbc.sp());
        EXPECT(0x5797, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 027B
        gbc.setState(0x12ff, 0xb6f3, 0x1f0, 0x6a8d, 0xc993, 0x726b, 0x1, 0x0);
        gbc.writeMem(0x12ff, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xb6f3, gbc.sp());
        EXPECT(0x1301, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 027C
        gbc.setState(0xb901, 0x7ee7, 0x21e0, 0x4875, 0x73be, 0xee68, 0x1, 0x1);
        gbc.writeMem(0xb901, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x7ee7, gbc.sp());
        EXPECT(0xb903, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb901));
        EXPECT(0xcc, gbc.readMem(0xb902));
        // CB CC 027D
        gbc.setState(0x71d6, 0x9b8, 0xf430, 0x284f, 0x404a, 0xeba4, 0x0, 0x0);
        gbc.writeMem(0x71d6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x9b8, gbc.sp());
        EXPECT(0x71d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 027E
        gbc.setState(0xad22, 0xe14d, 0x9df0, 0x1a0e, 0x5b84, 0xbd5f, 0x1, 0x0);
        gbc.writeMem(0xad22, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xe14d, gbc.sp());
        EXPECT(0xad24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad22));
        EXPECT(0xcc, gbc.readMem(0xad23));
        // CB CC 027F
        gbc.setState(0xa12d, 0x24e3, 0x1cd0, 0x985, 0x22c1, 0xd4d8, 0x1, 0x0);
        gbc.writeMem(0xa12d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x24e3, gbc.sp());
        EXPECT(0xa12f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa12d));
        EXPECT(0xcc, gbc.readMem(0xa12e));
        // CB CC 0280
        gbc.setState(0xe999, 0xc7e1, 0x2a80, 0x8071, 0x31c2, 0xdba7, 0x1, 0x0);
        gbc.writeMem(0xe999, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xc7e1, gbc.sp());
        EXPECT(0xe99b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe999));
        EXPECT(0xcc, gbc.readMem(0xe99a));
        // CB CC 0281
        gbc.setState(0x99f7, 0x8aac, 0xb870, 0x7230, 0x3765, 0xadda, 0x1, 0x1);
        gbc.writeMem(0x99f7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x8aac, gbc.sp());
        EXPECT(0x99f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99f7));
        EXPECT(0xcc, gbc.readMem(0x99f8));
        // CB CC 0282
        gbc.setState(0xa458, 0xadaa, 0x9cd0, 0x7ec5, 0x70b3, 0x669a, 0x1, 0x0);
        gbc.writeMem(0xa458, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xadaa, gbc.sp());
        EXPECT(0xa45a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa458));
        EXPECT(0xcc, gbc.readMem(0xa459));
        // CB CC 0283
        gbc.setState(0x568a, 0x1960, 0xe70, 0xb065, 0x97f1, 0x2709, 0x0, 0x1);
        gbc.writeMem(0x568a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x1960, gbc.sp());
        EXPECT(0x568c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0284
        gbc.setState(0xeccc, 0xb7dd, 0x67f0, 0xd9a4, 0xe4d1, 0xa1b7, 0x1, 0x1);
        gbc.writeMem(0xeccc, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xb7dd, gbc.sp());
        EXPECT(0xecce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeccc));
        EXPECT(0xcc, gbc.readMem(0xeccd));
        // CB CC 0285
        gbc.setState(0x5cc3, 0x7ca0, 0x3d10, 0xde6, 0x85fe, 0x1f41, 0x1, 0x0);
        gbc.writeMem(0x5cc3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x7ca0, gbc.sp());
        EXPECT(0x5cc5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0286
        gbc.setState(0xccd5, 0x588, 0x62e0, 0x8c8b, 0xe59e, 0xdb97, 0x0, 0x1);
        gbc.writeMem(0xccd5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x588, gbc.sp());
        EXPECT(0xccd7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccd5));
        EXPECT(0xcc, gbc.readMem(0xccd6));
        // CB CC 0287
        gbc.setState(0x4078, 0x3019, 0x69a0, 0x9c3e, 0x64b2, 0xdb95, 0x1, 0x0);
        gbc.writeMem(0x4078, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x3019, gbc.sp());
        EXPECT(0x407a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0288
        gbc.setState(0x5be7, 0xf746, 0xc400, 0xad99, 0x3553, 0x2d7d, 0x1, 0x1);
        gbc.writeMem(0x5be7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xf746, gbc.sp());
        EXPECT(0x5be9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0289
        gbc.setState(0x39be, 0xafcf, 0x110, 0xa405, 0x6426, 0xdc47, 0x0, 0x1);
        gbc.writeMem(0x39be, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xafcf, gbc.sp());
        EXPECT(0x39c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 028A
        gbc.setState(0x2378, 0xe064, 0xc3a0, 0xb655, 0x8f16, 0xe651, 0x0, 0x0);
        gbc.writeMem(0x2378, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xe064, gbc.sp());
        EXPECT(0x237a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 028B
        gbc.setState(0xa84e, 0x7f4a, 0x7900, 0xf22a, 0xa1d6, 0xb359, 0x0, 0x0);
        gbc.writeMem(0xa84e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x7f4a, gbc.sp());
        EXPECT(0xa850, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa84e));
        EXPECT(0xcc, gbc.readMem(0xa84f));
        // CB CC 028C
        gbc.setState(0xdbc4, 0x1c9b, 0xbc20, 0xe671, 0xf6e, 0xb797, 0x1, 0x1);
        gbc.writeMem(0xdbc4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x1c9b, gbc.sp());
        EXPECT(0xdbc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbc4));
        EXPECT(0xcc, gbc.readMem(0xdbc5));
        // CB CC 028E
        gbc.setState(0xf8b, 0x3adb, 0xc30, 0x8b8, 0xe073, 0xb027, 0x0, 0x0);
        gbc.writeMem(0xf8b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x3adb, gbc.sp());
        EXPECT(0xf8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 028F
        gbc.setState(0xbc81, 0xcccd, 0x9f10, 0x27c8, 0x118e, 0x1247, 0x0, 0x0);
        gbc.writeMem(0xbc81, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xcccd, gbc.sp());
        EXPECT(0xbc83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc81));
        EXPECT(0xcc, gbc.readMem(0xbc82));
        // CB CC 0290
        gbc.setState(0xbc50, 0x4e11, 0xed20, 0xd7de, 0x8700, 0x5023, 0x0, 0x1);
        gbc.writeMem(0xbc50, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x4e11, gbc.sp());
        EXPECT(0xbc52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc50));
        EXPECT(0xcc, gbc.readMem(0xbc51));
        // CB CC 0291
        gbc.setState(0x620e, 0x40cb, 0x7f40, 0xf65c, 0x6f87, 0x887d, 0x0, 0x0);
        gbc.writeMem(0x620e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x40cb, gbc.sp());
        EXPECT(0x6210, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0293
        gbc.setState(0xd02d, 0xc5e3, 0x3d90, 0x665e, 0xf83, 0x3c25, 0x0, 0x0);
        gbc.writeMem(0xd02d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xc5e3, gbc.sp());
        EXPECT(0xd02f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd02d));
        EXPECT(0xcc, gbc.readMem(0xd02e));
        // CB CC 0294
        gbc.setState(0x5980, 0x46aa, 0x5330, 0x21aa, 0xc92, 0x4072, 0x0, 0x0);
        gbc.writeMem(0x5980, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x46aa, gbc.sp());
        EXPECT(0x5982, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0295
        gbc.setState(0x7445, 0xcf2c, 0x2810, 0x312c, 0x8800, 0x1090, 0x1, 0x1);
        gbc.writeMem(0x7445, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xcf2c, gbc.sp());
        EXPECT(0x7447, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0296
        gbc.setState(0x4854, 0xa3ae, 0x4150, 0x5520, 0x6258, 0x66c7, 0x1, 0x0);
        gbc.writeMem(0x4854, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xa3ae, gbc.sp());
        EXPECT(0x4856, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0297
        gbc.setState(0x6d86, 0x9cb2, 0xbf80, 0x2b0c, 0x5b40, 0xc1f2, 0x0, 0x1);
        gbc.writeMem(0x6d86, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x9cb2, gbc.sp());
        EXPECT(0x6d88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0299
        gbc.setState(0x8e76, 0xc669, 0xca30, 0x510a, 0x6df6, 0x5409, 0x0, 0x0);
        gbc.writeMem(0x8e76, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xc669, gbc.sp());
        EXPECT(0x8e78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e76));
        EXPECT(0xcc, gbc.readMem(0x8e77));
        // CB CC 029A
        gbc.setState(0x555b, 0x89b8, 0xfe20, 0x163c, 0xbf97, 0x2fe2, 0x1, 0x1);
        gbc.writeMem(0x555b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x89b8, gbc.sp());
        EXPECT(0x555d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 029C
        gbc.setState(0x73d6, 0xdbcb, 0xf770, 0x4227, 0xd50f, 0x7a8d, 0x1, 0x1);
        gbc.writeMem(0x73d6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xdbcb, gbc.sp());
        EXPECT(0x73d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 029D
        gbc.setState(0x248a, 0x9cc2, 0x3c10, 0x1989, 0xdfe3, 0xec76, 0x0, 0x0);
        gbc.writeMem(0x248a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x9cc2, gbc.sp());
        EXPECT(0x248c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 029E
        gbc.setState(0x6d7e, 0xec0e, 0x28a0, 0xedfd, 0x4b08, 0x4c43, 0x0, 0x1);
        gbc.writeMem(0x6d7e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xec0e, gbc.sp());
        EXPECT(0x6d80, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02A0
        gbc.setState(0x24bb, 0x113f, 0x2c70, 0x323f, 0xb3d, 0xa0a7, 0x1, 0x1);
        gbc.writeMem(0x24bb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x113f, gbc.sp());
        EXPECT(0x24bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02A1
        gbc.setState(0x4de2, 0x8203, 0x8a60, 0xa13c, 0x2770, 0x674c, 0x0, 0x0);
        gbc.writeMem(0x4de2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x8203, gbc.sp());
        EXPECT(0x4de4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02A3
        gbc.setState(0x4064, 0x4ed0, 0x6660, 0xf39a, 0xf09c, 0x7be6, 0x0, 0x1);
        gbc.writeMem(0x4064, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x4ed0, gbc.sp());
        EXPECT(0x4066, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02A4
        gbc.setState(0xe73, 0x2c65, 0x2750, 0x6310, 0x6282, 0x66e1, 0x0, 0x0);
        gbc.writeMem(0xe73, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x2c65, gbc.sp());
        EXPECT(0xe75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02A5
        gbc.setState(0xbff4, 0x2edb, 0x3410, 0x1bfd, 0x27a2, 0x7847, 0x1, 0x0);
        gbc.writeMem(0xbff4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x2edb, gbc.sp());
        EXPECT(0xbff6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbff4));
        EXPECT(0xcc, gbc.readMem(0xbff5));
        // CB CC 02A6
        gbc.setState(0x49db, 0xd488, 0x9e70, 0x97d0, 0xdeea, 0xa041, 0x0, 0x1);
        gbc.writeMem(0x49db, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xd488, gbc.sp());
        EXPECT(0x49dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02A7
        gbc.setState(0x4881, 0xc0a, 0xe5e0, 0xb5f9, 0x66df, 0x51b7, 0x0, 0x1);
        gbc.writeMem(0x4881, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xc0a, gbc.sp());
        EXPECT(0x4883, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02A8
        gbc.setState(0x76db, 0x3d5e, 0xb640, 0x9853, 0x245, 0xecf8, 0x1, 0x0);
        gbc.writeMem(0x76db, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x3d5e, gbc.sp());
        EXPECT(0x76dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02A9
        gbc.setState(0x3658, 0x7c06, 0x9100, 0x22cd, 0xa18b, 0x239d, 0x1, 0x1);
        gbc.writeMem(0x3658, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x7c06, gbc.sp());
        EXPECT(0x365a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02AA
        gbc.setState(0xd101, 0x91b1, 0x75d0, 0x3ef1, 0xf7a2, 0x5c0d, 0x1, 0x0);
        gbc.writeMem(0xd101, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x91b1, gbc.sp());
        EXPECT(0xd103, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd101));
        EXPECT(0xcc, gbc.readMem(0xd102));
        // CB CC 02AB
        gbc.setState(0xec4e, 0xa11f, 0xed10, 0xfc0c, 0xe74, 0x58dd, 0x0, 0x1);
        gbc.writeMem(0xec4e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xa11f, gbc.sp());
        EXPECT(0xec50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec4e));
        EXPECT(0xcc, gbc.readMem(0xec4f));
        // CB CC 02AC
        gbc.setState(0xa057, 0x15c6, 0x6ee0, 0x3802, 0x4a99, 0x9bd6, 0x0, 0x0);
        gbc.writeMem(0xa057, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x15c6, gbc.sp());
        EXPECT(0xa059, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa057));
        EXPECT(0xcc, gbc.readMem(0xa058));
        // CB CC 02AD
        gbc.setState(0x36ba, 0x96e9, 0xa0c0, 0xdd46, 0xdb81, 0x9df3, 0x0, 0x1);
        gbc.writeMem(0x36ba, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x96e9, gbc.sp());
        EXPECT(0x36bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02AE
        gbc.setState(0x5b8a, 0x9d13, 0xc910, 0x714b, 0xe18a, 0x6296, 0x0, 0x1);
        gbc.writeMem(0x5b8a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x9d13, gbc.sp());
        EXPECT(0x5b8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02AF
        gbc.setState(0xce52, 0xd573, 0x7de0, 0xdc06, 0x67b9, 0x2a97, 0x0, 0x0);
        gbc.writeMem(0xce52, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xd573, gbc.sp());
        EXPECT(0xce54, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce52));
        EXPECT(0xcc, gbc.readMem(0xce53));
        // CB CC 02B0
        gbc.setState(0xa64e, 0xccc4, 0xae90, 0x73a, 0x9537, 0x9995, 0x0, 0x1);
        gbc.writeMem(0xa64e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xccc4, gbc.sp());
        EXPECT(0xa650, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa64e));
        EXPECT(0xcc, gbc.readMem(0xa64f));
        // CB CC 02B1
        gbc.setState(0xcbb6, 0xf1e5, 0xd4f0, 0xeadc, 0x6825, 0x631c, 0x0, 0x1);
        gbc.writeMem(0xcbb6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xf1e5, gbc.sp());
        EXPECT(0xcbb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbb6));
        EXPECT(0xcc, gbc.readMem(0xcbb7));
        // CB CC 02B2
        gbc.setState(0x5af, 0x73ac, 0xcfd0, 0x46a5, 0xfb7d, 0xb818, 0x0, 0x0);
        gbc.writeMem(0x5af, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x73ac, gbc.sp());
        EXPECT(0x5b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02B3
        gbc.setState(0x3a84, 0x91b8, 0x24e0, 0xf91f, 0x4821, 0x71e6, 0x1, 0x0);
        gbc.writeMem(0x3a84, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x91b8, gbc.sp());
        EXPECT(0x3a86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02B5
        gbc.setState(0x3b18, 0x7b26, 0x6b20, 0xfb, 0xd7a7, 0x1a0a, 0x0, 0x1);
        gbc.writeMem(0x3b18, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x7b26, gbc.sp());
        EXPECT(0x3b1a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02B6
        gbc.setState(0x736e, 0x1138, 0x7100, 0x28b2, 0x1102, 0xe1b3, 0x0, 0x0);
        gbc.writeMem(0x736e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x1138, gbc.sp());
        EXPECT(0x7370, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02B7
        gbc.setState(0x258f, 0x28da, 0x5740, 0x6311, 0xd1c0, 0xa5b4, 0x1, 0x1);
        gbc.writeMem(0x258f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x28da, gbc.sp());
        EXPECT(0x2591, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02B8
        gbc.setState(0x9aad, 0x99fb, 0x2bd0, 0x4725, 0xfefa, 0xa741, 0x0, 0x1);
        gbc.writeMem(0x9aad, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x99fb, gbc.sp());
        EXPECT(0x9aaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9aad));
        EXPECT(0xcc, gbc.readMem(0x9aae));
        // CB CC 02B9
        gbc.setState(0x1ce0, 0x2248, 0x6b30, 0x68e5, 0xdc23, 0x75c0, 0x1, 0x0);
        gbc.writeMem(0x1ce0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x2248, gbc.sp());
        EXPECT(0x1ce2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02BA
        gbc.setState(0xd1af, 0x564a, 0x7ec0, 0xbda, 0x6d2d, 0x9cff, 0x0, 0x0);
        gbc.writeMem(0xd1af, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x564a, gbc.sp());
        EXPECT(0xd1b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1af));
        EXPECT(0xcc, gbc.readMem(0xd1b0));
        // CB CC 02BB
        gbc.setState(0x1335, 0x1afd, 0x4ea0, 0x2123, 0x9bd6, 0x1974, 0x1, 0x0);
        gbc.writeMem(0x1335, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x1afd, gbc.sp());
        EXPECT(0x1337, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02BC
        gbc.setState(0xe5eb, 0x32f5, 0x1050, 0xae2, 0xbbd4, 0x27e4, 0x0, 0x1);
        gbc.writeMem(0xe5eb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x32f5, gbc.sp());
        EXPECT(0xe5ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5eb));
        EXPECT(0xcc, gbc.readMem(0xe5ec));
        // CB CC 02BD
        gbc.setState(0x6c06, 0xb958, 0x2a80, 0x68b5, 0x6c5, 0x4cbd, 0x0, 0x1);
        gbc.writeMem(0x6c06, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xb958, gbc.sp());
        EXPECT(0x6c08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02BF
        gbc.setState(0x1c73, 0x5c9f, 0xa330, 0x29a3, 0xfda6, 0x6aed, 0x0, 0x1);
        gbc.writeMem(0x1c73, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x5c9f, gbc.sp());
        EXPECT(0x1c75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02C1
        gbc.setState(0x4c97, 0x2734, 0xf590, 0xc198, 0x5852, 0x5cae, 0x1, 0x1);
        gbc.writeMem(0x4c97, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x2734, gbc.sp());
        EXPECT(0x4c99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02C2
        gbc.setState(0x2868, 0x4b67, 0x4d00, 0x565, 0xbe03, 0x7072, 0x0, 0x0);
        gbc.writeMem(0x2868, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x4b67, gbc.sp());
        EXPECT(0x286a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02C4
        gbc.setState(0x2e2, 0x3ca7, 0x3a60, 0x72cb, 0xfd35, 0xc69, 0x1, 0x0);
        gbc.writeMem(0x2e2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x3ca7, gbc.sp());
        EXPECT(0x2e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02C5
        gbc.setState(0x5e82, 0xeaa3, 0x2c10, 0x5048, 0x8739, 0xc3e8, 0x0, 0x0);
        gbc.writeMem(0x5e82, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xeaa3, gbc.sp());
        EXPECT(0x5e84, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02C6
        gbc.setState(0x81a3, 0x951d, 0x3f80, 0xb359, 0xfa5, 0x6e04, 0x0, 0x0);
        gbc.writeMem(0x81a3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x951d, gbc.sp());
        EXPECT(0x81a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81a3));
        EXPECT(0xcc, gbc.readMem(0x81a4));
        // CB CC 02C7
        gbc.setState(0xcb04, 0xf6ac, 0xde00, 0x1654, 0xdc4f, 0xa164, 0x1, 0x0);
        gbc.writeMem(0xcb04, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xf6ac, gbc.sp());
        EXPECT(0xcb06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb04));
        EXPECT(0xcc, gbc.readMem(0xcb05));
        // CB CC 02C8
        gbc.setState(0xdcaa, 0xf72d, 0x5ee0, 0x5ee3, 0x67a5, 0xb10d, 0x0, 0x1);
        gbc.writeMem(0xdcaa, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xf72d, gbc.sp());
        EXPECT(0xdcac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcaa));
        EXPECT(0xcc, gbc.readMem(0xdcab));
        // CB CC 02C9
        gbc.setState(0x6d43, 0x756b, 0xece0, 0x2878, 0xc2db, 0xef9c, 0x0, 0x0);
        gbc.writeMem(0x6d43, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x756b, gbc.sp());
        EXPECT(0x6d45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02CA
        gbc.setState(0x2398, 0xfb5e, 0x1e60, 0x2e16, 0xb2d, 0x1b23, 0x0, 0x0);
        gbc.writeMem(0x2398, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xfb5e, gbc.sp());
        EXPECT(0x239a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02CD
        gbc.setState(0x4808, 0x11d, 0xa1a0, 0xac20, 0xc36c, 0x2405, 0x0, 0x1);
        gbc.writeMem(0x4808, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x11d, gbc.sp());
        EXPECT(0x480a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02CE
        gbc.setState(0xd21a, 0xf5b7, 0xa6e0, 0xac91, 0xb97b, 0x8d96, 0x1, 0x1);
        gbc.writeMem(0xd21a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xf5b7, gbc.sp());
        EXPECT(0xd21c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd21a));
        EXPECT(0xcc, gbc.readMem(0xd21b));
        // CB CC 02CF
        gbc.setState(0x699, 0xac6d, 0xbd00, 0xcdd4, 0x9ec8, 0x6681, 0x0, 0x0);
        gbc.writeMem(0x699, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xac6d, gbc.sp());
        EXPECT(0x69b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02D0
        gbc.setState(0x86f7, 0x9d5d, 0x2270, 0x5256, 0x9f50, 0x3d92, 0x1, 0x1);
        gbc.writeMem(0x86f7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x9d5d, gbc.sp());
        EXPECT(0x86f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86f7));
        EXPECT(0xcc, gbc.readMem(0x86f8));
        // CB CC 02D1
        gbc.setState(0xdac1, 0x261, 0xe010, 0xca90, 0x8dab, 0xa3ae, 0x0, 0x0);
        gbc.writeMem(0xdac1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x261, gbc.sp());
        EXPECT(0xdac3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdac1));
        EXPECT(0xcc, gbc.readMem(0xdac2));
        // CB CC 02D2
        gbc.setState(0x231e, 0xf31a, 0xa720, 0x5dbf, 0x1980, 0x7133, 0x1, 0x1);
        gbc.writeMem(0x231e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xf31a, gbc.sp());
        EXPECT(0x2320, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02D3
        gbc.setState(0x6ccf, 0xf0f7, 0x90b0, 0x5d6a, 0x21af, 0x3304, 0x0, 0x0);
        gbc.writeMem(0x6ccf, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xf0f7, gbc.sp());
        EXPECT(0x6cd1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02D4
        gbc.setState(0xc87e, 0x5b57, 0x6600, 0xab5a, 0x125f, 0x8586, 0x0, 0x0);
        gbc.writeMem(0xc87e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x5b57, gbc.sp());
        EXPECT(0xc880, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc87e));
        EXPECT(0xcc, gbc.readMem(0xc87f));
        // CB CC 02D6
        gbc.setState(0xd55a, 0x8415, 0x4bf0, 0xb98d, 0x3578, 0xa062, 0x1, 0x1);
        gbc.writeMem(0xd55a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x8415, gbc.sp());
        EXPECT(0xd55c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd55a));
        EXPECT(0xcc, gbc.readMem(0xd55b));
        // CB CC 02D7
        gbc.setState(0x5e0f, 0x54c1, 0xefa0, 0x9943, 0xe8e, 0x2ca1, 0x0, 0x0);
        gbc.writeMem(0x5e0f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x54c1, gbc.sp());
        EXPECT(0x5e11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02D8
        gbc.setState(0x86a, 0x4edd, 0xcd70, 0x9345, 0x871b, 0x8cf9, 0x0, 0x0);
        gbc.writeMem(0x86a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x4edd, gbc.sp());
        EXPECT(0x86c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02D9
        gbc.setState(0xc9f2, 0x87c3, 0x2500, 0xe56e, 0x2027, 0x1f51, 0x0, 0x1);
        gbc.writeMem(0xc9f2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x87c3, gbc.sp());
        EXPECT(0xc9f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9f2));
        EXPECT(0xcc, gbc.readMem(0xc9f3));
        // CB CC 02DA
        gbc.setState(0x78a5, 0x3428, 0xfb60, 0xecba, 0x2904, 0xdfe, 0x0, 0x0);
        gbc.writeMem(0x78a5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x3428, gbc.sp());
        EXPECT(0x78a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02DB
        gbc.setState(0x7d3b, 0xb31e, 0x13c0, 0xd01c, 0xc2b3, 0xc21c, 0x0, 0x1);
        gbc.writeMem(0x7d3b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xb31e, gbc.sp());
        EXPECT(0x7d3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02DC
        gbc.setState(0xd2e2, 0x34df, 0x46b0, 0x1b19, 0x6b5b, 0xd76a, 0x0, 0x1);
        gbc.writeMem(0xd2e2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x34df, gbc.sp());
        EXPECT(0xd2e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2e2));
        EXPECT(0xcc, gbc.readMem(0xd2e3));
        // CB CC 02DD
        gbc.setState(0x9b31, 0x51a9, 0x8a80, 0xffd4, 0xa2f0, 0x668c, 0x1, 0x0);
        gbc.writeMem(0x9b31, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x51a9, gbc.sp());
        EXPECT(0x9b33, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b31));
        EXPECT(0xcc, gbc.readMem(0x9b32));
        // CB CC 02DE
        gbc.setState(0xa871, 0xcc5d, 0x400, 0xe5db, 0x8d5, 0x4c51, 0x1, 0x1);
        gbc.writeMem(0xa871, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xcc5d, gbc.sp());
        EXPECT(0xa873, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa871));
        EXPECT(0xcc, gbc.readMem(0xa872));
        // CB CC 02DF
        gbc.setState(0x9b1b, 0x32df, 0xcbd0, 0xf7b4, 0xa96a, 0xbd12, 0x0, 0x0);
        gbc.writeMem(0x9b1b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x32df, gbc.sp());
        EXPECT(0x9b1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b1b));
        EXPECT(0xcc, gbc.readMem(0x9b1c));
        // CB CC 02E0
        gbc.setState(0xc287, 0x14e1, 0x5580, 0x9a18, 0x68d4, 0xcb37, 0x0, 0x1);
        gbc.writeMem(0xc287, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x14e1, gbc.sp());
        EXPECT(0xc289, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc287));
        EXPECT(0xcc, gbc.readMem(0xc288));
        // CB CC 02E1
        gbc.setState(0x960d, 0xc259, 0xb480, 0xbfd0, 0x99c8, 0x7975, 0x0, 0x1);
        gbc.writeMem(0x960d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xc259, gbc.sp());
        EXPECT(0x960f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x960d));
        EXPECT(0xcc, gbc.readMem(0x960e));
        // CB CC 02E2
        gbc.setState(0xc8ef, 0xc435, 0xb040, 0x3053, 0x3a8e, 0xe0b3, 0x1, 0x0);
        gbc.writeMem(0xc8ef, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xc435, gbc.sp());
        EXPECT(0xc8f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8ef));
        EXPECT(0xcc, gbc.readMem(0xc8f0));
        // CB CC 02E3
        gbc.setState(0x624d, 0xbd85, 0xe10, 0xcf06, 0x1513, 0x45c5, 0x0, 0x1);
        gbc.writeMem(0x624d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xbd85, gbc.sp());
        EXPECT(0x624f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02E4
        gbc.setState(0x4473, 0xaee4, 0xaf50, 0x6505, 0x11b4, 0x79b4, 0x1, 0x1);
        gbc.writeMem(0x4473, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xaee4, gbc.sp());
        EXPECT(0x4475, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02E5
        gbc.setState(0xd469, 0x87bf, 0xa8e0, 0xd386, 0x5efc, 0xd5b3, 0x0, 0x0);
        gbc.writeMem(0xd469, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x87bf, gbc.sp());
        EXPECT(0xd46b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd469));
        EXPECT(0xcc, gbc.readMem(0xd46a));
        // CB CC 02E6
        gbc.setState(0x2281, 0xb27, 0xb5d0, 0x4dc4, 0x1e57, 0x4727, 0x0, 0x1);
        gbc.writeMem(0x2281, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xb27, gbc.sp());
        EXPECT(0x2283, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02E7
        gbc.setState(0x705b, 0x1ff9, 0xe7f0, 0x918b, 0x4aa, 0x5148, 0x0, 0x1);
        gbc.writeMem(0x705b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x1ff9, gbc.sp());
        EXPECT(0x705d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02E8
        gbc.setState(0x56b7, 0x994a, 0x2190, 0x2aa5, 0x7090, 0xc8e2, 0x1, 0x1);
        gbc.writeMem(0x56b7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x994a, gbc.sp());
        EXPECT(0x56b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02E9
        gbc.setState(0x393e, 0xd394, 0x4bc0, 0xb0e8, 0x840b, 0x4494, 0x0, 0x0);
        gbc.writeMem(0x393e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xd394, gbc.sp());
        EXPECT(0x3940, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02EA
        gbc.setState(0x2212, 0x3aa6, 0xd330, 0x5c40, 0xbe2a, 0x43fd, 0x1, 0x0);
        gbc.writeMem(0x2212, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x3aa6, gbc.sp());
        EXPECT(0x2214, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02EB
        gbc.setState(0x9fab, 0x197f, 0x3280, 0xad05, 0xbf9e, 0xe62, 0x1, 0x0);
        gbc.writeMem(0x9fab, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x197f, gbc.sp());
        EXPECT(0x9fad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fab));
        EXPECT(0xcc, gbc.readMem(0x9fac));
        // CB CC 02EC
        gbc.setState(0x69b5, 0xcff0, 0xf870, 0x26a9, 0xbdeb, 0x99ff, 0x1, 0x1);
        gbc.writeMem(0x69b5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xcff0, gbc.sp());
        EXPECT(0x69b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02ED
        gbc.setState(0x1b4b, 0xf91, 0xccb0, 0xa5d4, 0x6e7a, 0xa8b3, 0x1, 0x0);
        gbc.writeMem(0x1b4b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xf91, gbc.sp());
        EXPECT(0x1b4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02EE
        gbc.setState(0x4f02, 0xd87c, 0x9780, 0x92d, 0x848d, 0x6478, 0x0, 0x1);
        gbc.writeMem(0x4f02, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xd87c, gbc.sp());
        EXPECT(0x4f04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02EF
        gbc.setState(0x28d1, 0xcfd6, 0xc5d0, 0x6569, 0xb48a, 0x97b3, 0x1, 0x1);
        gbc.writeMem(0x28d1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xcfd6, gbc.sp());
        EXPECT(0x28d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02F0
        gbc.setState(0x1051, 0xcd34, 0xe3d0, 0x68, 0xb09a, 0x8269, 0x1, 0x1);
        gbc.writeMem(0x1051, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xcd34, gbc.sp());
        EXPECT(0x1053, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02F1
        gbc.setState(0x18e5, 0xc07f, 0xfd50, 0x8272, 0x8797, 0x3b86, 0x0, 0x0);
        gbc.writeMem(0x18e5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xc07f, gbc.sp());
        EXPECT(0x18e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02F2
        gbc.setState(0x54a8, 0xac8d, 0xa380, 0xdef7, 0x547, 0xdf86, 0x1, 0x1);
        gbc.writeMem(0x54a8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xac8d, gbc.sp());
        EXPECT(0x54aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02F3
        gbc.setState(0x901a, 0xdc1b, 0x4690, 0x1280, 0x5773, 0x8d88, 0x1, 0x1);
        gbc.writeMem(0x901a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xdc1b, gbc.sp());
        EXPECT(0x901c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x901a));
        EXPECT(0xcc, gbc.readMem(0x901b));
        // CB CC 02F4
        gbc.setState(0xa3a6, 0xe106, 0xb3e0, 0x5c2b, 0x7a16, 0xe39f, 0x1, 0x1);
        gbc.writeMem(0xa3a6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xe106, gbc.sp());
        EXPECT(0xa3a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3a6));
        EXPECT(0xcc, gbc.readMem(0xa3a7));
        // CB CC 02F5
        gbc.setState(0x5612, 0x36fc, 0xb1d0, 0x582f, 0xd3f0, 0x90fc, 0x1, 0x1);
        gbc.writeMem(0x5612, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x36fc, gbc.sp());
        EXPECT(0x5614, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02F6
        gbc.setState(0xe173, 0xd749, 0x7f10, 0x5555, 0x257a, 0xa0da, 0x1, 0x0);
        gbc.writeMem(0xe173, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xd749, gbc.sp());
        EXPECT(0xe175, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe173));
        EXPECT(0xcc, gbc.readMem(0xe174));
        // CB CC 02F7
        gbc.setState(0x903a, 0x3234, 0x85e0, 0x1106, 0xed33, 0xd89d, 0x1, 0x1);
        gbc.writeMem(0x903a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x3234, gbc.sp());
        EXPECT(0x903c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x903a));
        EXPECT(0xcc, gbc.readMem(0x903b));
        // CB CC 02F8
        gbc.setState(0x30e4, 0x8d21, 0xb7f0, 0x9b76, 0xdc82, 0xf005, 0x1, 0x0);
        gbc.writeMem(0x30e4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x8d21, gbc.sp());
        EXPECT(0x30e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02F9
        gbc.setState(0x2e6f, 0x3d7d, 0x8550, 0x2f01, 0x8963, 0x2461, 0x0, 0x1);
        gbc.writeMem(0x2e6f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x3d7d, gbc.sp());
        EXPECT(0x2e71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 02FA
        gbc.setState(0x9e00, 0xa1da, 0x12b0, 0x1635, 0x1cc, 0xce2a, 0x1, 0x1);
        gbc.writeMem(0x9e00, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xa1da, gbc.sp());
        EXPECT(0x9e02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e00));
        EXPECT(0xcc, gbc.readMem(0x9e01));
        // CB CC 02FB
        gbc.setState(0xb47, 0x436c, 0xcee0, 0x9430, 0x3a41, 0xbada, 0x1, 0x0);
        gbc.writeMem(0xb47, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x436c, gbc.sp());
        EXPECT(0xb49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 02FC
        gbc.setState(0xb57a, 0x8430, 0xcac0, 0x29ec, 0x22e9, 0xb1f5, 0x0, 0x1);
        gbc.writeMem(0xb57a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x8430, gbc.sp());
        EXPECT(0xb57c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb57a));
        EXPECT(0xcc, gbc.readMem(0xb57b));
        // CB CC 02FD
        gbc.setState(0x84b3, 0xcdee, 0x78b0, 0x4d4a, 0x6dd5, 0x4120, 0x1, 0x0);
        gbc.writeMem(0x84b3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xcdee, gbc.sp());
        EXPECT(0x84b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84b3));
        EXPECT(0xcc, gbc.readMem(0x84b4));
        // CB CC 02FE
        gbc.setState(0xb64c, 0xa603, 0x48b0, 0x9260, 0x89df, 0x97be, 0x1, 0x1);
        gbc.writeMem(0xb64c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xa603, gbc.sp());
        EXPECT(0xb64e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb64c));
        EXPECT(0xcc, gbc.readMem(0xb64d));
        // CB CC 02FF
        gbc.setState(0xd907, 0xaaec, 0x3ea0, 0x4e8c, 0x3229, 0x6400, 0x1, 0x1);
        gbc.writeMem(0xd907, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xaaec, gbc.sp());
        EXPECT(0xd909, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd907));
        EXPECT(0xcc, gbc.readMem(0xd908));
        // CB CC 0300
        gbc.setState(0x1d1e, 0x6c08, 0x3cb0, 0xcfa7, 0x2cab, 0xa360, 0x1, 0x0);
        gbc.writeMem(0x1d1e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x6c08, gbc.sp());
        EXPECT(0x1d20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0301
        gbc.setState(0xce52, 0xb4f0, 0x8f20, 0x4fad, 0x9ee7, 0x4f7f, 0x0, 0x1);
        gbc.writeMem(0xce52, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xb4f0, gbc.sp());
        EXPECT(0xce54, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce52));
        EXPECT(0xcc, gbc.readMem(0xce53));
        // CB CC 0302
        gbc.setState(0xd38f, 0x8b03, 0xa7d0, 0xe6b2, 0xd3cb, 0xf68e, 0x1, 0x0);
        gbc.writeMem(0xd38f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x8b03, gbc.sp());
        EXPECT(0xd391, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd38f));
        EXPECT(0xcc, gbc.readMem(0xd390));
        // CB CC 0303
        gbc.setState(0x356, 0x4199, 0x7a90, 0x3c05, 0x24e5, 0xb67e, 0x1, 0x0);
        gbc.writeMem(0x356, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x4199, gbc.sp());
        EXPECT(0x358, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0304
        gbc.setState(0x287c, 0xaaaa, 0x86a0, 0x993c, 0x16be, 0x1487, 0x0, 0x0);
        gbc.writeMem(0x287c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xaaaa, gbc.sp());
        EXPECT(0x287e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0305
        gbc.setState(0x699b, 0x6e71, 0xe7a0, 0xbaea, 0x7fbf, 0xe5d0, 0x1, 0x1);
        gbc.writeMem(0x699b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x6e71, gbc.sp());
        EXPECT(0x699d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0306
        gbc.setState(0xa98, 0x881, 0x5f40, 0xf879, 0x8e86, 0x2ccd, 0x0, 0x0);
        gbc.writeMem(0xa98, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x881, gbc.sp());
        EXPECT(0xa9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0307
        gbc.setState(0xbe69, 0xed9b, 0x32f0, 0x48b1, 0xed62, 0xfc99, 0x0, 0x0);
        gbc.writeMem(0xbe69, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xed9b, gbc.sp());
        EXPECT(0xbe6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe69));
        EXPECT(0xcc, gbc.readMem(0xbe6a));
        // CB CC 0308
        gbc.setState(0x5c32, 0x2f55, 0xe250, 0xf0c2, 0x98f1, 0x2821, 0x0, 0x0);
        gbc.writeMem(0x5c32, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x2f55, gbc.sp());
        EXPECT(0x5c34, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 030A
        gbc.setState(0xe760, 0x20a1, 0x5d0, 0xcb21, 0x7826, 0x2959, 0x1, 0x0);
        gbc.writeMem(0xe760, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x20a1, gbc.sp());
        EXPECT(0xe762, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe760));
        EXPECT(0xcc, gbc.readMem(0xe761));
        // CB CC 030B
        gbc.setState(0x35a6, 0x5926, 0xdfd0, 0xa9fa, 0x933b, 0xfb12, 0x0, 0x0);
        gbc.writeMem(0x35a6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x5926, gbc.sp());
        EXPECT(0x35a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 030C
        gbc.setState(0x388a, 0xc62c, 0xf080, 0xace6, 0x13a7, 0x941d, 0x0, 0x1);
        gbc.writeMem(0x388a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xc62c, gbc.sp());
        EXPECT(0x388c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 030D
        gbc.setState(0x9c38, 0x2519, 0x2470, 0x57a6, 0x37ab, 0xcfd0, 0x0, 0x0);
        gbc.writeMem(0x9c38, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x2519, gbc.sp());
        EXPECT(0x9c3a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c38));
        EXPECT(0xcc, gbc.readMem(0x9c39));
        // CB CC 030E
        gbc.setState(0xe2c8, 0x7365, 0x3fa0, 0x4357, 0x2d20, 0xe200, 0x1, 0x1);
        gbc.writeMem(0xe2c8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x7365, gbc.sp());
        EXPECT(0xe2ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2c8));
        EXPECT(0xcc, gbc.readMem(0xe2c9));
        // CB CC 030F
        gbc.setState(0x1e48, 0xbf95, 0x8d0, 0x835a, 0xa7e5, 0x7a19, 0x1, 0x1);
        gbc.writeMem(0x1e48, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xbf95, gbc.sp());
        EXPECT(0x1e4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0310
        gbc.setState(0xe8a, 0x67a0, 0xd230, 0xb18f, 0x3bae, 0x3126, 0x0, 0x1);
        gbc.writeMem(0xe8a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x67a0, gbc.sp());
        EXPECT(0xe8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0311
        gbc.setState(0xd745, 0xba1f, 0x1cd0, 0x8dc1, 0x500c, 0x7447, 0x1, 0x0);
        gbc.writeMem(0xd745, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xba1f, gbc.sp());
        EXPECT(0xd747, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd745));
        EXPECT(0xcc, gbc.readMem(0xd746));
        // CB CC 0312
        gbc.setState(0xb640, 0x98a4, 0x48e0, 0xddb, 0xcdcb, 0x8807, 0x1, 0x0);
        gbc.writeMem(0xb640, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x98a4, gbc.sp());
        EXPECT(0xb642, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb640));
        EXPECT(0xcc, gbc.readMem(0xb641));
        // CB CC 0313
        gbc.setState(0xd6e8, 0x3d6b, 0x4a70, 0x5776, 0xc8ea, 0xa94d, 0x1, 0x0);
        gbc.writeMem(0xd6e8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x3d6b, gbc.sp());
        EXPECT(0xd6ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6e8));
        EXPECT(0xcc, gbc.readMem(0xd6e9));
        // CB CC 0314
        gbc.setState(0x3de4, 0x3269, 0x7050, 0xc4a7, 0xe833, 0xdbca, 0x1, 0x0);
        gbc.writeMem(0x3de4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x3269, gbc.sp());
        EXPECT(0x3de6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0315
        gbc.setState(0xdf2c, 0x26a2, 0x15b0, 0x1f4b, 0xcc33, 0x2452, 0x0, 0x0);
        gbc.writeMem(0xdf2c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x26a2, gbc.sp());
        EXPECT(0xdf2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf2c));
        EXPECT(0xcc, gbc.readMem(0xdf2d));
        // CB CC 0316
        gbc.setState(0xa66, 0x4edb, 0xe0a0, 0x49e3, 0xdeae, 0xa316, 0x0, 0x1);
        gbc.writeMem(0xa66, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x4edb, gbc.sp());
        EXPECT(0xa68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0317
        gbc.setState(0x4078, 0x1a25, 0x1c10, 0x3ec4, 0xa35c, 0xc886, 0x1, 0x1);
        gbc.writeMem(0x4078, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x1a25, gbc.sp());
        EXPECT(0x407a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0318
        gbc.setState(0x1fa0, 0x5e15, 0xfc70, 0x61fa, 0x406, 0x966f, 0x1, 0x0);
        gbc.writeMem(0x1fa0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x5e15, gbc.sp());
        EXPECT(0x1fa2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0319
        gbc.setState(0x4582, 0x3dd7, 0x80f0, 0x9cba, 0x86d9, 0x6e2f, 0x1, 0x1);
        gbc.writeMem(0x4582, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x3dd7, gbc.sp());
        EXPECT(0x4584, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 031A
        gbc.setState(0xda57, 0x2efb, 0x9a70, 0x1a0b, 0x2484, 0x1f7e, 0x0, 0x0);
        gbc.writeMem(0xda57, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x2efb, gbc.sp());
        EXPECT(0xda59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda57));
        EXPECT(0xcc, gbc.readMem(0xda58));
        // CB CC 031B
        gbc.setState(0x42b8, 0x783f, 0xe710, 0x7e22, 0xdb2e, 0xfe32, 0x0, 0x0);
        gbc.writeMem(0x42b8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x783f, gbc.sp());
        EXPECT(0x42ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 031C
        gbc.setState(0xe813, 0xeccc, 0xb690, 0xe6a6, 0x7831, 0xce0f, 0x0, 0x0);
        gbc.writeMem(0xe813, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xeccc, gbc.sp());
        EXPECT(0xe815, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe813));
        EXPECT(0xcc, gbc.readMem(0xe814));
        // CB CC 031D
        gbc.setState(0x82f1, 0x16b7, 0x3f10, 0xe4ae, 0x5a50, 0xaaf5, 0x1, 0x1);
        gbc.writeMem(0x82f1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x16b7, gbc.sp());
        EXPECT(0x82f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82f1));
        EXPECT(0xcc, gbc.readMem(0x82f2));
        // CB CC 031E
        gbc.setState(0x609b, 0x5dd7, 0xc880, 0x90c, 0x1ca2, 0x2c1, 0x1, 0x0);
        gbc.writeMem(0x609b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x5dd7, gbc.sp());
        EXPECT(0x609d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 031F
        gbc.setState(0x37e8, 0x79ae, 0x6ff0, 0xeb3a, 0xdc91, 0xa3b1, 0x0, 0x0);
        gbc.writeMem(0x37e8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x79ae, gbc.sp());
        EXPECT(0x37ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0320
        gbc.setState(0x887c, 0x8cb7, 0xcb00, 0x1f9f, 0xdedc, 0xc9e3, 0x0, 0x1);
        gbc.writeMem(0x887c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x8cb7, gbc.sp());
        EXPECT(0x887e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x887c));
        EXPECT(0xcc, gbc.readMem(0x887d));
        // CB CC 0321
        gbc.setState(0xca74, 0xb8c8, 0xdab0, 0xc586, 0xc947, 0x3741, 0x0, 0x1);
        gbc.writeMem(0xca74, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xb8c8, gbc.sp());
        EXPECT(0xca76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca74));
        EXPECT(0xcc, gbc.readMem(0xca75));
        // CB CC 0322
        gbc.setState(0xb6a6, 0x239e, 0x1360, 0x9b5a, 0x8f90, 0x4d46, 0x1, 0x1);
        gbc.writeMem(0xb6a6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x239e, gbc.sp());
        EXPECT(0xb6a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6a6));
        EXPECT(0xcc, gbc.readMem(0xb6a7));
        // CB CC 0323
        gbc.setState(0xc980, 0x355f, 0x6f0, 0xb46e, 0xe5ce, 0x19a4, 0x1, 0x0);
        gbc.writeMem(0xc980, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x355f, gbc.sp());
        EXPECT(0xc982, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc980));
        EXPECT(0xcc, gbc.readMem(0xc981));
        // CB CC 0324
        gbc.setState(0x8f3f, 0x76e8, 0x5cc0, 0x7893, 0xded9, 0xb854, 0x1, 0x1);
        gbc.writeMem(0x8f3f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x76e8, gbc.sp());
        EXPECT(0x8f41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f3f));
        EXPECT(0xcc, gbc.readMem(0x8f40));
        // CB CC 0325
        gbc.setState(0xee6d, 0x13f5, 0xc3c0, 0xdee, 0x3fa9, 0xb8e1, 0x1, 0x1);
        gbc.writeMem(0xee6d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x13f5, gbc.sp());
        EXPECT(0xee6f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee6d));
        EXPECT(0xcc, gbc.readMem(0xee6e));
        // CB CC 0326
        gbc.setState(0xcf81, 0xa6e9, 0xbff0, 0x30fc, 0x7b3, 0xd105, 0x0, 0x1);
        gbc.writeMem(0xcf81, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xa6e9, gbc.sp());
        EXPECT(0xcf83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf81));
        EXPECT(0xcc, gbc.readMem(0xcf82));
        // CB CC 0327
        gbc.setState(0x2c30, 0x25dc, 0x1d0, 0xcbcb, 0x4fe7, 0xf70e, 0x1, 0x0);
        gbc.writeMem(0x2c30, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x25dc, gbc.sp());
        EXPECT(0x2c32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0328
        gbc.setState(0x2b27, 0xfb6a, 0xe660, 0x1470, 0x1a6a, 0x66b1, 0x1, 0x1);
        gbc.writeMem(0x2b27, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xfb6a, gbc.sp());
        EXPECT(0x2b29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0329
        gbc.setState(0xac9e, 0x59b3, 0xbbc0, 0x8a61, 0x4580, 0x44d0, 0x0, 0x1);
        gbc.writeMem(0xac9e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x59b3, gbc.sp());
        EXPECT(0xaca0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac9e));
        EXPECT(0xcc, gbc.readMem(0xac9f));
        // CB CC 032A
        gbc.setState(0x2d62, 0xcfbd, 0xb20, 0xf8cd, 0xa392, 0x990, 0x1, 0x1);
        gbc.writeMem(0x2d62, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xcfbd, gbc.sp());
        EXPECT(0x2d64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 032B
        gbc.setState(0x357b, 0x943a, 0xb650, 0x8132, 0xaa4b, 0x55ac, 0x0, 0x0);
        gbc.writeMem(0x357b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x943a, gbc.sp());
        EXPECT(0x357d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 032C
        gbc.setState(0x13e5, 0x4caf, 0xc890, 0xd7d3, 0x88ad, 0x42d7, 0x0, 0x0);
        gbc.writeMem(0x13e5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x4caf, gbc.sp());
        EXPECT(0x13e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 032D
        gbc.setState(0x5716, 0x357c, 0x10b0, 0x7b65, 0x818c, 0xb828, 0x0, 0x1);
        gbc.writeMem(0x5716, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x357c, gbc.sp());
        EXPECT(0x5718, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 032E
        gbc.setState(0xcd66, 0x1d69, 0xd570, 0xe277, 0x286a, 0xa831, 0x0, 0x0);
        gbc.writeMem(0xcd66, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x1d69, gbc.sp());
        EXPECT(0xcd68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd66));
        EXPECT(0xcc, gbc.readMem(0xcd67));
        // CB CC 0330
        gbc.setState(0x4034, 0xc35a, 0x9330, 0xf710, 0x2d72, 0x6a2, 0x1, 0x1);
        gbc.writeMem(0x4034, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xc35a, gbc.sp());
        EXPECT(0x4036, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0331
        gbc.setState(0xdde3, 0xe27a, 0x2cf0, 0x721e, 0x8515, 0xb205, 0x0, 0x1);
        gbc.writeMem(0xdde3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xe27a, gbc.sp());
        EXPECT(0xdde5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdde3));
        EXPECT(0xcc, gbc.readMem(0xdde4));
        // CB CC 0332
        gbc.setState(0x6b4e, 0xbfde, 0x440, 0x7ba9, 0x2dc6, 0x9a45, 0x1, 0x1);
        gbc.writeMem(0x6b4e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xbfde, gbc.sp());
        EXPECT(0x6b50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0333
        gbc.setState(0x8530, 0xb09c, 0x71d0, 0x1af7, 0x247b, 0xda03, 0x1, 0x0);
        gbc.writeMem(0x8530, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xb09c, gbc.sp());
        EXPECT(0x8532, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8530));
        EXPECT(0xcc, gbc.readMem(0x8531));
        // CB CC 0335
        gbc.setState(0x1242, 0x62a, 0x7840, 0xa8d5, 0x5859, 0x2989, 0x0, 0x0);
        gbc.writeMem(0x1242, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x62a, gbc.sp());
        EXPECT(0x1244, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0336
        gbc.setState(0xd6d9, 0xcab6, 0xeea0, 0x6199, 0xe7b9, 0xb7df, 0x1, 0x1);
        gbc.writeMem(0xd6d9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xcab6, gbc.sp());
        EXPECT(0xd6db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6d9));
        EXPECT(0xcc, gbc.readMem(0xd6da));
        // CB CC 0337
        gbc.setState(0x81b7, 0x50d2, 0x4110, 0xe27c, 0xb89e, 0xc498, 0x1, 0x0);
        gbc.writeMem(0x81b7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x50d2, gbc.sp());
        EXPECT(0x81b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81b7));
        EXPECT(0xcc, gbc.readMem(0x81b8));
        // CB CC 0338
        gbc.setState(0xb2f6, 0x3613, 0xc120, 0x9fcf, 0xbec3, 0xc722, 0x0, 0x1);
        gbc.writeMem(0xb2f6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x3613, gbc.sp());
        EXPECT(0xb2f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2f6));
        EXPECT(0xcc, gbc.readMem(0xb2f7));
        // CB CC 0339
        gbc.setState(0xd03d, 0xdfb9, 0xa860, 0x10a3, 0x3f3d, 0xe69a, 0x1, 0x0);
        gbc.writeMem(0xd03d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xdfb9, gbc.sp());
        EXPECT(0xd03f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd03d));
        EXPECT(0xcc, gbc.readMem(0xd03e));
        // CB CC 033A
        gbc.setState(0xe925, 0x9518, 0x4f0, 0xffe6, 0x629f, 0x4cb0, 0x0, 0x1);
        gbc.writeMem(0xe925, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x9518, gbc.sp());
        EXPECT(0xe927, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe925));
        EXPECT(0xcc, gbc.readMem(0xe926));
        // CB CC 033B
        gbc.setState(0x4a2a, 0x1dda, 0x9410, 0xf1aa, 0x6823, 0x88c7, 0x0, 0x0);
        gbc.writeMem(0x4a2a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x1dda, gbc.sp());
        EXPECT(0x4a2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 033C
        gbc.setState(0x5dca, 0x2d34, 0xc310, 0xe2c0, 0xacfa, 0x31bf, 0x0, 0x1);
        gbc.writeMem(0x5dca, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x2d34, gbc.sp());
        EXPECT(0x5dcc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 033D
        gbc.setState(0x1c1f, 0xe9e7, 0x5370, 0xc96b, 0x178d, 0xd88e, 0x1, 0x1);
        gbc.writeMem(0x1c1f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xe9e7, gbc.sp());
        EXPECT(0x1c21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 033E
        gbc.setState(0xb170, 0xa0fe, 0xee10, 0xdb22, 0xf3a8, 0xd2ba, 0x0, 0x0);
        gbc.writeMem(0xb170, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xa0fe, gbc.sp());
        EXPECT(0xb172, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb170));
        EXPECT(0xcc, gbc.readMem(0xb171));
        // CB CC 033F
        gbc.setState(0xc5b3, 0x56ab, 0x72b0, 0xdd6f, 0xe499, 0xfa45, 0x0, 0x0);
        gbc.writeMem(0xc5b3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x56ab, gbc.sp());
        EXPECT(0xc5b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5b3));
        EXPECT(0xcc, gbc.readMem(0xc5b4));
        // CB CC 0340
        gbc.setState(0x49f8, 0x80a9, 0x1e30, 0xf6e3, 0x7833, 0xdf62, 0x1, 0x1);
        gbc.writeMem(0x49f8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x80a9, gbc.sp());
        EXPECT(0x49fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0341
        gbc.setState(0x7a3c, 0x123b, 0xff70, 0x2edc, 0x37f1, 0x2e17, 0x0, 0x0);
        gbc.writeMem(0x7a3c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x123b, gbc.sp());
        EXPECT(0x7a3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0342
        gbc.setState(0x5f9, 0x1cf4, 0xefb0, 0x2f21, 0xaf10, 0x8978, 0x1, 0x0);
        gbc.writeMem(0x5f9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x1cf4, gbc.sp());
        EXPECT(0x5fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0343
        gbc.setState(0x4137, 0xb101, 0x4c80, 0x8e09, 0xbd3f, 0x6397, 0x0, 0x0);
        gbc.writeMem(0x4137, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xb101, gbc.sp());
        EXPECT(0x4139, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0344
        gbc.setState(0x693e, 0xb0ea, 0xb230, 0x3f09, 0xb21d, 0x2534, 0x0, 0x0);
        gbc.writeMem(0x693e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xb0ea, gbc.sp());
        EXPECT(0x6940, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0345
        gbc.setState(0x8d3a, 0x73e8, 0x41a0, 0x22e9, 0x92a2, 0x4184, 0x0, 0x0);
        gbc.writeMem(0x8d3a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x73e8, gbc.sp());
        EXPECT(0x8d3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d3a));
        EXPECT(0xcc, gbc.readMem(0x8d3b));
        // CB CC 0346
        gbc.setState(0x597f, 0x1363, 0xe830, 0xeda5, 0xb096, 0x4cd0, 0x0, 0x0);
        gbc.writeMem(0x597f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x1363, gbc.sp());
        EXPECT(0x5981, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0348
        gbc.setState(0x4793, 0x49a0, 0xbdd0, 0x7767, 0xfb52, 0x33a6, 0x1, 0x0);
        gbc.writeMem(0x4793, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x49a0, gbc.sp());
        EXPECT(0x4795, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0349
        gbc.setState(0x3962, 0xd4eb, 0x9c70, 0x1695, 0xfa4e, 0xdaa1, 0x1, 0x1);
        gbc.writeMem(0x3962, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xd4eb, gbc.sp());
        EXPECT(0x3964, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 034A
        gbc.setState(0xd4ce, 0x354e, 0x10f0, 0x2198, 0x83fa, 0xb4ed, 0x0, 0x1);
        gbc.writeMem(0xd4ce, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x354e, gbc.sp());
        EXPECT(0xd4d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4ce));
        EXPECT(0xcc, gbc.readMem(0xd4cf));
        // CB CC 034B
        gbc.setState(0x5fe3, 0x43e4, 0xa940, 0xf79e, 0x1400, 0x8dc1, 0x1, 0x1);
        gbc.writeMem(0x5fe3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x43e4, gbc.sp());
        EXPECT(0x5fe5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 034C
        gbc.setState(0xdf62, 0xcb1d, 0x5390, 0x62f1, 0xf37a, 0x3432, 0x0, 0x0);
        gbc.writeMem(0xdf62, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xcb1d, gbc.sp());
        EXPECT(0xdf64, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf62));
        EXPECT(0xcc, gbc.readMem(0xdf63));
        // CB CC 034D
        gbc.setState(0x6d91, 0x3e24, 0x36d0, 0x1c50, 0xe6a4, 0xc79f, 0x1, 0x1);
        gbc.writeMem(0x6d91, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x3e24, gbc.sp());
        EXPECT(0x6d93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 034E
        gbc.setState(0x8ea6, 0xfdaf, 0x6c10, 0xed75, 0x9322, 0x4977, 0x0, 0x0);
        gbc.writeMem(0x8ea6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xfdaf, gbc.sp());
        EXPECT(0x8ea8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ea6));
        EXPECT(0xcc, gbc.readMem(0x8ea7));
        // CB CC 034F
        gbc.setState(0x9b0e, 0xac68, 0xcee0, 0x99ee, 0x4e5a, 0x5b06, 0x0, 0x0);
        gbc.writeMem(0x9b0e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xac68, gbc.sp());
        EXPECT(0x9b10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b0e));
        EXPECT(0xcc, gbc.readMem(0x9b0f));
        // CB CC 0350
        gbc.setState(0x20f9, 0xb378, 0x50f0, 0x9d1f, 0x7d0e, 0x487b, 0x0, 0x0);
        gbc.writeMem(0x20f9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xb378, gbc.sp());
        EXPECT(0x20fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0351
        gbc.setState(0x757f, 0x3d76, 0x56e0, 0xd4b2, 0x59ad, 0xfdc7, 0x1, 0x1);
        gbc.writeMem(0x757f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x3d76, gbc.sp());
        EXPECT(0x7581, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0352
        gbc.setState(0x3e, 0x17ed, 0x9490, 0x77d0, 0xe168, 0x4d8, 0x0, 0x0);
        gbc.writeMem(0x3e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x17ed, gbc.sp());
        EXPECT(0x40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0353
        gbc.setState(0xa72e, 0xed35, 0xde90, 0xbb7c, 0x4493, 0x9fe1, 0x0, 0x0);
        gbc.writeMem(0xa72e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xed35, gbc.sp());
        EXPECT(0xa730, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa72e));
        EXPECT(0xcc, gbc.readMem(0xa72f));
        // CB CC 0354
        gbc.setState(0x249b, 0xd42a, 0x9da0, 0xabd8, 0x71f0, 0x7927, 0x1, 0x1);
        gbc.writeMem(0x249b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xd42a, gbc.sp());
        EXPECT(0x249d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0355
        gbc.setState(0x12c0, 0xb343, 0xb370, 0x354c, 0x2871, 0x686a, 0x1, 0x1);
        gbc.writeMem(0x12c0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xb343, gbc.sp());
        EXPECT(0x12c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0356
        gbc.setState(0x1e03, 0xd5ac, 0x4970, 0x5fd2, 0x3d1a, 0xf152, 0x1, 0x0);
        gbc.writeMem(0x1e03, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xd5ac, gbc.sp());
        EXPECT(0x1e05, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0357
        gbc.setState(0x9b8f, 0x8317, 0xb70, 0x126f, 0x8f61, 0x7bd9, 0x0, 0x0);
        gbc.writeMem(0x9b8f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x8317, gbc.sp());
        EXPECT(0x9b91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b8f));
        EXPECT(0xcc, gbc.readMem(0x9b90));
        // CB CC 0358
        gbc.setState(0x713e, 0x94d8, 0x6190, 0x74f3, 0x4692, 0x1462, 0x0, 0x0);
        gbc.writeMem(0x713e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x94d8, gbc.sp());
        EXPECT(0x7140, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0359
        gbc.setState(0xd7b2, 0x9c7b, 0xab00, 0x66bb, 0x5085, 0x51ee, 0x1, 0x1);
        gbc.writeMem(0xd7b2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x9c7b, gbc.sp());
        EXPECT(0xd7b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7b2));
        EXPECT(0xcc, gbc.readMem(0xd7b3));
        // CB CC 035A
        gbc.setState(0x5e6e, 0x6ebf, 0xf4d0, 0x2ed1, 0x72a3, 0xc3b, 0x0, 0x0);
        gbc.writeMem(0x5e6e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x6ebf, gbc.sp());
        EXPECT(0x5e70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 035B
        gbc.setState(0x40, 0x1ba6, 0x29b0, 0x58b4, 0xa939, 0x3f1a, 0x0, 0x0);
        gbc.writeMem(0x40, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x1ba6, gbc.sp());
        EXPECT(0x42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 035C
        gbc.setState(0xc510, 0x96b3, 0x6cd0, 0xfd6f, 0xdf56, 0xe572, 0x0, 0x0);
        gbc.writeMem(0xc510, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x96b3, gbc.sp());
        EXPECT(0xc512, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc510));
        EXPECT(0xcc, gbc.readMem(0xc511));
        // CB CC 035D
        gbc.setState(0x9f61, 0xcabc, 0xa970, 0x85, 0xf5b7, 0x59ac, 0x0, 0x0);
        gbc.writeMem(0x9f61, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xcabc, gbc.sp());
        EXPECT(0x9f63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f61));
        EXPECT(0xcc, gbc.readMem(0x9f62));
        // CB CC 035E
        gbc.setState(0xe982, 0x1c66, 0xbeb0, 0x2ed, 0x53ec, 0xda9e, 0x1, 0x0);
        gbc.writeMem(0xe982, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x1c66, gbc.sp());
        EXPECT(0xe984, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe982));
        EXPECT(0xcc, gbc.readMem(0xe983));
        // CB CC 035F
        gbc.setState(0x697a, 0xdb25, 0xf4d0, 0x71a1, 0x8bd6, 0xab28, 0x1, 0x1);
        gbc.writeMem(0x697a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xdb25, gbc.sp());
        EXPECT(0x697c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0360
        gbc.setState(0x6361, 0xb857, 0xf150, 0x7d9d, 0x7bf1, 0xb90c, 0x1, 0x1);
        gbc.writeMem(0x6361, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xb857, gbc.sp());
        EXPECT(0x6363, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0361
        gbc.setState(0xcd7f, 0x2b76, 0xbd80, 0x47aa, 0xc20, 0xe7c9, 0x0, 0x1);
        gbc.writeMem(0xcd7f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x2b76, gbc.sp());
        EXPECT(0xcd81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd7f));
        EXPECT(0xcc, gbc.readMem(0xcd80));
        // CB CC 0362
        gbc.setState(0xae22, 0x91da, 0xcdd0, 0x1f76, 0xe579, 0x829a, 0x0, 0x1);
        gbc.writeMem(0xae22, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x91da, gbc.sp());
        EXPECT(0xae24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae22));
        EXPECT(0xcc, gbc.readMem(0xae23));
        // CB CC 0363
        gbc.setState(0x8c85, 0xf085, 0xcd0, 0x32b4, 0xb6b, 0x6023, 0x0, 0x1);
        gbc.writeMem(0x8c85, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xf085, gbc.sp());
        EXPECT(0x8c87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c85));
        EXPECT(0xcc, gbc.readMem(0x8c86));
        // CB CC 0364
        gbc.setState(0xd625, 0x85bf, 0xc0b0, 0x3e0e, 0x9f0b, 0xb0b0, 0x1, 0x1);
        gbc.writeMem(0xd625, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x85bf, gbc.sp());
        EXPECT(0xd627, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd625));
        EXPECT(0xcc, gbc.readMem(0xd626));
        // CB CC 0365
        gbc.setState(0xc8ce, 0x246a, 0xe230, 0xebed, 0xf1c0, 0xdaad, 0x1, 0x1);
        gbc.writeMem(0xc8ce, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x246a, gbc.sp());
        EXPECT(0xc8d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8ce));
        EXPECT(0xcc, gbc.readMem(0xc8cf));
        // CB CC 0366
        gbc.setState(0x260c, 0x8387, 0xaf00, 0x2d01, 0xa1e5, 0xcc51, 0x1, 0x1);
        gbc.writeMem(0x260c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x8387, gbc.sp());
        EXPECT(0x260e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0367
        gbc.setState(0x6160, 0x42fe, 0xd390, 0xad91, 0xcc11, 0x85ba, 0x1, 0x1);
        gbc.writeMem(0x6160, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x42fe, gbc.sp());
        EXPECT(0x6162, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0368
        gbc.setState(0x69c6, 0x1563, 0x48e0, 0xfef0, 0x9463, 0xd537, 0x1, 0x1);
        gbc.writeMem(0x69c6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x1563, gbc.sp());
        EXPECT(0x69c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0369
        gbc.setState(0x6557, 0x2d84, 0x2030, 0x5df9, 0x63c8, 0x3e87, 0x1, 0x0);
        gbc.writeMem(0x6557, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x2d84, gbc.sp());
        EXPECT(0x6559, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 036A
        gbc.setState(0xa03d, 0x1672, 0xadb0, 0x8fb0, 0x41, 0xebc8, 0x0, 0x1);
        gbc.writeMem(0xa03d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x1672, gbc.sp());
        EXPECT(0xa03f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa03d));
        EXPECT(0xcc, gbc.readMem(0xa03e));
        // CB CC 036B
        gbc.setState(0xb601, 0x3d55, 0xd150, 0xca2a, 0x94f6, 0xf360, 0x1, 0x0);
        gbc.writeMem(0xb601, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x3d55, gbc.sp());
        EXPECT(0xb603, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb601));
        EXPECT(0xcc, gbc.readMem(0xb602));
        // CB CC 036C
        gbc.setState(0x686c, 0xcf64, 0xbcf0, 0x27e, 0xdc2d, 0xb4c3, 0x1, 0x1);
        gbc.writeMem(0x686c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xcf64, gbc.sp());
        EXPECT(0x686e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 036D
        gbc.setState(0x92b8, 0xd0eb, 0xe080, 0x7d37, 0x3a4d, 0x4277, 0x1, 0x1);
        gbc.writeMem(0x92b8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xd0eb, gbc.sp());
        EXPECT(0x92ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92b8));
        EXPECT(0xcc, gbc.readMem(0x92b9));
        // CB CC 036E
        gbc.setState(0x3b8a, 0x238c, 0xc5f0, 0x96ac, 0xec00, 0xfa5b, 0x0, 0x1);
        gbc.writeMem(0x3b8a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x238c, gbc.sp());
        EXPECT(0x3b8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 036F
        gbc.setState(0x2d41, 0xd35c, 0x24f0, 0xb916, 0x7414, 0xe085, 0x1, 0x1);
        gbc.writeMem(0x2d41, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xd35c, gbc.sp());
        EXPECT(0x2d43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0370
        gbc.setState(0x2ac2, 0xf6a7, 0xc10, 0xd999, 0x6468, 0xab58, 0x0, 0x0);
        gbc.writeMem(0x2ac2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xf6a7, gbc.sp());
        EXPECT(0x2ac4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0371
        gbc.setState(0x8bef, 0x3dea, 0x2d20, 0xf153, 0xcee4, 0xe508, 0x1, 0x0);
        gbc.writeMem(0x8bef, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x3dea, gbc.sp());
        EXPECT(0x8bf1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bef));
        EXPECT(0xcc, gbc.readMem(0x8bf0));
        // CB CC 0372
        gbc.setState(0xe8aa, 0xef70, 0xae40, 0x53d3, 0xe7d0, 0x5209, 0x0, 0x1);
        gbc.writeMem(0xe8aa, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xef70, gbc.sp());
        EXPECT(0xe8ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8aa));
        EXPECT(0xcc, gbc.readMem(0xe8ab));
        // CB CC 0373
        gbc.setState(0xe8de, 0xa8ff, 0x11e0, 0x8553, 0x84fd, 0x4348, 0x1, 0x1);
        gbc.writeMem(0xe8de, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xa8ff, gbc.sp());
        EXPECT(0xe8e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8de));
        EXPECT(0xcc, gbc.readMem(0xe8df));
        // CB CC 0374
        gbc.setState(0xdd4b, 0xa6f0, 0x3cb0, 0x9ea0, 0xd2f0, 0x2486, 0x1, 0x1);
        gbc.writeMem(0xdd4b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xa6f0, gbc.sp());
        EXPECT(0xdd4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd4b));
        EXPECT(0xcc, gbc.readMem(0xdd4c));
        // CB CC 0375
        gbc.setState(0xcb64, 0x6bd9, 0x2140, 0xc69, 0xe006, 0xf8d8, 0x1, 0x1);
        gbc.writeMem(0xcb64, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x6bd9, gbc.sp());
        EXPECT(0xcb66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb64));
        EXPECT(0xcc, gbc.readMem(0xcb65));
        // CB CC 0376
        gbc.setState(0xd4b1, 0xa2eb, 0x1760, 0xa56a, 0xd86b, 0x6c2f, 0x1, 0x0);
        gbc.writeMem(0xd4b1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xa2eb, gbc.sp());
        EXPECT(0xd4b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4b1));
        EXPECT(0xcc, gbc.readMem(0xd4b2));
        // CB CC 0377
        gbc.setState(0x5ced, 0x9faa, 0x3300, 0x619b, 0x1d5b, 0xa6cb, 0x0, 0x1);
        gbc.writeMem(0x5ced, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x9faa, gbc.sp());
        EXPECT(0x5cef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0378
        gbc.setState(0x3f10, 0xe58d, 0xae20, 0x8131, 0xd7f8, 0x24bd, 0x1, 0x0);
        gbc.writeMem(0x3f10, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xe58d, gbc.sp());
        EXPECT(0x3f12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0379
        gbc.setState(0x476f, 0xf0aa, 0x6890, 0x677b, 0x7f5, 0x4f95, 0x0, 0x0);
        gbc.writeMem(0x476f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xf0aa, gbc.sp());
        EXPECT(0x4771, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 037A
        gbc.setState(0x7d56, 0x6740, 0xb3a0, 0xa6b6, 0x57f6, 0x772a, 0x1, 0x1);
        gbc.writeMem(0x7d56, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x6740, gbc.sp());
        EXPECT(0x7d58, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 037B
        gbc.setState(0xed67, 0xa0d, 0x3df0, 0xe211, 0x8a5f, 0x294c, 0x1, 0x0);
        gbc.writeMem(0xed67, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xa0d, gbc.sp());
        EXPECT(0xed69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed67));
        EXPECT(0xcc, gbc.readMem(0xed68));
        // CB CC 037C
        gbc.setState(0x82eb, 0xa159, 0xe4c0, 0xc71e, 0xe267, 0x3a9d, 0x1, 0x1);
        gbc.writeMem(0x82eb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xa159, gbc.sp());
        EXPECT(0x82ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82eb));
        EXPECT(0xcc, gbc.readMem(0x82ec));
        // CB CC 037D
        gbc.setState(0xd932, 0xb4ad, 0x64c0, 0x1a33, 0xd959, 0x5bb5, 0x1, 0x0);
        gbc.writeMem(0xd932, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xb4ad, gbc.sp());
        EXPECT(0xd934, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd932));
        EXPECT(0xcc, gbc.readMem(0xd933));
        // CB CC 037E
        gbc.setState(0x2924, 0x5cf9, 0xaee0, 0x7173, 0xb1f3, 0xaec3, 0x1, 0x1);
        gbc.writeMem(0x2924, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x5cf9, gbc.sp());
        EXPECT(0x2926, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 037F
        gbc.setState(0xa118, 0xc02b, 0x32d0, 0x1b3b, 0xe93, 0xd6ed, 0x1, 0x1);
        gbc.writeMem(0xa118, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xc02b, gbc.sp());
        EXPECT(0xa11a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa118));
        EXPECT(0xcc, gbc.readMem(0xa119));
        // CB CC 0380
        gbc.setState(0xea84, 0xee43, 0xb080, 0xcbff, 0x1e95, 0xff7f, 0x1, 0x1);
        gbc.writeMem(0xea84, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xee43, gbc.sp());
        EXPECT(0xea86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea84));
        EXPECT(0xcc, gbc.readMem(0xea85));
        // CB CC 0382
        gbc.setState(0x3741, 0x547d, 0xab50, 0x745f, 0xec85, 0x5965, 0x0, 0x0);
        gbc.writeMem(0x3741, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x547d, gbc.sp());
        EXPECT(0x3743, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0383
        gbc.setState(0xd4cd, 0x15b6, 0x8c10, 0xdcc2, 0x3eae, 0xe58c, 0x1, 0x0);
        gbc.writeMem(0xd4cd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x15b6, gbc.sp());
        EXPECT(0xd4cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4cd));
        EXPECT(0xcc, gbc.readMem(0xd4ce));
        // CB CC 0384
        gbc.setState(0x31eb, 0xfb92, 0x27e0, 0x165e, 0x96b9, 0xc560, 0x0, 0x1);
        gbc.writeMem(0x31eb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xfb92, gbc.sp());
        EXPECT(0x31ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0385
        gbc.setState(0x31e2, 0x5b2b, 0x3b50, 0xa9e7, 0x800a, 0x5447, 0x1, 0x1);
        gbc.writeMem(0x31e2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x5b2b, gbc.sp());
        EXPECT(0x31e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0386
        gbc.setState(0x68a7, 0xf9ce, 0x21b0, 0xe75, 0x9b29, 0xbde5, 0x1, 0x1);
        gbc.writeMem(0x68a7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xf9ce, gbc.sp());
        EXPECT(0x68a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 0387
        gbc.setState(0xa155, 0x344f, 0x4ae0, 0x47fc, 0xd7c2, 0x8588, 0x0, 0x0);
        gbc.writeMem(0xa155, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x344f, gbc.sp());
        EXPECT(0xa157, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa155));
        EXPECT(0xcc, gbc.readMem(0xa156));
        // CB CC 0389
        gbc.setState(0xbe85, 0x4d08, 0x7940, 0x3d34, 0x6f17, 0x406c, 0x0, 0x0);
        gbc.writeMem(0xbe85, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x4d08, gbc.sp());
        EXPECT(0xbe87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe85));
        EXPECT(0xcc, gbc.readMem(0xbe86));
        // CB CC 038A
        gbc.setState(0xc67, 0xd6a9, 0x2b80, 0xa497, 0x122d, 0xe3e3, 0x0, 0x0);
        gbc.writeMem(0xc67, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xd6a9, gbc.sp());
        EXPECT(0xc69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 038B
        gbc.setState(0x7bbf, 0x737e, 0x8d70, 0x3b57, 0xdbe9, 0xef48, 0x1, 0x0);
        gbc.writeMem(0x7bbf, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x737e, gbc.sp());
        EXPECT(0x7bc1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 038C
        gbc.setState(0x6ef0, 0x2704, 0x6490, 0x39f6, 0x4cfb, 0x3f6d, 0x1, 0x0);
        gbc.writeMem(0x6ef0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x2704, gbc.sp());
        EXPECT(0x6ef2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 038D
        gbc.setState(0xa699, 0xc302, 0x3350, 0x6a75, 0xdb65, 0xff2a, 0x0, 0x0);
        gbc.writeMem(0xa699, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xc302, gbc.sp());
        EXPECT(0xa69b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa699));
        EXPECT(0xcc, gbc.readMem(0xa69a));
        // CB CC 038E
        gbc.setState(0xb7d1, 0xd709, 0x1ff0, 0xb877, 0xff96, 0xb288, 0x0, 0x0);
        gbc.writeMem(0xb7d1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xd709, gbc.sp());
        EXPECT(0xb7d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7d1));
        EXPECT(0xcc, gbc.readMem(0xb7d2));
        // CB CC 038F
        gbc.setState(0xe05a, 0x7f04, 0x98a0, 0xad80, 0xb732, 0x230a, 0x1, 0x1);
        gbc.writeMem(0xe05a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x7f04, gbc.sp());
        EXPECT(0xe05c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe05a));
        EXPECT(0xcc, gbc.readMem(0xe05b));
        // CB CC 0390
        gbc.setState(0xee39, 0x7dd5, 0x6a30, 0x4144, 0x45cf, 0x971b, 0x1, 0x1);
        gbc.writeMem(0xee39, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x7dd5, gbc.sp());
        EXPECT(0xee3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee39));
        EXPECT(0xcc, gbc.readMem(0xee3a));
        // CB CC 0392
        gbc.setState(0x2088, 0x4ca9, 0xb320, 0xc3f8, 0x65f0, 0x1e12, 0x1, 0x0);
        gbc.writeMem(0x2088, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x4ca9, gbc.sp());
        EXPECT(0x208a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0393
        gbc.setState(0xcf32, 0xcdc0, 0x9f00, 0x8021, 0xca97, 0x6845, 0x1, 0x1);
        gbc.writeMem(0xcf32, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xcdc0, gbc.sp());
        EXPECT(0xcf34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf32));
        EXPECT(0xcc, gbc.readMem(0xcf33));
        // CB CC 0394
        gbc.setState(0x36c3, 0x96ab, 0xe140, 0x4fbd, 0x351b, 0x1471, 0x1, 0x1);
        gbc.writeMem(0x36c3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x96ab, gbc.sp());
        EXPECT(0x36c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0396
        gbc.setState(0x10dd, 0xeca1, 0x3be0, 0x45a, 0xdd2, 0xef80, 0x0, 0x1);
        gbc.writeMem(0x10dd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xeca1, gbc.sp());
        EXPECT(0x10df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 0397
        gbc.setState(0xa7f2, 0x44a0, 0x8c0, 0x398, 0x4a0, 0xead, 0x1, 0x1);
        gbc.writeMem(0xa7f2, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x44a0, gbc.sp());
        EXPECT(0xa7f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7f2));
        EXPECT(0xcc, gbc.readMem(0xa7f3));
        // CB CC 0398
        gbc.setState(0xbbf8, 0x18be, 0xd860, 0x9ce1, 0xcc1e, 0xc89c, 0x1, 0x0);
        gbc.writeMem(0xbbf8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x18be, gbc.sp());
        EXPECT(0xbbfa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbf8));
        EXPECT(0xcc, gbc.readMem(0xbbf9));
        // CB CC 0399
        gbc.setState(0xc524, 0xf9ce, 0xc800, 0xd87f, 0x857e, 0x6fc, 0x0, 0x1);
        gbc.writeMem(0xc524, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xf9ce, gbc.sp());
        EXPECT(0xc526, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc524));
        EXPECT(0xcc, gbc.readMem(0xc525));
        // CB CC 039A
        gbc.setState(0xb1a0, 0x98a6, 0xc540, 0x386a, 0x7ab5, 0x66b7, 0x1, 0x1);
        gbc.writeMem(0xb1a0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x98a6, gbc.sp());
        EXPECT(0xb1a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1a0));
        EXPECT(0xcc, gbc.readMem(0xb1a1));
        // CB CC 039B
        gbc.setState(0x8c63, 0xbb, 0xd930, 0x3637, 0x90b4, 0xc000, 0x0, 0x1);
        gbc.writeMem(0x8c63, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xbb, gbc.sp());
        EXPECT(0x8c65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c63));
        EXPECT(0xcc, gbc.readMem(0x8c64));
        // CB CC 039C
        gbc.setState(0x63e9, 0xac0f, 0xdd70, 0xcc77, 0xf04f, 0x864b, 0x0, 0x0);
        gbc.writeMem(0x63e9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xac0f, gbc.sp());
        EXPECT(0x63eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 039D
        gbc.setState(0x6fe4, 0x4596, 0xfc40, 0xeab2, 0x7a8e, 0xe75f, 0x0, 0x1);
        gbc.writeMem(0x6fe4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x4596, gbc.sp());
        EXPECT(0x6fe6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 039E
        gbc.setState(0xb378, 0x710c, 0xd290, 0x423, 0x617d, 0xa73e, 0x1, 0x1);
        gbc.writeMem(0xb378, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x710c, gbc.sp());
        EXPECT(0xb37a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb378));
        EXPECT(0xcc, gbc.readMem(0xb379));
        // CB CC 039F
        gbc.setState(0x35bc, 0x156, 0x7d90, 0x9d5, 0x57d, 0x4935, 0x1, 0x0);
        gbc.writeMem(0x35bc, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x156, gbc.sp());
        EXPECT(0x35be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03A0
        gbc.setState(0x358c, 0xf345, 0x1d80, 0x797b, 0x1edb, 0xe9d3, 0x0, 0x1);
        gbc.writeMem(0x358c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xf345, gbc.sp());
        EXPECT(0x358e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03A1
        gbc.setState(0x26f4, 0xe042, 0xb260, 0xa2ef, 0x60c8, 0x1508, 0x0, 0x0);
        gbc.writeMem(0x26f4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xe042, gbc.sp());
        EXPECT(0x26f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03A2
        gbc.setState(0xdfbf, 0xbd6b, 0x3270, 0x59dc, 0xe016, 0xd53d, 0x0, 0x0);
        gbc.writeMem(0xdfbf, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xbd6b, gbc.sp());
        EXPECT(0xdfc1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfbf));
        EXPECT(0xcc, gbc.readMem(0xdfc0));
        // CB CC 03A3
        gbc.setState(0x7861, 0x389f, 0x2c40, 0x7b3a, 0x2351, 0x82f3, 0x1, 0x1);
        gbc.writeMem(0x7861, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x389f, gbc.sp());
        EXPECT(0x7863, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03A5
        gbc.setState(0xad86, 0xf876, 0xa150, 0x868, 0x101f, 0x940a, 0x1, 0x0);
        gbc.writeMem(0xad86, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xf876, gbc.sp());
        EXPECT(0xad88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad86));
        EXPECT(0xcc, gbc.readMem(0xad87));
        // CB CC 03A6
        gbc.setState(0xbea0, 0xfdc2, 0x2040, 0x5048, 0x6fe4, 0x815d, 0x0, 0x1);
        gbc.writeMem(0xbea0, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xfdc2, gbc.sp());
        EXPECT(0xbea2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbea0));
        EXPECT(0xcc, gbc.readMem(0xbea1));
        // CB CC 03A7
        gbc.setState(0xed45, 0xde36, 0xc220, 0xe166, 0x8a8d, 0x668c, 0x1, 0x1);
        gbc.writeMem(0xed45, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xde36, gbc.sp());
        EXPECT(0xed47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed45));
        EXPECT(0xcc, gbc.readMem(0xed46));
        // CB CC 03A8
        gbc.setState(0x3c3, 0xc3d1, 0x2ea0, 0x73fc, 0x8e78, 0xe589, 0x1, 0x1);
        gbc.writeMem(0x3c3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xc3d1, gbc.sp());
        EXPECT(0x3c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03A9
        gbc.setState(0x176b, 0x2292, 0xd790, 0x28f7, 0x46ef, 0x1926, 0x0, 0x1);
        gbc.writeMem(0x176b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x2292, gbc.sp());
        EXPECT(0x176d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03AB
        gbc.setState(0x2a17, 0x851c, 0xab70, 0xd5e1, 0xf528, 0x108a, 0x1, 0x0);
        gbc.writeMem(0x2a17, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x851c, gbc.sp());
        EXPECT(0x2a19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03AC
        gbc.setState(0x7beb, 0xa4eb, 0xd380, 0x5757, 0xe055, 0x4ac8, 0x0, 0x0);
        gbc.writeMem(0x7beb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xa4eb, gbc.sp());
        EXPECT(0x7bed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03AD
        gbc.setState(0x939a, 0x970a, 0x230, 0xd960, 0x2260, 0xefcc, 0x0, 0x1);
        gbc.writeMem(0x939a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x970a, gbc.sp());
        EXPECT(0x939c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x939a));
        EXPECT(0xcc, gbc.readMem(0x939b));
        // CB CC 03AE
        gbc.setState(0x8e6b, 0xf8c5, 0x2040, 0xd696, 0x94e1, 0x1480, 0x1, 0x1);
        gbc.writeMem(0x8e6b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xf8c5, gbc.sp());
        EXPECT(0x8e6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e6b));
        EXPECT(0xcc, gbc.readMem(0x8e6c));
        // CB CC 03AF
        gbc.setState(0x607, 0x672b, 0xf410, 0xccd6, 0xedb, 0x18c2, 0x1, 0x1);
        gbc.writeMem(0x607, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x672b, gbc.sp());
        EXPECT(0x609, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03B0
        gbc.setState(0x707e, 0xf95c, 0xe520, 0xab1b, 0xa07, 0x2065, 0x1, 0x0);
        gbc.writeMem(0x707e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xf95c, gbc.sp());
        EXPECT(0x7080, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03B1
        gbc.setState(0x6363, 0x49ee, 0x8c40, 0x561f, 0xec3d, 0x8e7a, 0x0, 0x0);
        gbc.writeMem(0x6363, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x49ee, gbc.sp());
        EXPECT(0x6365, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03B2
        gbc.setState(0xcda5, 0x71a7, 0xf5e0, 0xb618, 0xa798, 0xb434, 0x0, 0x1);
        gbc.writeMem(0xcda5, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x71a7, gbc.sp());
        EXPECT(0xcda7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcda5));
        EXPECT(0xcc, gbc.readMem(0xcda6));
        // CB CC 03B3
        gbc.setState(0xd75b, 0xde43, 0x7e20, 0x90f4, 0x10bf, 0xf5b4, 0x0, 0x0);
        gbc.writeMem(0xd75b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xde43, gbc.sp());
        EXPECT(0xd75d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd75b));
        EXPECT(0xcc, gbc.readMem(0xd75c));
        // CB CC 03B4
        gbc.setState(0x1031, 0xfea8, 0x37f0, 0xc189, 0x675a, 0xba03, 0x1, 0x0);
        gbc.writeMem(0x1031, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xfea8, gbc.sp());
        EXPECT(0x1033, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03B5
        gbc.setState(0x10f3, 0xb38d, 0xf8f0, 0x73b3, 0x66f2, 0x413, 0x0, 0x0);
        gbc.writeMem(0x10f3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xb38d, gbc.sp());
        EXPECT(0x10f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03B6
        gbc.setState(0x41bd, 0x7c32, 0x7220, 0x6222, 0x1564, 0x80c9, 0x0, 0x0);
        gbc.writeMem(0x41bd, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x7c32, gbc.sp());
        EXPECT(0x41bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03B7
        gbc.setState(0xa038, 0x1e46, 0xf9e0, 0x717f, 0x276d, 0x9d7c, 0x1, 0x1);
        gbc.writeMem(0xa038, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x1e46, gbc.sp());
        EXPECT(0xa03a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa038));
        EXPECT(0xcc, gbc.readMem(0xa039));
        // CB CC 03B8
        gbc.setState(0x6291, 0x9686, 0x54a0, 0x2038, 0x2231, 0x171f, 0x0, 0x0);
        gbc.writeMem(0x6291, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x9686, gbc.sp());
        EXPECT(0x6293, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03B9
        gbc.setState(0x5e16, 0xa628, 0xd830, 0xc964, 0x6eab, 0x18f0, 0x1, 0x1);
        gbc.writeMem(0x5e16, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xa628, gbc.sp());
        EXPECT(0x5e18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03BA
        gbc.setState(0x3d7c, 0xe79e, 0x8fe0, 0x72a, 0xcf4, 0x304f, 0x1, 0x1);
        gbc.writeMem(0x3d7c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xe79e, gbc.sp());
        EXPECT(0x3d7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03BB
        gbc.setState(0x2bad, 0xb7ed, 0x6ec0, 0x56bb, 0x3cf4, 0xb9a, 0x0, 0x1);
        gbc.writeMem(0x2bad, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xb7ed, gbc.sp());
        EXPECT(0x2baf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03BC
        gbc.setState(0x47d1, 0xaffa, 0xee80, 0xd64b, 0x3b85, 0x5977, 0x0, 0x0);
        gbc.writeMem(0x47d1, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xaffa, gbc.sp());
        EXPECT(0x47d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03BD
        gbc.setState(0xa975, 0x83e, 0x1980, 0x683e, 0xddff, 0x5c8, 0x0, 0x1);
        gbc.writeMem(0xa975, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x83e, gbc.sp());
        EXPECT(0xa977, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa975));
        EXPECT(0xcc, gbc.readMem(0xa976));
        // CB CC 03BE
        gbc.setState(0x77f8, 0xd5a, 0x2440, 0xa38c, 0x42ab, 0x421b, 0x1, 0x0);
        gbc.writeMem(0x77f8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xd5a, gbc.sp());
        EXPECT(0x77fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03BF
        gbc.setState(0x1b1b, 0xef11, 0x9fa0, 0x805e, 0xf071, 0x60d, 0x0, 0x1);
        gbc.writeMem(0x1b1b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xef11, gbc.sp());
        EXPECT(0x1b1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03C0
        gbc.setState(0xcd5a, 0x8f3, 0x6ce0, 0x86e0, 0xad79, 0x3df6, 0x0, 0x1);
        gbc.writeMem(0xcd5a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x8f3, gbc.sp());
        EXPECT(0xcd5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd5a));
        EXPECT(0xcc, gbc.readMem(0xcd5b));
        // CB CC 03C1
        gbc.setState(0x7cd9, 0xd358, 0xc080, 0xc369, 0x1de4, 0xb268, 0x0, 0x0);
        gbc.writeMem(0x7cd9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xd358, gbc.sp());
        EXPECT(0x7cdb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03C2
        gbc.setState(0x7dbb, 0x1770, 0xda70, 0x2e3f, 0x102c, 0x9815, 0x1, 0x1);
        gbc.writeMem(0x7dbb, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x1770, gbc.sp());
        EXPECT(0x7dbd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03C3
        gbc.setState(0x55e, 0xc3a5, 0x8ff0, 0xa750, 0x8f99, 0x8769, 0x0, 0x0);
        gbc.writeMem(0x55e, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xc3a5, gbc.sp());
        EXPECT(0x560, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03C4
        gbc.setState(0xcead, 0xad2e, 0x1120, 0xcbbc, 0x8b17, 0x2b95, 0x0, 0x1);
        gbc.writeMem(0xcead, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xad2e, gbc.sp());
        EXPECT(0xceaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcead));
        EXPECT(0xcc, gbc.readMem(0xceae));
        // CB CC 03C5
        gbc.setState(0xc0e6, 0x867, 0xa790, 0x269, 0x126, 0xf7d5, 0x1, 0x1);
        gbc.writeMem(0xc0e6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x867, gbc.sp());
        EXPECT(0xc0e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0e6));
        EXPECT(0xcc, gbc.readMem(0xc0e7));
        // CB CC 03C6
        gbc.setState(0x1602, 0x2349, 0xa580, 0x3f9a, 0x377c, 0x679d, 0x1, 0x0);
        gbc.writeMem(0x1602, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x2349, gbc.sp());
        EXPECT(0x1604, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03C7
        gbc.setState(0x65b4, 0xe1a3, 0xe3b0, 0x4522, 0x2340, 0xa4f, 0x1, 0x0);
        gbc.writeMem(0x65b4, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xe1a3, gbc.sp());
        EXPECT(0x65b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03C9
        gbc.setState(0xf97, 0xa79c, 0xbfe0, 0x80d8, 0x23b0, 0xfee8, 0x0, 0x1);
        gbc.writeMem(0xf97, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xa79c, gbc.sp());
        EXPECT(0xf99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03CA
        gbc.setState(0x459a, 0x701, 0xb380, 0x9598, 0x4bb3, 0xda6b, 0x1, 0x0);
        gbc.writeMem(0x459a, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x701, gbc.sp());
        EXPECT(0x459c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03CB
        gbc.setState(0xb691, 0x6ccc, 0x83a0, 0xf269, 0x9d, 0x511d, 0x0, 0x1);
        gbc.writeMem(0xb691, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x6ccc, gbc.sp());
        EXPECT(0xb693, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb691));
        EXPECT(0xcc, gbc.readMem(0xb692));
        // CB CC 03CC
        gbc.setState(0x99a6, 0xf98d, 0xf690, 0x7bd6, 0x12a, 0x1c26, 0x0, 0x0);
        gbc.writeMem(0x99a6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xf98d, gbc.sp());
        EXPECT(0x99a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99a6));
        EXPECT(0xcc, gbc.readMem(0x99a7));
        // CB CC 03CD
        gbc.setState(0xe19f, 0x2b02, 0x29e0, 0x8974, 0x9aa, 0x8904, 0x0, 0x1);
        gbc.writeMem(0xe19f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x2b02, gbc.sp());
        EXPECT(0xe1a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe19f));
        EXPECT(0xcc, gbc.readMem(0xe1a0));
        // CB CC 03CE
        gbc.setState(0x34af, 0x997e, 0xb820, 0x8c28, 0xe0a, 0xcd94, 0x1, 0x0);
        gbc.writeMem(0x34af, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x997e, gbc.sp());
        EXPECT(0x34b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03CF
        gbc.setState(0xdd68, 0xc13f, 0x4280, 0xb33d, 0x4bfb, 0xaaf8, 0x1, 0x0);
        gbc.writeMem(0xdd68, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xc13f, gbc.sp());
        EXPECT(0xdd6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd68));
        EXPECT(0xcc, gbc.readMem(0xdd69));
        // CB CC 03D1
        gbc.setState(0x5476, 0x42b0, 0x9150, 0xc124, 0x8810, 0xcc10, 0x1, 0x1);
        gbc.writeMem(0x5476, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x42b0, gbc.sp());
        EXPECT(0x5478, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03D2
        gbc.setState(0xa72d, 0xb511, 0xef80, 0xb1b2, 0xef6, 0x1ed4, 0x0, 0x0);
        gbc.writeMem(0xa72d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xb511, gbc.sp());
        EXPECT(0xa72f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa72d));
        EXPECT(0xcc, gbc.readMem(0xa72e));
        // CB CC 03D3
        gbc.setState(0xe94b, 0xadcb, 0x4e70, 0xc1bd, 0xa82b, 0xbe2c, 0x1, 0x0);
        gbc.writeMem(0xe94b, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xadcb, gbc.sp());
        EXPECT(0xe94d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe94b));
        EXPECT(0xcc, gbc.readMem(0xe94c));
        // CB CC 03D4
        gbc.setState(0xdee8, 0xc001, 0xd810, 0xcebc, 0x1e38, 0x93d3, 0x0, 0x0);
        gbc.writeMem(0xdee8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xc001, gbc.sp());
        EXPECT(0xdeea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdee8));
        EXPECT(0xcc, gbc.readMem(0xdee9));
        // CB CC 03D5
        gbc.setState(0x4797, 0x138f, 0x1730, 0xb817, 0xb3c7, 0x96dd, 0x0, 0x0);
        gbc.writeMem(0x4797, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x138f, gbc.sp());
        EXPECT(0x4799, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB CC 03D6
        gbc.setState(0xc959, 0x6881, 0x4800, 0x21c2, 0x4c62, 0xe13c, 0x1, 0x0);
        gbc.writeMem(0xc959, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x6881, gbc.sp());
        EXPECT(0xc95b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc959));
        EXPECT(0xcc, gbc.readMem(0xc95a));
        // CB CC 03D7
        gbc.setState(0x4734, 0x94d7, 0x6a40, 0xaabe, 0xc754, 0x29f2, 0x0, 0x0);
        gbc.writeMem(0x4734, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x94d7, gbc.sp());
        EXPECT(0x4736, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03D8
        gbc.setState(0x701f, 0xc61d, 0x7260, 0x1fc8, 0x4211, 0x2d26, 0x0, 0x1);
        gbc.writeMem(0x701f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xc61d, gbc.sp());
        EXPECT(0x7021, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03D9
        gbc.setState(0x7f28, 0x2d0e, 0xfc80, 0x2a83, 0xb3d1, 0x2a5b, 0x1, 0x0);
        gbc.writeMem(0x7f28, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x2d0e, gbc.sp());
        EXPECT(0x7f2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03DA
        gbc.setState(0xb06c, 0x5fa5, 0x66f0, 0x8d01, 0x5e27, 0xf783, 0x1, 0x0);
        gbc.writeMem(0xb06c, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x5fa5, gbc.sp());
        EXPECT(0xb06e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb06c));
        EXPECT(0xcc, gbc.readMem(0xb06d));
        // CB CC 03DB
        gbc.setState(0x87b6, 0x9636, 0x3b60, 0xb7fd, 0x8ff2, 0x2c60, 0x0, 0x0);
        gbc.writeMem(0x87b6, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x9636, gbc.sp());
        EXPECT(0x87b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87b6));
        EXPECT(0xcc, gbc.readMem(0x87b7));
        // CB CC 03DC
        gbc.setState(0xc6ac, 0x5359, 0xa920, 0x34e2, 0x7e6c, 0x9c0b, 0x1, 0x0);
        gbc.writeMem(0xc6ac, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x5359, gbc.sp());
        EXPECT(0xc6ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6ac));
        EXPECT(0xcc, gbc.readMem(0xc6ad));
        // CB CC 03DD
        gbc.setState(0x5fd3, 0x59b4, 0xb0a0, 0x6a46, 0xd23, 0x6fb1, 0x1, 0x0);
        gbc.writeMem(0x5fd3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x59b4, gbc.sp());
        EXPECT(0x5fd5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03DE
        gbc.setState(0x999f, 0x8cd8, 0xf380, 0x3caa, 0x77c8, 0x6f65, 0x0, 0x1);
        gbc.writeMem(0x999f, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x8cd8, gbc.sp());
        EXPECT(0x99a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x999f));
        EXPECT(0xcc, gbc.readMem(0x99a0));
        // CB CC 03DF
        gbc.setState(0x9589, 0x4869, 0xe9f0, 0xf8d0, 0x74b7, 0x9b67, 0x0, 0x1);
        gbc.writeMem(0x9589, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x4869, gbc.sp());
        EXPECT(0x958b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9589));
        EXPECT(0xcc, gbc.readMem(0x958a));
        // CB CC 03E1
        gbc.setState(0xdeb3, 0x1a0e, 0xc250, 0x4bb1, 0x187a, 0xaecf, 0x0, 0x0);
        gbc.writeMem(0xdeb3, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x1a0e, gbc.sp());
        EXPECT(0xdeb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdeb3));
        EXPECT(0xcc, gbc.readMem(0xdeb4));
        // CB CC 03E2
        gbc.setState(0x162d, 0xd671, 0xe460, 0xe74f, 0xa599, 0x4500, 0x1, 0x0);
        gbc.writeMem(0x162d, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xd671, gbc.sp());
        EXPECT(0x162f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03E3
        gbc.setState(0xce41, 0xf674, 0x35f0, 0x19d9, 0x7bd2, 0x6a8c, 0x0, 0x0);
        gbc.writeMem(0xce41, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xf674, gbc.sp());
        EXPECT(0xce43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce41));
        EXPECT(0xcc, gbc.readMem(0xce42));
        // CB CC 03E4
        gbc.setState(0x34c9, 0xf97c, 0x1120, 0x3fc2, 0xe985, 0xddc7, 0x1, 0x1);
        gbc.writeMem(0x34c9, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xf97c, gbc.sp());
        EXPECT(0x34cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB CC 03E5
        gbc.setState(0x95e8, 0x4aab, 0xda50, 0x4553, 0xcd6a, 0x21c7, 0x0, 0x1);
        gbc.writeMem(0x95e8, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x4aab, gbc.sp());
        EXPECT(0x95ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95e8));
        EXPECT(0xcc, gbc.readMem(0x95e9));
        // CB CC 03E6
        gbc.setState(0x9c00, 0xb892, 0xe690, 0x45ab, 0x3d2, 0xcc4c, 0x1, 0x0);
        gbc.writeMem(0x9c00, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xb892, gbc.sp());
        EXPECT(0x9c02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c00));
        EXPECT(0xcc, gbc.readMem(0x9c01));
        // CB CC 03E7
        gbc.setState(0x5ab7, 0x4d98, 0x3850, 0xa1f6, 0x2975, 0xc616, 0x1, 0x1);
        gbc.writeMem(0x5ab7, { 0xcb, 0xcc });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x4d98, gbc.sp());
        EXPECT(0x5ab9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
    }
