    TEST(gbcemu, opcode_cb_40) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 40 0000
        gbc.setState(0xeebd, 0x9ea, 0x5e80, 0x8757, 0x9817, 0x70bb, 0x0, 0x1);
        gbc.writeMem(0xeebd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x9ea, gbc.sp());
        EXPECT(0xeebf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeebd));
        EXPECT(0x40, gbc.readMem(0xeebe));
        // CB 40 0001
        gbc.setState(0x9451, 0x9591, 0x9f90, 0xfd2d, 0xe248, 0x541c, 0x0, 0x0);
        gbc.writeMem(0x9451, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x9591, gbc.sp());
        EXPECT(0x9453, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9451));
        EXPECT(0x40, gbc.readMem(0x9452));
        // CB 40 0002
        gbc.setState(0x2e13, 0xd590, 0x8ae0, 0x907a, 0x617d, 0x5d4a, 0x1, 0x1);
        gbc.writeMem(0x2e13, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xd590, gbc.sp());
        EXPECT(0x2e15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0003
        gbc.setState(0x2dd3, 0xbcc2, 0xa2b0, 0x5d76, 0xe180, 0xf2e, 0x0, 0x1);
        gbc.writeMem(0x2dd3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xbcc2, gbc.sp());
        EXPECT(0x2dd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0004
        gbc.setState(0xacd1, 0xdff5, 0x4a30, 0x5b89, 0x415e, 0xae10, 0x1, 0x1);
        gbc.writeMem(0xacd1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xdff5, gbc.sp());
        EXPECT(0xacd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacd1));
        EXPECT(0x40, gbc.readMem(0xacd2));
        // CB 40 0006
        gbc.setState(0xad6, 0x3004, 0x23e0, 0x100b, 0x1d92, 0xdd7b, 0x1, 0x0);
        gbc.writeMem(0xad6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x3004, gbc.sp());
        EXPECT(0xad8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0007
        gbc.setState(0x40a6, 0x67c8, 0x7420, 0x942f, 0x5edd, 0xbc5e, 0x0, 0x1);
        gbc.writeMem(0x40a6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x67c8, gbc.sp());
        EXPECT(0x40a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0008
        gbc.setState(0xec3e, 0xf0a3, 0x7bc0, 0x34e6, 0x7826, 0x71e5, 0x0, 0x0);
        gbc.writeMem(0xec3e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xf0a3, gbc.sp());
        EXPECT(0xec40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec3e));
        EXPECT(0x40, gbc.readMem(0xec3f));
        // CB 40 0009
        gbc.setState(0x135c, 0x334e, 0x3550, 0x68fb, 0x3585, 0xfccb, 0x1, 0x1);
        gbc.writeMem(0x135c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x334e, gbc.sp());
        EXPECT(0x135e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 000A
        gbc.setState(0x83ea, 0xd5ce, 0xc570, 0x357a, 0xc616, 0xf7ec, 0x0, 0x1);
        gbc.writeMem(0x83ea, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xd5ce, gbc.sp());
        EXPECT(0x83ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83ea));
        EXPECT(0x40, gbc.readMem(0x83eb));
        // CB 40 000B
        gbc.setState(0x1f85, 0xab44, 0x96e0, 0x5213, 0xac9c, 0x4b80, 0x0, 0x1);
        gbc.writeMem(0x1f85, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xab44, gbc.sp());
        EXPECT(0x1f87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 000C
        gbc.setState(0xa5bf, 0xee6b, 0x6900, 0x31da, 0x2daf, 0x3e47, 0x0, 0x0);
        gbc.writeMem(0xa5bf, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xee6b, gbc.sp());
        EXPECT(0xa5c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5bf));
        EXPECT(0x40, gbc.readMem(0xa5c0));
        // CB 40 000D
        gbc.setState(0x18f8, 0xd108, 0x7b60, 0x25c3, 0x3828, 0xfc0e, 0x1, 0x0);
        gbc.writeMem(0x18f8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xd108, gbc.sp());
        EXPECT(0x18fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 000E
        gbc.setState(0x8c67, 0x8740, 0x3d90, 0xa2d4, 0x8ef5, 0xc0c0, 0x1, 0x0);
        gbc.writeMem(0x8c67, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x8740, gbc.sp());
        EXPECT(0x8c69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c67));
        EXPECT(0x40, gbc.readMem(0x8c68));
        // CB 40 000F
        gbc.setState(0x183c, 0xe5d7, 0x2a40, 0x3166, 0x1ab1, 0x8162, 0x0, 0x0);
        gbc.writeMem(0x183c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xe5d7, gbc.sp());
        EXPECT(0x183e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0010
        gbc.setState(0x59df, 0x8db5, 0xad70, 0x5b83, 0xd6c4, 0x3863, 0x0, 0x1);
        gbc.writeMem(0x59df, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x8db5, gbc.sp());
        EXPECT(0x59e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0011
        gbc.setState(0x868c, 0x5e7b, 0xcc90, 0xa99a, 0x26f6, 0x6cd5, 0x0, 0x0);
        gbc.writeMem(0x868c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x5e7b, gbc.sp());
        EXPECT(0x868e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x868c));
        EXPECT(0x40, gbc.readMem(0x868d));
        // CB 40 0012
        gbc.setState(0x6e86, 0x272c, 0x8cd0, 0x2adc, 0xac41, 0x1c01, 0x0, 0x0);
        gbc.writeMem(0x6e86, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x272c, gbc.sp());
        EXPECT(0x6e88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0013
        gbc.setState(0x74aa, 0x5e5, 0xd980, 0x265a, 0xf52f, 0x1cdc, 0x0, 0x0);
        gbc.writeMem(0x74aa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x5e5, gbc.sp());
        EXPECT(0x74ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0014
        gbc.setState(0xef0c, 0x9118, 0x58b0, 0x3d8d, 0x19a4, 0xc25e, 0x1, 0x1);
        gbc.writeMem(0xef0c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x9118, gbc.sp());
        EXPECT(0xef0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef0c));
        EXPECT(0x40, gbc.readMem(0xef0d));
        // CB 40 0015
        gbc.setState(0xcb46, 0x4b23, 0x7a30, 0xa751, 0xccaf, 0x8728, 0x1, 0x0);
        gbc.writeMem(0xcb46, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x4b23, gbc.sp());
        EXPECT(0xcb48, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb46));
        EXPECT(0x40, gbc.readMem(0xcb47));
        // CB 40 0016
        gbc.setState(0x871c, 0x2faa, 0x4890, 0x3978, 0x7f4f, 0xa387, 0x0, 0x1);
        gbc.writeMem(0x871c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x2faa, gbc.sp());
        EXPECT(0x871e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x871c));
        EXPECT(0x40, gbc.readMem(0x871d));
        // CB 40 0017
        gbc.setState(0x5f5a, 0x844b, 0xee90, 0xafc6, 0x82d3, 0x80f7, 0x1, 0x1);
        gbc.writeMem(0x5f5a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x844b, gbc.sp());
        EXPECT(0x5f5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0018
        gbc.setState(0xd3a6, 0x2002, 0x9020, 0x2073, 0x9db3, 0x8832, 0x1, 0x0);
        gbc.writeMem(0xd3a6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x2002, gbc.sp());
        EXPECT(0xd3a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3a6));
        EXPECT(0x40, gbc.readMem(0xd3a7));
        // CB 40 0019
        gbc.setState(0xecad, 0x7f77, 0x13b0, 0x4267, 0xac8d, 0x6717, 0x0, 0x0);
        gbc.writeMem(0xecad, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x7f77, gbc.sp());
        EXPECT(0xecaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecad));
        EXPECT(0x40, gbc.readMem(0xecae));
        // CB 40 001A
        gbc.setState(0x95ad, 0x2acf, 0x10c0, 0x5214, 0x73c6, 0xced, 0x1, 0x1);
        gbc.writeMem(0x95ad, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x2acf, gbc.sp());
        EXPECT(0x95af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95ad));
        EXPECT(0x40, gbc.readMem(0x95ae));
        // CB 40 001B
        gbc.setState(0xadc9, 0x295f, 0xf240, 0xed45, 0xf779, 0xea70, 0x1, 0x0);
        gbc.writeMem(0xadc9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x295f, gbc.sp());
        EXPECT(0xadcb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadc9));
        EXPECT(0x40, gbc.readMem(0xadca));
        // CB 40 001C
        gbc.setState(0x1a35, 0x26cf, 0x8e0, 0x1547, 0x1c55, 0x71b2, 0x0, 0x0);
        gbc.writeMem(0x1a35, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x26cf, gbc.sp());
        EXPECT(0x1a37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 001D
        gbc.setState(0xe971, 0x1396, 0x8fb0, 0x9069, 0xfe54, 0xa83b, 0x0, 0x0);
        gbc.writeMem(0xe971, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x1396, gbc.sp());
        EXPECT(0xe973, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe971));
        EXPECT(0x40, gbc.readMem(0xe972));
        // CB 40 001E
        gbc.setState(0xd202, 0xc111, 0x9120, 0x87, 0x7cf1, 0xfb6b, 0x0, 0x1);
        gbc.writeMem(0xd202, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xc111, gbc.sp());
        EXPECT(0xd204, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd202));
        EXPECT(0x40, gbc.readMem(0xd203));
        // CB 40 001F
        gbc.setState(0x8e38, 0xbdab, 0x5760, 0xa1f1, 0xfa7d, 0x8464, 0x0, 0x0);
        gbc.writeMem(0x8e38, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xbdab, gbc.sp());
        EXPECT(0x8e3a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e38));
        EXPECT(0x40, gbc.readMem(0x8e39));
        // CB 40 0021
        gbc.setState(0xc9ce, 0xfcf0, 0x4720, 0xa2cf, 0x9af9, 0x46bc, 0x1, 0x0);
        gbc.writeMem(0xc9ce, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xfcf0, gbc.sp());
        EXPECT(0xc9d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9ce));
        EXPECT(0x40, gbc.readMem(0xc9cf));
        // CB 40 0022
        gbc.setState(0xd13f, 0x3297, 0x54d0, 0xe0e0, 0x32c6, 0xabf8, 0x1, 0x1);
        gbc.writeMem(0xd13f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x3297, gbc.sp());
        EXPECT(0xd141, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd13f));
        EXPECT(0x40, gbc.readMem(0xd140));
        // CB 40 0023
        gbc.setState(0x7b61, 0x67cd, 0x5710, 0x362e, 0xfbb3, 0x5418, 0x0, 0x0);
        gbc.writeMem(0x7b61, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x67cd, gbc.sp());
        EXPECT(0x7b63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0024
        gbc.setState(0xabf3, 0x304f, 0x3220, 0xb4a8, 0xf2ef, 0x9ebb, 0x1, 0x0);
        gbc.writeMem(0xabf3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x304f, gbc.sp());
        EXPECT(0xabf5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabf3));
        EXPECT(0x40, gbc.readMem(0xabf4));
        // CB 40 0025
        gbc.setState(0xae4b, 0xcfaa, 0x9f20, 0x2186, 0x636a, 0x3073, 0x1, 0x0);
        gbc.writeMem(0xae4b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xcfaa, gbc.sp());
        EXPECT(0xae4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae4b));
        EXPECT(0x40, gbc.readMem(0xae4c));
        // CB 40 0026
        gbc.setState(0xbbca, 0x6350, 0x3d20, 0x42a3, 0x2125, 0x661c, 0x0, 0x0);
        gbc.writeMem(0xbbca, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x6350, gbc.sp());
        EXPECT(0xbbcc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbca));
        EXPECT(0x40, gbc.readMem(0xbbcb));
        // CB 40 0027
        gbc.setState(0xcf42, 0x6399, 0xced0, 0x677c, 0x4ac4, 0x8d0b, 0x1, 0x1);
        gbc.writeMem(0xcf42, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x6399, gbc.sp());
        EXPECT(0xcf44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf42));
        EXPECT(0x40, gbc.readMem(0xcf43));
        // CB 40 0028
        gbc.setState(0x97fa, 0xa9f2, 0x61c0, 0x71fd, 0xccc7, 0x7268, 0x1, 0x1);
        gbc.writeMem(0x97fa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xa9f2, gbc.sp());
        EXPECT(0x97fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97fa));
        EXPECT(0x40, gbc.readMem(0x97fb));
        // CB 40 0029
        gbc.setState(0x1637, 0xe830, 0x7300, 0xfde, 0x7212, 0xa20b, 0x0, 0x1);
        gbc.writeMem(0x1637, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xe830, gbc.sp());
        EXPECT(0x1639, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 002A
        gbc.setState(0xd43a, 0xe585, 0x8400, 0xc769, 0x875b, 0x50d8, 0x0, 0x1);
        gbc.writeMem(0xd43a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xe585, gbc.sp());
        EXPECT(0xd43c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd43a));
        EXPECT(0x40, gbc.readMem(0xd43b));
        // CB 40 002B
        gbc.setState(0x15da, 0xd527, 0x3a70, 0x3217, 0xc70c, 0xea77, 0x0, 0x0);
        gbc.writeMem(0x15da, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xd527, gbc.sp());
        EXPECT(0x15dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 002C
        gbc.setState(0x90af, 0xd046, 0xeb10, 0x804e, 0x369, 0x4b40, 0x1, 0x1);
        gbc.writeMem(0x90af, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xd046, gbc.sp());
        EXPECT(0x90b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90af));
        EXPECT(0x40, gbc.readMem(0x90b0));
        // CB 40 002D
        gbc.setState(0xcee2, 0xbeb0, 0x77b0, 0xc6eb, 0xc74f, 0xee9b, 0x0, 0x0);
        gbc.writeMem(0xcee2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xbeb0, gbc.sp());
        EXPECT(0xcee4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcee2));
        EXPECT(0x40, gbc.readMem(0xcee3));
        // CB 40 002E
        gbc.setState(0x1536, 0x5751, 0x960, 0x829a, 0xdc56, 0xbd3f, 0x0, 0x1);
        gbc.writeMem(0x1536, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x5751, gbc.sp());
        EXPECT(0x1538, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 002F
        gbc.setState(0xa2ba, 0x4b27, 0xca50, 0x7032, 0x2bd2, 0xa2d7, 0x0, 0x1);
        gbc.writeMem(0xa2ba, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x4b27, gbc.sp());
        EXPECT(0xa2bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2ba));
        EXPECT(0x40, gbc.readMem(0xa2bb));
        // CB 40 0030
        gbc.setState(0xb2d1, 0x3b6c, 0xe50, 0xf7de, 0xa5b7, 0x33bb, 0x1, 0x1);
        gbc.writeMem(0xb2d1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x3b6c, gbc.sp());
        EXPECT(0xb2d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2d1));
        EXPECT(0x40, gbc.readMem(0xb2d2));
        // CB 40 0031
        gbc.setState(0xb0a7, 0x714b, 0xcfb0, 0x6198, 0x66f, 0x2c2f, 0x0, 0x1);
        gbc.writeMem(0xb0a7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x714b, gbc.sp());
        EXPECT(0xb0a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0a7));
        EXPECT(0x40, gbc.readMem(0xb0a8));
        // CB 40 0032
        gbc.setState(0xe915, 0xaae0, 0xe7f0, 0xc2c1, 0x5980, 0xb9ae, 0x1, 0x1);
        gbc.writeMem(0xe915, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xaae0, gbc.sp());
        EXPECT(0xe917, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe915));
        EXPECT(0x40, gbc.readMem(0xe916));
        // CB 40 0033
        gbc.setState(0x2197, 0x1ab9, 0x14d0, 0x5854, 0x61df, 0x655a, 0x0, 0x0);
        gbc.writeMem(0x2197, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x1ab9, gbc.sp());
        EXPECT(0x2199, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0034
        gbc.setState(0xb46f, 0xb681, 0x7830, 0xdacc, 0x3782, 0x89fd, 0x0, 0x1);
        gbc.writeMem(0xb46f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xb681, gbc.sp());
        EXPECT(0xb471, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb46f));
        EXPECT(0x40, gbc.readMem(0xb470));
        // CB 40 0035
        gbc.setState(0xd9be, 0xbf32, 0x1fb0, 0x3b1, 0x82df, 0xa73d, 0x1, 0x0);
        gbc.writeMem(0xd9be, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xbf32, gbc.sp());
        EXPECT(0xd9c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9be));
        EXPECT(0x40, gbc.readMem(0xd9bf));
        // CB 40 0036
        gbc.setState(0xa7d0, 0x1e20, 0xce90, 0xb6aa, 0xb4eb, 0x2655, 0x1, 0x1);
        gbc.writeMem(0xa7d0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x1e20, gbc.sp());
        EXPECT(0xa7d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7d0));
        EXPECT(0x40, gbc.readMem(0xa7d1));
        // CB 40 0037
        gbc.setState(0x6ad4, 0x1e53, 0x26e0, 0x6398, 0x8f84, 0x272, 0x1, 0x0);
        gbc.writeMem(0x6ad4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x1e53, gbc.sp());
        EXPECT(0x6ad6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0038
        gbc.setState(0xb17e, 0xce3b, 0xcb40, 0x541b, 0x5dec, 0x11f8, 0x0, 0x1);
        gbc.writeMem(0xb17e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xce3b, gbc.sp());
        EXPECT(0xb180, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb17e));
        EXPECT(0x40, gbc.readMem(0xb17f));
        // CB 40 0039
        gbc.setState(0xbd8, 0xc165, 0x4cf0, 0x9633, 0xfd5f, 0x5d9b, 0x0, 0x1);
        gbc.writeMem(0xbd8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xc165, gbc.sp());
        EXPECT(0xbda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 003A
        gbc.setState(0x935f, 0x4571, 0xaf20, 0x9722, 0x4ff0, 0x76a, 0x1, 0x0);
        gbc.writeMem(0x935f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x4571, gbc.sp());
        EXPECT(0x9361, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x935f));
        EXPECT(0x40, gbc.readMem(0x9360));
        // CB 40 003B
        gbc.setState(0xe6d3, 0xcc9d, 0x65f0, 0x5049, 0x6e72, 0x3b17, 0x0, 0x1);
        gbc.writeMem(0xe6d3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xcc9d, gbc.sp());
        EXPECT(0xe6d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6d3));
        EXPECT(0x40, gbc.readMem(0xe6d4));
        // CB 40 003C
        gbc.setState(0x2b63, 0x9499, 0x7150, 0xd656, 0x8584, 0xbd64, 0x0, 0x0);
        gbc.writeMem(0x2b63, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x9499, gbc.sp());
        EXPECT(0x2b65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 003D
        gbc.setState(0x8695, 0xd608, 0x7ee0, 0x1142, 0x9d54, 0xa8c, 0x1, 0x0);
        gbc.writeMem(0x8695, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xd608, gbc.sp());
        EXPECT(0x8697, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8695));
        EXPECT(0x40, gbc.readMem(0x8696));
        // CB 40 003E
        gbc.setState(0x8961, 0x91ba, 0x9a80, 0xaf9f, 0xdb71, 0xe6ef, 0x1, 0x0);
        gbc.writeMem(0x8961, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x91ba, gbc.sp());
        EXPECT(0x8963, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8961));
        EXPECT(0x40, gbc.readMem(0x8962));
        // CB 40 003F
        gbc.setState(0x2c7c, 0x6a2d, 0x5460, 0xc37b, 0x1002, 0x2929, 0x1, 0x1);
        gbc.writeMem(0x2c7c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x6a2d, gbc.sp());
        EXPECT(0x2c7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0040
        gbc.setState(0x98f6, 0x7bc, 0x8b10, 0xb78a, 0xb990, 0x6820, 0x0, 0x0);
        gbc.writeMem(0x98f6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x7bc, gbc.sp());
        EXPECT(0x98f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98f6));
        EXPECT(0x40, gbc.readMem(0x98f7));
        // CB 40 0041
        gbc.setState(0x40ee, 0x2e15, 0x6fc0, 0x4d8a, 0x8da9, 0x7362, 0x0, 0x0);
        gbc.writeMem(0x40ee, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x2e15, gbc.sp());
        EXPECT(0x40f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0042
        gbc.setState(0x8db1, 0x92bc, 0x7e30, 0x5440, 0xd2d8, 0x8f06, 0x1, 0x1);
        gbc.writeMem(0x8db1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x92bc, gbc.sp());
        EXPECT(0x8db3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8db1));
        EXPECT(0x40, gbc.readMem(0x8db2));
        // CB 40 0043
        gbc.setState(0xecc0, 0x8d8c, 0xb090, 0xa97, 0x44cb, 0x9eb3, 0x1, 0x1);
        gbc.writeMem(0xecc0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x8d8c, gbc.sp());
        EXPECT(0xecc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecc0));
        EXPECT(0x40, gbc.readMem(0xecc1));
        // CB 40 0044
        gbc.setState(0xde2d, 0x6adb, 0x6300, 0x45b6, 0xec05, 0x3298, 0x1, 0x0);
        gbc.writeMem(0xde2d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x6adb, gbc.sp());
        EXPECT(0xde2f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde2d));
        EXPECT(0x40, gbc.readMem(0xde2e));
        // CB 40 0045
        gbc.setState(0x712f, 0x2a00, 0x4d80, 0x72cb, 0x1862, 0x3fa4, 0x1, 0x0);
        gbc.writeMem(0x712f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x2a00, gbc.sp());
        EXPECT(0x7131, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0047
        gbc.setState(0x37d3, 0x595d, 0x8870, 0x88b6, 0x6be7, 0xba7b, 0x0, 0x0);
        gbc.writeMem(0x37d3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x595d, gbc.sp());
        EXPECT(0x37d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0048
        gbc.setState(0x250c, 0x508b, 0x7b90, 0xfb26, 0x7e0f, 0x4f48, 0x1, 0x0);
        gbc.writeMem(0x250c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x508b, gbc.sp());
        EXPECT(0x250e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0049
        gbc.setState(0x527a, 0x9a6e, 0xe100, 0x267d, 0x9ffc, 0xd4f1, 0x1, 0x1);
        gbc.writeMem(0x527a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x9a6e, gbc.sp());
        EXPECT(0x527c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 004A
        gbc.setState(0xbc9c, 0xfcfc, 0x7880, 0xacd8, 0xf664, 0xe484, 0x1, 0x1);
        gbc.writeMem(0xbc9c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xfcfc, gbc.sp());
        EXPECT(0xbc9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc9c));
        EXPECT(0x40, gbc.readMem(0xbc9d));
        // CB 40 004C
        gbc.setState(0xb8fe, 0x2bbe, 0x8890, 0xae28, 0x7aee, 0x1a5e, 0x0, 0x1);
        gbc.writeMem(0xb8fe, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x2bbe, gbc.sp());
        EXPECT(0xb900, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8fe));
        EXPECT(0x40, gbc.readMem(0xb8ff));
        // CB 40 004D
        gbc.setState(0xcf73, 0x1331, 0x8d40, 0x7986, 0x99fb, 0xaad7, 0x0, 0x1);
        gbc.writeMem(0xcf73, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x1331, gbc.sp());
        EXPECT(0xcf75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf73));
        EXPECT(0x40, gbc.readMem(0xcf74));
        // CB 40 004E
        gbc.setState(0x9839, 0xd407, 0xcc0, 0xa87a, 0x84b4, 0x6146, 0x1, 0x0);
        gbc.writeMem(0x9839, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xd407, gbc.sp());
        EXPECT(0x983b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9839));
        EXPECT(0x40, gbc.readMem(0x983a));
        // CB 40 004F
        gbc.setState(0xdd85, 0x7cf3, 0x9eb0, 0xe2aa, 0x8d79, 0x47b2, 0x1, 0x1);
        gbc.writeMem(0xdd85, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x7cf3, gbc.sp());
        EXPECT(0xdd87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd85));
        EXPECT(0x40, gbc.readMem(0xdd86));
        // CB 40 0050
        gbc.setState(0x2524, 0x343d, 0x3190, 0x153d, 0xfc7f, 0x27db, 0x1, 0x0);
        gbc.writeMem(0x2524, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x343d, gbc.sp());
        EXPECT(0x2526, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0051
        gbc.setState(0x2e3c, 0xeb74, 0x6080, 0xb7d1, 0xf061, 0x3f21, 0x0, 0x0);
        gbc.writeMem(0x2e3c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xeb74, gbc.sp());
        EXPECT(0x2e3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0052
        gbc.setState(0x2212, 0x4660, 0xd8e0, 0xe793, 0x5ffa, 0x9628, 0x0, 0x0);
        gbc.writeMem(0x2212, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x4660, gbc.sp());
        EXPECT(0x2214, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0053
        gbc.setState(0xd539, 0x66ae, 0xad30, 0x17b, 0x1b0, 0x8b, 0x0, 0x1);
        gbc.writeMem(0xd539, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x66ae, gbc.sp());
        EXPECT(0xd53b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd539));
        EXPECT(0x40, gbc.readMem(0xd53a));
        // CB 40 0054
        gbc.setState(0x962b, 0x7cb7, 0x6270, 0x417e, 0x14e5, 0xf3e9, 0x0, 0x0);
        gbc.writeMem(0x962b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x7cb7, gbc.sp());
        EXPECT(0x962d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x962b));
        EXPECT(0x40, gbc.readMem(0x962c));
        // CB 40 0055
        gbc.setState(0x418c, 0xc49b, 0xcaf0, 0xfeef, 0xda75, 0xc919, 0x1, 0x1);
        gbc.writeMem(0x418c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xc49b, gbc.sp());
        EXPECT(0x418e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0056
        gbc.setState(0x19f, 0x93c5, 0x5f50, 0x205a, 0x14c9, 0xc2be, 0x1, 0x0);
        gbc.writeMem(0x19f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x93c5, gbc.sp());
        EXPECT(0x1a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0057
        gbc.setState(0xa059, 0xe93f, 0x9480, 0x8902, 0xb870, 0x27cc, 0x0, 0x0);
        gbc.writeMem(0xa059, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xe93f, gbc.sp());
        EXPECT(0xa05b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa059));
        EXPECT(0x40, gbc.readMem(0xa05a));
        // CB 40 0058
        gbc.setState(0x26bb, 0x5cfe, 0x2b60, 0x7e76, 0x127f, 0x60aa, 0x0, 0x0);
        gbc.writeMem(0x26bb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x5cfe, gbc.sp());
        EXPECT(0x26bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0059
        gbc.setState(0xefa, 0x783d, 0x38e0, 0xa78c, 0xea81, 0x44e7, 0x0, 0x0);
        gbc.writeMem(0xefa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x783d, gbc.sp());
        EXPECT(0xefc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 005A
        gbc.setState(0x6f77, 0x681d, 0x9300, 0xec23, 0x31b7, 0x7d01, 0x1, 0x1);
        gbc.writeMem(0x6f77, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x681d, gbc.sp());
        EXPECT(0x6f79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 005B
        gbc.setState(0x7bb5, 0x3ba9, 0xc4e0, 0x62dc, 0x43cb, 0xc905, 0x1, 0x0);
        gbc.writeMem(0x7bb5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x3ba9, gbc.sp());
        EXPECT(0x7bb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 005C
        gbc.setState(0xdf76, 0x2804, 0x8370, 0x567b, 0xcc5d, 0x57a2, 0x1, 0x1);
        gbc.writeMem(0xdf76, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x2804, gbc.sp());
        EXPECT(0xdf78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf76));
        EXPECT(0x40, gbc.readMem(0xdf77));
        // CB 40 005D
        gbc.setState(0x627d, 0x87a, 0xb0a0, 0x2aff, 0x89e, 0x9b10, 0x0, 0x1);
        gbc.writeMem(0x627d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x87a, gbc.sp());
        EXPECT(0x627f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 005E
        gbc.setState(0x4cbf, 0x1164, 0xffa0, 0xecb7, 0x1515, 0x70dc, 0x1, 0x1);
        gbc.writeMem(0x4cbf, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x1164, gbc.sp());
        EXPECT(0x4cc1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0060
        gbc.setState(0xd78f, 0xe044, 0x71d0, 0xa7e5, 0x521b, 0xa26a, 0x1, 0x1);
        gbc.writeMem(0xd78f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xe044, gbc.sp());
        EXPECT(0xd791, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd78f));
        EXPECT(0x40, gbc.readMem(0xd790));
        // CB 40 0062
        gbc.setState(0xc6f4, 0x70f7, 0xbac0, 0xa43a, 0xaa9b, 0xe862, 0x1, 0x1);
        gbc.writeMem(0xc6f4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x70f7, gbc.sp());
        EXPECT(0xc6f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6f4));
        EXPECT(0x40, gbc.readMem(0xc6f5));
        // CB 40 0063
        gbc.setState(0x6cc2, 0x4179, 0x9380, 0x6329, 0xc190, 0xaefa, 0x0, 0x1);
        gbc.writeMem(0x6cc2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x4179, gbc.sp());
        EXPECT(0x6cc4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0064
        gbc.setState(0x91aa, 0xb6e1, 0xb810, 0x5e4c, 0xc9be, 0x9426, 0x0, 0x0);
        gbc.writeMem(0x91aa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xb6e1, gbc.sp());
        EXPECT(0x91ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91aa));
        EXPECT(0x40, gbc.readMem(0x91ab));
        // CB 40 0065
        gbc.setState(0xc019, 0x62ad, 0x2e00, 0x5192, 0x3dfc, 0x3694, 0x1, 0x1);
        gbc.writeMem(0xc019, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x62ad, gbc.sp());
        EXPECT(0xc01b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc019));
        EXPECT(0x40, gbc.readMem(0xc01a));
        // CB 40 0066
        gbc.setState(0x6b77, 0xec37, 0x7c80, 0xbf09, 0xbb9e, 0xe7f8, 0x1, 0x0);
        gbc.writeMem(0x6b77, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xec37, gbc.sp());
        EXPECT(0x6b79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0068
        gbc.setState(0x532b, 0xcc5c, 0x6010, 0x2e80, 0x3e21, 0x59e7, 0x0, 0x1);
        gbc.writeMem(0x532b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xcc5c, gbc.sp());
        EXPECT(0x532d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0069
        gbc.setState(0xef3d, 0x885c, 0xcb0, 0xc1b6, 0xfed9, 0xe80, 0x0, 0x1);
        gbc.writeMem(0xef3d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x885c, gbc.sp());
        EXPECT(0xef3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef3d));
        EXPECT(0x40, gbc.readMem(0xef3e));
        // CB 40 006A
        gbc.setState(0xee2e, 0xab14, 0x54a0, 0xe7a, 0xc712, 0xaf94, 0x0, 0x0);
        gbc.writeMem(0xee2e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xab14, gbc.sp());
        EXPECT(0xee30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee2e));
        EXPECT(0x40, gbc.readMem(0xee2f));
        // CB 40 006B
        gbc.setState(0xb690, 0xcc30, 0xbea0, 0xcb5b, 0x9029, 0xe0f9, 0x1, 0x0);
        gbc.writeMem(0xb690, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xcc30, gbc.sp());
        EXPECT(0xb692, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb690));
        EXPECT(0x40, gbc.readMem(0xb691));
        // CB 40 006C
        gbc.setState(0x46dd, 0x2b20, 0xe870, 0x19a0, 0xf677, 0xa611, 0x1, 0x0);
        gbc.writeMem(0x46dd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x2b20, gbc.sp());
        EXPECT(0x46df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 006D
        gbc.setState(0x248d, 0xb87b, 0xd720, 0xe248, 0xb6ec, 0x4c8f, 0x0, 0x0);
        gbc.writeMem(0x248d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xb87b, gbc.sp());
        EXPECT(0x248f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 006E
        gbc.setState(0x19e7, 0xa935, 0x9ab0, 0x747a, 0x5c6c, 0x5c4b, 0x1, 0x1);
        gbc.writeMem(0x19e7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xa935, gbc.sp());
        EXPECT(0x19e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 006F
        gbc.setState(0x2c79, 0x6412, 0xf1d0, 0x71d, 0x2035, 0xfad9, 0x1, 0x0);
        gbc.writeMem(0x2c79, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x6412, gbc.sp());
        EXPECT(0x2c7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0070
        gbc.setState(0xab1a, 0x9495, 0x81f0, 0x3332, 0x2eb5, 0xbe1c, 0x0, 0x0);
        gbc.writeMem(0xab1a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x9495, gbc.sp());
        EXPECT(0xab1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab1a));
        EXPECT(0x40, gbc.readMem(0xab1b));
        // CB 40 0071
        gbc.setState(0xc4f4, 0x6f2, 0xcef0, 0xf1e8, 0xb1fa, 0x8aa0, 0x0, 0x1);
        gbc.writeMem(0xc4f4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x6f2, gbc.sp());
        EXPECT(0xc4f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4f4));
        EXPECT(0x40, gbc.readMem(0xc4f5));
        // CB 40 0072
        gbc.setState(0xb2c5, 0xbc92, 0xf0a0, 0xf5e5, 0x3cac, 0xd7a0, 0x0, 0x0);
        gbc.writeMem(0xb2c5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xbc92, gbc.sp());
        EXPECT(0xb2c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2c5));
        EXPECT(0x40, gbc.readMem(0xb2c6));
        // CB 40 0073
        gbc.setState(0x326b, 0xbb19, 0x6fc0, 0x736b, 0x5f8f, 0x519d, 0x1, 0x0);
        gbc.writeMem(0x326b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xbb19, gbc.sp());
        EXPECT(0x326d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0074
        gbc.setState(0x769c, 0x1754, 0x7d30, 0xcbba, 0x2e5e, 0x4963, 0x1, 0x0);
        gbc.writeMem(0x769c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x1754, gbc.sp());
        EXPECT(0x769e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0075
        gbc.setState(0xa01a, 0xcb57, 0xd010, 0x9d63, 0x138b, 0x654, 0x1, 0x1);
        gbc.writeMem(0xa01a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xcb57, gbc.sp());
        EXPECT(0xa01c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa01a));
        EXPECT(0x40, gbc.readMem(0xa01b));
        // CB 40 0076
        gbc.setState(0x8a08, 0x20be, 0xa90, 0x8162, 0x25ff, 0xa8f5, 0x1, 0x0);
        gbc.writeMem(0x8a08, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x20be, gbc.sp());
        EXPECT(0x8a0a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a08));
        EXPECT(0x40, gbc.readMem(0x8a09));
        // CB 40 0077
        gbc.setState(0xe82a, 0x311, 0xc200, 0x6876, 0x5a60, 0x35ca, 0x0, 0x0);
        gbc.writeMem(0xe82a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x311, gbc.sp());
        EXPECT(0xe82c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe82a));
        EXPECT(0x40, gbc.readMem(0xe82b));
        // CB 40 0078
        gbc.setState(0xc39, 0x5d09, 0x4070, 0xe536, 0xf993, 0x739b, 0x1, 0x1);
        gbc.writeMem(0xc39, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x5d09, gbc.sp());
        EXPECT(0xc3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0079
        gbc.setState(0x214f, 0x5a29, 0x1a00, 0x2d7c, 0x31f4, 0x9835, 0x1, 0x1);
        gbc.writeMem(0x214f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x5a29, gbc.sp());
        EXPECT(0x2151, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 007A
        gbc.setState(0x117a, 0x8534, 0x7300, 0xfb4b, 0x1623, 0x4003, 0x1, 0x0);
        gbc.writeMem(0x117a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x8534, gbc.sp());
        EXPECT(0x117c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 007B
        gbc.setState(0x132, 0xad30, 0x2640, 0xd9ba, 0x68a1, 0x55a7, 0x1, 0x1);
        gbc.writeMem(0x132, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xad30, gbc.sp());
        EXPECT(0x134, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 007C
        gbc.setState(0x56ab, 0x7bf, 0xbd10, 0x19c, 0xa3b6, 0x936e, 0x0, 0x0);
        gbc.writeMem(0x56ab, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x7bf, gbc.sp());
        EXPECT(0x56ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 007D
        gbc.setState(0x7c5, 0x290a, 0x8090, 0x2969, 0xb241, 0xe049, 0x1, 0x0);
        gbc.writeMem(0x7c5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x290a, gbc.sp());
        EXPECT(0x7c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 007E
        gbc.setState(0x14ca, 0xa28a, 0xbad0, 0x4ce5, 0x87d0, 0xae23, 0x1, 0x1);
        gbc.writeMem(0x14ca, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xa28a, gbc.sp());
        EXPECT(0x14cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 007F
        gbc.setState(0x272b, 0xf2c4, 0xcea0, 0x6932, 0x8648, 0x742d, 0x1, 0x1);
        gbc.writeMem(0x272b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xf2c4, gbc.sp());
        EXPECT(0x272d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0082
        gbc.setState(0xb73c, 0x4bdb, 0xabb0, 0xa00f, 0xfec5, 0x604f, 0x0, 0x0);
        gbc.writeMem(0xb73c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x4bdb, gbc.sp());
        EXPECT(0xb73e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb73c));
        EXPECT(0x40, gbc.readMem(0xb73d));
        // CB 40 0083
        gbc.setState(0x3444, 0x9340, 0xf1f0, 0xd4c9, 0x303a, 0xc4bd, 0x1, 0x0);
        gbc.writeMem(0x3444, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x9340, gbc.sp());
        EXPECT(0x3446, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0084
        gbc.setState(0x162a, 0x3fa1, 0x3110, 0xb83c, 0x6f67, 0x27ce, 0x0, 0x1);
        gbc.writeMem(0x162a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x3fa1, gbc.sp());
        EXPECT(0x162c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0085
        gbc.setState(0x37ea, 0x7d3e, 0xe720, 0x9a86, 0xf0fd, 0x7b74, 0x1, 0x1);
        gbc.writeMem(0x37ea, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x7d3e, gbc.sp());
        EXPECT(0x37ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0086
        gbc.setState(0x4d7, 0x791c, 0x33a0, 0x2c00, 0x51b7, 0xba83, 0x0, 0x0);
        gbc.writeMem(0x4d7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x791c, gbc.sp());
        EXPECT(0x4d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0087
        gbc.setState(0x252d, 0x11af, 0xdf00, 0xe02a, 0x7ecf, 0xc663, 0x1, 0x1);
        gbc.writeMem(0x252d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x11af, gbc.sp());
        EXPECT(0x252f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0088
        gbc.setState(0xd91e, 0x18ab, 0x1210, 0x5eae, 0xb462, 0x6164, 0x1, 0x1);
        gbc.writeMem(0xd91e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x18ab, gbc.sp());
        EXPECT(0xd920, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd91e));
        EXPECT(0x40, gbc.readMem(0xd91f));
        // CB 40 0089
        gbc.setState(0x8c98, 0xe5c6, 0x6c50, 0xb93f, 0xcca5, 0x9404, 0x0, 0x1);
        gbc.writeMem(0x8c98, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xe5c6, gbc.sp());
        EXPECT(0x8c9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c98));
        EXPECT(0x40, gbc.readMem(0x8c99));
        // CB 40 008A
        gbc.setState(0xd578, 0xa4bb, 0xba40, 0x1bce, 0xb723, 0xaa23, 0x1, 0x0);
        gbc.writeMem(0xd578, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xa4bb, gbc.sp());
        EXPECT(0xd57a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd578));
        EXPECT(0x40, gbc.readMem(0xd579));
        // CB 40 008B
        gbc.setState(0x535d, 0xebf1, 0xb5f0, 0x222b, 0xb4cd, 0x3750, 0x0, 0x0);
        gbc.writeMem(0x535d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xebf1, gbc.sp());
        EXPECT(0x535f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 008D
        gbc.setState(0x7c80, 0x7ca4, 0x7cd0, 0x9be4, 0xa679, 0x28e1, 0x1, 0x0);
        gbc.writeMem(0x7c80, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x7ca4, gbc.sp());
        EXPECT(0x7c82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 008E
        gbc.setState(0x5f97, 0x7741, 0x5df0, 0x33ea, 0x25fb, 0xb20c, 0x0, 0x0);
        gbc.writeMem(0x5f97, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x7741, gbc.sp());
        EXPECT(0x5f99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 008F
        gbc.setState(0xc85, 0xef05, 0x2830, 0xb25d, 0x4d7, 0xb1b1, 0x1, 0x0);
        gbc.writeMem(0xc85, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xef05, gbc.sp());
        EXPECT(0xc87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0090
        gbc.setState(0xd901, 0xeb35, 0x5e40, 0xbdda, 0x6c7a, 0xf3a4, 0x0, 0x1);
        gbc.writeMem(0xd901, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xeb35, gbc.sp());
        EXPECT(0xd903, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd901));
        EXPECT(0x40, gbc.readMem(0xd902));
        // CB 40 0091
        gbc.setState(0x7231, 0xcb74, 0xe370, 0xcb22, 0x6c62, 0x8cec, 0x0, 0x0);
        gbc.writeMem(0x7231, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xcb74, gbc.sp());
        EXPECT(0x7233, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0092
        gbc.setState(0x6644, 0x4f92, 0x7920, 0x168d, 0xa997, 0x6276, 0x0, 0x0);
        gbc.writeMem(0x6644, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x4f92, gbc.sp());
        EXPECT(0x6646, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0093
        gbc.setState(0x68c3, 0xb4ab, 0x9820, 0x6d9c, 0x3dea, 0xef5c, 0x1, 0x1);
        gbc.writeMem(0x68c3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xb4ab, gbc.sp());
        EXPECT(0x68c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0094
        gbc.setState(0xea74, 0xa84e, 0xf760, 0x5329, 0xec1b, 0x76cf, 0x0, 0x1);
        gbc.writeMem(0xea74, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xa84e, gbc.sp());
        EXPECT(0xea76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea74));
        EXPECT(0x40, gbc.readMem(0xea75));
        // CB 40 0095
        gbc.setState(0x5671, 0x521, 0x2c40, 0x2d9c, 0x1f1c, 0xe824, 0x0, 0x0);
        gbc.writeMem(0x5671, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x521, gbc.sp());
        EXPECT(0x5673, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0096
        gbc.setState(0x30fd, 0xcd36, 0x2e0, 0x5aeb, 0xe8ba, 0x64ce, 0x1, 0x0);
        gbc.writeMem(0x30fd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xcd36, gbc.sp());
        EXPECT(0x30ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0097
        gbc.setState(0x8030, 0x1d07, 0x3060, 0x6984, 0x7423, 0x75f4, 0x1, 0x1);
        gbc.writeMem(0x8030, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x1d07, gbc.sp());
        EXPECT(0x8032, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8030));
        EXPECT(0x40, gbc.readMem(0x8031));
        // CB 40 0098
        gbc.setState(0xe7d6, 0x60f1, 0x2ee0, 0x7c9d, 0xc161, 0x9f6d, 0x1, 0x1);
        gbc.writeMem(0xe7d6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x60f1, gbc.sp());
        EXPECT(0xe7d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7d6));
        EXPECT(0x40, gbc.readMem(0xe7d7));
        // CB 40 0099
        gbc.setState(0x8468, 0xcb72, 0x6860, 0x6463, 0x441b, 0x722e, 0x0, 0x1);
        gbc.writeMem(0x8468, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xcb72, gbc.sp());
        EXPECT(0x846a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8468));
        EXPECT(0x40, gbc.readMem(0x8469));
        // CB 40 009A
        gbc.setState(0x7b91, 0xa31c, 0x7540, 0xf471, 0x1d6b, 0x7c98, 0x0, 0x0);
        gbc.writeMem(0x7b91, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xa31c, gbc.sp());
        EXPECT(0x7b93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 009B
        gbc.setState(0x7750, 0xb21, 0xa0a0, 0xc91f, 0xa82c, 0x8c58, 0x0, 0x1);
        gbc.writeMem(0x7750, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xb21, gbc.sp());
        EXPECT(0x7752, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 009C
        gbc.setState(0x67e8, 0xe1fb, 0x800, 0xd06e, 0x2fd0, 0x8d7b, 0x0, 0x0);
        gbc.writeMem(0x67e8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xe1fb, gbc.sp());
        EXPECT(0x67ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 009D
        gbc.setState(0x2091, 0x9bf1, 0xb470, 0x92b8, 0x751d, 0x8b06, 0x1, 0x1);
        gbc.writeMem(0x2091, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x9bf1, gbc.sp());
        EXPECT(0x2093, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 009E
        gbc.setState(0xa809, 0xedd6, 0x4240, 0x925c, 0x3f18, 0x8df7, 0x0, 0x1);
        gbc.writeMem(0xa809, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xedd6, gbc.sp());
        EXPECT(0xa80b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa809));
        EXPECT(0x40, gbc.readMem(0xa80a));
        // CB 40 009F
        gbc.setState(0xab33, 0x631a, 0xdbb0, 0x9759, 0x56fb, 0x6709, 0x0, 0x0);
        gbc.writeMem(0xab33, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x631a, gbc.sp());
        EXPECT(0xab35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab33));
        EXPECT(0x40, gbc.readMem(0xab34));
        // CB 40 00A0
        gbc.setState(0x60da, 0x6d2a, 0xbfa0, 0xc764, 0x31d, 0x63fb, 0x0, 0x1);
        gbc.writeMem(0x60da, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x6d2a, gbc.sp());
        EXPECT(0x60dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00A1
        gbc.setState(0xc9e6, 0xf3b0, 0x8820, 0x78c3, 0xeba1, 0x34e3, 0x1, 0x0);
        gbc.writeMem(0xc9e6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xf3b0, gbc.sp());
        EXPECT(0xc9e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9e6));
        EXPECT(0x40, gbc.readMem(0xc9e7));
        // CB 40 00A2
        gbc.setState(0xed9e, 0xa526, 0xcff0, 0x62e8, 0xdb71, 0xb9e5, 0x0, 0x0);
        gbc.writeMem(0xed9e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xa526, gbc.sp());
        EXPECT(0xeda0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed9e));
        EXPECT(0x40, gbc.readMem(0xed9f));
        // CB 40 00A3
        gbc.setState(0xb7c8, 0x29f2, 0xf610, 0x3985, 0xace9, 0x416b, 0x1, 0x1);
        gbc.writeMem(0xb7c8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x29f2, gbc.sp());
        EXPECT(0xb7ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7c8));
        EXPECT(0x40, gbc.readMem(0xb7c9));
        // CB 40 00A5
        gbc.setState(0x9872, 0xf8fc, 0x5ef0, 0xfe09, 0xd56f, 0xe409, 0x1, 0x1);
        gbc.writeMem(0x9872, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xf8fc, gbc.sp());
        EXPECT(0x9874, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9872));
        EXPECT(0x40, gbc.readMem(0x9873));
        // CB 40 00A7
        gbc.setState(0xdcff, 0x4213, 0xecc0, 0xd62c, 0xd319, 0x4009, 0x1, 0x1);
        gbc.writeMem(0xdcff, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x4213, gbc.sp());
        EXPECT(0xdd01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcff));
        EXPECT(0x40, gbc.readMem(0xdd00));
        // CB 40 00A8
        gbc.setState(0x954b, 0x68b1, 0xa810, 0x2f39, 0xc0bf, 0xcbed, 0x1, 0x1);
        gbc.writeMem(0x954b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x68b1, gbc.sp());
        EXPECT(0x954d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x954b));
        EXPECT(0x40, gbc.readMem(0x954c));
        // CB 40 00A9
        gbc.setState(0xd6f0, 0xc4a0, 0x2320, 0xdcd8, 0xc3f7, 0xb571, 0x0, 0x0);
        gbc.writeMem(0xd6f0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xc4a0, gbc.sp());
        EXPECT(0xd6f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6f0));
        EXPECT(0x40, gbc.readMem(0xd6f1));
        // CB 40 00AA
        gbc.setState(0x4933, 0x2a8f, 0xa1b0, 0xb556, 0x85a2, 0x7344, 0x1, 0x1);
        gbc.writeMem(0x4933, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x2a8f, gbc.sp());
        EXPECT(0x4935, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00AB
        gbc.setState(0xa1f8, 0x1053, 0x1cf0, 0x150b, 0xdb3, 0x4d03, 0x0, 0x0);
        gbc.writeMem(0xa1f8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x1053, gbc.sp());
        EXPECT(0xa1fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1f8));
        EXPECT(0x40, gbc.readMem(0xa1f9));
        // CB 40 00AC
        gbc.setState(0x6923, 0xdede, 0xa670, 0x4345, 0xd778, 0x9bde, 0x0, 0x1);
        gbc.writeMem(0x6923, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xdede, gbc.sp());
        EXPECT(0x6925, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00AD
        gbc.setState(0xa140, 0x58db, 0x1290, 0x681a, 0x4e78, 0x8ffa, 0x1, 0x0);
        gbc.writeMem(0xa140, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x58db, gbc.sp());
        EXPECT(0xa142, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa140));
        EXPECT(0x40, gbc.readMem(0xa141));
        // CB 40 00AE
        gbc.setState(0xcc92, 0x2774, 0xee0, 0x363e, 0xeb87, 0x4947, 0x1, 0x0);
        gbc.writeMem(0xcc92, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x2774, gbc.sp());
        EXPECT(0xcc94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc92));
        EXPECT(0x40, gbc.readMem(0xcc93));
        // CB 40 00AF
        gbc.setState(0x9cf5, 0x86a6, 0xe300, 0x88e7, 0x3bb6, 0x506, 0x1, 0x1);
        gbc.writeMem(0x9cf5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x86a6, gbc.sp());
        EXPECT(0x9cf7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cf5));
        EXPECT(0x40, gbc.readMem(0x9cf6));
        // CB 40 00B0
        gbc.setState(0xd4ce, 0x7f18, 0xcac0, 0xae2f, 0x1946, 0x343c, 0x1, 0x0);
        gbc.writeMem(0xd4ce, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x7f18, gbc.sp());
        EXPECT(0xd4d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4ce));
        EXPECT(0x40, gbc.readMem(0xd4cf));
        // CB 40 00B1
        gbc.setState(0xe74c, 0xe2c1, 0xf1d0, 0xcb8, 0xe536, 0x7a44, 0x0, 0x0);
        gbc.writeMem(0xe74c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xe2c1, gbc.sp());
        EXPECT(0xe74e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe74c));
        EXPECT(0x40, gbc.readMem(0xe74d));
        // CB 40 00B2
        gbc.setState(0x5ea6, 0x140f, 0x9b70, 0x18cd, 0x3e7, 0x68a0, 0x1, 0x0);
        gbc.writeMem(0x5ea6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x140f, gbc.sp());
        EXPECT(0x5ea8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00B3
        gbc.setState(0xc00f, 0xe819, 0x1370, 0xf6ed, 0x65d0, 0xd10e, 0x1, 0x0);
        gbc.writeMem(0xc00f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xe819, gbc.sp());
        EXPECT(0xc011, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc00f));
        EXPECT(0x40, gbc.readMem(0xc010));
        // CB 40 00B4
        gbc.setState(0x1201, 0xf8c7, 0x7870, 0xb744, 0xf87, 0xf65e, 0x1, 0x0);
        gbc.writeMem(0x1201, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xf8c7, gbc.sp());
        EXPECT(0x1203, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00B5
        gbc.setState(0xb706, 0x8ac2, 0x43f0, 0xf574, 0x16f9, 0xddb2, 0x1, 0x0);
        gbc.writeMem(0xb706, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x8ac2, gbc.sp());
        EXPECT(0xb708, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb706));
        EXPECT(0x40, gbc.readMem(0xb707));
        // CB 40 00B6
        gbc.setState(0x7d04, 0xb42e, 0xe7d0, 0x1ff8, 0xcee2, 0x55ac, 0x0, 0x0);
        gbc.writeMem(0x7d04, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xb42e, gbc.sp());
        EXPECT(0x7d06, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00B7
        gbc.setState(0x3ba5, 0x59fc, 0x6240, 0xfaa2, 0xbe3c, 0xc1cc, 0x1, 0x1);
        gbc.writeMem(0x3ba5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x59fc, gbc.sp());
        EXPECT(0x3ba7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00B8
        gbc.setState(0x344f, 0x3ea7, 0xdc30, 0xcdb8, 0x8d75, 0xd107, 0x1, 0x0);
        gbc.writeMem(0x344f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x3ea7, gbc.sp());
        EXPECT(0x3451, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00B9
        gbc.setState(0x9af3, 0x5702, 0x4d80, 0xf23e, 0x47ff, 0x69a4, 0x0, 0x0);
        gbc.writeMem(0x9af3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x5702, gbc.sp());
        EXPECT(0x9af5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9af3));
        EXPECT(0x40, gbc.readMem(0x9af4));
        // CB 40 00BA
        gbc.setState(0x8ebb, 0x50c4, 0x8b30, 0x3f2e, 0x6085, 0x4b52, 0x1, 0x0);
        gbc.writeMem(0x8ebb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x50c4, gbc.sp());
        EXPECT(0x8ebd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ebb));
        EXPECT(0x40, gbc.readMem(0x8ebc));
        // CB 40 00BB
        gbc.setState(0x3756, 0xe093, 0xc010, 0x15ad, 0xf93c, 0xb771, 0x1, 0x1);
        gbc.writeMem(0x3756, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xe093, gbc.sp());
        EXPECT(0x3758, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00BC
        gbc.setState(0xc346, 0x799, 0xbd80, 0xab5b, 0x45c6, 0x125a, 0x1, 0x1);
        gbc.writeMem(0xc346, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x799, gbc.sp());
        EXPECT(0xc348, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc346));
        EXPECT(0x40, gbc.readMem(0xc347));
        // CB 40 00BD
        gbc.setState(0x8c22, 0x9901, 0x6a10, 0x4d54, 0xfcac, 0xb246, 0x1, 0x0);
        gbc.writeMem(0x8c22, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x9901, gbc.sp());
        EXPECT(0x8c24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c22));
        EXPECT(0x40, gbc.readMem(0x8c23));
        // CB 40 00BE
        gbc.setState(0xa919, 0x3c88, 0xee80, 0x238f, 0xa985, 0x737d, 0x1, 0x1);
        gbc.writeMem(0xa919, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x3c88, gbc.sp());
        EXPECT(0xa91b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa919));
        EXPECT(0x40, gbc.readMem(0xa91a));
        // CB 40 00BF
        gbc.setState(0x273f, 0xaa48, 0xc5e0, 0x42b5, 0xb71f, 0x9b82, 0x0, 0x0);
        gbc.writeMem(0x273f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xaa48, gbc.sp());
        EXPECT(0x2741, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00C0
        gbc.setState(0x9f12, 0x3d47, 0x790, 0xd3c2, 0x6680, 0xc866, 0x1, 0x1);
        gbc.writeMem(0x9f12, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x3d47, gbc.sp());
        EXPECT(0x9f14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f12));
        EXPECT(0x40, gbc.readMem(0x9f13));
        // CB 40 00C1
        gbc.setState(0x21a, 0x7e95, 0xbd30, 0xb96d, 0xcb9a, 0x9735, 0x1, 0x1);
        gbc.writeMem(0x21a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x7e95, gbc.sp());
        EXPECT(0x21c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00C2
        gbc.setState(0xcd87, 0x6d4d, 0xfe80, 0x4703, 0x384a, 0x19fe, 0x0, 0x1);
        gbc.writeMem(0xcd87, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x6d4d, gbc.sp());
        EXPECT(0xcd89, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd87));
        EXPECT(0x40, gbc.readMem(0xcd88));
        // CB 40 00C3
        gbc.setState(0x6449, 0xca8, 0x5660, 0xa35e, 0x870a, 0x2539, 0x1, 0x0);
        gbc.writeMem(0x6449, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xca8, gbc.sp());
        EXPECT(0x644b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00C4
        gbc.setState(0xe9a7, 0xcc13, 0x63b0, 0x5e93, 0x915, 0x5160, 0x1, 0x0);
        gbc.writeMem(0xe9a7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xcc13, gbc.sp());
        EXPECT(0xe9a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9a7));
        EXPECT(0x40, gbc.readMem(0xe9a8));
        // CB 40 00C5
        gbc.setState(0x2a8a, 0x421d, 0x29f0, 0xd4cd, 0x8530, 0xcf1f, 0x0, 0x1);
        gbc.writeMem(0x2a8a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x421d, gbc.sp());
        EXPECT(0x2a8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00C6
        gbc.setState(0x31f6, 0x5408, 0xa590, 0xcc67, 0xf307, 0x36a6, 0x1, 0x0);
        gbc.writeMem(0x31f6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x5408, gbc.sp());
        EXPECT(0x31f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00C7
        gbc.setState(0xd0fa, 0x212d, 0x6650, 0xaf80, 0x3855, 0xcd00, 0x1, 0x1);
        gbc.writeMem(0xd0fa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x212d, gbc.sp());
        EXPECT(0xd0fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0fa));
        EXPECT(0x40, gbc.readMem(0xd0fb));
        // CB 40 00C8
        gbc.setState(0xef19, 0x396b, 0x8850, 0xf68, 0xbe49, 0xe58e, 0x1, 0x1);
        gbc.writeMem(0xef19, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x396b, gbc.sp());
        EXPECT(0xef1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef19));
        EXPECT(0x40, gbc.readMem(0xef1a));
        // CB 40 00C9
        gbc.setState(0x4de6, 0x9802, 0xcc50, 0x308b, 0xf0c, 0x9279, 0x1, 0x0);
        gbc.writeMem(0x4de6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x9802, gbc.sp());
        EXPECT(0x4de8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00CB
        gbc.setState(0xd598, 0x459c, 0xcea0, 0x9306, 0x53b6, 0x23fd, 0x1, 0x0);
        gbc.writeMem(0xd598, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x459c, gbc.sp());
        EXPECT(0xd59a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd598));
        EXPECT(0x40, gbc.readMem(0xd599));
        // CB 40 00CC
        gbc.setState(0x11e7, 0x849c, 0x2900, 0x5925, 0xd337, 0x49b, 0x0, 0x1);
        gbc.writeMem(0x11e7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x849c, gbc.sp());
        EXPECT(0x11e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00CD
        gbc.setState(0x26d2, 0xff8f, 0x3350, 0x8e5f, 0x8760, 0xb477, 0x0, 0x0);
        gbc.writeMem(0x26d2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xff8f, gbc.sp());
        EXPECT(0x26d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00CE
        gbc.setState(0x156, 0x3899, 0x4c30, 0x77c1, 0xa3f4, 0xa135, 0x1, 0x1);
        gbc.writeMem(0x156, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x3899, gbc.sp());
        EXPECT(0x158, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00CF
        gbc.setState(0x93fb, 0x7a65, 0x4bd0, 0xb551, 0x1fa1, 0x3a8a, 0x0, 0x0);
        gbc.writeMem(0x93fb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x7a65, gbc.sp());
        EXPECT(0x93fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93fb));
        EXPECT(0x40, gbc.readMem(0x93fc));
        // CB 40 00D0
        gbc.setState(0x8bc7, 0x68b, 0x19e0, 0x9d6c, 0xcf56, 0x2af5, 0x0, 0x1);
        gbc.writeMem(0x8bc7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x68b, gbc.sp());
        EXPECT(0x8bc9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bc7));
        EXPECT(0x40, gbc.readMem(0x8bc8));
        // CB 40 00D1
        gbc.setState(0x437b, 0xe282, 0xe330, 0x5db7, 0x5b2, 0xa94, 0x1, 0x1);
        gbc.writeMem(0x437b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xe282, gbc.sp());
        EXPECT(0x437d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00D2
        gbc.setState(0x2ee7, 0x4e7, 0x2e0, 0x6bfc, 0xfaff, 0x74af, 0x0, 0x1);
        gbc.writeMem(0x2ee7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x4e7, gbc.sp());
        EXPECT(0x2ee9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00D3
        gbc.setState(0xd939, 0xa724, 0xa6d0, 0xbe16, 0xcc4b, 0xd72e, 0x1, 0x1);
        gbc.writeMem(0xd939, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xa724, gbc.sp());
        EXPECT(0xd93b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd939));
        EXPECT(0x40, gbc.readMem(0xd93a));
        // CB 40 00D4
        gbc.setState(0x8bd7, 0x7b24, 0x78c0, 0x45f0, 0x5bc1, 0xf53c, 0x1, 0x1);
        gbc.writeMem(0x8bd7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x7b24, gbc.sp());
        EXPECT(0x8bd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bd7));
        EXPECT(0x40, gbc.readMem(0x8bd8));
        // CB 40 00D6
        gbc.setState(0x8338, 0x324d, 0xb960, 0x37, 0xf2e5, 0x9b47, 0x0, 0x0);
        gbc.writeMem(0x8338, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x324d, gbc.sp());
        EXPECT(0x833a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8338));
        EXPECT(0x40, gbc.readMem(0x8339));
        // CB 40 00D7
        gbc.setState(0xaa56, 0x6376, 0x3800, 0xfcc5, 0xb9bd, 0xf0cd, 0x0, 0x0);
        gbc.writeMem(0xaa56, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x6376, gbc.sp());
        EXPECT(0xaa58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa56));
        EXPECT(0x40, gbc.readMem(0xaa57));
        // CB 40 00D8
        gbc.setState(0xe01a, 0x7eef, 0xaa80, 0x22d3, 0xe011, 0x3e50, 0x0, 0x1);
        gbc.writeMem(0xe01a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x7eef, gbc.sp());
        EXPECT(0xe01c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe01a));
        EXPECT(0x40, gbc.readMem(0xe01b));
        // CB 40 00D9
        gbc.setState(0x1cdf, 0x5dae, 0x3220, 0x24af, 0x6f04, 0x6ce6, 0x0, 0x1);
        gbc.writeMem(0x1cdf, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x5dae, gbc.sp());
        EXPECT(0x1ce1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00DA
        gbc.setState(0x255e, 0x912c, 0x2d00, 0x9d17, 0xd60b, 0x2711, 0x1, 0x1);
        gbc.writeMem(0x255e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x912c, gbc.sp());
        EXPECT(0x2560, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00DB
        gbc.setState(0xed93, 0x2f30, 0x49e0, 0xef, 0x115a, 0x2f51, 0x0, 0x1);
        gbc.writeMem(0xed93, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x2f30, gbc.sp());
        EXPECT(0xed95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed93));
        EXPECT(0x40, gbc.readMem(0xed94));
        // CB 40 00DC
        gbc.setState(0x4693, 0x256b, 0x1300, 0x4ea8, 0xc849, 0x3118, 0x1, 0x1);
        gbc.writeMem(0x4693, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x256b, gbc.sp());
        EXPECT(0x4695, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00DD
        gbc.setState(0xf03, 0xfb00, 0xd320, 0x21b9, 0xfb5a, 0xba2, 0x0, 0x0);
        gbc.writeMem(0xf03, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xfb00, gbc.sp());
        EXPECT(0xf05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00DE
        gbc.setState(0x3a7, 0x5b2c, 0x8b90, 0x8d32, 0x8651, 0xb118, 0x1, 0x0);
        gbc.writeMem(0x3a7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x5b2c, gbc.sp());
        EXPECT(0x3a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00DF
        gbc.setState(0x2ea8, 0xda92, 0x1f00, 0xfa04, 0x4be9, 0xd207, 0x0, 0x1);
        gbc.writeMem(0x2ea8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xda92, gbc.sp());
        EXPECT(0x2eaa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00E0
        gbc.setState(0x59f0, 0x606b, 0x10c0, 0x1e1b, 0x9fac, 0x6ecd, 0x1, 0x0);
        gbc.writeMem(0x59f0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x606b, gbc.sp());
        EXPECT(0x59f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00E1
        gbc.setState(0x6b97, 0xb054, 0xdb70, 0x52f2, 0x4ebd, 0xf40, 0x0, 0x0);
        gbc.writeMem(0x6b97, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xb054, gbc.sp());
        EXPECT(0x6b99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00E2
        gbc.setState(0xde80, 0xda5a, 0xf830, 0x71d5, 0x3183, 0x524f, 0x0, 0x1);
        gbc.writeMem(0xde80, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xda5a, gbc.sp());
        EXPECT(0xde82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde80));
        EXPECT(0x40, gbc.readMem(0xde81));
        // CB 40 00E3
        gbc.setState(0xb3ea, 0xed81, 0xaae0, 0xb613, 0xc8b1, 0x9cfc, 0x0, 0x0);
        gbc.writeMem(0xb3ea, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xed81, gbc.sp());
        EXPECT(0xb3ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3ea));
        EXPECT(0x40, gbc.readMem(0xb3eb));
        // CB 40 00E4
        gbc.setState(0xc67, 0x9661, 0xb6c0, 0xafa9, 0x99f, 0x2f30, 0x1, 0x1);
        gbc.writeMem(0xc67, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x9661, gbc.sp());
        EXPECT(0xc69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00E6
        gbc.setState(0x3a1c, 0xd891, 0x7710, 0x827d, 0x4b8d, 0xc737, 0x0, 0x0);
        gbc.writeMem(0x3a1c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xd891, gbc.sp());
        EXPECT(0x3a1e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00E7
        gbc.setState(0xb639, 0x297b, 0x1b70, 0x932a, 0xb470, 0x6758, 0x0, 0x1);
        gbc.writeMem(0xb639, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x297b, gbc.sp());
        EXPECT(0xb63b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb639));
        EXPECT(0x40, gbc.readMem(0xb63a));
        // CB 40 00E8
        gbc.setState(0x3e68, 0x74a9, 0xee30, 0x51ff, 0x3136, 0xa816, 0x1, 0x0);
        gbc.writeMem(0x3e68, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x74a9, gbc.sp());
        EXPECT(0x3e6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00E9
        gbc.setState(0xa1cc, 0x2d02, 0x3b0, 0x7f2b, 0x4dc, 0xd7e0, 0x1, 0x1);
        gbc.writeMem(0xa1cc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x2d02, gbc.sp());
        EXPECT(0xa1ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1cc));
        EXPECT(0x40, gbc.readMem(0xa1cd));
        // CB 40 00EA
        gbc.setState(0x3a33, 0xb774, 0xe5f0, 0xa877, 0x86b1, 0x3068, 0x0, 0x1);
        gbc.writeMem(0x3a33, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xb774, gbc.sp());
        EXPECT(0x3a35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00EB
        gbc.setState(0x95cb, 0x9c4c, 0xf0d0, 0xbc57, 0x600d, 0x882, 0x1, 0x1);
        gbc.writeMem(0x95cb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x9c4c, gbc.sp());
        EXPECT(0x95cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95cb));
        EXPECT(0x40, gbc.readMem(0x95cc));
        // CB 40 00EC
        gbc.setState(0xe61, 0xed51, 0x5210, 0x43a0, 0xa3aa, 0x38c3, 0x0, 0x0);
        gbc.writeMem(0xe61, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xed51, gbc.sp());
        EXPECT(0xe63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00ED
        gbc.setState(0x9a2e, 0xbb82, 0x480, 0xc08f, 0x9d21, 0xa582, 0x0, 0x1);
        gbc.writeMem(0x9a2e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xbb82, gbc.sp());
        EXPECT(0x9a30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a2e));
        EXPECT(0x40, gbc.readMem(0x9a2f));
        // CB 40 00EE
        gbc.setState(0xd074, 0xed75, 0x4920, 0xba8e, 0xa6f6, 0x42d2, 0x0, 0x1);
        gbc.writeMem(0xd074, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xed75, gbc.sp());
        EXPECT(0xd076, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd074));
        EXPECT(0x40, gbc.readMem(0xd075));
        // CB 40 00EF
        gbc.setState(0xb546, 0xeb31, 0x9ab0, 0x217b, 0x1521, 0x2089, 0x1, 0x0);
        gbc.writeMem(0xb546, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xeb31, gbc.sp());
        EXPECT(0xb548, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb546));
        EXPECT(0x40, gbc.readMem(0xb547));
        // CB 40 00F0
        gbc.setState(0xbe17, 0x1559, 0x9460, 0xc487, 0xdae5, 0x5f8e, 0x1, 0x0);
        gbc.writeMem(0xbe17, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x1559, gbc.sp());
        EXPECT(0xbe19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe17));
        EXPECT(0x40, gbc.readMem(0xbe18));
        // CB 40 00F1
        gbc.setState(0x7a05, 0x163d, 0x7500, 0x58a3, 0xdd64, 0x88c9, 0x1, 0x1);
        gbc.writeMem(0x7a05, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x163d, gbc.sp());
        EXPECT(0x7a07, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00F2
        gbc.setState(0x919c, 0xc571, 0x13d0, 0xc491, 0x32ce, 0x9811, 0x0, 0x0);
        gbc.writeMem(0x919c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xc571, gbc.sp());
        EXPECT(0x919e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x919c));
        EXPECT(0x40, gbc.readMem(0x919d));
        // CB 40 00F3
        gbc.setState(0x47a1, 0xbd47, 0xb700, 0x15c2, 0x55fc, 0x6810, 0x1, 0x0);
        gbc.writeMem(0x47a1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xbd47, gbc.sp());
        EXPECT(0x47a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00F4
        gbc.setState(0x4911, 0xbc6f, 0xe2d0, 0xe9be, 0x5b0b, 0xd8b0, 0x1, 0x0);
        gbc.writeMem(0x4911, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xbc6f, gbc.sp());
        EXPECT(0x4913, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00F5
        gbc.setState(0x4b33, 0xfa9c, 0x5ed0, 0x235, 0x65f6, 0x66ba, 0x0, 0x0);
        gbc.writeMem(0x4b33, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xfa9c, gbc.sp());
        EXPECT(0x4b35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00F6
        gbc.setState(0xa0f2, 0xfbc8, 0x61c0, 0xe542, 0xa954, 0xe6cb, 0x1, 0x0);
        gbc.writeMem(0xa0f2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xfbc8, gbc.sp());
        EXPECT(0xa0f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0f2));
        EXPECT(0x40, gbc.readMem(0xa0f3));
        // CB 40 00F7
        gbc.setState(0x695, 0xd697, 0x84a0, 0x8a1b, 0xfbdc, 0xbd1d, 0x0, 0x0);
        gbc.writeMem(0x695, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xd697, gbc.sp());
        EXPECT(0x697, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00F9
        gbc.setState(0x5d0a, 0x8938, 0x7330, 0xd252, 0x9012, 0x41d0, 0x0, 0x0);
        gbc.writeMem(0x5d0a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x8938, gbc.sp());
        EXPECT(0x5d0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00FA
        gbc.setState(0x192f, 0xc90c, 0x8830, 0x8329, 0xcd08, 0x854b, 0x0, 0x1);
        gbc.writeMem(0x192f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xc90c, gbc.sp());
        EXPECT(0x1931, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 00FB
        gbc.setState(0xe9e7, 0x1a4b, 0xbbb0, 0xfa7a, 0x980e, 0x6fb5, 0x0, 0x1);
        gbc.writeMem(0xe9e7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x1a4b, gbc.sp());
        EXPECT(0xe9e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9e7));
        EXPECT(0x40, gbc.readMem(0xe9e8));
        // CB 40 00FC
        gbc.setState(0x2a03, 0x4077, 0x6ac0, 0x19df, 0x5238, 0x24e5, 0x1, 0x1);
        gbc.writeMem(0x2a03, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x4077, gbc.sp());
        EXPECT(0x2a05, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 00FD
        gbc.setState(0xd815, 0xc6fc, 0xe0c0, 0xe189, 0x4036, 0xb685, 0x1, 0x1);
        gbc.writeMem(0xd815, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xc6fc, gbc.sp());
        EXPECT(0xd817, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd815));
        EXPECT(0x40, gbc.readMem(0xd816));
        // CB 40 00FF
        gbc.setState(0x3c23, 0x6cc3, 0xfcf0, 0x119e, 0x71d8, 0x41d8, 0x0, 0x0);
        gbc.writeMem(0x3c23, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x6cc3, gbc.sp());
        EXPECT(0x3c25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0100
        gbc.setState(0x2fc7, 0x4e8, 0x980, 0xe8d9, 0x7211, 0xcd42, 0x0, 0x0);
        gbc.writeMem(0x2fc7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x4e8, gbc.sp());
        EXPECT(0x2fc9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0101
        gbc.setState(0xd010, 0xc41c, 0x2e70, 0x1740, 0x38f1, 0x2cad, 0x0, 0x0);
        gbc.writeMem(0xd010, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xc41c, gbc.sp());
        EXPECT(0xd012, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd010));
        EXPECT(0x40, gbc.readMem(0xd011));
        // CB 40 0102
        gbc.setState(0xcabc, 0xf04e, 0x280, 0xcd70, 0xb0ed, 0x5e11, 0x1, 0x1);
        gbc.writeMem(0xcabc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xf04e, gbc.sp());
        EXPECT(0xcabe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcabc));
        EXPECT(0x40, gbc.readMem(0xcabd));
        // CB 40 0103
        gbc.setState(0xc141, 0x43e6, 0xc7a0, 0xabcd, 0x21c4, 0xce47, 0x0, 0x0);
        gbc.writeMem(0xc141, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x43e6, gbc.sp());
        EXPECT(0xc143, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc141));
        EXPECT(0x40, gbc.readMem(0xc142));
        // CB 40 0104
        gbc.setState(0x5a1e, 0xdd4c, 0x7f30, 0xd405, 0x601a, 0x4b05, 0x0, 0x0);
        gbc.writeMem(0x5a1e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xdd4c, gbc.sp());
        EXPECT(0x5a20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0105
        gbc.setState(0xbad1, 0x7d5e, 0x9ae0, 0x8a61, 0x8824, 0xd71b, 0x1, 0x1);
        gbc.writeMem(0xbad1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x7d5e, gbc.sp());
        EXPECT(0xbad3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbad1));
        EXPECT(0x40, gbc.readMem(0xbad2));
        // CB 40 0106
        gbc.setState(0xce59, 0x969b, 0xe5a0, 0x6d83, 0x9e5, 0x564a, 0x0, 0x1);
        gbc.writeMem(0xce59, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x969b, gbc.sp());
        EXPECT(0xce5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce59));
        EXPECT(0x40, gbc.readMem(0xce5a));
        // CB 40 0107
        gbc.setState(0xaf91, 0x88d4, 0xcdb0, 0x7ca8, 0x9e9a, 0x4fe6, 0x0, 0x0);
        gbc.writeMem(0xaf91, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x88d4, gbc.sp());
        EXPECT(0xaf93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf91));
        EXPECT(0x40, gbc.readMem(0xaf92));
        // CB 40 0108
        gbc.setState(0xef62, 0x512d, 0xddf0, 0xd68d, 0xbed1, 0xea62, 0x1, 0x0);
        gbc.writeMem(0xef62, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x512d, gbc.sp());
        EXPECT(0xef64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef62));
        EXPECT(0x40, gbc.readMem(0xef63));
        // CB 40 0109
        gbc.setState(0x2897, 0xd975, 0x18c0, 0x381, 0x94ee, 0x3436, 0x1, 0x1);
        gbc.writeMem(0x2897, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xd975, gbc.sp());
        EXPECT(0x2899, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 010A
        gbc.setState(0x65f1, 0x6098, 0xa260, 0x91c, 0xbce7, 0x1c1f, 0x0, 0x1);
        gbc.writeMem(0x65f1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x6098, gbc.sp());
        EXPECT(0x65f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 010B
        gbc.setState(0x2694, 0x5046, 0xf70, 0x5237, 0x8a46, 0x8043, 0x1, 0x1);
        gbc.writeMem(0x2694, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x5046, gbc.sp());
        EXPECT(0x2696, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 010C
        gbc.setState(0xc139, 0x7a8e, 0x97a0, 0xb50e, 0xd740, 0xd2bf, 0x1, 0x1);
        gbc.writeMem(0xc139, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x7a8e, gbc.sp());
        EXPECT(0xc13b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc139));
        EXPECT(0x40, gbc.readMem(0xc13a));
        // CB 40 010D
        gbc.setState(0xee3e, 0xd447, 0x59e0, 0xa763, 0xd2ce, 0x63fd, 0x0, 0x0);
        gbc.writeMem(0xee3e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xd447, gbc.sp());
        EXPECT(0xee40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee3e));
        EXPECT(0x40, gbc.readMem(0xee3f));
        // CB 40 010E
        gbc.setState(0x907f, 0x1cf7, 0x4d70, 0xd09e, 0x965b, 0xb4a3, 0x1, 0x1);
        gbc.writeMem(0x907f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x1cf7, gbc.sp());
        EXPECT(0x9081, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x907f));
        EXPECT(0x40, gbc.readMem(0x9080));
        // CB 40 010F
        gbc.setState(0xec0b, 0x7836, 0x2af0, 0x2d42, 0x8a76, 0xb18e, 0x0, 0x0);
        gbc.writeMem(0xec0b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x7836, gbc.sp());
        EXPECT(0xec0d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec0b));
        EXPECT(0x40, gbc.readMem(0xec0c));
        // CB 40 0110
        gbc.setState(0x1080, 0xe6d3, 0x7800, 0x875c, 0x83ea, 0xe27, 0x0, 0x0);
        gbc.writeMem(0x1080, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xe6d3, gbc.sp());
        EXPECT(0x1082, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0111
        gbc.setState(0x4750, 0xd915, 0xe660, 0xf824, 0x10f6, 0xaed9, 0x1, 0x1);
        gbc.writeMem(0x4750, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xd915, gbc.sp());
        EXPECT(0x4752, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0112
        gbc.setState(0xd3cf, 0x322a, 0x4350, 0xa3d3, 0xfcaf, 0xb8c7, 0x0, 0x0);
        gbc.writeMem(0xd3cf, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x322a, gbc.sp());
        EXPECT(0xd3d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3cf));
        EXPECT(0x40, gbc.readMem(0xd3d0));
        // CB 40 0113
        gbc.setState(0xa96b, 0xa632, 0x46f0, 0xa280, 0x52eb, 0x574b, 0x1, 0x0);
        gbc.writeMem(0xa96b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xa632, gbc.sp());
        EXPECT(0xa96d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa96b));
        EXPECT(0x40, gbc.readMem(0xa96c));
        // CB 40 0114
        gbc.setState(0x9c43, 0x9594, 0xc140, 0x7c22, 0x1951, 0x827c, 0x0, 0x0);
        gbc.writeMem(0x9c43, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x9594, gbc.sp());
        EXPECT(0x9c45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c43));
        EXPECT(0x40, gbc.readMem(0x9c44));
        // CB 40 0115
        gbc.setState(0xaa74, 0xf652, 0xd20, 0xc3aa, 0xd0e5, 0x7343, 0x0, 0x1);
        gbc.writeMem(0xaa74, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xf652, gbc.sp());
        EXPECT(0xaa76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa74));
        EXPECT(0x40, gbc.readMem(0xaa75));
        // CB 40 0116
        gbc.setState(0x1646, 0x843f, 0x2350, 0x6284, 0xb2ab, 0x41f1, 0x0, 0x0);
        gbc.writeMem(0x1646, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x843f, gbc.sp());
        EXPECT(0x1648, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0117
        gbc.setState(0x6b65, 0x573d, 0x34b0, 0xd7a0, 0xaf14, 0x1b67, 0x0, 0x1);
        gbc.writeMem(0x6b65, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x573d, gbc.sp());
        EXPECT(0x6b67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0118
        gbc.setState(0xdcd2, 0x8c70, 0xcc20, 0x30ff, 0xa972, 0xe4b1, 0x0, 0x1);
        gbc.writeMem(0xdcd2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x8c70, gbc.sp());
        EXPECT(0xdcd4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcd2));
        EXPECT(0x40, gbc.readMem(0xdcd3));
        // CB 40 0119
        gbc.setState(0x90fa, 0x8e04, 0xd590, 0xea83, 0x4da1, 0x82c5, 0x1, 0x0);
        gbc.writeMem(0x90fa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x8e04, gbc.sp());
        EXPECT(0x90fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90fa));
        EXPECT(0x40, gbc.readMem(0x90fb));
        // CB 40 011B
        gbc.setState(0x8a3a, 0x38fb, 0x4280, 0x97d9, 0xee79, 0xee7b, 0x0, 0x1);
        gbc.writeMem(0x8a3a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x38fb, gbc.sp());
        EXPECT(0x8a3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a3a));
        EXPECT(0x40, gbc.readMem(0x8a3b));
        // CB 40 011C
        gbc.setState(0x646c, 0x48af, 0xe390, 0xbf20, 0x1159, 0x35dd, 0x1, 0x0);
        gbc.writeMem(0x646c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x48af, gbc.sp());
        EXPECT(0x646e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 011D
        gbc.setState(0xd5d7, 0xfe14, 0xaab0, 0x5af4, 0xd822, 0x5a23, 0x1, 0x1);
        gbc.writeMem(0xd5d7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xfe14, gbc.sp());
        EXPECT(0xd5d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5d7));
        EXPECT(0x40, gbc.readMem(0xd5d8));
        // CB 40 011E
        gbc.setState(0x16e5, 0xb3c3, 0x48e0, 0xd596, 0x82c, 0xe03b, 0x0, 0x1);
        gbc.writeMem(0x16e5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xb3c3, gbc.sp());
        EXPECT(0x16e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 011F
        gbc.setState(0x6cb0, 0x73f, 0x4d80, 0x563c, 0x4624, 0x8112, 0x0, 0x0);
        gbc.writeMem(0x6cb0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x73f, gbc.sp());
        EXPECT(0x6cb2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0120
        gbc.setState(0xe2d3, 0xb851, 0x2bd0, 0x2f1e, 0xbb8b, 0x6602, 0x0, 0x1);
        gbc.writeMem(0xe2d3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xb851, gbc.sp());
        EXPECT(0xe2d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2d3));
        EXPECT(0x40, gbc.readMem(0xe2d4));
        // CB 40 0121
        gbc.setState(0x2810, 0xa734, 0x6130, 0xab60, 0xa570, 0x8e25, 0x0, 0x1);
        gbc.writeMem(0x2810, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xa734, gbc.sp());
        EXPECT(0x2812, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0122
        gbc.setState(0x90d6, 0x503f, 0xbbf0, 0x3fb3, 0x2f30, 0x38a4, 0x0, 0x1);
        gbc.writeMem(0x90d6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x503f, gbc.sp());
        EXPECT(0x90d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90d6));
        EXPECT(0x40, gbc.readMem(0x90d7));
        // CB 40 0123
        gbc.setState(0x5d96, 0x816d, 0x78c0, 0x2457, 0x6cc1, 0xeea5, 0x1, 0x0);
        gbc.writeMem(0x5d96, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x816d, gbc.sp());
        EXPECT(0x5d98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0124
        gbc.setState(0x57df, 0x44a1, 0x1360, 0xef15, 0x267d, 0xfb84, 0x0, 0x0);
        gbc.writeMem(0x57df, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x44a1, gbc.sp());
        EXPECT(0x57e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0125
        gbc.setState(0x9e1, 0x7501, 0x2e30, 0xa5bb, 0x7fe3, 0xb9ff, 0x0, 0x0);
        gbc.writeMem(0x9e1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x7501, gbc.sp());
        EXPECT(0x9e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0126
        gbc.setState(0x9946, 0xf46f, 0x6680, 0x1dc4, 0x2278, 0xbada, 0x0, 0x1);
        gbc.writeMem(0x9946, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xf46f, gbc.sp());
        EXPECT(0x9948, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9946));
        EXPECT(0x40, gbc.readMem(0x9947));
        // CB 40 0127
        gbc.setState(0x3b8a, 0x8ee, 0xb9a0, 0x8098, 0xea91, 0x398c, 0x1, 0x1);
        gbc.writeMem(0x3b8a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x8ee, gbc.sp());
        EXPECT(0x3b8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0128
        gbc.setState(0x13bb, 0x4868, 0x8f0, 0x4d6f, 0x21e8, 0x9c83, 0x0, 0x0);
        gbc.writeMem(0x13bb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x4868, gbc.sp());
        EXPECT(0x13bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0129
        gbc.setState(0x6718, 0xcae8, 0x9790, 0xe738, 0x5010, 0xffeb, 0x0, 0x1);
        gbc.writeMem(0x6718, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xcae8, gbc.sp());
        EXPECT(0x671a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 012A
        gbc.setState(0x310, 0x5fe1, 0x5090, 0xf237, 0x93a3, 0x54d8, 0x0, 0x1);
        gbc.writeMem(0x310, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x5fe1, gbc.sp());
        EXPECT(0x312, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 012B
        gbc.setState(0x419d, 0xa88e, 0x6310, 0x4b1c, 0xa751, 0xb468, 0x0, 0x1);
        gbc.writeMem(0x419d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xa88e, gbc.sp());
        EXPECT(0x419f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 012C
        gbc.setState(0xbc5d, 0xfa4, 0x1ba0, 0x5bde, 0x56ce, 0x7816, 0x0, 0x1);
        gbc.writeMem(0xbc5d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xfa4, gbc.sp());
        EXPECT(0xbc5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc5d));
        EXPECT(0x40, gbc.readMem(0xbc5e));
        // CB 40 012D
        gbc.setState(0x6ca8, 0xbe32, 0x8570, 0x40c1, 0xfa33, 0xc32, 0x1, 0x0);
        gbc.writeMem(0x6ca8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xbe32, gbc.sp());
        EXPECT(0x6caa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 012E
        gbc.setState(0x65fd, 0xb37a, 0xf6c0, 0xd2a1, 0xf7f1, 0x9e17, 0x1, 0x1);
        gbc.writeMem(0x65fd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xb37a, gbc.sp());
        EXPECT(0x65ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 012F
        gbc.setState(0x41cf, 0x97a6, 0x6720, 0x2d77, 0x6f59, 0x81ec, 0x1, 0x0);
        gbc.writeMem(0x41cf, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x97a6, gbc.sp());
        EXPECT(0x41d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0130
        gbc.setState(0x32b1, 0xcefd, 0xe630, 0x6ad0, 0x2b37, 0x47ed, 0x0, 0x1);
        gbc.writeMem(0x32b1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xcefd, gbc.sp());
        EXPECT(0x32b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0131
        gbc.setState(0xc270, 0x37d7, 0xf3b0, 0x4b67, 0x7272, 0x5111, 0x0, 0x0);
        gbc.writeMem(0xc270, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x37d7, gbc.sp());
        EXPECT(0xc272, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc270));
        EXPECT(0x40, gbc.readMem(0xc271));
        // CB 40 0132
        gbc.setState(0x8254, 0xd72a, 0x62f0, 0x3fe9, 0xff8f, 0x9802, 0x1, 0x0);
        gbc.writeMem(0x8254, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xd72a, gbc.sp());
        EXPECT(0x8256, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8254));
        EXPECT(0x40, gbc.readMem(0x8255));
        // CB 40 0133
        gbc.setState(0x37cd, 0xb3eb, 0xbe10, 0xc94e, 0xf5a8, 0xcdac, 0x1, 0x1);
        gbc.writeMem(0x37cd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xb3eb, gbc.sp());
        EXPECT(0x37cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0134
        gbc.setState(0x3530, 0x53ca, 0x32a0, 0xecdc, 0x60be, 0xb68b, 0x0, 0x1);
        gbc.writeMem(0x3530, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x53ca, gbc.sp());
        EXPECT(0x3532, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0135
        gbc.setState(0x2f6, 0x6c65, 0x2520, 0xf50, 0xa9e5, 0x5bfa, 0x0, 0x1);
        gbc.writeMem(0x2f6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x6c65, gbc.sp());
        EXPECT(0x2f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0137
        gbc.setState(0x1d99, 0x841e, 0x78a0, 0x8c8f, 0x8e36, 0xaf8a, 0x0, 0x1);
        gbc.writeMem(0x1d99, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x841e, gbc.sp());
        EXPECT(0x1d9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0138
        gbc.setState(0xaf80, 0xcbc, 0xddf0, 0x2d02, 0x615c, 0xaf97, 0x1, 0x0);
        gbc.writeMem(0xaf80, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xcbc, gbc.sp());
        EXPECT(0xaf82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf80));
        EXPECT(0x40, gbc.readMem(0xaf81));
        // CB 40 0139
        gbc.setState(0xe7dd, 0x6669, 0x2760, 0x7989, 0x39ad, 0x1be8, 0x1, 0x0);
        gbc.writeMem(0xe7dd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x6669, gbc.sp());
        EXPECT(0xe7df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7dd));
        EXPECT(0x40, gbc.readMem(0xe7de));
        // CB 40 013A
        gbc.setState(0xa3d, 0x9c58, 0xf8e0, 0x568a, 0x3685, 0xae6a, 0x0, 0x1);
        gbc.writeMem(0xa3d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x9c58, gbc.sp());
        EXPECT(0xa3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 013B
        gbc.setState(0x80d4, 0x1c3c, 0x9090, 0xc989, 0xb3ef, 0xc526, 0x0, 0x0);
        gbc.writeMem(0x80d4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x1c3c, gbc.sp());
        EXPECT(0x80d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80d4));
        EXPECT(0x40, gbc.readMem(0x80d5));
        // CB 40 013D
        gbc.setState(0xbaa2, 0xcc8b, 0xd930, 0xcfa0, 0xe9e4, 0x2bb2, 0x1, 0x0);
        gbc.writeMem(0xbaa2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xcc8b, gbc.sp());
        EXPECT(0xbaa4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaa2));
        EXPECT(0x40, gbc.readMem(0xbaa3));
        // CB 40 013F
        gbc.setState(0xc7e9, 0xa4ef, 0xa200, 0x1431, 0x8213, 0xfa3b, 0x0, 0x1);
        gbc.writeMem(0xc7e9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xa4ef, gbc.sp());
        EXPECT(0xc7eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7e9));
        EXPECT(0x40, gbc.readMem(0xc7ea));
        // CB 40 0140
        gbc.setState(0xbac5, 0x432d, 0xe580, 0x16c2, 0x4bab, 0xbb6b, 0x0, 0x0);
        gbc.writeMem(0xbac5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x432d, gbc.sp());
        EXPECT(0xbac7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbac5));
        EXPECT(0x40, gbc.readMem(0xbac6));
        // CB 40 0141
        gbc.setState(0x1214, 0xf465, 0xa170, 0xc0, 0xfdda, 0x9e5a, 0x0, 0x0);
        gbc.writeMem(0x1214, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xf465, gbc.sp());
        EXPECT(0x1216, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0142
        gbc.setState(0x5b6, 0x3bd6, 0xbfc0, 0xba46, 0xe43, 0x16de, 0x0, 0x0);
        gbc.writeMem(0x5b6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x3bd6, gbc.sp());
        EXPECT(0x5b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0143
        gbc.setState(0x260a, 0x239a, 0xaec0, 0x5d4e, 0xcf32, 0x4f02, 0x0, 0x0);
        gbc.writeMem(0x260a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x239a, gbc.sp());
        EXPECT(0x260c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0144
        gbc.setState(0x60bf, 0xbb11, 0xbfd0, 0xf0b5, 0xa533, 0x88b, 0x0, 0x0);
        gbc.writeMem(0x60bf, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xbb11, gbc.sp());
        EXPECT(0x60c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0145
        gbc.setState(0x2fe9, 0xf22e, 0x40, 0x424c, 0x7d28, 0x36ce, 0x0, 0x0);
        gbc.writeMem(0x2fe9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xf22e, gbc.sp());
        EXPECT(0x2feb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0146
        gbc.setState(0xb448, 0x3852, 0xda90, 0x4b56, 0x1611, 0x3b4d, 0x0, 0x0);
        gbc.writeMem(0xb448, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x3852, gbc.sp());
        EXPECT(0xb44a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb448));
        EXPECT(0x40, gbc.readMem(0xb449));
        // CB 40 0148
        gbc.setState(0x5898, 0x756c, 0xdb30, 0xecc, 0x4c9d, 0x6bc0, 0x1, 0x1);
        gbc.writeMem(0x5898, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x756c, gbc.sp());
        EXPECT(0x589a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0149
        gbc.setState(0xc474, 0xdd3a, 0xf530, 0xd3b1, 0xc831, 0x7049, 0x1, 0x0);
        gbc.writeMem(0xc474, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xdd3a, gbc.sp());
        EXPECT(0xc476, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc474));
        EXPECT(0x40, gbc.readMem(0xc475));
        // CB 40 014A
        gbc.setState(0x24f8, 0x5115, 0xd550, 0x3278, 0x1840, 0x7324, 0x1, 0x1);
        gbc.writeMem(0x24f8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x5115, gbc.sp());
        EXPECT(0x24fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 014B
        gbc.setState(0x43d2, 0x4e51, 0x3cd0, 0x43a4, 0x9451, 0xb49d, 0x0, 0x0);
        gbc.writeMem(0x43d2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x4e51, gbc.sp());
        EXPECT(0x43d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 014C
        gbc.setState(0x56de, 0x124a, 0x4470, 0x762, 0xa72e, 0x8c3f, 0x0, 0x1);
        gbc.writeMem(0x56de, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x124a, gbc.sp());
        EXPECT(0x56e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 014D
        gbc.setState(0xaa7c, 0xd4d2, 0xadc0, 0x2302, 0xec67, 0xc3b1, 0x0, 0x1);
        gbc.writeMem(0xaa7c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xd4d2, gbc.sp());
        EXPECT(0xaa7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa7c));
        EXPECT(0x40, gbc.readMem(0xaa7d));
        // CB 40 014E
        gbc.setState(0xa7ad, 0xe4bb, 0xa140, 0x4485, 0x2257, 0xaa73, 0x1, 0x0);
        gbc.writeMem(0xa7ad, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xe4bb, gbc.sp());
        EXPECT(0xa7af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7ad));
        EXPECT(0x40, gbc.readMem(0xa7ae));
        // CB 40 014F
        gbc.setState(0x84c, 0x1c23, 0x34c0, 0x5f84, 0x79a2, 0xf18e, 0x0, 0x1);
        gbc.writeMem(0x84c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x1c23, gbc.sp());
        EXPECT(0x84e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0150
        gbc.setState(0xdc8b, 0x9ec5, 0x4490, 0x4d17, 0xf45b, 0xddd, 0x0, 0x1);
        gbc.writeMem(0xdc8b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x9ec5, gbc.sp());
        EXPECT(0xdc8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc8b));
        EXPECT(0x40, gbc.readMem(0xdc8c));
        // CB 40 0151
        gbc.setState(0xda09, 0x3feb, 0x2ac0, 0x3b, 0x61cb, 0xfd01, 0x0, 0x0);
        gbc.writeMem(0xda09, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x3feb, gbc.sp());
        EXPECT(0xda0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda09));
        EXPECT(0x40, gbc.readMem(0xda0a));
        // CB 40 0152
        gbc.setState(0xa39a, 0x277b, 0x45a0, 0x12a1, 0x64ae, 0xec1f, 0x0, 0x0);
        gbc.writeMem(0xa39a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x277b, gbc.sp());
        EXPECT(0xa39c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa39a));
        EXPECT(0x40, gbc.readMem(0xa39b));
        // CB 40 0153
        gbc.setState(0xeefc, 0x1e0d, 0x18d0, 0xb590, 0x317e, 0x9462, 0x1, 0x1);
        gbc.writeMem(0xeefc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x1e0d, gbc.sp());
        EXPECT(0xeefe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeefc));
        EXPECT(0x40, gbc.readMem(0xeefd));
        // CB 40 0154
        gbc.setState(0x29c9, 0x36dd, 0xa20, 0x314c, 0xb59d, 0xcdb6, 0x0, 0x0);
        gbc.writeMem(0x29c9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x36dd, gbc.sp());
        EXPECT(0x29cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0155
        gbc.setState(0x8d37, 0x5a11, 0x80d0, 0x924f, 0xca20, 0xd11, 0x1, 0x0);
        gbc.writeMem(0x8d37, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x5a11, gbc.sp());
        EXPECT(0x8d39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d37));
        EXPECT(0x40, gbc.readMem(0x8d38));
        // CB 40 0156
        gbc.setState(0x81c1, 0x4043, 0x99f0, 0xd503, 0x16ab, 0x9c5, 0x1, 0x1);
        gbc.writeMem(0x81c1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x4043, gbc.sp());
        EXPECT(0x81c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81c1));
        EXPECT(0x40, gbc.readMem(0x81c2));
        // CB 40 0157
        gbc.setState(0x971f, 0x1f86, 0xcd70, 0x5f7a, 0x578, 0xbfe0, 0x1, 0x1);
        gbc.writeMem(0x971f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x1f86, gbc.sp());
        EXPECT(0x9721, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x971f));
        EXPECT(0x40, gbc.readMem(0x9720));
        // CB 40 0158
        gbc.setState(0xd300, 0x546c, 0xaec0, 0x5f0d, 0xdea4, 0xcf08, 0x0, 0x1);
        gbc.writeMem(0xd300, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x546c, gbc.sp());
        EXPECT(0xd302, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd300));
        EXPECT(0x40, gbc.readMem(0xd301));
        // CB 40 0159
        gbc.setState(0x6437, 0x9ea6, 0xca50, 0x4d53, 0x548a, 0x2584, 0x1, 0x1);
        gbc.writeMem(0x6437, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x9ea6, gbc.sp());
        EXPECT(0x6439, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 015A
        gbc.setState(0xa49f, 0xc89c, 0x6550, 0xe95e, 0x57a2, 0x38c7, 0x1, 0x0);
        gbc.writeMem(0xa49f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xc89c, gbc.sp());
        EXPECT(0xa4a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa49f));
        EXPECT(0x40, gbc.readMem(0xa4a0));
        // CB 40 015B
        gbc.setState(0x9a9f, 0x5d4e, 0x1e30, 0x6c2b, 0xe14f, 0xc45d, 0x0, 0x0);
        gbc.writeMem(0x9a9f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x5d4e, gbc.sp());
        EXPECT(0x9aa1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a9f));
        EXPECT(0x40, gbc.readMem(0x9aa0));
        // CB 40 015C
        gbc.setState(0x9e9b, 0x78d1, 0xf120, 0xc865, 0xda3d, 0x5c2, 0x0, 0x1);
        gbc.writeMem(0x9e9b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x78d1, gbc.sp());
        EXPECT(0x9e9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e9b));
        EXPECT(0x40, gbc.readMem(0x9e9c));
        // CB 40 015D
        gbc.setState(0x1232, 0x824e, 0x30a0, 0xddca, 0xa127, 0x4900, 0x1, 0x0);
        gbc.writeMem(0x1232, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x824e, gbc.sp());
        EXPECT(0x1234, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 015E
        gbc.setState(0x8293, 0x1049, 0xb340, 0xd43e, 0x610f, 0x7bfe, 0x1, 0x1);
        gbc.writeMem(0x8293, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x1049, gbc.sp());
        EXPECT(0x8295, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8293));
        EXPECT(0x40, gbc.readMem(0x8294));
        // CB 40 015F
        gbc.setState(0xa0c9, 0x11ee, 0x51f0, 0x3f2a, 0xfc8d, 0x8d5a, 0x0, 0x1);
        gbc.writeMem(0xa0c9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x11ee, gbc.sp());
        EXPECT(0xa0cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0c9));
        EXPECT(0x40, gbc.readMem(0xa0ca));
        // CB 40 0160
        gbc.setState(0x5fd6, 0x5d1e, 0x96b0, 0xfddf, 0xb4ca, 0x2a15, 0x0, 0x1);
        gbc.writeMem(0x5fd6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x5d1e, gbc.sp());
        EXPECT(0x5fd8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0161
        gbc.setState(0xd99, 0xa5ef, 0x5d40, 0xfa85, 0x5b52, 0x3ab2, 0x0, 0x1);
        gbc.writeMem(0xd99, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xa5ef, gbc.sp());
        EXPECT(0xd9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0162
        gbc.setState(0x72cf, 0xa40b, 0x260, 0xed85, 0x8c41, 0x9c78, 0x1, 0x0);
        gbc.writeMem(0x72cf, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xa40b, gbc.sp());
        EXPECT(0x72d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0163
        gbc.setState(0x4cc1, 0x5eac, 0x7040, 0x4ef7, 0xd5e8, 0x7d32, 0x1, 0x1);
        gbc.writeMem(0x4cc1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x5eac, gbc.sp());
        EXPECT(0x4cc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0164
        gbc.setState(0x5585, 0x76fa, 0x5670, 0x9a0d, 0xe156, 0xdf47, 0x1, 0x1);
        gbc.writeMem(0x5585, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x76fa, gbc.sp());
        EXPECT(0x5587, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0165
        gbc.setState(0xe5a7, 0xf913, 0x9600, 0x7d63, 0x32c9, 0xb79c, 0x1, 0x0);
        gbc.writeMem(0xe5a7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xf913, gbc.sp());
        EXPECT(0xe5a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5a7));
        EXPECT(0x40, gbc.readMem(0xe5a8));
        // CB 40 0166
        gbc.setState(0x76b, 0x4634, 0xd870, 0xdf9e, 0xb5c8, 0xe167, 0x0, 0x0);
        gbc.writeMem(0x76b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x4634, gbc.sp());
        EXPECT(0x76d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0167
        gbc.setState(0xa654, 0xe148, 0xde90, 0xa150, 0x858c, 0x8144, 0x1, 0x0);
        gbc.writeMem(0xa654, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xe148, gbc.sp());
        EXPECT(0xa656, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa654));
        EXPECT(0x40, gbc.readMem(0xa655));
        // CB 40 0168
        gbc.setState(0xceb8, 0x7d00, 0x1470, 0xaeac, 0x9151, 0x2591, 0x1, 0x1);
        gbc.writeMem(0xceb8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x7d00, gbc.sp());
        EXPECT(0xceba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xceb8));
        EXPECT(0x40, gbc.readMem(0xceb9));
        // CB 40 0169
        gbc.setState(0xda97, 0x1eaf, 0x9880, 0x26d5, 0x3843, 0x933d, 0x0, 0x1);
        gbc.writeMem(0xda97, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x1eaf, gbc.sp());
        EXPECT(0xda99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda97));
        EXPECT(0x40, gbc.readMem(0xda98));
        // CB 40 016A
        gbc.setState(0xc2e5, 0x5f98, 0xfba0, 0x847f, 0x6a25, 0xe5cf, 0x0, 0x1);
        gbc.writeMem(0xc2e5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x5f98, gbc.sp());
        EXPECT(0xc2e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2e5));
        EXPECT(0x40, gbc.readMem(0xc2e6));
        // CB 40 016B
        gbc.setState(0xcd41, 0x9371, 0x7a50, 0x4cb3, 0x5a8a, 0xb6e0, 0x0, 0x1);
        gbc.writeMem(0xcd41, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x9371, gbc.sp());
        EXPECT(0xcd43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd41));
        EXPECT(0x40, gbc.readMem(0xcd42));
        // CB 40 016C
        gbc.setState(0x989b, 0x5b1a, 0xe570, 0x595c, 0x8a7a, 0x3440, 0x0, 0x0);
        gbc.writeMem(0x989b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x5b1a, gbc.sp());
        EXPECT(0x989d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x989b));
        EXPECT(0x40, gbc.readMem(0x989c));
        // CB 40 016D
        gbc.setState(0x25e8, 0x95b0, 0x1240, 0x96b0, 0x3a62, 0x107d, 0x1, 0x0);
        gbc.writeMem(0x25e8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x95b0, gbc.sp());
        EXPECT(0x25ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 016E
        gbc.setState(0x2138, 0x1963, 0xaff0, 0xdf19, 0x7608, 0x756, 0x1, 0x1);
        gbc.writeMem(0x2138, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x1963, gbc.sp());
        EXPECT(0x213a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 016F
        gbc.setState(0xc76b, 0x34d6, 0x2b50, 0x28c5, 0xa534, 0xcff2, 0x1, 0x0);
        gbc.writeMem(0xc76b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x34d6, gbc.sp());
        EXPECT(0xc76d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc76b));
        EXPECT(0x40, gbc.readMem(0xc76c));
        // CB 40 0170
        gbc.setState(0x33c3, 0x5945, 0xfa70, 0xd0ba, 0x4b44, 0x9324, 0x1, 0x1);
        gbc.writeMem(0x33c3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x5945, gbc.sp());
        EXPECT(0x33c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0171
        gbc.setState(0x3400, 0x60a8, 0xe00, 0x7539, 0x657a, 0x1a6c, 0x1, 0x1);
        gbc.writeMem(0x3400, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x60a8, gbc.sp());
        EXPECT(0x3402, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0172
        gbc.setState(0x8c9f, 0x2110, 0x61d0, 0xaa42, 0xb76, 0xf3dd, 0x1, 0x1);
        gbc.writeMem(0x8c9f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x2110, gbc.sp());
        EXPECT(0x8ca1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c9f));
        EXPECT(0x40, gbc.readMem(0x8ca0));
        // CB 40 0173
        gbc.setState(0xc602, 0x6df0, 0xf030, 0x8b4b, 0x8205, 0x9ecd, 0x1, 0x0);
        gbc.writeMem(0xc602, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x6df0, gbc.sp());
        EXPECT(0xc604, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc602));
        EXPECT(0x40, gbc.readMem(0xc603));
        // CB 40 0174
        gbc.setState(0x2e7e, 0x3f93, 0x47d0, 0xc0f0, 0xa8e3, 0x1180, 0x1, 0x1);
        gbc.writeMem(0x2e7e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x3f93, gbc.sp());
        EXPECT(0x2e80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0175
        gbc.setState(0xc14, 0xd083, 0xab20, 0xcffc, 0xd28e, 0x9a15, 0x1, 0x0);
        gbc.writeMem(0xc14, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xd083, gbc.sp());
        EXPECT(0xc16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0176
        gbc.setState(0xbcee, 0x977e, 0x7e00, 0xc020, 0xf446, 0x3ba0, 0x0, 0x1);
        gbc.writeMem(0xbcee, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x977e, gbc.sp());
        EXPECT(0xbcf0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcee));
        EXPECT(0x40, gbc.readMem(0xbcef));
        // CB 40 0177
        gbc.setState(0x10be, 0x325c, 0xfad0, 0x4b71, 0x3997, 0x6088, 0x0, 0x0);
        gbc.writeMem(0x10be, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x325c, gbc.sp());
        EXPECT(0x10c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0178
        gbc.setState(0x5be0, 0xbaf7, 0x4100, 0x912, 0x8c0a, 0x6dc3, 0x0, 0x0);
        gbc.writeMem(0x5be0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xbaf7, gbc.sp());
        EXPECT(0x5be2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0179
        gbc.setState(0x8c36, 0x3885, 0xb690, 0x8e19, 0x5217, 0x5c68, 0x0, 0x0);
        gbc.writeMem(0x8c36, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x3885, gbc.sp());
        EXPECT(0x8c38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c36));
        EXPECT(0x40, gbc.readMem(0x8c37));
        // CB 40 017A
        gbc.setState(0xed69, 0xfd41, 0x51c0, 0x71d, 0x3846, 0x92b, 0x0, 0x1);
        gbc.writeMem(0xed69, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xfd41, gbc.sp());
        EXPECT(0xed6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed69));
        EXPECT(0x40, gbc.readMem(0xed6a));
        // CB 40 017B
        gbc.setState(0x911, 0x86a7, 0xac70, 0x57e, 0xd037, 0x5ae4, 0x0, 0x0);
        gbc.writeMem(0x911, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x86a7, gbc.sp());
        EXPECT(0x913, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 017C
        gbc.setState(0xc949, 0x3dc0, 0x52c0, 0xdcb8, 0x3fc2, 0xbfdb, 0x1, 0x0);
        gbc.writeMem(0xc949, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x3dc0, gbc.sp());
        EXPECT(0xc94b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc949));
        EXPECT(0x40, gbc.readMem(0xc94a));
        // CB 40 017D
        gbc.setState(0x412a, 0xb343, 0x57c0, 0xe422, 0xa281, 0x2599, 0x1, 0x1);
        gbc.writeMem(0x412a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xb343, gbc.sp());
        EXPECT(0x412c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 017E
        gbc.setState(0xeea8, 0x43ea, 0xe1d0, 0xca36, 0x4407, 0x65e7, 0x1, 0x1);
        gbc.writeMem(0xeea8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x43ea, gbc.sp());
        EXPECT(0xeeaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeea8));
        EXPECT(0x40, gbc.readMem(0xeea9));
        // CB 40 017F
        gbc.setState(0x4dcd, 0x346c, 0x80e0, 0xb94f, 0xeb74, 0x5b4e, 0x0, 0x1);
        gbc.writeMem(0x4dcd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x346c, gbc.sp());
        EXPECT(0x4dcf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0180
        gbc.setState(0xe473, 0xe156, 0xec0, 0x737e, 0xe050, 0x21cc, 0x1, 0x0);
        gbc.writeMem(0xe473, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xe156, gbc.sp());
        EXPECT(0xe475, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe473));
        EXPECT(0x40, gbc.readMem(0xe474));
        // CB 40 0181
        gbc.setState(0x538e, 0x9a0c, 0x3360, 0xb394, 0x3684, 0xe84d, 0x1, 0x0);
        gbc.writeMem(0x538e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x9a0c, gbc.sp());
        EXPECT(0x5390, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0183
        gbc.setState(0x21b8, 0xcac4, 0x540, 0x9583, 0xb095, 0x69a2, 0x0, 0x0);
        gbc.writeMem(0x21b8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xcac4, gbc.sp());
        EXPECT(0x21ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0184
        gbc.setState(0x9cc1, 0xd2e3, 0x7480, 0xe0de, 0x23e, 0x41e9, 0x0, 0x1);
        gbc.writeMem(0x9cc1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xd2e3, gbc.sp());
        EXPECT(0x9cc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cc1));
        EXPECT(0x40, gbc.readMem(0x9cc2));
        // CB 40 0185
        gbc.setState(0x8f4, 0x6882, 0x4340, 0x301e, 0xaa4c, 0x5d32, 0x0, 0x1);
        gbc.writeMem(0x8f4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x6882, gbc.sp());
        EXPECT(0x8f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0187
        gbc.setState(0x345f, 0x5c9, 0x38e0, 0x32fc, 0xa4e0, 0x5c2, 0x1, 0x1);
        gbc.writeMem(0x345f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x5c9, gbc.sp());
        EXPECT(0x3461, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0188
        gbc.setState(0xe14c, 0xbecf, 0xd3f0, 0xb174, 0xac1a, 0x4bcf, 0x0, 0x1);
        gbc.writeMem(0xe14c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xbecf, gbc.sp());
        EXPECT(0xe14e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe14c));
        EXPECT(0x40, gbc.readMem(0xe14d));
        // CB 40 0189
        gbc.setState(0x35b2, 0x887b, 0xa950, 0x8f11, 0xf4c6, 0xfc05, 0x1, 0x1);
        gbc.writeMem(0x35b2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x887b, gbc.sp());
        EXPECT(0x35b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 018A
        gbc.setState(0x7ccd, 0xe708, 0x4f20, 0x3a72, 0x79df, 0x8688, 0x0, 0x0);
        gbc.writeMem(0x7ccd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xe708, gbc.sp());
        EXPECT(0x7ccf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 018B
        gbc.setState(0x2ec8, 0xca97, 0x21c0, 0x5b96, 0x7f36, 0xd17b, 0x1, 0x0);
        gbc.writeMem(0x2ec8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xca97, gbc.sp());
        EXPECT(0x2eca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 018C
        gbc.setState(0x4c39, 0xba2b, 0x4090, 0xb98f, 0x5a52, 0xcce2, 0x0, 0x1);
        gbc.writeMem(0x4c39, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xba2b, gbc.sp());
        EXPECT(0x4c3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 018E
        gbc.setState(0x9023, 0x9640, 0xdbf0, 0x66a1, 0x5b63, 0x4fe0, 0x1, 0x0);
        gbc.writeMem(0x9023, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x9640, gbc.sp());
        EXPECT(0x9025, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9023));
        EXPECT(0x40, gbc.readMem(0x9024));
        // CB 40 018F
        gbc.setState(0x724c, 0x3fd0, 0xdd40, 0x6f44, 0x11d0, 0xbaf4, 0x1, 0x0);
        gbc.writeMem(0x724c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x3fd0, gbc.sp());
        EXPECT(0x724e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0190
        gbc.setState(0x241d, 0x6c37, 0xbf70, 0x2f0c, 0x7854, 0x5765, 0x0, 0x1);
        gbc.writeMem(0x241d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x6c37, gbc.sp());
        EXPECT(0x241f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0191
        gbc.setState(0x57f0, 0x2f63, 0xb940, 0xf40f, 0x6bfc, 0x7726, 0x0, 0x1);
        gbc.writeMem(0x57f0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x2f63, gbc.sp());
        EXPECT(0x57f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0192
        gbc.setState(0x4b, 0x7cb, 0xfc70, 0x75e2, 0x7830, 0x99c6, 0x0, 0x0);
        gbc.writeMem(0x4b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x7cb, gbc.sp());
        EXPECT(0x4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0194
        gbc.setState(0xddd0, 0x1e0d, 0xacf0, 0x6871, 0xaa40, 0x92a9, 0x1, 0x0);
        gbc.writeMem(0xddd0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x1e0d, gbc.sp());
        EXPECT(0xddd2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddd0));
        EXPECT(0x40, gbc.readMem(0xddd1));
        // CB 40 0195
        gbc.setState(0x64, 0x7486, 0x9ea0, 0xe2f1, 0x129b, 0x92ae, 0x0, 0x0);
        gbc.writeMem(0x64, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x7486, gbc.sp());
        EXPECT(0x66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0196
        gbc.setState(0xc5e3, 0x5d77, 0xd690, 0x7fc9, 0x7da2, 0x2b39, 0x0, 0x0);
        gbc.writeMem(0xc5e3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x5d77, gbc.sp());
        EXPECT(0xc5e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5e3));
        EXPECT(0x40, gbc.readMem(0xc5e4));
        // CB 40 0197
        gbc.setState(0xb6e7, 0xa519, 0x35e0, 0x5c7a, 0xb364, 0x23bc, 0x1, 0x1);
        gbc.writeMem(0xb6e7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xa519, gbc.sp());
        EXPECT(0xb6e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6e7));
        EXPECT(0x40, gbc.readMem(0xb6e8));
        // CB 40 0198
        gbc.setState(0x9754, 0x1f04, 0x7d60, 0xe138, 0xbc4e, 0x1c5f, 0x0, 0x0);
        gbc.writeMem(0x9754, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x1f04, gbc.sp());
        EXPECT(0x9756, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9754));
        EXPECT(0x40, gbc.readMem(0x9755));
        // CB 40 0199
        gbc.setState(0x7b58, 0xb1ba, 0x3280, 0xc3e7, 0x6ca5, 0x63ad, 0x1, 0x1);
        gbc.writeMem(0x7b58, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xb1ba, gbc.sp());
        EXPECT(0x7b5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 019A
        gbc.setState(0x3579, 0xdbb1, 0x300, 0x13cc, 0x47b6, 0xa9df, 0x1, 0x1);
        gbc.writeMem(0x3579, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xdbb1, gbc.sp());
        EXPECT(0x357b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 019B
        gbc.setState(0x7ba4, 0x3e5b, 0x8370, 0x9ffc, 0x6cb0, 0x58cc, 0x1, 0x1);
        gbc.writeMem(0x7ba4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x3e5b, gbc.sp());
        EXPECT(0x7ba6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 019C
        gbc.setState(0xdad0, 0xcb1f, 0xf290, 0x6a60, 0x5b78, 0x3ece, 0x1, 0x1);
        gbc.writeMem(0xdad0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xcb1f, gbc.sp());
        EXPECT(0xdad2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdad0));
        EXPECT(0x40, gbc.readMem(0xdad1));
        // CB 40 019D
        gbc.setState(0xe9e, 0x3258, 0xad0, 0x732, 0x3bb, 0xc410, 0x1, 0x1);
        gbc.writeMem(0xe9e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x3258, gbc.sp());
        EXPECT(0xea0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 019E
        gbc.setState(0x9f3c, 0xba06, 0xcf90, 0x25d3, 0xa10e, 0x7f44, 0x1, 0x1);
        gbc.writeMem(0x9f3c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xba06, gbc.sp());
        EXPECT(0x9f3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f3c));
        EXPECT(0x40, gbc.readMem(0x9f3d));
        // CB 40 019F
        gbc.setState(0x40d6, 0x9b7b, 0x8af0, 0x99d5, 0xd347, 0x4cd, 0x1, 0x1);
        gbc.writeMem(0x40d6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x9b7b, gbc.sp());
        EXPECT(0x40d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01A0
        gbc.setState(0xe8cc, 0x6157, 0x9660, 0x46bb, 0x75bf, 0xeae0, 0x1, 0x0);
        gbc.writeMem(0xe8cc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x6157, gbc.sp());
        EXPECT(0xe8ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8cc));
        EXPECT(0x40, gbc.readMem(0xe8cd));
        // CB 40 01A1
        gbc.setState(0x9bdd, 0xf343, 0x22e0, 0x6c72, 0xc65a, 0xc387, 0x0, 0x0);
        gbc.writeMem(0x9bdd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xf343, gbc.sp());
        EXPECT(0x9bdf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bdd));
        EXPECT(0x40, gbc.readMem(0x9bde));
        // CB 40 01A2
        gbc.setState(0x8625, 0xba53, 0x9820, 0x74af, 0xc635, 0x1b00, 0x1, 0x1);
        gbc.writeMem(0x8625, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xba53, gbc.sp());
        EXPECT(0x8627, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8625));
        EXPECT(0x40, gbc.readMem(0x8626));
        // CB 40 01A3
        gbc.setState(0xa43d, 0xa2db, 0x76a0, 0x4646, 0x7815, 0x2027, 0x0, 0x1);
        gbc.writeMem(0xa43d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xa2db, gbc.sp());
        EXPECT(0xa43f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa43d));
        EXPECT(0x40, gbc.readMem(0xa43e));
        // CB 40 01A4
        gbc.setState(0x4e10, 0x841d, 0x30d0, 0xcf70, 0x501e, 0x64e2, 0x0, 0x1);
        gbc.writeMem(0x4e10, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x841d, gbc.sp());
        EXPECT(0x4e12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01A5
        gbc.setState(0x157a, 0x4187, 0x6f50, 0xad86, 0xe928, 0x4d7a, 0x0, 0x1);
        gbc.writeMem(0x157a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x4187, gbc.sp());
        EXPECT(0x157c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01A6
        gbc.setState(0x8fd1, 0x981, 0x140, 0xfaa2, 0xcd6a, 0xc373, 0x1, 0x1);
        gbc.writeMem(0x8fd1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x981, gbc.sp());
        EXPECT(0x8fd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fd1));
        EXPECT(0x40, gbc.readMem(0x8fd2));
        // CB 40 01A7
        gbc.setState(0xd64c, 0xdde0, 0x14a0, 0x1ede, 0x78e9, 0x930c, 0x0, 0x0);
        gbc.writeMem(0xd64c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xdde0, gbc.sp());
        EXPECT(0xd64e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd64c));
        EXPECT(0x40, gbc.readMem(0xd64d));
        // CB 40 01A8
        gbc.setState(0x7f9f, 0xbee4, 0x5b10, 0xa769, 0xf61f, 0x4357, 0x1, 0x0);
        gbc.writeMem(0x7f9f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xbee4, gbc.sp());
        EXPECT(0x7fa1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01A9
        gbc.setState(0xa6a2, 0xac1, 0x6390, 0x5d5c, 0xaccc, 0x8e43, 0x0, 0x0);
        gbc.writeMem(0xa6a2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xac1, gbc.sp());
        EXPECT(0xa6a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6a2));
        EXPECT(0x40, gbc.readMem(0xa6a3));
        // CB 40 01AA
        gbc.setState(0x4349, 0x4b06, 0x5190, 0xa325, 0x3639, 0x4f18, 0x0, 0x1);
        gbc.writeMem(0x4349, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x4b06, gbc.sp());
        EXPECT(0x434b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01AB
        gbc.setState(0xdec6, 0xf758, 0x9110, 0xe3ea, 0xdb48, 0xa35f, 0x1, 0x0);
        gbc.writeMem(0xdec6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xf758, gbc.sp());
        EXPECT(0xdec8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdec6));
        EXPECT(0x40, gbc.readMem(0xdec7));
        // CB 40 01AC
        gbc.setState(0x17a0, 0x329d, 0x3960, 0x2b76, 0x13f8, 0xa95e, 0x0, 0x0);
        gbc.writeMem(0x17a0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x329d, gbc.sp());
        EXPECT(0x17a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01AD
        gbc.setState(0xa8c2, 0xc25, 0x38e0, 0xba92, 0x87b1, 0x2e9, 0x1, 0x0);
        gbc.writeMem(0xa8c2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xc25, gbc.sp());
        EXPECT(0xa8c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8c2));
        EXPECT(0x40, gbc.readMem(0xa8c3));
        // CB 40 01AE
        gbc.setState(0x5b75, 0x9399, 0x8c30, 0x1d24, 0x900a, 0xde57, 0x0, 0x1);
        gbc.writeMem(0x5b75, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x9399, gbc.sp());
        EXPECT(0x5b77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01B0
        gbc.setState(0x68e8, 0xa301, 0xb480, 0xa4b8, 0x400b, 0x7777, 0x1, 0x0);
        gbc.writeMem(0x68e8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xa301, gbc.sp());
        EXPECT(0x68ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01B1
        gbc.setState(0x342e, 0x3342, 0x5f0, 0xdcef, 0x1c30, 0x30b7, 0x1, 0x0);
        gbc.writeMem(0x342e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x3342, gbc.sp());
        EXPECT(0x3430, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01B3
        gbc.setState(0x3954, 0x96a1, 0x1290, 0xb994, 0xbff2, 0xe3ce, 0x0, 0x0);
        gbc.writeMem(0x3954, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x96a1, gbc.sp());
        EXPECT(0x3956, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01B4
        gbc.setState(0x6761, 0x9af7, 0x8d40, 0x6c63, 0xbc3a, 0xab7a, 0x0, 0x0);
        gbc.writeMem(0x6761, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x9af7, gbc.sp());
        EXPECT(0x6763, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01B5
        gbc.setState(0x2011, 0x25fc, 0xe5c0, 0x66f9, 0x1886, 0x681f, 0x1, 0x0);
        gbc.writeMem(0x2011, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x25fc, gbc.sp());
        EXPECT(0x2013, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01B6
        gbc.setState(0xb14f, 0xef0, 0xba90, 0xb395, 0x597f, 0x16d7, 0x1, 0x0);
        gbc.writeMem(0xb14f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xef0, gbc.sp());
        EXPECT(0xb151, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb14f));
        EXPECT(0x40, gbc.readMem(0xb150));
        // CB 40 01B7
        gbc.setState(0xba20, 0x5994, 0xacd0, 0x3aff, 0xef9c, 0xdaf5, 0x0, 0x1);
        gbc.writeMem(0xba20, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x5994, gbc.sp());
        EXPECT(0xba22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba20));
        EXPECT(0x40, gbc.readMem(0xba21));
        // CB 40 01B8
        gbc.setState(0xc164, 0xef46, 0x8970, 0x8ff3, 0xa2cb, 0x92f0, 0x0, 0x1);
        gbc.writeMem(0xc164, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xef46, gbc.sp());
        EXPECT(0xc166, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc164));
        EXPECT(0x40, gbc.readMem(0xc165));
        // CB 40 01B9
        gbc.setState(0xd7ba, 0xff8a, 0xb1e0, 0x2f5, 0x1ee, 0x84d4, 0x0, 0x1);
        gbc.writeMem(0xd7ba, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xff8a, gbc.sp());
        EXPECT(0xd7bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7ba));
        EXPECT(0x40, gbc.readMem(0xd7bb));
        // CB 40 01BA
        gbc.setState(0xed78, 0x6c37, 0x5010, 0xc79c, 0xb150, 0xc9a1, 0x0, 0x1);
        gbc.writeMem(0xed78, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x6c37, gbc.sp());
        EXPECT(0xed7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed78));
        EXPECT(0x40, gbc.readMem(0xed79));
        // CB 40 01BB
        gbc.setState(0x854d, 0x6e6e, 0x19a0, 0x89b0, 0x9708, 0x822b, 0x1, 0x1);
        gbc.writeMem(0x854d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x6e6e, gbc.sp());
        EXPECT(0x854f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x854d));
        EXPECT(0x40, gbc.readMem(0x854e));
        // CB 40 01BC
        gbc.setState(0x7383, 0xd282, 0xa1d0, 0x5d20, 0x345c, 0x90b5, 0x0, 0x0);
        gbc.writeMem(0x7383, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xd282, gbc.sp());
        EXPECT(0x7385, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01BD
        gbc.setState(0x1578, 0x9bc9, 0x64a0, 0x318, 0xd3db, 0xe419, 0x0, 0x0);
        gbc.writeMem(0x1578, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x9bc9, gbc.sp());
        EXPECT(0x157a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01BE
        gbc.setState(0x7538, 0x1f22, 0x4660, 0xd42b, 0x53ad, 0xf63, 0x0, 0x1);
        gbc.writeMem(0x7538, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x1f22, gbc.sp());
        EXPECT(0x753a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01C0
        gbc.setState(0xef3a, 0xc3b0, 0x5420, 0x357a, 0xe2ed, 0x40da, 0x0, 0x0);
        gbc.writeMem(0xef3a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xc3b0, gbc.sp());
        EXPECT(0xef3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef3a));
        EXPECT(0x40, gbc.readMem(0xef3b));
        // CB 40 01C2
        gbc.setState(0x7735, 0xd3d8, 0x2ed0, 0x259f, 0x4cf0, 0x31ae, 0x0, 0x0);
        gbc.writeMem(0x7735, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xd3d8, gbc.sp());
        EXPECT(0x7737, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01C3
        gbc.setState(0xdc56, 0xabda, 0xeff0, 0x5f3b, 0x714a, 0x16fd, 0x1, 0x0);
        gbc.writeMem(0xdc56, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xabda, gbc.sp());
        EXPECT(0xdc58, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc56));
        EXPECT(0x40, gbc.readMem(0xdc57));
        // CB 40 01C4
        gbc.setState(0x5a4f, 0xf9fd, 0x1d60, 0x93ea, 0xe9a8, 0xd13e, 0x0, 0x0);
        gbc.writeMem(0x5a4f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xf9fd, gbc.sp());
        EXPECT(0x5a51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01C5
        gbc.setState(0x534f, 0xbed3, 0x1730, 0xab8a, 0xf0ae, 0x6cf7, 0x1, 0x0);
        gbc.writeMem(0x534f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xbed3, gbc.sp());
        EXPECT(0x5351, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01C6
        gbc.setState(0x7910, 0xd27d, 0x7c80, 0x572e, 0x26a3, 0x63f4, 0x0, 0x1);
        gbc.writeMem(0x7910, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xd27d, gbc.sp());
        EXPECT(0x7912, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01C7
        gbc.setState(0xdf8d, 0xd4e7, 0xdc00, 0xaaa5, 0x2d55, 0x2ae2, 0x1, 0x1);
        gbc.writeMem(0xdf8d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xd4e7, gbc.sp());
        EXPECT(0xdf8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf8d));
        EXPECT(0x40, gbc.readMem(0xdf8e));
        // CB 40 01C8
        gbc.setState(0xc9b9, 0xc802, 0xa480, 0x8302, 0x6641, 0x63d8, 0x0, 0x0);
        gbc.writeMem(0xc9b9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xc802, gbc.sp());
        EXPECT(0xc9bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9b9));
        EXPECT(0x40, gbc.readMem(0xc9ba));
        // CB 40 01C9
        gbc.setState(0xc3cd, 0xa5e7, 0x5fe0, 0x35c, 0x1789, 0x230c, 0x0, 0x0);
        gbc.writeMem(0xc3cd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xa5e7, gbc.sp());
        EXPECT(0xc3cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3cd));
        EXPECT(0x40, gbc.readMem(0xc3ce));
        // CB 40 01CA
        gbc.setState(0x40cc, 0x2f1f, 0x3e10, 0x6677, 0x50ca, 0x6be6, 0x1, 0x0);
        gbc.writeMem(0x40cc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x2f1f, gbc.sp());
        EXPECT(0x40ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01CB
        gbc.setState(0x3d3a, 0x94d, 0x7480, 0x3f24, 0xab01, 0xd2c8, 0x0, 0x0);
        gbc.writeMem(0x3d3a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x94d, gbc.sp());
        EXPECT(0x3d3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01CD
        gbc.setState(0x94ce, 0x18f3, 0xdd00, 0x2ef4, 0x5827, 0xf86e, 0x1, 0x1);
        gbc.writeMem(0x94ce, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x18f3, gbc.sp());
        EXPECT(0x94d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94ce));
        EXPECT(0x40, gbc.readMem(0x94cf));
        // CB 40 01CF
        gbc.setState(0xae1a, 0x57dc, 0x2810, 0x488c, 0xe0b9, 0xfc48, 0x1, 0x0);
        gbc.writeMem(0xae1a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x57dc, gbc.sp());
        EXPECT(0xae1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae1a));
        EXPECT(0x40, gbc.readMem(0xae1b));
        // CB 40 01D0
        gbc.setState(0x52ed, 0x82b8, 0xef80, 0x6f53, 0xe7c3, 0x9a0e, 0x1, 0x0);
        gbc.writeMem(0x52ed, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x82b8, gbc.sp());
        EXPECT(0x52ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01D1
        gbc.setState(0x2d5c, 0x6252, 0x3730, 0x3a1d, 0x44e0, 0xc4a9, 0x0, 0x1);
        gbc.writeMem(0x2d5c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x6252, gbc.sp());
        EXPECT(0x2d5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01D2
        gbc.setState(0xe2a1, 0x3a21, 0xea40, 0xe657, 0x1c94, 0xb80a, 0x1, 0x1);
        gbc.writeMem(0xe2a1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x3a21, gbc.sp());
        EXPECT(0xe2a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2a1));
        EXPECT(0x40, gbc.readMem(0xe2a2));
        // CB 40 01D3
        gbc.setState(0xa5be, 0x9998, 0x7580, 0x2b01, 0xd4d0, 0xb240, 0x1, 0x1);
        gbc.writeMem(0xa5be, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x9998, gbc.sp());
        EXPECT(0xa5c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5be));
        EXPECT(0x40, gbc.readMem(0xa5bf));
        // CB 40 01D4
        gbc.setState(0xac1, 0xb7c5, 0x2630, 0x3b25, 0x1002, 0xd489, 0x1, 0x1);
        gbc.writeMem(0xac1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xb7c5, gbc.sp());
        EXPECT(0xac3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01D5
        gbc.setState(0x6829, 0xfdbe, 0x5870, 0x5b80, 0x13f1, 0xeed5, 0x0, 0x0);
        gbc.writeMem(0x6829, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xfdbe, gbc.sp());
        EXPECT(0x682b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01D6
        gbc.setState(0xcf01, 0x2e2f, 0x6e00, 0x4973, 0x965b, 0x1938, 0x1, 0x0);
        gbc.writeMem(0xcf01, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x2e2f, gbc.sp());
        EXPECT(0xcf03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf01));
        EXPECT(0x40, gbc.readMem(0xcf02));
        // CB 40 01D7
        gbc.setState(0xaac4, 0x3387, 0x4790, 0x8831, 0xdbb2, 0xc3ea, 0x0, 0x0);
        gbc.writeMem(0xaac4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x3387, gbc.sp());
        EXPECT(0xaac6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaac4));
        EXPECT(0x40, gbc.readMem(0xaac5));
        // CB 40 01D8
        gbc.setState(0x1736, 0x5fba, 0x9630, 0x5583, 0x4686, 0xf96b, 0x1, 0x1);
        gbc.writeMem(0x1736, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x5fba, gbc.sp());
        EXPECT(0x1738, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01D9
        gbc.setState(0xdbc0, 0xaf6f, 0x30a0, 0x14f5, 0x6b70, 0xe4ff, 0x0, 0x0);
        gbc.writeMem(0xdbc0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xaf6f, gbc.sp());
        EXPECT(0xdbc2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbc0));
        EXPECT(0x40, gbc.readMem(0xdbc1));
        // CB 40 01DA
        gbc.setState(0x6284, 0xd43a, 0xac0, 0xaa57, 0xd73a, 0x8422, 0x1, 0x0);
        gbc.writeMem(0x6284, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xd43a, gbc.sp());
        EXPECT(0x6286, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01DB
        gbc.setState(0x452b, 0x868e, 0xec30, 0x1fe3, 0xa283, 0xdc77, 0x1, 0x1);
        gbc.writeMem(0x452b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x868e, gbc.sp());
        EXPECT(0x452d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01DC
        gbc.setState(0xa462, 0x2b41, 0x8220, 0xe6df, 0x54c2, 0xbb37, 0x1, 0x1);
        gbc.writeMem(0xa462, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x2b41, gbc.sp());
        EXPECT(0xa464, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa462));
        EXPECT(0x40, gbc.readMem(0xa463));
        // CB 40 01DD
        gbc.setState(0x7284, 0xa918, 0x1890, 0xb8cd, 0xca40, 0x9efa, 0x0, 0x1);
        gbc.writeMem(0x7284, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xa918, gbc.sp());
        EXPECT(0x7286, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01DE
        gbc.setState(0x7dcb, 0xcea0, 0x7340, 0xd6b4, 0x81ca, 0xd907, 0x0, 0x0);
        gbc.writeMem(0x7dcb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xcea0, gbc.sp());
        EXPECT(0x7dcd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01DF
        gbc.setState(0x7a5f, 0xfb93, 0xc3b0, 0x46fb, 0x1760, 0x5f27, 0x0, 0x0);
        gbc.writeMem(0x7a5f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xfb93, gbc.sp());
        EXPECT(0x7a61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01E0
        gbc.setState(0x8af1, 0xb38a, 0xe7b0, 0xe1a8, 0x679a, 0x3c32, 0x1, 0x1);
        gbc.writeMem(0x8af1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xb38a, gbc.sp());
        EXPECT(0x8af3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8af1));
        EXPECT(0x40, gbc.readMem(0x8af2));
        // CB 40 01E1
        gbc.setState(0xdf90, 0xd96a, 0x6e80, 0x846d, 0x288e, 0xf07, 0x0, 0x0);
        gbc.writeMem(0xdf90, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xd96a, gbc.sp());
        EXPECT(0xdf92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf90));
        EXPECT(0x40, gbc.readMem(0xdf91));
        // CB 40 01E2
        gbc.setState(0x4973, 0xb8cf, 0x7890, 0xce72, 0xe23a, 0x2e33, 0x1, 0x1);
        gbc.writeMem(0x4973, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xb8cf, gbc.sp());
        EXPECT(0x4975, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01E3
        gbc.setState(0x3450, 0x9131, 0x410, 0x2615, 0x3f52, 0x23b5, 0x0, 0x0);
        gbc.writeMem(0x3450, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x9131, gbc.sp());
        EXPECT(0x3452, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01E4
        gbc.setState(0x3323, 0x899d, 0xa930, 0x461e, 0xf528, 0x6a2d, 0x1, 0x1);
        gbc.writeMem(0x3323, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x899d, gbc.sp());
        EXPECT(0x3325, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01E5
        gbc.setState(0x1cb3, 0x3a5f, 0xd1a0, 0x5363, 0x5b9d, 0x1529, 0x1, 0x1);
        gbc.writeMem(0x1cb3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x3a5f, gbc.sp());
        EXPECT(0x1cb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01E6
        gbc.setState(0xe2a9, 0x9d4a, 0x7c0, 0x2ad7, 0x2134, 0xf2a2, 0x0, 0x1);
        gbc.writeMem(0xe2a9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x9d4a, gbc.sp());
        EXPECT(0xe2ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2a9));
        EXPECT(0x40, gbc.readMem(0xe2aa));
        // CB 40 01E8
        gbc.setState(0x43d, 0xffb, 0x6fa0, 0xbb29, 0x2e5d, 0xc8ab, 0x1, 0x1);
        gbc.writeMem(0x43d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xffb, gbc.sp());
        EXPECT(0x43f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01E9
        gbc.setState(0xe296, 0x2677, 0x3780, 0xd4ca, 0x1124, 0x1788, 0x0, 0x0);
        gbc.writeMem(0xe296, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x2677, gbc.sp());
        EXPECT(0xe298, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe296));
        EXPECT(0x40, gbc.readMem(0xe297));
        // CB 40 01EA
        gbc.setState(0x1e88, 0x8233, 0x64d0, 0xf294, 0x9cd0, 0x6401, 0x1, 0x1);
        gbc.writeMem(0x1e88, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x8233, gbc.sp());
        EXPECT(0x1e8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01EB
        gbc.setState(0x77b9, 0x1f76, 0xdf40, 0xdbb2, 0x5bcd, 0x4bac, 0x1, 0x1);
        gbc.writeMem(0x77b9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x1f76, gbc.sp());
        EXPECT(0x77bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01EC
        gbc.setState(0xed15, 0xd01b, 0x3820, 0x8b87, 0x778c, 0xa68, 0x0, 0x1);
        gbc.writeMem(0xed15, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xd01b, gbc.sp());
        EXPECT(0xed17, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed15));
        EXPECT(0x40, gbc.readMem(0xed16));
        // CB 40 01ED
        gbc.setState(0x91cd, 0xf14a, 0xd4d0, 0x2d5d, 0xd96, 0x5e93, 0x0, 0x0);
        gbc.writeMem(0x91cd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xf14a, gbc.sp());
        EXPECT(0x91cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91cd));
        EXPECT(0x40, gbc.readMem(0x91ce));
        // CB 40 01EE
        gbc.setState(0xb8c0, 0x630d, 0xc420, 0xb2ca, 0xd5ee, 0x3e80, 0x1, 0x0);
        gbc.writeMem(0xb8c0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x630d, gbc.sp());
        EXPECT(0xb8c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8c0));
        EXPECT(0x40, gbc.readMem(0xb8c1));
        // CB 40 01EF
        gbc.setState(0x7c8, 0xb66a, 0x1cf0, 0x9642, 0xc94, 0x1d09, 0x1, 0x0);
        gbc.writeMem(0x7c8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xb66a, gbc.sp());
        EXPECT(0x7ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01F0
        gbc.setState(0xe9b7, 0xc754, 0xf860, 0x2d72, 0xce6, 0x6891, 0x0, 0x1);
        gbc.writeMem(0xe9b7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xc754, gbc.sp());
        EXPECT(0xe9b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9b7));
        EXPECT(0x40, gbc.readMem(0xe9b8));
        // CB 40 01F1
        gbc.setState(0x149c, 0xe264, 0xfa30, 0xfe7, 0xca1b, 0xfeef, 0x1, 0x0);
        gbc.writeMem(0x149c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xe264, gbc.sp());
        EXPECT(0x149e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01F2
        gbc.setState(0x7edd, 0xaf08, 0xe560, 0x5901, 0x79b3, 0xd814, 0x0, 0x0);
        gbc.writeMem(0x7edd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xaf08, gbc.sp());
        EXPECT(0x7edf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01F3
        gbc.setState(0x602d, 0xf106, 0xf430, 0x3157, 0xffa, 0xef49, 0x0, 0x1);
        gbc.writeMem(0x602d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xf106, gbc.sp());
        EXPECT(0x602f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01F4
        gbc.setState(0xcc, 0xaa19, 0x76c0, 0xe42a, 0x1bcf, 0xe95a, 0x0, 0x1);
        gbc.writeMem(0xcc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xaa19, gbc.sp());
        EXPECT(0xce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01F5
        gbc.setState(0x6bdd, 0xa0fd, 0x5180, 0x903b, 0x12f6, 0xb6b1, 0x1, 0x0);
        gbc.writeMem(0x6bdd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xa0fd, gbc.sp());
        EXPECT(0x6bdf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01F6
        gbc.setState(0x76ce, 0x3897, 0x9560, 0x767d, 0x836b, 0xb8c6, 0x1, 0x0);
        gbc.writeMem(0x76ce, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x3897, gbc.sp());
        EXPECT(0x76d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01F7
        gbc.setState(0xe422, 0xe5aa, 0x3af0, 0x33b1, 0x13a, 0xdd77, 0x0, 0x1);
        gbc.writeMem(0xe422, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xe5aa, gbc.sp());
        EXPECT(0xe424, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe422));
        EXPECT(0x40, gbc.readMem(0xe423));
        // CB 40 01F8
        gbc.setState(0x652, 0x9649, 0x82e0, 0x2272, 0xe27b, 0x8639, 0x0, 0x0);
        gbc.writeMem(0x652, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x9649, gbc.sp());
        EXPECT(0x654, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01F9
        gbc.setState(0x1f85, 0xc8a6, 0xbdb0, 0xbfe8, 0xdc3, 0x50ff, 0x0, 0x1);
        gbc.writeMem(0x1f85, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xc8a6, gbc.sp());
        EXPECT(0x1f87, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01FA
        gbc.setState(0x6d11, 0x3a64, 0xaa0, 0xab80, 0xe274, 0x2844, 0x0, 0x0);
        gbc.writeMem(0x6d11, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x3a64, gbc.sp());
        EXPECT(0x6d13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 01FC
        gbc.setState(0x15c8, 0x27ea, 0xe130, 0x7a93, 0x8285, 0xd2f5, 0x1, 0x1);
        gbc.writeMem(0x15c8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x27ea, gbc.sp());
        EXPECT(0x15ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01FD
        gbc.setState(0x54dc, 0x53d3, 0xde30, 0x4b7a, 0xcea7, 0xedf1, 0x1, 0x0);
        gbc.writeMem(0x54dc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x53d3, gbc.sp());
        EXPECT(0x54de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01FE
        gbc.setState(0x6339, 0x5bea, 0xd2b0, 0x504d, 0x6598, 0xc635, 0x1, 0x1);
        gbc.writeMem(0x6339, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x5bea, gbc.sp());
        EXPECT(0x633b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 01FF
        gbc.setState(0xb044, 0xfce1, 0x2700, 0x735c, 0x1563, 0xdb37, 0x1, 0x0);
        gbc.writeMem(0xb044, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xfce1, gbc.sp());
        EXPECT(0xb046, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb044));
        EXPECT(0x40, gbc.readMem(0xb045));
        // CB 40 0201
        gbc.setState(0xc67e, 0x44da, 0x140, 0x644, 0xa25e, 0x78f4, 0x1, 0x0);
        gbc.writeMem(0xc67e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x44da, gbc.sp());
        EXPECT(0xc680, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc67e));
        EXPECT(0x40, gbc.readMem(0xc67f));
        // CB 40 0202
        gbc.setState(0x86e, 0x5cf8, 0x8d50, 0x3435, 0x7c80, 0xd286, 0x1, 0x0);
        gbc.writeMem(0x86e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x5cf8, gbc.sp());
        EXPECT(0x870, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0203
        gbc.setState(0x2d31, 0x8cb2, 0x1a70, 0x5985, 0xdb41, 0x6026, 0x0, 0x0);
        gbc.writeMem(0x2d31, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x8cb2, gbc.sp());
        EXPECT(0x2d33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0204
        gbc.setState(0xdafb, 0xed66, 0x38e0, 0x90c6, 0x6236, 0x9fe9, 0x0, 0x0);
        gbc.writeMem(0xdafb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xed66, gbc.sp());
        EXPECT(0xdafd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdafb));
        EXPECT(0x40, gbc.readMem(0xdafc));
        // CB 40 0205
        gbc.setState(0x7a58, 0x670a, 0x95a0, 0xab8d, 0x8c8f, 0x9268, 0x1, 0x0);
        gbc.writeMem(0x7a58, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x670a, gbc.sp());
        EXPECT(0x7a5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0206
        gbc.setState(0x64e5, 0x7c74, 0x6a50, 0x29a9, 0x3dd7, 0xeccd, 0x0, 0x0);
        gbc.writeMem(0x64e5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x7c74, gbc.sp());
        EXPECT(0x64e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0207
        gbc.setState(0x59a1, 0x8492, 0xfb90, 0x94a1, 0x812e, 0xd700, 0x1, 0x1);
        gbc.writeMem(0x59a1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x8492, gbc.sp());
        EXPECT(0x59a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0208
        gbc.setState(0x7c43, 0x16c7, 0x8960, 0x3021, 0xba0c, 0xaca7, 0x1, 0x0);
        gbc.writeMem(0x7c43, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x16c7, gbc.sp());
        EXPECT(0x7c45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0209
        gbc.setState(0x7e64, 0x9578, 0x8190, 0x5ff9, 0xc37a, 0x9f53, 0x0, 0x0);
        gbc.writeMem(0x7e64, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x9578, gbc.sp());
        EXPECT(0x7e66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 020A
        gbc.setState(0x6543, 0x8a56, 0xff00, 0xf0a6, 0x4b99, 0x938d, 0x0, 0x1);
        gbc.writeMem(0x6543, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x8a56, gbc.sp());
        EXPECT(0x6545, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 020B
        gbc.setState(0x5dae, 0xc350, 0x3940, 0x830d, 0x40b, 0x8342, 0x0, 0x0);
        gbc.writeMem(0x5dae, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xc350, gbc.sp());
        EXPECT(0x5db0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 020C
        gbc.setState(0x8809, 0xbb02, 0xe4f0, 0xfd2e, 0x403d, 0xcd21, 0x0, 0x1);
        gbc.writeMem(0x8809, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xbb02, gbc.sp());
        EXPECT(0x880b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8809));
        EXPECT(0x40, gbc.readMem(0x880a));
        // CB 40 020D
        gbc.setState(0xcb39, 0x2c57, 0x32d0, 0x6254, 0x601d, 0x6c64, 0x0, 0x0);
        gbc.writeMem(0xcb39, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x2c57, gbc.sp());
        EXPECT(0xcb3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb39));
        EXPECT(0x40, gbc.readMem(0xcb3a));
        // CB 40 020E
        gbc.setState(0x517c, 0x223b, 0x2a40, 0xd118, 0x1ac0, 0xe7ce, 0x1, 0x0);
        gbc.writeMem(0x517c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x223b, gbc.sp());
        EXPECT(0x517e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 020F
        gbc.setState(0x73b6, 0xdccd, 0xde60, 0x3fcb, 0x6279, 0xc548, 0x0, 0x0);
        gbc.writeMem(0x73b6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xdccd, gbc.sp());
        EXPECT(0x73b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0210
        gbc.setState(0x2714, 0xf81, 0x5480, 0x95a5, 0xf15, 0x7424, 0x1, 0x0);
        gbc.writeMem(0x2714, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xf81, gbc.sp());
        EXPECT(0x2716, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0211
        gbc.setState(0x29e4, 0x4922, 0x86b0, 0xfbd8, 0xd00d, 0xa853, 0x0, 0x1);
        gbc.writeMem(0x29e4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x4922, gbc.sp());
        EXPECT(0x29e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0212
        gbc.setState(0x2a13, 0x2693, 0x7ee0, 0xa26, 0xb683, 0x5ad6, 0x1, 0x0);
        gbc.writeMem(0x2a13, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x2693, gbc.sp());
        EXPECT(0x2a15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0213
        gbc.setState(0x7f1b, 0xf541, 0xc0c0, 0xa56d, 0xfe33, 0x3c2d, 0x0, 0x0);
        gbc.writeMem(0x7f1b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xf541, gbc.sp());
        EXPECT(0x7f1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0214
        gbc.setState(0x93c9, 0x4cf9, 0xaea0, 0xdfb3, 0xc2cd, 0x8078, 0x0, 0x0);
        gbc.writeMem(0x93c9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x4cf9, gbc.sp());
        EXPECT(0x93cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93c9));
        EXPECT(0x40, gbc.readMem(0x93ca));
        // CB 40 0215
        gbc.setState(0x5535, 0x9722, 0xfaf0, 0x34e5, 0x9af4, 0x21c9, 0x1, 0x1);
        gbc.writeMem(0x5535, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x9722, gbc.sp());
        EXPECT(0x5537, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0216
        gbc.setState(0x2295, 0x9ffa, 0x21b0, 0x23fb, 0x96d6, 0x1d6, 0x0, 0x0);
        gbc.writeMem(0x2295, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x9ffa, gbc.sp());
        EXPECT(0x2297, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0217
        gbc.setState(0xdf41, 0xe0dd, 0xf4d0, 0xe68b, 0xbc6b, 0x77a8, 0x0, 0x0);
        gbc.writeMem(0xdf41, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xe0dd, gbc.sp());
        EXPECT(0xdf43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf41));
        EXPECT(0x40, gbc.readMem(0xdf42));
        // CB 40 0218
        gbc.setState(0xda10, 0xe0f9, 0x2200, 0xff5, 0x91ae, 0x40bc, 0x1, 0x1);
        gbc.writeMem(0xda10, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xe0f9, gbc.sp());
        EXPECT(0xda12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda10));
        EXPECT(0x40, gbc.readMem(0xda11));
        // CB 40 0219
        gbc.setState(0xcef2, 0x368, 0xad40, 0x270f, 0x408, 0x2aa4, 0x1, 0x1);
        gbc.writeMem(0xcef2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x368, gbc.sp());
        EXPECT(0xcef4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcef2));
        EXPECT(0x40, gbc.readMem(0xcef3));
        // CB 40 021A
        gbc.setState(0xed71, 0x4a7c, 0xd5e0, 0x5124, 0x80af, 0x3b6d, 0x0, 0x1);
        gbc.writeMem(0xed71, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x4a7c, gbc.sp());
        EXPECT(0xed73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed71));
        EXPECT(0x40, gbc.readMem(0xed72));
        // CB 40 021B
        gbc.setState(0xb48b, 0xe5c9, 0x9fe0, 0xae30, 0x6e9e, 0xe8af, 0x1, 0x1);
        gbc.writeMem(0xb48b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xe5c9, gbc.sp());
        EXPECT(0xb48d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb48b));
        EXPECT(0x40, gbc.readMem(0xb48c));
        // CB 40 021C
        gbc.setState(0xbb40, 0x7143, 0x5190, 0xd75e, 0x9972, 0xcd07, 0x0, 0x1);
        gbc.writeMem(0xbb40, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x7143, gbc.sp());
        EXPECT(0xbb42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb40));
        EXPECT(0x40, gbc.readMem(0xbb41));
        // CB 40 021D
        gbc.setState(0x5b79, 0x2781, 0x4a80, 0x8f1b, 0xa299, 0xbbb5, 0x1, 0x0);
        gbc.writeMem(0x5b79, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x2781, gbc.sp());
        EXPECT(0x5b7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 021E
        gbc.setState(0xb162, 0x6940, 0x7820, 0x8326, 0xb4de, 0x8c35, 0x0, 0x0);
        gbc.writeMem(0xb162, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x6940, gbc.sp());
        EXPECT(0xb164, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb162));
        EXPECT(0x40, gbc.readMem(0xb163));
        // CB 40 021F
        gbc.setState(0x8d18, 0xf202, 0xb400, 0x8ed6, 0x29de, 0x2a8, 0x0, 0x1);
        gbc.writeMem(0x8d18, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xf202, gbc.sp());
        EXPECT(0x8d1a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d18));
        EXPECT(0x40, gbc.readMem(0x8d19));
        // CB 40 0220
        gbc.setState(0x56bb, 0x75ec, 0xb5e0, 0x2f3a, 0x7bd0, 0x3d6d, 0x0, 0x1);
        gbc.writeMem(0x56bb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x75ec, gbc.sp());
        EXPECT(0x56bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0221
        gbc.setState(0xdb13, 0x92d7, 0x8420, 0xc90, 0xd08e, 0x7c47, 0x1, 0x1);
        gbc.writeMem(0xdb13, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x92d7, gbc.sp());
        EXPECT(0xdb15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb13));
        EXPECT(0x40, gbc.readMem(0xdb14));
        // CB 40 0222
        gbc.setState(0x433d, 0x14cd, 0x22f0, 0x5780, 0x52e9, 0x1f2f, 0x0, 0x0);
        gbc.writeMem(0x433d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x14cd, gbc.sp());
        EXPECT(0x433f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0223
        gbc.setState(0x2953, 0x1988, 0xf520, 0xa79c, 0xd9e2, 0x6c31, 0x0, 0x0);
        gbc.writeMem(0x2953, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x1988, gbc.sp());
        EXPECT(0x2955, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0224
        gbc.setState(0x51fa, 0x61f4, 0x1f90, 0x4b81, 0xe877, 0x58a2, 0x1, 0x0);
        gbc.writeMem(0x51fa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x61f4, gbc.sp());
        EXPECT(0x51fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0225
        gbc.setState(0xc764, 0x9fc2, 0xc6e0, 0x11ae, 0xc348, 0x6b4e, 0x0, 0x0);
        gbc.writeMem(0xc764, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x9fc2, gbc.sp());
        EXPECT(0xc766, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc764));
        EXPECT(0x40, gbc.readMem(0xc765));
        // CB 40 0226
        gbc.setState(0x176c, 0x4694, 0x8da0, 0x272d, 0x1080, 0x574c, 0x0, 0x1);
        gbc.writeMem(0x176c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x4694, gbc.sp());
        EXPECT(0x176e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0228
        gbc.setState(0x5ee5, 0x5c49, 0xb2f0, 0xaabd, 0x820c, 0x7b4a, 0x1, 0x1);
        gbc.writeMem(0x5ee5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x5c49, gbc.sp());
        EXPECT(0x5ee7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0229
        gbc.setState(0x7e47, 0x3b96, 0xfa30, 0x974, 0xa731, 0xaab, 0x0, 0x0);
        gbc.writeMem(0x7e47, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x3b96, gbc.sp());
        EXPECT(0x7e49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 022A
        gbc.setState(0xa70a, 0x8e28, 0xec00, 0x60d1, 0x4a9e, 0xf383, 0x0, 0x1);
        gbc.writeMem(0xa70a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x8e28, gbc.sp());
        EXPECT(0xa70c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa70a));
        EXPECT(0x40, gbc.readMem(0xa70b));
        // CB 40 022B
        gbc.setState(0x878e, 0xfafd, 0xd260, 0xbfea, 0x5883, 0x1365, 0x1, 0x1);
        gbc.writeMem(0x878e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xfafd, gbc.sp());
        EXPECT(0x8790, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x878e));
        EXPECT(0x40, gbc.readMem(0x878f));
        // CB 40 022C
        gbc.setState(0x2f13, 0x55b9, 0x43e0, 0xe5ba, 0x3271, 0x9864, 0x0, 0x1);
        gbc.writeMem(0x2f13, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x55b9, gbc.sp());
        EXPECT(0x2f15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 022D
        gbc.setState(0x77a4, 0x58b2, 0xea70, 0x62f9, 0xa844, 0x73da, 0x1, 0x1);
        gbc.writeMem(0x77a4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x58b2, gbc.sp());
        EXPECT(0x77a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 022E
        gbc.setState(0x8743, 0x30fe, 0x4cf0, 0x55a3, 0x9983, 0x73e4, 0x0, 0x0);
        gbc.writeMem(0x8743, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x30fe, gbc.sp());
        EXPECT(0x8745, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8743));
        EXPECT(0x40, gbc.readMem(0x8744));
        // CB 40 022F
        gbc.setState(0x8f42, 0x1185, 0x7c60, 0x3482, 0x5899, 0x7526, 0x1, 0x0);
        gbc.writeMem(0x8f42, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x1185, gbc.sp());
        EXPECT(0x8f44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f42));
        EXPECT(0x40, gbc.readMem(0x8f43));
        // CB 40 0230
        gbc.setState(0x81da, 0x2d9f, 0x32d0, 0x4669, 0x5ec, 0x5af9, 0x0, 0x0);
        gbc.writeMem(0x81da, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x2d9f, gbc.sp());
        EXPECT(0x81dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81da));
        EXPECT(0x40, gbc.readMem(0x81db));
        // CB 40 0231
        gbc.setState(0x6727, 0xb11e, 0x7fe0, 0x24a2, 0xa4ef, 0x8abb, 0x0, 0x0);
        gbc.writeMem(0x6727, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xb11e, gbc.sp());
        EXPECT(0x6729, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0232
        gbc.setState(0x7fb5, 0x7632, 0x250, 0x79e2, 0x5d65, 0x1a59, 0x0, 0x1);
        gbc.writeMem(0x7fb5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x7632, gbc.sp());
        EXPECT(0x7fb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0233
        gbc.setState(0xecdc, 0x3c2b, 0xbc20, 0x6b5e, 0xd243, 0x1056, 0x1, 0x0);
        gbc.writeMem(0xecdc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x3c2b, gbc.sp());
        EXPECT(0xecde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecdc));
        EXPECT(0x40, gbc.readMem(0xecdd));
        // CB 40 0234
        gbc.setState(0x6dc0, 0x4792, 0x39a0, 0x7ead, 0x9a6f, 0x11a2, 0x0, 0x1);
        gbc.writeMem(0x6dc0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x4792, gbc.sp());
        EXPECT(0x6dc2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0235
        gbc.setState(0x6211, 0x4ffb, 0xa960, 0xfb40, 0xb35c, 0x1e0e, 0x1, 0x0);
        gbc.writeMem(0x6211, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x4ffb, gbc.sp());
        EXPECT(0x6213, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0236
        gbc.setState(0xc54f, 0x339, 0x5a50, 0x4cce, 0x64a3, 0xfac5, 0x0, 0x1);
        gbc.writeMem(0xc54f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x339, gbc.sp());
        EXPECT(0xc551, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc54f));
        EXPECT(0x40, gbc.readMem(0xc550));
        // CB 40 0237
        gbc.setState(0x6970, 0xe3c, 0x28d0, 0x225b, 0x66db, 0x44eb, 0x0, 0x0);
        gbc.writeMem(0x6970, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xe3c, gbc.sp());
        EXPECT(0x6972, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0238
        gbc.setState(0x3458, 0xf1ca, 0xe580, 0x8d46, 0x6ec8, 0xe41e, 0x0, 0x1);
        gbc.writeMem(0x3458, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xf1ca, gbc.sp());
        EXPECT(0x345a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 023A
        gbc.setState(0x5850, 0xb182, 0xdfc0, 0x3fc3, 0xc43e, 0x9a65, 0x1, 0x1);
        gbc.writeMem(0x5850, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xb182, gbc.sp());
        EXPECT(0x5852, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 023B
        gbc.setState(0xb82, 0xea4b, 0x9870, 0x8cd4, 0x96f9, 0x483b, 0x1, 0x1);
        gbc.writeMem(0xb82, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xea4b, gbc.sp());
        EXPECT(0xb84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 023C
        gbc.setState(0xa726, 0x440, 0x7d20, 0x5a1e, 0xffe6, 0x9e7, 0x1, 0x0);
        gbc.writeMem(0xa726, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x440, gbc.sp());
        EXPECT(0xa728, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa726));
        EXPECT(0x40, gbc.readMem(0xa727));
        // CB 40 023D
        gbc.setState(0x7e4c, 0xfb89, 0xd4d0, 0x2cb, 0xa2f5, 0x66c6, 0x1, 0x1);
        gbc.writeMem(0x7e4c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xfb89, gbc.sp());
        EXPECT(0x7e4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 023E
        gbc.setState(0xe456, 0x214f, 0x3620, 0xbbae, 0x21d7, 0xb275, 0x0, 0x0);
        gbc.writeMem(0xe456, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x214f, gbc.sp());
        EXPECT(0xe458, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe456));
        EXPECT(0x40, gbc.readMem(0xe457));
        // CB 40 023F
        gbc.setState(0xb3b5, 0x2494, 0xca50, 0x745d, 0xc8ef, 0x5475, 0x0, 0x1);
        gbc.writeMem(0xb3b5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x2494, gbc.sp());
        EXPECT(0xb3b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3b5));
        EXPECT(0x40, gbc.readMem(0xb3b6));
        // CB 40 0240
        gbc.setState(0x7bc7, 0x82ac, 0x7e80, 0xe33a, 0x447e, 0x4de, 0x0, 0x1);
        gbc.writeMem(0x7bc7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x82ac, gbc.sp());
        EXPECT(0x7bc9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0241
        gbc.setState(0x42e2, 0x5146, 0xf260, 0x42ac, 0x8b00, 0x7b1b, 0x1, 0x1);
        gbc.writeMem(0x42e2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x5146, gbc.sp());
        EXPECT(0x42e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0242
        gbc.setState(0xb25e, 0x8059, 0x40f0, 0x604a, 0x2673, 0x3e4f, 0x1, 0x1);
        gbc.writeMem(0xb25e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x8059, gbc.sp());
        EXPECT(0xb260, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb25e));
        EXPECT(0x40, gbc.readMem(0xb25f));
        // CB 40 0243
        gbc.setState(0x64da, 0xd66b, 0xb5c0, 0x7f9c, 0x3ba3, 0xcb3, 0x1, 0x1);
        gbc.writeMem(0x64da, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xd66b, gbc.sp());
        EXPECT(0x64dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0244
        gbc.setState(0x3f0f, 0xa084, 0x58a0, 0xbd6b, 0xf59e, 0x7e2c, 0x0, 0x1);
        gbc.writeMem(0x3f0f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xa084, gbc.sp());
        EXPECT(0x3f11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0245
        gbc.setState(0x55ed, 0xdd8c, 0xdb20, 0x4ada, 0x63fe, 0x5647, 0x0, 0x0);
        gbc.writeMem(0x55ed, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xdd8c, gbc.sp());
        EXPECT(0x55ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0246
        gbc.setState(0x340f, 0xfaa4, 0x7600, 0x148e, 0x9f2, 0x41ea, 0x0, 0x1);
        gbc.writeMem(0x340f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xfaa4, gbc.sp());
        EXPECT(0x3411, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0248
        gbc.setState(0xab5, 0xda04, 0x3970, 0x2ef2, 0x5160, 0x901, 0x1, 0x1);
        gbc.writeMem(0xab5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xda04, gbc.sp());
        EXPECT(0xab7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0249
        gbc.setState(0xa1fd, 0x39fc, 0xfbe0, 0x2725, 0xa4d4, 0x6490, 0x0, 0x1);
        gbc.writeMem(0xa1fd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x39fc, gbc.sp());
        EXPECT(0xa1ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1fd));
        EXPECT(0x40, gbc.readMem(0xa1fe));
        // CB 40 024A
        gbc.setState(0x2c72, 0x2b6, 0x9d80, 0xf646, 0x3988, 0xba20, 0x0, 0x0);
        gbc.writeMem(0x2c72, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x2b6, gbc.sp());
        EXPECT(0x2c74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 024B
        gbc.setState(0xd0be, 0x4055, 0xc410, 0xac59, 0x2ce5, 0xd7db, 0x0, 0x1);
        gbc.writeMem(0xd0be, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x4055, gbc.sp());
        EXPECT(0xd0c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0be));
        EXPECT(0x40, gbc.readMem(0xd0bf));
        // CB 40 024D
        gbc.setState(0xd2eb, 0x5ff6, 0x2690, 0x7c07, 0xfcb9, 0xaccd, 0x1, 0x0);
        gbc.writeMem(0xd2eb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x5ff6, gbc.sp());
        EXPECT(0xd2ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2eb));
        EXPECT(0x40, gbc.readMem(0xd2ec));
        // CB 40 024E
        gbc.setState(0x5588, 0xf478, 0xa090, 0x5803, 0x9c8e, 0x8e50, 0x1, 0x1);
        gbc.writeMem(0x5588, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xf478, gbc.sp());
        EXPECT(0x558a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 024F
        gbc.setState(0xbf83, 0xbef4, 0x9180, 0x4d9f, 0xea4e, 0xb67f, 0x1, 0x0);
        gbc.writeMem(0xbf83, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xbef4, gbc.sp());
        EXPECT(0xbf85, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf83));
        EXPECT(0x40, gbc.readMem(0xbf84));
        // CB 40 0250
        gbc.setState(0xbb59, 0x186f, 0x5d90, 0xde61, 0x586f, 0xf22b, 0x1, 0x1);
        gbc.writeMem(0xbb59, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x186f, gbc.sp());
        EXPECT(0xbb5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb59));
        EXPECT(0x40, gbc.readMem(0xbb5a));
        // CB 40 0251
        gbc.setState(0x849b, 0xed4b, 0xdcb0, 0x810d, 0x3a9b, 0x1090, 0x1, 0x0);
        gbc.writeMem(0x849b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xed4b, gbc.sp());
        EXPECT(0x849d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x849b));
        EXPECT(0x40, gbc.readMem(0x849c));
        // CB 40 0254
        gbc.setState(0x869c, 0x6ce9, 0x9370, 0xad70, 0xea42, 0xdd6b, 0x1, 0x1);
        gbc.writeMem(0x869c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x6ce9, gbc.sp());
        EXPECT(0x869e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x869c));
        EXPECT(0x40, gbc.readMem(0x869d));
        // CB 40 0255
        gbc.setState(0xa987, 0x7375, 0x62d0, 0x1f4c, 0xdc6e, 0xbfca, 0x0, 0x1);
        gbc.writeMem(0xa987, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x7375, gbc.sp());
        EXPECT(0xa989, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa987));
        EXPECT(0x40, gbc.readMem(0xa988));
        // CB 40 0256
        gbc.setState(0x1528, 0x2854, 0x3f90, 0xc9b2, 0xbae, 0xdd99, 0x0, 0x1);
        gbc.writeMem(0x1528, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x2854, gbc.sp());
        EXPECT(0x152a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0257
        gbc.setState(0xe6e7, 0x9ca8, 0xd620, 0x1f1a, 0x678a, 0xc112, 0x0, 0x0);
        gbc.writeMem(0xe6e7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x9ca8, gbc.sp());
        EXPECT(0xe6e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6e7));
        EXPECT(0x40, gbc.readMem(0xe6e8));
        // CB 40 0258
        gbc.setState(0x686e, 0x5469, 0xa450, 0x9912, 0xd024, 0xa14d, 0x0, 0x1);
        gbc.writeMem(0x686e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x5469, gbc.sp());
        EXPECT(0x6870, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0259
        gbc.setState(0x814c, 0x51c2, 0x9300, 0xde45, 0x90c8, 0x7494, 0x0, 0x0);
        gbc.writeMem(0x814c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x51c2, gbc.sp());
        EXPECT(0x814e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x814c));
        EXPECT(0x40, gbc.readMem(0x814d));
        // CB 40 025A
        gbc.setState(0x595c, 0xf970, 0xf210, 0x7b62, 0xd2e, 0x11df, 0x1, 0x0);
        gbc.writeMem(0x595c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xf970, gbc.sp());
        EXPECT(0x595e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 025B
        gbc.setState(0xd9a1, 0x7541, 0x8560, 0xba05, 0x65f2, 0xac8a, 0x0, 0x1);
        gbc.writeMem(0xd9a1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x7541, gbc.sp());
        EXPECT(0xd9a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9a1));
        EXPECT(0x40, gbc.readMem(0xd9a2));
        // CB 40 025C
        gbc.setState(0x657a, 0xe6c7, 0x6a0, 0x554c, 0x4b4d, 0xdea4, 0x0, 0x1);
        gbc.writeMem(0x657a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xe6c7, gbc.sp());
        EXPECT(0x657c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 025D
        gbc.setState(0xa5df, 0xf7a8, 0x84a0, 0xfdf2, 0xbfec, 0x8b1, 0x1, 0x1);
        gbc.writeMem(0xa5df, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xf7a8, gbc.sp());
        EXPECT(0xa5e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5df));
        EXPECT(0x40, gbc.readMem(0xa5e0));
        // CB 40 025E
        gbc.setState(0xbbad, 0xfc31, 0xf290, 0x72c8, 0x7c55, 0xd52a, 0x0, 0x0);
        gbc.writeMem(0xbbad, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xfc31, gbc.sp());
        EXPECT(0xbbaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbad));
        EXPECT(0x40, gbc.readMem(0xbbae));
        // CB 40 025F
        gbc.setState(0xd706, 0x7d31, 0x6800, 0xf5f, 0x47ae, 0x2fa1, 0x1, 0x0);
        gbc.writeMem(0xd706, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x7d31, gbc.sp());
        EXPECT(0xd708, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd706));
        EXPECT(0x40, gbc.readMem(0xd707));
        // CB 40 0261
        gbc.setState(0xd78, 0x107d, 0x6c40, 0x5092, 0x53ed, 0x2328, 0x0, 0x1);
        gbc.writeMem(0xd78, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x107d, gbc.sp());
        EXPECT(0xd7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0262
        gbc.setState(0xcfd7, 0xcf50, 0x3360, 0x5e3b, 0xa537, 0xed4c, 0x1, 0x1);
        gbc.writeMem(0xcfd7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xcf50, gbc.sp());
        EXPECT(0xcfd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfd7));
        EXPECT(0x40, gbc.readMem(0xcfd8));
        // CB 40 0263
        gbc.setState(0xbb28, 0x534c, 0x83d0, 0x2bc7, 0xe892, 0x904, 0x0, 0x1);
        gbc.writeMem(0xbb28, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x534c, gbc.sp());
        EXPECT(0xbb2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb28));
        EXPECT(0x40, gbc.readMem(0xbb29));
        // CB 40 0264
        gbc.setState(0x7c29, 0x364d, 0x2d20, 0x5be9, 0x9be6, 0xab85, 0x1, 0x1);
        gbc.writeMem(0x7c29, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x364d, gbc.sp());
        EXPECT(0x7c2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0265
        gbc.setState(0x4735, 0x8c93, 0x2e30, 0x66fb, 0x8eb6, 0xc852, 0x1, 0x0);
        gbc.writeMem(0x4735, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x8c93, gbc.sp());
        EXPECT(0x4737, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0266
        gbc.setState(0x66b7, 0x5734, 0x8280, 0x8d, 0x65d9, 0x1f58, 0x1, 0x0);
        gbc.writeMem(0x66b7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x5734, gbc.sp());
        EXPECT(0x66b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0267
        gbc.setState(0x8143, 0x1e26, 0x36c0, 0x1937, 0xebbc, 0x40f5, 0x0, 0x0);
        gbc.writeMem(0x8143, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x1e26, gbc.sp());
        EXPECT(0x8145, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8143));
        EXPECT(0x40, gbc.readMem(0x8144));
        // CB 40 0268
        gbc.setState(0x48a3, 0xca6f, 0xd110, 0x47e0, 0xf61a, 0x5fde, 0x1, 0x0);
        gbc.writeMem(0x48a3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xca6f, gbc.sp());
        EXPECT(0x48a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0269
        gbc.setState(0xdc63, 0x1b29, 0x8970, 0x8730, 0x8237, 0xdd4d, 0x0, 0x1);
        gbc.writeMem(0xdc63, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x1b29, gbc.sp());
        EXPECT(0xdc65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc63));
        EXPECT(0x40, gbc.readMem(0xdc64));
        // CB 40 026A
        gbc.setState(0xc627, 0x51e7, 0xfda0, 0xe990, 0xbcde, 0x1098, 0x0, 0x1);
        gbc.writeMem(0xc627, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x51e7, gbc.sp());
        EXPECT(0xc629, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc627));
        EXPECT(0x40, gbc.readMem(0xc628));
        // CB 40 026B
        gbc.setState(0x6b76, 0xb8ea, 0x13b0, 0xad2a, 0xb86b, 0x2cda, 0x1, 0x0);
        gbc.writeMem(0x6b76, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xb8ea, gbc.sp());
        EXPECT(0x6b78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 026C
        gbc.setState(0xc518, 0xbb1c, 0xb630, 0xf3ac, 0xd4bc, 0x28c7, 0x0, 0x0);
        gbc.writeMem(0xc518, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xbb1c, gbc.sp());
        EXPECT(0xc51a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc518));
        EXPECT(0x40, gbc.readMem(0xc519));
        // CB 40 026D
        gbc.setState(0x9b68, 0xd028, 0xb70, 0x99c2, 0x4a89, 0x5812, 0x1, 0x0);
        gbc.writeMem(0x9b68, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xd028, gbc.sp());
        EXPECT(0x9b6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b68));
        EXPECT(0x40, gbc.readMem(0x9b69));
        // CB 40 026E
        gbc.setState(0x691c, 0xe363, 0xd3c0, 0x4b5a, 0xc52a, 0xdb9f, 0x0, 0x1);
        gbc.writeMem(0x691c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xe363, gbc.sp());
        EXPECT(0x691e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0270
        gbc.setState(0x27ec, 0xaa4c, 0xae30, 0x39c2, 0x6e06, 0x38da, 0x1, 0x0);
        gbc.writeMem(0x27ec, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xaa4c, gbc.sp());
        EXPECT(0x27ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0271
        gbc.setState(0xdb3e, 0x6e8c, 0x4fb0, 0x95d6, 0xf014, 0xfc85, 0x0, 0x0);
        gbc.writeMem(0xdb3e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x6e8c, gbc.sp());
        EXPECT(0xdb40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb3e));
        EXPECT(0x40, gbc.readMem(0xdb3f));
        // CB 40 0272
        gbc.setState(0xaeca, 0xb565, 0x900, 0xd5fe, 0x958d, 0x58d9, 0x1, 0x1);
        gbc.writeMem(0xaeca, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xb565, gbc.sp());
        EXPECT(0xaecc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaeca));
        EXPECT(0x40, gbc.readMem(0xaecb));
        // CB 40 0273
        gbc.setState(0x9129, 0xaaa9, 0xdeb0, 0xc4a0, 0x39ad, 0x67a6, 0x1, 0x0);
        gbc.writeMem(0x9129, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xaaa9, gbc.sp());
        EXPECT(0x912b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9129));
        EXPECT(0x40, gbc.readMem(0x912a));
        // CB 40 0274
        gbc.setState(0x4ad3, 0xcbc2, 0x1fd0, 0xe98, 0xc683, 0x68b9, 0x1, 0x1);
        gbc.writeMem(0x4ad3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xcbc2, gbc.sp());
        EXPECT(0x4ad5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0275
        gbc.setState(0x2410, 0x4e8f, 0x92e0, 0xf069, 0x977d, 0x46de, 0x0, 0x1);
        gbc.writeMem(0x2410, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x4e8f, gbc.sp());
        EXPECT(0x2412, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0276
        gbc.setState(0x76f6, 0x90d0, 0xa160, 0xd2e, 0xe7ea, 0xb51a, 0x0, 0x0);
        gbc.writeMem(0x76f6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x90d0, gbc.sp());
        EXPECT(0x76f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0277
        gbc.setState(0x1ac7, 0x75f, 0x8290, 0x89f9, 0x335e, 0x620b, 0x0, 0x0);
        gbc.writeMem(0x1ac7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x75f, gbc.sp());
        EXPECT(0x1ac9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0278
        gbc.setState(0xdee6, 0x4937, 0x8dc0, 0xb592, 0xee12, 0x15da, 0x0, 0x1);
        gbc.writeMem(0xdee6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x4937, gbc.sp());
        EXPECT(0xdee8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdee6));
        EXPECT(0x40, gbc.readMem(0xdee7));
        // CB 40 0279
        gbc.setState(0x2e2b, 0xe19f, 0x37a0, 0xf191, 0x18c7, 0xec91, 0x0, 0x1);
        gbc.writeMem(0x2e2b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xe19f, gbc.sp());
        EXPECT(0x2e2d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 027A
        gbc.setState(0x36e7, 0xf878, 0xb4e0, 0xf625, 0x32ab, 0x3502, 0x1, 0x0);
        gbc.writeMem(0x36e7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xf878, gbc.sp());
        EXPECT(0x36e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 027C
        gbc.setState(0x46e, 0xd452, 0xabf0, 0xa078, 0xdf0a, 0xff81, 0x1, 0x1);
        gbc.writeMem(0x46e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xd452, gbc.sp());
        EXPECT(0x470, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 027D
        gbc.setState(0xd2de, 0x6e1e, 0xbc70, 0x3eef, 0xb95c, 0x23f3, 0x1, 0x1);
        gbc.writeMem(0xd2de, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x6e1e, gbc.sp());
        EXPECT(0xd2e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2de));
        EXPECT(0x40, gbc.readMem(0xd2df));
        // CB 40 027E
        gbc.setState(0x4287, 0xd809, 0x6e30, 0xffd2, 0x9565, 0x2fc5, 0x0, 0x0);
        gbc.writeMem(0x4287, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xd809, gbc.sp());
        EXPECT(0x4289, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 027F
        gbc.setState(0x920f, 0xe60f, 0x3ee0, 0x7dbe, 0x2750, 0xff7a, 0x1, 0x1);
        gbc.writeMem(0x920f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xe60f, gbc.sp());
        EXPECT(0x9211, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x920f));
        EXPECT(0x40, gbc.readMem(0x9210));
        // CB 40 0280
        gbc.setState(0x3515, 0x25f2, 0x4530, 0xfeb0, 0xa1f0, 0x997a, 0x0, 0x0);
        gbc.writeMem(0x3515, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x25f2, gbc.sp());
        EXPECT(0x3517, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0281
        gbc.setState(0xe24b, 0x1582, 0xbf90, 0x5a5c, 0xda6, 0xa4a4, 0x1, 0x0);
        gbc.writeMem(0xe24b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x1582, gbc.sp());
        EXPECT(0xe24d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe24b));
        EXPECT(0x40, gbc.readMem(0xe24c));
        // CB 40 0282
        gbc.setState(0xaa11, 0x66ea, 0x4300, 0x2e86, 0x8bab, 0x91f3, 0x1, 0x1);
        gbc.writeMem(0xaa11, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x66ea, gbc.sp());
        EXPECT(0xaa13, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa11));
        EXPECT(0x40, gbc.readMem(0xaa12));
        // CB 40 0283
        gbc.setState(0xe08b, 0xdcc9, 0x24a0, 0xbaec, 0xf04, 0xf4f9, 0x0, 0x1);
        gbc.writeMem(0xe08b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xdcc9, gbc.sp());
        EXPECT(0xe08d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe08b));
        EXPECT(0x40, gbc.readMem(0xe08c));
        // CB 40 0284
        gbc.setState(0x4342, 0x657c, 0x8290, 0x14d3, 0x2821, 0xb1dd, 0x1, 0x0);
        gbc.writeMem(0x4342, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x657c, gbc.sp());
        EXPECT(0x4344, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0285
        gbc.setState(0xd33e, 0x840, 0x7ea0, 0x59ac, 0x4c20, 0xf505, 0x0, 0x1);
        gbc.writeMem(0xd33e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x840, gbc.sp());
        EXPECT(0xd340, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd33e));
        EXPECT(0x40, gbc.readMem(0xd33f));
        // CB 40 0286
        gbc.setState(0x50a3, 0xc222, 0xcb0, 0x6b9c, 0x3f33, 0x3ea3, 0x0, 0x0);
        gbc.writeMem(0x50a3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xc222, gbc.sp());
        EXPECT(0x50a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0288
        gbc.setState(0x5849, 0x913b, 0x5cf0, 0xfb74, 0xbf03, 0x787d, 0x1, 0x0);
        gbc.writeMem(0x5849, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x913b, gbc.sp());
        EXPECT(0x584b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 028A
        gbc.setState(0xedef, 0x59da, 0xf400, 0xf233, 0x6992, 0xd74, 0x0, 0x0);
        gbc.writeMem(0xedef, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x59da, gbc.sp());
        EXPECT(0xedf1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedef));
        EXPECT(0x40, gbc.readMem(0xedf0));
        // CB 40 028B
        gbc.setState(0x23ae, 0xb287, 0xf290, 0x570f, 0xdf21, 0x4ba0, 0x1, 0x0);
        gbc.writeMem(0x23ae, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xb287, gbc.sp());
        EXPECT(0x23b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 028C
        gbc.setState(0xee87, 0x302b, 0xaf90, 0x8787, 0x4ced, 0xa8ea, 0x1, 0x1);
        gbc.writeMem(0xee87, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x302b, gbc.sp());
        EXPECT(0xee89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee87));
        EXPECT(0x40, gbc.readMem(0xee88));
        // CB 40 028D
        gbc.setState(0xa159, 0x1b63, 0x9fe0, 0x7bfa, 0xb730, 0x196d, 0x1, 0x0);
        gbc.writeMem(0xa159, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x1b63, gbc.sp());
        EXPECT(0xa15b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa159));
        EXPECT(0x40, gbc.readMem(0xa15a));
        // CB 40 028E
        gbc.setState(0x49ce, 0xe9b8, 0xb2f0, 0x37bf, 0x8cf4, 0x974e, 0x1, 0x1);
        gbc.writeMem(0x49ce, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xe9b8, gbc.sp());
        EXPECT(0x49d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 028F
        gbc.setState(0x48e7, 0x13c3, 0x9730, 0x31b5, 0x5e19, 0x68cb, 0x1, 0x0);
        gbc.writeMem(0x48e7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x13c3, gbc.sp());
        EXPECT(0x48e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0290
        gbc.setState(0xb5c7, 0x220b, 0xe4f0, 0x1e99, 0x7b96, 0x9e4d, 0x1, 0x1);
        gbc.writeMem(0xb5c7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x220b, gbc.sp());
        EXPECT(0xb5c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5c7));
        EXPECT(0x40, gbc.readMem(0xb5c8));
        // CB 40 0292
        gbc.setState(0x1b66, 0x5e5a, 0x2e40, 0xf0d, 0x73f7, 0x3307, 0x0, 0x0);
        gbc.writeMem(0x1b66, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x5e5a, gbc.sp());
        EXPECT(0x1b68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0293
        gbc.setState(0x4f4c, 0x1ba8, 0x5810, 0x20d3, 0xa979, 0xd3e2, 0x1, 0x0);
        gbc.writeMem(0x4f4c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x1ba8, gbc.sp());
        EXPECT(0x4f4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0294
        gbc.setState(0x11fd, 0x479e, 0x71a0, 0xdff8, 0x7100, 0xd720, 0x1, 0x0);
        gbc.writeMem(0x11fd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x479e, gbc.sp());
        EXPECT(0x11ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0295
        gbc.setState(0x7702, 0x4639, 0x1dd0, 0x6abd, 0x8e0e, 0xc935, 0x1, 0x0);
        gbc.writeMem(0x7702, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x4639, gbc.sp());
        EXPECT(0x7704, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0296
        gbc.setState(0x4442, 0x30dd, 0xc400, 0x9f37, 0xd82f, 0x39ad, 0x0, 0x0);
        gbc.writeMem(0x4442, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x30dd, gbc.sp());
        EXPECT(0x4444, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0297
        gbc.setState(0x1a45, 0x1bcb, 0xfe20, 0xbfe1, 0xcf09, 0xe1f1, 0x0, 0x0);
        gbc.writeMem(0x1a45, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x1bcb, gbc.sp());
        EXPECT(0x1a47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0298
        gbc.setState(0xdcd8, 0x9a51, 0x5770, 0x4cf7, 0x3b82, 0xc566, 0x1, 0x1);
        gbc.writeMem(0xdcd8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x9a51, gbc.sp());
        EXPECT(0xdcda, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdcd8));
        EXPECT(0x40, gbc.readMem(0xdcd9));
        // CB 40 0299
        gbc.setState(0xd2b3, 0xab7e, 0xa530, 0xd050, 0x3f5a, 0xa431, 0x1, 0x1);
        gbc.writeMem(0xd2b3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xab7e, gbc.sp());
        EXPECT(0xd2b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2b3));
        EXPECT(0x40, gbc.readMem(0xd2b4));
        // CB 40 029A
        gbc.setState(0x9f77, 0x3e1d, 0x7610, 0x9df, 0xc9cb, 0xfb70, 0x1, 0x0);
        gbc.writeMem(0x9f77, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x3e1d, gbc.sp());
        EXPECT(0x9f79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f77));
        EXPECT(0x40, gbc.readMem(0x9f78));
        // CB 40 029B
        gbc.setState(0x9f0d, 0xf236, 0x12d0, 0xdca, 0xc16d, 0x99d2, 0x1, 0x0);
        gbc.writeMem(0x9f0d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xf236, gbc.sp());
        EXPECT(0x9f0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f0d));
        EXPECT(0x40, gbc.readMem(0x9f0e));
        // CB 40 029D
        gbc.setState(0x40b3, 0x19c0, 0x10b0, 0xdfd3, 0xda1a, 0x45f6, 0x1, 0x1);
        gbc.writeMem(0x40b3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x19c0, gbc.sp());
        EXPECT(0x40b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 029E
        gbc.setState(0x7eee, 0xcf09, 0xf6c0, 0x1b63, 0x4353, 0xd634, 0x0, 0x1);
        gbc.writeMem(0x7eee, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xcf09, gbc.sp());
        EXPECT(0x7ef0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 029F
        gbc.setState(0x19c3, 0x5d48, 0x5220, 0xd294, 0xb15e, 0x5da2, 0x1, 0x1);
        gbc.writeMem(0x19c3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x5d48, gbc.sp());
        EXPECT(0x19c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02A0
        gbc.setState(0x9db3, 0xf9b5, 0x2100, 0xd9a5, 0xa973, 0xf906, 0x0, 0x0);
        gbc.writeMem(0x9db3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xf9b5, gbc.sp());
        EXPECT(0x9db5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9db3));
        EXPECT(0x40, gbc.readMem(0x9db4));
        // CB 40 02A1
        gbc.setState(0xbb91, 0xad65, 0xddd0, 0xfa0a, 0x2b5e, 0x6fae, 0x1, 0x0);
        gbc.writeMem(0xbb91, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xad65, gbc.sp());
        EXPECT(0xbb93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb91));
        EXPECT(0x40, gbc.readMem(0xbb92));
        // CB 40 02A2
        gbc.setState(0x4ff8, 0xa134, 0x9a20, 0x1925, 0xe44e, 0xc646, 0x0, 0x0);
        gbc.writeMem(0x4ff8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xa134, gbc.sp());
        EXPECT(0x4ffa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02A3
        gbc.setState(0x3b0c, 0x81b9, 0xde50, 0xd17f, 0x58c6, 0x2aca, 0x0, 0x0);
        gbc.writeMem(0x3b0c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x81b9, gbc.sp());
        EXPECT(0x3b0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02A4
        gbc.setState(0xbadb, 0x97, 0xa6a0, 0x7acd, 0x2bf5, 0x7e59, 0x1, 0x0);
        gbc.writeMem(0xbadb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x97, gbc.sp());
        EXPECT(0xbadd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbadb));
        EXPECT(0x40, gbc.readMem(0xbadc));
        // CB 40 02A5
        gbc.setState(0xa025, 0x9f20, 0x8b60, 0xd970, 0xeb70, 0xd1ef, 0x1, 0x0);
        gbc.writeMem(0xa025, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x9f20, gbc.sp());
        EXPECT(0xa027, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa025));
        EXPECT(0x40, gbc.readMem(0xa026));
        // CB 40 02A6
        gbc.setState(0xcfd3, 0x641, 0x1580, 0xd64, 0xf093, 0x41d1, 0x0, 0x0);
        gbc.writeMem(0xcfd3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x641, gbc.sp());
        EXPECT(0xcfd5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfd3));
        EXPECT(0x40, gbc.readMem(0xcfd4));
        // CB 40 02A7
        gbc.setState(0x4dd7, 0xe2c, 0x6eb0, 0xc681, 0x8eaf, 0x26e0, 0x1, 0x1);
        gbc.writeMem(0x4dd7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xe2c, gbc.sp());
        EXPECT(0x4dd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02A8
        gbc.setState(0xd4bc, 0x5545, 0xf3d0, 0xc895, 0x54ae, 0x932c, 0x1, 0x1);
        gbc.writeMem(0xd4bc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x5545, gbc.sp());
        EXPECT(0xd4be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4bc));
        EXPECT(0x40, gbc.readMem(0xd4bd));
        // CB 40 02A9
        gbc.setState(0x2878, 0xebf8, 0x1da0, 0xef08, 0x1576, 0xc28b, 0x1, 0x1);
        gbc.writeMem(0x2878, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xebf8, gbc.sp());
        EXPECT(0x287a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02AA
        gbc.setState(0x2ed2, 0x4e95, 0x3200, 0x1bac, 0xf25e, 0xee70, 0x1, 0x0);
        gbc.writeMem(0x2ed2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x4e95, gbc.sp());
        EXPECT(0x2ed4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02AB
        gbc.setState(0x694d, 0x23f0, 0xb460, 0x9cf4, 0xab4f, 0xd0e2, 0x0, 0x0);
        gbc.writeMem(0x694d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x23f0, gbc.sp());
        EXPECT(0x694f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02AC
        gbc.setState(0x48b9, 0x8f90, 0xeb40, 0xc6f, 0xaa76, 0x9275, 0x0, 0x1);
        gbc.writeMem(0x48b9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x8f90, gbc.sp());
        EXPECT(0x48bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02AF
        gbc.setState(0x7d18, 0xebb3, 0xe0f0, 0xc76e, 0x764b, 0x29d2, 0x0, 0x1);
        gbc.writeMem(0x7d18, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xebb3, gbc.sp());
        EXPECT(0x7d1a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02B0
        gbc.setState(0x3d5, 0xe43d, 0x3a80, 0xf2f5, 0x7ac5, 0xa1d8, 0x0, 0x1);
        gbc.writeMem(0x3d5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xe43d, gbc.sp());
        EXPECT(0x3d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02B1
        gbc.setState(0x6bdc, 0x26c4, 0x2a0, 0x40ee, 0x80a7, 0x1ec8, 0x1, 0x1);
        gbc.writeMem(0x6bdc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x26c4, gbc.sp());
        EXPECT(0x6bde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02B2
        gbc.setState(0x3113, 0x689, 0xe940, 0xe6e8, 0x222f, 0xd354, 0x1, 0x1);
        gbc.writeMem(0x3113, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x689, gbc.sp());
        EXPECT(0x3115, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02B3
        gbc.setState(0xbd45, 0xe2d0, 0xac00, 0x161e, 0x1e99, 0xa595, 0x0, 0x0);
        gbc.writeMem(0xbd45, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xe2d0, gbc.sp());
        EXPECT(0xbd47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd45));
        EXPECT(0x40, gbc.readMem(0xbd46));
        // CB 40 02B4
        gbc.setState(0xcdf0, 0xaa63, 0xdb60, 0x4b45, 0xf57d, 0x7c66, 0x1, 0x1);
        gbc.writeMem(0xcdf0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xaa63, gbc.sp());
        EXPECT(0xcdf2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdf0));
        EXPECT(0x40, gbc.readMem(0xcdf1));
        // CB 40 02B6
        gbc.setState(0x36f5, 0x70bf, 0xd930, 0x55e, 0x20e4, 0x7efc, 0x1, 0x0);
        gbc.writeMem(0x36f5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x70bf, gbc.sp());
        EXPECT(0x36f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02B7
        gbc.setState(0x5c24, 0x4b15, 0x8c10, 0x84ef, 0xa770, 0x8466, 0x0, 0x1);
        gbc.writeMem(0x5c24, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x4b15, gbc.sp());
        EXPECT(0x5c26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02B8
        gbc.setState(0xaaab, 0x2d4b, 0xe7d0, 0x483e, 0xdfe5, 0xa4c2, 0x1, 0x0);
        gbc.writeMem(0xaaab, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x2d4b, gbc.sp());
        EXPECT(0xaaad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaaab));
        EXPECT(0x40, gbc.readMem(0xaaac));
        // CB 40 02B9
        gbc.setState(0x7427, 0xfc8a, 0x8b30, 0xc4d4, 0x7de5, 0xfa53, 0x0, 0x1);
        gbc.writeMem(0x7427, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xfc8a, gbc.sp());
        EXPECT(0x7429, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02BA
        gbc.setState(0x4238, 0x35e7, 0xbba0, 0x6f4e, 0x6607, 0x7239, 0x1, 0x0);
        gbc.writeMem(0x4238, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x35e7, gbc.sp());
        EXPECT(0x423a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02BB
        gbc.setState(0x5b77, 0x7b1f, 0x9540, 0xe31d, 0x92e5, 0x1fbe, 0x0, 0x0);
        gbc.writeMem(0x5b77, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x7b1f, gbc.sp());
        EXPECT(0x5b79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02BC
        gbc.setState(0xac1f, 0xa4aa, 0x1000, 0x25f, 0xfeae, 0x7c75, 0x0, 0x0);
        gbc.writeMem(0xac1f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xa4aa, gbc.sp());
        EXPECT(0xac21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac1f));
        EXPECT(0x40, gbc.readMem(0xac20));
        // CB 40 02BD
        gbc.setState(0x7cff, 0x67e9, 0xfab0, 0x29dc, 0xf5e7, 0x8ab6, 0x1, 0x0);
        gbc.writeMem(0x7cff, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x67e9, gbc.sp());
        EXPECT(0x7d01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02BE
        gbc.setState(0x47e3, 0xeef8, 0x5580, 0x5706, 0x97a2, 0xf034, 0x1, 0x0);
        gbc.writeMem(0x47e3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xeef8, gbc.sp());
        EXPECT(0x47e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02BF
        gbc.setState(0x9ac2, 0xd5ae, 0x7ee0, 0x7c0b, 0xcbcc, 0x34a0, 0x1, 0x0);
        gbc.writeMem(0x9ac2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xd5ae, gbc.sp());
        EXPECT(0x9ac4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ac2));
        EXPECT(0x40, gbc.readMem(0x9ac3));
        // CB 40 02C1
        gbc.setState(0x9511, 0x1566, 0x66d0, 0x8572, 0x911a, 0x7bc6, 0x1, 0x1);
        gbc.writeMem(0x9511, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x1566, gbc.sp());
        EXPECT(0x9513, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9511));
        EXPECT(0x40, gbc.readMem(0x9512));
        // CB 40 02C2
        gbc.setState(0xdf08, 0x541a, 0xe870, 0x7c64, 0x7f5c, 0xb780, 0x0, 0x1);
        gbc.writeMem(0xdf08, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x541a, gbc.sp());
        EXPECT(0xdf0a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf08));
        EXPECT(0x40, gbc.readMem(0xdf09));
        // CB 40 02C3
        gbc.setState(0xcf74, 0x888a, 0x8d00, 0x8d5f, 0xef4d, 0x34cd, 0x0, 0x1);
        gbc.writeMem(0xcf74, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x888a, gbc.sp());
        EXPECT(0xcf76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf74));
        EXPECT(0x40, gbc.readMem(0xcf75));
        // CB 40 02C4
        gbc.setState(0x6744, 0x8814, 0x6b70, 0xc9b0, 0x129, 0xe43b, 0x1, 0x0);
        gbc.writeMem(0x6744, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x8814, gbc.sp());
        EXPECT(0x6746, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02C6
        gbc.setState(0xe9e0, 0x1536, 0x7850, 0xc32d, 0x228b, 0x5b45, 0x1, 0x0);
        gbc.writeMem(0xe9e0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x1536, gbc.sp());
        EXPECT(0xe9e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9e0));
        EXPECT(0x40, gbc.readMem(0xe9e1));
        // CB 40 02C7
        gbc.setState(0x3253, 0x7351, 0x88f0, 0xdb58, 0x9b4, 0x938f, 0x1, 0x1);
        gbc.writeMem(0x3253, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x7351, gbc.sp());
        EXPECT(0x3255, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02C8
        gbc.setState(0x6d94, 0x11fa, 0xa440, 0xcbba, 0xbacb, 0x9410, 0x0, 0x1);
        gbc.writeMem(0x6d94, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x11fa, gbc.sp());
        EXPECT(0x6d96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02C9
        gbc.setState(0x3186, 0x2ae, 0xd410, 0x5654, 0xe3db, 0xf2d8, 0x0, 0x1);
        gbc.writeMem(0x3186, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x2ae, gbc.sp());
        EXPECT(0x3188, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02CA
        gbc.setState(0xcd94, 0x9d8, 0xb0f0, 0x4cfe, 0xf233, 0xd2cc, 0x0, 0x1);
        gbc.writeMem(0xcd94, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x9d8, gbc.sp());
        EXPECT(0xcd96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd94));
        EXPECT(0x40, gbc.readMem(0xcd95));
        // CB 40 02CB
        gbc.setState(0xa191, 0xdd01, 0x7d60, 0x301e, 0x78ab, 0x706c, 0x0, 0x1);
        gbc.writeMem(0xa191, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xdd01, gbc.sp());
        EXPECT(0xa193, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa191));
        EXPECT(0x40, gbc.readMem(0xa192));
        // CB 40 02CC
        gbc.setState(0x834, 0x5fd6, 0xae50, 0x5765, 0x7bed, 0xd979, 0x1, 0x1);
        gbc.writeMem(0x834, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x5fd6, gbc.sp());
        EXPECT(0x836, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02CD
        gbc.setState(0x94af, 0x732, 0x6fc0, 0x43f4, 0xa3e5, 0x144e, 0x0, 0x0);
        gbc.writeMem(0x94af, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x732, gbc.sp());
        EXPECT(0x94b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94af));
        EXPECT(0x40, gbc.readMem(0x94b0));
        // CB 40 02CE
        gbc.setState(0x85c6, 0xb981, 0xe940, 0xa8e2, 0xe6ea, 0x5577, 0x0, 0x1);
        gbc.writeMem(0x85c6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xb981, gbc.sp());
        EXPECT(0x85c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85c6));
        EXPECT(0x40, gbc.readMem(0x85c7));
        // CB 40 02CF
        gbc.setState(0x6b57, 0xb795, 0x74d0, 0x47d5, 0x82b0, 0x5ff6, 0x1, 0x0);
        gbc.writeMem(0x6b57, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xb795, gbc.sp());
        EXPECT(0x6b59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02D0
        gbc.setState(0xe1db, 0x51c6, 0xd390, 0x63c6, 0xf856, 0x4c64, 0x0, 0x1);
        gbc.writeMem(0xe1db, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x51c6, gbc.sp());
        EXPECT(0xe1dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1db));
        EXPECT(0x40, gbc.readMem(0xe1dc));
        // CB 40 02D1
        gbc.setState(0xdc4e, 0xb7ee, 0xe6e0, 0x9a62, 0x78a1, 0xac3f, 0x0, 0x0);
        gbc.writeMem(0xdc4e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xb7ee, gbc.sp());
        EXPECT(0xdc50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc4e));
        EXPECT(0x40, gbc.readMem(0xdc4f));
        // CB 40 02D2
        gbc.setState(0x27a9, 0x37d8, 0x8cc0, 0xef84, 0x4f15, 0x215f, 0x0, 0x0);
        gbc.writeMem(0x27a9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x37d8, gbc.sp());
        EXPECT(0x27ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02D3
        gbc.setState(0xb0bb, 0xc1bc, 0x4820, 0x605, 0x209f, 0x57cd, 0x1, 0x1);
        gbc.writeMem(0xb0bb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xc1bc, gbc.sp());
        EXPECT(0xb0bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0bb));
        EXPECT(0x40, gbc.readMem(0xb0bc));
        // CB 40 02D4
        gbc.setState(0xdbc4, 0xf13b, 0x4b20, 0x75dc, 0x8fa8, 0x7cc, 0x1, 0x0);
        gbc.writeMem(0xdbc4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xf13b, gbc.sp());
        EXPECT(0xdbc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbc4));
        EXPECT(0x40, gbc.readMem(0xdbc5));
        // CB 40 02D5
        gbc.setState(0x7e75, 0x7ab2, 0x6d60, 0xa381, 0x9ed2, 0x6a33, 0x1, 0x0);
        gbc.writeMem(0x7e75, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x7ab2, gbc.sp());
        EXPECT(0x7e77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02D6
        gbc.setState(0x7ee2, 0xfaa6, 0x1a10, 0x7e04, 0x5dde, 0x6e15, 0x1, 0x0);
        gbc.writeMem(0x7ee2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xfaa6, gbc.sp());
        EXPECT(0x7ee4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02D7
        gbc.setState(0xe7d2, 0x3fbe, 0x5430, 0xf249, 0x4ee6, 0xbc29, 0x0, 0x0);
        gbc.writeMem(0xe7d2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x3fbe, gbc.sp());
        EXPECT(0xe7d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7d2));
        EXPECT(0x40, gbc.readMem(0xe7d3));
        // CB 40 02D9
        gbc.setState(0xd5aa, 0x920, 0x6be0, 0x24b, 0x620f, 0x5b9a, 0x1, 0x0);
        gbc.writeMem(0xd5aa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x920, gbc.sp());
        EXPECT(0xd5ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5aa));
        EXPECT(0x40, gbc.readMem(0xd5ab));
        // CB 40 02DA
        gbc.setState(0xe3ad, 0x8a1, 0xb4a0, 0xae70, 0xe08d, 0x34af, 0x1, 0x1);
        gbc.writeMem(0xe3ad, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x8a1, gbc.sp());
        EXPECT(0xe3af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3ad));
        EXPECT(0x40, gbc.readMem(0xe3ae));
        // CB 40 02DB
        gbc.setState(0x3eee, 0x395c, 0xb3a0, 0x5df2, 0x929f, 0xa0b3, 0x1, 0x0);
        gbc.writeMem(0x3eee, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x395c, gbc.sp());
        EXPECT(0x3ef0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02DC
        gbc.setState(0xe03b, 0x8dda, 0x7900, 0xc65e, 0x4411, 0x7969, 0x0, 0x0);
        gbc.writeMem(0xe03b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x8dda, gbc.sp());
        EXPECT(0xe03d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe03b));
        EXPECT(0x40, gbc.readMem(0xe03c));
        // CB 40 02DE
        gbc.setState(0xa7d8, 0x48c9, 0xd270, 0x7006, 0x3654, 0x1ba4, 0x0, 0x0);
        gbc.writeMem(0xa7d8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x48c9, gbc.sp());
        EXPECT(0xa7da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7d8));
        EXPECT(0x40, gbc.readMem(0xa7d9));
        // CB 40 02DF
        gbc.setState(0x6753, 0xe18e, 0x3b20, 0x931b, 0xb0ba, 0x532d, 0x0, 0x1);
        gbc.writeMem(0x6753, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xe18e, gbc.sp());
        EXPECT(0x6755, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02E1
        gbc.setState(0xd4b7, 0x8536, 0xe1a0, 0xe90a, 0x37b, 0xa14a, 0x1, 0x0);
        gbc.writeMem(0xd4b7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x8536, gbc.sp());
        EXPECT(0xd4b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4b7));
        EXPECT(0x40, gbc.readMem(0xd4b8));
        // CB 40 02E2
        gbc.setState(0xb3e3, 0xa64e, 0x23a0, 0x3715, 0x2f91, 0xccb6, 0x1, 0x0);
        gbc.writeMem(0xb3e3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xa64e, gbc.sp());
        EXPECT(0xb3e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3e3));
        EXPECT(0x40, gbc.readMem(0xb3e4));
        // CB 40 02E3
        gbc.setState(0xc344, 0x5c75, 0x7af0, 0x4c7f, 0x2d95, 0xa2e4, 0x1, 0x1);
        gbc.writeMem(0xc344, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x5c75, gbc.sp());
        EXPECT(0xc346, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc344));
        EXPECT(0x40, gbc.readMem(0xc345));
        // CB 40 02E4
        gbc.setState(0xe9ba, 0x3519, 0x4d70, 0xd762, 0xa658, 0xe82f, 0x0, 0x1);
        gbc.writeMem(0xe9ba, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x3519, gbc.sp());
        EXPECT(0xe9bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9ba));
        EXPECT(0x40, gbc.readMem(0xe9bb));
        // CB 40 02E6
        gbc.setState(0xec6c, 0x997d, 0x95b0, 0x1dc6, 0xec4, 0xdd6e, 0x0, 0x0);
        gbc.writeMem(0xec6c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x997d, gbc.sp());
        EXPECT(0xec6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec6c));
        EXPECT(0x40, gbc.readMem(0xec6d));
        // CB 40 02E7
        gbc.setState(0x41cb, 0x6db1, 0x23f0, 0xf191, 0x48c3, 0xb3a3, 0x1, 0x0);
        gbc.writeMem(0x41cb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x6db1, gbc.sp());
        EXPECT(0x41cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02E8
        gbc.setState(0x9b6a, 0x1bfa, 0x57d0, 0x7b9d, 0xb153, 0xcb0e, 0x0, 0x0);
        gbc.writeMem(0x9b6a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x1bfa, gbc.sp());
        EXPECT(0x9b6c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b6a));
        EXPECT(0x40, gbc.readMem(0x9b6b));
        // CB 40 02E9
        gbc.setState(0x5a65, 0xf1a3, 0xc630, 0x3261, 0x4fd, 0xbe25, 0x0, 0x0);
        gbc.writeMem(0x5a65, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xf1a3, gbc.sp());
        EXPECT(0x5a67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02EA
        gbc.setState(0x4c5c, 0xd67, 0x2ba0, 0xc10f, 0x3b64, 0x610d, 0x0, 0x1);
        gbc.writeMem(0x4c5c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xd67, gbc.sp());
        EXPECT(0x4c5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02EB
        gbc.setState(0xc9ce, 0x9fb6, 0x5410, 0xd285, 0x735, 0x1089, 0x0, 0x0);
        gbc.writeMem(0xc9ce, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x9fb6, gbc.sp());
        EXPECT(0xc9d0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9ce));
        EXPECT(0x40, gbc.readMem(0xc9cf));
        // CB 40 02EC
        gbc.setState(0x7e6, 0x4994, 0x21e0, 0xf4ce, 0x498f, 0xc1c4, 0x0, 0x0);
        gbc.writeMem(0x7e6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x4994, gbc.sp());
        EXPECT(0x7e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02ED
        gbc.setState(0x5d1c, 0xc056, 0x4b10, 0x2a96, 0xef78, 0xa647, 0x1, 0x0);
        gbc.writeMem(0x5d1c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xc056, gbc.sp());
        EXPECT(0x5d1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02EE
        gbc.setState(0x2104, 0xbb2, 0xe710, 0xdfcb, 0xf5a0, 0xe598, 0x0, 0x0);
        gbc.writeMem(0x2104, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xbb2, gbc.sp());
        EXPECT(0x2106, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02EF
        gbc.setState(0xb8ea, 0x57c9, 0x55d0, 0x40f4, 0xdaa6, 0x47f1, 0x0, 0x0);
        gbc.writeMem(0xb8ea, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x57c9, gbc.sp());
        EXPECT(0xb8ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8ea));
        EXPECT(0x40, gbc.readMem(0xb8eb));
        // CB 40 02F0
        gbc.setState(0x1e90, 0x7c1c, 0x9bf0, 0x11d, 0x40b8, 0x1c89, 0x0, 0x1);
        gbc.writeMem(0x1e90, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x7c1c, gbc.sp());
        EXPECT(0x1e92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02F2
        gbc.setState(0x2377, 0x8a7d, 0x78a0, 0x7c59, 0xc8a0, 0x6a4c, 0x0, 0x1);
        gbc.writeMem(0x2377, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x8a7d, gbc.sp());
        EXPECT(0x2379, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02F3
        gbc.setState(0xbc13, 0x5260, 0x2de0, 0x26c5, 0x1d3, 0x1328, 0x1, 0x1);
        gbc.writeMem(0xbc13, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x5260, gbc.sp());
        EXPECT(0xbc15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc13));
        EXPECT(0x40, gbc.readMem(0xbc14));
        // CB 40 02F4
        gbc.setState(0x17d9, 0x30ec, 0x6990, 0xf1af, 0x2405, 0x93f, 0x1, 0x0);
        gbc.writeMem(0x17d9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x30ec, gbc.sp());
        EXPECT(0x17db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02F5
        gbc.setState(0xb5f4, 0x6077, 0xdd10, 0xeca5, 0x5ff5, 0xa75f, 0x0, 0x0);
        gbc.writeMem(0xb5f4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x6077, gbc.sp());
        EXPECT(0xb5f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5f4));
        EXPECT(0x40, gbc.readMem(0xb5f5));
        // CB 40 02F6
        gbc.setState(0xd4ed, 0x3894, 0x6c80, 0x64e7, 0xf13c, 0x5d6e, 0x0, 0x1);
        gbc.writeMem(0xd4ed, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x3894, gbc.sp());
        EXPECT(0xd4ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4ed));
        EXPECT(0x40, gbc.readMem(0xd4ee));
        // CB 40 02F7
        gbc.setState(0x1397, 0x37bf, 0xc1a0, 0xf24a, 0x7fde, 0xc6a0, 0x0, 0x0);
        gbc.writeMem(0x1397, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x37bf, gbc.sp());
        EXPECT(0x1399, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02F8
        gbc.setState(0x7e47, 0xaa4, 0xe570, 0x589b, 0xe88c, 0xa86e, 0x1, 0x0);
        gbc.writeMem(0x7e47, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xaa4, gbc.sp());
        EXPECT(0x7e49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 02F9
        gbc.setState(0x34a0, 0x6270, 0x5ca0, 0xb4fd, 0xd300, 0x427e, 0x1, 0x1);
        gbc.writeMem(0x34a0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x6270, gbc.sp());
        EXPECT(0x34a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02FA
        gbc.setState(0x2e20, 0x629d, 0xad00, 0x4ddc, 0xa1dd, 0x3c95, 0x0, 0x1);
        gbc.writeMem(0x2e20, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x629d, gbc.sp());
        EXPECT(0x2e22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02FB
        gbc.setState(0x9482, 0x7650, 0x94a0, 0x9790, 0xd6a4, 0x5a7b, 0x0, 0x0);
        gbc.writeMem(0x9482, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x7650, gbc.sp());
        EXPECT(0x9484, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9482));
        EXPECT(0x40, gbc.readMem(0x9483));
        // CB 40 02FC
        gbc.setState(0x901b, 0x5a59, 0x78a0, 0x31f9, 0xd12e, 0xc1a5, 0x0, 0x1);
        gbc.writeMem(0x901b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x5a59, gbc.sp());
        EXPECT(0x901d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x901b));
        EXPECT(0x40, gbc.readMem(0x901c));
        // CB 40 02FD
        gbc.setState(0x4e77, 0xb1d3, 0x4780, 0x2224, 0xf9db, 0x8274, 0x1, 0x0);
        gbc.writeMem(0x4e77, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xb1d3, gbc.sp());
        EXPECT(0x4e79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 02FE
        gbc.setState(0x972a, 0xbd59, 0x3b50, 0x2497, 0xa22a, 0xf4e5, 0x0, 0x0);
        gbc.writeMem(0x972a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xbd59, gbc.sp());
        EXPECT(0x972c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x972a));
        EXPECT(0x40, gbc.readMem(0x972b));
        // CB 40 02FF
        gbc.setState(0xa8b5, 0xa2da, 0x2dd0, 0x860c, 0x6c62, 0xcc7b, 0x1, 0x1);
        gbc.writeMem(0xa8b5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xa2da, gbc.sp());
        EXPECT(0xa8b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8b5));
        EXPECT(0x40, gbc.readMem(0xa8b6));
        // CB 40 0300
        gbc.setState(0x7c46, 0x21f8, 0x9830, 0xccef, 0x7d9a, 0xcb2a, 0x1, 0x1);
        gbc.writeMem(0x7c46, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x21f8, gbc.sp());
        EXPECT(0x7c48, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0301
        gbc.setState(0x1222, 0xf8f8, 0xf760, 0x1f9, 0x9b64, 0x34d3, 0x0, 0x1);
        gbc.writeMem(0x1222, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xf8f8, gbc.sp());
        EXPECT(0x1224, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0302
        gbc.setState(0xb70f, 0xcb24, 0xed00, 0x838d, 0x6a2a, 0x560d, 0x0, 0x1);
        gbc.writeMem(0xb70f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xcb24, gbc.sp());
        EXPECT(0xb711, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb70f));
        EXPECT(0x40, gbc.readMem(0xb710));
        // CB 40 0303
        gbc.setState(0xd546, 0xa862, 0x2330, 0x5479, 0x1142, 0x79cc, 0x1, 0x0);
        gbc.writeMem(0xd546, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xa862, gbc.sp());
        EXPECT(0xd548, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd546));
        EXPECT(0x40, gbc.readMem(0xd547));
        // CB 40 0304
        gbc.setState(0x4558, 0xef69, 0x6070, 0x8b99, 0xeb72, 0xd254, 0x0, 0x0);
        gbc.writeMem(0x4558, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xef69, gbc.sp());
        EXPECT(0x455a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0305
        gbc.setState(0x3808, 0x2608, 0x43f0, 0x1120, 0x3c, 0xefc0, 0x0, 0x0);
        gbc.writeMem(0x3808, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x2608, gbc.sp());
        EXPECT(0x380a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0306
        gbc.setState(0x367, 0x5287, 0x7850, 0xad61, 0x7dea, 0xadcb, 0x1, 0x1);
        gbc.writeMem(0x367, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x5287, gbc.sp());
        EXPECT(0x369, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0307
        gbc.setState(0xbce1, 0xa9b1, 0x7120, 0xcac3, 0x66c2, 0xc123, 0x0, 0x1);
        gbc.writeMem(0xbce1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xa9b1, gbc.sp());
        EXPECT(0xbce3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbce1));
        EXPECT(0x40, gbc.readMem(0xbce2));
        // CB 40 0308
        gbc.setState(0x9102, 0x92fd, 0x15c0, 0x61c5, 0x1345, 0xe4ab, 0x0, 0x0);
        gbc.writeMem(0x9102, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x92fd, gbc.sp());
        EXPECT(0x9104, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9102));
        EXPECT(0x40, gbc.readMem(0x9103));
        // CB 40 0309
        gbc.setState(0xc2a, 0xe5f7, 0x5100, 0x3dd4, 0xc63c, 0xa769, 0x1, 0x0);
        gbc.writeMem(0xc2a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xe5f7, gbc.sp());
        EXPECT(0xc2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 030A
        gbc.setState(0xd656, 0x8956, 0x6850, 0x3cc3, 0x1a05, 0x1fa0, 0x0, 0x0);
        gbc.writeMem(0xd656, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x8956, gbc.sp());
        EXPECT(0xd658, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd656));
        EXPECT(0x40, gbc.readMem(0xd657));
        // CB 40 030B
        gbc.setState(0x7f04, 0xe52, 0xac40, 0x13ee, 0x7f29, 0x7d55, 0x1, 0x0);
        gbc.writeMem(0x7f04, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xe52, gbc.sp());
        EXPECT(0x7f06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 030C
        gbc.setState(0xb, 0xdb18, 0x9fc0, 0x44da, 0xf406, 0xc8d6, 0x1, 0x1);
        gbc.writeMem(0xb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xdb18, gbc.sp());
        EXPECT(0xd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 030D
        gbc.setState(0x7b7a, 0xa570, 0x8690, 0x6431, 0xa35b, 0x9fc5, 0x1, 0x0);
        gbc.writeMem(0x7b7a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xa570, gbc.sp());
        EXPECT(0x7b7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 030E
        gbc.setState(0x7179, 0xabbb, 0x9480, 0x1292, 0x95ff, 0x4ff3, 0x0, 0x1);
        gbc.writeMem(0x7179, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xabbb, gbc.sp());
        EXPECT(0x717b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 030F
        gbc.setState(0x6aa5, 0x6497, 0xb930, 0x1c25, 0x2e2, 0x1b71, 0x0, 0x0);
        gbc.writeMem(0x6aa5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x6497, gbc.sp());
        EXPECT(0x6aa7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0310
        gbc.setState(0xdb91, 0x9c4d, 0xfab0, 0x3bd8, 0x330c, 0x540b, 0x1, 0x1);
        gbc.writeMem(0xdb91, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x9c4d, gbc.sp());
        EXPECT(0xdb93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb91));
        EXPECT(0x40, gbc.readMem(0xdb92));
        // CB 40 0311
        gbc.setState(0x597d, 0xce93, 0x8b30, 0x5a99, 0x2459, 0x7ef8, 0x1, 0x1);
        gbc.writeMem(0x597d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xce93, gbc.sp());
        EXPECT(0x597f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0312
        gbc.setState(0x964c, 0x3fca, 0x3970, 0x603, 0x5d12, 0xfafb, 0x0, 0x0);
        gbc.writeMem(0x964c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x3fca, gbc.sp());
        EXPECT(0x964e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x964c));
        EXPECT(0x40, gbc.readMem(0x964d));
        // CB 40 0313
        gbc.setState(0x6961, 0xd3d3, 0x8aa0, 0xe305, 0x8f68, 0x3952, 0x1, 0x0);
        gbc.writeMem(0x6961, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xd3d3, gbc.sp());
        EXPECT(0x6963, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0314
        gbc.setState(0xae98, 0x907e, 0x9c80, 0x28a0, 0x3084, 0x625d, 0x1, 0x0);
        gbc.writeMem(0xae98, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x907e, gbc.sp());
        EXPECT(0xae9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae98));
        EXPECT(0x40, gbc.readMem(0xae99));
        // CB 40 0315
        gbc.setState(0xe2ac, 0xa4d1, 0x5eb0, 0x7491, 0xf163, 0x98fb, 0x0, 0x0);
        gbc.writeMem(0xe2ac, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xa4d1, gbc.sp());
        EXPECT(0xe2ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2ac));
        EXPECT(0x40, gbc.readMem(0xe2ad));
        // CB 40 0316
        gbc.setState(0x5fde, 0x909b, 0xd7e0, 0x9700, 0xbda0, 0xa5da, 0x0, 0x1);
        gbc.writeMem(0x5fde, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x909b, gbc.sp());
        EXPECT(0x5fe0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0317
        gbc.setState(0xd1f6, 0x2dd0, 0x5a20, 0xce6e, 0x1337, 0x2835, 0x1, 0x0);
        gbc.writeMem(0xd1f6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x2dd0, gbc.sp());
        EXPECT(0xd1f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1f6));
        EXPECT(0x40, gbc.readMem(0xd1f7));
        // CB 40 0318
        gbc.setState(0xb338, 0xc9dd, 0x6f20, 0xe2c5, 0x6480, 0x55b2, 0x1, 0x1);
        gbc.writeMem(0xb338, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xc9dd, gbc.sp());
        EXPECT(0xb33a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb338));
        EXPECT(0x40, gbc.readMem(0xb339));
        // CB 40 0319
        gbc.setState(0xa67, 0x91e7, 0xfcb0, 0xc14e, 0x9a72, 0x1b3a, 0x0, 0x0);
        gbc.writeMem(0xa67, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x91e7, gbc.sp());
        EXPECT(0xa69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 031A
        gbc.setState(0x92a2, 0x2726, 0xce20, 0x2910, 0x8694, 0xbed4, 0x1, 0x1);
        gbc.writeMem(0x92a2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x2726, gbc.sp());
        EXPECT(0x92a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92a2));
        EXPECT(0x40, gbc.readMem(0x92a3));
        // CB 40 031B
        gbc.setState(0x1bf3, 0x3fad, 0x7d60, 0x4d56, 0x330f, 0x3749, 0x0, 0x0);
        gbc.writeMem(0x1bf3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x3fad, gbc.sp());
        EXPECT(0x1bf5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 031C
        gbc.setState(0xac22, 0xa2ce, 0x1630, 0xf79c, 0x148c, 0x65fe, 0x1, 0x0);
        gbc.writeMem(0xac22, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xa2ce, gbc.sp());
        EXPECT(0xac24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac22));
        EXPECT(0x40, gbc.readMem(0xac23));
        // CB 40 031D
        gbc.setState(0xb1bd, 0xbdf6, 0xc8f0, 0xc22, 0x8c4f, 0x829f, 0x0, 0x0);
        gbc.writeMem(0xb1bd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xbdf6, gbc.sp());
        EXPECT(0xb1bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1bd));
        EXPECT(0x40, gbc.readMem(0xb1be));
        // CB 40 031E
        gbc.setState(0xb6d8, 0x9e56, 0x3c50, 0x1f27, 0xb038, 0xd9dc, 0x1, 0x1);
        gbc.writeMem(0xb6d8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x9e56, gbc.sp());
        EXPECT(0xb6da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6d8));
        EXPECT(0x40, gbc.readMem(0xb6d9));
        // CB 40 031F
        gbc.setState(0xed28, 0x9625, 0xbf90, 0x27bc, 0x895e, 0x2470, 0x1, 0x0);
        gbc.writeMem(0xed28, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x9625, gbc.sp());
        EXPECT(0xed2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed28));
        EXPECT(0x40, gbc.readMem(0xed29));
        // CB 40 0320
        gbc.setState(0x61ec, 0x21d6, 0xcce0, 0xa903, 0x144c, 0x5c1c, 0x1, 0x1);
        gbc.writeMem(0x61ec, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x21d6, gbc.sp());
        EXPECT(0x61ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0321
        gbc.setState(0xd3fa, 0xacd2, 0xc590, 0x3f37, 0x5b01, 0x15ba, 0x0, 0x0);
        gbc.writeMem(0xd3fa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xacd2, gbc.sp());
        EXPECT(0xd3fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3fa));
        EXPECT(0x40, gbc.readMem(0xd3fb));
        // CB 40 0322
        gbc.setState(0xf76, 0x9f6, 0xcbe0, 0xfd6b, 0x55e6, 0xa7b1, 0x1, 0x0);
        gbc.writeMem(0xf76, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x9f6, gbc.sp());
        EXPECT(0xf78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0323
        gbc.setState(0xa9eb, 0xfef3, 0xa7f0, 0xa885, 0xe27d, 0x6643, 0x0, 0x0);
        gbc.writeMem(0xa9eb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xfef3, gbc.sp());
        EXPECT(0xa9ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9eb));
        EXPECT(0x40, gbc.readMem(0xa9ec));
        // CB 40 0324
        gbc.setState(0x5d1b, 0x9262, 0xaf70, 0x49fb, 0xb4fe, 0x17f8, 0x1, 0x0);
        gbc.writeMem(0x5d1b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x9262, gbc.sp());
        EXPECT(0x5d1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0325
        gbc.setState(0x2eed, 0x3a43, 0xc800, 0x16e5, 0x6374, 0x9025, 0x1, 0x1);
        gbc.writeMem(0x2eed, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x3a43, gbc.sp());
        EXPECT(0x2eef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0326
        gbc.setState(0x767a, 0xc281, 0xc6f0, 0xadd8, 0xc283, 0xeddf, 0x1, 0x0);
        gbc.writeMem(0x767a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xc281, gbc.sp());
        EXPECT(0x767c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0327
        gbc.setState(0x13cf, 0x3370, 0x16c0, 0xb7bc, 0x6763, 0x3044, 0x0, 0x1);
        gbc.writeMem(0x13cf, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x3370, gbc.sp());
        EXPECT(0x13d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0329
        gbc.setState(0x18d1, 0x53a3, 0x9cb0, 0x4358, 0x9aab, 0xef5a, 0x0, 0x0);
        gbc.writeMem(0x18d1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x53a3, gbc.sp());
        EXPECT(0x18d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 032A
        gbc.setState(0xadb5, 0x4357, 0xb050, 0xa534, 0x5680, 0xb4fa, 0x0, 0x0);
        gbc.writeMem(0xadb5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x4357, gbc.sp());
        EXPECT(0xadb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadb5));
        EXPECT(0x40, gbc.readMem(0xadb6));
        // CB 40 032B
        gbc.setState(0xde14, 0xc9d6, 0xd720, 0x79bc, 0x5690, 0xb239, 0x1, 0x1);
        gbc.writeMem(0xde14, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xc9d6, gbc.sp());
        EXPECT(0xde16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde14));
        EXPECT(0x40, gbc.readMem(0xde15));
        // CB 40 032C
        gbc.setState(0x717c, 0x4e52, 0x92a0, 0xc4f0, 0x34e3, 0x4be6, 0x1, 0x0);
        gbc.writeMem(0x717c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x4e52, gbc.sp());
        EXPECT(0x717e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 032D
        gbc.setState(0xb2aa, 0x3cf6, 0x13d0, 0x940a, 0xa826, 0x2ca8, 0x0, 0x0);
        gbc.writeMem(0xb2aa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x3cf6, gbc.sp());
        EXPECT(0xb2ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2aa));
        EXPECT(0x40, gbc.readMem(0xb2ab));
        // CB 40 032E
        gbc.setState(0xb5dc, 0x8e44, 0x6ba0, 0xed7f, 0x1507, 0xd76b, 0x1, 0x0);
        gbc.writeMem(0xb5dc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x8e44, gbc.sp());
        EXPECT(0xb5de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5dc));
        EXPECT(0x40, gbc.readMem(0xb5dd));
        // CB 40 032F
        gbc.setState(0x9d18, 0x8115, 0x4090, 0x69cd, 0xd289, 0x83a3, 0x1, 0x1);
        gbc.writeMem(0x9d18, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x8115, gbc.sp());
        EXPECT(0x9d1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d18));
        EXPECT(0x40, gbc.readMem(0x9d19));
        // CB 40 0330
        gbc.setState(0x3fc6, 0xec1f, 0xc700, 0x32c, 0x9524, 0xc9ce, 0x1, 0x1);
        gbc.writeMem(0x3fc6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xec1f, gbc.sp());
        EXPECT(0x3fc8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0331
        gbc.setState(0x644d, 0x67db, 0x8680, 0xeb91, 0x4129, 0xba55, 0x1, 0x1);
        gbc.writeMem(0x644d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x67db, gbc.sp());
        EXPECT(0x644f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0332
        gbc.setState(0x2b75, 0x691e, 0x7170, 0x6956, 0x8883, 0xc74c, 0x1, 0x0);
        gbc.writeMem(0x2b75, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x691e, gbc.sp());
        EXPECT(0x2b77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0333
        gbc.setState(0x17b3, 0x5f6f, 0xe130, 0xda9c, 0x48d0, 0x3f9a, 0x1, 0x1);
        gbc.writeMem(0x17b3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x5f6f, gbc.sp());
        EXPECT(0x17b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0334
        gbc.setState(0x4aad, 0x4cf6, 0x6500, 0xc2ea, 0x546a, 0x9eb4, 0x0, 0x1);
        gbc.writeMem(0x4aad, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x4cf6, gbc.sp());
        EXPECT(0x4aaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0335
        gbc.setState(0x92f9, 0xe7fd, 0xad00, 0x7f25, 0xbb0, 0x96d2, 0x0, 0x1);
        gbc.writeMem(0x92f9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xe7fd, gbc.sp());
        EXPECT(0x92fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92f9));
        EXPECT(0x40, gbc.readMem(0x92fa));
        // CB 40 0337
        gbc.setState(0xdbea, 0x8b33, 0x3f30, 0xf81f, 0xd8c0, 0xde42, 0x1, 0x0);
        gbc.writeMem(0xdbea, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x8b33, gbc.sp());
        EXPECT(0xdbec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbea));
        EXPECT(0x40, gbc.readMem(0xdbeb));
        // CB 40 0338
        gbc.setState(0x1116, 0x8734, 0xbbc0, 0x465c, 0xb531, 0xa873, 0x1, 0x1);
        gbc.writeMem(0x1116, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x8734, gbc.sp());
        EXPECT(0x1118, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 033A
        gbc.setState(0xdaa7, 0xda49, 0xd4a0, 0x1cfe, 0xc09c, 0xae01, 0x1, 0x1);
        gbc.writeMem(0xdaa7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xda49, gbc.sp());
        EXPECT(0xdaa9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdaa7));
        EXPECT(0x40, gbc.readMem(0xdaa8));
        // CB 40 033B
        gbc.setState(0xe781, 0x23d5, 0xc8b0, 0x8dd3, 0x7362, 0x7b4f, 0x1, 0x0);
        gbc.writeMem(0xe781, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x23d5, gbc.sp());
        EXPECT(0xe783, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe781));
        EXPECT(0x40, gbc.readMem(0xe782));
        // CB 40 033D
        gbc.setState(0xaffe, 0x4be1, 0x6110, 0x3ba2, 0x448d, 0x63c3, 0x0, 0x0);
        gbc.writeMem(0xaffe, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x4be1, gbc.sp());
        EXPECT(0xb000, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaffe));
        EXPECT(0x40, gbc.readMem(0xafff));
        // CB 40 033E
        gbc.setState(0x70a7, 0x36cb, 0xbe30, 0x751, 0x364b, 0x2e6, 0x1, 0x0);
        gbc.writeMem(0x70a7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x36cb, gbc.sp());
        EXPECT(0x70a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 033F
        gbc.setState(0x37f1, 0x73b5, 0xa110, 0xb898, 0xc411, 0x6ed8, 0x1, 0x1);
        gbc.writeMem(0x37f1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x73b5, gbc.sp());
        EXPECT(0x37f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0340
        gbc.setState(0x664c, 0x66d4, 0x2b90, 0x21fa, 0x4ae7, 0x31, 0x0, 0x1);
        gbc.writeMem(0x664c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x66d4, gbc.sp());
        EXPECT(0x664e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0341
        gbc.setState(0xe940, 0x7d9, 0x12f0, 0x2bf8, 0x52eb, 0x79a5, 0x1, 0x1);
        gbc.writeMem(0xe940, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x7d9, gbc.sp());
        EXPECT(0xe942, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe940));
        EXPECT(0x40, gbc.readMem(0xe941));
        // CB 40 0342
        gbc.setState(0x6a76, 0x5a8c, 0xdd90, 0x4197, 0x6a39, 0x5669, 0x0, 0x1);
        gbc.writeMem(0x6a76, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x5a8c, gbc.sp());
        EXPECT(0x6a78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0343
        gbc.setState(0xaeb, 0xa5c9, 0xc600, 0x82c9, 0xd3bc, 0x4e35, 0x0, 0x1);
        gbc.writeMem(0xaeb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xa5c9, gbc.sp());
        EXPECT(0xaed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0345
        gbc.setState(0xe3b0, 0xaaae, 0xd2b0, 0x7dbb, 0x28f4, 0xfb7, 0x0, 0x1);
        gbc.writeMem(0xe3b0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xaaae, gbc.sp());
        EXPECT(0xe3b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3b0));
        EXPECT(0x40, gbc.readMem(0xe3b1));
        // CB 40 0346
        gbc.setState(0x3032, 0x9b59, 0x3b00, 0xa09f, 0xe9f4, 0xbc36, 0x0, 0x0);
        gbc.writeMem(0x3032, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x9b59, gbc.sp());
        EXPECT(0x3034, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0347
        gbc.setState(0x2be1, 0xc0ba, 0x2090, 0xd32d, 0x93f5, 0xa76f, 0x1, 0x1);
        gbc.writeMem(0x2be1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xc0ba, gbc.sp());
        EXPECT(0x2be3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0348
        gbc.setState(0x7ddc, 0x349, 0xdfa0, 0x19c, 0x6738, 0x2b4f, 0x0, 0x1);
        gbc.writeMem(0x7ddc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x349, gbc.sp());
        EXPECT(0x7dde, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0349
        gbc.setState(0x65e7, 0xc579, 0x88d0, 0x39b9, 0x190, 0x28c3, 0x0, 0x1);
        gbc.writeMem(0x65e7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xc579, gbc.sp());
        EXPECT(0x65e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 034A
        gbc.setState(0xdac9, 0xa922, 0x5aa0, 0x9397, 0x2bdf, 0x3c12, 0x1, 0x0);
        gbc.writeMem(0xdac9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xa922, gbc.sp());
        EXPECT(0xdacb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdac9));
        EXPECT(0x40, gbc.readMem(0xdaca));
        // CB 40 034B
        gbc.setState(0x7595, 0x6471, 0x1830, 0x3c75, 0x1941, 0x60df, 0x0, 0x0);
        gbc.writeMem(0x7595, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x6471, gbc.sp());
        EXPECT(0x7597, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 034C
        gbc.setState(0x8b03, 0x9d82, 0x6ab0, 0xbc34, 0xb014, 0x1c10, 0x0, 0x1);
        gbc.writeMem(0x8b03, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x9d82, gbc.sp());
        EXPECT(0x8b05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b03));
        EXPECT(0x40, gbc.readMem(0x8b04));
        // CB 40 034D
        gbc.setState(0x3f99, 0xec26, 0x4c90, 0x93a8, 0xf465, 0x75db, 0x1, 0x0);
        gbc.writeMem(0x3f99, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xec26, gbc.sp());
        EXPECT(0x3f9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 034E
        gbc.setState(0x75c5, 0xfb6c, 0x4250, 0xed45, 0x7e13, 0x8146, 0x1, 0x0);
        gbc.writeMem(0x75c5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xfb6c, gbc.sp());
        EXPECT(0x75c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 034F
        gbc.setState(0x7883, 0x7baf, 0x2ae0, 0xd330, 0xea67, 0xd700, 0x1, 0x0);
        gbc.writeMem(0x7883, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x7baf, gbc.sp());
        EXPECT(0x7885, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0350
        gbc.setState(0x9f14, 0x6876, 0xb40, 0xf802, 0xef62, 0x410e, 0x1, 0x0);
        gbc.writeMem(0x9f14, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x6876, gbc.sp());
        EXPECT(0x9f16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f14));
        EXPECT(0x40, gbc.readMem(0x9f15));
        // CB 40 0351
        gbc.setState(0xe0c0, 0x6794, 0x2270, 0xbe4e, 0xd348, 0x9bd4, 0x0, 0x0);
        gbc.writeMem(0xe0c0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x6794, gbc.sp());
        EXPECT(0xe0c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0c0));
        EXPECT(0x40, gbc.readMem(0xe0c1));
        // CB 40 0352
        gbc.setState(0xd179, 0xf959, 0xec30, 0xe1c4, 0x4235, 0xd1cd, 0x0, 0x0);
        gbc.writeMem(0xd179, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xf959, gbc.sp());
        EXPECT(0xd17b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd179));
        EXPECT(0x40, gbc.readMem(0xd17a));
        // CB 40 0353
        gbc.setState(0xe031, 0xa8af, 0xcbc0, 0xee78, 0x74c1, 0x5574, 0x0, 0x0);
        gbc.writeMem(0xe031, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xa8af, gbc.sp());
        EXPECT(0xe033, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe031));
        EXPECT(0x40, gbc.readMem(0xe032));
        // CB 40 0355
        gbc.setState(0x271a, 0xf2ed, 0x5a40, 0xa2b9, 0xc8d5, 0x20cf, 0x0, 0x1);
        gbc.writeMem(0x271a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xf2ed, gbc.sp());
        EXPECT(0x271c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0356
        gbc.setState(0x8e4c, 0x1bc9, 0x22c0, 0x45e3, 0xb4e, 0x52d9, 0x0, 0x0);
        gbc.writeMem(0x8e4c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x1bc9, gbc.sp());
        EXPECT(0x8e4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e4c));
        EXPECT(0x40, gbc.readMem(0x8e4d));
        // CB 40 0357
        gbc.setState(0x4a63, 0xf14f, 0x56f0, 0xa9c9, 0xbd12, 0x81f0, 0x1, 0x0);
        gbc.writeMem(0x4a63, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xf14f, gbc.sp());
        EXPECT(0x4a65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0358
        gbc.setState(0xbed0, 0x7378, 0x1410, 0xb86e, 0x5f90, 0x274f, 0x1, 0x1);
        gbc.writeMem(0xbed0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x7378, gbc.sp());
        EXPECT(0xbed2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbed0));
        EXPECT(0x40, gbc.readMem(0xbed1));
        // CB 40 0359
        gbc.setState(0xccd4, 0xa432, 0xc3d0, 0xee7d, 0xd0ee, 0x4b8e, 0x0, 0x1);
        gbc.writeMem(0xccd4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xa432, gbc.sp());
        EXPECT(0xccd6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccd4));
        EXPECT(0x40, gbc.readMem(0xccd5));
        // CB 40 035A
        gbc.setState(0xdf1, 0x29f9, 0x74a0, 0xcb35, 0xd78d, 0x4bec, 0x0, 0x0);
        gbc.writeMem(0xdf1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x29f9, gbc.sp());
        EXPECT(0xdf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 035B
        gbc.setState(0xae3c, 0x6f6f, 0xa2c0, 0xddf5, 0x18c3, 0xb589, 0x1, 0x1);
        gbc.writeMem(0xae3c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x6f6f, gbc.sp());
        EXPECT(0xae3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae3c));
        EXPECT(0x40, gbc.readMem(0xae3d));
        // CB 40 035C
        gbc.setState(0x6ad5, 0xee48, 0x99b0, 0xeac5, 0x9d27, 0x8f11, 0x0, 0x0);
        gbc.writeMem(0x6ad5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xee48, gbc.sp());
        EXPECT(0x6ad7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 035E
        gbc.setState(0x644d, 0xf447, 0xcae0, 0x498c, 0x9d55, 0x6fcd, 0x1, 0x0);
        gbc.writeMem(0x644d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xf447, gbc.sp());
        EXPECT(0x644f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 035F
        gbc.setState(0x7fae, 0x3103, 0x95a0, 0x1db1, 0x1980, 0xedd2, 0x1, 0x1);
        gbc.writeMem(0x7fae, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x3103, gbc.sp());
        EXPECT(0x7fb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0360
        gbc.setState(0x9313, 0xf12b, 0xfa30, 0xbbcb, 0x49af, 0x8cbf, 0x1, 0x1);
        gbc.writeMem(0x9313, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xf12b, gbc.sp());
        EXPECT(0x9315, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9313));
        EXPECT(0x40, gbc.readMem(0x9314));
        // CB 40 0361
        gbc.setState(0xd0cc, 0xeafa, 0x8720, 0x6880, 0xae1c, 0xaba8, 0x1, 0x1);
        gbc.writeMem(0xd0cc, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xeafa, gbc.sp());
        EXPECT(0xd0ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0cc));
        EXPECT(0x40, gbc.readMem(0xd0cd));
        // CB 40 0362
        gbc.setState(0x2d2e, 0xc627, 0xb180, 0x20af, 0xaacd, 0x805d, 0x0, 0x0);
        gbc.writeMem(0x2d2e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xc627, gbc.sp());
        EXPECT(0x2d30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0363
        gbc.setState(0x6b15, 0x198b, 0x3800, 0xaed, 0x1bac, 0xc03b, 0x1, 0x1);
        gbc.writeMem(0x6b15, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x198b, gbc.sp());
        EXPECT(0x6b17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0364
        gbc.setState(0x1547, 0x9db5, 0xda60, 0xaed8, 0xb4e8, 0x36d6, 0x1, 0x0);
        gbc.writeMem(0x1547, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x9db5, gbc.sp());
        EXPECT(0x1549, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0365
        gbc.setState(0x39b2, 0xa39d, 0x29c0, 0xabd8, 0x6588, 0xc04e, 0x0, 0x0);
        gbc.writeMem(0x39b2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xa39d, gbc.sp());
        EXPECT(0x39b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0366
        gbc.setState(0x5f3f, 0x7e0d, 0x32e0, 0x5c22, 0x49de, 0x81b4, 0x0, 0x1);
        gbc.writeMem(0x5f3f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x7e0d, gbc.sp());
        EXPECT(0x5f41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0367
        gbc.setState(0x8c47, 0x8c2d, 0xdb40, 0xb853, 0xf132, 0x64dd, 0x1, 0x1);
        gbc.writeMem(0x8c47, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x8c2d, gbc.sp());
        EXPECT(0x8c49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c47));
        EXPECT(0x40, gbc.readMem(0x8c48));
        // CB 40 0368
        gbc.setState(0x8f61, 0xba05, 0x4e0, 0x297a, 0x20a8, 0xb78d, 0x1, 0x0);
        gbc.writeMem(0x8f61, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xba05, gbc.sp());
        EXPECT(0x8f63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f61));
        EXPECT(0x40, gbc.readMem(0x8f62));
        // CB 40 0369
        gbc.setState(0xa26a, 0xda6b, 0x4e60, 0xd7d6, 0x29b4, 0x3403, 0x1, 0x1);
        gbc.writeMem(0xa26a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xda6b, gbc.sp());
        EXPECT(0xa26c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa26a));
        EXPECT(0x40, gbc.readMem(0xa26b));
        // CB 40 036A
        gbc.setState(0x9d6f, 0x9499, 0xbac0, 0x755b, 0xcd4f, 0x8f9c, 0x1, 0x1);
        gbc.writeMem(0x9d6f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x9499, gbc.sp());
        EXPECT(0x9d71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d6f));
        EXPECT(0x40, gbc.readMem(0x9d70));
        // CB 40 036B
        gbc.setState(0x6bd4, 0x8a56, 0xb410, 0x749c, 0xb147, 0xd227, 0x1, 0x0);
        gbc.writeMem(0x6bd4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x8a56, gbc.sp());
        EXPECT(0x6bd6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 036C
        gbc.setState(0x7683, 0x580f, 0x3b70, 0x77b0, 0xc4f, 0xf67b, 0x0, 0x1);
        gbc.writeMem(0x7683, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x580f, gbc.sp());
        EXPECT(0x7685, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 036D
        gbc.setState(0xd9b4, 0xf108, 0xe9c0, 0x4448, 0x6c52, 0xb822, 0x1, 0x1);
        gbc.writeMem(0xd9b4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xf108, gbc.sp());
        EXPECT(0xd9b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9b4));
        EXPECT(0x40, gbc.readMem(0xd9b5));
        // CB 40 036E
        gbc.setState(0xb67c, 0x16d6, 0x160, 0xb04f, 0x9287, 0xcf47, 0x0, 0x1);
        gbc.writeMem(0xb67c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x16d6, gbc.sp());
        EXPECT(0xb67e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb67c));
        EXPECT(0x40, gbc.readMem(0xb67d));
        // CB 40 0370
        gbc.setState(0x25f4, 0xcb56, 0x56e0, 0x2dc9, 0xe11a, 0xc784, 0x1, 0x1);
        gbc.writeMem(0x25f4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xcb56, gbc.sp());
        EXPECT(0x25f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0371
        gbc.setState(0xa818, 0xeecf, 0x1090, 0xb98e, 0xf6e7, 0x4105, 0x0, 0x1);
        gbc.writeMem(0xa818, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xeecf, gbc.sp());
        EXPECT(0xa81a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa818));
        EXPECT(0x40, gbc.readMem(0xa819));
        // CB 40 0372
        gbc.setState(0xbcec, 0x3f5d, 0xfdb0, 0xc3c4, 0x36d0, 0x1c46, 0x1, 0x0);
        gbc.writeMem(0xbcec, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x3f5d, gbc.sp());
        EXPECT(0xbcee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcec));
        EXPECT(0x40, gbc.readMem(0xbced));
        // CB 40 0373
        gbc.setState(0xee61, 0x8b37, 0x1c10, 0x3c55, 0x76c7, 0xfb5b, 0x0, 0x0);
        gbc.writeMem(0xee61, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x8b37, gbc.sp());
        EXPECT(0xee63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee61));
        EXPECT(0x40, gbc.readMem(0xee62));
        // CB 40 0374
        gbc.setState(0xd69e, 0x6996, 0xb5b0, 0x912d, 0x78f7, 0x1267, 0x0, 0x1);
        gbc.writeMem(0xd69e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x6996, gbc.sp());
        EXPECT(0xd6a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd69e));
        EXPECT(0x40, gbc.readMem(0xd69f));
        // CB 40 0375
        gbc.setState(0x60c6, 0x9a72, 0xee30, 0x1c9, 0x3cf8, 0x66, 0x1, 0x0);
        gbc.writeMem(0x60c6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x9a72, gbc.sp());
        EXPECT(0x60c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0376
        gbc.setState(0xe63e, 0x9a2f, 0xa9f0, 0xcda, 0xe0c7, 0x46a3, 0x0, 0x0);
        gbc.writeMem(0xe63e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x9a2f, gbc.sp());
        EXPECT(0xe640, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe63e));
        EXPECT(0x40, gbc.readMem(0xe63f));
        // CB 40 0377
        gbc.setState(0x1235, 0x1198, 0x5900, 0x1189, 0x8f2a, 0x1f3d, 0x1, 0x0);
        gbc.writeMem(0x1235, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x1198, gbc.sp());
        EXPECT(0x1237, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0378
        gbc.setState(0x7617, 0xdde6, 0xfed0, 0x92fd, 0xec34, 0x3cfa, 0x1, 0x0);
        gbc.writeMem(0x7617, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xdde6, gbc.sp());
        EXPECT(0x7619, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0379
        gbc.setState(0x701, 0xfdcc, 0xee00, 0x2bab, 0xbcb4, 0xf884, 0x1, 0x0);
        gbc.writeMem(0x701, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xfdcc, gbc.sp());
        EXPECT(0x703, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 037A
        gbc.setState(0x4cce, 0x3caa, 0xf240, 0x5e34, 0xb5e, 0x1f9c, 0x0, 0x1);
        gbc.writeMem(0x4cce, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x3caa, gbc.sp());
        EXPECT(0x4cd0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 037B
        gbc.setState(0x623b, 0xe613, 0xb800, 0xb845, 0x5cbb, 0xd54c, 0x1, 0x0);
        gbc.writeMem(0x623b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xe613, gbc.sp());
        EXPECT(0x623d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 037C
        gbc.setState(0x9538, 0x2640, 0xdca0, 0x892c, 0x41ef, 0x491b, 0x1, 0x0);
        gbc.writeMem(0x9538, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x2640, gbc.sp());
        EXPECT(0x953a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9538));
        EXPECT(0x40, gbc.readMem(0x9539));
        // CB 40 037D
        gbc.setState(0xbe87, 0x957b, 0x2df0, 0x695e, 0xcc1e, 0x4cc4, 0x1, 0x1);
        gbc.writeMem(0xbe87, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x957b, gbc.sp());
        EXPECT(0xbe89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe87));
        EXPECT(0x40, gbc.readMem(0xbe88));
        // CB 40 037E
        gbc.setState(0x1e04, 0xf674, 0xee50, 0x92c, 0xd63, 0x5eb4, 0x1, 0x1);
        gbc.writeMem(0x1e04, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xf674, gbc.sp());
        EXPECT(0x1e06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 037F
        gbc.setState(0x1c0f, 0xff24, 0xf430, 0xd6a1, 0xda1c, 0x23ae, 0x0, 0x1);
        gbc.writeMem(0x1c0f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xff24, gbc.sp());
        EXPECT(0x1c11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0380
        gbc.setState(0xb858, 0xe035, 0x6770, 0x2074, 0xec47, 0x2f48, 0x1, 0x1);
        gbc.writeMem(0xb858, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xe035, gbc.sp());
        EXPECT(0xb85a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb858));
        EXPECT(0x40, gbc.readMem(0xb859));
        // CB 40 0381
        gbc.setState(0x6fe, 0x4fde, 0x5ca0, 0x22e8, 0x7614, 0x2ab6, 0x0, 0x1);
        gbc.writeMem(0x6fe, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x4fde, gbc.sp());
        EXPECT(0x700, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0382
        gbc.setState(0x67d7, 0x868b, 0x4310, 0xc99b, 0xdaa1, 0x5403, 0x0, 0x0);
        gbc.writeMem(0x67d7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x868b, gbc.sp());
        EXPECT(0x67d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0383
        gbc.setState(0x39e1, 0xafea, 0xef50, 0xfb2d, 0x3742, 0x35ee, 0x0, 0x0);
        gbc.writeMem(0x39e1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xafea, gbc.sp());
        EXPECT(0x39e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0384
        gbc.setState(0xd5d1, 0xb7d5, 0x6c70, 0xee4c, 0x661f, 0xa9c4, 0x0, 0x0);
        gbc.writeMem(0xd5d1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xb7d5, gbc.sp());
        EXPECT(0xd5d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5d1));
        EXPECT(0x40, gbc.readMem(0xd5d2));
        // CB 40 0385
        gbc.setState(0x77a7, 0x2c7b, 0xcd00, 0x8e6, 0x2db9, 0x8f2b, 0x0, 0x1);
        gbc.writeMem(0x77a7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x2c7b, gbc.sp());
        EXPECT(0x77a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0386
        gbc.setState(0x8ba1, 0xa04b, 0xecf0, 0x3858, 0xaa05, 0xe995, 0x1, 0x0);
        gbc.writeMem(0x8ba1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xa04b, gbc.sp());
        EXPECT(0x8ba3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ba1));
        EXPECT(0x40, gbc.readMem(0x8ba2));
        // CB 40 0387
        gbc.setState(0x6ebf, 0x1bf0, 0x3760, 0x68a5, 0xdd04, 0xc3b3, 0x1, 0x1);
        gbc.writeMem(0x6ebf, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x1bf0, gbc.sp());
        EXPECT(0x6ec1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0388
        gbc.setState(0x476a, 0xb50d, 0x3e80, 0xbc5, 0xb67, 0xa8ea, 0x1, 0x1);
        gbc.writeMem(0x476a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xb50d, gbc.sp());
        EXPECT(0x476c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0389
        gbc.setState(0x9be1, 0x412c, 0xca30, 0x6d02, 0xe54e, 0xcd06, 0x1, 0x1);
        gbc.writeMem(0x9be1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x412c, gbc.sp());
        EXPECT(0x9be3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9be1));
        EXPECT(0x40, gbc.readMem(0x9be2));
        // CB 40 038A
        gbc.setState(0xca7f, 0xe60d, 0x7eb0, 0xdeba, 0xb424, 0x437e, 0x1, 0x0);
        gbc.writeMem(0xca7f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xe60d, gbc.sp());
        EXPECT(0xca81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca7f));
        EXPECT(0x40, gbc.readMem(0xca80));
        // CB 40 038B
        gbc.setState(0xdfc8, 0x3e9, 0x6eb0, 0x92d2, 0x7e17, 0xa37f, 0x0, 0x0);
        gbc.writeMem(0xdfc8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x3e9, gbc.sp());
        EXPECT(0xdfca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfc8));
        EXPECT(0x40, gbc.readMem(0xdfc9));
        // CB 40 038C
        gbc.setState(0x42fe, 0xcfa0, 0x7460, 0x76ac, 0xb868, 0xae86, 0x1, 0x1);
        gbc.writeMem(0x42fe, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xcfa0, gbc.sp());
        EXPECT(0x4300, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 038D
        gbc.setState(0xd899, 0x5f3f, 0x6690, 0x6d7f, 0x5977, 0x70aa, 0x1, 0x0);
        gbc.writeMem(0xd899, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x5f3f, gbc.sp());
        EXPECT(0xd89b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd899));
        EXPECT(0x40, gbc.readMem(0xd89a));
        // CB 40 038E
        gbc.setState(0x9517, 0xc115, 0x9fc0, 0x37b6, 0xf772, 0xb77, 0x1, 0x1);
        gbc.writeMem(0x9517, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xc115, gbc.sp());
        EXPECT(0x9519, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9517));
        EXPECT(0x40, gbc.readMem(0x9518));
        // CB 40 038F
        gbc.setState(0x24d1, 0x904d, 0xd450, 0x9b68, 0x643d, 0x5a88, 0x0, 0x1);
        gbc.writeMem(0x24d1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x904d, gbc.sp());
        EXPECT(0x24d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0391
        gbc.setState(0x2c9b, 0x9b01, 0x25a0, 0x9a1b, 0x9693, 0xf220, 0x0, 0x1);
        gbc.writeMem(0x2c9b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x9b01, gbc.sp());
        EXPECT(0x2c9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0392
        gbc.setState(0x6599, 0xf3fa, 0xbb80, 0x6262, 0xb0e3, 0xdc74, 0x0, 0x0);
        gbc.writeMem(0x6599, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xf3fa, gbc.sp());
        EXPECT(0x659b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 0393
        gbc.setState(0x858d, 0x7b3c, 0x8ab0, 0xdd54, 0xbcb6, 0x2292, 0x0, 0x0);
        gbc.writeMem(0x858d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x7b3c, gbc.sp());
        EXPECT(0x858f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x858d));
        EXPECT(0x40, gbc.readMem(0x858e));
        // CB 40 0394
        gbc.setState(0x6b9e, 0x172a, 0xc750, 0x5f4c, 0xe6c0, 0xe1b6, 0x1, 0x1);
        gbc.writeMem(0x6b9e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x172a, gbc.sp());
        EXPECT(0x6ba0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0395
        gbc.setState(0x3e90, 0x4c80, 0x76f0, 0xc61b, 0xb077, 0x6c42, 0x1, 0x0);
        gbc.writeMem(0x3e90, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x4c80, gbc.sp());
        EXPECT(0x3e92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0397
        gbc.setState(0xb4a6, 0xfeb3, 0xa380, 0x9abc, 0x8980, 0xbd55, 0x0, 0x1);
        gbc.writeMem(0xb4a6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xfeb3, gbc.sp());
        EXPECT(0xb4a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4a6));
        EXPECT(0x40, gbc.readMem(0xb4a7));
        // CB 40 0398
        gbc.setState(0x63a5, 0x6eac, 0xbab0, 0x796e, 0xbf90, 0xd063, 0x1, 0x1);
        gbc.writeMem(0x63a5, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x6eac, gbc.sp());
        EXPECT(0x63a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 0399
        gbc.setState(0x8d51, 0x2d95, 0x4820, 0x6622, 0xf48e, 0xf25, 0x0, 0x0);
        gbc.writeMem(0x8d51, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x2d95, gbc.sp());
        EXPECT(0x8d53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d51));
        EXPECT(0x40, gbc.readMem(0x8d52));
        // CB 40 039A
        gbc.setState(0x372e, 0x96d7, 0xee70, 0xe886, 0x3b17, 0xbe14, 0x0, 0x1);
        gbc.writeMem(0x372e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x96d7, gbc.sp());
        EXPECT(0x3730, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 039B
        gbc.setState(0x992d, 0x634b, 0x53b0, 0xaf73, 0x4264, 0x676e, 0x1, 0x0);
        gbc.writeMem(0x992d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x634b, gbc.sp());
        EXPECT(0x992f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x992d));
        EXPECT(0x40, gbc.readMem(0x992e));
        // CB 40 039C
        gbc.setState(0xb979, 0xc214, 0x7370, 0xd8b5, 0x3114, 0xbf17, 0x1, 0x0);
        gbc.writeMem(0xb979, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xc214, gbc.sp());
        EXPECT(0xb97b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb979));
        EXPECT(0x40, gbc.readMem(0xb97a));
        // CB 40 039D
        gbc.setState(0x34db, 0x2983, 0xf710, 0xf3e4, 0xfe28, 0xc6e5, 0x0, 0x1);
        gbc.writeMem(0x34db, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x2983, gbc.sp());
        EXPECT(0x34dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 039E
        gbc.setState(0x5334, 0xc4aa, 0x9b30, 0xc317, 0xbc61, 0xc84e, 0x1, 0x1);
        gbc.writeMem(0x5334, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xc4aa, gbc.sp());
        EXPECT(0x5336, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03A0
        gbc.setState(0x2258, 0x11b9, 0x110, 0x964b, 0xd5b2, 0x4fbf, 0x0, 0x0);
        gbc.writeMem(0x2258, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x11b9, gbc.sp());
        EXPECT(0x225a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03A1
        gbc.setState(0xd324, 0xe711, 0xf830, 0x663f, 0x3751, 0xd771, 0x1, 0x0);
        gbc.writeMem(0xd324, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xe711, gbc.sp());
        EXPECT(0xd326, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd324));
        EXPECT(0x40, gbc.readMem(0xd325));
        // CB 40 03A2
        gbc.setState(0x32e, 0x8a3c, 0x9d0, 0x13fa, 0x1b8a, 0xe1ba, 0x0, 0x0);
        gbc.writeMem(0x32e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x8a3c, gbc.sp());
        EXPECT(0x330, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03A3
        gbc.setState(0xad16, 0xebcb, 0xcb20, 0x3e2c, 0x8b42, 0xae52, 0x0, 0x1);
        gbc.writeMem(0xad16, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xebcb, gbc.sp());
        EXPECT(0xad18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad16));
        EXPECT(0x40, gbc.readMem(0xad17));
        // CB 40 03A4
        gbc.setState(0x9c81, 0x226a, 0xcab0, 0xd73, 0xf0da, 0x6478, 0x0, 0x1);
        gbc.writeMem(0x9c81, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x226a, gbc.sp());
        EXPECT(0x9c83, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c81));
        EXPECT(0x40, gbc.readMem(0x9c82));
        // CB 40 03A5
        gbc.setState(0x78e2, 0x1fa2, 0x9ff0, 0x545e, 0xf072, 0x4ab, 0x1, 0x0);
        gbc.writeMem(0x78e2, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x1fa2, gbc.sp());
        EXPECT(0x78e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03A6
        gbc.setState(0x3f7e, 0x8e7a, 0x9890, 0xf3af, 0x17c6, 0xe04e, 0x0, 0x0);
        gbc.writeMem(0x3f7e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x8e7a, gbc.sp());
        EXPECT(0x3f80, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03A7
        gbc.setState(0xa549, 0xfecb, 0x9880, 0x5a94, 0x2f6c, 0xc559, 0x1, 0x0);
        gbc.writeMem(0xa549, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xfecb, gbc.sp());
        EXPECT(0xa54b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa549));
        EXPECT(0x40, gbc.readMem(0xa54a));
        // CB 40 03A8
        gbc.setState(0xe7ff, 0xf59b, 0xfec0, 0x25bc, 0xe84b, 0x95e3, 0x1, 0x1);
        gbc.writeMem(0xe7ff, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xf59b, gbc.sp());
        EXPECT(0xe801, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7ff));
        EXPECT(0x40, gbc.readMem(0xe800));
        // CB 40 03A9
        gbc.setState(0xae64, 0xc852, 0xf850, 0xf037, 0x17ad, 0xcabe, 0x0, 0x1);
        gbc.writeMem(0xae64, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xc852, gbc.sp());
        EXPECT(0xae66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae64));
        EXPECT(0x40, gbc.readMem(0xae65));
        // CB 40 03AA
        gbc.setState(0xd436, 0x2c6, 0x1b40, 0x26b0, 0xa2ed, 0xe31, 0x0, 0x1);
        gbc.writeMem(0xd436, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x2c6, gbc.sp());
        EXPECT(0xd438, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd436));
        EXPECT(0x40, gbc.readMem(0xd437));
        // CB 40 03AB
        gbc.setState(0x27bd, 0xc031, 0x7480, 0x16fe, 0xcd08, 0x91e7, 0x1, 0x1);
        gbc.writeMem(0x27bd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xc031, gbc.sp());
        EXPECT(0x27bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03AC
        gbc.setState(0xb48e, 0xec0e, 0xbff0, 0x35ef, 0xacd0, 0x4fa4, 0x1, 0x1);
        gbc.writeMem(0xb48e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xec0e, gbc.sp());
        EXPECT(0xb490, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb48e));
        EXPECT(0x40, gbc.readMem(0xb48f));
        // CB 40 03AD
        gbc.setState(0x125e, 0x9755, 0x5430, 0xfd08, 0x656c, 0xec3f, 0x1, 0x1);
        gbc.writeMem(0x125e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x9755, gbc.sp());
        EXPECT(0x1260, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03AE
        gbc.setState(0x7bbd, 0x730b, 0x8b0, 0xd1b6, 0xa77b, 0xf1, 0x1, 0x0);
        gbc.writeMem(0x7bbd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x730b, gbc.sp());
        EXPECT(0x7bbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03AF
        gbc.setState(0x4e6, 0x1e9, 0xe90, 0xa0b2, 0xd560, 0x13f8, 0x1, 0x0);
        gbc.writeMem(0x4e6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x1e9, gbc.sp());
        EXPECT(0x4e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03B0
        gbc.setState(0xf56, 0x1454, 0x6b50, 0x7f6b, 0x5f17, 0xdd3d, 0x0, 0x1);
        gbc.writeMem(0xf56, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x1454, gbc.sp());
        EXPECT(0xf58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03B1
        gbc.setState(0xe7b1, 0xc197, 0xce60, 0xb60, 0x76be, 0x6150, 0x1, 0x0);
        gbc.writeMem(0xe7b1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xc197, gbc.sp());
        EXPECT(0xe7b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7b1));
        EXPECT(0x40, gbc.readMem(0xe7b2));
        // CB 40 03B2
        gbc.setState(0xed26, 0xef33, 0xf430, 0x6415, 0xc455, 0x961e, 0x0, 0x0);
        gbc.writeMem(0xed26, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xef33, gbc.sp());
        EXPECT(0xed28, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed26));
        EXPECT(0x40, gbc.readMem(0xed27));
        // CB 40 03B3
        gbc.setState(0xc4, 0xd76c, 0x4b40, 0xc720, 0x3b01, 0xfa1c, 0x0, 0x0);
        gbc.writeMem(0xc4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xd76c, gbc.sp());
        EXPECT(0xc6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03B5
        gbc.setState(0xafe4, 0x426d, 0x9cb0, 0xe732, 0x1122, 0xfd98, 0x0, 0x1);
        gbc.writeMem(0xafe4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x426d, gbc.sp());
        EXPECT(0xafe6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafe4));
        EXPECT(0x40, gbc.readMem(0xafe5));
        // CB 40 03B6
        gbc.setState(0x8658, 0x6892, 0x94b0, 0xe124, 0xf5fb, 0x4233, 0x0, 0x1);
        gbc.writeMem(0x8658, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x6892, gbc.sp());
        EXPECT(0x865a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8658));
        EXPECT(0x40, gbc.readMem(0x8659));
        // CB 40 03B7
        gbc.setState(0x9111, 0x30b9, 0x7aa0, 0xed9c, 0x2c84, 0xff2e, 0x1, 0x1);
        gbc.writeMem(0x9111, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x30b9, gbc.sp());
        EXPECT(0x9113, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9111));
        EXPECT(0x40, gbc.readMem(0x9112));
        // CB 40 03B8
        gbc.setState(0xa15d, 0xd31f, 0xe410, 0x1b72, 0x7271, 0xe752, 0x0, 0x0);
        gbc.writeMem(0xa15d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xd31f, gbc.sp());
        EXPECT(0xa15f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa15d));
        EXPECT(0x40, gbc.readMem(0xa15e));
        // CB 40 03B9
        gbc.setState(0xb71f, 0xb4ff, 0x88a0, 0x9bf0, 0x86c, 0xd5df, 0x1, 0x1);
        gbc.writeMem(0xb71f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xb4ff, gbc.sp());
        EXPECT(0xb721, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb71f));
        EXPECT(0x40, gbc.readMem(0xb720));
        // CB 40 03BA
        gbc.setState(0x2204, 0xea0f, 0xdf10, 0x30bb, 0x243d, 0x6c66, 0x0, 0x1);
        gbc.writeMem(0x2204, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xea0f, gbc.sp());
        EXPECT(0x2206, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03BB
        gbc.setState(0x66d6, 0x4303, 0xa540, 0x9fb2, 0xd3b7, 0xda4c, 0x1, 0x0);
        gbc.writeMem(0x66d6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x4303, gbc.sp());
        EXPECT(0x66d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03BC
        gbc.setState(0x6b72, 0x70ea, 0xed10, 0xeb83, 0x8cb1, 0x776f, 0x1, 0x1);
        gbc.writeMem(0x6b72, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x70ea, gbc.sp());
        EXPECT(0x6b74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03BD
        gbc.setState(0xe738, 0xca0, 0x1250, 0x40ac, 0x8aa0, 0xf6fa, 0x1, 0x0);
        gbc.writeMem(0xe738, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xca0, gbc.sp());
        EXPECT(0xe73a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe738));
        EXPECT(0x40, gbc.readMem(0xe739));
        // CB 40 03BE
        gbc.setState(0x6277, 0x76b0, 0x8a40, 0x1668, 0xaf37, 0x9f2b, 0x1, 0x1);
        gbc.writeMem(0x6277, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x76b0, gbc.sp());
        EXPECT(0x6279, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03BF
        gbc.setState(0x4bac, 0x8bb6, 0x3070, 0x2205, 0x2a64, 0x5f7f, 0x1, 0x0);
        gbc.writeMem(0x4bac, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x8bb6, gbc.sp());
        EXPECT(0x4bae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03C1
        gbc.setState(0x1cd8, 0x82dd, 0x1e0, 0x895f, 0x565, 0x5844, 0x0, 0x0);
        gbc.writeMem(0x1cd8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x82dd, gbc.sp());
        EXPECT(0x1cda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03C2
        gbc.setState(0x11e9, 0x502d, 0x2610, 0xe572, 0x92d3, 0x7cf9, 0x1, 0x0);
        gbc.writeMem(0x11e9, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x502d, gbc.sp());
        EXPECT(0x11eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03C3
        gbc.setState(0x7cb4, 0xf69d, 0xabf0, 0x5b72, 0x8fe7, 0xd14, 0x0, 0x0);
        gbc.writeMem(0x7cb4, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xf69d, gbc.sp());
        EXPECT(0x7cb6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03C4
        gbc.setState(0x1621, 0x51b4, 0xb430, 0x971a, 0x59bc, 0x6bac, 0x0, 0x0);
        gbc.writeMem(0x1621, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x51b4, gbc.sp());
        EXPECT(0x1623, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03C5
        gbc.setState(0xa02d, 0xda6b, 0x3640, 0x74f, 0xa91b, 0x741c, 0x0, 0x1);
        gbc.writeMem(0xa02d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xda6b, gbc.sp());
        EXPECT(0xa02f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa02d));
        EXPECT(0x40, gbc.readMem(0xa02e));
        // CB 40 03C6
        gbc.setState(0x413c, 0x31fc, 0xe4d0, 0xca25, 0x80ab, 0xc564, 0x0, 0x1);
        gbc.writeMem(0x413c, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x31fc, gbc.sp());
        EXPECT(0x413e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03C7
        gbc.setState(0x4aa3, 0x5553, 0xee40, 0xa913, 0x2aa8, 0x383, 0x1, 0x0);
        gbc.writeMem(0x4aa3, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x5553, gbc.sp());
        EXPECT(0x4aa5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03C8
        gbc.setState(0x6735, 0x9dc0, 0xd9f0, 0x2691, 0x6627, 0xc94a, 0x0, 0x0);
        gbc.writeMem(0x6735, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x9dc0, gbc.sp());
        EXPECT(0x6737, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03C9
        gbc.setState(0xe29b, 0xaf89, 0xee00, 0x8f32, 0x3523, 0xecce, 0x0, 0x1);
        gbc.writeMem(0xe29b, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xaf89, gbc.sp());
        EXPECT(0xe29d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe29b));
        EXPECT(0x40, gbc.readMem(0xe29c));
        // CB 40 03CA
        gbc.setState(0x63de, 0x2db8, 0x9140, 0x8112, 0x8727, 0xefb7, 0x1, 0x0);
        gbc.writeMem(0x63de, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x2db8, gbc.sp());
        EXPECT(0x63e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03CB
        gbc.setState(0x46d7, 0x1df9, 0x1bc0, 0x67f, 0x43c9, 0x4ad6, 0x1, 0x0);
        gbc.writeMem(0x46d7, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x1df9, gbc.sp());
        EXPECT(0x46d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03CC
        gbc.setState(0xce0f, 0x89d2, 0x3b00, 0xf1e0, 0x81ea, 0xa66b, 0x0, 0x0);
        gbc.writeMem(0xce0f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x89d2, gbc.sp());
        EXPECT(0xce11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce0f));
        EXPECT(0x40, gbc.readMem(0xce10));
        // CB 40 03CD
        gbc.setState(0xe9e1, 0x1f6, 0x3e30, 0xb7c5, 0x23b6, 0xe1a6, 0x1, 0x0);
        gbc.writeMem(0xe9e1, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x1f6, gbc.sp());
        EXPECT(0xe9e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9e1));
        EXPECT(0x40, gbc.readMem(0xe9e2));
        // CB 40 03CE
        gbc.setState(0xb764, 0x35db, 0x7160, 0x6263, 0x2f11, 0x2e09, 0x0, 0x0);
        gbc.writeMem(0xb764, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x35db, gbc.sp());
        EXPECT(0xb766, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb764));
        EXPECT(0x40, gbc.readMem(0xb765));
        // CB 40 03CF
        gbc.setState(0xe07a, 0x813a, 0x9ae0, 0x6d4b, 0x3cc2, 0x5203, 0x1, 0x1);
        gbc.writeMem(0xe07a, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x813a, gbc.sp());
        EXPECT(0xe07c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe07a));
        EXPECT(0x40, gbc.readMem(0xe07b));
        // CB 40 03D0
        gbc.setState(0x3948, 0xf730, 0xa450, 0x5667, 0x4412, 0xab0d, 0x0, 0x0);
        gbc.writeMem(0x3948, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xf730, gbc.sp());
        EXPECT(0x394a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03D1
        gbc.setState(0xddb8, 0xd226, 0x9570, 0x9c1a, 0x8816, 0xa4ca, 0x1, 0x1);
        gbc.writeMem(0xddb8, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xd226, gbc.sp());
        EXPECT(0xddba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddb8));
        EXPECT(0x40, gbc.readMem(0xddb9));
        // CB 40 03D2
        gbc.setState(0xba29, 0x2c7b, 0x8fa0, 0xd3a8, 0xd1f3, 0xade9, 0x0, 0x1);
        gbc.writeMem(0xba29, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x2c7b, gbc.sp());
        EXPECT(0xba2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba29));
        EXPECT(0x40, gbc.readMem(0xba2a));
        // CB 40 03D3
        gbc.setState(0x181e, 0xf23d, 0x93d0, 0x4fa7, 0x3819, 0xa650, 0x0, 0x1);
        gbc.writeMem(0x181e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xf23d, gbc.sp());
        EXPECT(0x1820, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03D4
        gbc.setState(0x136, 0x868, 0xf720, 0xcd1, 0xbdb6, 0x959, 0x1, 0x0);
        gbc.writeMem(0x136, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x868, gbc.sp());
        EXPECT(0x138, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03D5
        gbc.setState(0x5491, 0x940c, 0x6e10, 0x9f22, 0x8ee6, 0xd096, 0x0, 0x1);
        gbc.writeMem(0x5491, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x940c, gbc.sp());
        EXPECT(0x5493, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03D6
        gbc.setState(0xc80e, 0xe948, 0x6f0, 0x7e6b, 0xe49a, 0x3f64, 0x0, 0x1);
        gbc.writeMem(0xc80e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xe948, gbc.sp());
        EXPECT(0xc810, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc80e));
        EXPECT(0x40, gbc.readMem(0xc80f));
        // CB 40 03D7
        gbc.setState(0xc620, 0x47e0, 0x2110, 0x984d, 0x59ab, 0xc4, 0x1, 0x0);
        gbc.writeMem(0xc620, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x47e0, gbc.sp());
        EXPECT(0xc622, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc620));
        EXPECT(0x40, gbc.readMem(0xc621));
        // CB 40 03D8
        gbc.setState(0x6e83, 0xbbdc, 0x6120, 0x2ab5, 0x6b55, 0x3b85, 0x0, 0x1);
        gbc.writeMem(0x6e83, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xbbdc, gbc.sp());
        EXPECT(0x6e85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03D9
        gbc.setState(0x5980, 0x8eae, 0x4db0, 0x14d, 0xb9d3, 0x9941, 0x0, 0x0);
        gbc.writeMem(0x5980, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x8eae, gbc.sp());
        EXPECT(0x5982, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03DA
        gbc.setState(0x89ec, 0x6f4, 0x6300, 0x9ae3, 0xce61, 0xb418, 0x0, 0x0);
        gbc.writeMem(0x89ec, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x6f4, gbc.sp());
        EXPECT(0x89ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89ec));
        EXPECT(0x40, gbc.readMem(0x89ed));
        // CB 40 03DC
        gbc.setState(0x2d44, 0x641c, 0x6a40, 0x39f5, 0x54b7, 0x5536, 0x0, 0x0);
        gbc.writeMem(0x2d44, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x641c, gbc.sp());
        EXPECT(0x2d46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03DD
        gbc.setState(0xb07d, 0x219b, 0x40, 0xd551, 0xb533, 0x8753, 0x0, 0x1);
        gbc.writeMem(0xb07d, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x219b, gbc.sp());
        EXPECT(0xb07f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb07d));
        EXPECT(0x40, gbc.readMem(0xb07e));
        // CB 40 03DE
        gbc.setState(0x158e, 0xf4c4, 0x7390, 0x4d69, 0x6aa7, 0xc44d, 0x1, 0x0);
        gbc.writeMem(0x158e, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xf4c4, gbc.sp());
        EXPECT(0x1590, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03DF
        gbc.setState(0xd6c0, 0x6158, 0xa530, 0x2040, 0x410d, 0x1785, 0x1, 0x0);
        gbc.writeMem(0xd6c0, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x6158, gbc.sp());
        EXPECT(0xd6c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6c0));
        EXPECT(0x40, gbc.readMem(0xd6c1));
        // CB 40 03E0
        gbc.setState(0x35cd, 0xbc, 0xf910, 0x2f8a, 0xec50, 0xd5b9, 0x1, 0x0);
        gbc.writeMem(0x35cd, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xbc, gbc.sp());
        EXPECT(0x35cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03E1
        gbc.setState(0x5ffb, 0xb627, 0xaa40, 0x5348, 0x3989, 0xafc7, 0x0, 0x0);
        gbc.writeMem(0x5ffb, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xb627, gbc.sp());
        EXPECT(0x5ffd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03E2
        gbc.setState(0x75f, 0x15a8, 0x5a40, 0xa69a, 0x8d48, 0xdc26, 0x1, 0x0);
        gbc.writeMem(0x75f, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x15a8, gbc.sp());
        EXPECT(0x761, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03E3
        gbc.setState(0x3967, 0xb614, 0xad80, 0x2087, 0xbe5d, 0x8606, 0x1, 0x0);
        gbc.writeMem(0x3967, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xb614, gbc.sp());
        EXPECT(0x3969, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03E4
        gbc.setState(0x4863, 0x787a, 0x7110, 0x847, 0x3489, 0x636, 0x0, 0x0);
        gbc.writeMem(0x4863, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x787a, gbc.sp());
        EXPECT(0x4865, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 40 03E5
        gbc.setState(0xa7aa, 0x36ea, 0x3b80, 0x4780, 0xc308, 0xe92f, 0x0, 0x0);
        gbc.writeMem(0xa7aa, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x36ea, gbc.sp());
        EXPECT(0xa7ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7aa));
        EXPECT(0x40, gbc.readMem(0xa7ab));
        // CB 40 03E6
        gbc.setState(0x5596, 0x6d65, 0x4bc0, 0xad8, 0xd1a9, 0xc9c7, 0x1, 0x0);
        gbc.writeMem(0x5596, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x6d65, gbc.sp());
        EXPECT(0x5598, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 40 03E7
        gbc.setState(0x1ed6, 0x3d17, 0xde10, 0x8fb2, 0xccd7, 0xcc7f, 0x0, 0x1);
        gbc.writeMem(0x1ed6, { 0xcb, 0x40 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x3d17, gbc.sp());
        EXPECT(0x1ed8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
    }
